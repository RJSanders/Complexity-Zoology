('p', 'A', 'ZPP', 'co.RP') => ('-d', 'A', 'ZPP', 'co.RP')
('p', 'A', 'ZPP', 'co.RP') => ('p', 'R', 'ZPP', 'co.RP')
('p', 'A', 'ZPP', 'co.RP') => ('p', 'AA', 'ZPP', 'co.RP')
('p', 'A', 'ZPP', 'RP') => ('-d', 'A', 'ZPP', 'RP')
('p', 'A', 'ZPP', 'RP') => ('p', 'R', 'ZPP', 'RP')
('p', 'A', 'ZPP', 'RP') => ('p', 'AA', 'ZPP', 'RP')
('p', 'AA', 'ZPP', 'RP') => ('-d', 'AA', 'ZPP', 'RP')
('p', 'AA', 'ZPP', 'RP') => ('p', 'T', 'ZPP', 'RP')
('p', 'AA', 'ZPP', 'RP') => ('p', 'EA', 'ZPP', 'RP')
('p', 'AA', 'ZPP', 'co.RP') => ('-d', 'AA', 'ZPP', 'co.RP')
('p', 'AA', 'ZPP', 'co.RP') => ('p', 'T', 'ZPP', 'co.RP')
('p', 'AA', 'ZPP', 'co.RP') => ('p', 'EA', 'ZPP', 'co.RP')
('p', 'EA', 'ZPP', 'co.RP') => ('-d', 'EA', 'ZPP', 'co.RP')
('p', 'EA', 'ZPP', 'co.RP') => ('p', 'E', 'ZPP', 'co.RP')
('p', 'EA', 'ZPP', 'RP') => ('-d', 'EA', 'ZPP', 'RP')
('p', 'EA', 'ZPP', 'RP') => ('p', 'E', 'ZPP', 'RP')
('p', 'E', 'ZPP', 'RP') => ('-d', 'E', 'ZPP', 'RP')
('p', 'E', 'ZPP', 'co.RP') => ('-d', 'E', 'ZPP', 'co.RP')
('p', 'T', 'ZPP', 'co.RP') => ('-d', 'T', 'ZPP', 'co.RP')
('p', 'T', 'ZPP', 'RP') => ('-d', 'T', 'ZPP', 'RP')
('p', 'R', 'ZPP', 'RP') => ('-d', 'R', 'ZPP', 'RP')
('p', 'R', 'ZPP', 'co.RP') => ('-d', 'R', 'ZPP', 'co.RP')
('p', 'A', 'cocap.SBQP', 'SBQP') => ('-d', 'A', 'cocap.SBQP', 'SBQP')
('p', 'A', 'cocap.SBQP', 'SBQP') => ('p', 'R', 'cocap.SBQP', 'SBQP')
('p', 'A', 'cocap.SBQP', 'SBQP') => ('p', 'AA', 'cocap.SBQP', 'SBQP')
('p', 'A', 'cocap.SBQP', 'co.SBQP') => ('-d', 'A', 'cocap.SBQP', 'co.SBQP')
('p', 'A', 'cocap.SBQP', 'co.SBQP') => ('p', 'R', 'cocap.SBQP', 'co.SBQP')
('p', 'A', 'cocap.SBQP', 'co.SBQP') => ('p', 'AA', 'cocap.SBQP', 'co.SBQP')
('p', 'AA', 'cocap.SBQP', 'co.SBQP') => ('-d', 'AA', 'cocap.SBQP', 'co.SBQP')
('p', 'AA', 'cocap.SBQP', 'co.SBQP') => ('p', 'T', 'cocap.SBQP', 'co.SBQP')
('p', 'AA', 'cocap.SBQP', 'co.SBQP') => ('p', 'EA', 'cocap.SBQP', 'co.SBQP')
('p', 'AA', 'cocap.SBQP', 'SBQP') => ('-d', 'AA', 'cocap.SBQP', 'SBQP')
('p', 'AA', 'cocap.SBQP', 'SBQP') => ('p', 'T', 'cocap.SBQP', 'SBQP')
('p', 'AA', 'cocap.SBQP', 'SBQP') => ('p', 'EA', 'cocap.SBQP', 'SBQP')
('p', 'EA', 'cocap.SBQP', 'SBQP') => ('-d', 'EA', 'cocap.SBQP', 'SBQP')
('p', 'EA', 'cocap.SBQP', 'SBQP') => ('p', 'E', 'cocap.SBQP', 'SBQP')
('p', 'EA', 'cocap.SBQP', 'co.SBQP') => ('-d', 'EA', 'cocap.SBQP', 'co.SBQP')
('p', 'EA', 'cocap.SBQP', 'co.SBQP') => ('p', 'E', 'cocap.SBQP', 'co.SBQP')
('p', 'E', 'cocap.SBQP', 'co.SBQP') => ('-d', 'E', 'cocap.SBQP', 'co.SBQP')
('p', 'E', 'cocap.SBQP', 'SBQP') => ('-d', 'E', 'cocap.SBQP', 'SBQP')
('p', 'T', 'cocap.SBQP', 'SBQP') => ('-d', 'T', 'cocap.SBQP', 'SBQP')
('p', 'T', 'cocap.SBQP', 'co.SBQP') => ('-d', 'T', 'cocap.SBQP', 'co.SBQP')
('p', 'R', 'cocap.SBQP', 'co.SBQP') => ('-d', 'R', 'cocap.SBQP', 'co.SBQP')
('p', 'R', 'cocap.SBQP', 'SBQP') => ('-d', 'R', 'cocap.SBQP', 'SBQP')
('p', 'A', 'cocap.AWPP', 'AWPP') => ('-d', 'A', 'cocap.AWPP', 'AWPP')
('p', 'A', 'cocap.AWPP', 'AWPP') => ('p', 'R', 'cocap.AWPP', 'AWPP')
('p', 'A', 'cocap.AWPP', 'AWPP') => ('p', 'AA', 'cocap.AWPP', 'AWPP')
('p', 'A', 'cocap.AWPP', 'co.AWPP') => ('-d', 'A', 'cocap.AWPP', 'co.AWPP')
('p', 'A', 'cocap.AWPP', 'co.AWPP') => ('p', 'R', 'cocap.AWPP', 'co.AWPP')
('p', 'A', 'cocap.AWPP', 'co.AWPP') => ('p', 'AA', 'cocap.AWPP', 'co.AWPP')
('p', 'AA', 'cocap.AWPP', 'co.AWPP') => ('-d', 'AA', 'cocap.AWPP', 'co.AWPP')
('p', 'AA', 'cocap.AWPP', 'co.AWPP') => ('p', 'T', 'cocap.AWPP', 'co.AWPP')
('p', 'AA', 'cocap.AWPP', 'co.AWPP') => ('p', 'EA', 'cocap.AWPP', 'co.AWPP')
('p', 'AA', 'cocap.AWPP', 'AWPP') => ('-d', 'AA', 'cocap.AWPP', 'AWPP')
('p', 'AA', 'cocap.AWPP', 'AWPP') => ('p', 'T', 'cocap.AWPP', 'AWPP')
('p', 'AA', 'cocap.AWPP', 'AWPP') => ('p', 'EA', 'cocap.AWPP', 'AWPP')
('p', 'EA', 'cocap.AWPP', 'AWPP') => ('-d', 'EA', 'cocap.AWPP', 'AWPP')
('p', 'EA', 'cocap.AWPP', 'AWPP') => ('p', 'E', 'cocap.AWPP', 'AWPP')
('p', 'EA', 'cocap.AWPP', 'co.AWPP') => ('-d', 'EA', 'cocap.AWPP', 'co.AWPP')
('p', 'EA', 'cocap.AWPP', 'co.AWPP') => ('p', 'E', 'cocap.AWPP', 'co.AWPP')
('p', 'E', 'cocap.AWPP', 'co.AWPP') => ('-d', 'E', 'cocap.AWPP', 'co.AWPP')
('p', 'E', 'cocap.AWPP', 'AWPP') => ('-d', 'E', 'cocap.AWPP', 'AWPP')
('p', 'T', 'cocap.AWPP', 'AWPP') => ('-d', 'T', 'cocap.AWPP', 'AWPP')
('p', 'T', 'cocap.AWPP', 'co.AWPP') => ('-d', 'T', 'cocap.AWPP', 'co.AWPP')
('p', 'R', 'cocap.AWPP', 'co.AWPP') => ('-d', 'R', 'cocap.AWPP', 'co.AWPP')
('p', 'R', 'cocap.AWPP', 'AWPP') => ('-d', 'R', 'cocap.AWPP', 'AWPP')
('p', 'A', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('-d', 'A', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('p', 'R', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('p', 'AA', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('-d', 'A', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('p', 'R', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('p', 'AA', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('-d', 'AA', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('p', 'T', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('p', 'EA', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('-d', 'AA', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('p', 'T', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('p', 'EA', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'EA', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('-d', 'EA', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'EA', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('p', 'E', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'EA', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('-d', 'EA', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'EA', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('p', 'E', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'E', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('-d', 'E', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'E', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('-d', 'E', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'T', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('-d', 'T', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'T', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('-d', 'T', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'R', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly') => ('-d', 'R', 'cocap.QCMA/qpoly', 'co.QCMA/qpoly')
('p', 'R', 'cocap.QCMA/qpoly', 'QCMA/qpoly') => ('-d', 'R', 'cocap.QCMA/qpoly', 'QCMA/qpoly')
('p', 'A', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('-d', 'A', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'A', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('p', 'R', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'A', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('p', 'AA', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'A', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('-d', 'A', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'A', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('p', 'R', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'A', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('p', 'AA', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('-d', 'AA', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('p', 'T', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('p', 'EA', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('-d', 'AA', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'AA', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('p', 'T', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'AA', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('p', 'EA', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'EA', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('-d', 'EA', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'EA', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('p', 'E', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'EA', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('-d', 'EA', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'EA', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('p', 'E', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'E', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('-d', 'E', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'E', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('-d', 'E', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'T', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('-d', 'T', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'T', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('-d', 'T', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'R', 'cocap.QMA/qpoly', 'co.QMA/qpoly') => ('-d', 'R', 'cocap.QMA/qpoly', 'co.QMA/qpoly')
('p', 'R', 'cocap.QMA/qpoly', 'QMA/qpoly') => ('-d', 'R', 'cocap.QMA/qpoly', 'QMA/qpoly')
('p', 'A', 'cocap.Sigma_2P', 'Sigma_2P') => ('-d', 'A', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'A', 'cocap.Sigma_2P', 'Sigma_2P') => ('p', 'R', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'A', 'cocap.Sigma_2P', 'Sigma_2P') => ('p', 'AA', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'A', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('-d', 'A', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'A', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('p', 'R', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'A', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('p', 'AA', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'AA', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('-d', 'AA', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'AA', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('p', 'T', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'AA', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('p', 'EA', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'AA', 'cocap.Sigma_2P', 'Sigma_2P') => ('-d', 'AA', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'AA', 'cocap.Sigma_2P', 'Sigma_2P') => ('p', 'T', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'AA', 'cocap.Sigma_2P', 'Sigma_2P') => ('p', 'EA', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'EA', 'cocap.Sigma_2P', 'Sigma_2P') => ('-d', 'EA', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'EA', 'cocap.Sigma_2P', 'Sigma_2P') => ('p', 'E', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'EA', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('-d', 'EA', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'EA', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('p', 'E', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'E', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('-d', 'E', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'E', 'cocap.Sigma_2P', 'Sigma_2P') => ('-d', 'E', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'T', 'cocap.Sigma_2P', 'Sigma_2P') => ('-d', 'T', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'T', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('-d', 'T', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'R', 'cocap.Sigma_2P', 'co.Sigma_2P') => ('-d', 'R', 'cocap.Sigma_2P', 'co.Sigma_2P')
('p', 'R', 'cocap.Sigma_2P', 'Sigma_2P') => ('-d', 'R', 'cocap.Sigma_2P', 'Sigma_2P')
('p', 'A', 'cocap.MP', 'co.MP') => ('-d', 'A', 'cocap.MP', 'co.MP')
('p', 'A', 'cocap.MP', 'co.MP') => ('p', 'R', 'cocap.MP', 'co.MP')
('p', 'A', 'cocap.MP', 'co.MP') => ('p', 'AA', 'cocap.MP', 'co.MP')
('p', 'A', 'cocap.MP', 'MP') => ('-d', 'A', 'cocap.MP', 'MP')
('p', 'A', 'cocap.MP', 'MP') => ('p', 'R', 'cocap.MP', 'MP')
('p', 'A', 'cocap.MP', 'MP') => ('p', 'AA', 'cocap.MP', 'MP')
('p', 'AA', 'cocap.MP', 'MP') => ('-d', 'AA', 'cocap.MP', 'MP')
('p', 'AA', 'cocap.MP', 'MP') => ('p', 'T', 'cocap.MP', 'MP')
('p', 'AA', 'cocap.MP', 'MP') => ('p', 'EA', 'cocap.MP', 'MP')
('p', 'AA', 'cocap.MP', 'co.MP') => ('-d', 'AA', 'cocap.MP', 'co.MP')
('p', 'AA', 'cocap.MP', 'co.MP') => ('p', 'T', 'cocap.MP', 'co.MP')
('p', 'AA', 'cocap.MP', 'co.MP') => ('p', 'EA', 'cocap.MP', 'co.MP')
('p', 'EA', 'cocap.MP', 'co.MP') => ('-d', 'EA', 'cocap.MP', 'co.MP')
('p', 'EA', 'cocap.MP', 'co.MP') => ('p', 'E', 'cocap.MP', 'co.MP')
('p', 'EA', 'cocap.MP', 'MP') => ('-d', 'EA', 'cocap.MP', 'MP')
('p', 'EA', 'cocap.MP', 'MP') => ('p', 'E', 'cocap.MP', 'MP')
('p', 'E', 'cocap.MP', 'MP') => ('-d', 'E', 'cocap.MP', 'MP')
('p', 'E', 'cocap.MP', 'co.MP') => ('-d', 'E', 'cocap.MP', 'co.MP')
('p', 'T', 'cocap.MP', 'co.MP') => ('-d', 'T', 'cocap.MP', 'co.MP')
('p', 'T', 'cocap.MP', 'MP') => ('-d', 'T', 'cocap.MP', 'MP')
('p', 'R', 'cocap.MP', 'MP') => ('-d', 'R', 'cocap.MP', 'MP')
('p', 'R', 'cocap.MP', 'co.MP') => ('-d', 'R', 'cocap.MP', 'co.MP')
('p', 'A', 'cocap.QMA(2)', 'co.QMA(2)') => ('-d', 'A', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'A', 'cocap.QMA(2)', 'co.QMA(2)') => ('p', 'R', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'A', 'cocap.QMA(2)', 'co.QMA(2)') => ('p', 'AA', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'A', 'cocap.QMA(2)', 'QMA(2)') => ('-d', 'A', 'cocap.QMA(2)', 'QMA(2)')
('p', 'A', 'cocap.QMA(2)', 'QMA(2)') => ('p', 'R', 'cocap.QMA(2)', 'QMA(2)')
('p', 'A', 'cocap.QMA(2)', 'QMA(2)') => ('p', 'AA', 'cocap.QMA(2)', 'QMA(2)')
('p', 'AA', 'cocap.QMA(2)', 'QMA(2)') => ('-d', 'AA', 'cocap.QMA(2)', 'QMA(2)')
('p', 'AA', 'cocap.QMA(2)', 'QMA(2)') => ('p', 'T', 'cocap.QMA(2)', 'QMA(2)')
('p', 'AA', 'cocap.QMA(2)', 'QMA(2)') => ('p', 'EA', 'cocap.QMA(2)', 'QMA(2)')
('p', 'AA', 'cocap.QMA(2)', 'co.QMA(2)') => ('-d', 'AA', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'AA', 'cocap.QMA(2)', 'co.QMA(2)') => ('p', 'T', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'AA', 'cocap.QMA(2)', 'co.QMA(2)') => ('p', 'EA', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'EA', 'cocap.QMA(2)', 'co.QMA(2)') => ('-d', 'EA', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'EA', 'cocap.QMA(2)', 'co.QMA(2)') => ('p', 'E', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'EA', 'cocap.QMA(2)', 'QMA(2)') => ('-d', 'EA', 'cocap.QMA(2)', 'QMA(2)')
('p', 'EA', 'cocap.QMA(2)', 'QMA(2)') => ('p', 'E', 'cocap.QMA(2)', 'QMA(2)')
('p', 'E', 'cocap.QMA(2)', 'QMA(2)') => ('-d', 'E', 'cocap.QMA(2)', 'QMA(2)')
('p', 'E', 'cocap.QMA(2)', 'co.QMA(2)') => ('-d', 'E', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'T', 'cocap.QMA(2)', 'co.QMA(2)') => ('-d', 'T', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'T', 'cocap.QMA(2)', 'QMA(2)') => ('-d', 'T', 'cocap.QMA(2)', 'QMA(2)')
('p', 'R', 'cocap.QMA(2)', 'QMA(2)') => ('-d', 'R', 'cocap.QMA(2)', 'QMA(2)')
('p', 'R', 'cocap.QMA(2)', 'co.QMA(2)') => ('-d', 'R', 'cocap.QMA(2)', 'co.QMA(2)')
('p', 'A', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('-d', 'A', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'A', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('p', 'R', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'A', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('p', 'AA', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'A', 'cocap.QMIP_cme', 'QMIP_cme') => ('-d', 'A', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'A', 'cocap.QMIP_cme', 'QMIP_cme') => ('p', 'R', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'A', 'cocap.QMIP_cme', 'QMIP_cme') => ('p', 'AA', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'AA', 'cocap.QMIP_cme', 'QMIP_cme') => ('-d', 'AA', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'AA', 'cocap.QMIP_cme', 'QMIP_cme') => ('p', 'T', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'AA', 'cocap.QMIP_cme', 'QMIP_cme') => ('p', 'EA', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'AA', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('-d', 'AA', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'AA', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('p', 'T', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'AA', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('p', 'EA', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'EA', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('-d', 'EA', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'EA', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('p', 'E', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'EA', 'cocap.QMIP_cme', 'QMIP_cme') => ('-d', 'EA', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'EA', 'cocap.QMIP_cme', 'QMIP_cme') => ('p', 'E', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'E', 'cocap.QMIP_cme', 'QMIP_cme') => ('-d', 'E', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'E', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('-d', 'E', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'T', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('-d', 'T', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'T', 'cocap.QMIP_cme', 'QMIP_cme') => ('-d', 'T', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'R', 'cocap.QMIP_cme', 'QMIP_cme') => ('-d', 'R', 'cocap.QMIP_cme', 'QMIP_cme')
('p', 'R', 'cocap.QMIP_cme', 'co.QMIP_cme') => ('-d', 'R', 'cocap.QMIP_cme', 'co.QMIP_cme')
('p', 'A', 'cocap.QIP(2)', 'co.QIP(2)') => ('-d', 'A', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'A', 'cocap.QIP(2)', 'co.QIP(2)') => ('p', 'R', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'A', 'cocap.QIP(2)', 'co.QIP(2)') => ('p', 'AA', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'A', 'cocap.QIP(2)', 'QIP(2)') => ('-d', 'A', 'cocap.QIP(2)', 'QIP(2)')
('p', 'A', 'cocap.QIP(2)', 'QIP(2)') => ('p', 'R', 'cocap.QIP(2)', 'QIP(2)')
('p', 'A', 'cocap.QIP(2)', 'QIP(2)') => ('p', 'AA', 'cocap.QIP(2)', 'QIP(2)')
('p', 'AA', 'cocap.QIP(2)', 'QIP(2)') => ('-d', 'AA', 'cocap.QIP(2)', 'QIP(2)')
('p', 'AA', 'cocap.QIP(2)', 'QIP(2)') => ('p', 'T', 'cocap.QIP(2)', 'QIP(2)')
('p', 'AA', 'cocap.QIP(2)', 'QIP(2)') => ('p', 'EA', 'cocap.QIP(2)', 'QIP(2)')
('p', 'AA', 'cocap.QIP(2)', 'co.QIP(2)') => ('-d', 'AA', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'AA', 'cocap.QIP(2)', 'co.QIP(2)') => ('p', 'T', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'AA', 'cocap.QIP(2)', 'co.QIP(2)') => ('p', 'EA', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'EA', 'cocap.QIP(2)', 'co.QIP(2)') => ('-d', 'EA', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'EA', 'cocap.QIP(2)', 'co.QIP(2)') => ('p', 'E', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'EA', 'cocap.QIP(2)', 'QIP(2)') => ('-d', 'EA', 'cocap.QIP(2)', 'QIP(2)')
('p', 'EA', 'cocap.QIP(2)', 'QIP(2)') => ('p', 'E', 'cocap.QIP(2)', 'QIP(2)')
('p', 'E', 'cocap.QIP(2)', 'QIP(2)') => ('-d', 'E', 'cocap.QIP(2)', 'QIP(2)')
('p', 'E', 'cocap.QIP(2)', 'co.QIP(2)') => ('-d', 'E', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'T', 'cocap.QIP(2)', 'co.QIP(2)') => ('-d', 'T', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'T', 'cocap.QIP(2)', 'QIP(2)') => ('-d', 'T', 'cocap.QIP(2)', 'QIP(2)')
('p', 'R', 'cocap.QIP(2)', 'QIP(2)') => ('-d', 'R', 'cocap.QIP(2)', 'QIP(2)')
('p', 'R', 'cocap.QIP(2)', 'co.QIP(2)') => ('-d', 'R', 'cocap.QIP(2)', 'co.QIP(2)')
('p', 'A', 'cocap.NP', 'co.NP') => ('-d', 'A', 'cocap.NP', 'co.NP')
('p', 'A', 'cocap.NP', 'co.NP') => ('p', 'R', 'cocap.NP', 'co.NP')
('p', 'A', 'cocap.NP', 'co.NP') => ('p', 'AA', 'cocap.NP', 'co.NP')
('p', 'A', 'cocap.NP', 'NP') => ('-d', 'A', 'cocap.NP', 'NP')
('p', 'A', 'cocap.NP', 'NP') => ('p', 'R', 'cocap.NP', 'NP')
('p', 'A', 'cocap.NP', 'NP') => ('p', 'AA', 'cocap.NP', 'NP')
('p', 'A', '(NP-cap-coNP)/poly', 'NP/poly') => ('-d', 'A', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'NP/poly') => ('p', 'R', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'NP/poly') => ('p', 'AA', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('-d', 'A', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('p', 'R', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('p', 'AA', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('-d', 'A', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('p', 'R', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('p', 'AA', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('-d', 'AA', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('p', 'T', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('p', 'EA', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'EA', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('-d', 'EA', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'EA', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('p', 'E', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'E', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('-d', 'E', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'T', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('-d', 'T', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'R', '(NP-cap-coNP)/poly', 'cocap.NP/poly') => ('-d', 'R', '(NP-cap-coNP)/poly', 'cocap.NP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('-d', 'AA', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('p', 'T', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('p', 'EA', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'NP/poly') => ('-d', 'AA', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'NP/poly') => ('p', 'T', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'NP/poly') => ('p', 'EA', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'EA', '(NP-cap-coNP)/poly', 'NP/poly') => ('-d', 'EA', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'EA', '(NP-cap-coNP)/poly', 'NP/poly') => ('p', 'E', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'EA', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('-d', 'EA', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'EA', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('p', 'E', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'E', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('-d', 'E', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'E', '(NP-cap-coNP)/poly', 'NP/poly') => ('-d', 'E', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'T', '(NP-cap-coNP)/poly', 'NP/poly') => ('-d', 'T', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'T', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('-d', 'T', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'R', '(NP-cap-coNP)/poly', 'co.NP/poly') => ('-d', 'R', '(NP-cap-coNP)/poly', 'co.NP/poly')
('p', 'R', '(NP-cap-coNP)/poly', 'NP/poly') => ('-d', 'R', '(NP-cap-coNP)/poly', 'NP/poly')
('p', 'AA', 'cocap.NP', 'NP') => ('-d', 'AA', 'cocap.NP', 'NP')
('p', 'AA', 'cocap.NP', 'NP') => ('p', 'T', 'cocap.NP', 'NP')
('p', 'AA', 'cocap.NP', 'NP') => ('p', 'EA', 'cocap.NP', 'NP')
('p', 'AA', 'cocap.NP', 'co.NP') => ('-d', 'AA', 'cocap.NP', 'co.NP')
('p', 'AA', 'cocap.NP', 'co.NP') => ('p', 'T', 'cocap.NP', 'co.NP')
('p', 'AA', 'cocap.NP', 'co.NP') => ('p', 'EA', 'cocap.NP', 'co.NP')
('p', 'EA', 'cocap.NP', 'co.NP') => ('-d', 'EA', 'cocap.NP', 'co.NP')
('p', 'EA', 'cocap.NP', 'co.NP') => ('p', 'E', 'cocap.NP', 'co.NP')
('p', 'EA', 'cocap.NP', 'NP') => ('-d', 'EA', 'cocap.NP', 'NP')
('p', 'EA', 'cocap.NP', 'NP') => ('p', 'E', 'cocap.NP', 'NP')
('p', 'E', 'cocap.NP', 'NP') => ('-d', 'E', 'cocap.NP', 'NP')
('p', 'E', 'cocap.NP', 'co.NP') => ('-d', 'E', 'cocap.NP', 'co.NP')
('p', 'T', 'cocap.NP', 'co.NP') => ('-d', 'T', 'cocap.NP', 'co.NP')
('p', 'T', 'cocap.NP', 'NP') => ('-d', 'T', 'cocap.NP', 'NP')
('p', 'R', 'cocap.NP', 'NP') => ('-d', 'R', 'cocap.NP', 'NP')
('p', 'R', 'cocap.NP', 'co.NP') => ('-d', 'R', 'cocap.NP', 'co.NP')
('p', 'A', 'cocap.MIP*_fe', 'MIP*_fe') => ('-d', 'A', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'A', 'cocap.MIP*_fe', 'MIP*_fe') => ('p', 'R', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'A', 'cocap.MIP*_fe', 'MIP*_fe') => ('p', 'AA', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'A', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('-d', 'A', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'A', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('p', 'R', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'A', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('p', 'AA', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'AA', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('-d', 'AA', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'AA', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('p', 'T', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'AA', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('p', 'EA', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'AA', 'cocap.MIP*_fe', 'MIP*_fe') => ('-d', 'AA', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'AA', 'cocap.MIP*_fe', 'MIP*_fe') => ('p', 'T', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'AA', 'cocap.MIP*_fe', 'MIP*_fe') => ('p', 'EA', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'EA', 'cocap.MIP*_fe', 'MIP*_fe') => ('-d', 'EA', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'EA', 'cocap.MIP*_fe', 'MIP*_fe') => ('p', 'E', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'EA', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('-d', 'EA', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'EA', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('p', 'E', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'E', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('-d', 'E', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'E', 'cocap.MIP*_fe', 'MIP*_fe') => ('-d', 'E', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'T', 'cocap.MIP*_fe', 'MIP*_fe') => ('-d', 'T', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'T', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('-d', 'T', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'R', 'cocap.MIP*_fe', 'co.MIP*_fe') => ('-d', 'R', 'cocap.MIP*_fe', 'co.MIP*_fe')
('p', 'R', 'cocap.MIP*_fe', 'MIP*_fe') => ('-d', 'R', 'cocap.MIP*_fe', 'MIP*_fe')
('p', 'A', 'cocap.NEXP', 'NEXP') => ('-d', 'A', 'cocap.NEXP', 'NEXP')
('p', 'A', 'cocap.NEXP', 'NEXP') => ('p', 'R', 'cocap.NEXP', 'NEXP')
('p', 'A', 'cocap.NEXP', 'NEXP') => ('p', 'AA', 'cocap.NEXP', 'NEXP')
('p', 'A', 'cocap.NEXP', 'co.NEXP') => ('-d', 'A', 'cocap.NEXP', 'co.NEXP')
('p', 'A', 'cocap.NEXP', 'co.NEXP') => ('p', 'R', 'cocap.NEXP', 'co.NEXP')
('p', 'A', 'cocap.NEXP', 'co.NEXP') => ('p', 'AA', 'cocap.NEXP', 'co.NEXP')
('p', 'AA', 'cocap.NEXP', 'co.NEXP') => ('-d', 'AA', 'cocap.NEXP', 'co.NEXP')
('p', 'AA', 'cocap.NEXP', 'co.NEXP') => ('p', 'T', 'cocap.NEXP', 'co.NEXP')
('p', 'AA', 'cocap.NEXP', 'co.NEXP') => ('p', 'EA', 'cocap.NEXP', 'co.NEXP')
('p', 'AA', 'cocap.NEXP', 'NEXP') => ('-d', 'AA', 'cocap.NEXP', 'NEXP')
('p', 'AA', 'cocap.NEXP', 'NEXP') => ('p', 'T', 'cocap.NEXP', 'NEXP')
('p', 'AA', 'cocap.NEXP', 'NEXP') => ('p', 'EA', 'cocap.NEXP', 'NEXP')
('p', 'EA', 'cocap.NEXP', 'NEXP') => ('-d', 'EA', 'cocap.NEXP', 'NEXP')
('p', 'EA', 'cocap.NEXP', 'NEXP') => ('p', 'E', 'cocap.NEXP', 'NEXP')
('p', 'EA', 'cocap.NEXP', 'co.NEXP') => ('-d', 'EA', 'cocap.NEXP', 'co.NEXP')
('p', 'EA', 'cocap.NEXP', 'co.NEXP') => ('p', 'E', 'cocap.NEXP', 'co.NEXP')
('p', 'E', 'cocap.NEXP', 'co.NEXP') => ('-d', 'E', 'cocap.NEXP', 'co.NEXP')
('p', 'E', 'cocap.NEXP', 'NEXP') => ('-d', 'E', 'cocap.NEXP', 'NEXP')
('p', 'T', 'cocap.NEXP', 'NEXP') => ('-d', 'T', 'cocap.NEXP', 'NEXP')
('p', 'T', 'cocap.NEXP', 'co.NEXP') => ('-d', 'T', 'cocap.NEXP', 'co.NEXP')
('p', 'R', 'cocap.NEXP', 'co.NEXP') => ('-d', 'R', 'cocap.NEXP', 'co.NEXP')
('p', 'R', 'cocap.NEXP', 'NEXP') => ('-d', 'R', 'cocap.NEXP', 'NEXP')
('p', 'A', 'cocap.QIP', 'co.QIP') => ('-d', 'A', 'cocap.QIP', 'co.QIP')
('p', 'A', 'cocap.QIP', 'co.QIP') => ('p', 'R', 'cocap.QIP', 'co.QIP')
('p', 'A', 'cocap.QIP', 'co.QIP') => ('p', 'AA', 'cocap.QIP', 'co.QIP')
('p', 'A', 'cocap.QIP', 'QIP') => ('-d', 'A', 'cocap.QIP', 'QIP')
('p', 'A', 'cocap.QIP', 'QIP') => ('p', 'R', 'cocap.QIP', 'QIP')
('p', 'A', 'cocap.QIP', 'QIP') => ('p', 'AA', 'cocap.QIP', 'QIP')
('p', 'AA', 'cocap.QIP', 'QIP') => ('-d', 'AA', 'cocap.QIP', 'QIP')
('p', 'AA', 'cocap.QIP', 'QIP') => ('p', 'T', 'cocap.QIP', 'QIP')
('p', 'AA', 'cocap.QIP', 'QIP') => ('p', 'EA', 'cocap.QIP', 'QIP')
('p', 'AA', 'cocap.QIP', 'co.QIP') => ('-d', 'AA', 'cocap.QIP', 'co.QIP')
('p', 'AA', 'cocap.QIP', 'co.QIP') => ('p', 'T', 'cocap.QIP', 'co.QIP')
('p', 'AA', 'cocap.QIP', 'co.QIP') => ('p', 'EA', 'cocap.QIP', 'co.QIP')
('p', 'EA', 'cocap.QIP', 'co.QIP') => ('-d', 'EA', 'cocap.QIP', 'co.QIP')
('p', 'EA', 'cocap.QIP', 'co.QIP') => ('p', 'E', 'cocap.QIP', 'co.QIP')
('p', 'EA', 'cocap.QIP', 'QIP') => ('-d', 'EA', 'cocap.QIP', 'QIP')
('p', 'EA', 'cocap.QIP', 'QIP') => ('p', 'E', 'cocap.QIP', 'QIP')
('p', 'E', 'cocap.QIP', 'QIP') => ('-d', 'E', 'cocap.QIP', 'QIP')
('p', 'E', 'cocap.QIP', 'co.QIP') => ('-d', 'E', 'cocap.QIP', 'co.QIP')
('p', 'T', 'cocap.QIP', 'co.QIP') => ('-d', 'T', 'cocap.QIP', 'co.QIP')
('p', 'T', 'cocap.QIP', 'QIP') => ('-d', 'T', 'cocap.QIP', 'QIP')
('p', 'R', 'cocap.QIP', 'QIP') => ('-d', 'R', 'cocap.QIP', 'QIP')
('p', 'R', 'cocap.QIP', 'co.QIP') => ('-d', 'R', 'cocap.QIP', 'co.QIP')
('p', 'A', 'cocap.QMIP_le', 'QMIP_le') => ('-d', 'A', 'cocap.QMIP_le', 'QMIP_le')
('p', 'A', 'cocap.QMIP_le', 'QMIP_le') => ('p', 'R', 'cocap.QMIP_le', 'QMIP_le')
('p', 'A', 'cocap.QMIP_le', 'QMIP_le') => ('p', 'AA', 'cocap.QMIP_le', 'QMIP_le')
('p', 'A', 'cocap.QMIP_le', 'co.QMIP_le') => ('-d', 'A', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'A', 'cocap.QMIP_le', 'co.QMIP_le') => ('p', 'R', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'A', 'cocap.QMIP_le', 'co.QMIP_le') => ('p', 'AA', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'AA', 'cocap.QMIP_le', 'co.QMIP_le') => ('-d', 'AA', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'AA', 'cocap.QMIP_le', 'co.QMIP_le') => ('p', 'T', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'AA', 'cocap.QMIP_le', 'co.QMIP_le') => ('p', 'EA', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'AA', 'cocap.QMIP_le', 'QMIP_le') => ('-d', 'AA', 'cocap.QMIP_le', 'QMIP_le')
('p', 'AA', 'cocap.QMIP_le', 'QMIP_le') => ('p', 'T', 'cocap.QMIP_le', 'QMIP_le')
('p', 'AA', 'cocap.QMIP_le', 'QMIP_le') => ('p', 'EA', 'cocap.QMIP_le', 'QMIP_le')
('p', 'EA', 'cocap.QMIP_le', 'QMIP_le') => ('-d', 'EA', 'cocap.QMIP_le', 'QMIP_le')
('p', 'EA', 'cocap.QMIP_le', 'QMIP_le') => ('p', 'E', 'cocap.QMIP_le', 'QMIP_le')
('p', 'EA', 'cocap.QMIP_le', 'co.QMIP_le') => ('-d', 'EA', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'EA', 'cocap.QMIP_le', 'co.QMIP_le') => ('p', 'E', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'E', 'cocap.QMIP_le', 'co.QMIP_le') => ('-d', 'E', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'E', 'cocap.QMIP_le', 'QMIP_le') => ('-d', 'E', 'cocap.QMIP_le', 'QMIP_le')
('p', 'T', 'cocap.QMIP_le', 'QMIP_le') => ('-d', 'T', 'cocap.QMIP_le', 'QMIP_le')
('p', 'T', 'cocap.QMIP_le', 'co.QMIP_le') => ('-d', 'T', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'R', 'cocap.QMIP_le', 'co.QMIP_le') => ('-d', 'R', 'cocap.QMIP_le', 'co.QMIP_le')
('p', 'R', 'cocap.QMIP_le', 'QMIP_le') => ('-d', 'R', 'cocap.QMIP_le', 'QMIP_le')
('p', 'A', 'cocap.QMA', 'co.QMA') => ('-d', 'A', 'cocap.QMA', 'co.QMA')
('p', 'A', 'cocap.QMA', 'co.QMA') => ('p', 'R', 'cocap.QMA', 'co.QMA')
('p', 'A', 'cocap.QMA', 'co.QMA') => ('p', 'AA', 'cocap.QMA', 'co.QMA')
('p', 'A', 'cocap.QMA', 'QMA') => ('-d', 'A', 'cocap.QMA', 'QMA')
('p', 'A', 'cocap.QMA', 'QMA') => ('p', 'R', 'cocap.QMA', 'QMA')
('p', 'A', 'cocap.QMA', 'QMA') => ('p', 'AA', 'cocap.QMA', 'QMA')
('p', 'AA', 'cocap.QMA', 'QMA') => ('-d', 'AA', 'cocap.QMA', 'QMA')
('p', 'AA', 'cocap.QMA', 'QMA') => ('p', 'T', 'cocap.QMA', 'QMA')
('p', 'AA', 'cocap.QMA', 'QMA') => ('p', 'EA', 'cocap.QMA', 'QMA')
('p', 'AA', 'cocap.QMA', 'co.QMA') => ('-d', 'AA', 'cocap.QMA', 'co.QMA')
('p', 'AA', 'cocap.QMA', 'co.QMA') => ('p', 'T', 'cocap.QMA', 'co.QMA')
('p', 'AA', 'cocap.QMA', 'co.QMA') => ('p', 'EA', 'cocap.QMA', 'co.QMA')
('p', 'EA', 'cocap.QMA', 'co.QMA') => ('-d', 'EA', 'cocap.QMA', 'co.QMA')
('p', 'EA', 'cocap.QMA', 'co.QMA') => ('p', 'E', 'cocap.QMA', 'co.QMA')
('p', 'EA', 'cocap.QMA', 'QMA') => ('-d', 'EA', 'cocap.QMA', 'QMA')
('p', 'EA', 'cocap.QMA', 'QMA') => ('p', 'E', 'cocap.QMA', 'QMA')
('p', 'E', 'cocap.QMA', 'QMA') => ('-d', 'E', 'cocap.QMA', 'QMA')
('p', 'E', 'cocap.QMA', 'co.QMA') => ('-d', 'E', 'cocap.QMA', 'co.QMA')
('p', 'T', 'cocap.QMA', 'co.QMA') => ('-d', 'T', 'cocap.QMA', 'co.QMA')
('p', 'T', 'cocap.QMA', 'QMA') => ('-d', 'T', 'cocap.QMA', 'QMA')
('p', 'R', 'cocap.QMA', 'QMA') => ('-d', 'R', 'cocap.QMA', 'QMA')
('p', 'R', 'cocap.QMA', 'co.QMA') => ('-d', 'R', 'cocap.QMA', 'co.QMA')
('p', 'A', 'cocap.NIQSZK', 'NIQSZK') => ('-d', 'A', 'cocap.NIQSZK', 'NIQSZK')
('p', 'A', 'cocap.NIQSZK', 'NIQSZK') => ('p', 'R', 'cocap.NIQSZK', 'NIQSZK')
('p', 'A', 'cocap.NIQSZK', 'NIQSZK') => ('p', 'AA', 'cocap.NIQSZK', 'NIQSZK')
('p', 'A', 'cocap.NIQSZK', 'co.NIQSZK') => ('-d', 'A', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'A', 'cocap.NIQSZK', 'co.NIQSZK') => ('p', 'R', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'A', 'cocap.NIQSZK', 'co.NIQSZK') => ('p', 'AA', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'AA', 'cocap.NIQSZK', 'co.NIQSZK') => ('-d', 'AA', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'AA', 'cocap.NIQSZK', 'co.NIQSZK') => ('p', 'T', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'AA', 'cocap.NIQSZK', 'co.NIQSZK') => ('p', 'EA', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'AA', 'cocap.NIQSZK', 'NIQSZK') => ('-d', 'AA', 'cocap.NIQSZK', 'NIQSZK')
('p', 'AA', 'cocap.NIQSZK', 'NIQSZK') => ('p', 'T', 'cocap.NIQSZK', 'NIQSZK')
('p', 'AA', 'cocap.NIQSZK', 'NIQSZK') => ('p', 'EA', 'cocap.NIQSZK', 'NIQSZK')
('p', 'EA', 'cocap.NIQSZK', 'NIQSZK') => ('-d', 'EA', 'cocap.NIQSZK', 'NIQSZK')
('p', 'EA', 'cocap.NIQSZK', 'NIQSZK') => ('p', 'E', 'cocap.NIQSZK', 'NIQSZK')
('p', 'EA', 'cocap.NIQSZK', 'co.NIQSZK') => ('-d', 'EA', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'EA', 'cocap.NIQSZK', 'co.NIQSZK') => ('p', 'E', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'E', 'cocap.NIQSZK', 'co.NIQSZK') => ('-d', 'E', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'E', 'cocap.NIQSZK', 'NIQSZK') => ('-d', 'E', 'cocap.NIQSZK', 'NIQSZK')
('p', 'T', 'cocap.NIQSZK', 'NIQSZK') => ('-d', 'T', 'cocap.NIQSZK', 'NIQSZK')
('p', 'T', 'cocap.NIQSZK', 'co.NIQSZK') => ('-d', 'T', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'R', 'cocap.NIQSZK', 'co.NIQSZK') => ('-d', 'R', 'cocap.NIQSZK', 'co.NIQSZK')
('p', 'R', 'cocap.NIQSZK', 'NIQSZK') => ('-d', 'R', 'cocap.NIQSZK', 'NIQSZK')
('p', 'A', 'cocap.MA', 'MA') => ('-d', 'A', 'cocap.MA', 'MA')
('p', 'A', 'cocap.MA', 'MA') => ('p', 'R', 'cocap.MA', 'MA')
('p', 'A', 'cocap.MA', 'MA') => ('p', 'AA', 'cocap.MA', 'MA')
('p', 'A', 'cocap.MA', 'co.MA') => ('-d', 'A', 'cocap.MA', 'co.MA')
('p', 'A', 'cocap.MA', 'co.MA') => ('p', 'R', 'cocap.MA', 'co.MA')
('p', 'A', 'cocap.MA', 'co.MA') => ('p', 'AA', 'cocap.MA', 'co.MA')
('p', 'AA', 'cocap.MA', 'co.MA') => ('-d', 'AA', 'cocap.MA', 'co.MA')
('p', 'AA', 'cocap.MA', 'co.MA') => ('p', 'T', 'cocap.MA', 'co.MA')
('p', 'AA', 'cocap.MA', 'co.MA') => ('p', 'EA', 'cocap.MA', 'co.MA')
('p', 'AA', 'cocap.MA', 'MA') => ('-d', 'AA', 'cocap.MA', 'MA')
('p', 'AA', 'cocap.MA', 'MA') => ('p', 'T', 'cocap.MA', 'MA')
('p', 'AA', 'cocap.MA', 'MA') => ('p', 'EA', 'cocap.MA', 'MA')
('p', 'EA', 'cocap.MA', 'MA') => ('-d', 'EA', 'cocap.MA', 'MA')
('p', 'EA', 'cocap.MA', 'MA') => ('p', 'E', 'cocap.MA', 'MA')
('p', 'EA', 'cocap.MA', 'co.MA') => ('-d', 'EA', 'cocap.MA', 'co.MA')
('p', 'EA', 'cocap.MA', 'co.MA') => ('p', 'E', 'cocap.MA', 'co.MA')
('p', 'E', 'cocap.MA', 'co.MA') => ('-d', 'E', 'cocap.MA', 'co.MA')
('p', 'E', 'cocap.MA', 'MA') => ('-d', 'E', 'cocap.MA', 'MA')
('p', 'T', 'cocap.MA', 'MA') => ('-d', 'T', 'cocap.MA', 'MA')
('p', 'T', 'cocap.MA', 'co.MA') => ('-d', 'T', 'cocap.MA', 'co.MA')
('p', 'R', 'cocap.MA', 'co.MA') => ('-d', 'R', 'cocap.MA', 'co.MA')
('p', 'R', 'cocap.MA', 'MA') => ('-d', 'R', 'cocap.MA', 'MA')
('p', 'A', 'cocap.QCMA', 'co.QCMA') => ('-d', 'A', 'cocap.QCMA', 'co.QCMA')
('p', 'A', 'cocap.QCMA', 'co.QCMA') => ('p', 'R', 'cocap.QCMA', 'co.QCMA')
('p', 'A', 'cocap.QCMA', 'co.QCMA') => ('p', 'AA', 'cocap.QCMA', 'co.QCMA')
('p', 'A', 'cocap.QCMA', 'QCMA') => ('-d', 'A', 'cocap.QCMA', 'QCMA')
('p', 'A', 'cocap.QCMA', 'QCMA') => ('p', 'R', 'cocap.QCMA', 'QCMA')
('p', 'A', 'cocap.QCMA', 'QCMA') => ('p', 'AA', 'cocap.QCMA', 'QCMA')
('p', 'AA', 'cocap.QCMA', 'QCMA') => ('-d', 'AA', 'cocap.QCMA', 'QCMA')
('p', 'AA', 'cocap.QCMA', 'QCMA') => ('p', 'T', 'cocap.QCMA', 'QCMA')
('p', 'AA', 'cocap.QCMA', 'QCMA') => ('p', 'EA', 'cocap.QCMA', 'QCMA')
('p', 'AA', 'cocap.QCMA', 'co.QCMA') => ('-d', 'AA', 'cocap.QCMA', 'co.QCMA')
('p', 'AA', 'cocap.QCMA', 'co.QCMA') => ('p', 'T', 'cocap.QCMA', 'co.QCMA')
('p', 'AA', 'cocap.QCMA', 'co.QCMA') => ('p', 'EA', 'cocap.QCMA', 'co.QCMA')
('p', 'EA', 'cocap.QCMA', 'co.QCMA') => ('-d', 'EA', 'cocap.QCMA', 'co.QCMA')
('p', 'EA', 'cocap.QCMA', 'co.QCMA') => ('p', 'E', 'cocap.QCMA', 'co.QCMA')
('p', 'EA', 'cocap.QCMA', 'QCMA') => ('-d', 'EA', 'cocap.QCMA', 'QCMA')
('p', 'EA', 'cocap.QCMA', 'QCMA') => ('p', 'E', 'cocap.QCMA', 'QCMA')
('p', 'E', 'cocap.QCMA', 'QCMA') => ('-d', 'E', 'cocap.QCMA', 'QCMA')
('p', 'E', 'cocap.QCMA', 'co.QCMA') => ('-d', 'E', 'cocap.QCMA', 'co.QCMA')
('p', 'T', 'cocap.QCMA', 'co.QCMA') => ('-d', 'T', 'cocap.QCMA', 'co.QCMA')
('p', 'T', 'cocap.QCMA', 'QCMA') => ('-d', 'T', 'cocap.QCMA', 'QCMA')
('p', 'R', 'cocap.QCMA', 'QCMA') => ('-d', 'R', 'cocap.QCMA', 'QCMA')
('p', 'R', 'cocap.QCMA', 'co.QCMA') => ('-d', 'R', 'cocap.QCMA', 'co.QCMA')
('p', 'A', 'cocap.NEXP_plo', 'NEXP_plo') => ('-d', 'A', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'A', 'cocap.NEXP_plo', 'NEXP_plo') => ('p', 'R', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'A', 'cocap.NEXP_plo', 'NEXP_plo') => ('p', 'AA', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'A', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('-d', 'A', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'A', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('p', 'R', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'A', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('p', 'AA', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'AA', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'AA', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('p', 'T', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'AA', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('p', 'EA', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'AA', 'cocap.NEXP_plo', 'NEXP_plo') => ('-d', 'AA', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'AA', 'cocap.NEXP_plo', 'NEXP_plo') => ('p', 'T', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'AA', 'cocap.NEXP_plo', 'NEXP_plo') => ('p', 'EA', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'EA', 'cocap.NEXP_plo', 'NEXP_plo') => ('-d', 'EA', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'EA', 'cocap.NEXP_plo', 'NEXP_plo') => ('p', 'E', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'EA', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'EA', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('p', 'E', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'E', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('-d', 'E', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'E', 'cocap.NEXP_plo', 'NEXP_plo') => ('-d', 'E', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'T', 'cocap.NEXP_plo', 'NEXP_plo') => ('-d', 'T', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'T', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('-d', 'T', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'R', 'cocap.NEXP_plo', 'co.NEXP_plo') => ('-d', 'R', 'cocap.NEXP_plo', 'co.NEXP_plo')
('p', 'R', 'cocap.NEXP_plo', 'NEXP_plo') => ('-d', 'R', 'cocap.NEXP_plo', 'NEXP_plo')
('p', 'A', 'cocap.SBP', 'co.SBP') => ('-d', 'A', 'cocap.SBP', 'co.SBP')
('p', 'A', 'cocap.SBP', 'co.SBP') => ('p', 'R', 'cocap.SBP', 'co.SBP')
('p', 'A', 'cocap.SBP', 'co.SBP') => ('p', 'AA', 'cocap.SBP', 'co.SBP')
('p', 'A', 'cocap.SBP', 'SBP') => ('-d', 'A', 'cocap.SBP', 'SBP')
('p', 'A', 'cocap.SBP', 'SBP') => ('p', 'R', 'cocap.SBP', 'SBP')
('p', 'A', 'cocap.SBP', 'SBP') => ('p', 'AA', 'cocap.SBP', 'SBP')
('p', 'AA', 'cocap.SBP', 'SBP') => ('-d', 'AA', 'cocap.SBP', 'SBP')
('p', 'AA', 'cocap.SBP', 'SBP') => ('p', 'T', 'cocap.SBP', 'SBP')
('p', 'AA', 'cocap.SBP', 'SBP') => ('p', 'EA', 'cocap.SBP', 'SBP')
('p', 'AA', 'cocap.SBP', 'co.SBP') => ('-d', 'AA', 'cocap.SBP', 'co.SBP')
('p', 'AA', 'cocap.SBP', 'co.SBP') => ('p', 'T', 'cocap.SBP', 'co.SBP')
('p', 'AA', 'cocap.SBP', 'co.SBP') => ('p', 'EA', 'cocap.SBP', 'co.SBP')
('p', 'EA', 'cocap.SBP', 'co.SBP') => ('-d', 'EA', 'cocap.SBP', 'co.SBP')
('p', 'EA', 'cocap.SBP', 'co.SBP') => ('p', 'E', 'cocap.SBP', 'co.SBP')
('p', 'EA', 'cocap.SBP', 'SBP') => ('-d', 'EA', 'cocap.SBP', 'SBP')
('p', 'EA', 'cocap.SBP', 'SBP') => ('p', 'E', 'cocap.SBP', 'SBP')
('p', 'E', 'cocap.SBP', 'SBP') => ('-d', 'E', 'cocap.SBP', 'SBP')
('p', 'E', 'cocap.SBP', 'co.SBP') => ('-d', 'E', 'cocap.SBP', 'co.SBP')
('p', 'T', 'cocap.SBP', 'co.SBP') => ('-d', 'T', 'cocap.SBP', 'co.SBP')
('p', 'T', 'cocap.SBP', 'SBP') => ('-d', 'T', 'cocap.SBP', 'SBP')
('p', 'R', 'cocap.SBP', 'SBP') => ('-d', 'R', 'cocap.SBP', 'SBP')
('p', 'R', 'cocap.SBP', 'co.SBP') => ('-d', 'R', 'cocap.SBP', 'co.SBP')
('p', 'A', 'cocap.UP', 'UP') => ('-d', 'A', 'cocap.UP', 'UP')
('p', 'A', 'cocap.UP', 'UP') => ('p', 'R', 'cocap.UP', 'UP')
('p', 'A', 'cocap.UP', 'UP') => ('p', 'AA', 'cocap.UP', 'UP')
('p', 'A', 'cocap.UP', 'co.UP') => ('-d', 'A', 'cocap.UP', 'co.UP')
('p', 'A', 'cocap.UP', 'co.UP') => ('p', 'R', 'cocap.UP', 'co.UP')
('p', 'A', 'cocap.UP', 'co.UP') => ('p', 'AA', 'cocap.UP', 'co.UP')
('p', 'AA', 'cocap.UP', 'co.UP') => ('-d', 'AA', 'cocap.UP', 'co.UP')
('p', 'AA', 'cocap.UP', 'co.UP') => ('p', 'T', 'cocap.UP', 'co.UP')
('p', 'AA', 'cocap.UP', 'co.UP') => ('p', 'EA', 'cocap.UP', 'co.UP')
('p', 'AA', 'cocap.UP', 'UP') => ('-d', 'AA', 'cocap.UP', 'UP')
('p', 'AA', 'cocap.UP', 'UP') => ('p', 'T', 'cocap.UP', 'UP')
('p', 'AA', 'cocap.UP', 'UP') => ('p', 'EA', 'cocap.UP', 'UP')
('p', 'EA', 'cocap.UP', 'UP') => ('-d', 'EA', 'cocap.UP', 'UP')
('p', 'EA', 'cocap.UP', 'UP') => ('p', 'E', 'cocap.UP', 'UP')
('p', 'EA', 'cocap.UP', 'co.UP') => ('-d', 'EA', 'cocap.UP', 'co.UP')
('p', 'EA', 'cocap.UP', 'co.UP') => ('p', 'E', 'cocap.UP', 'co.UP')
('p', 'E', 'cocap.UP', 'co.UP') => ('-d', 'E', 'cocap.UP', 'co.UP')
('p', 'E', 'cocap.UP', 'UP') => ('-d', 'E', 'cocap.UP', 'UP')
('p', 'T', 'cocap.UP', 'UP') => ('-d', 'T', 'cocap.UP', 'UP')
('p', 'T', 'cocap.UP', 'co.UP') => ('-d', 'T', 'cocap.UP', 'co.UP')
('p', 'R', 'cocap.UP', 'co.UP') => ('-d', 'R', 'cocap.UP', 'co.UP')
('p', 'R', 'cocap.UP', 'UP') => ('-d', 'R', 'cocap.UP', 'UP')
('p', 'A', 'cocap.QIP(3)', 'QIP(3)') => ('-d', 'A', 'cocap.QIP(3)', 'QIP(3)')
('p', 'A', 'cocap.QIP(3)', 'QIP(3)') => ('p', 'R', 'cocap.QIP(3)', 'QIP(3)')
('p', 'A', 'cocap.QIP(3)', 'QIP(3)') => ('p', 'AA', 'cocap.QIP(3)', 'QIP(3)')
('p', 'A', 'cocap.QIP(3)', 'co.QIP(3)') => ('-d', 'A', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'A', 'cocap.QIP(3)', 'co.QIP(3)') => ('p', 'R', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'A', 'cocap.QIP(3)', 'co.QIP(3)') => ('p', 'AA', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'AA', 'cocap.QIP(3)', 'co.QIP(3)') => ('-d', 'AA', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'AA', 'cocap.QIP(3)', 'co.QIP(3)') => ('p', 'T', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'AA', 'cocap.QIP(3)', 'co.QIP(3)') => ('p', 'EA', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'AA', 'cocap.QIP(3)', 'QIP(3)') => ('-d', 'AA', 'cocap.QIP(3)', 'QIP(3)')
('p', 'AA', 'cocap.QIP(3)', 'QIP(3)') => ('p', 'T', 'cocap.QIP(3)', 'QIP(3)')
('p', 'AA', 'cocap.QIP(3)', 'QIP(3)') => ('p', 'EA', 'cocap.QIP(3)', 'QIP(3)')
('p', 'EA', 'cocap.QIP(3)', 'QIP(3)') => ('-d', 'EA', 'cocap.QIP(3)', 'QIP(3)')
('p', 'EA', 'cocap.QIP(3)', 'QIP(3)') => ('p', 'E', 'cocap.QIP(3)', 'QIP(3)')
('p', 'EA', 'cocap.QIP(3)', 'co.QIP(3)') => ('-d', 'EA', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'EA', 'cocap.QIP(3)', 'co.QIP(3)') => ('p', 'E', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'E', 'cocap.QIP(3)', 'co.QIP(3)') => ('-d', 'E', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'E', 'cocap.QIP(3)', 'QIP(3)') => ('-d', 'E', 'cocap.QIP(3)', 'QIP(3)')
('p', 'T', 'cocap.QIP(3)', 'QIP(3)') => ('-d', 'T', 'cocap.QIP(3)', 'QIP(3)')
('p', 'T', 'cocap.QIP(3)', 'co.QIP(3)') => ('-d', 'T', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'R', 'cocap.QIP(3)', 'co.QIP(3)') => ('-d', 'R', 'cocap.QIP(3)', 'co.QIP(3)')
('p', 'R', 'cocap.QIP(3)', 'QIP(3)') => ('-d', 'R', 'cocap.QIP(3)', 'QIP(3)')
('p', 'A', 'cocap.NISZK', 'NISZK') => ('-d', 'A', 'cocap.NISZK', 'NISZK')
('p', 'A', 'cocap.NISZK', 'NISZK') => ('p', 'R', 'cocap.NISZK', 'NISZK')
('p', 'A', 'cocap.NISZK', 'NISZK') => ('p', 'AA', 'cocap.NISZK', 'NISZK')
('p', 'A', 'cocap.NISZK', 'co.NISZK') => ('-d', 'A', 'cocap.NISZK', 'co.NISZK')
('p', 'A', 'cocap.NISZK', 'co.NISZK') => ('p', 'R', 'cocap.NISZK', 'co.NISZK')
('p', 'A', 'cocap.NISZK', 'co.NISZK') => ('p', 'AA', 'cocap.NISZK', 'co.NISZK')
('p', 'AA', 'cocap.NISZK', 'co.NISZK') => ('-d', 'AA', 'cocap.NISZK', 'co.NISZK')
('p', 'AA', 'cocap.NISZK', 'co.NISZK') => ('p', 'T', 'cocap.NISZK', 'co.NISZK')
('p', 'AA', 'cocap.NISZK', 'co.NISZK') => ('p', 'EA', 'cocap.NISZK', 'co.NISZK')
('p', 'AA', 'cocap.NISZK', 'NISZK') => ('-d', 'AA', 'cocap.NISZK', 'NISZK')
('p', 'AA', 'cocap.NISZK', 'NISZK') => ('p', 'T', 'cocap.NISZK', 'NISZK')
('p', 'AA', 'cocap.NISZK', 'NISZK') => ('p', 'EA', 'cocap.NISZK', 'NISZK')
('p', 'EA', 'cocap.NISZK', 'NISZK') => ('-d', 'EA', 'cocap.NISZK', 'NISZK')
('p', 'EA', 'cocap.NISZK', 'NISZK') => ('p', 'E', 'cocap.NISZK', 'NISZK')
('p', 'EA', 'cocap.NISZK', 'co.NISZK') => ('-d', 'EA', 'cocap.NISZK', 'co.NISZK')
('p', 'EA', 'cocap.NISZK', 'co.NISZK') => ('p', 'E', 'cocap.NISZK', 'co.NISZK')
('p', 'E', 'cocap.NISZK', 'co.NISZK') => ('-d', 'E', 'cocap.NISZK', 'co.NISZK')
('p', 'E', 'cocap.NISZK', 'NISZK') => ('-d', 'E', 'cocap.NISZK', 'NISZK')
('p', 'T', 'cocap.NISZK', 'NISZK') => ('-d', 'T', 'cocap.NISZK', 'NISZK')
('p', 'T', 'cocap.NISZK', 'co.NISZK') => ('-d', 'T', 'cocap.NISZK', 'co.NISZK')
('p', 'R', 'cocap.NISZK', 'co.NISZK') => ('-d', 'R', 'cocap.NISZK', 'co.NISZK')
('p', 'R', 'cocap.NISZK', 'NISZK') => ('-d', 'R', 'cocap.NISZK', 'NISZK')
('p', 'A', 'cocap.AM', 'co.AM') => ('-d', 'A', 'cocap.AM', 'co.AM')
('p', 'A', 'cocap.AM', 'co.AM') => ('p', 'R', 'cocap.AM', 'co.AM')
('p', 'A', 'cocap.AM', 'co.AM') => ('p', 'AA', 'cocap.AM', 'co.AM')
('p', 'A', 'cocap.AM', 'AM') => ('-d', 'A', 'cocap.AM', 'AM')
('p', 'A', 'cocap.AM', 'AM') => ('p', 'R', 'cocap.AM', 'AM')
('p', 'A', 'cocap.AM', 'AM') => ('p', 'AA', 'cocap.AM', 'AM')
('p', 'AA', 'cocap.AM', 'AM') => ('-d', 'AA', 'cocap.AM', 'AM')
('p', 'AA', 'cocap.AM', 'AM') => ('p', 'T', 'cocap.AM', 'AM')
('p', 'AA', 'cocap.AM', 'AM') => ('p', 'EA', 'cocap.AM', 'AM')
('p', 'AA', 'cocap.AM', 'co.AM') => ('-d', 'AA', 'cocap.AM', 'co.AM')
('p', 'AA', 'cocap.AM', 'co.AM') => ('p', 'T', 'cocap.AM', 'co.AM')
('p', 'AA', 'cocap.AM', 'co.AM') => ('p', 'EA', 'cocap.AM', 'co.AM')
('p', 'EA', 'cocap.AM', 'co.AM') => ('-d', 'EA', 'cocap.AM', 'co.AM')
('p', 'EA', 'cocap.AM', 'co.AM') => ('p', 'E', 'cocap.AM', 'co.AM')
('p', 'EA', 'cocap.AM', 'AM') => ('-d', 'EA', 'cocap.AM', 'AM')
('p', 'EA', 'cocap.AM', 'AM') => ('p', 'E', 'cocap.AM', 'AM')
('p', 'E', 'cocap.AM', 'AM') => ('-d', 'E', 'cocap.AM', 'AM')
('p', 'E', 'cocap.AM', 'co.AM') => ('-d', 'E', 'cocap.AM', 'co.AM')
('p', 'T', 'cocap.AM', 'co.AM') => ('-d', 'T', 'cocap.AM', 'co.AM')
('p', 'T', 'cocap.AM', 'AM') => ('-d', 'T', 'cocap.AM', 'AM')
('p', 'R', 'cocap.AM', 'AM') => ('-d', 'R', 'cocap.AM', 'AM')
('p', 'R', 'cocap.AM', 'co.AM') => ('-d', 'R', 'cocap.AM', 'co.AM')
('p', 'A', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('-d', 'A', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'A', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('p', 'R', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'A', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('p', 'AA', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'A', 'cocap.QMIP_ne', 'QMIP_ne') => ('-d', 'A', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'A', 'cocap.QMIP_ne', 'QMIP_ne') => ('p', 'R', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'A', 'cocap.QMIP_ne', 'QMIP_ne') => ('p', 'AA', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'AA', 'cocap.QMIP_ne', 'QMIP_ne') => ('-d', 'AA', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'AA', 'cocap.QMIP_ne', 'QMIP_ne') => ('p', 'T', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'AA', 'cocap.QMIP_ne', 'QMIP_ne') => ('p', 'EA', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'AA', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'AA', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('p', 'T', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'AA', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('p', 'EA', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'EA', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'EA', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('p', 'E', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'EA', 'cocap.QMIP_ne', 'QMIP_ne') => ('-d', 'EA', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'EA', 'cocap.QMIP_ne', 'QMIP_ne') => ('p', 'E', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'E', 'cocap.QMIP_ne', 'QMIP_ne') => ('-d', 'E', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'E', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('-d', 'E', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'T', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('-d', 'T', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'T', 'cocap.QMIP_ne', 'QMIP_ne') => ('-d', 'T', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'R', 'cocap.QMIP_ne', 'QMIP_ne') => ('-d', 'R', 'cocap.QMIP_ne', 'QMIP_ne')
('p', 'R', 'cocap.QMIP_ne', 'co.QMIP_ne') => ('-d', 'R', 'cocap.QMIP_ne', 'co.QMIP_ne')
('p', 'A', 'cocap.MIP', 'co.MIP') => ('-d', 'A', 'cocap.MIP', 'co.MIP')
('p', 'A', 'cocap.MIP', 'co.MIP') => ('p', 'R', 'cocap.MIP', 'co.MIP')
('p', 'A', 'cocap.MIP', 'co.MIP') => ('p', 'AA', 'cocap.MIP', 'co.MIP')
('p', 'A', 'cocap.MIP', 'MIP') => ('-d', 'A', 'cocap.MIP', 'MIP')
('p', 'A', 'cocap.MIP', 'MIP') => ('p', 'R', 'cocap.MIP', 'MIP')
('p', 'A', 'cocap.MIP', 'MIP') => ('p', 'AA', 'cocap.MIP', 'MIP')
('p', 'AA', 'cocap.MIP', 'MIP') => ('-d', 'AA', 'cocap.MIP', 'MIP')
('p', 'AA', 'cocap.MIP', 'MIP') => ('p', 'T', 'cocap.MIP', 'MIP')
('p', 'AA', 'cocap.MIP', 'MIP') => ('p', 'EA', 'cocap.MIP', 'MIP')
('p', 'AA', 'cocap.MIP', 'co.MIP') => ('-d', 'AA', 'cocap.MIP', 'co.MIP')
('p', 'AA', 'cocap.MIP', 'co.MIP') => ('p', 'T', 'cocap.MIP', 'co.MIP')
('p', 'AA', 'cocap.MIP', 'co.MIP') => ('p', 'EA', 'cocap.MIP', 'co.MIP')
('p', 'EA', 'cocap.MIP', 'co.MIP') => ('-d', 'EA', 'cocap.MIP', 'co.MIP')
('p', 'EA', 'cocap.MIP', 'co.MIP') => ('p', 'E', 'cocap.MIP', 'co.MIP')
('p', 'EA', 'cocap.MIP', 'MIP') => ('-d', 'EA', 'cocap.MIP', 'MIP')
('p', 'EA', 'cocap.MIP', 'MIP') => ('p', 'E', 'cocap.MIP', 'MIP')
('p', 'E', 'cocap.MIP', 'MIP') => ('-d', 'E', 'cocap.MIP', 'MIP')
('p', 'E', 'cocap.MIP', 'co.MIP') => ('-d', 'E', 'cocap.MIP', 'co.MIP')
('p', 'T', 'cocap.MIP', 'co.MIP') => ('-d', 'T', 'cocap.MIP', 'co.MIP')
('p', 'T', 'cocap.MIP', 'MIP') => ('-d', 'T', 'cocap.MIP', 'MIP')
('p', 'R', 'cocap.MIP', 'MIP') => ('-d', 'R', 'cocap.MIP', 'MIP')
('p', 'R', 'cocap.MIP', 'co.MIP') => ('-d', 'R', 'cocap.MIP', 'co.MIP')
('p', 'A', 'R', 'co.RE') => ('-d', 'A', 'R', 'co.RE')
('p', 'A', 'R', 'co.RE') => ('p', 'R', 'R', 'co.RE')
('p', 'A', 'R', 'co.RE') => ('p', 'AA', 'R', 'co.RE')
('p', 'A', 'R', 'RE') => ('-d', 'A', 'R', 'RE')
('p', 'A', 'R', 'RE') => ('p', 'R', 'R', 'RE')
('p', 'A', 'R', 'RE') => ('p', 'AA', 'R', 'RE')
('p', 'AA', 'R', 'RE') => ('-d', 'AA', 'R', 'RE')
('p', 'AA', 'R', 'RE') => ('p', 'T', 'R', 'RE')
('p', 'AA', 'R', 'RE') => ('p', 'EA', 'R', 'RE')
('p', 'AA', 'R', 'co.RE') => ('-d', 'AA', 'R', 'co.RE')
('p', 'AA', 'R', 'co.RE') => ('p', 'T', 'R', 'co.RE')
('p', 'AA', 'R', 'co.RE') => ('p', 'EA', 'R', 'co.RE')
('p', 'EA', 'R', 'co.RE') => ('-d', 'EA', 'R', 'co.RE')
('p', 'EA', 'R', 'co.RE') => ('p', 'E', 'R', 'co.RE')
('p', 'EA', 'R', 'RE') => ('-d', 'EA', 'R', 'RE')
('p', 'EA', 'R', 'RE') => ('p', 'E', 'R', 'RE')
('p', 'E', 'R', 'RE') => ('-d', 'E', 'R', 'RE')
('p', 'E', 'R', 'co.RE') => ('-d', 'E', 'R', 'co.RE')
('p', 'T', 'R', 'co.RE') => ('-d', 'T', 'R', 'co.RE')
('p', 'T', 'R', 'RE') => ('-d', 'T', 'R', 'RE')
('p', 'R', 'R', 'RE') => ('-d', 'R', 'R', 'RE')
('p', 'R', 'R', 'co.RE') => ('-d', 'R', 'R', 'co.RE')
('p', 'A', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('-d', 'A', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'A', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('p', 'R', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'A', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('p', 'AA', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'A', 'cocap.MIP*_cme', 'MIP*_cme') => ('-d', 'A', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'A', 'cocap.MIP*_cme', 'MIP*_cme') => ('p', 'R', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'A', 'cocap.MIP*_cme', 'MIP*_cme') => ('p', 'AA', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'AA', 'cocap.MIP*_cme', 'MIP*_cme') => ('-d', 'AA', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'AA', 'cocap.MIP*_cme', 'MIP*_cme') => ('p', 'T', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'AA', 'cocap.MIP*_cme', 'MIP*_cme') => ('p', 'EA', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'AA', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('-d', 'AA', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'AA', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('p', 'T', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'AA', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('p', 'EA', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'EA', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('-d', 'EA', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'EA', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('p', 'E', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'EA', 'cocap.MIP*_cme', 'MIP*_cme') => ('-d', 'EA', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'EA', 'cocap.MIP*_cme', 'MIP*_cme') => ('p', 'E', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'E', 'cocap.MIP*_cme', 'MIP*_cme') => ('-d', 'E', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'E', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('-d', 'E', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'T', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('-d', 'T', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'T', 'cocap.MIP*_cme', 'MIP*_cme') => ('-d', 'T', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'R', 'cocap.MIP*_cme', 'MIP*_cme') => ('-d', 'R', 'cocap.MIP*_cme', 'MIP*_cme')
('p', 'R', 'cocap.MIP*_cme', 'co.MIP*_cme') => ('-d', 'R', 'cocap.MIP*_cme', 'co.MIP*_cme')
('p', 'A', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('-d', 'A', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'A', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('p', 'R', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'A', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('p', 'AA', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'A', 'cocap.QMIP_fe', 'QMIP_fe') => ('-d', 'A', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'A', 'cocap.QMIP_fe', 'QMIP_fe') => ('p', 'R', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'A', 'cocap.QMIP_fe', 'QMIP_fe') => ('p', 'AA', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'AA', 'cocap.QMIP_fe', 'QMIP_fe') => ('-d', 'AA', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'AA', 'cocap.QMIP_fe', 'QMIP_fe') => ('p', 'T', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'AA', 'cocap.QMIP_fe', 'QMIP_fe') => ('p', 'EA', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'AA', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'AA', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('p', 'T', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'AA', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('p', 'EA', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'EA', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'EA', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('p', 'E', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'EA', 'cocap.QMIP_fe', 'QMIP_fe') => ('-d', 'EA', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'EA', 'cocap.QMIP_fe', 'QMIP_fe') => ('p', 'E', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'E', 'cocap.QMIP_fe', 'QMIP_fe') => ('-d', 'E', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'E', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('-d', 'E', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'T', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('-d', 'T', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'T', 'cocap.QMIP_fe', 'QMIP_fe') => ('-d', 'T', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'R', 'cocap.QMIP_fe', 'QMIP_fe') => ('-d', 'R', 'cocap.QMIP_fe', 'QMIP_fe')
('p', 'R', 'cocap.QMIP_fe', 'co.QMIP_fe') => ('-d', 'R', 'cocap.QMIP_fe', 'co.QMIP_fe')
('p', 'A', 'cocap.QAM', 'co.QAM') => ('-d', 'A', 'cocap.QAM', 'co.QAM')
('p', 'A', 'cocap.QAM', 'co.QAM') => ('p', 'R', 'cocap.QAM', 'co.QAM')
('p', 'A', 'cocap.QAM', 'co.QAM') => ('p', 'AA', 'cocap.QAM', 'co.QAM')
('p', 'A', 'cocap.QAM', 'QAM') => ('-d', 'A', 'cocap.QAM', 'QAM')
('p', 'A', 'cocap.QAM', 'QAM') => ('p', 'R', 'cocap.QAM', 'QAM')
('p', 'A', 'cocap.QAM', 'QAM') => ('p', 'AA', 'cocap.QAM', 'QAM')
('p', 'AA', 'cocap.QAM', 'QAM') => ('-d', 'AA', 'cocap.QAM', 'QAM')
('p', 'AA', 'cocap.QAM', 'QAM') => ('p', 'T', 'cocap.QAM', 'QAM')
('p', 'AA', 'cocap.QAM', 'QAM') => ('p', 'EA', 'cocap.QAM', 'QAM')
('p', 'AA', 'cocap.QAM', 'co.QAM') => ('-d', 'AA', 'cocap.QAM', 'co.QAM')
('p', 'AA', 'cocap.QAM', 'co.QAM') => ('p', 'T', 'cocap.QAM', 'co.QAM')
('p', 'AA', 'cocap.QAM', 'co.QAM') => ('p', 'EA', 'cocap.QAM', 'co.QAM')
('p', 'EA', 'cocap.QAM', 'co.QAM') => ('-d', 'EA', 'cocap.QAM', 'co.QAM')
('p', 'EA', 'cocap.QAM', 'co.QAM') => ('p', 'E', 'cocap.QAM', 'co.QAM')
('p', 'EA', 'cocap.QAM', 'QAM') => ('-d', 'EA', 'cocap.QAM', 'QAM')
('p', 'EA', 'cocap.QAM', 'QAM') => ('p', 'E', 'cocap.QAM', 'QAM')
('p', 'E', 'cocap.QAM', 'QAM') => ('-d', 'E', 'cocap.QAM', 'QAM')
('p', 'E', 'cocap.QAM', 'co.QAM') => ('-d', 'E', 'cocap.QAM', 'co.QAM')
('p', 'T', 'cocap.QAM', 'co.QAM') => ('-d', 'T', 'cocap.QAM', 'co.QAM')
('p', 'T', 'cocap.QAM', 'QAM') => ('-d', 'T', 'cocap.QAM', 'QAM')
('p', 'R', 'cocap.QAM', 'QAM') => ('-d', 'R', 'cocap.QAM', 'QAM')
('p', 'R', 'cocap.QAM', 'co.QAM') => ('-d', 'R', 'cocap.QAM', 'co.QAM')
('p', 'A', 'cocap.AH_plo', 'AH_plo') => ('-d', 'A', 'cocap.AH_plo', 'AH_plo')
('p', 'A', 'cocap.AH_plo', 'AH_plo') => ('p', 'R', 'cocap.AH_plo', 'AH_plo')
('p', 'A', 'cocap.AH_plo', 'AH_plo') => ('p', 'AA', 'cocap.AH_plo', 'AH_plo')
('p', 'A', 'cocap.AH_plo', 'co.AH_plo') => ('-d', 'A', 'cocap.AH_plo', 'co.AH_plo')
('p', 'A', 'cocap.AH_plo', 'co.AH_plo') => ('p', 'R', 'cocap.AH_plo', 'co.AH_plo')
('p', 'A', 'cocap.AH_plo', 'co.AH_plo') => ('p', 'AA', 'cocap.AH_plo', 'co.AH_plo')
('p', 'AA', 'cocap.AH_plo', 'co.AH_plo') => ('-d', 'AA', 'cocap.AH_plo', 'co.AH_plo')
('p', 'AA', 'cocap.AH_plo', 'co.AH_plo') => ('p', 'T', 'cocap.AH_plo', 'co.AH_plo')
('p', 'AA', 'cocap.AH_plo', 'co.AH_plo') => ('p', 'EA', 'cocap.AH_plo', 'co.AH_plo')
('p', 'AA', 'cocap.AH_plo', 'AH_plo') => ('-d', 'AA', 'cocap.AH_plo', 'AH_plo')
('p', 'AA', 'cocap.AH_plo', 'AH_plo') => ('p', 'T', 'cocap.AH_plo', 'AH_plo')
('p', 'AA', 'cocap.AH_plo', 'AH_plo') => ('p', 'EA', 'cocap.AH_plo', 'AH_plo')
('p', 'EA', 'cocap.AH_plo', 'AH_plo') => ('-d', 'EA', 'cocap.AH_plo', 'AH_plo')
('p', 'EA', 'cocap.AH_plo', 'AH_plo') => ('p', 'E', 'cocap.AH_plo', 'AH_plo')
('p', 'EA', 'cocap.AH_plo', 'co.AH_plo') => ('-d', 'EA', 'cocap.AH_plo', 'co.AH_plo')
('p', 'EA', 'cocap.AH_plo', 'co.AH_plo') => ('p', 'E', 'cocap.AH_plo', 'co.AH_plo')
('p', 'E', 'cocap.AH_plo', 'co.AH_plo') => ('-d', 'E', 'cocap.AH_plo', 'co.AH_plo')
('p', 'E', 'cocap.AH_plo', 'AH_plo') => ('-d', 'E', 'cocap.AH_plo', 'AH_plo')
('p', 'T', 'cocap.AH_plo', 'AH_plo') => ('-d', 'T', 'cocap.AH_plo', 'AH_plo')
('p', 'T', 'cocap.AH_plo', 'co.AH_plo') => ('-d', 'T', 'cocap.AH_plo', 'co.AH_plo')
('p', 'R', 'cocap.AH_plo', 'co.AH_plo') => ('-d', 'R', 'cocap.AH_plo', 'co.AH_plo')
('p', 'R', 'cocap.AH_plo', 'AH_plo') => ('-d', 'R', 'cocap.AH_plo', 'AH_plo')
('p', 'A', 'cocap.NP/poly', 'NP/poly') => ('-d', 'A', 'cocap.NP/poly', 'NP/poly')
('p', 'A', 'cocap.NP/poly', 'NP/poly') => ('p', 'R', 'cocap.NP/poly', 'NP/poly')
('p', 'A', 'cocap.NP/poly', 'NP/poly') => ('p', 'AA', 'cocap.NP/poly', 'NP/poly')
('p', 'A', 'cocap.NP/poly', 'co.NP/poly') => ('-d', 'A', 'cocap.NP/poly', 'co.NP/poly')
('p', 'A', 'cocap.NP/poly', 'co.NP/poly') => ('p', 'R', 'cocap.NP/poly', 'co.NP/poly')
('p', 'A', 'cocap.NP/poly', 'co.NP/poly') => ('p', 'AA', 'cocap.NP/poly', 'co.NP/poly')
('p', 'AA', 'cocap.NP/poly', 'co.NP/poly') => ('-d', 'AA', 'cocap.NP/poly', 'co.NP/poly')
('p', 'AA', 'cocap.NP/poly', 'co.NP/poly') => ('p', 'T', 'cocap.NP/poly', 'co.NP/poly')
('p', 'AA', 'cocap.NP/poly', 'co.NP/poly') => ('p', 'EA', 'cocap.NP/poly', 'co.NP/poly')
('p', 'AA', 'cocap.NP/poly', 'NP/poly') => ('-d', 'AA', 'cocap.NP/poly', 'NP/poly')
('p', 'AA', 'cocap.NP/poly', 'NP/poly') => ('p', 'T', 'cocap.NP/poly', 'NP/poly')
('p', 'AA', 'cocap.NP/poly', 'NP/poly') => ('p', 'EA', 'cocap.NP/poly', 'NP/poly')
('p', 'EA', 'cocap.NP/poly', 'NP/poly') => ('-d', 'EA', 'cocap.NP/poly', 'NP/poly')
('p', 'EA', 'cocap.NP/poly', 'NP/poly') => ('p', 'E', 'cocap.NP/poly', 'NP/poly')
('p', 'EA', 'cocap.NP/poly', 'co.NP/poly') => ('-d', 'EA', 'cocap.NP/poly', 'co.NP/poly')
('p', 'EA', 'cocap.NP/poly', 'co.NP/poly') => ('p', 'E', 'cocap.NP/poly', 'co.NP/poly')
('p', 'E', 'cocap.NP/poly', 'co.NP/poly') => ('-d', 'E', 'cocap.NP/poly', 'co.NP/poly')
('p', 'E', 'cocap.NP/poly', 'NP/poly') => ('-d', 'E', 'cocap.NP/poly', 'NP/poly')
('p', 'T', 'cocap.NP/poly', 'NP/poly') => ('-d', 'T', 'cocap.NP/poly', 'NP/poly')
('p', 'T', 'cocap.NP/poly', 'co.NP/poly') => ('-d', 'T', 'cocap.NP/poly', 'co.NP/poly')
('p', 'R', 'cocap.NP/poly', 'co.NP/poly') => ('-d', 'R', 'cocap.NP/poly', 'co.NP/poly')
('p', 'R', 'cocap.NP/poly', 'NP/poly') => ('-d', 'R', 'cocap.NP/poly', 'NP/poly')
('p', 'A', 'cocap.IP', 'co.IP') => ('-d', 'A', 'cocap.IP', 'co.IP')
('p', 'A', 'cocap.IP', 'co.IP') => ('p', 'R', 'cocap.IP', 'co.IP')
('p', 'A', 'cocap.IP', 'co.IP') => ('p', 'AA', 'cocap.IP', 'co.IP')
('p', 'A', 'cocap.IP', 'IP') => ('-d', 'A', 'cocap.IP', 'IP')
('p', 'A', 'cocap.IP', 'IP') => ('p', 'R', 'cocap.IP', 'IP')
('p', 'A', 'cocap.IP', 'IP') => ('p', 'AA', 'cocap.IP', 'IP')
('p', 'AA', 'cocap.IP', 'IP') => ('-d', 'AA', 'cocap.IP', 'IP')
('p', 'AA', 'cocap.IP', 'IP') => ('p', 'T', 'cocap.IP', 'IP')
('p', 'AA', 'cocap.IP', 'IP') => ('p', 'EA', 'cocap.IP', 'IP')
('p', 'AA', 'cocap.IP', 'co.IP') => ('-d', 'AA', 'cocap.IP', 'co.IP')
('p', 'AA', 'cocap.IP', 'co.IP') => ('p', 'T', 'cocap.IP', 'co.IP')
('p', 'AA', 'cocap.IP', 'co.IP') => ('p', 'EA', 'cocap.IP', 'co.IP')
('p', 'EA', 'cocap.IP', 'co.IP') => ('-d', 'EA', 'cocap.IP', 'co.IP')
('p', 'EA', 'cocap.IP', 'co.IP') => ('p', 'E', 'cocap.IP', 'co.IP')
('p', 'EA', 'cocap.IP', 'IP') => ('-d', 'EA', 'cocap.IP', 'IP')
('p', 'EA', 'cocap.IP', 'IP') => ('p', 'E', 'cocap.IP', 'IP')
('p', 'E', 'cocap.IP', 'IP') => ('-d', 'E', 'cocap.IP', 'IP')
('p', 'E', 'cocap.IP', 'co.IP') => ('-d', 'E', 'cocap.IP', 'co.IP')
('p', 'T', 'cocap.IP', 'co.IP') => ('-d', 'T', 'cocap.IP', 'co.IP')
('p', 'T', 'cocap.IP', 'IP') => ('-d', 'T', 'cocap.IP', 'IP')
('p', 'R', 'cocap.IP', 'IP') => ('-d', 'R', 'cocap.IP', 'IP')
('p', 'R', 'cocap.IP', 'co.IP') => ('-d', 'R', 'cocap.IP', 'co.IP')
('p', 'A', 'BPP', 'PP') => ('-d', 'A', 'BPP', 'PP')
('p', 'A', 'BPP', 'PP') => ('p', 'R', 'BPP', 'PP')
('p', 'A', 'BPP', 'PP') => ('p', 'AA', 'BPP', 'PP')
('p', 'A', 'P/poly', 'PP/poly') => ('-d', 'A', 'P/poly', 'PP/poly')
('p', 'A', 'P/poly', 'PP/poly') => ('p', 'R', 'P/poly', 'PP/poly')
('p', 'A', 'P/poly', 'PP/poly') => ('p', 'AA', 'P/poly', 'PP/poly')
('p', 'AA', 'P/poly', 'PP/poly') => ('-d', 'AA', 'P/poly', 'PP/poly')
('p', 'AA', 'P/poly', 'PP/poly') => ('p', 'T', 'P/poly', 'PP/poly')
('p', 'AA', 'P/poly', 'PP/poly') => ('p', 'EA', 'P/poly', 'PP/poly')
('p', 'EA', 'P/poly', 'PP/poly') => ('-d', 'EA', 'P/poly', 'PP/poly')
('p', 'EA', 'P/poly', 'PP/poly') => ('p', 'E', 'P/poly', 'PP/poly')
('p', 'E', 'P/poly', 'PP/poly') => ('-d', 'E', 'P/poly', 'PP/poly')
('p', 'T', 'P/poly', 'PP/poly') => ('-d', 'T', 'P/poly', 'PP/poly')
('p', 'R', 'P/poly', 'PP/poly') => ('-d', 'R', 'P/poly', 'PP/poly')
('p', 'AA', 'BPP', 'PP') => ('-d', 'AA', 'BPP', 'PP')
('p', 'AA', 'BPP', 'PP') => ('p', 'T', 'BPP', 'PP')
('p', 'AA', 'BPP', 'PP') => ('p', 'EA', 'BPP', 'PP')
('p', 'EA', 'BPP', 'PP') => ('-d', 'EA', 'BPP', 'PP')
('p', 'EA', 'BPP', 'PP') => ('p', 'E', 'BPP', 'PP')
('p', 'E', 'BPP', 'PP') => ('-d', 'E', 'BPP', 'PP')
('p', 'T', 'BPP', 'PP') => ('-d', 'T', 'BPP', 'PP')
('p', 'R', 'BPP', 'PP') => ('-d', 'R', 'BPP', 'PP')
('p', 'A', 'co.NP', 'Delta_2P') => ('-d', 'A', 'co.NP', 'Delta_2P')
('p', 'A', 'co.NP', 'Delta_2P') => ('p', 'R', 'co.NP', 'Delta_2P')
('p', 'A', 'co.NP', 'Delta_2P') => ('p', 'AA', 'co.NP', 'Delta_2P')
('p', 'A', 'NP', 'Delta_2P') => ('-d', 'A', 'NP', 'Delta_2P')
('p', 'A', 'NP', 'Delta_2P') => ('p', 'R', 'NP', 'Delta_2P')
('p', 'A', 'NP', 'Delta_2P') => ('p', 'AA', 'NP', 'Delta_2P')
('p', 'A', 'cocap.NP', 'Delta_2P') => ('-d', 'A', 'cocap.NP', 'Delta_2P')
('p', 'A', 'cocap.NP', 'Delta_2P') => ('p', 'R', 'cocap.NP', 'Delta_2P')
('p', 'A', 'cocap.NP', 'Delta_2P') => ('p', 'AA', 'cocap.NP', 'Delta_2P')
('p', 'AA', 'cocap.NP', 'Delta_2P') => ('-d', 'AA', 'cocap.NP', 'Delta_2P')
('p', 'AA', 'cocap.NP', 'Delta_2P') => ('p', 'T', 'cocap.NP', 'Delta_2P')
('p', 'AA', 'cocap.NP', 'Delta_2P') => ('p', 'EA', 'cocap.NP', 'Delta_2P')
('p', 'EA', 'cocap.NP', 'Delta_2P') => ('-d', 'EA', 'cocap.NP', 'Delta_2P')
('p', 'EA', 'cocap.NP', 'Delta_2P') => ('p', 'E', 'cocap.NP', 'Delta_2P')
('p', 'E', 'cocap.NP', 'Delta_2P') => ('-d', 'E', 'cocap.NP', 'Delta_2P')
('p', 'T', 'cocap.NP', 'Delta_2P') => ('-d', 'T', 'cocap.NP', 'Delta_2P')
('p', 'R', 'cocap.NP', 'Delta_2P') => ('-d', 'R', 'cocap.NP', 'Delta_2P')
('p', 'AA', 'NP', 'Delta_2P') => ('-d', 'AA', 'NP', 'Delta_2P')
('p', 'AA', 'NP', 'Delta_2P') => ('p', 'T', 'NP', 'Delta_2P')
('p', 'AA', 'NP', 'Delta_2P') => ('p', 'EA', 'NP', 'Delta_2P')
('p', 'AA', 'co.NP', 'Delta_2P') => ('-d', 'AA', 'co.NP', 'Delta_2P')
('p', 'AA', 'co.NP', 'Delta_2P') => ('p', 'T', 'co.NP', 'Delta_2P')
('p', 'AA', 'co.NP', 'Delta_2P') => ('p', 'EA', 'co.NP', 'Delta_2P')
('p', 'EA', 'co.NP', 'Delta_2P') => ('-d', 'EA', 'co.NP', 'Delta_2P')
('p', 'EA', 'co.NP', 'Delta_2P') => ('p', 'E', 'co.NP', 'Delta_2P')
('p', 'EA', 'NP', 'Delta_2P') => ('-d', 'EA', 'NP', 'Delta_2P')
('p', 'EA', 'NP', 'Delta_2P') => ('p', 'E', 'NP', 'Delta_2P')
('p', 'E', 'NP', 'Delta_2P') => ('-d', 'E', 'NP', 'Delta_2P')
('p', 'E', 'co.NP', 'Delta_2P') => ('-d', 'E', 'co.NP', 'Delta_2P')
('p', 'T', 'co.NP', 'Delta_2P') => ('-d', 'T', 'co.NP', 'Delta_2P')
('p', 'T', 'NP', 'Delta_2P') => ('-d', 'T', 'NP', 'Delta_2P')
('p', 'R', 'NP', 'Delta_2P') => ('-d', 'R', 'NP', 'Delta_2P')
('p', 'R', 'co.NP', 'Delta_2P') => ('-d', 'R', 'co.NP', 'Delta_2P')
('p', 'A', 'PP', 'P^Sharp-P') => ('-d', 'A', 'PP', 'P^Sharp-P')
('p', 'A', 'PP', 'P^Sharp-P') => ('p', 'R', 'PP', 'P^Sharp-P')
('p', 'A', 'PP', 'P^Sharp-P') => ('p', 'AA', 'PP', 'P^Sharp-P')
('p', 'E', 'BPP', 'P^Sharp-P') => ('-d', 'E', 'BPP', 'P^Sharp-P')
('p', 'A', 'BPP', 'P^Sharp-P') => ('-d', 'A', 'BPP', 'P^Sharp-P')
('p', 'A', 'BPP', 'P^Sharp-P') => ('p', 'R', 'BPP', 'P^Sharp-P')
('p', 'A', 'BPP', 'P^Sharp-P') => ('p', 'AA', 'BPP', 'P^Sharp-P')
('p', 'AA', 'BPP', 'P^Sharp-P') => ('-d', 'AA', 'BPP', 'P^Sharp-P')
('p', 'AA', 'BPP', 'P^Sharp-P') => ('p', 'T', 'BPP', 'P^Sharp-P')
('p', 'AA', 'BPP', 'P^Sharp-P') => ('p', 'EA', 'BPP', 'P^Sharp-P')
('p', 'EA', 'BPP', 'P^Sharp-P') => ('-d', 'EA', 'BPP', 'P^Sharp-P')
('p', 'T', 'BPP', 'P^Sharp-P') => ('-d', 'T', 'BPP', 'P^Sharp-P')
('p', 'R', 'BPP', 'P^Sharp-P') => ('-d', 'R', 'BPP', 'P^Sharp-P')
('p', 'AA', 'PP', 'P^Sharp-P') => ('-d', 'AA', 'PP', 'P^Sharp-P')
('p', 'AA', 'PP', 'P^Sharp-P') => ('p', 'T', 'PP', 'P^Sharp-P')
('p', 'AA', 'PP', 'P^Sharp-P') => ('p', 'EA', 'PP', 'P^Sharp-P')
('p', 'EA', 'PP', 'P^Sharp-P') => ('-d', 'EA', 'PP', 'P^Sharp-P')
('p', 'EA', 'PP', 'P^Sharp-P') => ('p', 'E', 'PP', 'P^Sharp-P')
('p', 'E', 'PP', 'P^Sharp-P') => ('-d', 'E', 'PP', 'P^Sharp-P')
('p', 'T', 'PP', 'P^Sharp-P') => ('-d', 'T', 'PP', 'P^Sharp-P')
('p', 'R', 'PP', 'P^Sharp-P') => ('-d', 'R', 'PP', 'P^Sharp-P')
('p', 'A', 'P', 'PP') => ('-d', 'A', 'P', 'PP')
('p', 'A', 'P', 'PP') => ('p', 'R', 'P', 'PP')
('p', 'A', 'P', 'PP') => ('p', 'AA', 'P', 'PP')
('-d', 'A', 'P', 'P^Sharp-P') => ('-d', 'R', 'P', 'P^Sharp-P')
('-d', 'A', 'P', 'P^Sharp-P') => ('-d', 'AA', 'P', 'P^Sharp-P')
('-d', 'AA', 'P', 'P^Sharp-P') => ('-d', 'T', 'P', 'P^Sharp-P')
('-d', 'AA', 'P', 'P^Sharp-P') => ('-d', 'EA', 'P', 'P^Sharp-P')
('p', 'A', 'P', 'P^Sharp-P') => ('p', 'R', 'P', 'P^Sharp-P')
('p', 'A', 'P', 'P^Sharp-P') => ('p', 'AA', 'P', 'P^Sharp-P')
('p', 'AA', 'P', 'P^Sharp-P') => ('p', 'T', 'P', 'P^Sharp-P')
('p', 'AA', 'P', 'P^Sharp-P') => ('p', 'EA', 'P', 'P^Sharp-P')
('p', 'AA', 'P', 'PP') => ('-d', 'AA', 'P', 'PP')
('p', 'AA', 'P', 'PP') => ('p', 'T', 'P', 'PP')
('p', 'AA', 'P', 'PP') => ('p', 'EA', 'P', 'PP')
('p', 'EA', 'P', 'PP') => ('-d', 'EA', 'P', 'PP')
('p', 'EA', 'P', 'PP') => ('p', 'E', 'P', 'PP')
('p', 'E', 'P', 'PP') => ('-d', 'E', 'P', 'PP')
('p', 'T', 'P', 'PP') => ('-d', 'T', 'P', 'PP')
('p', 'R', 'P', 'PP') => ('-d', 'R', 'P', 'PP')
('p', 'A', 'P', '+P') => ('-d', 'A', 'P', '+P')
('p', 'A', 'P', '+P') => ('p', 'R', 'P', '+P')
('p', 'A', 'P', '+P') => ('p', 'AA', 'P', '+P')
('p', 'AA', 'P', '+P') => ('-d', 'AA', 'P', '+P')
('p', 'AA', 'P', '+P') => ('p', 'T', 'P', '+P')
('p', 'AA', 'P', '+P') => ('p', 'EA', 'P', '+P')
('p', 'EA', 'P', '+P') => ('-d', 'EA', 'P', '+P')
('p', 'EA', 'P', '+P') => ('p', 'E', 'P', '+P')
('p', 'E', 'P', '+P') => ('-d', 'E', 'P', '+P')
('p', 'T', 'P', '+P') => ('-d', 'T', 'P', '+P')
('p', 'R', 'P', '+P') => ('-d', 'R', 'P', '+P')
('p', 'A', 'P', 'BPP') => ('-d', 'A', 'P', 'BPP')
('p', 'A', 'P', 'BPP') => ('p', 'R', 'P', 'BPP')
('p', 'A', 'P', 'BPP') => ('p', 'AA', 'P', 'BPP')
('p', 'AA', 'P', 'BPP') => ('-d', 'AA', 'P', 'BPP')
('p', 'AA', 'P', 'BPP') => ('p', 'T', 'P', 'BPP')
('p', 'AA', 'P', 'BPP') => ('p', 'EA', 'P', 'BPP')
('p', 'EA', 'P', 'BPP') => ('-d', 'EA', 'P', 'BPP')
('p', 'EA', 'P', 'BPP') => ('p', 'E', 'P', 'BPP')
('p', 'E', 'P', 'BPP') => ('-d', 'E', 'P', 'BPP')
('p', 'T', 'P', 'BPP') => ('-d', 'T', 'P', 'BPP')
('p', 'R', 'P', 'BPP') => ('-d', 'R', 'P', 'BPP')
('p', 'A', 'P', 'P/poly') => ('-d', 'A', 'P', 'P/poly')
('p', 'A', 'P', 'P/poly') => ('p', 'R', 'P', 'P/poly')
('p', 'A', 'P', 'P/poly') => ('p', 'AA', 'P', 'P/poly')
('p', 'A', 'PP', 'PP/poly') => ('-d', 'A', 'PP', 'PP/poly')
('p', 'A', 'PP', 'PP/poly') => ('p', 'R', 'PP', 'PP/poly')
('p', 'A', 'PP', 'PP/poly') => ('p', 'AA', 'PP', 'PP/poly')
('p', 'E', 'P', 'PP/poly') => ('-d', 'E', 'P', 'PP/poly')
('p', 'A', 'P', 'PP/poly') => ('-d', 'A', 'P', 'PP/poly')
('p', 'A', 'P', 'PP/poly') => ('p', 'R', 'P', 'PP/poly')
('p', 'A', 'P', 'PP/poly') => ('p', 'AA', 'P', 'PP/poly')
('p', 'AA', 'P', 'PP/poly') => ('-d', 'AA', 'P', 'PP/poly')
('p', 'AA', 'P', 'PP/poly') => ('p', 'T', 'P', 'PP/poly')
('p', 'AA', 'P', 'PP/poly') => ('p', 'EA', 'P', 'PP/poly')
('p', 'EA', 'P', 'PP/poly') => ('-d', 'EA', 'P', 'PP/poly')
('p', 'T', 'P', 'PP/poly') => ('-d', 'T', 'P', 'PP/poly')
('p', 'R', 'P', 'PP/poly') => ('-d', 'R', 'P', 'PP/poly')
('p', 'E', 'BPP', 'PP/poly') => ('-d', 'E', 'BPP', 'PP/poly')
('p', 'A', 'BPP', 'PP/poly') => ('-d', 'A', 'BPP', 'PP/poly')
('p', 'A', 'BPP', 'PP/poly') => ('p', 'R', 'BPP', 'PP/poly')
('p', 'A', 'BPP', 'PP/poly') => ('p', 'AA', 'BPP', 'PP/poly')
('p', 'AA', 'BPP', 'PP/poly') => ('-d', 'AA', 'BPP', 'PP/poly')
('p', 'AA', 'BPP', 'PP/poly') => ('p', 'T', 'BPP', 'PP/poly')
('p', 'AA', 'BPP', 'PP/poly') => ('p', 'EA', 'BPP', 'PP/poly')
('p', 'EA', 'BPP', 'PP/poly') => ('-d', 'EA', 'BPP', 'PP/poly')
('p', 'T', 'BPP', 'PP/poly') => ('-d', 'T', 'BPP', 'PP/poly')
('p', 'R', 'BPP', 'PP/poly') => ('-d', 'R', 'BPP', 'PP/poly')
('p', 'AA', 'PP', 'PP/poly') => ('-d', 'AA', 'PP', 'PP/poly')
('p', 'AA', 'PP', 'PP/poly') => ('p', 'T', 'PP', 'PP/poly')
('p', 'AA', 'PP', 'PP/poly') => ('p', 'EA', 'PP', 'PP/poly')
('p', 'EA', 'PP', 'PP/poly') => ('-d', 'EA', 'PP', 'PP/poly')
('p', 'EA', 'PP', 'PP/poly') => ('p', 'E', 'PP', 'PP/poly')
('p', 'E', 'PP', 'PP/poly') => ('-d', 'E', 'PP', 'PP/poly')
('p', 'T', 'PP', 'PP/poly') => ('-d', 'T', 'PP', 'PP/poly')
('p', 'R', 'PP', 'PP/poly') => ('-d', 'R', 'PP', 'PP/poly')
('p', 'AA', 'P', 'P/poly') => ('-d', 'AA', 'P', 'P/poly')
('p', 'AA', 'P', 'P/poly') => ('p', 'T', 'P', 'P/poly')
('p', 'AA', 'P', 'P/poly') => ('p', 'EA', 'P', 'P/poly')
('p', 'EA', 'P', 'P/poly') => ('-d', 'EA', 'P', 'P/poly')
('p', 'EA', 'P', 'P/poly') => ('p', 'E', 'P', 'P/poly')
('p', 'E', 'P', 'P/poly') => ('-d', 'E', 'P', 'P/poly')
('p', 'T', 'P', 'P/poly') => ('-d', 'T', 'P', 'P/poly')
('p', 'R', 'P', 'P/poly') => ('-d', 'R', 'P', 'P/poly')
('p', 'A', 'NP', 'NP/poly') => ('-d', 'A', 'NP', 'NP/poly')
('p', 'A', 'NP', 'NP/poly') => ('p', 'R', 'NP', 'NP/poly')
('p', 'A', 'NP', 'NP/poly') => ('p', 'AA', 'NP', 'NP/poly')
('p', 'A', 'co.NP', 'co.NP/poly') => ('-d', 'A', 'co.NP', 'co.NP/poly')
('p', 'A', 'co.NP', 'co.NP/poly') => ('p', 'R', 'co.NP', 'co.NP/poly')
('p', 'A', 'co.NP', 'co.NP/poly') => ('p', 'AA', 'co.NP', 'co.NP/poly')
('p', 'A', 'cocap.NP', 'cocap.NP/poly') => ('-d', 'A', 'cocap.NP', 'cocap.NP/poly')
('p', 'A', 'cocap.NP', 'cocap.NP/poly') => ('p', 'R', 'cocap.NP', 'cocap.NP/poly')
('p', 'A', 'cocap.NP', 'cocap.NP/poly') => ('p', 'AA', 'cocap.NP', 'cocap.NP/poly')
('-d', 'A', 'cocap.NP', 'co.NP/poly') => ('-d', 'R', 'cocap.NP', 'co.NP/poly')
('-d', 'A', 'cocap.NP', 'co.NP/poly') => ('-d', 'AA', 'cocap.NP', 'co.NP/poly')
('-d', 'A', 'cocap.NP', 'NP/poly') => ('-d', 'R', 'cocap.NP', 'NP/poly')
('-d', 'A', 'cocap.NP', 'NP/poly') => ('-d', 'AA', 'cocap.NP', 'NP/poly')
('-d', 'A', 'cocap.NP', 'cocap.NP/poly') => ('-d', 'R', 'cocap.NP', 'cocap.NP/poly')
('-d', 'A', 'cocap.NP', 'cocap.NP/poly') => ('-d', 'AA', 'cocap.NP', 'cocap.NP/poly')
('-d', 'AA', 'cocap.NP', 'cocap.NP/poly') => ('-d', 'T', 'cocap.NP', 'cocap.NP/poly')
('-d', 'AA', 'cocap.NP', 'cocap.NP/poly') => ('-d', 'EA', 'cocap.NP', 'cocap.NP/poly')
('-d', 'AA', 'cocap.NP', 'co.NP/poly') => ('-d', 'T', 'cocap.NP', 'co.NP/poly')
('-d', 'AA', 'cocap.NP', 'co.NP/poly') => ('-d', 'EA', 'cocap.NP', 'co.NP/poly')
('-d', 'AA', 'cocap.NP', 'NP/poly') => ('-d', 'T', 'cocap.NP', 'NP/poly')
('-d', 'AA', 'cocap.NP', 'NP/poly') => ('-d', 'EA', 'cocap.NP', 'NP/poly')
('p', 'A', 'cocap.NP', 'co.NP/poly') => ('p', 'R', 'cocap.NP', 'co.NP/poly')
('p', 'A', 'cocap.NP', 'co.NP/poly') => ('p', 'AA', 'cocap.NP', 'co.NP/poly')
('p', 'A', 'cocap.NP', 'NP/poly') => ('p', 'R', 'cocap.NP', 'NP/poly')
('p', 'A', 'cocap.NP', 'NP/poly') => ('p', 'AA', 'cocap.NP', 'NP/poly')
('p', 'AA', 'cocap.NP', 'NP/poly') => ('p', 'T', 'cocap.NP', 'NP/poly')
('p', 'AA', 'cocap.NP', 'NP/poly') => ('p', 'EA', 'cocap.NP', 'NP/poly')
('p', 'AA', 'cocap.NP', 'co.NP/poly') => ('p', 'T', 'cocap.NP', 'co.NP/poly')
('p', 'AA', 'cocap.NP', 'co.NP/poly') => ('p', 'EA', 'cocap.NP', 'co.NP/poly')
('p', 'AA', 'cocap.NP', 'cocap.NP/poly') => ('p', 'T', 'cocap.NP', 'cocap.NP/poly')
('p', 'AA', 'cocap.NP', 'cocap.NP/poly') => ('p', 'EA', 'cocap.NP', 'cocap.NP/poly')
('p', 'AA', 'co.NP', 'co.NP/poly') => ('-d', 'AA', 'co.NP', 'co.NP/poly')
('p', 'AA', 'co.NP', 'co.NP/poly') => ('p', 'T', 'co.NP', 'co.NP/poly')
('p', 'AA', 'co.NP', 'co.NP/poly') => ('p', 'EA', 'co.NP', 'co.NP/poly')
('p', 'AA', 'NP', 'NP/poly') => ('-d', 'AA', 'NP', 'NP/poly')
('p', 'AA', 'NP', 'NP/poly') => ('p', 'T', 'NP', 'NP/poly')
('p', 'AA', 'NP', 'NP/poly') => ('p', 'EA', 'NP', 'NP/poly')
('p', 'EA', 'NP', 'NP/poly') => ('-d', 'EA', 'NP', 'NP/poly')
('p', 'EA', 'NP', 'NP/poly') => ('p', 'E', 'NP', 'NP/poly')
('p', 'EA', 'co.NP', 'co.NP/poly') => ('-d', 'EA', 'co.NP', 'co.NP/poly')
('p', 'EA', 'co.NP', 'co.NP/poly') => ('p', 'E', 'co.NP', 'co.NP/poly')
('p', 'E', 'co.NP', 'co.NP/poly') => ('-d', 'E', 'co.NP', 'co.NP/poly')
('p', 'E', 'NP', 'NP/poly') => ('-d', 'E', 'NP', 'NP/poly')
('p', 'T', 'NP', 'NP/poly') => ('-d', 'T', 'NP', 'NP/poly')
('p', 'T', 'co.NP', 'co.NP/poly') => ('-d', 'T', 'co.NP', 'co.NP/poly')
('p', 'R', 'co.NP', 'co.NP/poly') => ('-d', 'R', 'co.NP', 'co.NP/poly')
('p', 'R', 'NP', 'NP/poly') => ('-d', 'R', 'NP', 'NP/poly')
('p', 'A', 'co.NEXP', 'NEXP/poly') => ('-d', 'A', 'co.NEXP', 'NEXP/poly')
('p', 'A', 'co.NEXP', 'NEXP/poly') => ('p', 'R', 'co.NEXP', 'NEXP/poly')
('p', 'A', 'co.NEXP', 'NEXP/poly') => ('p', 'AA', 'co.NEXP', 'NEXP/poly')
('p', 'A', 'NEXP', 'NEXP/poly') => ('-d', 'A', 'NEXP', 'NEXP/poly')
('p', 'A', 'NEXP', 'NEXP/poly') => ('p', 'R', 'NEXP', 'NEXP/poly')
('p', 'A', 'NEXP', 'NEXP/poly') => ('p', 'AA', 'NEXP', 'NEXP/poly')
('p', 'A', 'cocap.NEXP', 'NEXP/poly') => ('-d', 'A', 'cocap.NEXP', 'NEXP/poly')
('p', 'A', 'cocap.NEXP', 'NEXP/poly') => ('p', 'R', 'cocap.NEXP', 'NEXP/poly')
('p', 'A', 'cocap.NEXP', 'NEXP/poly') => ('p', 'AA', 'cocap.NEXP', 'NEXP/poly')
('p', 'AA', 'cocap.NEXP', 'NEXP/poly') => ('-d', 'AA', 'cocap.NEXP', 'NEXP/poly')
('p', 'AA', 'cocap.NEXP', 'NEXP/poly') => ('p', 'T', 'cocap.NEXP', 'NEXP/poly')
('p', 'AA', 'cocap.NEXP', 'NEXP/poly') => ('p', 'EA', 'cocap.NEXP', 'NEXP/poly')
('p', 'EA', 'cocap.NEXP', 'NEXP/poly') => ('-d', 'EA', 'cocap.NEXP', 'NEXP/poly')
('p', 'EA', 'cocap.NEXP', 'NEXP/poly') => ('p', 'E', 'cocap.NEXP', 'NEXP/poly')
('p', 'E', 'cocap.NEXP', 'NEXP/poly') => ('-d', 'E', 'cocap.NEXP', 'NEXP/poly')
('p', 'T', 'cocap.NEXP', 'NEXP/poly') => ('-d', 'T', 'cocap.NEXP', 'NEXP/poly')
('p', 'R', 'cocap.NEXP', 'NEXP/poly') => ('-d', 'R', 'cocap.NEXP', 'NEXP/poly')
('p', 'AA', 'NEXP', 'NEXP/poly') => ('-d', 'AA', 'NEXP', 'NEXP/poly')
('p', 'AA', 'NEXP', 'NEXP/poly') => ('p', 'T', 'NEXP', 'NEXP/poly')
('p', 'AA', 'NEXP', 'NEXP/poly') => ('p', 'EA', 'NEXP', 'NEXP/poly')
('p', 'AA', 'co.NEXP', 'NEXP/poly') => ('-d', 'AA', 'co.NEXP', 'NEXP/poly')
('p', 'AA', 'co.NEXP', 'NEXP/poly') => ('p', 'T', 'co.NEXP', 'NEXP/poly')
('p', 'AA', 'co.NEXP', 'NEXP/poly') => ('p', 'EA', 'co.NEXP', 'NEXP/poly')
('p', 'EA', 'co.NEXP', 'NEXP/poly') => ('-d', 'EA', 'co.NEXP', 'NEXP/poly')
('p', 'EA', 'co.NEXP', 'NEXP/poly') => ('p', 'E', 'co.NEXP', 'NEXP/poly')
('p', 'EA', 'NEXP', 'NEXP/poly') => ('-d', 'EA', 'NEXP', 'NEXP/poly')
('p', 'EA', 'NEXP', 'NEXP/poly') => ('p', 'E', 'NEXP', 'NEXP/poly')
('p', 'E', 'NEXP', 'NEXP/poly') => ('-d', 'E', 'NEXP', 'NEXP/poly')
('p', 'E', 'co.NEXP', 'NEXP/poly') => ('-d', 'E', 'co.NEXP', 'NEXP/poly')
('p', 'T', 'co.NEXP', 'NEXP/poly') => ('-d', 'T', 'co.NEXP', 'NEXP/poly')
('p', 'T', 'NEXP', 'NEXP/poly') => ('-d', 'T', 'NEXP', 'NEXP/poly')
('p', 'R', 'NEXP', 'NEXP/poly') => ('-d', 'R', 'NEXP', 'NEXP/poly')
('p', 'R', 'co.NEXP', 'NEXP/poly') => ('-d', 'R', 'co.NEXP', 'NEXP/poly')
('p', 'A', 'cocap.NP', '(NP-cap-coNP)/poly') => ('-d', 'A', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'A', 'cocap.NP', '(NP-cap-coNP)/poly') => ('p', 'R', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'A', 'cocap.NP', '(NP-cap-coNP)/poly') => ('p', 'AA', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'AA', 'cocap.NP', '(NP-cap-coNP)/poly') => ('-d', 'AA', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'AA', 'cocap.NP', '(NP-cap-coNP)/poly') => ('p', 'T', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'AA', 'cocap.NP', '(NP-cap-coNP)/poly') => ('p', 'EA', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'EA', 'cocap.NP', '(NP-cap-coNP)/poly') => ('-d', 'EA', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'EA', 'cocap.NP', '(NP-cap-coNP)/poly') => ('p', 'E', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'E', 'cocap.NP', '(NP-cap-coNP)/poly') => ('-d', 'E', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'T', 'cocap.NP', '(NP-cap-coNP)/poly') => ('-d', 'T', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'R', 'cocap.NP', '(NP-cap-coNP)/poly') => ('-d', 'R', 'cocap.NP', '(NP-cap-coNP)/poly')
('p', 'A', 'PSPACE', 'PSPACE/poly') => ('-d', 'A', 'PSPACE', 'PSPACE/poly')
('p', 'A', 'PSPACE', 'PSPACE/poly') => ('p', 'R', 'PSPACE', 'PSPACE/poly')
('p', 'A', 'PSPACE', 'PSPACE/poly') => ('p', 'AA', 'PSPACE', 'PSPACE/poly')
('p', 'AA', 'PSPACE', 'PSPACE/poly') => ('-d', 'AA', 'PSPACE', 'PSPACE/poly')
('p', 'AA', 'PSPACE', 'PSPACE/poly') => ('p', 'T', 'PSPACE', 'PSPACE/poly')
('p', 'AA', 'PSPACE', 'PSPACE/poly') => ('p', 'EA', 'PSPACE', 'PSPACE/poly')
('p', 'EA', 'PSPACE', 'PSPACE/poly') => ('-d', 'EA', 'PSPACE', 'PSPACE/poly')
('p', 'EA', 'PSPACE', 'PSPACE/poly') => ('p', 'E', 'PSPACE', 'PSPACE/poly')
('p', 'E', 'PSPACE', 'PSPACE/poly') => ('-d', 'E', 'PSPACE', 'PSPACE/poly')
('p', 'T', 'PSPACE', 'PSPACE/poly') => ('-d', 'T', 'PSPACE', 'PSPACE/poly')
('p', 'R', 'PSPACE', 'PSPACE/poly') => ('-d', 'R', 'PSPACE', 'PSPACE/poly')
('p', 'A', 'AM', 'NP/poly') => ('-d', 'A', 'AM', 'NP/poly')
('p', 'A', 'AM', 'NP/poly') => ('p', 'R', 'AM', 'NP/poly')
('p', 'A', 'AM', 'NP/poly') => ('p', 'AA', 'AM', 'NP/poly')
('p', 'A', 'co.AM', 'co.NP/poly') => ('-d', 'A', 'co.AM', 'co.NP/poly')
('p', 'A', 'co.AM', 'co.NP/poly') => ('p', 'R', 'co.AM', 'co.NP/poly')
('p', 'A', 'co.AM', 'co.NP/poly') => ('p', 'AA', 'co.AM', 'co.NP/poly')
('p', 'A', 'cocap.AM', 'cocap.NP/poly') => ('-d', 'A', 'cocap.AM', 'cocap.NP/poly')
('p', 'A', 'cocap.AM', 'cocap.NP/poly') => ('p', 'R', 'cocap.AM', 'cocap.NP/poly')
('p', 'A', 'cocap.AM', 'cocap.NP/poly') => ('p', 'AA', 'cocap.AM', 'cocap.NP/poly')
('-d', 'A', 'cocap.AM', 'co.NP/poly') => ('-d', 'R', 'cocap.AM', 'co.NP/poly')
('-d', 'A', 'cocap.AM', 'co.NP/poly') => ('-d', 'AA', 'cocap.AM', 'co.NP/poly')
('-d', 'A', 'cocap.AM', 'NP/poly') => ('-d', 'R', 'cocap.AM', 'NP/poly')
('-d', 'A', 'cocap.AM', 'NP/poly') => ('-d', 'AA', 'cocap.AM', 'NP/poly')
('-d', 'A', 'cocap.AM', 'cocap.NP/poly') => ('-d', 'R', 'cocap.AM', 'cocap.NP/poly')
('-d', 'A', 'cocap.AM', 'cocap.NP/poly') => ('-d', 'AA', 'cocap.AM', 'cocap.NP/poly')
('-d', 'AA', 'cocap.AM', 'cocap.NP/poly') => ('-d', 'T', 'cocap.AM', 'cocap.NP/poly')
('-d', 'AA', 'cocap.AM', 'cocap.NP/poly') => ('-d', 'EA', 'cocap.AM', 'cocap.NP/poly')
('-d', 'AA', 'cocap.AM', 'co.NP/poly') => ('-d', 'T', 'cocap.AM', 'co.NP/poly')
('-d', 'AA', 'cocap.AM', 'co.NP/poly') => ('-d', 'EA', 'cocap.AM', 'co.NP/poly')
('-d', 'AA', 'cocap.AM', 'NP/poly') => ('-d', 'T', 'cocap.AM', 'NP/poly')
('-d', 'AA', 'cocap.AM', 'NP/poly') => ('-d', 'EA', 'cocap.AM', 'NP/poly')
('p', 'A', 'cocap.AM', 'co.NP/poly') => ('p', 'R', 'cocap.AM', 'co.NP/poly')
('p', 'A', 'cocap.AM', 'co.NP/poly') => ('p', 'AA', 'cocap.AM', 'co.NP/poly')
('p', 'A', 'cocap.AM', 'NP/poly') => ('p', 'R', 'cocap.AM', 'NP/poly')
('p', 'A', 'cocap.AM', 'NP/poly') => ('p', 'AA', 'cocap.AM', 'NP/poly')
('p', 'AA', 'cocap.AM', 'NP/poly') => ('p', 'T', 'cocap.AM', 'NP/poly')
('p', 'AA', 'cocap.AM', 'NP/poly') => ('p', 'EA', 'cocap.AM', 'NP/poly')
('p', 'AA', 'cocap.AM', 'co.NP/poly') => ('p', 'T', 'cocap.AM', 'co.NP/poly')
('p', 'AA', 'cocap.AM', 'co.NP/poly') => ('p', 'EA', 'cocap.AM', 'co.NP/poly')
('p', 'AA', 'cocap.AM', 'cocap.NP/poly') => ('p', 'T', 'cocap.AM', 'cocap.NP/poly')
('p', 'AA', 'cocap.AM', 'cocap.NP/poly') => ('p', 'EA', 'cocap.AM', 'cocap.NP/poly')
('p', 'AA', 'co.AM', 'co.NP/poly') => ('-d', 'AA', 'co.AM', 'co.NP/poly')
('p', 'AA', 'co.AM', 'co.NP/poly') => ('p', 'T', 'co.AM', 'co.NP/poly')
('p', 'AA', 'co.AM', 'co.NP/poly') => ('p', 'EA', 'co.AM', 'co.NP/poly')
('p', 'AA', 'AM', 'NP/poly') => ('-d', 'AA', 'AM', 'NP/poly')
('p', 'AA', 'AM', 'NP/poly') => ('p', 'T', 'AM', 'NP/poly')
('p', 'AA', 'AM', 'NP/poly') => ('p', 'EA', 'AM', 'NP/poly')
('p', 'EA', 'AM', 'NP/poly') => ('-d', 'EA', 'AM', 'NP/poly')
('p', 'EA', 'AM', 'NP/poly') => ('p', 'E', 'AM', 'NP/poly')
('p', 'EA', 'co.AM', 'co.NP/poly') => ('-d', 'EA', 'co.AM', 'co.NP/poly')
('p', 'EA', 'co.AM', 'co.NP/poly') => ('p', 'E', 'co.AM', 'co.NP/poly')
('p', 'E', 'co.AM', 'co.NP/poly') => ('-d', 'E', 'co.AM', 'co.NP/poly')
('p', 'E', 'AM', 'NP/poly') => ('-d', 'E', 'AM', 'NP/poly')
('p', 'T', 'AM', 'NP/poly') => ('-d', 'T', 'AM', 'NP/poly')
('p', 'T', 'co.AM', 'co.NP/poly') => ('-d', 'T', 'co.AM', 'co.NP/poly')
('p', 'R', 'co.AM', 'co.NP/poly') => ('-d', 'R', 'co.AM', 'co.NP/poly')
('p', 'R', 'AM', 'NP/poly') => ('-d', 'R', 'AM', 'NP/poly')
('p', 'A', 'BPP', 'P/poly') => ('-d', 'A', 'BPP', 'P/poly')
('p', 'A', 'BPP', 'P/poly') => ('p', 'R', 'BPP', 'P/poly')
('p', 'A', 'BPP', 'P/poly') => ('p', 'AA', 'BPP', 'P/poly')
('p', 'AA', 'BPP', 'P/poly') => ('-d', 'AA', 'BPP', 'P/poly')
('p', 'AA', 'BPP', 'P/poly') => ('p', 'T', 'BPP', 'P/poly')
('p', 'AA', 'BPP', 'P/poly') => ('p', 'EA', 'BPP', 'P/poly')
('p', 'EA', 'BPP', 'P/poly') => ('-d', 'EA', 'BPP', 'P/poly')
('p', 'EA', 'BPP', 'P/poly') => ('p', 'E', 'BPP', 'P/poly')
('p', 'E', 'BPP', 'P/poly') => ('-d', 'E', 'BPP', 'P/poly')
('p', 'T', 'BPP', 'P/poly') => ('-d', 'T', 'BPP', 'P/poly')
('p', 'R', 'BPP', 'P/poly') => ('-d', 'R', 'BPP', 'P/poly')
('p', 'A', 'NEXP', 'R') => ('-d', 'A', 'NEXP', 'R')
('p', 'A', 'NEXP', 'R') => ('p', 'R', 'NEXP', 'R')
('p', 'A', 'NEXP', 'R') => ('p', 'AA', 'NEXP', 'R')
('p', 'A', 'co.NEXP', 'R') => ('-d', 'A', 'co.NEXP', 'R')
('p', 'A', 'co.NEXP', 'R') => ('p', 'R', 'co.NEXP', 'R')
('p', 'A', 'co.NEXP', 'R') => ('p', 'AA', 'co.NEXP', 'R')
('p', 'A', 'cocap.NEXP', 'R') => ('-d', 'A', 'cocap.NEXP', 'R')
('p', 'A', 'cocap.NEXP', 'R') => ('p', 'R', 'cocap.NEXP', 'R')
('p', 'A', 'cocap.NEXP', 'R') => ('p', 'AA', 'cocap.NEXP', 'R')
('-d', 'A', 'cocap.NEXP', 'RE') => ('-d', 'R', 'cocap.NEXP', 'RE')
('-d', 'A', 'cocap.NEXP', 'RE') => ('-d', 'AA', 'cocap.NEXP', 'RE')
('-d', 'A', 'cocap.NEXP', 'co.RE') => ('-d', 'R', 'cocap.NEXP', 'co.RE')
('-d', 'A', 'cocap.NEXP', 'co.RE') => ('-d', 'AA', 'cocap.NEXP', 'co.RE')
('-d', 'A', 'cocap.NEXP', 'R') => ('-d', 'R', 'cocap.NEXP', 'R')
('-d', 'A', 'cocap.NEXP', 'R') => ('-d', 'AA', 'cocap.NEXP', 'R')
('-d', 'AA', 'cocap.NEXP', 'R') => ('-d', 'T', 'cocap.NEXP', 'R')
('-d', 'AA', 'cocap.NEXP', 'R') => ('-d', 'EA', 'cocap.NEXP', 'R')
('-d', 'AA', 'cocap.NEXP', 'RE') => ('-d', 'T', 'cocap.NEXP', 'RE')
('-d', 'AA', 'cocap.NEXP', 'RE') => ('-d', 'EA', 'cocap.NEXP', 'RE')
('-d', 'AA', 'cocap.NEXP', 'co.RE') => ('-d', 'T', 'cocap.NEXP', 'co.RE')
('-d', 'AA', 'cocap.NEXP', 'co.RE') => ('-d', 'EA', 'cocap.NEXP', 'co.RE')
('p', 'A', 'cocap.NEXP', 'RE') => ('p', 'R', 'cocap.NEXP', 'RE')
('p', 'A', 'cocap.NEXP', 'RE') => ('p', 'AA', 'cocap.NEXP', 'RE')
('p', 'A', 'cocap.NEXP', 'co.RE') => ('p', 'R', 'cocap.NEXP', 'co.RE')
('p', 'A', 'cocap.NEXP', 'co.RE') => ('p', 'AA', 'cocap.NEXP', 'co.RE')
('p', 'AA', 'cocap.NEXP', 'co.RE') => ('p', 'T', 'cocap.NEXP', 'co.RE')
('p', 'AA', 'cocap.NEXP', 'co.RE') => ('p', 'EA', 'cocap.NEXP', 'co.RE')
('p', 'AA', 'cocap.NEXP', 'RE') => ('p', 'T', 'cocap.NEXP', 'RE')
('p', 'AA', 'cocap.NEXP', 'RE') => ('p', 'EA', 'cocap.NEXP', 'RE')
('p', 'AA', 'cocap.NEXP', 'R') => ('p', 'T', 'cocap.NEXP', 'R')
('p', 'AA', 'cocap.NEXP', 'R') => ('p', 'EA', 'cocap.NEXP', 'R')
('-d', 'A', 'co.NEXP', 'RE') => ('-d', 'R', 'co.NEXP', 'RE')
('-d', 'A', 'co.NEXP', 'RE') => ('-d', 'AA', 'co.NEXP', 'RE')
('-d', 'A', 'NEXP', 'co.RE') => ('-d', 'R', 'NEXP', 'co.RE')
('-d', 'A', 'NEXP', 'co.RE') => ('-d', 'AA', 'NEXP', 'co.RE')
('-d', 'AA', 'NEXP', 'co.RE') => ('-d', 'T', 'NEXP', 'co.RE')
('-d', 'AA', 'NEXP', 'co.RE') => ('-d', 'EA', 'NEXP', 'co.RE')
('-d', 'AA', 'co.NEXP', 'RE') => ('-d', 'T', 'co.NEXP', 'RE')
('-d', 'AA', 'co.NEXP', 'RE') => ('-d', 'EA', 'co.NEXP', 'RE')
('p', 'A', 'co.NEXP', 'RE') => ('p', 'R', 'co.NEXP', 'RE')
('p', 'A', 'co.NEXP', 'RE') => ('p', 'AA', 'co.NEXP', 'RE')
('p', 'A', 'NEXP', 'co.RE') => ('p', 'R', 'NEXP', 'co.RE')
('p', 'A', 'NEXP', 'co.RE') => ('p', 'AA', 'NEXP', 'co.RE')
('p', 'AA', 'NEXP', 'co.RE') => ('p', 'T', 'NEXP', 'co.RE')
('p', 'AA', 'NEXP', 'co.RE') => ('p', 'EA', 'NEXP', 'co.RE')
('p', 'AA', 'co.NEXP', 'RE') => ('p', 'T', 'co.NEXP', 'RE')
('p', 'AA', 'co.NEXP', 'RE') => ('p', 'EA', 'co.NEXP', 'RE')
('-d', 'A', 'co.NEXP', 'co.RE') => ('-d', 'R', 'co.NEXP', 'co.RE')
('-d', 'A', 'co.NEXP', 'co.RE') => ('-d', 'AA', 'co.NEXP', 'co.RE')
('-d', 'A', 'co.NEXP', 'R') => ('-d', 'R', 'co.NEXP', 'R')
('-d', 'A', 'co.NEXP', 'R') => ('-d', 'AA', 'co.NEXP', 'R')
('-d', 'A', 'NEXP', 'R') => ('-d', 'R', 'NEXP', 'R')
('-d', 'A', 'NEXP', 'R') => ('-d', 'AA', 'NEXP', 'R')
('-d', 'A', 'NEXP', 'RE') => ('-d', 'R', 'NEXP', 'RE')
('-d', 'A', 'NEXP', 'RE') => ('-d', 'AA', 'NEXP', 'RE')
('-d', 'AA', 'NEXP', 'RE') => ('-d', 'T', 'NEXP', 'RE')
('-d', 'AA', 'NEXP', 'RE') => ('-d', 'EA', 'NEXP', 'RE')
('-d', 'AA', 'NEXP', 'R') => ('-d', 'T', 'NEXP', 'R')
('-d', 'AA', 'NEXP', 'R') => ('-d', 'EA', 'NEXP', 'R')
('-d', 'AA', 'co.NEXP', 'R') => ('-d', 'T', 'co.NEXP', 'R')
('-d', 'AA', 'co.NEXP', 'R') => ('-d', 'EA', 'co.NEXP', 'R')
('-d', 'AA', 'co.NEXP', 'co.RE') => ('-d', 'T', 'co.NEXP', 'co.RE')
('-d', 'AA', 'co.NEXP', 'co.RE') => ('-d', 'EA', 'co.NEXP', 'co.RE')
('-d', 'T', 'co.NEXP', 'R') => ('-d', 'E', 'co.NEXP', 'R')
('-d', 'T', 'NEXP', 'R') => ('-d', 'E', 'NEXP', 'R')
('p', 'A', 'co.NEXP', 'co.RE') => ('p', 'R', 'co.NEXP', 'co.RE')
('p', 'A', 'co.NEXP', 'co.RE') => ('p', 'AA', 'co.NEXP', 'co.RE')
('p', 'A', 'NEXP', 'RE') => ('p', 'R', 'NEXP', 'RE')
('p', 'A', 'NEXP', 'RE') => ('p', 'AA', 'NEXP', 'RE')
('p', 'AA', 'NEXP', 'RE') => ('p', 'T', 'NEXP', 'RE')
('p', 'AA', 'NEXP', 'RE') => ('p', 'EA', 'NEXP', 'RE')
('p', 'AA', 'NEXP', 'R') => ('p', 'T', 'NEXP', 'R')
('p', 'AA', 'NEXP', 'R') => ('p', 'EA', 'NEXP', 'R')
('p', 'AA', 'co.NEXP', 'R') => ('p', 'T', 'co.NEXP', 'R')
('p', 'AA', 'co.NEXP', 'R') => ('p', 'EA', 'co.NEXP', 'R')
('p', 'AA', 'co.NEXP', 'co.RE') => ('p', 'T', 'co.NEXP', 'co.RE')
('p', 'AA', 'co.NEXP', 'co.RE') => ('p', 'EA', 'co.NEXP', 'co.RE')
('p', 'T', 'co.NEXP', 'R') => ('p', 'E', 'co.NEXP', 'R')
('p', 'T', 'NEXP', 'R') => ('p', 'E', 'NEXP', 'R')
('p', 'A', 'MIP*_fe', 'QMIP_fe') => ('-d', 'A', 'MIP*_fe', 'QMIP_fe')
('p', 'A', 'MIP*_fe', 'QMIP_fe') => ('p', 'R', 'MIP*_fe', 'QMIP_fe')
('p', 'A', 'MIP*_fe', 'QMIP_fe') => ('p', 'AA', 'MIP*_fe', 'QMIP_fe')
('p', 'A', 'co.MIP*_fe', 'co.QMIP_fe') => ('-d', 'A', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'A', 'co.MIP*_fe', 'co.QMIP_fe') => ('p', 'R', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'A', 'co.MIP*_fe', 'co.QMIP_fe') => ('p', 'AA', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'A', 'cocap.MIP*_fe', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.MIP*_fe', 'cocap.QMIP_fe')
('p', 'A', 'cocap.MIP*_fe', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.MIP*_fe', 'cocap.QMIP_fe')
('p', 'A', 'cocap.MIP*_fe', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.MIP*_fe', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.MIP*_fe', 'QMIP_fe') => ('-d', 'R', 'cocap.MIP*_fe', 'QMIP_fe')
('-d', 'A', 'cocap.MIP*_fe', 'QMIP_fe') => ('-d', 'AA', 'cocap.MIP*_fe', 'QMIP_fe')
('-d', 'A', 'cocap.MIP*_fe', 'co.QMIP_fe') => ('-d', 'R', 'cocap.MIP*_fe', 'co.QMIP_fe')
('-d', 'A', 'cocap.MIP*_fe', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.MIP*_fe', 'co.QMIP_fe')
('-d', 'A', 'cocap.MIP*_fe', 'cocap.QMIP_fe') => ('-d', 'R', 'cocap.MIP*_fe', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.MIP*_fe', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.MIP*_fe', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.MIP*_fe', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.MIP*_fe', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.MIP*_fe', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.MIP*_fe', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.MIP*_fe', 'QMIP_fe') => ('-d', 'T', 'cocap.MIP*_fe', 'QMIP_fe')
('-d', 'AA', 'cocap.MIP*_fe', 'QMIP_fe') => ('-d', 'EA', 'cocap.MIP*_fe', 'QMIP_fe')
('-d', 'AA', 'cocap.MIP*_fe', 'co.QMIP_fe') => ('-d', 'T', 'cocap.MIP*_fe', 'co.QMIP_fe')
('-d', 'AA', 'cocap.MIP*_fe', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.MIP*_fe', 'co.QMIP_fe')
('p', 'A', 'cocap.MIP*_fe', 'QMIP_fe') => ('p', 'R', 'cocap.MIP*_fe', 'QMIP_fe')
('p', 'A', 'cocap.MIP*_fe', 'QMIP_fe') => ('p', 'AA', 'cocap.MIP*_fe', 'QMIP_fe')
('p', 'A', 'cocap.MIP*_fe', 'co.QMIP_fe') => ('p', 'R', 'cocap.MIP*_fe', 'co.QMIP_fe')
('p', 'A', 'cocap.MIP*_fe', 'co.QMIP_fe') => ('p', 'AA', 'cocap.MIP*_fe', 'co.QMIP_fe')
('p', 'AA', 'cocap.MIP*_fe', 'co.QMIP_fe') => ('p', 'T', 'cocap.MIP*_fe', 'co.QMIP_fe')
('p', 'AA', 'cocap.MIP*_fe', 'co.QMIP_fe') => ('p', 'EA', 'cocap.MIP*_fe', 'co.QMIP_fe')
('p', 'AA', 'cocap.MIP*_fe', 'QMIP_fe') => ('p', 'T', 'cocap.MIP*_fe', 'QMIP_fe')
('p', 'AA', 'cocap.MIP*_fe', 'QMIP_fe') => ('p', 'EA', 'cocap.MIP*_fe', 'QMIP_fe')
('p', 'AA', 'cocap.MIP*_fe', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.MIP*_fe', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.MIP*_fe', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.MIP*_fe', 'cocap.QMIP_fe')
('p', 'AA', 'co.MIP*_fe', 'co.QMIP_fe') => ('-d', 'AA', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'AA', 'co.MIP*_fe', 'co.QMIP_fe') => ('p', 'T', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'AA', 'co.MIP*_fe', 'co.QMIP_fe') => ('p', 'EA', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'AA', 'MIP*_fe', 'QMIP_fe') => ('-d', 'AA', 'MIP*_fe', 'QMIP_fe')
('p', 'AA', 'MIP*_fe', 'QMIP_fe') => ('p', 'T', 'MIP*_fe', 'QMIP_fe')
('p', 'AA', 'MIP*_fe', 'QMIP_fe') => ('p', 'EA', 'MIP*_fe', 'QMIP_fe')
('p', 'EA', 'MIP*_fe', 'QMIP_fe') => ('-d', 'EA', 'MIP*_fe', 'QMIP_fe')
('p', 'EA', 'MIP*_fe', 'QMIP_fe') => ('p', 'E', 'MIP*_fe', 'QMIP_fe')
('p', 'EA', 'co.MIP*_fe', 'co.QMIP_fe') => ('-d', 'EA', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'EA', 'co.MIP*_fe', 'co.QMIP_fe') => ('p', 'E', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'E', 'co.MIP*_fe', 'co.QMIP_fe') => ('-d', 'E', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'E', 'MIP*_fe', 'QMIP_fe') => ('-d', 'E', 'MIP*_fe', 'QMIP_fe')
('p', 'T', 'MIP*_fe', 'QMIP_fe') => ('-d', 'T', 'MIP*_fe', 'QMIP_fe')
('p', 'T', 'co.MIP*_fe', 'co.QMIP_fe') => ('-d', 'T', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'R', 'co.MIP*_fe', 'co.QMIP_fe') => ('-d', 'R', 'co.MIP*_fe', 'co.QMIP_fe')
('p', 'R', 'MIP*_fe', 'QMIP_fe') => ('-d', 'R', 'MIP*_fe', 'QMIP_fe')
('p', 'A', 'NISZK', 'SZK') => ('-d', 'A', 'NISZK', 'SZK')
('p', 'A', 'NISZK', 'SZK') => ('p', 'R', 'NISZK', 'SZK')
('p', 'A', 'NISZK', 'SZK') => ('p', 'AA', 'NISZK', 'SZK')
('p', 'A', 'co.NISZK', 'SZK') => ('-d', 'A', 'co.NISZK', 'SZK')
('p', 'A', 'co.NISZK', 'SZK') => ('p', 'R', 'co.NISZK', 'SZK')
('p', 'A', 'co.NISZK', 'SZK') => ('p', 'AA', 'co.NISZK', 'SZK')
('p', 'A', 'cocap.NISZK', 'SZK') => ('-d', 'A', 'cocap.NISZK', 'SZK')
('p', 'A', 'cocap.NISZK', 'SZK') => ('p', 'R', 'cocap.NISZK', 'SZK')
('p', 'A', 'cocap.NISZK', 'SZK') => ('p', 'AA', 'cocap.NISZK', 'SZK')
('p', 'AA', 'cocap.NISZK', 'SZK') => ('-d', 'AA', 'cocap.NISZK', 'SZK')
('p', 'AA', 'cocap.NISZK', 'SZK') => ('p', 'T', 'cocap.NISZK', 'SZK')
('p', 'AA', 'cocap.NISZK', 'SZK') => ('p', 'EA', 'cocap.NISZK', 'SZK')
('p', 'EA', 'cocap.NISZK', 'SZK') => ('-d', 'EA', 'cocap.NISZK', 'SZK')
('p', 'EA', 'cocap.NISZK', 'SZK') => ('p', 'E', 'cocap.NISZK', 'SZK')
('p', 'E', 'cocap.NISZK', 'SZK') => ('-d', 'E', 'cocap.NISZK', 'SZK')
('p', 'T', 'cocap.NISZK', 'SZK') => ('-d', 'T', 'cocap.NISZK', 'SZK')
('p', 'R', 'cocap.NISZK', 'SZK') => ('-d', 'R', 'cocap.NISZK', 'SZK')
('p', 'AA', 'co.NISZK', 'SZK') => ('-d', 'AA', 'co.NISZK', 'SZK')
('p', 'AA', 'co.NISZK', 'SZK') => ('p', 'T', 'co.NISZK', 'SZK')
('p', 'AA', 'co.NISZK', 'SZK') => ('p', 'EA', 'co.NISZK', 'SZK')
('p', 'AA', 'NISZK', 'SZK') => ('-d', 'AA', 'NISZK', 'SZK')
('p', 'AA', 'NISZK', 'SZK') => ('p', 'T', 'NISZK', 'SZK')
('p', 'AA', 'NISZK', 'SZK') => ('p', 'EA', 'NISZK', 'SZK')
('p', 'EA', 'NISZK', 'SZK') => ('-d', 'EA', 'NISZK', 'SZK')
('p', 'EA', 'NISZK', 'SZK') => ('p', 'E', 'NISZK', 'SZK')
('p', 'EA', 'co.NISZK', 'SZK') => ('-d', 'EA', 'co.NISZK', 'SZK')
('p', 'EA', 'co.NISZK', 'SZK') => ('p', 'E', 'co.NISZK', 'SZK')
('p', 'E', 'co.NISZK', 'SZK') => ('-d', 'E', 'co.NISZK', 'SZK')
('p', 'E', 'NISZK', 'SZK') => ('-d', 'E', 'NISZK', 'SZK')
('p', 'T', 'NISZK', 'SZK') => ('-d', 'T', 'NISZK', 'SZK')
('p', 'T', 'co.NISZK', 'SZK') => ('-d', 'T', 'co.NISZK', 'SZK')
('p', 'R', 'co.NISZK', 'SZK') => ('-d', 'R', 'co.NISZK', 'SZK')
('p', 'R', 'NISZK', 'SZK') => ('-d', 'R', 'NISZK', 'SZK')
('p', 'A', 'IP', 'PSPACE') => ('-d', 'A', 'IP', 'PSPACE')
('p', 'A', 'IP', 'PSPACE') => ('p', 'R', 'IP', 'PSPACE')
('p', 'A', 'IP', 'PSPACE') => ('p', 'AA', 'IP', 'PSPACE')
('p', 'A', 'co.IP', 'PSPACE') => ('-d', 'A', 'co.IP', 'PSPACE')
('p', 'A', 'co.IP', 'PSPACE') => ('p', 'R', 'co.IP', 'PSPACE')
('p', 'A', 'co.IP', 'PSPACE') => ('p', 'AA', 'co.IP', 'PSPACE')
('p', 'A', 'cocap.IP', 'PSPACE') => ('-d', 'A', 'cocap.IP', 'PSPACE')
('p', 'A', 'cocap.IP', 'PSPACE') => ('p', 'R', 'cocap.IP', 'PSPACE')
('p', 'A', 'cocap.IP', 'PSPACE') => ('p', 'AA', 'cocap.IP', 'PSPACE')
('-d', 'A', 'cocap.IP', 'PSPACE/poly') => ('-d', 'R', 'cocap.IP', 'PSPACE/poly')
('-d', 'A', 'cocap.IP', 'PSPACE/poly') => ('-d', 'AA', 'cocap.IP', 'PSPACE/poly')
('-d', 'AA', 'cocap.IP', 'PSPACE/poly') => ('-d', 'T', 'cocap.IP', 'PSPACE/poly')
('-d', 'AA', 'cocap.IP', 'PSPACE/poly') => ('-d', 'EA', 'cocap.IP', 'PSPACE/poly')
('p', 'A', 'cocap.IP', 'PSPACE/poly') => ('p', 'R', 'cocap.IP', 'PSPACE/poly')
('p', 'A', 'cocap.IP', 'PSPACE/poly') => ('p', 'AA', 'cocap.IP', 'PSPACE/poly')
('p', 'AA', 'cocap.IP', 'PSPACE/poly') => ('p', 'T', 'cocap.IP', 'PSPACE/poly')
('p', 'AA', 'cocap.IP', 'PSPACE/poly') => ('p', 'EA', 'cocap.IP', 'PSPACE/poly')
('p', 'AA', 'cocap.IP', 'PSPACE') => ('-d', 'AA', 'cocap.IP', 'PSPACE')
('p', 'AA', 'cocap.IP', 'PSPACE') => ('p', 'T', 'cocap.IP', 'PSPACE')
('p', 'AA', 'cocap.IP', 'PSPACE') => ('p', 'EA', 'cocap.IP', 'PSPACE')
('p', 'EA', 'cocap.IP', 'PSPACE') => ('-d', 'EA', 'cocap.IP', 'PSPACE')
('p', 'EA', 'cocap.IP', 'PSPACE') => ('p', 'E', 'cocap.IP', 'PSPACE')
('p', 'E', 'cocap.IP', 'PSPACE') => ('-d', 'E', 'cocap.IP', 'PSPACE')
('p', 'T', 'cocap.IP', 'PSPACE') => ('-d', 'T', 'cocap.IP', 'PSPACE')
('p', 'R', 'cocap.IP', 'PSPACE') => ('-d', 'R', 'cocap.IP', 'PSPACE')
('-d', 'A', 'co.IP', 'PSPACE/poly') => ('-d', 'R', 'co.IP', 'PSPACE/poly')
('-d', 'A', 'co.IP', 'PSPACE/poly') => ('-d', 'AA', 'co.IP', 'PSPACE/poly')
('-d', 'A', 'IP', 'PSPACE/poly') => ('-d', 'R', 'IP', 'PSPACE/poly')
('-d', 'A', 'IP', 'PSPACE/poly') => ('-d', 'AA', 'IP', 'PSPACE/poly')
('-d', 'AA', 'IP', 'PSPACE/poly') => ('-d', 'T', 'IP', 'PSPACE/poly')
('-d', 'AA', 'IP', 'PSPACE/poly') => ('-d', 'EA', 'IP', 'PSPACE/poly')
('-d', 'AA', 'co.IP', 'PSPACE/poly') => ('-d', 'T', 'co.IP', 'PSPACE/poly')
('-d', 'AA', 'co.IP', 'PSPACE/poly') => ('-d', 'EA', 'co.IP', 'PSPACE/poly')
('p', 'A', 'co.IP', 'PSPACE/poly') => ('p', 'R', 'co.IP', 'PSPACE/poly')
('p', 'A', 'co.IP', 'PSPACE/poly') => ('p', 'AA', 'co.IP', 'PSPACE/poly')
('p', 'A', 'IP', 'PSPACE/poly') => ('p', 'R', 'IP', 'PSPACE/poly')
('p', 'A', 'IP', 'PSPACE/poly') => ('p', 'AA', 'IP', 'PSPACE/poly')
('p', 'AA', 'IP', 'PSPACE/poly') => ('p', 'T', 'IP', 'PSPACE/poly')
('p', 'AA', 'IP', 'PSPACE/poly') => ('p', 'EA', 'IP', 'PSPACE/poly')
('p', 'AA', 'co.IP', 'PSPACE/poly') => ('p', 'T', 'co.IP', 'PSPACE/poly')
('p', 'AA', 'co.IP', 'PSPACE/poly') => ('p', 'EA', 'co.IP', 'PSPACE/poly')
('p', 'AA', 'co.IP', 'PSPACE') => ('-d', 'AA', 'co.IP', 'PSPACE')
('p', 'AA', 'co.IP', 'PSPACE') => ('p', 'T', 'co.IP', 'PSPACE')
('p', 'AA', 'co.IP', 'PSPACE') => ('p', 'EA', 'co.IP', 'PSPACE')
('p', 'AA', 'IP', 'PSPACE') => ('-d', 'AA', 'IP', 'PSPACE')
('p', 'AA', 'IP', 'PSPACE') => ('p', 'T', 'IP', 'PSPACE')
('p', 'AA', 'IP', 'PSPACE') => ('p', 'EA', 'IP', 'PSPACE')
('p', 'EA', 'IP', 'PSPACE') => ('-d', 'EA', 'IP', 'PSPACE')
('p', 'EA', 'IP', 'PSPACE') => ('p', 'E', 'IP', 'PSPACE')
('p', 'EA', 'co.IP', 'PSPACE') => ('-d', 'EA', 'co.IP', 'PSPACE')
('p', 'EA', 'co.IP', 'PSPACE') => ('p', 'E', 'co.IP', 'PSPACE')
('p', 'E', 'co.IP', 'PSPACE') => ('-d', 'E', 'co.IP', 'PSPACE')
('p', 'E', 'IP', 'PSPACE') => ('-d', 'E', 'IP', 'PSPACE')
('p', 'T', 'IP', 'PSPACE') => ('-d', 'T', 'IP', 'PSPACE')
('p', 'T', 'co.IP', 'PSPACE') => ('-d', 'T', 'co.IP', 'PSPACE')
('p', 'R', 'co.IP', 'PSPACE') => ('-d', 'R', 'co.IP', 'PSPACE')
('p', 'R', 'IP', 'PSPACE') => ('-d', 'R', 'IP', 'PSPACE')
('p', 'E', 'NEXP_plo', 'P') => ('-d', 'E', 'NEXP_plo', 'P')
('p', 'E', 'co.NEXP_plo', 'P') => ('-d', 'E', 'co.NEXP_plo', 'P')
('p', 'E', 'cocap.NEXP_plo', 'P') => ('-d', 'E', 'cocap.NEXP_plo', 'P')
('d', 'A', 'NP', 'BQP/qpoly') => ('-p', 'A', 'NP', 'BQP/qpoly')
('d', 'A', 'co.NP', 'BQP/qpoly') => ('-p', 'A', 'co.NP', 'BQP/qpoly')
('p', 'A', 'QIP', 'QMIP_ne') => ('-d', 'A', 'QIP', 'QMIP_ne')
('p', 'A', 'QIP', 'QMIP_ne') => ('p', 'R', 'QIP', 'QMIP_ne')
('p', 'A', 'QIP', 'QMIP_ne') => ('p', 'AA', 'QIP', 'QMIP_ne')
('p', 'A', 'co.QIP', 'co.QMIP_ne') => ('-d', 'A', 'co.QIP', 'co.QMIP_ne')
('p', 'A', 'co.QIP', 'co.QMIP_ne') => ('p', 'R', 'co.QIP', 'co.QMIP_ne')
('p', 'A', 'co.QIP', 'co.QMIP_ne') => ('p', 'AA', 'co.QIP', 'co.QMIP_ne')
('p', 'A', 'cocap.QIP', 'cocap.QMIP_ne') => ('-d', 'A', 'cocap.QIP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QIP', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.QIP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QIP', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.QIP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QIP', 'QMIP_ne') => ('-d', 'R', 'cocap.QIP', 'QMIP_ne')
('-d', 'A', 'cocap.QIP', 'QMIP_ne') => ('-d', 'AA', 'cocap.QIP', 'QMIP_ne')
('-d', 'A', 'cocap.QIP', 'co.QMIP_ne') => ('-d', 'R', 'cocap.QIP', 'co.QMIP_ne')
('-d', 'A', 'cocap.QIP', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.QIP', 'co.QMIP_ne')
('-d', 'A', 'cocap.QIP', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.QIP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QIP', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.QIP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QIP', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.QIP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QIP', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.QIP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QIP', 'QMIP_ne') => ('-d', 'T', 'cocap.QIP', 'QMIP_ne')
('-d', 'AA', 'cocap.QIP', 'QMIP_ne') => ('-d', 'EA', 'cocap.QIP', 'QMIP_ne')
('-d', 'AA', 'cocap.QIP', 'co.QMIP_ne') => ('-d', 'T', 'cocap.QIP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QIP', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.QIP', 'co.QMIP_ne')
('p', 'A', 'cocap.QIP', 'QMIP_ne') => ('p', 'R', 'cocap.QIP', 'QMIP_ne')
('p', 'A', 'cocap.QIP', 'QMIP_ne') => ('p', 'AA', 'cocap.QIP', 'QMIP_ne')
('p', 'A', 'cocap.QIP', 'co.QMIP_ne') => ('p', 'R', 'cocap.QIP', 'co.QMIP_ne')
('p', 'A', 'cocap.QIP', 'co.QMIP_ne') => ('p', 'AA', 'cocap.QIP', 'co.QMIP_ne')
('p', 'AA', 'cocap.QIP', 'co.QMIP_ne') => ('p', 'T', 'cocap.QIP', 'co.QMIP_ne')
('p', 'AA', 'cocap.QIP', 'co.QMIP_ne') => ('p', 'EA', 'cocap.QIP', 'co.QMIP_ne')
('p', 'AA', 'cocap.QIP', 'QMIP_ne') => ('p', 'T', 'cocap.QIP', 'QMIP_ne')
('p', 'AA', 'cocap.QIP', 'QMIP_ne') => ('p', 'EA', 'cocap.QIP', 'QMIP_ne')
('p', 'AA', 'cocap.QIP', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.QIP', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QIP', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.QIP', 'cocap.QMIP_ne')
('p', 'AA', 'co.QIP', 'co.QMIP_ne') => ('-d', 'AA', 'co.QIP', 'co.QMIP_ne')
('p', 'AA', 'co.QIP', 'co.QMIP_ne') => ('p', 'T', 'co.QIP', 'co.QMIP_ne')
('p', 'AA', 'co.QIP', 'co.QMIP_ne') => ('p', 'EA', 'co.QIP', 'co.QMIP_ne')
('p', 'AA', 'QIP', 'QMIP_ne') => ('-d', 'AA', 'QIP', 'QMIP_ne')
('p', 'AA', 'QIP', 'QMIP_ne') => ('p', 'T', 'QIP', 'QMIP_ne')
('p', 'AA', 'QIP', 'QMIP_ne') => ('p', 'EA', 'QIP', 'QMIP_ne')
('p', 'EA', 'QIP', 'QMIP_ne') => ('-d', 'EA', 'QIP', 'QMIP_ne')
('p', 'EA', 'QIP', 'QMIP_ne') => ('p', 'E', 'QIP', 'QMIP_ne')
('p', 'EA', 'co.QIP', 'co.QMIP_ne') => ('-d', 'EA', 'co.QIP', 'co.QMIP_ne')
('p', 'EA', 'co.QIP', 'co.QMIP_ne') => ('p', 'E', 'co.QIP', 'co.QMIP_ne')
('p', 'E', 'co.QIP', 'co.QMIP_ne') => ('-d', 'E', 'co.QIP', 'co.QMIP_ne')
('p', 'E', 'QIP', 'QMIP_ne') => ('-d', 'E', 'QIP', 'QMIP_ne')
('p', 'T', 'QIP', 'QMIP_ne') => ('-d', 'T', 'QIP', 'QMIP_ne')
('p', 'T', 'co.QIP', 'co.QMIP_ne') => ('-d', 'T', 'co.QIP', 'co.QMIP_ne')
('p', 'R', 'co.QIP', 'co.QMIP_ne') => ('-d', 'R', 'co.QIP', 'co.QMIP_ne')
('p', 'R', 'QIP', 'QMIP_ne') => ('-d', 'R', 'QIP', 'QMIP_ne')
('p', 'A', 'QMIP_cme', 'co.RE') => ('-d', 'A', 'QMIP_cme', 'co.RE')
('p', 'A', 'QMIP_cme', 'co.RE') => ('p', 'R', 'QMIP_cme', 'co.RE')
('p', 'A', 'QMIP_cme', 'co.RE') => ('p', 'AA', 'QMIP_cme', 'co.RE')
('p', 'A', 'co.QMIP_cme', 'RE') => ('-d', 'A', 'co.QMIP_cme', 'RE')
('p', 'A', 'co.QMIP_cme', 'RE') => ('p', 'R', 'co.QMIP_cme', 'RE')
('p', 'A', 'co.QMIP_cme', 'RE') => ('p', 'AA', 'co.QMIP_cme', 'RE')
('p', 'A', 'cocap.QMIP_cme', 'R') => ('-d', 'A', 'cocap.QMIP_cme', 'R')
('p', 'A', 'cocap.QMIP_cme', 'R') => ('p', 'R', 'cocap.QMIP_cme', 'R')
('p', 'A', 'cocap.QMIP_cme', 'R') => ('p', 'AA', 'cocap.QMIP_cme', 'R')
('-d', 'A', 'cocap.QMIP_cme', 'RE') => ('-d', 'R', 'cocap.QMIP_cme', 'RE')
('-d', 'A', 'cocap.QMIP_cme', 'RE') => ('-d', 'AA', 'cocap.QMIP_cme', 'RE')
('-d', 'A', 'cocap.QMIP_cme', 'co.RE') => ('-d', 'R', 'cocap.QMIP_cme', 'co.RE')
('-d', 'A', 'cocap.QMIP_cme', 'co.RE') => ('-d', 'AA', 'cocap.QMIP_cme', 'co.RE')
('-d', 'A', 'cocap.QMIP_cme', 'R') => ('-d', 'R', 'cocap.QMIP_cme', 'R')
('-d', 'A', 'cocap.QMIP_cme', 'R') => ('-d', 'AA', 'cocap.QMIP_cme', 'R')
('-d', 'AA', 'cocap.QMIP_cme', 'R') => ('-d', 'T', 'cocap.QMIP_cme', 'R')
('-d', 'AA', 'cocap.QMIP_cme', 'R') => ('-d', 'EA', 'cocap.QMIP_cme', 'R')
('-d', 'AA', 'cocap.QMIP_cme', 'RE') => ('-d', 'T', 'cocap.QMIP_cme', 'RE')
('-d', 'AA', 'cocap.QMIP_cme', 'RE') => ('-d', 'EA', 'cocap.QMIP_cme', 'RE')
('-d', 'AA', 'cocap.QMIP_cme', 'co.RE') => ('-d', 'T', 'cocap.QMIP_cme', 'co.RE')
('-d', 'AA', 'cocap.QMIP_cme', 'co.RE') => ('-d', 'EA', 'cocap.QMIP_cme', 'co.RE')
('p', 'A', 'cocap.QMIP_cme', 'RE') => ('p', 'R', 'cocap.QMIP_cme', 'RE')
('p', 'A', 'cocap.QMIP_cme', 'RE') => ('p', 'AA', 'cocap.QMIP_cme', 'RE')
('p', 'A', 'cocap.QMIP_cme', 'co.RE') => ('p', 'R', 'cocap.QMIP_cme', 'co.RE')
('p', 'A', 'cocap.QMIP_cme', 'co.RE') => ('p', 'AA', 'cocap.QMIP_cme', 'co.RE')
('p', 'AA', 'cocap.QMIP_cme', 'co.RE') => ('p', 'T', 'cocap.QMIP_cme', 'co.RE')
('p', 'AA', 'cocap.QMIP_cme', 'co.RE') => ('p', 'EA', 'cocap.QMIP_cme', 'co.RE')
('p', 'AA', 'cocap.QMIP_cme', 'RE') => ('p', 'T', 'cocap.QMIP_cme', 'RE')
('p', 'AA', 'cocap.QMIP_cme', 'RE') => ('p', 'EA', 'cocap.QMIP_cme', 'RE')
('p', 'AA', 'cocap.QMIP_cme', 'R') => ('p', 'T', 'cocap.QMIP_cme', 'R')
('p', 'AA', 'cocap.QMIP_cme', 'R') => ('p', 'EA', 'cocap.QMIP_cme', 'R')
('p', 'AA', 'co.QMIP_cme', 'RE') => ('-d', 'AA', 'co.QMIP_cme', 'RE')
('p', 'AA', 'co.QMIP_cme', 'RE') => ('p', 'T', 'co.QMIP_cme', 'RE')
('p', 'AA', 'co.QMIP_cme', 'RE') => ('p', 'EA', 'co.QMIP_cme', 'RE')
('p', 'AA', 'QMIP_cme', 'co.RE') => ('-d', 'AA', 'QMIP_cme', 'co.RE')
('p', 'AA', 'QMIP_cme', 'co.RE') => ('p', 'T', 'QMIP_cme', 'co.RE')
('p', 'AA', 'QMIP_cme', 'co.RE') => ('p', 'EA', 'QMIP_cme', 'co.RE')
('p', 'EA', 'QMIP_cme', 'co.RE') => ('-d', 'EA', 'QMIP_cme', 'co.RE')
('p', 'EA', 'QMIP_cme', 'co.RE') => ('p', 'E', 'QMIP_cme', 'co.RE')
('p', 'EA', 'co.QMIP_cme', 'RE') => ('-d', 'EA', 'co.QMIP_cme', 'RE')
('p', 'EA', 'co.QMIP_cme', 'RE') => ('p', 'E', 'co.QMIP_cme', 'RE')
('p', 'E', 'co.QMIP_cme', 'RE') => ('-d', 'E', 'co.QMIP_cme', 'RE')
('p', 'E', 'QMIP_cme', 'co.RE') => ('-d', 'E', 'QMIP_cme', 'co.RE')
('p', 'T', 'QMIP_cme', 'co.RE') => ('-d', 'T', 'QMIP_cme', 'co.RE')
('p', 'T', 'co.QMIP_cme', 'RE') => ('-d', 'T', 'co.QMIP_cme', 'RE')
('p', 'R', 'co.QMIP_cme', 'RE') => ('-d', 'R', 'co.QMIP_cme', 'RE')
('p', 'R', 'QMIP_cme', 'co.RE') => ('-d', 'R', 'QMIP_cme', 'co.RE')
('p', 'A', 'BQP', 'BQP/mpoly') => ('-d', 'A', 'BQP', 'BQP/mpoly')
('p', 'A', 'BQP', 'BQP/mpoly') => ('p', 'R', 'BQP', 'BQP/mpoly')
('p', 'A', 'BQP', 'BQP/mpoly') => ('p', 'AA', 'BQP', 'BQP/mpoly')
('p', 'AA', 'BQP', 'BQP/mpoly') => ('-d', 'AA', 'BQP', 'BQP/mpoly')
('p', 'AA', 'BQP', 'BQP/mpoly') => ('p', 'T', 'BQP', 'BQP/mpoly')
('p', 'AA', 'BQP', 'BQP/mpoly') => ('p', 'EA', 'BQP', 'BQP/mpoly')
('p', 'EA', 'BQP', 'BQP/mpoly') => ('-d', 'EA', 'BQP', 'BQP/mpoly')
('p', 'EA', 'BQP', 'BQP/mpoly') => ('p', 'E', 'BQP', 'BQP/mpoly')
('p', 'E', 'BQP', 'BQP/mpoly') => ('-d', 'E', 'BQP', 'BQP/mpoly')
('p', 'T', 'BQP', 'BQP/mpoly') => ('-d', 'T', 'BQP', 'BQP/mpoly')
('p', 'R', 'BQP', 'BQP/mpoly') => ('-d', 'R', 'BQP', 'BQP/mpoly')
('p', 'A', 'SZK', 'QSZK') => ('-d', 'A', 'SZK', 'QSZK')
('p', 'A', 'SZK', 'QSZK') => ('p', 'R', 'SZK', 'QSZK')
('p', 'A', 'SZK', 'QSZK') => ('p', 'AA', 'SZK', 'QSZK')
('p', 'E', 'cocap.NISZK', 'QSZK') => ('-d', 'E', 'cocap.NISZK', 'QSZK')
('p', 'A', 'cocap.NISZK', 'QSZK') => ('-d', 'A', 'cocap.NISZK', 'QSZK')
('p', 'A', 'cocap.NISZK', 'QSZK') => ('p', 'R', 'cocap.NISZK', 'QSZK')
('p', 'A', 'cocap.NISZK', 'QSZK') => ('p', 'AA', 'cocap.NISZK', 'QSZK')
('p', 'AA', 'cocap.NISZK', 'QSZK') => ('-d', 'AA', 'cocap.NISZK', 'QSZK')
('p', 'AA', 'cocap.NISZK', 'QSZK') => ('p', 'T', 'cocap.NISZK', 'QSZK')
('p', 'AA', 'cocap.NISZK', 'QSZK') => ('p', 'EA', 'cocap.NISZK', 'QSZK')
('p', 'EA', 'cocap.NISZK', 'QSZK') => ('-d', 'EA', 'cocap.NISZK', 'QSZK')
('p', 'T', 'cocap.NISZK', 'QSZK') => ('-d', 'T', 'cocap.NISZK', 'QSZK')
('p', 'R', 'cocap.NISZK', 'QSZK') => ('-d', 'R', 'cocap.NISZK', 'QSZK')
('p', 'E', 'co.NISZK', 'QSZK') => ('-d', 'E', 'co.NISZK', 'QSZK')
('p', 'E', 'NISZK', 'QSZK') => ('-d', 'E', 'NISZK', 'QSZK')
('p', 'A', 'co.NISZK', 'QSZK') => ('-d', 'A', 'co.NISZK', 'QSZK')
('p', 'A', 'co.NISZK', 'QSZK') => ('p', 'R', 'co.NISZK', 'QSZK')
('p', 'A', 'co.NISZK', 'QSZK') => ('p', 'AA', 'co.NISZK', 'QSZK')
('p', 'A', 'NISZK', 'QSZK') => ('-d', 'A', 'NISZK', 'QSZK')
('p', 'A', 'NISZK', 'QSZK') => ('p', 'R', 'NISZK', 'QSZK')
('p', 'A', 'NISZK', 'QSZK') => ('p', 'AA', 'NISZK', 'QSZK')
('p', 'AA', 'NISZK', 'QSZK') => ('-d', 'AA', 'NISZK', 'QSZK')
('p', 'AA', 'NISZK', 'QSZK') => ('p', 'T', 'NISZK', 'QSZK')
('p', 'AA', 'NISZK', 'QSZK') => ('p', 'EA', 'NISZK', 'QSZK')
('p', 'AA', 'co.NISZK', 'QSZK') => ('-d', 'AA', 'co.NISZK', 'QSZK')
('p', 'AA', 'co.NISZK', 'QSZK') => ('p', 'T', 'co.NISZK', 'QSZK')
('p', 'AA', 'co.NISZK', 'QSZK') => ('p', 'EA', 'co.NISZK', 'QSZK')
('p', 'EA', 'co.NISZK', 'QSZK') => ('-d', 'EA', 'co.NISZK', 'QSZK')
('p', 'EA', 'NISZK', 'QSZK') => ('-d', 'EA', 'NISZK', 'QSZK')
('p', 'T', 'co.NISZK', 'QSZK') => ('-d', 'T', 'co.NISZK', 'QSZK')
('p', 'T', 'NISZK', 'QSZK') => ('-d', 'T', 'NISZK', 'QSZK')
('p', 'R', 'NISZK', 'QSZK') => ('-d', 'R', 'NISZK', 'QSZK')
('p', 'R', 'co.NISZK', 'QSZK') => ('-d', 'R', 'co.NISZK', 'QSZK')
('p', 'AA', 'SZK', 'QSZK') => ('-d', 'AA', 'SZK', 'QSZK')
('p', 'AA', 'SZK', 'QSZK') => ('p', 'T', 'SZK', 'QSZK')
('p', 'AA', 'SZK', 'QSZK') => ('p', 'EA', 'SZK', 'QSZK')
('p', 'EA', 'SZK', 'QSZK') => ('-d', 'EA', 'SZK', 'QSZK')
('p', 'EA', 'SZK', 'QSZK') => ('p', 'E', 'SZK', 'QSZK')
('p', 'E', 'SZK', 'QSZK') => ('-d', 'E', 'SZK', 'QSZK')
('p', 'T', 'SZK', 'QSZK') => ('-d', 'T', 'SZK', 'QSZK')
('p', 'R', 'SZK', 'QSZK') => ('-d', 'R', 'SZK', 'QSZK')
('p', 'A', 'QMIP_ne', 'NEXP') => ('-d', 'A', 'QMIP_ne', 'NEXP')
('p', 'A', 'QMIP_ne', 'NEXP') => ('p', 'R', 'QMIP_ne', 'NEXP')
('p', 'A', 'QMIP_ne', 'NEXP') => ('p', 'AA', 'QMIP_ne', 'NEXP')
('p', 'A', 'co.QMIP_ne', 'co.NEXP') => ('-d', 'A', 'co.QMIP_ne', 'co.NEXP')
('p', 'A', 'co.QMIP_ne', 'co.NEXP') => ('p', 'R', 'co.QMIP_ne', 'co.NEXP')
('p', 'A', 'co.QMIP_ne', 'co.NEXP') => ('p', 'AA', 'co.QMIP_ne', 'co.NEXP')
('p', 'A', 'cocap.QMIP_ne', 'cocap.NEXP') => ('-d', 'A', 'cocap.QMIP_ne', 'cocap.NEXP')
('p', 'A', 'cocap.QMIP_ne', 'cocap.NEXP') => ('p', 'R', 'cocap.QMIP_ne', 'cocap.NEXP')
('p', 'A', 'cocap.QMIP_ne', 'cocap.NEXP') => ('p', 'AA', 'cocap.QMIP_ne', 'cocap.NEXP')
('-d', 'A', 'cocap.QMIP_ne', 'co.NEXP') => ('-d', 'R', 'cocap.QMIP_ne', 'co.NEXP')
('-d', 'A', 'cocap.QMIP_ne', 'co.NEXP') => ('-d', 'AA', 'cocap.QMIP_ne', 'co.NEXP')
('-d', 'A', 'cocap.QMIP_ne', 'NEXP') => ('-d', 'R', 'cocap.QMIP_ne', 'NEXP')
('-d', 'A', 'cocap.QMIP_ne', 'NEXP') => ('-d', 'AA', 'cocap.QMIP_ne', 'NEXP')
('-d', 'A', 'cocap.QMIP_ne', 'cocap.NEXP') => ('-d', 'R', 'cocap.QMIP_ne', 'cocap.NEXP')
('-d', 'A', 'cocap.QMIP_ne', 'cocap.NEXP') => ('-d', 'AA', 'cocap.QMIP_ne', 'cocap.NEXP')
('-d', 'A', 'cocap.QMIP_ne', 'R') => ('-d', 'R', 'cocap.QMIP_ne', 'R')
('-d', 'A', 'cocap.QMIP_ne', 'R') => ('-d', 'AA', 'cocap.QMIP_ne', 'R')
('-d', 'A', 'cocap.QIP', 'R') => ('-d', 'R', 'cocap.QIP', 'R')
('-d', 'A', 'cocap.QIP', 'R') => ('-d', 'AA', 'cocap.QIP', 'R')
('-d', 'A', 'cocap.QIP', 'RE') => ('-d', 'R', 'cocap.QIP', 'RE')
('-d', 'A', 'cocap.QIP', 'RE') => ('-d', 'AA', 'cocap.QIP', 'RE')
('-d', 'A', 'cocap.QIP', 'co.RE') => ('-d', 'R', 'cocap.QIP', 'co.RE')
('-d', 'A', 'cocap.QIP', 'co.RE') => ('-d', 'AA', 'cocap.QIP', 'co.RE')
('-d', 'AA', 'cocap.QIP', 'co.RE') => ('-d', 'T', 'cocap.QIP', 'co.RE')
('-d', 'AA', 'cocap.QIP', 'co.RE') => ('-d', 'EA', 'cocap.QIP', 'co.RE')
('-d', 'AA', 'cocap.QIP', 'RE') => ('-d', 'T', 'cocap.QIP', 'RE')
('-d', 'AA', 'cocap.QIP', 'RE') => ('-d', 'EA', 'cocap.QIP', 'RE')
('-d', 'AA', 'cocap.QIP', 'R') => ('-d', 'T', 'cocap.QIP', 'R')
('-d', 'AA', 'cocap.QIP', 'R') => ('-d', 'EA', 'cocap.QIP', 'R')
('-d', 'A', 'cocap.QMIP_ne', 'RE') => ('-d', 'R', 'cocap.QMIP_ne', 'RE')
('-d', 'A', 'cocap.QMIP_ne', 'RE') => ('-d', 'AA', 'cocap.QMIP_ne', 'RE')
('-d', 'A', 'cocap.QMIP_ne', 'co.RE') => ('-d', 'R', 'cocap.QMIP_ne', 'co.RE')
('-d', 'A', 'cocap.QMIP_ne', 'co.RE') => ('-d', 'AA', 'cocap.QMIP_ne', 'co.RE')
('-d', 'AA', 'cocap.QMIP_ne', 'co.RE') => ('-d', 'T', 'cocap.QMIP_ne', 'co.RE')
('-d', 'AA', 'cocap.QMIP_ne', 'co.RE') => ('-d', 'EA', 'cocap.QMIP_ne', 'co.RE')
('-d', 'AA', 'cocap.QMIP_ne', 'RE') => ('-d', 'T', 'cocap.QMIP_ne', 'RE')
('-d', 'AA', 'cocap.QMIP_ne', 'RE') => ('-d', 'EA', 'cocap.QMIP_ne', 'RE')
('-d', 'AA', 'cocap.QMIP_ne', 'R') => ('-d', 'T', 'cocap.QMIP_ne', 'R')
('-d', 'AA', 'cocap.QMIP_ne', 'R') => ('-d', 'EA', 'cocap.QMIP_ne', 'R')
('-d', 'A', 'cocap.QIP', 'cocap.NEXP') => ('-d', 'R', 'cocap.QIP', 'cocap.NEXP')
('-d', 'A', 'cocap.QIP', 'cocap.NEXP') => ('-d', 'AA', 'cocap.QIP', 'cocap.NEXP')
('-d', 'A', 'cocap.QIP', 'co.NEXP') => ('-d', 'R', 'cocap.QIP', 'co.NEXP')
('-d', 'A', 'cocap.QIP', 'co.NEXP') => ('-d', 'AA', 'cocap.QIP', 'co.NEXP')
('-d', 'A', 'cocap.QIP', 'NEXP') => ('-d', 'R', 'cocap.QIP', 'NEXP')
('-d', 'A', 'cocap.QIP', 'NEXP') => ('-d', 'AA', 'cocap.QIP', 'NEXP')
('-d', 'A', 'cocap.QIP', 'NEXP/poly') => ('-d', 'R', 'cocap.QIP', 'NEXP/poly')
('-d', 'A', 'cocap.QIP', 'NEXP/poly') => ('-d', 'AA', 'cocap.QIP', 'NEXP/poly')
('-d', 'AA', 'cocap.QIP', 'NEXP/poly') => ('-d', 'T', 'cocap.QIP', 'NEXP/poly')
('-d', 'AA', 'cocap.QIP', 'NEXP/poly') => ('-d', 'EA', 'cocap.QIP', 'NEXP/poly')
('-d', 'AA', 'cocap.QIP', 'NEXP') => ('-d', 'T', 'cocap.QIP', 'NEXP')
('-d', 'AA', 'cocap.QIP', 'NEXP') => ('-d', 'EA', 'cocap.QIP', 'NEXP')
('-d', 'AA', 'cocap.QIP', 'co.NEXP') => ('-d', 'T', 'cocap.QIP', 'co.NEXP')
('-d', 'AA', 'cocap.QIP', 'co.NEXP') => ('-d', 'EA', 'cocap.QIP', 'co.NEXP')
('-d', 'AA', 'cocap.QIP', 'cocap.NEXP') => ('-d', 'T', 'cocap.QIP', 'cocap.NEXP')
('-d', 'AA', 'cocap.QIP', 'cocap.NEXP') => ('-d', 'EA', 'cocap.QIP', 'cocap.NEXP')
('-d', 'A', 'cocap.QMIP_ne', 'NEXP/poly') => ('-d', 'R', 'cocap.QMIP_ne', 'NEXP/poly')
('-d', 'A', 'cocap.QMIP_ne', 'NEXP/poly') => ('-d', 'AA', 'cocap.QMIP_ne', 'NEXP/poly')
('-d', 'AA', 'cocap.QMIP_ne', 'NEXP/poly') => ('-d', 'T', 'cocap.QMIP_ne', 'NEXP/poly')
('-d', 'AA', 'cocap.QMIP_ne', 'NEXP/poly') => ('-d', 'EA', 'cocap.QMIP_ne', 'NEXP/poly')
('-d', 'AA', 'cocap.QMIP_ne', 'cocap.NEXP') => ('-d', 'T', 'cocap.QMIP_ne', 'cocap.NEXP')
('-d', 'AA', 'cocap.QMIP_ne', 'cocap.NEXP') => ('-d', 'EA', 'cocap.QMIP_ne', 'cocap.NEXP')
('-d', 'AA', 'cocap.QMIP_ne', 'co.NEXP') => ('-d', 'T', 'cocap.QMIP_ne', 'co.NEXP')
('-d', 'AA', 'cocap.QMIP_ne', 'co.NEXP') => ('-d', 'EA', 'cocap.QMIP_ne', 'co.NEXP')
('-d', 'AA', 'cocap.QMIP_ne', 'NEXP') => ('-d', 'T', 'cocap.QMIP_ne', 'NEXP')
('-d', 'AA', 'cocap.QMIP_ne', 'NEXP') => ('-d', 'EA', 'cocap.QMIP_ne', 'NEXP')
('p', 'A', 'cocap.QMIP_ne', 'co.NEXP') => ('p', 'R', 'cocap.QMIP_ne', 'co.NEXP')
('p', 'A', 'cocap.QMIP_ne', 'co.NEXP') => ('p', 'AA', 'cocap.QMIP_ne', 'co.NEXP')
('p', 'A', 'cocap.QMIP_ne', 'NEXP') => ('p', 'R', 'cocap.QMIP_ne', 'NEXP')
('p', 'A', 'cocap.QMIP_ne', 'NEXP') => ('p', 'AA', 'cocap.QMIP_ne', 'NEXP')
('p', 'A', 'cocap.QMIP_ne', 'R') => ('p', 'R', 'cocap.QMIP_ne', 'R')
('p', 'A', 'cocap.QMIP_ne', 'R') => ('p', 'AA', 'cocap.QMIP_ne', 'R')
('p', 'A', 'cocap.QIP', 'R') => ('p', 'R', 'cocap.QIP', 'R')
('p', 'A', 'cocap.QIP', 'R') => ('p', 'AA', 'cocap.QIP', 'R')
('p', 'A', 'cocap.QIP', 'RE') => ('p', 'R', 'cocap.QIP', 'RE')
('p', 'A', 'cocap.QIP', 'RE') => ('p', 'AA', 'cocap.QIP', 'RE')
('p', 'A', 'cocap.QIP', 'co.RE') => ('p', 'R', 'cocap.QIP', 'co.RE')
('p', 'A', 'cocap.QIP', 'co.RE') => ('p', 'AA', 'cocap.QIP', 'co.RE')
('p', 'AA', 'cocap.QIP', 'co.RE') => ('p', 'T', 'cocap.QIP', 'co.RE')
('p', 'AA', 'cocap.QIP', 'co.RE') => ('p', 'EA', 'cocap.QIP', 'co.RE')
('p', 'AA', 'cocap.QIP', 'RE') => ('p', 'T', 'cocap.QIP', 'RE')
('p', 'AA', 'cocap.QIP', 'RE') => ('p', 'EA', 'cocap.QIP', 'RE')
('p', 'AA', 'cocap.QIP', 'R') => ('p', 'T', 'cocap.QIP', 'R')
('p', 'AA', 'cocap.QIP', 'R') => ('p', 'EA', 'cocap.QIP', 'R')
('p', 'A', 'cocap.QMIP_ne', 'RE') => ('p', 'R', 'cocap.QMIP_ne', 'RE')
('p', 'A', 'cocap.QMIP_ne', 'RE') => ('p', 'AA', 'cocap.QMIP_ne', 'RE')
('p', 'A', 'cocap.QMIP_ne', 'co.RE') => ('p', 'R', 'cocap.QMIP_ne', 'co.RE')
('p', 'A', 'cocap.QMIP_ne', 'co.RE') => ('p', 'AA', 'cocap.QMIP_ne', 'co.RE')
('p', 'AA', 'cocap.QMIP_ne', 'co.RE') => ('p', 'T', 'cocap.QMIP_ne', 'co.RE')
('p', 'AA', 'cocap.QMIP_ne', 'co.RE') => ('p', 'EA', 'cocap.QMIP_ne', 'co.RE')
('p', 'AA', 'cocap.QMIP_ne', 'RE') => ('p', 'T', 'cocap.QMIP_ne', 'RE')
('p', 'AA', 'cocap.QMIP_ne', 'RE') => ('p', 'EA', 'cocap.QMIP_ne', 'RE')
('p', 'AA', 'cocap.QMIP_ne', 'R') => ('p', 'T', 'cocap.QMIP_ne', 'R')
('p', 'AA', 'cocap.QMIP_ne', 'R') => ('p', 'EA', 'cocap.QMIP_ne', 'R')
('p', 'A', 'cocap.QIP', 'NEXP') => ('p', 'R', 'cocap.QIP', 'NEXP')
('p', 'A', 'cocap.QIP', 'NEXP') => ('p', 'AA', 'cocap.QIP', 'NEXP')
('p', 'A', 'cocap.QIP', 'co.NEXP') => ('p', 'R', 'cocap.QIP', 'co.NEXP')
('p', 'A', 'cocap.QIP', 'co.NEXP') => ('p', 'AA', 'cocap.QIP', 'co.NEXP')
('p', 'A', 'cocap.QIP', 'cocap.NEXP') => ('p', 'R', 'cocap.QIP', 'cocap.NEXP')
('p', 'A', 'cocap.QIP', 'cocap.NEXP') => ('p', 'AA', 'cocap.QIP', 'cocap.NEXP')
('p', 'A', 'cocap.QIP', 'NEXP/poly') => ('p', 'R', 'cocap.QIP', 'NEXP/poly')
('p', 'A', 'cocap.QIP', 'NEXP/poly') => ('p', 'AA', 'cocap.QIP', 'NEXP/poly')
('p', 'AA', 'cocap.QIP', 'NEXP/poly') => ('p', 'T', 'cocap.QIP', 'NEXP/poly')
('p', 'AA', 'cocap.QIP', 'NEXP/poly') => ('p', 'EA', 'cocap.QIP', 'NEXP/poly')
('p', 'AA', 'cocap.QIP', 'cocap.NEXP') => ('p', 'T', 'cocap.QIP', 'cocap.NEXP')
('p', 'AA', 'cocap.QIP', 'cocap.NEXP') => ('p', 'EA', 'cocap.QIP', 'cocap.NEXP')
('p', 'AA', 'cocap.QIP', 'co.NEXP') => ('p', 'T', 'cocap.QIP', 'co.NEXP')
('p', 'AA', 'cocap.QIP', 'co.NEXP') => ('p', 'EA', 'cocap.QIP', 'co.NEXP')
('p', 'AA', 'cocap.QIP', 'NEXP') => ('p', 'T', 'cocap.QIP', 'NEXP')
('p', 'AA', 'cocap.QIP', 'NEXP') => ('p', 'EA', 'cocap.QIP', 'NEXP')
('p', 'A', 'cocap.QMIP_ne', 'NEXP/poly') => ('p', 'R', 'cocap.QMIP_ne', 'NEXP/poly')
('p', 'A', 'cocap.QMIP_ne', 'NEXP/poly') => ('p', 'AA', 'cocap.QMIP_ne', 'NEXP/poly')
('p', 'AA', 'cocap.QMIP_ne', 'NEXP/poly') => ('p', 'T', 'cocap.QMIP_ne', 'NEXP/poly')
('p', 'AA', 'cocap.QMIP_ne', 'NEXP/poly') => ('p', 'EA', 'cocap.QMIP_ne', 'NEXP/poly')
('p', 'AA', 'cocap.QMIP_ne', 'NEXP') => ('p', 'T', 'cocap.QMIP_ne', 'NEXP')
('p', 'AA', 'cocap.QMIP_ne', 'NEXP') => ('p', 'EA', 'cocap.QMIP_ne', 'NEXP')
('p', 'AA', 'cocap.QMIP_ne', 'co.NEXP') => ('p', 'T', 'cocap.QMIP_ne', 'co.NEXP')
('p', 'AA', 'cocap.QMIP_ne', 'co.NEXP') => ('p', 'EA', 'cocap.QMIP_ne', 'co.NEXP')
('p', 'AA', 'cocap.QMIP_ne', 'cocap.NEXP') => ('p', 'T', 'cocap.QMIP_ne', 'cocap.NEXP')
('p', 'AA', 'cocap.QMIP_ne', 'cocap.NEXP') => ('p', 'EA', 'cocap.QMIP_ne', 'cocap.NEXP')
('-d', 'A', 'co.QMIP_ne', 'R') => ('-d', 'R', 'co.QMIP_ne', 'R')
('-d', 'A', 'co.QMIP_ne', 'R') => ('-d', 'AA', 'co.QMIP_ne', 'R')
('-d', 'A', 'QMIP_ne', 'R') => ('-d', 'R', 'QMIP_ne', 'R')
('-d', 'A', 'QMIP_ne', 'R') => ('-d', 'AA', 'QMIP_ne', 'R')
('-d', 'A', 'QIP', 'R') => ('-d', 'R', 'QIP', 'R')
('-d', 'A', 'QIP', 'R') => ('-d', 'AA', 'QIP', 'R')
('-d', 'A', 'co.QIP', 'R') => ('-d', 'R', 'co.QIP', 'R')
('-d', 'A', 'co.QIP', 'R') => ('-d', 'AA', 'co.QIP', 'R')
('-d', 'A', 'co.QIP', 'RE') => ('-d', 'R', 'co.QIP', 'RE')
('-d', 'A', 'co.QIP', 'RE') => ('-d', 'AA', 'co.QIP', 'RE')
('-d', 'A', 'QIP', 'co.RE') => ('-d', 'R', 'QIP', 'co.RE')
('-d', 'A', 'QIP', 'co.RE') => ('-d', 'AA', 'QIP', 'co.RE')
('-d', 'AA', 'QIP', 'co.RE') => ('-d', 'T', 'QIP', 'co.RE')
('-d', 'AA', 'QIP', 'co.RE') => ('-d', 'EA', 'QIP', 'co.RE')
('-d', 'AA', 'co.QIP', 'RE') => ('-d', 'T', 'co.QIP', 'RE')
('-d', 'AA', 'co.QIP', 'RE') => ('-d', 'EA', 'co.QIP', 'RE')
('-d', 'A', 'co.QIP', 'co.RE') => ('-d', 'R', 'co.QIP', 'co.RE')
('-d', 'A', 'co.QIP', 'co.RE') => ('-d', 'AA', 'co.QIP', 'co.RE')
('-d', 'A', 'QIP', 'RE') => ('-d', 'R', 'QIP', 'RE')
('-d', 'A', 'QIP', 'RE') => ('-d', 'AA', 'QIP', 'RE')
('-d', 'AA', 'QIP', 'RE') => ('-d', 'T', 'QIP', 'RE')
('-d', 'AA', 'QIP', 'RE') => ('-d', 'EA', 'QIP', 'RE')
('-d', 'AA', 'co.QIP', 'co.RE') => ('-d', 'T', 'co.QIP', 'co.RE')
('-d', 'AA', 'co.QIP', 'co.RE') => ('-d', 'EA', 'co.QIP', 'co.RE')
('-d', 'AA', 'co.QIP', 'R') => ('-d', 'T', 'co.QIP', 'R')
('-d', 'AA', 'co.QIP', 'R') => ('-d', 'EA', 'co.QIP', 'R')
('-d', 'AA', 'QIP', 'R') => ('-d', 'T', 'QIP', 'R')
('-d', 'AA', 'QIP', 'R') => ('-d', 'EA', 'QIP', 'R')
('-d', 'A', 'QMIP_ne', 'RE') => ('-d', 'R', 'QMIP_ne', 'RE')
('-d', 'A', 'QMIP_ne', 'RE') => ('-d', 'AA', 'QMIP_ne', 'RE')
('-d', 'A', 'co.QMIP_ne', 'co.RE') => ('-d', 'R', 'co.QMIP_ne', 'co.RE')
('-d', 'A', 'co.QMIP_ne', 'co.RE') => ('-d', 'AA', 'co.QMIP_ne', 'co.RE')
('-d', 'AA', 'co.QMIP_ne', 'co.RE') => ('-d', 'T', 'co.QMIP_ne', 'co.RE')
('-d', 'AA', 'co.QMIP_ne', 'co.RE') => ('-d', 'EA', 'co.QMIP_ne', 'co.RE')
('-d', 'AA', 'QMIP_ne', 'RE') => ('-d', 'T', 'QMIP_ne', 'RE')
('-d', 'AA', 'QMIP_ne', 'RE') => ('-d', 'EA', 'QMIP_ne', 'RE')
('-d', 'A', 'QMIP_ne', 'co.RE') => ('-d', 'R', 'QMIP_ne', 'co.RE')
('-d', 'A', 'QMIP_ne', 'co.RE') => ('-d', 'AA', 'QMIP_ne', 'co.RE')
('-d', 'A', 'co.QMIP_ne', 'RE') => ('-d', 'R', 'co.QMIP_ne', 'RE')
('-d', 'A', 'co.QMIP_ne', 'RE') => ('-d', 'AA', 'co.QMIP_ne', 'RE')
('-d', 'AA', 'co.QMIP_ne', 'RE') => ('-d', 'T', 'co.QMIP_ne', 'RE')
('-d', 'AA', 'co.QMIP_ne', 'RE') => ('-d', 'EA', 'co.QMIP_ne', 'RE')
('-d', 'AA', 'QMIP_ne', 'co.RE') => ('-d', 'T', 'QMIP_ne', 'co.RE')
('-d', 'AA', 'QMIP_ne', 'co.RE') => ('-d', 'EA', 'QMIP_ne', 'co.RE')
('-d', 'AA', 'QMIP_ne', 'R') => ('-d', 'T', 'QMIP_ne', 'R')
('-d', 'AA', 'QMIP_ne', 'R') => ('-d', 'EA', 'QMIP_ne', 'R')
('-d', 'AA', 'co.QMIP_ne', 'R') => ('-d', 'T', 'co.QMIP_ne', 'R')
('-d', 'AA', 'co.QMIP_ne', 'R') => ('-d', 'EA', 'co.QMIP_ne', 'R')
('p', 'A', 'co.QMIP_ne', 'R') => ('p', 'R', 'co.QMIP_ne', 'R')
('p', 'A', 'co.QMIP_ne', 'R') => ('p', 'AA', 'co.QMIP_ne', 'R')
('p', 'A', 'QMIP_ne', 'R') => ('p', 'R', 'QMIP_ne', 'R')
('p', 'A', 'QMIP_ne', 'R') => ('p', 'AA', 'QMIP_ne', 'R')
('p', 'A', 'QIP', 'R') => ('p', 'R', 'QIP', 'R')
('p', 'A', 'QIP', 'R') => ('p', 'AA', 'QIP', 'R')
('p', 'A', 'co.QIP', 'R') => ('p', 'R', 'co.QIP', 'R')
('p', 'A', 'co.QIP', 'R') => ('p', 'AA', 'co.QIP', 'R')
('p', 'A', 'co.QIP', 'RE') => ('p', 'R', 'co.QIP', 'RE')
('p', 'A', 'co.QIP', 'RE') => ('p', 'AA', 'co.QIP', 'RE')
('p', 'A', 'QIP', 'co.RE') => ('p', 'R', 'QIP', 'co.RE')
('p', 'A', 'QIP', 'co.RE') => ('p', 'AA', 'QIP', 'co.RE')
('p', 'AA', 'QIP', 'co.RE') => ('p', 'T', 'QIP', 'co.RE')
('p', 'AA', 'QIP', 'co.RE') => ('p', 'EA', 'QIP', 'co.RE')
('p', 'AA', 'co.QIP', 'RE') => ('p', 'T', 'co.QIP', 'RE')
('p', 'AA', 'co.QIP', 'RE') => ('p', 'EA', 'co.QIP', 'RE')
('p', 'A', 'co.QIP', 'co.RE') => ('p', 'R', 'co.QIP', 'co.RE')
('p', 'A', 'co.QIP', 'co.RE') => ('p', 'AA', 'co.QIP', 'co.RE')
('p', 'A', 'QIP', 'RE') => ('p', 'R', 'QIP', 'RE')
('p', 'A', 'QIP', 'RE') => ('p', 'AA', 'QIP', 'RE')
('p', 'AA', 'QIP', 'RE') => ('p', 'T', 'QIP', 'RE')
('p', 'AA', 'QIP', 'RE') => ('p', 'EA', 'QIP', 'RE')
('p', 'AA', 'QIP', 'R') => ('p', 'T', 'QIP', 'R')
('p', 'AA', 'QIP', 'R') => ('p', 'EA', 'QIP', 'R')
('p', 'AA', 'co.QIP', 'R') => ('p', 'T', 'co.QIP', 'R')
('p', 'AA', 'co.QIP', 'R') => ('p', 'EA', 'co.QIP', 'R')
('p', 'AA', 'co.QIP', 'co.RE') => ('p', 'T', 'co.QIP', 'co.RE')
('p', 'AA', 'co.QIP', 'co.RE') => ('p', 'EA', 'co.QIP', 'co.RE')
('p', 'A', 'QMIP_ne', 'RE') => ('p', 'R', 'QMIP_ne', 'RE')
('p', 'A', 'QMIP_ne', 'RE') => ('p', 'AA', 'QMIP_ne', 'RE')
('p', 'A', 'co.QMIP_ne', 'co.RE') => ('p', 'R', 'co.QMIP_ne', 'co.RE')
('p', 'A', 'co.QMIP_ne', 'co.RE') => ('p', 'AA', 'co.QMIP_ne', 'co.RE')
('p', 'AA', 'co.QMIP_ne', 'co.RE') => ('p', 'T', 'co.QMIP_ne', 'co.RE')
('p', 'AA', 'co.QMIP_ne', 'co.RE') => ('p', 'EA', 'co.QMIP_ne', 'co.RE')
('p', 'AA', 'QMIP_ne', 'RE') => ('p', 'T', 'QMIP_ne', 'RE')
('p', 'AA', 'QMIP_ne', 'RE') => ('p', 'EA', 'QMIP_ne', 'RE')
('p', 'A', 'QMIP_ne', 'co.RE') => ('p', 'R', 'QMIP_ne', 'co.RE')
('p', 'A', 'QMIP_ne', 'co.RE') => ('p', 'AA', 'QMIP_ne', 'co.RE')
('p', 'A', 'co.QMIP_ne', 'RE') => ('p', 'R', 'co.QMIP_ne', 'RE')
('p', 'A', 'co.QMIP_ne', 'RE') => ('p', 'AA', 'co.QMIP_ne', 'RE')
('p', 'AA', 'co.QMIP_ne', 'RE') => ('p', 'T', 'co.QMIP_ne', 'RE')
('p', 'AA', 'co.QMIP_ne', 'RE') => ('p', 'EA', 'co.QMIP_ne', 'RE')
('p', 'AA', 'co.QMIP_ne', 'R') => ('p', 'T', 'co.QMIP_ne', 'R')
('p', 'AA', 'co.QMIP_ne', 'R') => ('p', 'EA', 'co.QMIP_ne', 'R')
('p', 'AA', 'QMIP_ne', 'R') => ('p', 'T', 'QMIP_ne', 'R')
('p', 'AA', 'QMIP_ne', 'R') => ('p', 'EA', 'QMIP_ne', 'R')
('p', 'AA', 'QMIP_ne', 'co.RE') => ('p', 'T', 'QMIP_ne', 'co.RE')
('p', 'AA', 'QMIP_ne', 'co.RE') => ('p', 'EA', 'QMIP_ne', 'co.RE')
('p', 'E', 'co.QIP', 'co.NEXP') => ('-d', 'E', 'co.QIP', 'co.NEXP')
('p', 'E', 'QIP', 'NEXP') => ('-d', 'E', 'QIP', 'NEXP')
('p', 'A', 'co.QIP', 'co.NEXP') => ('-d', 'A', 'co.QIP', 'co.NEXP')
('p', 'A', 'co.QIP', 'co.NEXP') => ('p', 'R', 'co.QIP', 'co.NEXP')
('p', 'A', 'co.QIP', 'co.NEXP') => ('p', 'AA', 'co.QIP', 'co.NEXP')
('p', 'A', 'QIP', 'NEXP') => ('-d', 'A', 'QIP', 'NEXP')
('p', 'A', 'QIP', 'NEXP') => ('p', 'R', 'QIP', 'NEXP')
('p', 'A', 'QIP', 'NEXP') => ('p', 'AA', 'QIP', 'NEXP')
('-d', 'A', 'QIP', 'NEXP/poly') => ('-d', 'R', 'QIP', 'NEXP/poly')
('-d', 'A', 'QIP', 'NEXP/poly') => ('-d', 'AA', 'QIP', 'NEXP/poly')
('-d', 'A', 'co.QIP', 'NEXP/poly') => ('-d', 'R', 'co.QIP', 'NEXP/poly')
('-d', 'A', 'co.QIP', 'NEXP/poly') => ('-d', 'AA', 'co.QIP', 'NEXP/poly')
('-d', 'AA', 'co.QIP', 'NEXP/poly') => ('-d', 'T', 'co.QIP', 'NEXP/poly')
('-d', 'AA', 'co.QIP', 'NEXP/poly') => ('-d', 'EA', 'co.QIP', 'NEXP/poly')
('-d', 'AA', 'QIP', 'NEXP/poly') => ('-d', 'T', 'QIP', 'NEXP/poly')
('-d', 'AA', 'QIP', 'NEXP/poly') => ('-d', 'EA', 'QIP', 'NEXP/poly')
('p', 'A', 'QIP', 'NEXP/poly') => ('p', 'R', 'QIP', 'NEXP/poly')
('p', 'A', 'QIP', 'NEXP/poly') => ('p', 'AA', 'QIP', 'NEXP/poly')
('p', 'A', 'co.QIP', 'NEXP/poly') => ('p', 'R', 'co.QIP', 'NEXP/poly')
('p', 'A', 'co.QIP', 'NEXP/poly') => ('p', 'AA', 'co.QIP', 'NEXP/poly')
('p', 'AA', 'co.QIP', 'NEXP/poly') => ('p', 'T', 'co.QIP', 'NEXP/poly')
('p', 'AA', 'co.QIP', 'NEXP/poly') => ('p', 'EA', 'co.QIP', 'NEXP/poly')
('p', 'AA', 'QIP', 'NEXP/poly') => ('p', 'T', 'QIP', 'NEXP/poly')
('p', 'AA', 'QIP', 'NEXP/poly') => ('p', 'EA', 'QIP', 'NEXP/poly')
('p', 'AA', 'QIP', 'NEXP') => ('-d', 'AA', 'QIP', 'NEXP')
('p', 'AA', 'QIP', 'NEXP') => ('p', 'T', 'QIP', 'NEXP')
('p', 'AA', 'QIP', 'NEXP') => ('p', 'EA', 'QIP', 'NEXP')
('p', 'AA', 'co.QIP', 'co.NEXP') => ('-d', 'AA', 'co.QIP', 'co.NEXP')
('p', 'AA', 'co.QIP', 'co.NEXP') => ('p', 'T', 'co.QIP', 'co.NEXP')
('p', 'AA', 'co.QIP', 'co.NEXP') => ('p', 'EA', 'co.QIP', 'co.NEXP')
('p', 'EA', 'co.QIP', 'co.NEXP') => ('-d', 'EA', 'co.QIP', 'co.NEXP')
('p', 'EA', 'QIP', 'NEXP') => ('-d', 'EA', 'QIP', 'NEXP')
('p', 'T', 'co.QIP', 'co.NEXP') => ('-d', 'T', 'co.QIP', 'co.NEXP')
('p', 'T', 'QIP', 'NEXP') => ('-d', 'T', 'QIP', 'NEXP')
('p', 'R', 'QIP', 'NEXP') => ('-d', 'R', 'QIP', 'NEXP')
('p', 'R', 'co.QIP', 'co.NEXP') => ('-d', 'R', 'co.QIP', 'co.NEXP')
('-d', 'A', 'co.QMIP_ne', 'NEXP/poly') => ('-d', 'R', 'co.QMIP_ne', 'NEXP/poly')
('-d', 'A', 'co.QMIP_ne', 'NEXP/poly') => ('-d', 'AA', 'co.QMIP_ne', 'NEXP/poly')
('-d', 'A', 'QMIP_ne', 'NEXP/poly') => ('-d', 'R', 'QMIP_ne', 'NEXP/poly')
('-d', 'A', 'QMIP_ne', 'NEXP/poly') => ('-d', 'AA', 'QMIP_ne', 'NEXP/poly')
('-d', 'AA', 'QMIP_ne', 'NEXP/poly') => ('-d', 'T', 'QMIP_ne', 'NEXP/poly')
('-d', 'AA', 'QMIP_ne', 'NEXP/poly') => ('-d', 'EA', 'QMIP_ne', 'NEXP/poly')
('-d', 'AA', 'co.QMIP_ne', 'NEXP/poly') => ('-d', 'T', 'co.QMIP_ne', 'NEXP/poly')
('-d', 'AA', 'co.QMIP_ne', 'NEXP/poly') => ('-d', 'EA', 'co.QMIP_ne', 'NEXP/poly')
('p', 'A', 'co.QMIP_ne', 'NEXP/poly') => ('p', 'R', 'co.QMIP_ne', 'NEXP/poly')
('p', 'A', 'co.QMIP_ne', 'NEXP/poly') => ('p', 'AA', 'co.QMIP_ne', 'NEXP/poly')
('p', 'A', 'QMIP_ne', 'NEXP/poly') => ('p', 'R', 'QMIP_ne', 'NEXP/poly')
('p', 'A', 'QMIP_ne', 'NEXP/poly') => ('p', 'AA', 'QMIP_ne', 'NEXP/poly')
('p', 'AA', 'QMIP_ne', 'NEXP/poly') => ('p', 'T', 'QMIP_ne', 'NEXP/poly')
('p', 'AA', 'QMIP_ne', 'NEXP/poly') => ('p', 'EA', 'QMIP_ne', 'NEXP/poly')
('p', 'AA', 'co.QMIP_ne', 'NEXP/poly') => ('p', 'T', 'co.QMIP_ne', 'NEXP/poly')
('p', 'AA', 'co.QMIP_ne', 'NEXP/poly') => ('p', 'EA', 'co.QMIP_ne', 'NEXP/poly')
('p', 'AA', 'co.QMIP_ne', 'co.NEXP') => ('-d', 'AA', 'co.QMIP_ne', 'co.NEXP')
('p', 'AA', 'co.QMIP_ne', 'co.NEXP') => ('p', 'T', 'co.QMIP_ne', 'co.NEXP')
('p', 'AA', 'co.QMIP_ne', 'co.NEXP') => ('p', 'EA', 'co.QMIP_ne', 'co.NEXP')
('p', 'AA', 'QMIP_ne', 'NEXP') => ('-d', 'AA', 'QMIP_ne', 'NEXP')
('p', 'AA', 'QMIP_ne', 'NEXP') => ('p', 'T', 'QMIP_ne', 'NEXP')
('p', 'AA', 'QMIP_ne', 'NEXP') => ('p', 'EA', 'QMIP_ne', 'NEXP')
('p', 'EA', 'QMIP_ne', 'NEXP') => ('-d', 'EA', 'QMIP_ne', 'NEXP')
('p', 'EA', 'QMIP_ne', 'NEXP') => ('p', 'E', 'QMIP_ne', 'NEXP')
('p', 'EA', 'co.QMIP_ne', 'co.NEXP') => ('-d', 'EA', 'co.QMIP_ne', 'co.NEXP')
('p', 'EA', 'co.QMIP_ne', 'co.NEXP') => ('p', 'E', 'co.QMIP_ne', 'co.NEXP')
('p', 'E', 'co.QMIP_ne', 'co.NEXP') => ('-d', 'E', 'co.QMIP_ne', 'co.NEXP')
('p', 'E', 'QMIP_ne', 'NEXP') => ('-d', 'E', 'QMIP_ne', 'NEXP')
('p', 'T', 'QMIP_ne', 'NEXP') => ('-d', 'T', 'QMIP_ne', 'NEXP')
('p', 'T', 'co.QMIP_ne', 'co.NEXP') => ('-d', 'T', 'co.QMIP_ne', 'co.NEXP')
('p', 'R', 'co.QMIP_ne', 'co.NEXP') => ('-d', 'R', 'co.QMIP_ne', 'co.NEXP')
('p', 'R', 'QMIP_ne', 'NEXP') => ('-d', 'R', 'QMIP_ne', 'NEXP')
('p', 'A', 'Delta_2P', 'S_2P') => ('-d', 'A', 'Delta_2P', 'S_2P')
('p', 'A', 'Delta_2P', 'S_2P') => ('p', 'R', 'Delta_2P', 'S_2P')
('p', 'A', 'Delta_2P', 'S_2P') => ('p', 'AA', 'Delta_2P', 'S_2P')
('p', 'E', 'NP', 'S_2P') => ('-d', 'E', 'NP', 'S_2P')
('p', 'E', 'co.NP', 'S_2P') => ('-d', 'E', 'co.NP', 'S_2P')
('p', 'E', 'cocap.NP', 'S_2P') => ('-d', 'E', 'cocap.NP', 'S_2P')
('p', 'A', 'NP', 'S_2P') => ('-d', 'A', 'NP', 'S_2P')
('p', 'A', 'NP', 'S_2P') => ('p', 'R', 'NP', 'S_2P')
('p', 'A', 'NP', 'S_2P') => ('p', 'AA', 'NP', 'S_2P')
('p', 'A', 'co.NP', 'S_2P') => ('-d', 'A', 'co.NP', 'S_2P')
('p', 'A', 'co.NP', 'S_2P') => ('p', 'R', 'co.NP', 'S_2P')
('p', 'A', 'co.NP', 'S_2P') => ('p', 'AA', 'co.NP', 'S_2P')
('p', 'A', 'cocap.NP', 'S_2P') => ('-d', 'A', 'cocap.NP', 'S_2P')
('p', 'A', 'cocap.NP', 'S_2P') => ('p', 'R', 'cocap.NP', 'S_2P')
('p', 'A', 'cocap.NP', 'S_2P') => ('p', 'AA', 'cocap.NP', 'S_2P')
('p', 'AA', 'cocap.NP', 'S_2P') => ('-d', 'AA', 'cocap.NP', 'S_2P')
('p', 'AA', 'cocap.NP', 'S_2P') => ('p', 'T', 'cocap.NP', 'S_2P')
('p', 'AA', 'cocap.NP', 'S_2P') => ('p', 'EA', 'cocap.NP', 'S_2P')
('p', 'EA', 'cocap.NP', 'S_2P') => ('-d', 'EA', 'cocap.NP', 'S_2P')
('p', 'T', 'cocap.NP', 'S_2P') => ('-d', 'T', 'cocap.NP', 'S_2P')
('p', 'R', 'cocap.NP', 'S_2P') => ('-d', 'R', 'cocap.NP', 'S_2P')
('d', 'A', 'S_2P', 'BQP/qpoly') => ('-p', 'A', 'S_2P', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'S_2P') => ('-d', 'AA', 'co.NP', 'S_2P')
('p', 'AA', 'co.NP', 'S_2P') => ('p', 'T', 'co.NP', 'S_2P')
('p', 'AA', 'co.NP', 'S_2P') => ('p', 'EA', 'co.NP', 'S_2P')
('p', 'AA', 'NP', 'S_2P') => ('-d', 'AA', 'NP', 'S_2P')
('p', 'AA', 'NP', 'S_2P') => ('p', 'T', 'NP', 'S_2P')
('p', 'AA', 'NP', 'S_2P') => ('p', 'EA', 'NP', 'S_2P')
('p', 'EA', 'NP', 'S_2P') => ('-d', 'EA', 'NP', 'S_2P')
('p', 'EA', 'co.NP', 'S_2P') => ('-d', 'EA', 'co.NP', 'S_2P')
('p', 'T', 'NP', 'S_2P') => ('-d', 'T', 'NP', 'S_2P')
('p', 'T', 'co.NP', 'S_2P') => ('-d', 'T', 'co.NP', 'S_2P')
('p', 'R', 'co.NP', 'S_2P') => ('-d', 'R', 'co.NP', 'S_2P')
('p', 'R', 'NP', 'S_2P') => ('-d', 'R', 'NP', 'S_2P')
('p', 'AA', 'Delta_2P', 'S_2P') => ('-d', 'AA', 'Delta_2P', 'S_2P')
('p', 'AA', 'Delta_2P', 'S_2P') => ('p', 'T', 'Delta_2P', 'S_2P')
('p', 'AA', 'Delta_2P', 'S_2P') => ('p', 'EA', 'Delta_2P', 'S_2P')
('p', 'EA', 'Delta_2P', 'S_2P') => ('-d', 'EA', 'Delta_2P', 'S_2P')
('p', 'EA', 'Delta_2P', 'S_2P') => ('p', 'E', 'Delta_2P', 'S_2P')
('p', 'E', 'Delta_2P', 'S_2P') => ('-d', 'E', 'Delta_2P', 'S_2P')
('p', 'T', 'Delta_2P', 'S_2P') => ('-d', 'T', 'Delta_2P', 'S_2P')
('p', 'R', 'Delta_2P', 'S_2P') => ('-d', 'R', 'Delta_2P', 'S_2P')
('p', 'A', 'NISZK', 'NIQSZK') => ('-d', 'A', 'NISZK', 'NIQSZK')
('p', 'A', 'NISZK', 'NIQSZK') => ('p', 'R', 'NISZK', 'NIQSZK')
('p', 'A', 'NISZK', 'NIQSZK') => ('p', 'AA', 'NISZK', 'NIQSZK')
('p', 'A', 'co.NISZK', 'co.NIQSZK') => ('-d', 'A', 'co.NISZK', 'co.NIQSZK')
('p', 'A', 'co.NISZK', 'co.NIQSZK') => ('p', 'R', 'co.NISZK', 'co.NIQSZK')
('p', 'A', 'co.NISZK', 'co.NIQSZK') => ('p', 'AA', 'co.NISZK', 'co.NIQSZK')
('p', 'A', 'cocap.NISZK', 'cocap.NIQSZK') => ('-d', 'A', 'cocap.NISZK', 'cocap.NIQSZK')
('p', 'A', 'cocap.NISZK', 'cocap.NIQSZK') => ('p', 'R', 'cocap.NISZK', 'cocap.NIQSZK')
('p', 'A', 'cocap.NISZK', 'cocap.NIQSZK') => ('p', 'AA', 'cocap.NISZK', 'cocap.NIQSZK')
('-d', 'A', 'cocap.NISZK', 'co.NIQSZK') => ('-d', 'R', 'cocap.NISZK', 'co.NIQSZK')
('-d', 'A', 'cocap.NISZK', 'co.NIQSZK') => ('-d', 'AA', 'cocap.NISZK', 'co.NIQSZK')
('-d', 'A', 'cocap.NISZK', 'NIQSZK') => ('-d', 'R', 'cocap.NISZK', 'NIQSZK')
('-d', 'A', 'cocap.NISZK', 'NIQSZK') => ('-d', 'AA', 'cocap.NISZK', 'NIQSZK')
('-d', 'A', 'cocap.NISZK', 'cocap.NIQSZK') => ('-d', 'R', 'cocap.NISZK', 'cocap.NIQSZK')
('-d', 'A', 'cocap.NISZK', 'cocap.NIQSZK') => ('-d', 'AA', 'cocap.NISZK', 'cocap.NIQSZK')
('-d', 'AA', 'cocap.NISZK', 'cocap.NIQSZK') => ('-d', 'T', 'cocap.NISZK', 'cocap.NIQSZK')
('-d', 'AA', 'cocap.NISZK', 'cocap.NIQSZK') => ('-d', 'EA', 'cocap.NISZK', 'cocap.NIQSZK')
('-d', 'AA', 'cocap.NISZK', 'co.NIQSZK') => ('-d', 'T', 'cocap.NISZK', 'co.NIQSZK')
('-d', 'AA', 'cocap.NISZK', 'co.NIQSZK') => ('-d', 'EA', 'cocap.NISZK', 'co.NIQSZK')
('-d', 'AA', 'cocap.NISZK', 'NIQSZK') => ('-d', 'T', 'cocap.NISZK', 'NIQSZK')
('-d', 'AA', 'cocap.NISZK', 'NIQSZK') => ('-d', 'EA', 'cocap.NISZK', 'NIQSZK')
('p', 'A', 'cocap.NISZK', 'co.NIQSZK') => ('p', 'R', 'cocap.NISZK', 'co.NIQSZK')
('p', 'A', 'cocap.NISZK', 'co.NIQSZK') => ('p', 'AA', 'cocap.NISZK', 'co.NIQSZK')
('p', 'A', 'cocap.NISZK', 'NIQSZK') => ('p', 'R', 'cocap.NISZK', 'NIQSZK')
('p', 'A', 'cocap.NISZK', 'NIQSZK') => ('p', 'AA', 'cocap.NISZK', 'NIQSZK')
('p', 'AA', 'cocap.NISZK', 'NIQSZK') => ('p', 'T', 'cocap.NISZK', 'NIQSZK')
('p', 'AA', 'cocap.NISZK', 'NIQSZK') => ('p', 'EA', 'cocap.NISZK', 'NIQSZK')
('p', 'AA', 'cocap.NISZK', 'co.NIQSZK') => ('p', 'T', 'cocap.NISZK', 'co.NIQSZK')
('p', 'AA', 'cocap.NISZK', 'co.NIQSZK') => ('p', 'EA', 'cocap.NISZK', 'co.NIQSZK')
('p', 'AA', 'cocap.NISZK', 'cocap.NIQSZK') => ('p', 'T', 'cocap.NISZK', 'cocap.NIQSZK')
('p', 'AA', 'cocap.NISZK', 'cocap.NIQSZK') => ('p', 'EA', 'cocap.NISZK', 'cocap.NIQSZK')
('p', 'AA', 'co.NISZK', 'co.NIQSZK') => ('-d', 'AA', 'co.NISZK', 'co.NIQSZK')
('p', 'AA', 'co.NISZK', 'co.NIQSZK') => ('p', 'T', 'co.NISZK', 'co.NIQSZK')
('p', 'AA', 'co.NISZK', 'co.NIQSZK') => ('p', 'EA', 'co.NISZK', 'co.NIQSZK')
('p', 'AA', 'NISZK', 'NIQSZK') => ('-d', 'AA', 'NISZK', 'NIQSZK')
('p', 'AA', 'NISZK', 'NIQSZK') => ('p', 'T', 'NISZK', 'NIQSZK')
('p', 'AA', 'NISZK', 'NIQSZK') => ('p', 'EA', 'NISZK', 'NIQSZK')
('p', 'EA', 'NISZK', 'NIQSZK') => ('-d', 'EA', 'NISZK', 'NIQSZK')
('p', 'EA', 'NISZK', 'NIQSZK') => ('p', 'E', 'NISZK', 'NIQSZK')
('p', 'EA', 'co.NISZK', 'co.NIQSZK') => ('-d', 'EA', 'co.NISZK', 'co.NIQSZK')
('p', 'EA', 'co.NISZK', 'co.NIQSZK') => ('p', 'E', 'co.NISZK', 'co.NIQSZK')
('p', 'E', 'co.NISZK', 'co.NIQSZK') => ('-d', 'E', 'co.NISZK', 'co.NIQSZK')
('p', 'E', 'NISZK', 'NIQSZK') => ('-d', 'E', 'NISZK', 'NIQSZK')
('p', 'T', 'NISZK', 'NIQSZK') => ('-d', 'T', 'NISZK', 'NIQSZK')
('p', 'T', 'co.NISZK', 'co.NIQSZK') => ('-d', 'T', 'co.NISZK', 'co.NIQSZK')
('p', 'R', 'co.NISZK', 'co.NIQSZK') => ('-d', 'R', 'co.NISZK', 'co.NIQSZK')
('p', 'R', 'NISZK', 'NIQSZK') => ('-d', 'R', 'NISZK', 'NIQSZK')
('p', 'A', 'MIP*_cme', 'QMIP_cme') => ('-d', 'A', 'MIP*_cme', 'QMIP_cme')
('p', 'A', 'MIP*_cme', 'QMIP_cme') => ('p', 'R', 'MIP*_cme', 'QMIP_cme')
('p', 'A', 'MIP*_cme', 'QMIP_cme') => ('p', 'AA', 'MIP*_cme', 'QMIP_cme')
('p', 'A', 'co.MIP*_cme', 'co.QMIP_cme') => ('-d', 'A', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'A', 'co.MIP*_cme', 'co.QMIP_cme') => ('p', 'R', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'A', 'co.MIP*_cme', 'co.QMIP_cme') => ('p', 'AA', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'A', 'cocap.MIP*_cme', 'cocap.QMIP_cme') => ('-d', 'A', 'cocap.MIP*_cme', 'cocap.QMIP_cme')
('p', 'A', 'cocap.MIP*_cme', 'cocap.QMIP_cme') => ('p', 'R', 'cocap.MIP*_cme', 'cocap.QMIP_cme')
('p', 'A', 'cocap.MIP*_cme', 'cocap.QMIP_cme') => ('p', 'AA', 'cocap.MIP*_cme', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.MIP*_cme', 'QMIP_cme') => ('-d', 'R', 'cocap.MIP*_cme', 'QMIP_cme')
('-d', 'A', 'cocap.MIP*_cme', 'QMIP_cme') => ('-d', 'AA', 'cocap.MIP*_cme', 'QMIP_cme')
('-d', 'A', 'cocap.MIP*_cme', 'co.QMIP_cme') => ('-d', 'R', 'cocap.MIP*_cme', 'co.QMIP_cme')
('-d', 'A', 'cocap.MIP*_cme', 'co.QMIP_cme') => ('-d', 'AA', 'cocap.MIP*_cme', 'co.QMIP_cme')
('-d', 'A', 'cocap.MIP*_cme', 'cocap.QMIP_cme') => ('-d', 'R', 'cocap.MIP*_cme', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.MIP*_cme', 'cocap.QMIP_cme') => ('-d', 'AA', 'cocap.MIP*_cme', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.MIP*_cme', 'R') => ('-d', 'R', 'cocap.MIP*_cme', 'R')
('-d', 'A', 'cocap.MIP*_cme', 'R') => ('-d', 'AA', 'cocap.MIP*_cme', 'R')
('-d', 'A', 'cocap.MIP*_cme', 'RE') => ('-d', 'R', 'cocap.MIP*_cme', 'RE')
('-d', 'A', 'cocap.MIP*_cme', 'RE') => ('-d', 'AA', 'cocap.MIP*_cme', 'RE')
('-d', 'A', 'cocap.MIP*_cme', 'co.RE') => ('-d', 'R', 'cocap.MIP*_cme', 'co.RE')
('-d', 'A', 'cocap.MIP*_cme', 'co.RE') => ('-d', 'AA', 'cocap.MIP*_cme', 'co.RE')
('-d', 'AA', 'cocap.MIP*_cme', 'co.RE') => ('-d', 'T', 'cocap.MIP*_cme', 'co.RE')
('-d', 'AA', 'cocap.MIP*_cme', 'co.RE') => ('-d', 'EA', 'cocap.MIP*_cme', 'co.RE')
('-d', 'AA', 'cocap.MIP*_cme', 'RE') => ('-d', 'T', 'cocap.MIP*_cme', 'RE')
('-d', 'AA', 'cocap.MIP*_cme', 'RE') => ('-d', 'EA', 'cocap.MIP*_cme', 'RE')
('-d', 'AA', 'cocap.MIP*_cme', 'R') => ('-d', 'T', 'cocap.MIP*_cme', 'R')
('-d', 'AA', 'cocap.MIP*_cme', 'R') => ('-d', 'EA', 'cocap.MIP*_cme', 'R')
('-d', 'AA', 'cocap.MIP*_cme', 'cocap.QMIP_cme') => ('-d', 'T', 'cocap.MIP*_cme', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.MIP*_cme', 'cocap.QMIP_cme') => ('-d', 'EA', 'cocap.MIP*_cme', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.MIP*_cme', 'QMIP_cme') => ('-d', 'T', 'cocap.MIP*_cme', 'QMIP_cme')
('-d', 'AA', 'cocap.MIP*_cme', 'QMIP_cme') => ('-d', 'EA', 'cocap.MIP*_cme', 'QMIP_cme')
('-d', 'AA', 'cocap.MIP*_cme', 'co.QMIP_cme') => ('-d', 'T', 'cocap.MIP*_cme', 'co.QMIP_cme')
('-d', 'AA', 'cocap.MIP*_cme', 'co.QMIP_cme') => ('-d', 'EA', 'cocap.MIP*_cme', 'co.QMIP_cme')
('p', 'A', 'cocap.MIP*_cme', 'QMIP_cme') => ('p', 'R', 'cocap.MIP*_cme', 'QMIP_cme')
('p', 'A', 'cocap.MIP*_cme', 'QMIP_cme') => ('p', 'AA', 'cocap.MIP*_cme', 'QMIP_cme')
('p', 'A', 'cocap.MIP*_cme', 'co.QMIP_cme') => ('p', 'R', 'cocap.MIP*_cme', 'co.QMIP_cme')
('p', 'A', 'cocap.MIP*_cme', 'co.QMIP_cme') => ('p', 'AA', 'cocap.MIP*_cme', 'co.QMIP_cme')
('p', 'A', 'cocap.MIP*_cme', 'RE') => ('p', 'R', 'cocap.MIP*_cme', 'RE')
('p', 'A', 'cocap.MIP*_cme', 'RE') => ('p', 'AA', 'cocap.MIP*_cme', 'RE')
('p', 'A', 'cocap.MIP*_cme', 'co.RE') => ('p', 'R', 'cocap.MIP*_cme', 'co.RE')
('p', 'A', 'cocap.MIP*_cme', 'co.RE') => ('p', 'AA', 'cocap.MIP*_cme', 'co.RE')
('p', 'A', 'cocap.MIP*_cme', 'R') => ('p', 'R', 'cocap.MIP*_cme', 'R')
('p', 'A', 'cocap.MIP*_cme', 'R') => ('p', 'AA', 'cocap.MIP*_cme', 'R')
('p', 'AA', 'cocap.MIP*_cme', 'R') => ('p', 'T', 'cocap.MIP*_cme', 'R')
('p', 'AA', 'cocap.MIP*_cme', 'R') => ('p', 'EA', 'cocap.MIP*_cme', 'R')
('p', 'AA', 'cocap.MIP*_cme', 'RE') => ('p', 'T', 'cocap.MIP*_cme', 'RE')
('p', 'AA', 'cocap.MIP*_cme', 'RE') => ('p', 'EA', 'cocap.MIP*_cme', 'RE')
('p', 'AA', 'cocap.MIP*_cme', 'co.RE') => ('p', 'T', 'cocap.MIP*_cme', 'co.RE')
('p', 'AA', 'cocap.MIP*_cme', 'co.RE') => ('p', 'EA', 'cocap.MIP*_cme', 'co.RE')
('p', 'AA', 'cocap.MIP*_cme', 'co.QMIP_cme') => ('p', 'T', 'cocap.MIP*_cme', 'co.QMIP_cme')
('p', 'AA', 'cocap.MIP*_cme', 'co.QMIP_cme') => ('p', 'EA', 'cocap.MIP*_cme', 'co.QMIP_cme')
('p', 'AA', 'cocap.MIP*_cme', 'QMIP_cme') => ('p', 'T', 'cocap.MIP*_cme', 'QMIP_cme')
('p', 'AA', 'cocap.MIP*_cme', 'QMIP_cme') => ('p', 'EA', 'cocap.MIP*_cme', 'QMIP_cme')
('p', 'AA', 'cocap.MIP*_cme', 'cocap.QMIP_cme') => ('p', 'T', 'cocap.MIP*_cme', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.MIP*_cme', 'cocap.QMIP_cme') => ('p', 'EA', 'cocap.MIP*_cme', 'cocap.QMIP_cme')
('-d', 'A', 'co.MIP*_cme', 'RE') => ('-d', 'R', 'co.MIP*_cme', 'RE')
('-d', 'A', 'co.MIP*_cme', 'RE') => ('-d', 'AA', 'co.MIP*_cme', 'RE')
('-d', 'A', 'MIP*_cme', 'co.RE') => ('-d', 'R', 'MIP*_cme', 'co.RE')
('-d', 'A', 'MIP*_cme', 'co.RE') => ('-d', 'AA', 'MIP*_cme', 'co.RE')
('-d', 'AA', 'MIP*_cme', 'co.RE') => ('-d', 'T', 'MIP*_cme', 'co.RE')
('-d', 'AA', 'MIP*_cme', 'co.RE') => ('-d', 'EA', 'MIP*_cme', 'co.RE')
('-d', 'AA', 'co.MIP*_cme', 'RE') => ('-d', 'T', 'co.MIP*_cme', 'RE')
('-d', 'AA', 'co.MIP*_cme', 'RE') => ('-d', 'EA', 'co.MIP*_cme', 'RE')
('p', 'A', 'co.MIP*_cme', 'RE') => ('p', 'R', 'co.MIP*_cme', 'RE')
('p', 'A', 'co.MIP*_cme', 'RE') => ('p', 'AA', 'co.MIP*_cme', 'RE')
('p', 'A', 'MIP*_cme', 'co.RE') => ('p', 'R', 'MIP*_cme', 'co.RE')
('p', 'A', 'MIP*_cme', 'co.RE') => ('p', 'AA', 'MIP*_cme', 'co.RE')
('p', 'AA', 'MIP*_cme', 'co.RE') => ('p', 'T', 'MIP*_cme', 'co.RE')
('p', 'AA', 'MIP*_cme', 'co.RE') => ('p', 'EA', 'MIP*_cme', 'co.RE')
('p', 'AA', 'co.MIP*_cme', 'RE') => ('p', 'T', 'co.MIP*_cme', 'RE')
('p', 'AA', 'co.MIP*_cme', 'RE') => ('p', 'EA', 'co.MIP*_cme', 'RE')
('p', 'AA', 'co.MIP*_cme', 'co.QMIP_cme') => ('-d', 'AA', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'AA', 'co.MIP*_cme', 'co.QMIP_cme') => ('p', 'T', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'AA', 'co.MIP*_cme', 'co.QMIP_cme') => ('p', 'EA', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'AA', 'MIP*_cme', 'QMIP_cme') => ('-d', 'AA', 'MIP*_cme', 'QMIP_cme')
('p', 'AA', 'MIP*_cme', 'QMIP_cme') => ('p', 'T', 'MIP*_cme', 'QMIP_cme')
('p', 'AA', 'MIP*_cme', 'QMIP_cme') => ('p', 'EA', 'MIP*_cme', 'QMIP_cme')
('p', 'EA', 'MIP*_cme', 'QMIP_cme') => ('-d', 'EA', 'MIP*_cme', 'QMIP_cme')
('p', 'EA', 'MIP*_cme', 'QMIP_cme') => ('p', 'E', 'MIP*_cme', 'QMIP_cme')
('p', 'EA', 'co.MIP*_cme', 'co.QMIP_cme') => ('-d', 'EA', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'EA', 'co.MIP*_cme', 'co.QMIP_cme') => ('p', 'E', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'E', 'co.MIP*_cme', 'co.QMIP_cme') => ('-d', 'E', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'E', 'MIP*_cme', 'QMIP_cme') => ('-d', 'E', 'MIP*_cme', 'QMIP_cme')
('p', 'T', 'MIP*_cme', 'QMIP_cme') => ('-d', 'T', 'MIP*_cme', 'QMIP_cme')
('p', 'T', 'co.MIP*_cme', 'co.QMIP_cme') => ('-d', 'T', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'R', 'co.MIP*_cme', 'co.QMIP_cme') => ('-d', 'R', 'co.MIP*_cme', 'co.QMIP_cme')
('p', 'R', 'MIP*_cme', 'QMIP_cme') => ('-d', 'R', 'MIP*_cme', 'QMIP_cme')
('p', 'A', 'QSZK', 'PSPACE') => ('-d', 'A', 'QSZK', 'PSPACE')
('p', 'A', 'QSZK', 'PSPACE') => ('p', 'R', 'QSZK', 'PSPACE')
('p', 'A', 'QSZK', 'PSPACE') => ('p', 'AA', 'QSZK', 'PSPACE')
('p', 'E', 'SZK', 'PSPACE') => ('-d', 'E', 'SZK', 'PSPACE')
('p', 'E', 'cocap.NISZK', 'PSPACE') => ('-d', 'E', 'cocap.NISZK', 'PSPACE')
('p', 'E', 'co.NISZK', 'PSPACE') => ('-d', 'E', 'co.NISZK', 'PSPACE')
('p', 'E', 'NISZK', 'PSPACE') => ('-d', 'E', 'NISZK', 'PSPACE')
('p', 'A', 'SZK', 'PSPACE') => ('-d', 'A', 'SZK', 'PSPACE')
('p', 'A', 'SZK', 'PSPACE') => ('p', 'R', 'SZK', 'PSPACE')
('p', 'A', 'SZK', 'PSPACE') => ('p', 'AA', 'SZK', 'PSPACE')
('p', 'A', 'cocap.NISZK', 'PSPACE') => ('-d', 'A', 'cocap.NISZK', 'PSPACE')
('p', 'A', 'cocap.NISZK', 'PSPACE') => ('p', 'R', 'cocap.NISZK', 'PSPACE')
('p', 'A', 'cocap.NISZK', 'PSPACE') => ('p', 'AA', 'cocap.NISZK', 'PSPACE')
('-d', 'A', 'cocap.NISZK', 'PSPACE/poly') => ('-d', 'R', 'cocap.NISZK', 'PSPACE/poly')
('-d', 'A', 'cocap.NISZK', 'PSPACE/poly') => ('-d', 'AA', 'cocap.NISZK', 'PSPACE/poly')
('-d', 'AA', 'cocap.NISZK', 'PSPACE/poly') => ('-d', 'T', 'cocap.NISZK', 'PSPACE/poly')
('-d', 'AA', 'cocap.NISZK', 'PSPACE/poly') => ('-d', 'EA', 'cocap.NISZK', 'PSPACE/poly')
('p', 'A', 'cocap.NISZK', 'PSPACE/poly') => ('p', 'R', 'cocap.NISZK', 'PSPACE/poly')
('p', 'A', 'cocap.NISZK', 'PSPACE/poly') => ('p', 'AA', 'cocap.NISZK', 'PSPACE/poly')
('p', 'AA', 'cocap.NISZK', 'PSPACE/poly') => ('p', 'T', 'cocap.NISZK', 'PSPACE/poly')
('p', 'AA', 'cocap.NISZK', 'PSPACE/poly') => ('p', 'EA', 'cocap.NISZK', 'PSPACE/poly')
('p', 'AA', 'cocap.NISZK', 'PSPACE') => ('-d', 'AA', 'cocap.NISZK', 'PSPACE')
('p', 'AA', 'cocap.NISZK', 'PSPACE') => ('p', 'T', 'cocap.NISZK', 'PSPACE')
('p', 'AA', 'cocap.NISZK', 'PSPACE') => ('p', 'EA', 'cocap.NISZK', 'PSPACE')
('p', 'EA', 'cocap.NISZK', 'PSPACE') => ('-d', 'EA', 'cocap.NISZK', 'PSPACE')
('p', 'T', 'cocap.NISZK', 'PSPACE') => ('-d', 'T', 'cocap.NISZK', 'PSPACE')
('p', 'R', 'cocap.NISZK', 'PSPACE') => ('-d', 'R', 'cocap.NISZK', 'PSPACE')
('-d', 'A', 'SZK', 'PSPACE/poly') => ('-d', 'R', 'SZK', 'PSPACE/poly')
('-d', 'A', 'SZK', 'PSPACE/poly') => ('-d', 'AA', 'SZK', 'PSPACE/poly')
('-d', 'A', 'co.NISZK', 'PSPACE/poly') => ('-d', 'R', 'co.NISZK', 'PSPACE/poly')
('-d', 'A', 'co.NISZK', 'PSPACE/poly') => ('-d', 'AA', 'co.NISZK', 'PSPACE/poly')
('-d', 'A', 'NISZK', 'PSPACE/poly') => ('-d', 'R', 'NISZK', 'PSPACE/poly')
('-d', 'A', 'NISZK', 'PSPACE/poly') => ('-d', 'AA', 'NISZK', 'PSPACE/poly')
('-d', 'AA', 'NISZK', 'PSPACE/poly') => ('-d', 'T', 'NISZK', 'PSPACE/poly')
('-d', 'AA', 'NISZK', 'PSPACE/poly') => ('-d', 'EA', 'NISZK', 'PSPACE/poly')
('-d', 'AA', 'co.NISZK', 'PSPACE/poly') => ('-d', 'T', 'co.NISZK', 'PSPACE/poly')
('-d', 'AA', 'co.NISZK', 'PSPACE/poly') => ('-d', 'EA', 'co.NISZK', 'PSPACE/poly')
('-d', 'AA', 'SZK', 'PSPACE/poly') => ('-d', 'T', 'SZK', 'PSPACE/poly')
('-d', 'AA', 'SZK', 'PSPACE/poly') => ('-d', 'EA', 'SZK', 'PSPACE/poly')
('p', 'A', 'SZK', 'PSPACE/poly') => ('p', 'R', 'SZK', 'PSPACE/poly')
('p', 'A', 'SZK', 'PSPACE/poly') => ('p', 'AA', 'SZK', 'PSPACE/poly')
('p', 'A', 'co.NISZK', 'PSPACE/poly') => ('p', 'R', 'co.NISZK', 'PSPACE/poly')
('p', 'A', 'co.NISZK', 'PSPACE/poly') => ('p', 'AA', 'co.NISZK', 'PSPACE/poly')
('p', 'A', 'NISZK', 'PSPACE/poly') => ('p', 'R', 'NISZK', 'PSPACE/poly')
('p', 'A', 'NISZK', 'PSPACE/poly') => ('p', 'AA', 'NISZK', 'PSPACE/poly')
('p', 'AA', 'NISZK', 'PSPACE/poly') => ('p', 'T', 'NISZK', 'PSPACE/poly')
('p', 'AA', 'NISZK', 'PSPACE/poly') => ('p', 'EA', 'NISZK', 'PSPACE/poly')
('p', 'AA', 'co.NISZK', 'PSPACE/poly') => ('p', 'T', 'co.NISZK', 'PSPACE/poly')
('p', 'AA', 'co.NISZK', 'PSPACE/poly') => ('p', 'EA', 'co.NISZK', 'PSPACE/poly')
('p', 'AA', 'SZK', 'PSPACE/poly') => ('p', 'T', 'SZK', 'PSPACE/poly')
('p', 'AA', 'SZK', 'PSPACE/poly') => ('p', 'EA', 'SZK', 'PSPACE/poly')
('p', 'A', 'co.NISZK', 'PSPACE') => ('-d', 'A', 'co.NISZK', 'PSPACE')
('p', 'A', 'co.NISZK', 'PSPACE') => ('p', 'R', 'co.NISZK', 'PSPACE')
('p', 'A', 'co.NISZK', 'PSPACE') => ('p', 'AA', 'co.NISZK', 'PSPACE')
('p', 'A', 'NISZK', 'PSPACE') => ('-d', 'A', 'NISZK', 'PSPACE')
('p', 'A', 'NISZK', 'PSPACE') => ('p', 'R', 'NISZK', 'PSPACE')
('p', 'A', 'NISZK', 'PSPACE') => ('p', 'AA', 'NISZK', 'PSPACE')
('p', 'AA', 'NISZK', 'PSPACE') => ('-d', 'AA', 'NISZK', 'PSPACE')
('p', 'AA', 'NISZK', 'PSPACE') => ('p', 'T', 'NISZK', 'PSPACE')
('p', 'AA', 'NISZK', 'PSPACE') => ('p', 'EA', 'NISZK', 'PSPACE')
('p', 'AA', 'co.NISZK', 'PSPACE') => ('-d', 'AA', 'co.NISZK', 'PSPACE')
('p', 'AA', 'co.NISZK', 'PSPACE') => ('p', 'T', 'co.NISZK', 'PSPACE')
('p', 'AA', 'co.NISZK', 'PSPACE') => ('p', 'EA', 'co.NISZK', 'PSPACE')
('p', 'EA', 'co.NISZK', 'PSPACE') => ('-d', 'EA', 'co.NISZK', 'PSPACE')
('p', 'EA', 'NISZK', 'PSPACE') => ('-d', 'EA', 'NISZK', 'PSPACE')
('p', 'T', 'co.NISZK', 'PSPACE') => ('-d', 'T', 'co.NISZK', 'PSPACE')
('p', 'T', 'NISZK', 'PSPACE') => ('-d', 'T', 'NISZK', 'PSPACE')
('p', 'R', 'NISZK', 'PSPACE') => ('-d', 'R', 'NISZK', 'PSPACE')
('p', 'R', 'co.NISZK', 'PSPACE') => ('-d', 'R', 'co.NISZK', 'PSPACE')
('p', 'AA', 'SZK', 'PSPACE') => ('-d', 'AA', 'SZK', 'PSPACE')
('p', 'AA', 'SZK', 'PSPACE') => ('p', 'T', 'SZK', 'PSPACE')
('p', 'AA', 'SZK', 'PSPACE') => ('p', 'EA', 'SZK', 'PSPACE')
('p', 'EA', 'SZK', 'PSPACE') => ('-d', 'EA', 'SZK', 'PSPACE')
('p', 'T', 'SZK', 'PSPACE') => ('-d', 'T', 'SZK', 'PSPACE')
('p', 'R', 'SZK', 'PSPACE') => ('-d', 'R', 'SZK', 'PSPACE')
('-d', 'A', 'QSZK', 'PSPACE/poly') => ('-d', 'R', 'QSZK', 'PSPACE/poly')
('-d', 'A', 'QSZK', 'PSPACE/poly') => ('-d', 'AA', 'QSZK', 'PSPACE/poly')
('-d', 'AA', 'QSZK', 'PSPACE/poly') => ('-d', 'T', 'QSZK', 'PSPACE/poly')
('-d', 'AA', 'QSZK', 'PSPACE/poly') => ('-d', 'EA', 'QSZK', 'PSPACE/poly')
('p', 'A', 'QSZK', 'PSPACE/poly') => ('p', 'R', 'QSZK', 'PSPACE/poly')
('p', 'A', 'QSZK', 'PSPACE/poly') => ('p', 'AA', 'QSZK', 'PSPACE/poly')
('p', 'AA', 'QSZK', 'PSPACE/poly') => ('p', 'T', 'QSZK', 'PSPACE/poly')
('p', 'AA', 'QSZK', 'PSPACE/poly') => ('p', 'EA', 'QSZK', 'PSPACE/poly')
('p', 'AA', 'QSZK', 'PSPACE') => ('-d', 'AA', 'QSZK', 'PSPACE')
('p', 'AA', 'QSZK', 'PSPACE') => ('p', 'T', 'QSZK', 'PSPACE')
('p', 'AA', 'QSZK', 'PSPACE') => ('p', 'EA', 'QSZK', 'PSPACE')
('p', 'EA', 'QSZK', 'PSPACE') => ('-d', 'EA', 'QSZK', 'PSPACE')
('p', 'EA', 'QSZK', 'PSPACE') => ('p', 'E', 'QSZK', 'PSPACE')
('p', 'E', 'QSZK', 'PSPACE') => ('-d', 'E', 'QSZK', 'PSPACE')
('p', 'T', 'QSZK', 'PSPACE') => ('-d', 'T', 'QSZK', 'PSPACE')
('p', 'R', 'QSZK', 'PSPACE') => ('-d', 'R', 'QSZK', 'PSPACE')
('p', 'A', 'RP', 'NP') => ('-d', 'A', 'RP', 'NP')
('p', 'A', 'RP', 'NP') => ('p', 'R', 'RP', 'NP')
('p', 'A', 'RP', 'NP') => ('p', 'AA', 'RP', 'NP')
('p', 'A', 'co.RP', 'co.NP') => ('-d', 'A', 'co.RP', 'co.NP')
('p', 'A', 'co.RP', 'co.NP') => ('p', 'R', 'co.RP', 'co.NP')
('p', 'A', 'co.RP', 'co.NP') => ('p', 'AA', 'co.RP', 'co.NP')
('p', 'A', 'ZPP', 'cocap.NP') => ('-d', 'A', 'ZPP', 'cocap.NP')
('p', 'A', 'ZPP', 'cocap.NP') => ('p', 'R', 'ZPP', 'cocap.NP')
('p', 'A', 'ZPP', 'cocap.NP') => ('p', 'AA', 'ZPP', 'cocap.NP')
('-d', 'A', 'ZPP', 'NP') => ('-d', 'R', 'ZPP', 'NP')
('-d', 'A', 'ZPP', 'NP') => ('-d', 'AA', 'ZPP', 'NP')
('-d', 'A', 'ZPP', 'co.NP') => ('-d', 'R', 'ZPP', 'co.NP')
('-d', 'A', 'ZPP', 'co.NP') => ('-d', 'AA', 'ZPP', 'co.NP')
('-d', 'A', 'ZPP', 'cocap.NP') => ('-d', 'R', 'ZPP', 'cocap.NP')
('-d', 'A', 'ZPP', 'cocap.NP') => ('-d', 'AA', 'ZPP', 'cocap.NP')
('-d', 'A', 'ZPP', 'Delta_2P') => ('-d', 'R', 'ZPP', 'Delta_2P')
('-d', 'A', 'ZPP', 'Delta_2P') => ('-d', 'AA', 'ZPP', 'Delta_2P')
('-d', 'A', 'ZPP', 'S_2P') => ('-d', 'R', 'ZPP', 'S_2P')
('-d', 'A', 'ZPP', 'S_2P') => ('-d', 'AA', 'ZPP', 'S_2P')
('-d', 'AA', 'ZPP', 'S_2P') => ('-d', 'T', 'ZPP', 'S_2P')
('-d', 'AA', 'ZPP', 'S_2P') => ('-d', 'EA', 'ZPP', 'S_2P')
('-d', 'AA', 'ZPP', 'Delta_2P') => ('-d', 'T', 'ZPP', 'Delta_2P')
('-d', 'AA', 'ZPP', 'Delta_2P') => ('-d', 'EA', 'ZPP', 'Delta_2P')
('-d', 'A', 'ZPP', '(NP-cap-coNP)/poly') => ('-d', 'R', 'ZPP', '(NP-cap-coNP)/poly')
('-d', 'A', 'ZPP', '(NP-cap-coNP)/poly') => ('-d', 'AA', 'ZPP', '(NP-cap-coNP)/poly')
('-d', 'A', 'ZPP', 'co.NP/poly') => ('-d', 'R', 'ZPP', 'co.NP/poly')
('-d', 'A', 'ZPP', 'co.NP/poly') => ('-d', 'AA', 'ZPP', 'co.NP/poly')
('-d', 'A', 'ZPP', 'NP/poly') => ('-d', 'R', 'ZPP', 'NP/poly')
('-d', 'A', 'ZPP', 'NP/poly') => ('-d', 'AA', 'ZPP', 'NP/poly')
('-d', 'A', 'ZPP', 'cocap.NP/poly') => ('-d', 'R', 'ZPP', 'cocap.NP/poly')
('-d', 'A', 'ZPP', 'cocap.NP/poly') => ('-d', 'AA', 'ZPP', 'cocap.NP/poly')
('-d', 'AA', 'ZPP', 'cocap.NP/poly') => ('-d', 'T', 'ZPP', 'cocap.NP/poly')
('-d', 'AA', 'ZPP', 'cocap.NP/poly') => ('-d', 'EA', 'ZPP', 'cocap.NP/poly')
('-d', 'AA', 'ZPP', 'co.NP/poly') => ('-d', 'T', 'ZPP', 'co.NP/poly')
('-d', 'AA', 'ZPP', 'co.NP/poly') => ('-d', 'EA', 'ZPP', 'co.NP/poly')
('-d', 'AA', 'ZPP', 'NP/poly') => ('-d', 'T', 'ZPP', 'NP/poly')
('-d', 'AA', 'ZPP', 'NP/poly') => ('-d', 'EA', 'ZPP', 'NP/poly')
('-d', 'AA', 'ZPP', '(NP-cap-coNP)/poly') => ('-d', 'T', 'ZPP', '(NP-cap-coNP)/poly')
('-d', 'AA', 'ZPP', '(NP-cap-coNP)/poly') => ('-d', 'EA', 'ZPP', '(NP-cap-coNP)/poly')
('-d', 'AA', 'ZPP', 'cocap.NP') => ('-d', 'T', 'ZPP', 'cocap.NP')
('-d', 'AA', 'ZPP', 'cocap.NP') => ('-d', 'EA', 'ZPP', 'cocap.NP')
('-d', 'AA', 'ZPP', 'NP') => ('-d', 'T', 'ZPP', 'NP')
('-d', 'AA', 'ZPP', 'NP') => ('-d', 'EA', 'ZPP', 'NP')
('-d', 'AA', 'ZPP', 'co.NP') => ('-d', 'T', 'ZPP', 'co.NP')
('-d', 'AA', 'ZPP', 'co.NP') => ('-d', 'EA', 'ZPP', 'co.NP')
('p', 'A', 'ZPP', 'NP') => ('p', 'R', 'ZPP', 'NP')
('p', 'A', 'ZPP', 'NP') => ('p', 'AA', 'ZPP', 'NP')
('p', 'A', 'ZPP', 'co.NP') => ('p', 'R', 'ZPP', 'co.NP')
('p', 'A', 'ZPP', 'co.NP') => ('p', 'AA', 'ZPP', 'co.NP')
('p', 'A', 'ZPP', 'Delta_2P') => ('p', 'R', 'ZPP', 'Delta_2P')
('p', 'A', 'ZPP', 'Delta_2P') => ('p', 'AA', 'ZPP', 'Delta_2P')
('p', 'A', 'ZPP', 'S_2P') => ('p', 'R', 'ZPP', 'S_2P')
('p', 'A', 'ZPP', 'S_2P') => ('p', 'AA', 'ZPP', 'S_2P')
('p', 'AA', 'ZPP', 'S_2P') => ('p', 'T', 'ZPP', 'S_2P')
('p', 'AA', 'ZPP', 'S_2P') => ('p', 'EA', 'ZPP', 'S_2P')
('p', 'AA', 'ZPP', 'Delta_2P') => ('p', 'T', 'ZPP', 'Delta_2P')
('p', 'AA', 'ZPP', 'Delta_2P') => ('p', 'EA', 'ZPP', 'Delta_2P')
('p', 'A', 'ZPP', 'co.NP/poly') => ('p', 'R', 'ZPP', 'co.NP/poly')
('p', 'A', 'ZPP', 'co.NP/poly') => ('p', 'AA', 'ZPP', 'co.NP/poly')
('p', 'A', 'ZPP', 'NP/poly') => ('p', 'R', 'ZPP', 'NP/poly')
('p', 'A', 'ZPP', 'NP/poly') => ('p', 'AA', 'ZPP', 'NP/poly')
('p', 'A', 'ZPP', 'cocap.NP/poly') => ('p', 'R', 'ZPP', 'cocap.NP/poly')
('p', 'A', 'ZPP', 'cocap.NP/poly') => ('p', 'AA', 'ZPP', 'cocap.NP/poly')
('p', 'AA', 'ZPP', 'cocap.NP/poly') => ('p', 'T', 'ZPP', 'cocap.NP/poly')
('p', 'AA', 'ZPP', 'cocap.NP/poly') => ('p', 'EA', 'ZPP', 'cocap.NP/poly')
('p', 'AA', 'ZPP', 'co.NP/poly') => ('p', 'T', 'ZPP', 'co.NP/poly')
('p', 'AA', 'ZPP', 'co.NP/poly') => ('p', 'EA', 'ZPP', 'co.NP/poly')
('p', 'AA', 'ZPP', 'NP/poly') => ('p', 'T', 'ZPP', 'NP/poly')
('p', 'AA', 'ZPP', 'NP/poly') => ('p', 'EA', 'ZPP', 'NP/poly')
('p', 'AA', 'ZPP', 'co.NP') => ('p', 'T', 'ZPP', 'co.NP')
('p', 'AA', 'ZPP', 'co.NP') => ('p', 'EA', 'ZPP', 'co.NP')
('p', 'AA', 'ZPP', 'NP') => ('p', 'T', 'ZPP', 'NP')
('p', 'AA', 'ZPP', 'NP') => ('p', 'EA', 'ZPP', 'NP')
('p', 'AA', 'ZPP', 'cocap.NP') => ('p', 'T', 'ZPP', 'cocap.NP')
('p', 'AA', 'ZPP', 'cocap.NP') => ('p', 'EA', 'ZPP', 'cocap.NP')
('p', 'AA', 'ZPP', '(NP-cap-coNP)/poly') => ('p', 'T', 'ZPP', '(NP-cap-coNP)/poly')
('-d', 'A', 'co.RP', 'Delta_2P') => ('-d', 'R', 'co.RP', 'Delta_2P')
('-d', 'A', 'co.RP', 'Delta_2P') => ('-d', 'AA', 'co.RP', 'Delta_2P')
('-d', 'A', 'RP', 'Delta_2P') => ('-d', 'R', 'RP', 'Delta_2P')
('-d', 'A', 'RP', 'Delta_2P') => ('-d', 'AA', 'RP', 'Delta_2P')
('-d', 'A', 'RP', 'S_2P') => ('-d', 'R', 'RP', 'S_2P')
('-d', 'A', 'RP', 'S_2P') => ('-d', 'AA', 'RP', 'S_2P')
('-d', 'A', 'co.RP', 'S_2P') => ('-d', 'R', 'co.RP', 'S_2P')
('-d', 'A', 'co.RP', 'S_2P') => ('-d', 'AA', 'co.RP', 'S_2P')
('-d', 'AA', 'co.RP', 'S_2P') => ('-d', 'T', 'co.RP', 'S_2P')
('-d', 'AA', 'co.RP', 'S_2P') => ('-d', 'EA', 'co.RP', 'S_2P')
('-d', 'AA', 'RP', 'S_2P') => ('-d', 'T', 'RP', 'S_2P')
('-d', 'AA', 'RP', 'S_2P') => ('-d', 'EA', 'RP', 'S_2P')
('-d', 'AA', 'RP', 'Delta_2P') => ('-d', 'T', 'RP', 'Delta_2P')
('-d', 'AA', 'RP', 'Delta_2P') => ('-d', 'EA', 'RP', 'Delta_2P')
('-d', 'AA', 'co.RP', 'Delta_2P') => ('-d', 'T', 'co.RP', 'Delta_2P')
('-d', 'AA', 'co.RP', 'Delta_2P') => ('-d', 'EA', 'co.RP', 'Delta_2P')
('p', 'A', 'co.RP', 'Delta_2P') => ('p', 'R', 'co.RP', 'Delta_2P')
('p', 'A', 'co.RP', 'Delta_2P') => ('p', 'AA', 'co.RP', 'Delta_2P')
('p', 'A', 'RP', 'Delta_2P') => ('p', 'R', 'RP', 'Delta_2P')
('p', 'A', 'RP', 'Delta_2P') => ('p', 'AA', 'RP', 'Delta_2P')
('p', 'A', 'RP', 'S_2P') => ('p', 'R', 'RP', 'S_2P')
('p', 'A', 'RP', 'S_2P') => ('p', 'AA', 'RP', 'S_2P')
('p', 'A', 'co.RP', 'S_2P') => ('p', 'R', 'co.RP', 'S_2P')
('p', 'A', 'co.RP', 'S_2P') => ('p', 'AA', 'co.RP', 'S_2P')
('p', 'AA', 'co.RP', 'S_2P') => ('p', 'T', 'co.RP', 'S_2P')
('p', 'AA', 'co.RP', 'S_2P') => ('p', 'EA', 'co.RP', 'S_2P')
('p', 'AA', 'RP', 'S_2P') => ('p', 'T', 'RP', 'S_2P')
('p', 'AA', 'RP', 'S_2P') => ('p', 'EA', 'RP', 'S_2P')
('p', 'AA', 'RP', 'Delta_2P') => ('p', 'T', 'RP', 'Delta_2P')
('p', 'AA', 'RP', 'Delta_2P') => ('p', 'EA', 'RP', 'Delta_2P')
('p', 'AA', 'co.RP', 'Delta_2P') => ('p', 'T', 'co.RP', 'Delta_2P')
('p', 'AA', 'co.RP', 'Delta_2P') => ('p', 'EA', 'co.RP', 'Delta_2P')
('-d', 'A', 'co.RP', 'co.NP/poly') => ('-d', 'R', 'co.RP', 'co.NP/poly')
('-d', 'A', 'co.RP', 'co.NP/poly') => ('-d', 'AA', 'co.RP', 'co.NP/poly')
('-d', 'A', 'RP', 'NP/poly') => ('-d', 'R', 'RP', 'NP/poly')
('-d', 'A', 'RP', 'NP/poly') => ('-d', 'AA', 'RP', 'NP/poly')
('-d', 'AA', 'RP', 'NP/poly') => ('-d', 'T', 'RP', 'NP/poly')
('-d', 'AA', 'RP', 'NP/poly') => ('-d', 'EA', 'RP', 'NP/poly')
('-d', 'AA', 'co.RP', 'co.NP/poly') => ('-d', 'T', 'co.RP', 'co.NP/poly')
('-d', 'AA', 'co.RP', 'co.NP/poly') => ('-d', 'EA', 'co.RP', 'co.NP/poly')
('p', 'A', 'co.RP', 'co.NP/poly') => ('p', 'R', 'co.RP', 'co.NP/poly')
('p', 'A', 'co.RP', 'co.NP/poly') => ('p', 'AA', 'co.RP', 'co.NP/poly')
('p', 'A', 'RP', 'NP/poly') => ('p', 'R', 'RP', 'NP/poly')
('p', 'A', 'RP', 'NP/poly') => ('p', 'AA', 'RP', 'NP/poly')
('p', 'AA', 'RP', 'NP/poly') => ('p', 'T', 'RP', 'NP/poly')
('p', 'AA', 'RP', 'NP/poly') => ('p', 'EA', 'RP', 'NP/poly')
('p', 'AA', 'co.RP', 'co.NP/poly') => ('p', 'T', 'co.RP', 'co.NP/poly')
('p', 'AA', 'co.RP', 'co.NP/poly') => ('p', 'EA', 'co.RP', 'co.NP/poly')
('p', 'AA', 'co.RP', 'co.NP') => ('-d', 'AA', 'co.RP', 'co.NP')
('p', 'AA', 'co.RP', 'co.NP') => ('p', 'T', 'co.RP', 'co.NP')
('p', 'AA', 'co.RP', 'co.NP') => ('p', 'EA', 'co.RP', 'co.NP')
('p', 'AA', 'RP', 'NP') => ('-d', 'AA', 'RP', 'NP')
('p', 'AA', 'RP', 'NP') => ('p', 'T', 'RP', 'NP')
('p', 'AA', 'RP', 'NP') => ('p', 'EA', 'RP', 'NP')
('p', 'EA', 'RP', 'NP') => ('-d', 'EA', 'RP', 'NP')
('p', 'EA', 'RP', 'NP') => ('p', 'E', 'RP', 'NP')
('p', 'EA', 'co.RP', 'co.NP') => ('-d', 'EA', 'co.RP', 'co.NP')
('p', 'EA', 'co.RP', 'co.NP') => ('p', 'E', 'co.RP', 'co.NP')
('p', 'E', 'co.RP', 'co.NP') => ('-d', 'E', 'co.RP', 'co.NP')
('p', 'E', 'RP', 'NP') => ('-d', 'E', 'RP', 'NP')
('p', 'T', 'RP', 'NP') => ('-d', 'T', 'RP', 'NP')
('p', 'T', 'co.RP', 'co.NP') => ('-d', 'T', 'co.RP', 'co.NP')
('p', 'R', 'co.RP', 'co.NP') => ('-d', 'R', 'co.RP', 'co.NP')
('p', 'R', 'RP', 'NP') => ('-d', 'R', 'RP', 'NP')
('p', 'A', 'BPP', 'SZK') => ('-d', 'A', 'BPP', 'SZK')
('p', 'A', 'BPP', 'SZK') => ('p', 'R', 'BPP', 'SZK')
('p', 'A', 'BPP', 'SZK') => ('p', 'AA', 'BPP', 'SZK')
('p', 'E', 'P', 'SZK') => ('-d', 'E', 'P', 'SZK')
('p', 'A', 'P', 'SZK') => ('-d', 'A', 'P', 'SZK')
('p', 'A', 'P', 'SZK') => ('p', 'R', 'P', 'SZK')
('p', 'A', 'P', 'SZK') => ('p', 'AA', 'P', 'SZK')
('p', 'E', 'cocap.NEXP_plo', 'SZK') => ('-d', 'E', 'cocap.NEXP_plo', 'SZK')
('p', 'E', 'co.NEXP_plo', 'SZK') => ('-d', 'E', 'co.NEXP_plo', 'SZK')
('p', 'E', 'NEXP_plo', 'SZK') => ('-d', 'E', 'NEXP_plo', 'SZK')
('-d', 'A', 'P', 'PSPACE/poly') => ('-d', 'R', 'P', 'PSPACE/poly')
('-d', 'A', 'P', 'PSPACE/poly') => ('-d', 'AA', 'P', 'PSPACE/poly')
('-d', 'A', 'PP', 'PSPACE/poly') => ('-d', 'R', 'PP', 'PSPACE/poly')
('-d', 'A', 'PP', 'PSPACE/poly') => ('-d', 'AA', 'PP', 'PSPACE/poly')
('-d', 'A', 'PP/poly', 'PSPACE/poly') => ('-d', 'R', 'PP/poly', 'PSPACE/poly')
('-d', 'A', 'PP/poly', 'PSPACE/poly') => ('-d', 'AA', 'PP/poly', 'PSPACE/poly')
('-d', 'A', 'P/poly', 'PSPACE/poly') => ('-d', 'R', 'P/poly', 'PSPACE/poly')
('-d', 'A', 'P/poly', 'PSPACE/poly') => ('-d', 'AA', 'P/poly', 'PSPACE/poly')
('-d', 'A', 'BPP', 'PSPACE/poly') => ('-d', 'R', 'BPP', 'PSPACE/poly')
('-d', 'A', 'BPP', 'PSPACE/poly') => ('-d', 'AA', 'BPP', 'PSPACE/poly')
('-d', 'AA', 'BPP', 'PSPACE/poly') => ('-d', 'T', 'BPP', 'PSPACE/poly')
('-d', 'AA', 'BPP', 'PSPACE/poly') => ('-d', 'EA', 'BPP', 'PSPACE/poly')
('-d', 'AA', 'P/poly', 'PSPACE/poly') => ('-d', 'T', 'P/poly', 'PSPACE/poly')
('-d', 'AA', 'P/poly', 'PSPACE/poly') => ('-d', 'EA', 'P/poly', 'PSPACE/poly')
('-d', 'AA', 'PP/poly', 'PSPACE/poly') => ('-d', 'T', 'PP/poly', 'PSPACE/poly')
('-d', 'AA', 'PP/poly', 'PSPACE/poly') => ('-d', 'EA', 'PP/poly', 'PSPACE/poly')
('-d', 'AA', 'P', 'PSPACE/poly') => ('-d', 'T', 'P', 'PSPACE/poly')
('-d', 'AA', 'P', 'PSPACE/poly') => ('-d', 'EA', 'P', 'PSPACE/poly')
('-d', 'AA', 'PP', 'PSPACE/poly') => ('-d', 'T', 'PP', 'PSPACE/poly')
('-d', 'AA', 'PP', 'PSPACE/poly') => ('-d', 'EA', 'PP', 'PSPACE/poly')
('p', 'A', 'P', 'PSPACE/poly') => ('p', 'R', 'P', 'PSPACE/poly')
('p', 'A', 'P', 'PSPACE/poly') => ('p', 'AA', 'P', 'PSPACE/poly')
('p', 'A', 'PP', 'PSPACE/poly') => ('p', 'R', 'PP', 'PSPACE/poly')
('p', 'A', 'PP', 'PSPACE/poly') => ('p', 'AA', 'PP', 'PSPACE/poly')
('p', 'A', 'PP/poly', 'PSPACE/poly') => ('p', 'R', 'PP/poly', 'PSPACE/poly')
('p', 'A', 'PP/poly', 'PSPACE/poly') => ('p', 'AA', 'PP/poly', 'PSPACE/poly')
('p', 'A', 'P/poly', 'PSPACE/poly') => ('p', 'R', 'P/poly', 'PSPACE/poly')
('p', 'A', 'P/poly', 'PSPACE/poly') => ('p', 'AA', 'P/poly', 'PSPACE/poly')
('p', 'A', 'BPP', 'PSPACE/poly') => ('p', 'R', 'BPP', 'PSPACE/poly')
('p', 'A', 'BPP', 'PSPACE/poly') => ('p', 'AA', 'BPP', 'PSPACE/poly')
('p', 'AA', 'BPP', 'PSPACE/poly') => ('p', 'T', 'BPP', 'PSPACE/poly')
('p', 'AA', 'BPP', 'PSPACE/poly') => ('p', 'EA', 'BPP', 'PSPACE/poly')
('p', 'AA', 'P/poly', 'PSPACE/poly') => ('p', 'T', 'P/poly', 'PSPACE/poly')
('p', 'AA', 'P/poly', 'PSPACE/poly') => ('p', 'EA', 'P/poly', 'PSPACE/poly')
('p', 'AA', 'PP/poly', 'PSPACE/poly') => ('p', 'T', 'PP/poly', 'PSPACE/poly')
('p', 'AA', 'PP/poly', 'PSPACE/poly') => ('p', 'EA', 'PP/poly', 'PSPACE/poly')
('p', 'AA', 'P', 'PSPACE/poly') => ('p', 'T', 'P', 'PSPACE/poly')
('p', 'AA', 'P', 'PSPACE/poly') => ('p', 'EA', 'P', 'PSPACE/poly')
('p', 'AA', 'PP', 'PSPACE/poly') => ('p', 'T', 'PP', 'PSPACE/poly')
('p', 'AA', 'PP', 'PSPACE/poly') => ('p', 'EA', 'PP', 'PSPACE/poly')
('-d', 'A', 'P', 'PSPACE') => ('-d', 'R', 'P', 'PSPACE')
('-d', 'A', 'P', 'PSPACE') => ('-d', 'AA', 'P', 'PSPACE')
('-d', 'A', 'PP', 'PSPACE') => ('-d', 'R', 'PP', 'PSPACE')
('-d', 'A', 'PP', 'PSPACE') => ('-d', 'AA', 'PP', 'PSPACE')
('-d', 'A', 'BPP', 'PSPACE') => ('-d', 'R', 'BPP', 'PSPACE')
('-d', 'A', 'BPP', 'PSPACE') => ('-d', 'AA', 'BPP', 'PSPACE')
('-d', 'AA', 'BPP', 'PSPACE') => ('-d', 'T', 'BPP', 'PSPACE')
('-d', 'AA', 'BPP', 'PSPACE') => ('-d', 'EA', 'BPP', 'PSPACE')
('-d', 'AA', 'P', 'PSPACE') => ('-d', 'T', 'P', 'PSPACE')
('-d', 'AA', 'P', 'PSPACE') => ('-d', 'EA', 'P', 'PSPACE')
('-d', 'AA', 'PP', 'PSPACE') => ('-d', 'T', 'PP', 'PSPACE')
('-d', 'AA', 'PP', 'PSPACE') => ('-d', 'EA', 'PP', 'PSPACE')
('p', 'A', 'P', 'PSPACE') => ('p', 'R', 'P', 'PSPACE')
('p', 'A', 'P', 'PSPACE') => ('p', 'AA', 'P', 'PSPACE')
('p', 'A', 'PP', 'PSPACE') => ('p', 'R', 'PP', 'PSPACE')
('p', 'A', 'PP', 'PSPACE') => ('p', 'AA', 'PP', 'PSPACE')
('p', 'A', 'BPP', 'PSPACE') => ('p', 'R', 'BPP', 'PSPACE')
('p', 'A', 'BPP', 'PSPACE') => ('p', 'AA', 'BPP', 'PSPACE')
('p', 'AA', 'BPP', 'PSPACE') => ('p', 'T', 'BPP', 'PSPACE')
('p', 'AA', 'BPP', 'PSPACE') => ('p', 'EA', 'BPP', 'PSPACE')
('p', 'AA', 'P', 'PSPACE') => ('p', 'T', 'P', 'PSPACE')
('p', 'AA', 'P', 'PSPACE') => ('p', 'EA', 'P', 'PSPACE')
('p', 'AA', 'PP', 'PSPACE') => ('p', 'T', 'PP', 'PSPACE')
('p', 'AA', 'PP', 'PSPACE') => ('p', 'EA', 'PP', 'PSPACE')
('-d', 'A', 'P', 'QSZK') => ('-d', 'R', 'P', 'QSZK')
('-d', 'A', 'P', 'QSZK') => ('-d', 'AA', 'P', 'QSZK')
('-d', 'AA', 'P', 'QSZK') => ('-d', 'T', 'P', 'QSZK')
('-d', 'AA', 'P', 'QSZK') => ('-d', 'EA', 'P', 'QSZK')
('p', 'A', 'P', 'QSZK') => ('p', 'R', 'P', 'QSZK')
('p', 'A', 'P', 'QSZK') => ('p', 'AA', 'P', 'QSZK')
('p', 'AA', 'P', 'QSZK') => ('p', 'T', 'P', 'QSZK')
('p', 'AA', 'P', 'QSZK') => ('p', 'EA', 'P', 'QSZK')
('p', 'AA', 'P', 'SZK') => ('-d', 'AA', 'P', 'SZK')
('p', 'AA', 'P', 'SZK') => ('p', 'T', 'P', 'SZK')
('p', 'AA', 'P', 'SZK') => ('p', 'EA', 'P', 'SZK')
('p', 'EA', 'P', 'SZK') => ('-d', 'EA', 'P', 'SZK')
('p', 'T', 'P', 'SZK') => ('-d', 'T', 'P', 'SZK')
('p', 'R', 'P', 'SZK') => ('-d', 'R', 'P', 'SZK')
('-d', 'A', 'BPP', 'QSZK') => ('-d', 'R', 'BPP', 'QSZK')
('-d', 'A', 'BPP', 'QSZK') => ('-d', 'AA', 'BPP', 'QSZK')
('-d', 'AA', 'BPP', 'QSZK') => ('-d', 'T', 'BPP', 'QSZK')
('-d', 'AA', 'BPP', 'QSZK') => ('-d', 'EA', 'BPP', 'QSZK')
('p', 'A', 'BPP', 'QSZK') => ('p', 'R', 'BPP', 'QSZK')
('p', 'A', 'BPP', 'QSZK') => ('p', 'AA', 'BPP', 'QSZK')
('p', 'AA', 'BPP', 'QSZK') => ('p', 'T', 'BPP', 'QSZK')
('p', 'AA', 'BPP', 'QSZK') => ('p', 'EA', 'BPP', 'QSZK')
('p', 'AA', 'BPP', 'SZK') => ('-d', 'AA', 'BPP', 'SZK')
('p', 'AA', 'BPP', 'SZK') => ('p', 'T', 'BPP', 'SZK')
('p', 'AA', 'BPP', 'SZK') => ('p', 'EA', 'BPP', 'SZK')
('p', 'EA', 'BPP', 'SZK') => ('-d', 'EA', 'BPP', 'SZK')
('p', 'EA', 'BPP', 'SZK') => ('p', 'E', 'BPP', 'SZK')
('p', 'E', 'BPP', 'SZK') => ('-d', 'E', 'BPP', 'SZK')
('p', 'T', 'BPP', 'SZK') => ('-d', 'T', 'BPP', 'SZK')
('p', 'R', 'BPP', 'SZK') => ('-d', 'R', 'BPP', 'SZK')
('p', 'R', 'PH', 'SPP') => ('-d', 'R', 'PH', 'SPP')
('p', 'R', 'PH', 'SPP') => ('p', 'E', 'PH', 'SPP')
('p', 'E', 'PH', 'SPP') => ('-d', 'E', 'PH', 'SPP')
('p', 'A', 'IP', 'MIP*_cme') => ('-d', 'A', 'IP', 'MIP*_cme')
('p', 'A', 'IP', 'MIP*_cme') => ('p', 'R', 'IP', 'MIP*_cme')
('p', 'A', 'IP', 'MIP*_cme') => ('p', 'AA', 'IP', 'MIP*_cme')
('p', 'A', 'co.IP', 'co.MIP*_cme') => ('-d', 'A', 'co.IP', 'co.MIP*_cme')
('p', 'A', 'co.IP', 'co.MIP*_cme') => ('p', 'R', 'co.IP', 'co.MIP*_cme')
('p', 'A', 'co.IP', 'co.MIP*_cme') => ('p', 'AA', 'co.IP', 'co.MIP*_cme')
('p', 'A', 'cocap.IP', 'cocap.MIP*_cme') => ('-d', 'A', 'cocap.IP', 'cocap.MIP*_cme')
('p', 'A', 'cocap.IP', 'cocap.MIP*_cme') => ('p', 'R', 'cocap.IP', 'cocap.MIP*_cme')
('p', 'A', 'cocap.IP', 'cocap.MIP*_cme') => ('p', 'AA', 'cocap.IP', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.IP', 'QMIP_cme') => ('-d', 'R', 'cocap.IP', 'QMIP_cme')
('-d', 'A', 'cocap.IP', 'QMIP_cme') => ('-d', 'AA', 'cocap.IP', 'QMIP_cme')
('-d', 'A', 'cocap.IP', 'co.QMIP_cme') => ('-d', 'R', 'cocap.IP', 'co.QMIP_cme')
('-d', 'A', 'cocap.IP', 'co.QMIP_cme') => ('-d', 'AA', 'cocap.IP', 'co.QMIP_cme')
('-d', 'A', 'cocap.IP', 'cocap.QMIP_cme') => ('-d', 'R', 'cocap.IP', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.IP', 'cocap.QMIP_cme') => ('-d', 'AA', 'cocap.IP', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.IP', 'R') => ('-d', 'R', 'cocap.IP', 'R')
('-d', 'A', 'cocap.IP', 'R') => ('-d', 'AA', 'cocap.IP', 'R')
('-d', 'A', 'cocap.IP', 'RE') => ('-d', 'R', 'cocap.IP', 'RE')
('-d', 'A', 'cocap.IP', 'RE') => ('-d', 'AA', 'cocap.IP', 'RE')
('-d', 'A', 'cocap.IP', 'co.RE') => ('-d', 'R', 'cocap.IP', 'co.RE')
('-d', 'A', 'cocap.IP', 'co.RE') => ('-d', 'AA', 'cocap.IP', 'co.RE')
('-d', 'AA', 'cocap.IP', 'co.RE') => ('-d', 'T', 'cocap.IP', 'co.RE')
('-d', 'AA', 'cocap.IP', 'co.RE') => ('-d', 'EA', 'cocap.IP', 'co.RE')
('-d', 'AA', 'cocap.IP', 'RE') => ('-d', 'T', 'cocap.IP', 'RE')
('-d', 'AA', 'cocap.IP', 'RE') => ('-d', 'EA', 'cocap.IP', 'RE')
('-d', 'AA', 'cocap.IP', 'R') => ('-d', 'T', 'cocap.IP', 'R')
('-d', 'AA', 'cocap.IP', 'R') => ('-d', 'EA', 'cocap.IP', 'R')
('-d', 'AA', 'cocap.IP', 'cocap.QMIP_cme') => ('-d', 'T', 'cocap.IP', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.IP', 'cocap.QMIP_cme') => ('-d', 'EA', 'cocap.IP', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.IP', 'QMIP_cme') => ('-d', 'T', 'cocap.IP', 'QMIP_cme')
('-d', 'AA', 'cocap.IP', 'QMIP_cme') => ('-d', 'EA', 'cocap.IP', 'QMIP_cme')
('-d', 'AA', 'cocap.IP', 'co.QMIP_cme') => ('-d', 'T', 'cocap.IP', 'co.QMIP_cme')
('-d', 'AA', 'cocap.IP', 'co.QMIP_cme') => ('-d', 'EA', 'cocap.IP', 'co.QMIP_cme')
('p', 'A', 'cocap.IP', 'QMIP_cme') => ('p', 'R', 'cocap.IP', 'QMIP_cme')
('p', 'A', 'cocap.IP', 'QMIP_cme') => ('p', 'AA', 'cocap.IP', 'QMIP_cme')
('p', 'A', 'cocap.IP', 'co.QMIP_cme') => ('p', 'R', 'cocap.IP', 'co.QMIP_cme')
('p', 'A', 'cocap.IP', 'co.QMIP_cme') => ('p', 'AA', 'cocap.IP', 'co.QMIP_cme')
('p', 'A', 'cocap.IP', 'cocap.QMIP_cme') => ('p', 'R', 'cocap.IP', 'cocap.QMIP_cme')
('p', 'A', 'cocap.IP', 'cocap.QMIP_cme') => ('p', 'AA', 'cocap.IP', 'cocap.QMIP_cme')
('p', 'A', 'cocap.IP', 'R') => ('p', 'R', 'cocap.IP', 'R')
('p', 'A', 'cocap.IP', 'R') => ('p', 'AA', 'cocap.IP', 'R')
('p', 'A', 'cocap.IP', 'RE') => ('p', 'R', 'cocap.IP', 'RE')
('p', 'A', 'cocap.IP', 'RE') => ('p', 'AA', 'cocap.IP', 'RE')
('p', 'A', 'cocap.IP', 'co.RE') => ('p', 'R', 'cocap.IP', 'co.RE')
('p', 'A', 'cocap.IP', 'co.RE') => ('p', 'AA', 'cocap.IP', 'co.RE')
('p', 'AA', 'cocap.IP', 'co.RE') => ('p', 'T', 'cocap.IP', 'co.RE')
('p', 'AA', 'cocap.IP', 'co.RE') => ('p', 'EA', 'cocap.IP', 'co.RE')
('p', 'AA', 'cocap.IP', 'RE') => ('p', 'T', 'cocap.IP', 'RE')
('p', 'AA', 'cocap.IP', 'RE') => ('p', 'EA', 'cocap.IP', 'RE')
('p', 'AA', 'cocap.IP', 'R') => ('p', 'T', 'cocap.IP', 'R')
('p', 'AA', 'cocap.IP', 'R') => ('p', 'EA', 'cocap.IP', 'R')
('p', 'AA', 'cocap.IP', 'cocap.QMIP_cme') => ('p', 'T', 'cocap.IP', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.IP', 'cocap.QMIP_cme') => ('p', 'EA', 'cocap.IP', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.IP', 'QMIP_cme') => ('p', 'T', 'cocap.IP', 'QMIP_cme')
('p', 'AA', 'cocap.IP', 'QMIP_cme') => ('p', 'EA', 'cocap.IP', 'QMIP_cme')
('p', 'AA', 'cocap.IP', 'co.QMIP_cme') => ('p', 'T', 'cocap.IP', 'co.QMIP_cme')
('p', 'AA', 'cocap.IP', 'co.QMIP_cme') => ('p', 'EA', 'cocap.IP', 'co.QMIP_cme')
('-d', 'A', 'cocap.IP', 'MIP*_cme') => ('-d', 'R', 'cocap.IP', 'MIP*_cme')
('-d', 'A', 'cocap.IP', 'MIP*_cme') => ('-d', 'AA', 'cocap.IP', 'MIP*_cme')
('-d', 'A', 'cocap.IP', 'co.MIP*_cme') => ('-d', 'R', 'cocap.IP', 'co.MIP*_cme')
('-d', 'A', 'cocap.IP', 'co.MIP*_cme') => ('-d', 'AA', 'cocap.IP', 'co.MIP*_cme')
('-d', 'A', 'cocap.IP', 'cocap.MIP*_cme') => ('-d', 'R', 'cocap.IP', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.IP', 'cocap.MIP*_cme') => ('-d', 'AA', 'cocap.IP', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.IP', 'cocap.MIP*_cme') => ('-d', 'T', 'cocap.IP', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.IP', 'cocap.MIP*_cme') => ('-d', 'EA', 'cocap.IP', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.IP', 'MIP*_cme') => ('-d', 'T', 'cocap.IP', 'MIP*_cme')
('-d', 'AA', 'cocap.IP', 'MIP*_cme') => ('-d', 'EA', 'cocap.IP', 'MIP*_cme')
('-d', 'AA', 'cocap.IP', 'co.MIP*_cme') => ('-d', 'T', 'cocap.IP', 'co.MIP*_cme')
('-d', 'AA', 'cocap.IP', 'co.MIP*_cme') => ('-d', 'EA', 'cocap.IP', 'co.MIP*_cme')
('p', 'A', 'cocap.IP', 'MIP*_cme') => ('p', 'R', 'cocap.IP', 'MIP*_cme')
('p', 'A', 'cocap.IP', 'MIP*_cme') => ('p', 'AA', 'cocap.IP', 'MIP*_cme')
('p', 'A', 'cocap.IP', 'co.MIP*_cme') => ('p', 'R', 'cocap.IP', 'co.MIP*_cme')
('p', 'A', 'cocap.IP', 'co.MIP*_cme') => ('p', 'AA', 'cocap.IP', 'co.MIP*_cme')
('p', 'AA', 'cocap.IP', 'co.MIP*_cme') => ('p', 'T', 'cocap.IP', 'co.MIP*_cme')
('p', 'AA', 'cocap.IP', 'co.MIP*_cme') => ('p', 'EA', 'cocap.IP', 'co.MIP*_cme')
('p', 'AA', 'cocap.IP', 'MIP*_cme') => ('p', 'T', 'cocap.IP', 'MIP*_cme')
('p', 'AA', 'cocap.IP', 'MIP*_cme') => ('p', 'EA', 'cocap.IP', 'MIP*_cme')
('p', 'AA', 'cocap.IP', 'cocap.MIP*_cme') => ('p', 'T', 'cocap.IP', 'cocap.MIP*_cme')
('p', 'AA', 'cocap.IP', 'cocap.MIP*_cme') => ('p', 'EA', 'cocap.IP', 'cocap.MIP*_cme')
('-d', 'A', 'co.IP', 'co.QMIP_cme') => ('-d', 'R', 'co.IP', 'co.QMIP_cme')
('-d', 'A', 'co.IP', 'co.QMIP_cme') => ('-d', 'AA', 'co.IP', 'co.QMIP_cme')
('-d', 'A', 'IP', 'QMIP_cme') => ('-d', 'R', 'IP', 'QMIP_cme')
('-d', 'A', 'IP', 'QMIP_cme') => ('-d', 'AA', 'IP', 'QMIP_cme')
('-d', 'A', 'IP', 'co.RE') => ('-d', 'R', 'IP', 'co.RE')
('-d', 'A', 'IP', 'co.RE') => ('-d', 'AA', 'IP', 'co.RE')
('-d', 'A', 'co.IP', 'RE') => ('-d', 'R', 'co.IP', 'RE')
('-d', 'A', 'co.IP', 'RE') => ('-d', 'AA', 'co.IP', 'RE')
('-d', 'AA', 'co.IP', 'RE') => ('-d', 'T', 'co.IP', 'RE')
('-d', 'AA', 'co.IP', 'RE') => ('-d', 'EA', 'co.IP', 'RE')
('-d', 'AA', 'IP', 'co.RE') => ('-d', 'T', 'IP', 'co.RE')
('-d', 'AA', 'IP', 'co.RE') => ('-d', 'EA', 'IP', 'co.RE')
('-d', 'AA', 'IP', 'QMIP_cme') => ('-d', 'T', 'IP', 'QMIP_cme')
('-d', 'AA', 'IP', 'QMIP_cme') => ('-d', 'EA', 'IP', 'QMIP_cme')
('-d', 'AA', 'co.IP', 'co.QMIP_cme') => ('-d', 'T', 'co.IP', 'co.QMIP_cme')
('-d', 'AA', 'co.IP', 'co.QMIP_cme') => ('-d', 'EA', 'co.IP', 'co.QMIP_cme')
('p', 'A', 'co.IP', 'co.QMIP_cme') => ('p', 'R', 'co.IP', 'co.QMIP_cme')
('p', 'A', 'co.IP', 'co.QMIP_cme') => ('p', 'AA', 'co.IP', 'co.QMIP_cme')
('p', 'A', 'IP', 'QMIP_cme') => ('p', 'R', 'IP', 'QMIP_cme')
('p', 'A', 'IP', 'QMIP_cme') => ('p', 'AA', 'IP', 'QMIP_cme')
('p', 'A', 'IP', 'co.RE') => ('p', 'R', 'IP', 'co.RE')
('p', 'A', 'IP', 'co.RE') => ('p', 'AA', 'IP', 'co.RE')
('p', 'A', 'co.IP', 'RE') => ('p', 'R', 'co.IP', 'RE')
('p', 'A', 'co.IP', 'RE') => ('p', 'AA', 'co.IP', 'RE')
('p', 'AA', 'co.IP', 'RE') => ('p', 'T', 'co.IP', 'RE')
('p', 'AA', 'co.IP', 'RE') => ('p', 'EA', 'co.IP', 'RE')
('p', 'AA', 'IP', 'co.RE') => ('p', 'T', 'IP', 'co.RE')
('p', 'AA', 'IP', 'co.RE') => ('p', 'EA', 'IP', 'co.RE')
('p', 'AA', 'IP', 'QMIP_cme') => ('p', 'T', 'IP', 'QMIP_cme')
('p', 'AA', 'IP', 'QMIP_cme') => ('p', 'EA', 'IP', 'QMIP_cme')
('p', 'AA', 'co.IP', 'co.QMIP_cme') => ('p', 'T', 'co.IP', 'co.QMIP_cme')
('p', 'AA', 'co.IP', 'co.QMIP_cme') => ('p', 'EA', 'co.IP', 'co.QMIP_cme')
('p', 'AA', 'co.IP', 'co.MIP*_cme') => ('-d', 'AA', 'co.IP', 'co.MIP*_cme')
('p', 'AA', 'co.IP', 'co.MIP*_cme') => ('p', 'T', 'co.IP', 'co.MIP*_cme')
('p', 'AA', 'co.IP', 'co.MIP*_cme') => ('p', 'EA', 'co.IP', 'co.MIP*_cme')
('p', 'AA', 'IP', 'MIP*_cme') => ('-d', 'AA', 'IP', 'MIP*_cme')
('p', 'AA', 'IP', 'MIP*_cme') => ('p', 'T', 'IP', 'MIP*_cme')
('p', 'AA', 'IP', 'MIP*_cme') => ('p', 'EA', 'IP', 'MIP*_cme')
('p', 'EA', 'IP', 'MIP*_cme') => ('-d', 'EA', 'IP', 'MIP*_cme')
('p', 'EA', 'IP', 'MIP*_cme') => ('p', 'E', 'IP', 'MIP*_cme')
('p', 'EA', 'co.IP', 'co.MIP*_cme') => ('-d', 'EA', 'co.IP', 'co.MIP*_cme')
('p', 'EA', 'co.IP', 'co.MIP*_cme') => ('p', 'E', 'co.IP', 'co.MIP*_cme')
('p', 'E', 'co.IP', 'co.MIP*_cme') => ('-d', 'E', 'co.IP', 'co.MIP*_cme')
('p', 'E', 'IP', 'MIP*_cme') => ('-d', 'E', 'IP', 'MIP*_cme')
('p', 'T', 'IP', 'MIP*_cme') => ('-d', 'T', 'IP', 'MIP*_cme')
('p', 'T', 'co.IP', 'co.MIP*_cme') => ('-d', 'T', 'co.IP', 'co.MIP*_cme')
('p', 'R', 'co.IP', 'co.MIP*_cme') => ('-d', 'R', 'co.IP', 'co.MIP*_cme')
('p', 'R', 'IP', 'MIP*_cme') => ('-d', 'R', 'IP', 'MIP*_cme')
('d', 'A', 'BQP', 'PostBPP') => ('-p', 'A', 'BQP', 'PostBPP')
('p', 'A', 'BQP/mpoly', 'BQP/qpoly') => ('-d', 'A', 'BQP/mpoly', 'BQP/qpoly')
('p', 'A', 'BQP/mpoly', 'BQP/qpoly') => ('p', 'R', 'BQP/mpoly', 'BQP/qpoly')
('p', 'A', 'BQP/mpoly', 'BQP/qpoly') => ('p', 'AA', 'BQP/mpoly', 'BQP/qpoly')
('d', 'A', 'NP', 'BQP/mpoly') => ('-p', 'A', 'NP', 'BQP/mpoly')
('d', 'A', 'co.NP', 'BQP/mpoly') => ('-p', 'A', 'co.NP', 'BQP/mpoly')
('p', 'E', 'BQP', 'BQP/qpoly') => ('-d', 'E', 'BQP', 'BQP/qpoly')
('p', 'A', 'BQP', 'BQP/qpoly') => ('-d', 'A', 'BQP', 'BQP/qpoly')
('p', 'A', 'BQP', 'BQP/qpoly') => ('p', 'R', 'BQP', 'BQP/qpoly')
('p', 'A', 'BQP', 'BQP/qpoly') => ('p', 'AA', 'BQP', 'BQP/qpoly')
('d', 'A', 'BQP/qpoly', 'PostBPP') => ('-p', 'A', 'BQP/qpoly', 'PostBPP')
('p', 'AA', 'BQP', 'BQP/qpoly') => ('-d', 'AA', 'BQP', 'BQP/qpoly')
('p', 'AA', 'BQP', 'BQP/qpoly') => ('p', 'T', 'BQP', 'BQP/qpoly')
('p', 'AA', 'BQP', 'BQP/qpoly') => ('p', 'EA', 'BQP', 'BQP/qpoly')
('p', 'EA', 'BQP', 'BQP/qpoly') => ('-d', 'EA', 'BQP', 'BQP/qpoly')
('p', 'T', 'BQP', 'BQP/qpoly') => ('-d', 'T', 'BQP', 'BQP/qpoly')
('p', 'R', 'BQP', 'BQP/qpoly') => ('-d', 'R', 'BQP', 'BQP/qpoly')
('p', 'AA', 'BQP/mpoly', 'BQP/qpoly') => ('-d', 'AA', 'BQP/mpoly', 'BQP/qpoly')
('p', 'AA', 'BQP/mpoly', 'BQP/qpoly') => ('p', 'T', 'BQP/mpoly', 'BQP/qpoly')
('p', 'AA', 'BQP/mpoly', 'BQP/qpoly') => ('p', 'EA', 'BQP/mpoly', 'BQP/qpoly')
('p', 'EA', 'BQP/mpoly', 'BQP/qpoly') => ('-d', 'EA', 'BQP/mpoly', 'BQP/qpoly')
('p', 'EA', 'BQP/mpoly', 'BQP/qpoly') => ('p', 'E', 'BQP/mpoly', 'BQP/qpoly')
('p', 'E', 'BQP/mpoly', 'BQP/qpoly') => ('-d', 'E', 'BQP/mpoly', 'BQP/qpoly')
('p', 'T', 'BQP/mpoly', 'BQP/qpoly') => ('-d', 'T', 'BQP/mpoly', 'BQP/qpoly')
('p', 'R', 'BQP/mpoly', 'BQP/qpoly') => ('-d', 'R', 'BQP/mpoly', 'BQP/qpoly')
('p', 'A', 'QMA/qpoly', 'PSPACE/poly') => ('-d', 'A', 'QMA/qpoly', 'PSPACE/poly')
('p', 'A', 'QMA/qpoly', 'PSPACE/poly') => ('p', 'R', 'QMA/qpoly', 'PSPACE/poly')
('p', 'A', 'QMA/qpoly', 'PSPACE/poly') => ('p', 'AA', 'QMA/qpoly', 'PSPACE/poly')
('p', 'A', 'co.QMA/qpoly', 'PSPACE/poly') => ('-d', 'A', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'A', 'co.QMA/qpoly', 'PSPACE/poly') => ('p', 'R', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'A', 'co.QMA/qpoly', 'PSPACE/poly') => ('p', 'AA', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'A', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('-d', 'A', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'A', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('p', 'R', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'A', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('p', 'AA', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('-d', 'AA', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('p', 'T', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('p', 'EA', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'EA', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('-d', 'EA', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'EA', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('p', 'E', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'E', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('-d', 'E', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'T', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('-d', 'T', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'R', 'cocap.QMA/qpoly', 'PSPACE/poly') => ('-d', 'R', 'cocap.QMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'co.QMA/qpoly', 'PSPACE/poly') => ('-d', 'AA', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'co.QMA/qpoly', 'PSPACE/poly') => ('p', 'T', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'co.QMA/qpoly', 'PSPACE/poly') => ('p', 'EA', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'QMA/qpoly', 'PSPACE/poly') => ('-d', 'AA', 'QMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'QMA/qpoly', 'PSPACE/poly') => ('p', 'T', 'QMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'QMA/qpoly', 'PSPACE/poly') => ('p', 'EA', 'QMA/qpoly', 'PSPACE/poly')
('p', 'EA', 'QMA/qpoly', 'PSPACE/poly') => ('-d', 'EA', 'QMA/qpoly', 'PSPACE/poly')
('p', 'EA', 'QMA/qpoly', 'PSPACE/poly') => ('p', 'E', 'QMA/qpoly', 'PSPACE/poly')
('p', 'EA', 'co.QMA/qpoly', 'PSPACE/poly') => ('-d', 'EA', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'EA', 'co.QMA/qpoly', 'PSPACE/poly') => ('p', 'E', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'E', 'co.QMA/qpoly', 'PSPACE/poly') => ('-d', 'E', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'E', 'QMA/qpoly', 'PSPACE/poly') => ('-d', 'E', 'QMA/qpoly', 'PSPACE/poly')
('p', 'T', 'QMA/qpoly', 'PSPACE/poly') => ('-d', 'T', 'QMA/qpoly', 'PSPACE/poly')
('p', 'T', 'co.QMA/qpoly', 'PSPACE/poly') => ('-d', 'T', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'R', 'co.QMA/qpoly', 'PSPACE/poly') => ('-d', 'R', 'co.QMA/qpoly', 'PSPACE/poly')
('p', 'R', 'QMA/qpoly', 'PSPACE/poly') => ('-d', 'R', 'QMA/qpoly', 'PSPACE/poly')
('p', 'A', 'NP', 'MA') => ('-d', 'A', 'NP', 'MA')
('p', 'A', 'NP', 'MA') => ('p', 'R', 'NP', 'MA')
('p', 'A', 'NP', 'MA') => ('p', 'AA', 'NP', 'MA')
('p', 'A', 'co.NP', 'co.MA') => ('-d', 'A', 'co.NP', 'co.MA')
('p', 'A', 'co.NP', 'co.MA') => ('p', 'R', 'co.NP', 'co.MA')
('p', 'A', 'co.NP', 'co.MA') => ('p', 'AA', 'co.NP', 'co.MA')
('p', 'A', 'cocap.NP', 'cocap.MA') => ('-d', 'A', 'cocap.NP', 'cocap.MA')
('p', 'A', 'cocap.NP', 'cocap.MA') => ('p', 'R', 'cocap.NP', 'cocap.MA')
('p', 'A', 'cocap.NP', 'cocap.MA') => ('p', 'AA', 'cocap.NP', 'cocap.MA')
('-d', 'A', 'cocap.NP', 'co.MA') => ('-d', 'R', 'cocap.NP', 'co.MA')
('-d', 'A', 'cocap.NP', 'co.MA') => ('-d', 'AA', 'cocap.NP', 'co.MA')
('-d', 'A', 'cocap.NP', 'MA') => ('-d', 'R', 'cocap.NP', 'MA')
('-d', 'A', 'cocap.NP', 'MA') => ('-d', 'AA', 'cocap.NP', 'MA')
('-d', 'A', 'cocap.NP', 'cocap.MA') => ('-d', 'R', 'cocap.NP', 'cocap.MA')
('-d', 'A', 'cocap.NP', 'cocap.MA') => ('-d', 'AA', 'cocap.NP', 'cocap.MA')
('-d', 'A', 'ZPP', 'cocap.MA') => ('-d', 'R', 'ZPP', 'cocap.MA')
('-d', 'A', 'ZPP', 'cocap.MA') => ('-d', 'AA', 'ZPP', 'cocap.MA')
('-d', 'A', 'ZPP', 'co.MA') => ('-d', 'R', 'ZPP', 'co.MA')
('-d', 'A', 'ZPP', 'co.MA') => ('-d', 'AA', 'ZPP', 'co.MA')
('-d', 'A', 'ZPP', 'MA') => ('-d', 'R', 'ZPP', 'MA')
('-d', 'A', 'ZPP', 'MA') => ('-d', 'AA', 'ZPP', 'MA')
('-d', 'AA', 'ZPP', 'MA') => ('-d', 'T', 'ZPP', 'MA')
('-d', 'AA', 'ZPP', 'MA') => ('-d', 'EA', 'ZPP', 'MA')
('-d', 'AA', 'ZPP', 'co.MA') => ('-d', 'T', 'ZPP', 'co.MA')
('-d', 'AA', 'ZPP', 'co.MA') => ('-d', 'EA', 'ZPP', 'co.MA')
('-d', 'AA', 'ZPP', 'cocap.MA') => ('-d', 'T', 'ZPP', 'cocap.MA')
('-d', 'AA', 'ZPP', 'cocap.MA') => ('-d', 'EA', 'ZPP', 'cocap.MA')
('-d', 'AA', 'cocap.NP', 'cocap.MA') => ('-d', 'T', 'cocap.NP', 'cocap.MA')
('-d', 'AA', 'cocap.NP', 'cocap.MA') => ('-d', 'EA', 'cocap.NP', 'cocap.MA')
('-d', 'AA', 'cocap.NP', 'co.MA') => ('-d', 'T', 'cocap.NP', 'co.MA')
('-d', 'AA', 'cocap.NP', 'co.MA') => ('-d', 'EA', 'cocap.NP', 'co.MA')
('-d', 'AA', 'cocap.NP', 'MA') => ('-d', 'T', 'cocap.NP', 'MA')
('-d', 'AA', 'cocap.NP', 'MA') => ('-d', 'EA', 'cocap.NP', 'MA')
('p', 'A', 'cocap.NP', 'co.MA') => ('p', 'R', 'cocap.NP', 'co.MA')
('p', 'A', 'cocap.NP', 'co.MA') => ('p', 'AA', 'cocap.NP', 'co.MA')
('p', 'A', 'cocap.NP', 'MA') => ('p', 'R', 'cocap.NP', 'MA')
('p', 'A', 'cocap.NP', 'MA') => ('p', 'AA', 'cocap.NP', 'MA')
('p', 'A', 'ZPP', 'MA') => ('p', 'R', 'ZPP', 'MA')
('p', 'A', 'ZPP', 'MA') => ('p', 'AA', 'ZPP', 'MA')
('p', 'A', 'ZPP', 'co.MA') => ('p', 'R', 'ZPP', 'co.MA')
('p', 'A', 'ZPP', 'co.MA') => ('p', 'AA', 'ZPP', 'co.MA')
('p', 'A', 'ZPP', 'cocap.MA') => ('p', 'R', 'ZPP', 'cocap.MA')
('p', 'A', 'ZPP', 'cocap.MA') => ('p', 'AA', 'ZPP', 'cocap.MA')
('p', 'AA', 'ZPP', 'cocap.MA') => ('p', 'T', 'ZPP', 'cocap.MA')
('p', 'AA', 'ZPP', 'cocap.MA') => ('p', 'EA', 'ZPP', 'cocap.MA')
('p', 'AA', 'ZPP', 'co.MA') => ('p', 'T', 'ZPP', 'co.MA')
('p', 'AA', 'ZPP', 'co.MA') => ('p', 'EA', 'ZPP', 'co.MA')
('p', 'AA', 'ZPP', 'MA') => ('p', 'T', 'ZPP', 'MA')
('p', 'AA', 'ZPP', 'MA') => ('p', 'EA', 'ZPP', 'MA')
('p', 'AA', 'cocap.NP', 'MA') => ('p', 'T', 'cocap.NP', 'MA')
('p', 'AA', 'cocap.NP', 'MA') => ('p', 'EA', 'cocap.NP', 'MA')
('p', 'AA', 'cocap.NP', 'co.MA') => ('p', 'T', 'cocap.NP', 'co.MA')
('p', 'AA', 'cocap.NP', 'co.MA') => ('p', 'EA', 'cocap.NP', 'co.MA')
('p', 'AA', 'cocap.NP', 'cocap.MA') => ('p', 'T', 'cocap.NP', 'cocap.MA')
('p', 'AA', 'cocap.NP', 'cocap.MA') => ('p', 'EA', 'cocap.NP', 'cocap.MA')
('d', 'A', 'co.MA', 'BQP') => ('-p', 'A', 'co.MA', 'BQP')
('d', 'A', 'MA', 'BQP') => ('-p', 'A', 'MA', 'BQP')
('p', 'E', 'co.RP', 'co.MA') => ('-d', 'E', 'co.RP', 'co.MA')
('p', 'E', 'RP', 'MA') => ('-d', 'E', 'RP', 'MA')
('p', 'A', 'co.RP', 'co.MA') => ('-d', 'A', 'co.RP', 'co.MA')
('p', 'A', 'co.RP', 'co.MA') => ('p', 'R', 'co.RP', 'co.MA')
('p', 'A', 'co.RP', 'co.MA') => ('p', 'AA', 'co.RP', 'co.MA')
('p', 'A', 'RP', 'MA') => ('-d', 'A', 'RP', 'MA')
('p', 'A', 'RP', 'MA') => ('p', 'R', 'RP', 'MA')
('p', 'A', 'RP', 'MA') => ('p', 'AA', 'RP', 'MA')
('p', 'AA', 'RP', 'MA') => ('-d', 'AA', 'RP', 'MA')
('p', 'AA', 'RP', 'MA') => ('p', 'T', 'RP', 'MA')
('p', 'AA', 'RP', 'MA') => ('p', 'EA', 'RP', 'MA')
('p', 'AA', 'co.RP', 'co.MA') => ('-d', 'AA', 'co.RP', 'co.MA')
('p', 'AA', 'co.RP', 'co.MA') => ('p', 'T', 'co.RP', 'co.MA')
('p', 'AA', 'co.RP', 'co.MA') => ('p', 'EA', 'co.RP', 'co.MA')
('p', 'EA', 'co.RP', 'co.MA') => ('-d', 'EA', 'co.RP', 'co.MA')
('p', 'EA', 'RP', 'MA') => ('-d', 'EA', 'RP', 'MA')
('p', 'T', 'co.RP', 'co.MA') => ('-d', 'T', 'co.RP', 'co.MA')
('p', 'T', 'RP', 'MA') => ('-d', 'T', 'RP', 'MA')
('p', 'R', 'RP', 'MA') => ('-d', 'R', 'RP', 'MA')
('p', 'R', 'co.RP', 'co.MA') => ('-d', 'R', 'co.RP', 'co.MA')
('d', 'A', 'co.MA', 'BQP/mpoly') => ('-p', 'A', 'co.MA', 'BQP/mpoly')
('d', 'A', 'MA', 'BQP/mpoly') => ('-p', 'A', 'MA', 'BQP/mpoly')
('d', 'A', 'co.MA', 'BQP/qpoly') => ('-p', 'A', 'co.MA', 'BQP/qpoly')
('d', 'A', 'MA', 'BQP/qpoly') => ('-p', 'A', 'MA', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'co.MA') => ('-d', 'AA', 'co.NP', 'co.MA')
('p', 'AA', 'co.NP', 'co.MA') => ('p', 'T', 'co.NP', 'co.MA')
('p', 'AA', 'co.NP', 'co.MA') => ('p', 'EA', 'co.NP', 'co.MA')
('p', 'AA', 'NP', 'MA') => ('-d', 'AA', 'NP', 'MA')
('p', 'AA', 'NP', 'MA') => ('p', 'T', 'NP', 'MA')
('p', 'AA', 'NP', 'MA') => ('p', 'EA', 'NP', 'MA')
('p', 'EA', 'NP', 'MA') => ('-d', 'EA', 'NP', 'MA')
('p', 'EA', 'NP', 'MA') => ('p', 'E', 'NP', 'MA')
('p', 'EA', 'co.NP', 'co.MA') => ('-d', 'EA', 'co.NP', 'co.MA')
('p', 'EA', 'co.NP', 'co.MA') => ('p', 'E', 'co.NP', 'co.MA')
('p', 'E', 'co.NP', 'co.MA') => ('-d', 'E', 'co.NP', 'co.MA')
('p', 'E', 'NP', 'MA') => ('-d', 'E', 'NP', 'MA')
('p', 'T', 'NP', 'MA') => ('-d', 'T', 'NP', 'MA')
('p', 'T', 'co.NP', 'co.MA') => ('-d', 'T', 'co.NP', 'co.MA')
('p', 'R', 'co.NP', 'co.MA') => ('-d', 'R', 'co.NP', 'co.MA')
('p', 'R', 'NP', 'MA') => ('-d', 'R', 'NP', 'MA')
('p', 'A', 'Delta_2P', 'Sigma_2P') => ('-d', 'A', 'Delta_2P', 'Sigma_2P')
('p', 'A', 'Delta_2P', 'Sigma_2P') => ('p', 'R', 'Delta_2P', 'Sigma_2P')
('p', 'A', 'Delta_2P', 'Sigma_2P') => ('p', 'AA', 'Delta_2P', 'Sigma_2P')
('p', 'A', 'Delta_2P', 'co.Sigma_2P') => ('-d', 'A', 'Delta_2P', 'co.Sigma_2P')
('p', 'A', 'Delta_2P', 'co.Sigma_2P') => ('p', 'R', 'Delta_2P', 'co.Sigma_2P')
('p', 'A', 'Delta_2P', 'co.Sigma_2P') => ('p', 'AA', 'Delta_2P', 'co.Sigma_2P')
('p', 'A', 'Delta_2P', 'cocap.Sigma_2P') => ('-d', 'A', 'Delta_2P', 'cocap.Sigma_2P')
('p', 'A', 'Delta_2P', 'cocap.Sigma_2P') => ('p', 'R', 'Delta_2P', 'cocap.Sigma_2P')
('p', 'A', 'Delta_2P', 'cocap.Sigma_2P') => ('p', 'AA', 'Delta_2P', 'cocap.Sigma_2P')
('p', 'E', 'RP', 'cocap.Sigma_2P') => ('-d', 'E', 'RP', 'cocap.Sigma_2P')
('p', 'E', 'co.RP', 'cocap.Sigma_2P') => ('-d', 'E', 'co.RP', 'cocap.Sigma_2P')
('p', 'E', 'ZPP', 'cocap.Sigma_2P') => ('-d', 'E', 'ZPP', 'cocap.Sigma_2P')
('p', 'A', 'RP', 'cocap.Sigma_2P') => ('-d', 'A', 'RP', 'cocap.Sigma_2P')
('p', 'A', 'RP', 'cocap.Sigma_2P') => ('p', 'R', 'RP', 'cocap.Sigma_2P')
('p', 'A', 'RP', 'cocap.Sigma_2P') => ('p', 'AA', 'RP', 'cocap.Sigma_2P')
('p', 'A', 'co.RP', 'cocap.Sigma_2P') => ('-d', 'A', 'co.RP', 'cocap.Sigma_2P')
('p', 'A', 'co.RP', 'cocap.Sigma_2P') => ('p', 'R', 'co.RP', 'cocap.Sigma_2P')
('p', 'A', 'co.RP', 'cocap.Sigma_2P') => ('p', 'AA', 'co.RP', 'cocap.Sigma_2P')
('p', 'A', 'ZPP', 'cocap.Sigma_2P') => ('-d', 'A', 'ZPP', 'cocap.Sigma_2P')
('p', 'A', 'ZPP', 'cocap.Sigma_2P') => ('p', 'R', 'ZPP', 'cocap.Sigma_2P')
('p', 'A', 'ZPP', 'cocap.Sigma_2P') => ('p', 'AA', 'ZPP', 'cocap.Sigma_2P')
('-d', 'A', 'ZPP', 'co.Sigma_2P') => ('-d', 'R', 'ZPP', 'co.Sigma_2P')
('-d', 'A', 'ZPP', 'co.Sigma_2P') => ('-d', 'AA', 'ZPP', 'co.Sigma_2P')
('-d', 'A', 'ZPP', 'Sigma_2P') => ('-d', 'R', 'ZPP', 'Sigma_2P')
('-d', 'A', 'ZPP', 'Sigma_2P') => ('-d', 'AA', 'ZPP', 'Sigma_2P')
('-d', 'A', 'ZPP', 'cocap.Sigma_2P') => ('-d', 'R', 'ZPP', 'cocap.Sigma_2P')
('-d', 'A', 'ZPP', 'cocap.Sigma_2P') => ('-d', 'AA', 'ZPP', 'cocap.Sigma_2P')
('-d', 'AA', 'ZPP', 'cocap.Sigma_2P') => ('-d', 'T', 'ZPP', 'cocap.Sigma_2P')
('-d', 'AA', 'ZPP', 'cocap.Sigma_2P') => ('-d', 'EA', 'ZPP', 'cocap.Sigma_2P')
('-d', 'AA', 'ZPP', 'co.Sigma_2P') => ('-d', 'T', 'ZPP', 'co.Sigma_2P')
('-d', 'AA', 'ZPP', 'co.Sigma_2P') => ('-d', 'EA', 'ZPP', 'co.Sigma_2P')
('-d', 'AA', 'ZPP', 'Sigma_2P') => ('-d', 'T', 'ZPP', 'Sigma_2P')
('-d', 'AA', 'ZPP', 'Sigma_2P') => ('-d', 'EA', 'ZPP', 'Sigma_2P')
('p', 'A', 'ZPP', 'co.Sigma_2P') => ('p', 'R', 'ZPP', 'co.Sigma_2P')
('p', 'A', 'ZPP', 'co.Sigma_2P') => ('p', 'AA', 'ZPP', 'co.Sigma_2P')
('p', 'A', 'ZPP', 'Sigma_2P') => ('p', 'R', 'ZPP', 'Sigma_2P')
('p', 'A', 'ZPP', 'Sigma_2P') => ('p', 'AA', 'ZPP', 'Sigma_2P')
('p', 'AA', 'ZPP', 'Sigma_2P') => ('p', 'T', 'ZPP', 'Sigma_2P')
('p', 'AA', 'ZPP', 'Sigma_2P') => ('p', 'EA', 'ZPP', 'Sigma_2P')
('p', 'AA', 'ZPP', 'co.Sigma_2P') => ('p', 'T', 'ZPP', 'co.Sigma_2P')
('p', 'AA', 'ZPP', 'co.Sigma_2P') => ('p', 'EA', 'ZPP', 'co.Sigma_2P')
('p', 'AA', 'ZPP', 'cocap.Sigma_2P') => ('p', 'T', 'ZPP', 'cocap.Sigma_2P')
('p', 'AA', 'ZPP', 'cocap.Sigma_2P') => ('p', 'EA', 'ZPP', 'cocap.Sigma_2P')
('-d', 'A', 'co.RP', 'co.Sigma_2P') => ('-d', 'R', 'co.RP', 'co.Sigma_2P')
('-d', 'A', 'co.RP', 'co.Sigma_2P') => ('-d', 'AA', 'co.RP', 'co.Sigma_2P')
('-d', 'A', 'RP', 'Sigma_2P') => ('-d', 'R', 'RP', 'Sigma_2P')
('-d', 'A', 'RP', 'Sigma_2P') => ('-d', 'AA', 'RP', 'Sigma_2P')
('-d', 'AA', 'RP', 'Sigma_2P') => ('-d', 'T', 'RP', 'Sigma_2P')
('-d', 'AA', 'RP', 'Sigma_2P') => ('-d', 'EA', 'RP', 'Sigma_2P')
('-d', 'AA', 'co.RP', 'co.Sigma_2P') => ('-d', 'T', 'co.RP', 'co.Sigma_2P')
('-d', 'AA', 'co.RP', 'co.Sigma_2P') => ('-d', 'EA', 'co.RP', 'co.Sigma_2P')
('p', 'A', 'co.RP', 'co.Sigma_2P') => ('p', 'R', 'co.RP', 'co.Sigma_2P')
('p', 'A', 'co.RP', 'co.Sigma_2P') => ('p', 'AA', 'co.RP', 'co.Sigma_2P')
('p', 'A', 'RP', 'Sigma_2P') => ('p', 'R', 'RP', 'Sigma_2P')
('p', 'A', 'RP', 'Sigma_2P') => ('p', 'AA', 'RP', 'Sigma_2P')
('p', 'AA', 'RP', 'Sigma_2P') => ('p', 'T', 'RP', 'Sigma_2P')
('p', 'AA', 'RP', 'Sigma_2P') => ('p', 'EA', 'RP', 'Sigma_2P')
('p', 'AA', 'co.RP', 'co.Sigma_2P') => ('p', 'T', 'co.RP', 'co.Sigma_2P')
('p', 'AA', 'co.RP', 'co.Sigma_2P') => ('p', 'EA', 'co.RP', 'co.Sigma_2P')
('-d', 'A', 'co.RP', 'Sigma_2P') => ('-d', 'R', 'co.RP', 'Sigma_2P')
('-d', 'A', 'co.RP', 'Sigma_2P') => ('-d', 'AA', 'co.RP', 'Sigma_2P')
('-d', 'A', 'co.RP', 'cocap.Sigma_2P') => ('-d', 'R', 'co.RP', 'cocap.Sigma_2P')
('-d', 'A', 'co.RP', 'cocap.Sigma_2P') => ('-d', 'AA', 'co.RP', 'cocap.Sigma_2P')
('-d', 'A', 'RP', 'cocap.Sigma_2P') => ('-d', 'R', 'RP', 'cocap.Sigma_2P')
('-d', 'A', 'RP', 'cocap.Sigma_2P') => ('-d', 'AA', 'RP', 'cocap.Sigma_2P')
('-d', 'A', 'RP', 'co.Sigma_2P') => ('-d', 'R', 'RP', 'co.Sigma_2P')
('-d', 'A', 'RP', 'co.Sigma_2P') => ('-d', 'AA', 'RP', 'co.Sigma_2P')
('-d', 'AA', 'RP', 'co.Sigma_2P') => ('-d', 'T', 'RP', 'co.Sigma_2P')
('-d', 'AA', 'RP', 'co.Sigma_2P') => ('-d', 'EA', 'RP', 'co.Sigma_2P')
('-d', 'AA', 'RP', 'cocap.Sigma_2P') => ('-d', 'T', 'RP', 'cocap.Sigma_2P')
('-d', 'AA', 'RP', 'cocap.Sigma_2P') => ('-d', 'EA', 'RP', 'cocap.Sigma_2P')
('-d', 'AA', 'co.RP', 'cocap.Sigma_2P') => ('-d', 'T', 'co.RP', 'cocap.Sigma_2P')
('-d', 'AA', 'co.RP', 'cocap.Sigma_2P') => ('-d', 'EA', 'co.RP', 'cocap.Sigma_2P')
('-d', 'AA', 'co.RP', 'Sigma_2P') => ('-d', 'T', 'co.RP', 'Sigma_2P')
('-d', 'AA', 'co.RP', 'Sigma_2P') => ('-d', 'EA', 'co.RP', 'Sigma_2P')
('p', 'A', 'co.RP', 'Sigma_2P') => ('p', 'R', 'co.RP', 'Sigma_2P')
('p', 'A', 'co.RP', 'Sigma_2P') => ('p', 'AA', 'co.RP', 'Sigma_2P')
('p', 'A', 'RP', 'co.Sigma_2P') => ('p', 'R', 'RP', 'co.Sigma_2P')
('p', 'A', 'RP', 'co.Sigma_2P') => ('p', 'AA', 'RP', 'co.Sigma_2P')
('p', 'AA', 'RP', 'co.Sigma_2P') => ('p', 'T', 'RP', 'co.Sigma_2P')
('p', 'AA', 'RP', 'co.Sigma_2P') => ('p', 'EA', 'RP', 'co.Sigma_2P')
('p', 'AA', 'RP', 'cocap.Sigma_2P') => ('p', 'T', 'RP', 'cocap.Sigma_2P')
('p', 'AA', 'RP', 'cocap.Sigma_2P') => ('p', 'EA', 'RP', 'cocap.Sigma_2P')
('p', 'AA', 'co.RP', 'cocap.Sigma_2P') => ('p', 'T', 'co.RP', 'cocap.Sigma_2P')
('p', 'AA', 'co.RP', 'cocap.Sigma_2P') => ('p', 'EA', 'co.RP', 'cocap.Sigma_2P')
('p', 'AA', 'co.RP', 'Sigma_2P') => ('p', 'T', 'co.RP', 'Sigma_2P')
('p', 'AA', 'co.RP', 'Sigma_2P') => ('p', 'EA', 'co.RP', 'Sigma_2P')
('-d', 'A', 'Delta_2P', 'co.Sigma_2P') => ('-d', 'R', 'Delta_2P', 'co.Sigma_2P')
('-d', 'A', 'Delta_2P', 'co.Sigma_2P') => ('-d', 'AA', 'Delta_2P', 'co.Sigma_2P')
('-d', 'A', 'Delta_2P', 'cocap.Sigma_2P') => ('-d', 'R', 'Delta_2P', 'cocap.Sigma_2P')
('-d', 'A', 'Delta_2P', 'cocap.Sigma_2P') => ('-d', 'AA', 'Delta_2P', 'cocap.Sigma_2P')
('-d', 'A', 'NP', 'cocap.Sigma_2P') => ('-d', 'R', 'NP', 'cocap.Sigma_2P')
('-d', 'A', 'NP', 'cocap.Sigma_2P') => ('-d', 'AA', 'NP', 'cocap.Sigma_2P')
('-d', 'A', 'co.NP', 'cocap.Sigma_2P') => ('-d', 'R', 'co.NP', 'cocap.Sigma_2P')
('-d', 'A', 'co.NP', 'cocap.Sigma_2P') => ('-d', 'AA', 'co.NP', 'cocap.Sigma_2P')
('-d', 'A', 'cocap.NP', 'cocap.Sigma_2P') => ('-d', 'R', 'cocap.NP', 'cocap.Sigma_2P')
('-d', 'A', 'cocap.NP', 'cocap.Sigma_2P') => ('-d', 'AA', 'cocap.NP', 'cocap.Sigma_2P')
('-d', 'A', 'cocap.NP', 'co.Sigma_2P') => ('-d', 'R', 'cocap.NP', 'co.Sigma_2P')
('-d', 'A', 'cocap.NP', 'co.Sigma_2P') => ('-d', 'AA', 'cocap.NP', 'co.Sigma_2P')
('-d', 'A', 'cocap.NP', 'Sigma_2P') => ('-d', 'R', 'cocap.NP', 'Sigma_2P')
('-d', 'A', 'cocap.NP', 'Sigma_2P') => ('-d', 'AA', 'cocap.NP', 'Sigma_2P')
('-d', 'AA', 'cocap.NP', 'Sigma_2P') => ('-d', 'T', 'cocap.NP', 'Sigma_2P')
('-d', 'AA', 'cocap.NP', 'Sigma_2P') => ('-d', 'EA', 'cocap.NP', 'Sigma_2P')
('-d', 'AA', 'cocap.NP', 'co.Sigma_2P') => ('-d', 'T', 'cocap.NP', 'co.Sigma_2P')
('-d', 'AA', 'cocap.NP', 'co.Sigma_2P') => ('-d', 'EA', 'cocap.NP', 'co.Sigma_2P')
('-d', 'AA', 'cocap.NP', 'cocap.Sigma_2P') => ('-d', 'T', 'cocap.NP', 'cocap.Sigma_2P')
('-d', 'AA', 'cocap.NP', 'cocap.Sigma_2P') => ('-d', 'EA', 'cocap.NP', 'cocap.Sigma_2P')
('-d', 'A', 'co.NP', 'co.Sigma_2P') => ('-d', 'R', 'co.NP', 'co.Sigma_2P')
('-d', 'A', 'co.NP', 'co.Sigma_2P') => ('-d', 'AA', 'co.NP', 'co.Sigma_2P')
('-d', 'A', 'NP', 'Sigma_2P') => ('-d', 'R', 'NP', 'Sigma_2P')
('-d', 'A', 'NP', 'Sigma_2P') => ('-d', 'AA', 'NP', 'Sigma_2P')
('-d', 'AA', 'NP', 'Sigma_2P') => ('-d', 'T', 'NP', 'Sigma_2P')
('-d', 'AA', 'NP', 'Sigma_2P') => ('-d', 'EA', 'NP', 'Sigma_2P')
('-d', 'AA', 'co.NP', 'co.Sigma_2P') => ('-d', 'T', 'co.NP', 'co.Sigma_2P')
('-d', 'AA', 'co.NP', 'co.Sigma_2P') => ('-d', 'EA', 'co.NP', 'co.Sigma_2P')
('-d', 'A', 'co.NP', 'Sigma_2P') => ('-d', 'R', 'co.NP', 'Sigma_2P')
('-d', 'A', 'co.NP', 'Sigma_2P') => ('-d', 'AA', 'co.NP', 'Sigma_2P')
('-d', 'A', 'NP', 'co.Sigma_2P') => ('-d', 'R', 'NP', 'co.Sigma_2P')
('-d', 'A', 'NP', 'co.Sigma_2P') => ('-d', 'AA', 'NP', 'co.Sigma_2P')
('-d', 'AA', 'NP', 'co.Sigma_2P') => ('-d', 'T', 'NP', 'co.Sigma_2P')
('-d', 'AA', 'NP', 'co.Sigma_2P') => ('-d', 'EA', 'NP', 'co.Sigma_2P')
('-d', 'AA', 'co.NP', 'Sigma_2P') => ('-d', 'T', 'co.NP', 'Sigma_2P')
('-d', 'AA', 'co.NP', 'Sigma_2P') => ('-d', 'EA', 'co.NP', 'Sigma_2P')
('-d', 'AA', 'co.NP', 'cocap.Sigma_2P') => ('-d', 'T', 'co.NP', 'cocap.Sigma_2P')
('-d', 'AA', 'co.NP', 'cocap.Sigma_2P') => ('-d', 'EA', 'co.NP', 'cocap.Sigma_2P')
('-d', 'AA', 'NP', 'cocap.Sigma_2P') => ('-d', 'T', 'NP', 'cocap.Sigma_2P')
('-d', 'AA', 'NP', 'cocap.Sigma_2P') => ('-d', 'EA', 'NP', 'cocap.Sigma_2P')
('-d', 'A', 'Delta_2P', 'Sigma_2P') => ('-d', 'R', 'Delta_2P', 'Sigma_2P')
('-d', 'A', 'Delta_2P', 'Sigma_2P') => ('-d', 'AA', 'Delta_2P', 'Sigma_2P')
('-d', 'AA', 'Delta_2P', 'Sigma_2P') => ('-d', 'T', 'Delta_2P', 'Sigma_2P')
('-d', 'AA', 'Delta_2P', 'Sigma_2P') => ('-d', 'EA', 'Delta_2P', 'Sigma_2P')
('-d', 'AA', 'Delta_2P', 'co.Sigma_2P') => ('-d', 'T', 'Delta_2P', 'co.Sigma_2P')
('-d', 'AA', 'Delta_2P', 'co.Sigma_2P') => ('-d', 'EA', 'Delta_2P', 'co.Sigma_2P')
('-d', 'AA', 'Delta_2P', 'cocap.Sigma_2P') => ('-d', 'T', 'Delta_2P', 'cocap.Sigma_2P')
('-d', 'AA', 'Delta_2P', 'cocap.Sigma_2P') => ('-d', 'EA', 'Delta_2P', 'cocap.Sigma_2P')
('p', 'A', 'NP', 'cocap.Sigma_2P') => ('p', 'R', 'NP', 'cocap.Sigma_2P')
('p', 'A', 'NP', 'cocap.Sigma_2P') => ('p', 'AA', 'NP', 'cocap.Sigma_2P')
('p', 'A', 'co.NP', 'cocap.Sigma_2P') => ('p', 'R', 'co.NP', 'cocap.Sigma_2P')
('p', 'A', 'co.NP', 'cocap.Sigma_2P') => ('p', 'AA', 'co.NP', 'cocap.Sigma_2P')
('p', 'A', 'cocap.NP', 'cocap.Sigma_2P') => ('p', 'R', 'cocap.NP', 'cocap.Sigma_2P')
('p', 'A', 'cocap.NP', 'cocap.Sigma_2P') => ('p', 'AA', 'cocap.NP', 'cocap.Sigma_2P')
('p', 'A', 'cocap.NP', 'co.Sigma_2P') => ('p', 'R', 'cocap.NP', 'co.Sigma_2P')
('p', 'A', 'cocap.NP', 'co.Sigma_2P') => ('p', 'AA', 'cocap.NP', 'co.Sigma_2P')
('p', 'A', 'cocap.NP', 'Sigma_2P') => ('p', 'R', 'cocap.NP', 'Sigma_2P')
('p', 'A', 'cocap.NP', 'Sigma_2P') => ('p', 'AA', 'cocap.NP', 'Sigma_2P')
('p', 'AA', 'cocap.NP', 'Sigma_2P') => ('p', 'T', 'cocap.NP', 'Sigma_2P')
('p', 'AA', 'cocap.NP', 'Sigma_2P') => ('p', 'EA', 'cocap.NP', 'Sigma_2P')
('p', 'AA', 'cocap.NP', 'co.Sigma_2P') => ('p', 'T', 'cocap.NP', 'co.Sigma_2P')
('p', 'AA', 'cocap.NP', 'co.Sigma_2P') => ('p', 'EA', 'cocap.NP', 'co.Sigma_2P')
('p', 'AA', 'cocap.NP', 'cocap.Sigma_2P') => ('p', 'T', 'cocap.NP', 'cocap.Sigma_2P')
('p', 'AA', 'cocap.NP', 'cocap.Sigma_2P') => ('p', 'EA', 'cocap.NP', 'cocap.Sigma_2P')
('p', 'A', 'co.NP', 'co.Sigma_2P') => ('p', 'R', 'co.NP', 'co.Sigma_2P')
('p', 'A', 'co.NP', 'co.Sigma_2P') => ('p', 'AA', 'co.NP', 'co.Sigma_2P')
('p', 'A', 'NP', 'Sigma_2P') => ('p', 'R', 'NP', 'Sigma_2P')
('p', 'A', 'NP', 'Sigma_2P') => ('p', 'AA', 'NP', 'Sigma_2P')
('p', 'AA', 'NP', 'Sigma_2P') => ('p', 'T', 'NP', 'Sigma_2P')
('p', 'AA', 'NP', 'Sigma_2P') => ('p', 'EA', 'NP', 'Sigma_2P')
('p', 'AA', 'co.NP', 'co.Sigma_2P') => ('p', 'T', 'co.NP', 'co.Sigma_2P')
('p', 'AA', 'co.NP', 'co.Sigma_2P') => ('p', 'EA', 'co.NP', 'co.Sigma_2P')
('p', 'A', 'co.NP', 'Sigma_2P') => ('p', 'R', 'co.NP', 'Sigma_2P')
('p', 'A', 'co.NP', 'Sigma_2P') => ('p', 'AA', 'co.NP', 'Sigma_2P')
('p', 'A', 'NP', 'co.Sigma_2P') => ('p', 'R', 'NP', 'co.Sigma_2P')
('p', 'A', 'NP', 'co.Sigma_2P') => ('p', 'AA', 'NP', 'co.Sigma_2P')
('p', 'AA', 'NP', 'co.Sigma_2P') => ('p', 'T', 'NP', 'co.Sigma_2P')
('p', 'AA', 'NP', 'co.Sigma_2P') => ('p', 'EA', 'NP', 'co.Sigma_2P')
('p', 'AA', 'NP', 'cocap.Sigma_2P') => ('p', 'T', 'NP', 'cocap.Sigma_2P')
('p', 'AA', 'NP', 'cocap.Sigma_2P') => ('p', 'EA', 'NP', 'cocap.Sigma_2P')
('p', 'AA', 'co.NP', 'cocap.Sigma_2P') => ('p', 'T', 'co.NP', 'cocap.Sigma_2P')
('p', 'AA', 'co.NP', 'cocap.Sigma_2P') => ('p', 'EA', 'co.NP', 'cocap.Sigma_2P')
('p', 'AA', 'co.NP', 'Sigma_2P') => ('p', 'T', 'co.NP', 'Sigma_2P')
('p', 'AA', 'co.NP', 'Sigma_2P') => ('p', 'EA', 'co.NP', 'Sigma_2P')
('p', 'AA', 'Delta_2P', 'cocap.Sigma_2P') => ('p', 'T', 'Delta_2P', 'cocap.Sigma_2P')
('p', 'AA', 'Delta_2P', 'cocap.Sigma_2P') => ('p', 'EA', 'Delta_2P', 'cocap.Sigma_2P')
('p', 'AA', 'Delta_2P', 'co.Sigma_2P') => ('p', 'T', 'Delta_2P', 'co.Sigma_2P')
('p', 'AA', 'Delta_2P', 'co.Sigma_2P') => ('p', 'EA', 'Delta_2P', 'co.Sigma_2P')
('p', 'AA', 'Delta_2P', 'Sigma_2P') => ('p', 'T', 'Delta_2P', 'Sigma_2P')
('p', 'AA', 'Delta_2P', 'Sigma_2P') => ('p', 'EA', 'Delta_2P', 'Sigma_2P')
('p', 'A', 'QRG(2)', 'PSPACE') => ('-d', 'A', 'QRG(2)', 'PSPACE')
('p', 'A', 'QRG(2)', 'PSPACE') => ('p', 'R', 'QRG(2)', 'PSPACE')
('p', 'A', 'QRG(2)', 'PSPACE') => ('p', 'AA', 'QRG(2)', 'PSPACE')
('-d', 'A', 'QRG(2)', 'PSPACE/poly') => ('-d', 'R', 'QRG(2)', 'PSPACE/poly')
('-d', 'A', 'QRG(2)', 'PSPACE/poly') => ('-d', 'AA', 'QRG(2)', 'PSPACE/poly')
('-d', 'AA', 'QRG(2)', 'PSPACE/poly') => ('-d', 'T', 'QRG(2)', 'PSPACE/poly')
('-d', 'AA', 'QRG(2)', 'PSPACE/poly') => ('-d', 'EA', 'QRG(2)', 'PSPACE/poly')
('p', 'A', 'QRG(2)', 'PSPACE/poly') => ('p', 'R', 'QRG(2)', 'PSPACE/poly')
('p', 'A', 'QRG(2)', 'PSPACE/poly') => ('p', 'AA', 'QRG(2)', 'PSPACE/poly')
('p', 'AA', 'QRG(2)', 'PSPACE/poly') => ('p', 'T', 'QRG(2)', 'PSPACE/poly')
('p', 'AA', 'QRG(2)', 'PSPACE/poly') => ('p', 'EA', 'QRG(2)', 'PSPACE/poly')
('p', 'AA', 'QRG(2)', 'PSPACE') => ('-d', 'AA', 'QRG(2)', 'PSPACE')
('p', 'AA', 'QRG(2)', 'PSPACE') => ('p', 'T', 'QRG(2)', 'PSPACE')
('p', 'AA', 'QRG(2)', 'PSPACE') => ('p', 'EA', 'QRG(2)', 'PSPACE')
('p', 'EA', 'QRG(2)', 'PSPACE') => ('-d', 'EA', 'QRG(2)', 'PSPACE')
('p', 'EA', 'QRG(2)', 'PSPACE') => ('p', 'E', 'QRG(2)', 'PSPACE')
('p', 'E', 'QRG(2)', 'PSPACE') => ('-d', 'E', 'QRG(2)', 'PSPACE')
('p', 'T', 'QRG(2)', 'PSPACE') => ('-d', 'T', 'QRG(2)', 'PSPACE')
('p', 'R', 'QRG(2)', 'PSPACE') => ('-d', 'R', 'QRG(2)', 'PSPACE')
('p', 'A', 'QAM', 'QIP(2)') => ('-d', 'A', 'QAM', 'QIP(2)')
('p', 'A', 'QAM', 'QIP(2)') => ('p', 'R', 'QAM', 'QIP(2)')
('p', 'A', 'QAM', 'QIP(2)') => ('p', 'AA', 'QAM', 'QIP(2)')
('p', 'A', 'co.QAM', 'co.QIP(2)') => ('-d', 'A', 'co.QAM', 'co.QIP(2)')
('p', 'A', 'co.QAM', 'co.QIP(2)') => ('p', 'R', 'co.QAM', 'co.QIP(2)')
('p', 'A', 'co.QAM', 'co.QIP(2)') => ('p', 'AA', 'co.QAM', 'co.QIP(2)')
('p', 'A', 'cocap.QAM', 'cocap.QIP(2)') => ('-d', 'A', 'cocap.QAM', 'cocap.QIP(2)')
('p', 'A', 'cocap.QAM', 'cocap.QIP(2)') => ('p', 'R', 'cocap.QAM', 'cocap.QIP(2)')
('p', 'A', 'cocap.QAM', 'cocap.QIP(2)') => ('p', 'AA', 'cocap.QAM', 'cocap.QIP(2)')
('-d', 'A', 'cocap.QAM', 'QIP(2)') => ('-d', 'R', 'cocap.QAM', 'QIP(2)')
('-d', 'A', 'cocap.QAM', 'QIP(2)') => ('-d', 'AA', 'cocap.QAM', 'QIP(2)')
('-d', 'A', 'cocap.QAM', 'co.QIP(2)') => ('-d', 'R', 'cocap.QAM', 'co.QIP(2)')
('-d', 'A', 'cocap.QAM', 'co.QIP(2)') => ('-d', 'AA', 'cocap.QAM', 'co.QIP(2)')
('-d', 'A', 'cocap.QAM', 'cocap.QIP(2)') => ('-d', 'R', 'cocap.QAM', 'cocap.QIP(2)')
('-d', 'A', 'cocap.QAM', 'cocap.QIP(2)') => ('-d', 'AA', 'cocap.QAM', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.QAM', 'cocap.QIP(2)') => ('-d', 'T', 'cocap.QAM', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.QAM', 'cocap.QIP(2)') => ('-d', 'EA', 'cocap.QAM', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.QAM', 'QIP(2)') => ('-d', 'T', 'cocap.QAM', 'QIP(2)')
('-d', 'AA', 'cocap.QAM', 'QIP(2)') => ('-d', 'EA', 'cocap.QAM', 'QIP(2)')
('-d', 'AA', 'cocap.QAM', 'co.QIP(2)') => ('-d', 'T', 'cocap.QAM', 'co.QIP(2)')
('-d', 'AA', 'cocap.QAM', 'co.QIP(2)') => ('-d', 'EA', 'cocap.QAM', 'co.QIP(2)')
('p', 'A', 'cocap.QAM', 'QIP(2)') => ('p', 'R', 'cocap.QAM', 'QIP(2)')
('p', 'A', 'cocap.QAM', 'QIP(2)') => ('p', 'AA', 'cocap.QAM', 'QIP(2)')
('p', 'A', 'cocap.QAM', 'co.QIP(2)') => ('p', 'R', 'cocap.QAM', 'co.QIP(2)')
('p', 'A', 'cocap.QAM', 'co.QIP(2)') => ('p', 'AA', 'cocap.QAM', 'co.QIP(2)')
('p', 'AA', 'cocap.QAM', 'co.QIP(2)') => ('p', 'T', 'cocap.QAM', 'co.QIP(2)')
('p', 'AA', 'cocap.QAM', 'co.QIP(2)') => ('p', 'EA', 'cocap.QAM', 'co.QIP(2)')
('p', 'AA', 'cocap.QAM', 'QIP(2)') => ('p', 'T', 'cocap.QAM', 'QIP(2)')
('p', 'AA', 'cocap.QAM', 'QIP(2)') => ('p', 'EA', 'cocap.QAM', 'QIP(2)')
('p', 'AA', 'cocap.QAM', 'cocap.QIP(2)') => ('p', 'T', 'cocap.QAM', 'cocap.QIP(2)')
('p', 'AA', 'cocap.QAM', 'cocap.QIP(2)') => ('p', 'EA', 'cocap.QAM', 'cocap.QIP(2)')
('p', 'AA', 'co.QAM', 'co.QIP(2)') => ('-d', 'AA', 'co.QAM', 'co.QIP(2)')
('p', 'AA', 'co.QAM', 'co.QIP(2)') => ('p', 'T', 'co.QAM', 'co.QIP(2)')
('p', 'AA', 'co.QAM', 'co.QIP(2)') => ('p', 'EA', 'co.QAM', 'co.QIP(2)')
('p', 'AA', 'QAM', 'QIP(2)') => ('-d', 'AA', 'QAM', 'QIP(2)')
('p', 'AA', 'QAM', 'QIP(2)') => ('p', 'T', 'QAM', 'QIP(2)')
('p', 'AA', 'QAM', 'QIP(2)') => ('p', 'EA', 'QAM', 'QIP(2)')
('p', 'EA', 'QAM', 'QIP(2)') => ('-d', 'EA', 'QAM', 'QIP(2)')
('p', 'EA', 'QAM', 'QIP(2)') => ('p', 'E', 'QAM', 'QIP(2)')
('p', 'EA', 'co.QAM', 'co.QIP(2)') => ('-d', 'EA', 'co.QAM', 'co.QIP(2)')
('p', 'EA', 'co.QAM', 'co.QIP(2)') => ('p', 'E', 'co.QAM', 'co.QIP(2)')
('p', 'E', 'co.QAM', 'co.QIP(2)') => ('-d', 'E', 'co.QAM', 'co.QIP(2)')
('p', 'E', 'QAM', 'QIP(2)') => ('-d', 'E', 'QAM', 'QIP(2)')
('p', 'T', 'QAM', 'QIP(2)') => ('-d', 'T', 'QAM', 'QIP(2)')
('p', 'T', 'co.QAM', 'co.QIP(2)') => ('-d', 'T', 'co.QAM', 'co.QIP(2)')
('p', 'R', 'co.QAM', 'co.QIP(2)') => ('-d', 'R', 'co.QAM', 'co.QIP(2)')
('p', 'R', 'QAM', 'QIP(2)') => ('-d', 'R', 'QAM', 'QIP(2)')
('d', 'R', 'PSPACE', 'IP') => ('-p', 'R', 'PSPACE', 'IP')
('d', 'R', 'PSPACE', 'IP') => ('d', 'A', 'PSPACE', 'IP')
('d', 'R', 'PSPACE', 'co.IP') => ('-p', 'R', 'PSPACE', 'co.IP')
('d', 'R', 'PSPACE', 'co.IP') => ('d', 'A', 'PSPACE', 'co.IP')
('-p', 'R', 'PSPACE/poly', 'co.IP') => ('-p', 'A', 'PSPACE/poly', 'co.IP')
('-p', 'R', 'PSPACE/poly', 'IP') => ('-p', 'A', 'PSPACE/poly', 'IP')
('-p', 'R', 'PSPACE/poly', 'cocap.IP') => ('-p', 'A', 'PSPACE/poly', 'cocap.IP')
('d', 'R', 'PSPACE/poly', 'co.IP') => ('d', 'A', 'PSPACE/poly', 'co.IP')
('d', 'R', 'PSPACE/poly', 'IP') => ('d', 'A', 'PSPACE/poly', 'IP')
('d', 'R', 'PSPACE/poly', 'cocap.IP') => ('d', 'A', 'PSPACE/poly', 'cocap.IP')
('-p', 'R', 'PSPACE', 'cocap.IP') => ('-p', 'A', 'PSPACE', 'cocap.IP')
('-p', 'R', 'PSPACE', 'IP') => ('-p', 'A', 'PSPACE', 'IP')
('-p', 'R', 'PSPACE', 'co.IP') => ('-p', 'A', 'PSPACE', 'co.IP')
('d', 'R', 'PSPACE', 'cocap.IP') => ('d', 'A', 'PSPACE', 'cocap.IP')
('p', 'A', 'NEXP_plo', 'AH_plo') => ('-d', 'A', 'NEXP_plo', 'AH_plo')
('p', 'A', 'NEXP_plo', 'AH_plo') => ('p', 'R', 'NEXP_plo', 'AH_plo')
('p', 'A', 'NEXP_plo', 'AH_plo') => ('p', 'AA', 'NEXP_plo', 'AH_plo')
('p', 'A', 'co.NEXP_plo', 'co.AH_plo') => ('-d', 'A', 'co.NEXP_plo', 'co.AH_plo')
('p', 'A', 'co.NEXP_plo', 'co.AH_plo') => ('p', 'R', 'co.NEXP_plo', 'co.AH_plo')
('p', 'A', 'co.NEXP_plo', 'co.AH_plo') => ('p', 'AA', 'co.NEXP_plo', 'co.AH_plo')
('p', 'A', 'cocap.NEXP_plo', 'cocap.AH_plo') => ('-d', 'A', 'cocap.NEXP_plo', 'cocap.AH_plo')
('p', 'A', 'cocap.NEXP_plo', 'cocap.AH_plo') => ('p', 'R', 'cocap.NEXP_plo', 'cocap.AH_plo')
('p', 'A', 'cocap.NEXP_plo', 'cocap.AH_plo') => ('p', 'AA', 'cocap.NEXP_plo', 'cocap.AH_plo')
('-d', 'A', 'cocap.NEXP_plo', 'co.AH_plo') => ('-d', 'R', 'cocap.NEXP_plo', 'co.AH_plo')
('-d', 'A', 'cocap.NEXP_plo', 'co.AH_plo') => ('-d', 'AA', 'cocap.NEXP_plo', 'co.AH_plo')
('-d', 'A', 'cocap.NEXP_plo', 'AH_plo') => ('-d', 'R', 'cocap.NEXP_plo', 'AH_plo')
('-d', 'A', 'cocap.NEXP_plo', 'AH_plo') => ('-d', 'AA', 'cocap.NEXP_plo', 'AH_plo')
('-d', 'A', 'cocap.NEXP_plo', 'cocap.AH_plo') => ('-d', 'R', 'cocap.NEXP_plo', 'cocap.AH_plo')
('-d', 'A', 'cocap.NEXP_plo', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.NEXP_plo', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NEXP_plo', 'cocap.AH_plo') => ('-d', 'T', 'cocap.NEXP_plo', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NEXP_plo', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.NEXP_plo', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NEXP_plo', 'co.AH_plo') => ('-d', 'T', 'cocap.NEXP_plo', 'co.AH_plo')
('-d', 'AA', 'cocap.NEXP_plo', 'co.AH_plo') => ('-d', 'EA', 'cocap.NEXP_plo', 'co.AH_plo')
('-d', 'AA', 'cocap.NEXP_plo', 'AH_plo') => ('-d', 'T', 'cocap.NEXP_plo', 'AH_plo')
('-d', 'AA', 'cocap.NEXP_plo', 'AH_plo') => ('-d', 'EA', 'cocap.NEXP_plo', 'AH_plo')
('p', 'A', 'cocap.NEXP_plo', 'co.AH_plo') => ('p', 'R', 'cocap.NEXP_plo', 'co.AH_plo')
('p', 'A', 'cocap.NEXP_plo', 'co.AH_plo') => ('p', 'AA', 'cocap.NEXP_plo', 'co.AH_plo')
('p', 'A', 'cocap.NEXP_plo', 'AH_plo') => ('p', 'R', 'cocap.NEXP_plo', 'AH_plo')
('p', 'A', 'cocap.NEXP_plo', 'AH_plo') => ('p', 'AA', 'cocap.NEXP_plo', 'AH_plo')
('p', 'AA', 'cocap.NEXP_plo', 'AH_plo') => ('p', 'T', 'cocap.NEXP_plo', 'AH_plo')
('p', 'AA', 'cocap.NEXP_plo', 'AH_plo') => ('p', 'EA', 'cocap.NEXP_plo', 'AH_plo')
('p', 'AA', 'cocap.NEXP_plo', 'co.AH_plo') => ('p', 'T', 'cocap.NEXP_plo', 'co.AH_plo')
('p', 'AA', 'cocap.NEXP_plo', 'co.AH_plo') => ('p', 'EA', 'cocap.NEXP_plo', 'co.AH_plo')
('p', 'AA', 'cocap.NEXP_plo', 'cocap.AH_plo') => ('p', 'T', 'cocap.NEXP_plo', 'cocap.AH_plo')
('p', 'AA', 'cocap.NEXP_plo', 'cocap.AH_plo') => ('p', 'EA', 'cocap.NEXP_plo', 'cocap.AH_plo')
('p', 'AA', 'co.NEXP_plo', 'co.AH_plo') => ('-d', 'AA', 'co.NEXP_plo', 'co.AH_plo')
('p', 'AA', 'co.NEXP_plo', 'co.AH_plo') => ('p', 'T', 'co.NEXP_plo', 'co.AH_plo')
('p', 'AA', 'co.NEXP_plo', 'co.AH_plo') => ('p', 'EA', 'co.NEXP_plo', 'co.AH_plo')
('p', 'AA', 'NEXP_plo', 'AH_plo') => ('-d', 'AA', 'NEXP_plo', 'AH_plo')
('p', 'AA', 'NEXP_plo', 'AH_plo') => ('p', 'T', 'NEXP_plo', 'AH_plo')
('p', 'AA', 'NEXP_plo', 'AH_plo') => ('p', 'EA', 'NEXP_plo', 'AH_plo')
('p', 'EA', 'NEXP_plo', 'AH_plo') => ('-d', 'EA', 'NEXP_plo', 'AH_plo')
('p', 'EA', 'NEXP_plo', 'AH_plo') => ('p', 'E', 'NEXP_plo', 'AH_plo')
('p', 'EA', 'co.NEXP_plo', 'co.AH_plo') => ('-d', 'EA', 'co.NEXP_plo', 'co.AH_plo')
('p', 'EA', 'co.NEXP_plo', 'co.AH_plo') => ('p', 'E', 'co.NEXP_plo', 'co.AH_plo')
('p', 'E', 'co.NEXP_plo', 'co.AH_plo') => ('-d', 'E', 'co.NEXP_plo', 'co.AH_plo')
('p', 'E', 'NEXP_plo', 'AH_plo') => ('-d', 'E', 'NEXP_plo', 'AH_plo')
('p', 'T', 'NEXP_plo', 'AH_plo') => ('-d', 'T', 'NEXP_plo', 'AH_plo')
('p', 'T', 'co.NEXP_plo', 'co.AH_plo') => ('-d', 'T', 'co.NEXP_plo', 'co.AH_plo')
('p', 'R', 'co.NEXP_plo', 'co.AH_plo') => ('-d', 'R', 'co.NEXP_plo', 'co.AH_plo')
('p', 'R', 'NEXP_plo', 'AH_plo') => ('-d', 'R', 'NEXP_plo', 'AH_plo')
('d', 'A', 'BQP', 'SZK') => ('-p', 'A', 'BQP', 'SZK')
('p', 'A', 'QAM', 'CH') => ('-d', 'A', 'QAM', 'CH')
('p', 'A', 'QAM', 'CH') => ('p', 'R', 'QAM', 'CH')
('p', 'A', 'QAM', 'CH') => ('p', 'AA', 'QAM', 'CH')
('p', 'A', 'co.QAM', 'CH') => ('-d', 'A', 'co.QAM', 'CH')
('p', 'A', 'co.QAM', 'CH') => ('p', 'R', 'co.QAM', 'CH')
('p', 'A', 'co.QAM', 'CH') => ('p', 'AA', 'co.QAM', 'CH')
('p', 'A', 'cocap.QAM', 'CH') => ('-d', 'A', 'cocap.QAM', 'CH')
('p', 'A', 'cocap.QAM', 'CH') => ('p', 'R', 'cocap.QAM', 'CH')
('p', 'A', 'cocap.QAM', 'CH') => ('p', 'AA', 'cocap.QAM', 'CH')
('p', 'AA', 'cocap.QAM', 'CH') => ('-d', 'AA', 'cocap.QAM', 'CH')
('p', 'AA', 'cocap.QAM', 'CH') => ('p', 'T', 'cocap.QAM', 'CH')
('p', 'AA', 'cocap.QAM', 'CH') => ('p', 'EA', 'cocap.QAM', 'CH')
('p', 'EA', 'cocap.QAM', 'CH') => ('-d', 'EA', 'cocap.QAM', 'CH')
('p', 'EA', 'cocap.QAM', 'CH') => ('p', 'E', 'cocap.QAM', 'CH')
('p', 'E', 'cocap.QAM', 'CH') => ('-d', 'E', 'cocap.QAM', 'CH')
('p', 'T', 'cocap.QAM', 'CH') => ('-d', 'T', 'cocap.QAM', 'CH')
('p', 'R', 'cocap.QAM', 'CH') => ('-d', 'R', 'cocap.QAM', 'CH')
('p', 'AA', 'co.QAM', 'CH') => ('-d', 'AA', 'co.QAM', 'CH')
('p', 'AA', 'co.QAM', 'CH') => ('p', 'T', 'co.QAM', 'CH')
('p', 'AA', 'co.QAM', 'CH') => ('p', 'EA', 'co.QAM', 'CH')
('p', 'AA', 'QAM', 'CH') => ('-d', 'AA', 'QAM', 'CH')
('p', 'AA', 'QAM', 'CH') => ('p', 'T', 'QAM', 'CH')
('p', 'AA', 'QAM', 'CH') => ('p', 'EA', 'QAM', 'CH')
('p', 'EA', 'QAM', 'CH') => ('-d', 'EA', 'QAM', 'CH')
('p', 'EA', 'QAM', 'CH') => ('p', 'E', 'QAM', 'CH')
('p', 'EA', 'co.QAM', 'CH') => ('-d', 'EA', 'co.QAM', 'CH')
('p', 'EA', 'co.QAM', 'CH') => ('p', 'E', 'co.QAM', 'CH')
('p', 'E', 'co.QAM', 'CH') => ('-d', 'E', 'co.QAM', 'CH')
('p', 'E', 'QAM', 'CH') => ('-d', 'E', 'QAM', 'CH')
('p', 'T', 'QAM', 'CH') => ('-d', 'T', 'QAM', 'CH')
('p', 'T', 'co.QAM', 'CH') => ('-d', 'T', 'co.QAM', 'CH')
('p', 'R', 'co.QAM', 'CH') => ('-d', 'R', 'co.QAM', 'CH')
('p', 'R', 'QAM', 'CH') => ('-d', 'R', 'QAM', 'CH')
('p', 'A', 'IP', 'QIP') => ('-d', 'A', 'IP', 'QIP')
('p', 'A', 'IP', 'QIP') => ('p', 'R', 'IP', 'QIP')
('p', 'A', 'IP', 'QIP') => ('p', 'AA', 'IP', 'QIP')
('p', 'A', 'co.IP', 'co.QIP') => ('-d', 'A', 'co.IP', 'co.QIP')
('p', 'A', 'co.IP', 'co.QIP') => ('p', 'R', 'co.IP', 'co.QIP')
('p', 'A', 'co.IP', 'co.QIP') => ('p', 'AA', 'co.IP', 'co.QIP')
('p', 'A', 'cocap.IP', 'cocap.QIP') => ('-d', 'A', 'cocap.IP', 'cocap.QIP')
('p', 'A', 'cocap.IP', 'cocap.QIP') => ('p', 'R', 'cocap.IP', 'cocap.QIP')
('p', 'A', 'cocap.IP', 'cocap.QIP') => ('p', 'AA', 'cocap.IP', 'cocap.QIP')
('-d', 'A', 'cocap.IP', 'co.NEXP') => ('-d', 'R', 'cocap.IP', 'co.NEXP')
('-d', 'A', 'cocap.IP', 'co.NEXP') => ('-d', 'AA', 'cocap.IP', 'co.NEXP')
('-d', 'A', 'cocap.IP', 'NEXP') => ('-d', 'R', 'cocap.IP', 'NEXP')
('-d', 'A', 'cocap.IP', 'NEXP') => ('-d', 'AA', 'cocap.IP', 'NEXP')
('-d', 'A', 'cocap.IP', 'cocap.NEXP') => ('-d', 'R', 'cocap.IP', 'cocap.NEXP')
('-d', 'A', 'cocap.IP', 'cocap.NEXP') => ('-d', 'AA', 'cocap.IP', 'cocap.NEXP')
('-d', 'A', 'cocap.IP', 'NEXP/poly') => ('-d', 'R', 'cocap.IP', 'NEXP/poly')
('-d', 'A', 'cocap.IP', 'NEXP/poly') => ('-d', 'AA', 'cocap.IP', 'NEXP/poly')
('-d', 'AA', 'cocap.IP', 'NEXP/poly') => ('-d', 'T', 'cocap.IP', 'NEXP/poly')
('-d', 'AA', 'cocap.IP', 'NEXP/poly') => ('-d', 'EA', 'cocap.IP', 'NEXP/poly')
('-d', 'AA', 'cocap.IP', 'cocap.NEXP') => ('-d', 'T', 'cocap.IP', 'cocap.NEXP')
('-d', 'AA', 'cocap.IP', 'cocap.NEXP') => ('-d', 'EA', 'cocap.IP', 'cocap.NEXP')
('-d', 'AA', 'cocap.IP', 'co.NEXP') => ('-d', 'T', 'cocap.IP', 'co.NEXP')
('-d', 'AA', 'cocap.IP', 'co.NEXP') => ('-d', 'EA', 'cocap.IP', 'co.NEXP')
('-d', 'AA', 'cocap.IP', 'NEXP') => ('-d', 'T', 'cocap.IP', 'NEXP')
('-d', 'AA', 'cocap.IP', 'NEXP') => ('-d', 'EA', 'cocap.IP', 'NEXP')
('p', 'A', 'cocap.IP', 'co.NEXP') => ('p', 'R', 'cocap.IP', 'co.NEXP')
('p', 'A', 'cocap.IP', 'co.NEXP') => ('p', 'AA', 'cocap.IP', 'co.NEXP')
('p', 'A', 'cocap.IP', 'NEXP') => ('p', 'R', 'cocap.IP', 'NEXP')
('p', 'A', 'cocap.IP', 'NEXP') => ('p', 'AA', 'cocap.IP', 'NEXP')
('p', 'A', 'cocap.IP', 'cocap.NEXP') => ('p', 'R', 'cocap.IP', 'cocap.NEXP')
('p', 'A', 'cocap.IP', 'cocap.NEXP') => ('p', 'AA', 'cocap.IP', 'cocap.NEXP')
('p', 'A', 'cocap.IP', 'NEXP/poly') => ('p', 'R', 'cocap.IP', 'NEXP/poly')
('p', 'A', 'cocap.IP', 'NEXP/poly') => ('p', 'AA', 'cocap.IP', 'NEXP/poly')
('p', 'AA', 'cocap.IP', 'NEXP/poly') => ('p', 'T', 'cocap.IP', 'NEXP/poly')
('p', 'AA', 'cocap.IP', 'NEXP/poly') => ('p', 'EA', 'cocap.IP', 'NEXP/poly')
('p', 'AA', 'cocap.IP', 'cocap.NEXP') => ('p', 'T', 'cocap.IP', 'cocap.NEXP')
('p', 'AA', 'cocap.IP', 'cocap.NEXP') => ('p', 'EA', 'cocap.IP', 'cocap.NEXP')
('p', 'AA', 'cocap.IP', 'co.NEXP') => ('p', 'T', 'cocap.IP', 'co.NEXP')
('p', 'AA', 'cocap.IP', 'co.NEXP') => ('p', 'EA', 'cocap.IP', 'co.NEXP')
('p', 'AA', 'cocap.IP', 'NEXP') => ('p', 'T', 'cocap.IP', 'NEXP')
('p', 'AA', 'cocap.IP', 'NEXP') => ('p', 'EA', 'cocap.IP', 'NEXP')
('-d', 'A', 'cocap.IP', 'QIP') => ('-d', 'R', 'cocap.IP', 'QIP')
('-d', 'A', 'cocap.IP', 'QIP') => ('-d', 'AA', 'cocap.IP', 'QIP')
('-d', 'A', 'cocap.IP', 'co.QIP') => ('-d', 'R', 'cocap.IP', 'co.QIP')
('-d', 'A', 'cocap.IP', 'co.QIP') => ('-d', 'AA', 'cocap.IP', 'co.QIP')
('-d', 'A', 'cocap.IP', 'cocap.QIP') => ('-d', 'R', 'cocap.IP', 'cocap.QIP')
('-d', 'A', 'cocap.IP', 'cocap.QIP') => ('-d', 'AA', 'cocap.IP', 'cocap.QIP')
('-d', 'A', 'cocap.IP', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.IP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.IP', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.IP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.IP', 'QMIP_ne') => ('-d', 'R', 'cocap.IP', 'QMIP_ne')
('-d', 'A', 'cocap.IP', 'QMIP_ne') => ('-d', 'AA', 'cocap.IP', 'QMIP_ne')
('-d', 'A', 'cocap.IP', 'co.QMIP_ne') => ('-d', 'R', 'cocap.IP', 'co.QMIP_ne')
('-d', 'A', 'cocap.IP', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.IP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.IP', 'co.QMIP_ne') => ('-d', 'T', 'cocap.IP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.IP', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.IP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.IP', 'QMIP_ne') => ('-d', 'T', 'cocap.IP', 'QMIP_ne')
('-d', 'AA', 'cocap.IP', 'QMIP_ne') => ('-d', 'EA', 'cocap.IP', 'QMIP_ne')
('-d', 'AA', 'cocap.IP', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.IP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.IP', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.IP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.IP', 'cocap.QIP') => ('-d', 'T', 'cocap.IP', 'cocap.QIP')
('-d', 'AA', 'cocap.IP', 'cocap.QIP') => ('-d', 'EA', 'cocap.IP', 'cocap.QIP')
('-d', 'AA', 'cocap.IP', 'QIP') => ('-d', 'T', 'cocap.IP', 'QIP')
('-d', 'AA', 'cocap.IP', 'QIP') => ('-d', 'EA', 'cocap.IP', 'QIP')
('-d', 'AA', 'cocap.IP', 'co.QIP') => ('-d', 'T', 'cocap.IP', 'co.QIP')
('-d', 'AA', 'cocap.IP', 'co.QIP') => ('-d', 'EA', 'cocap.IP', 'co.QIP')
('p', 'A', 'cocap.IP', 'QIP') => ('p', 'R', 'cocap.IP', 'QIP')
('p', 'A', 'cocap.IP', 'QIP') => ('p', 'AA', 'cocap.IP', 'QIP')
('p', 'A', 'cocap.IP', 'co.QIP') => ('p', 'R', 'cocap.IP', 'co.QIP')
('p', 'A', 'cocap.IP', 'co.QIP') => ('p', 'AA', 'cocap.IP', 'co.QIP')
('p', 'A', 'cocap.IP', 'co.QMIP_ne') => ('p', 'R', 'cocap.IP', 'co.QMIP_ne')
('p', 'A', 'cocap.IP', 'co.QMIP_ne') => ('p', 'AA', 'cocap.IP', 'co.QMIP_ne')
('p', 'A', 'cocap.IP', 'QMIP_ne') => ('p', 'R', 'cocap.IP', 'QMIP_ne')
('p', 'A', 'cocap.IP', 'QMIP_ne') => ('p', 'AA', 'cocap.IP', 'QMIP_ne')
('p', 'A', 'cocap.IP', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.IP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.IP', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.IP', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.IP', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.IP', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.IP', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.IP', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.IP', 'QMIP_ne') => ('p', 'T', 'cocap.IP', 'QMIP_ne')
('p', 'AA', 'cocap.IP', 'QMIP_ne') => ('p', 'EA', 'cocap.IP', 'QMIP_ne')
('p', 'AA', 'cocap.IP', 'co.QMIP_ne') => ('p', 'T', 'cocap.IP', 'co.QMIP_ne')
('p', 'AA', 'cocap.IP', 'co.QMIP_ne') => ('p', 'EA', 'cocap.IP', 'co.QMIP_ne')
('p', 'AA', 'cocap.IP', 'co.QIP') => ('p', 'T', 'cocap.IP', 'co.QIP')
('p', 'AA', 'cocap.IP', 'co.QIP') => ('p', 'EA', 'cocap.IP', 'co.QIP')
('p', 'AA', 'cocap.IP', 'QIP') => ('p', 'T', 'cocap.IP', 'QIP')
('p', 'AA', 'cocap.IP', 'QIP') => ('p', 'EA', 'cocap.IP', 'QIP')
('p', 'AA', 'cocap.IP', 'cocap.QIP') => ('p', 'T', 'cocap.IP', 'cocap.QIP')
('p', 'AA', 'cocap.IP', 'cocap.QIP') => ('p', 'EA', 'cocap.IP', 'cocap.QIP')
('-d', 'A', 'co.IP', 'co.NEXP') => ('-d', 'R', 'co.IP', 'co.NEXP')
('-d', 'A', 'co.IP', 'co.NEXP') => ('-d', 'AA', 'co.IP', 'co.NEXP')
('-d', 'A', 'IP', 'NEXP') => ('-d', 'R', 'IP', 'NEXP')
('-d', 'A', 'IP', 'NEXP') => ('-d', 'AA', 'IP', 'NEXP')
('-d', 'A', 'IP', 'R') => ('-d', 'R', 'IP', 'R')
('-d', 'A', 'IP', 'R') => ('-d', 'AA', 'IP', 'R')
('-d', 'A', 'co.IP', 'R') => ('-d', 'R', 'co.IP', 'R')
('-d', 'A', 'co.IP', 'R') => ('-d', 'AA', 'co.IP', 'R')
('-d', 'A', 'co.IP', 'co.RE') => ('-d', 'R', 'co.IP', 'co.RE')
('-d', 'A', 'co.IP', 'co.RE') => ('-d', 'AA', 'co.IP', 'co.RE')
('-d', 'A', 'IP', 'RE') => ('-d', 'R', 'IP', 'RE')
('-d', 'A', 'IP', 'RE') => ('-d', 'AA', 'IP', 'RE')
('-d', 'AA', 'IP', 'RE') => ('-d', 'T', 'IP', 'RE')
('-d', 'AA', 'IP', 'RE') => ('-d', 'EA', 'IP', 'RE')
('-d', 'AA', 'IP', 'R') => ('-d', 'T', 'IP', 'R')
('-d', 'AA', 'IP', 'R') => ('-d', 'EA', 'IP', 'R')
('-d', 'AA', 'co.IP', 'R') => ('-d', 'T', 'co.IP', 'R')
('-d', 'AA', 'co.IP', 'R') => ('-d', 'EA', 'co.IP', 'R')
('-d', 'AA', 'co.IP', 'co.RE') => ('-d', 'T', 'co.IP', 'co.RE')
('-d', 'AA', 'co.IP', 'co.RE') => ('-d', 'EA', 'co.IP', 'co.RE')
('-d', 'A', 'IP', 'NEXP/poly') => ('-d', 'R', 'IP', 'NEXP/poly')
('-d', 'A', 'IP', 'NEXP/poly') => ('-d', 'AA', 'IP', 'NEXP/poly')
('-d', 'A', 'co.IP', 'NEXP/poly') => ('-d', 'R', 'co.IP', 'NEXP/poly')
('-d', 'A', 'co.IP', 'NEXP/poly') => ('-d', 'AA', 'co.IP', 'NEXP/poly')
('-d', 'AA', 'co.IP', 'NEXP/poly') => ('-d', 'T', 'co.IP', 'NEXP/poly')
('-d', 'AA', 'co.IP', 'NEXP/poly') => ('-d', 'EA', 'co.IP', 'NEXP/poly')
('-d', 'AA', 'IP', 'NEXP/poly') => ('-d', 'T', 'IP', 'NEXP/poly')
('-d', 'AA', 'IP', 'NEXP/poly') => ('-d', 'EA', 'IP', 'NEXP/poly')
('-d', 'AA', 'IP', 'NEXP') => ('-d', 'T', 'IP', 'NEXP')
('-d', 'AA', 'IP', 'NEXP') => ('-d', 'EA', 'IP', 'NEXP')
('-d', 'AA', 'co.IP', 'co.NEXP') => ('-d', 'T', 'co.IP', 'co.NEXP')
('-d', 'AA', 'co.IP', 'co.NEXP') => ('-d', 'EA', 'co.IP', 'co.NEXP')
('p', 'A', 'co.IP', 'co.NEXP') => ('p', 'R', 'co.IP', 'co.NEXP')
('p', 'A', 'co.IP', 'co.NEXP') => ('p', 'AA', 'co.IP', 'co.NEXP')
('p', 'A', 'IP', 'NEXP') => ('p', 'R', 'IP', 'NEXP')
('p', 'A', 'IP', 'NEXP') => ('p', 'AA', 'IP', 'NEXP')
('p', 'A', 'IP', 'R') => ('p', 'R', 'IP', 'R')
('p', 'A', 'IP', 'R') => ('p', 'AA', 'IP', 'R')
('p', 'A', 'co.IP', 'R') => ('p', 'R', 'co.IP', 'R')
('p', 'A', 'co.IP', 'R') => ('p', 'AA', 'co.IP', 'R')
('p', 'A', 'co.IP', 'co.RE') => ('p', 'R', 'co.IP', 'co.RE')
('p', 'A', 'co.IP', 'co.RE') => ('p', 'AA', 'co.IP', 'co.RE')
('p', 'A', 'IP', 'RE') => ('p', 'R', 'IP', 'RE')
('p', 'A', 'IP', 'RE') => ('p', 'AA', 'IP', 'RE')
('p', 'AA', 'IP', 'RE') => ('p', 'T', 'IP', 'RE')
('p', 'AA', 'IP', 'RE') => ('p', 'EA', 'IP', 'RE')
('p', 'AA', 'IP', 'R') => ('p', 'T', 'IP', 'R')
('p', 'AA', 'IP', 'R') => ('p', 'EA', 'IP', 'R')
('p', 'AA', 'co.IP', 'R') => ('p', 'T', 'co.IP', 'R')
('p', 'AA', 'co.IP', 'R') => ('p', 'EA', 'co.IP', 'R')
('p', 'AA', 'co.IP', 'co.RE') => ('p', 'T', 'co.IP', 'co.RE')
('p', 'AA', 'co.IP', 'co.RE') => ('p', 'EA', 'co.IP', 'co.RE')
('p', 'A', 'IP', 'NEXP/poly') => ('p', 'R', 'IP', 'NEXP/poly')
('p', 'A', 'IP', 'NEXP/poly') => ('p', 'AA', 'IP', 'NEXP/poly')
('p', 'A', 'co.IP', 'NEXP/poly') => ('p', 'R', 'co.IP', 'NEXP/poly')
('p', 'A', 'co.IP', 'NEXP/poly') => ('p', 'AA', 'co.IP', 'NEXP/poly')
('p', 'AA', 'co.IP', 'NEXP/poly') => ('p', 'T', 'co.IP', 'NEXP/poly')
('p', 'AA', 'co.IP', 'NEXP/poly') => ('p', 'EA', 'co.IP', 'NEXP/poly')
('p', 'AA', 'IP', 'NEXP/poly') => ('p', 'T', 'IP', 'NEXP/poly')
('p', 'AA', 'IP', 'NEXP/poly') => ('p', 'EA', 'IP', 'NEXP/poly')
('p', 'AA', 'IP', 'NEXP') => ('p', 'T', 'IP', 'NEXP')
('p', 'AA', 'IP', 'NEXP') => ('p', 'EA', 'IP', 'NEXP')
('p', 'AA', 'co.IP', 'co.NEXP') => ('p', 'T', 'co.IP', 'co.NEXP')
('p', 'AA', 'co.IP', 'co.NEXP') => ('p', 'EA', 'co.IP', 'co.NEXP')
('-d', 'A', 'co.IP', 'co.QMIP_ne') => ('-d', 'R', 'co.IP', 'co.QMIP_ne')
('-d', 'A', 'co.IP', 'co.QMIP_ne') => ('-d', 'AA', 'co.IP', 'co.QMIP_ne')
('-d', 'A', 'IP', 'QMIP_ne') => ('-d', 'R', 'IP', 'QMIP_ne')
('-d', 'A', 'IP', 'QMIP_ne') => ('-d', 'AA', 'IP', 'QMIP_ne')
('-d', 'AA', 'IP', 'QMIP_ne') => ('-d', 'T', 'IP', 'QMIP_ne')
('-d', 'AA', 'IP', 'QMIP_ne') => ('-d', 'EA', 'IP', 'QMIP_ne')
('-d', 'AA', 'co.IP', 'co.QMIP_ne') => ('-d', 'T', 'co.IP', 'co.QMIP_ne')
('-d', 'AA', 'co.IP', 'co.QMIP_ne') => ('-d', 'EA', 'co.IP', 'co.QMIP_ne')
('p', 'A', 'co.IP', 'co.QMIP_ne') => ('p', 'R', 'co.IP', 'co.QMIP_ne')
('p', 'A', 'co.IP', 'co.QMIP_ne') => ('p', 'AA', 'co.IP', 'co.QMIP_ne')
('p', 'A', 'IP', 'QMIP_ne') => ('p', 'R', 'IP', 'QMIP_ne')
('p', 'A', 'IP', 'QMIP_ne') => ('p', 'AA', 'IP', 'QMIP_ne')
('p', 'AA', 'IP', 'QMIP_ne') => ('p', 'T', 'IP', 'QMIP_ne')
('p', 'AA', 'IP', 'QMIP_ne') => ('p', 'EA', 'IP', 'QMIP_ne')
('p', 'AA', 'co.IP', 'co.QMIP_ne') => ('p', 'T', 'co.IP', 'co.QMIP_ne')
('p', 'AA', 'co.IP', 'co.QMIP_ne') => ('p', 'EA', 'co.IP', 'co.QMIP_ne')
('p', 'AA', 'co.IP', 'co.QIP') => ('-d', 'AA', 'co.IP', 'co.QIP')
('p', 'AA', 'co.IP', 'co.QIP') => ('p', 'T', 'co.IP', 'co.QIP')
('p', 'AA', 'co.IP', 'co.QIP') => ('p', 'EA', 'co.IP', 'co.QIP')
('p', 'AA', 'IP', 'QIP') => ('-d', 'AA', 'IP', 'QIP')
('p', 'AA', 'IP', 'QIP') => ('p', 'T', 'IP', 'QIP')
('p', 'AA', 'IP', 'QIP') => ('p', 'EA', 'IP', 'QIP')
('p', 'EA', 'IP', 'QIP') => ('-d', 'EA', 'IP', 'QIP')
('p', 'EA', 'IP', 'QIP') => ('p', 'E', 'IP', 'QIP')
('p', 'EA', 'co.IP', 'co.QIP') => ('-d', 'EA', 'co.IP', 'co.QIP')
('p', 'EA', 'co.IP', 'co.QIP') => ('p', 'E', 'co.IP', 'co.QIP')
('p', 'E', 'co.IP', 'co.QIP') => ('-d', 'E', 'co.IP', 'co.QIP')
('p', 'E', 'IP', 'QIP') => ('-d', 'E', 'IP', 'QIP')
('p', 'T', 'IP', 'QIP') => ('-d', 'T', 'IP', 'QIP')
('p', 'T', 'co.IP', 'co.QIP') => ('-d', 'T', 'co.IP', 'co.QIP')
('p', 'R', 'co.IP', 'co.QIP') => ('-d', 'R', 'co.IP', 'co.QIP')
('p', 'R', 'IP', 'QIP') => ('-d', 'R', 'IP', 'QIP')
('p', 'A', 'BQP', 'AWPP') => ('-d', 'A', 'BQP', 'AWPP')
('p', 'A', 'BQP', 'AWPP') => ('p', 'R', 'BQP', 'AWPP')
('p', 'A', 'BQP', 'AWPP') => ('p', 'AA', 'BQP', 'AWPP')
('p', 'A', 'BQP', 'co.AWPP') => ('-d', 'A', 'BQP', 'co.AWPP')
('p', 'A', 'BQP', 'co.AWPP') => ('p', 'R', 'BQP', 'co.AWPP')
('p', 'A', 'BQP', 'co.AWPP') => ('p', 'AA', 'BQP', 'co.AWPP')
('p', 'A', 'BQP', 'cocap.AWPP') => ('-d', 'A', 'BQP', 'cocap.AWPP')
('p', 'A', 'BQP', 'cocap.AWPP') => ('p', 'R', 'BQP', 'cocap.AWPP')
('p', 'A', 'BQP', 'cocap.AWPP') => ('p', 'AA', 'BQP', 'cocap.AWPP')
('d', 'A', 'cocap.AWPP', 'P') => ('-p', 'A', 'cocap.AWPP', 'P')
('d', 'A', 'co.AWPP', 'P') => ('-p', 'A', 'co.AWPP', 'P')
('d', 'A', 'AWPP', 'P') => ('-p', 'A', 'AWPP', 'P')
('-d', 'A', 'BQP', 'co.AWPP') => ('-d', 'R', 'BQP', 'co.AWPP')
('-d', 'A', 'BQP', 'co.AWPP') => ('-d', 'AA', 'BQP', 'co.AWPP')
('-d', 'A', 'BQP', 'cocap.AWPP') => ('-d', 'R', 'BQP', 'cocap.AWPP')
('-d', 'A', 'BQP', 'cocap.AWPP') => ('-d', 'AA', 'BQP', 'cocap.AWPP')
('-d', 'A', 'BQP', 'AWPP') => ('-d', 'R', 'BQP', 'AWPP')
('-d', 'A', 'BQP', 'AWPP') => ('-d', 'AA', 'BQP', 'AWPP')
('-d', 'AA', 'BQP', 'AWPP') => ('-d', 'T', 'BQP', 'AWPP')
('-d', 'AA', 'BQP', 'AWPP') => ('-d', 'EA', 'BQP', 'AWPP')
('-d', 'AA', 'BQP', 'co.AWPP') => ('-d', 'T', 'BQP', 'co.AWPP')
('-d', 'AA', 'BQP', 'co.AWPP') => ('-d', 'EA', 'BQP', 'co.AWPP')
('-d', 'AA', 'BQP', 'cocap.AWPP') => ('-d', 'T', 'BQP', 'cocap.AWPP')
('-d', 'AA', 'BQP', 'cocap.AWPP') => ('-d', 'EA', 'BQP', 'cocap.AWPP')
('p', 'AA', 'BQP', 'cocap.AWPP') => ('p', 'T', 'BQP', 'cocap.AWPP')
('p', 'AA', 'BQP', 'cocap.AWPP') => ('p', 'EA', 'BQP', 'cocap.AWPP')
('p', 'AA', 'BQP', 'co.AWPP') => ('p', 'T', 'BQP', 'co.AWPP')
('p', 'AA', 'BQP', 'co.AWPP') => ('p', 'EA', 'BQP', 'co.AWPP')
('p', 'AA', 'BQP', 'AWPP') => ('p', 'T', 'BQP', 'AWPP')
('p', 'AA', 'BQP', 'AWPP') => ('p', 'EA', 'BQP', 'AWPP')
('p', 'A', 'AM', 'IP') => ('-d', 'A', 'AM', 'IP')
('p', 'A', 'AM', 'IP') => ('p', 'R', 'AM', 'IP')
('p', 'A', 'AM', 'IP') => ('p', 'AA', 'AM', 'IP')
('p', 'A', 'co.AM', 'co.IP') => ('-d', 'A', 'co.AM', 'co.IP')
('p', 'A', 'co.AM', 'co.IP') => ('p', 'R', 'co.AM', 'co.IP')
('p', 'A', 'co.AM', 'co.IP') => ('p', 'AA', 'co.AM', 'co.IP')
('p', 'A', 'cocap.AM', 'cocap.IP') => ('-d', 'A', 'cocap.AM', 'cocap.IP')
('p', 'A', 'cocap.AM', 'cocap.IP') => ('p', 'R', 'cocap.AM', 'cocap.IP')
('p', 'A', 'cocap.AM', 'cocap.IP') => ('p', 'AA', 'cocap.AM', 'cocap.IP')
('-d', 'A', 'cocap.AM', 'QMIP_cme') => ('-d', 'R', 'cocap.AM', 'QMIP_cme')
('-d', 'A', 'cocap.AM', 'QMIP_cme') => ('-d', 'AA', 'cocap.AM', 'QMIP_cme')
('-d', 'A', 'cocap.AM', 'co.QMIP_cme') => ('-d', 'R', 'cocap.AM', 'co.QMIP_cme')
('-d', 'A', 'cocap.AM', 'co.QMIP_cme') => ('-d', 'AA', 'cocap.AM', 'co.QMIP_cme')
('-d', 'A', 'cocap.AM', 'cocap.QMIP_cme') => ('-d', 'R', 'cocap.AM', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.AM', 'cocap.QMIP_cme') => ('-d', 'AA', 'cocap.AM', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.AM', 'R') => ('-d', 'R', 'cocap.AM', 'R')
('-d', 'A', 'cocap.AM', 'R') => ('-d', 'AA', 'cocap.AM', 'R')
('-d', 'A', 'cocap.AM', 'RE') => ('-d', 'R', 'cocap.AM', 'RE')
('-d', 'A', 'cocap.AM', 'RE') => ('-d', 'AA', 'cocap.AM', 'RE')
('-d', 'A', 'cocap.AM', 'co.RE') => ('-d', 'R', 'cocap.AM', 'co.RE')
('-d', 'A', 'cocap.AM', 'co.RE') => ('-d', 'AA', 'cocap.AM', 'co.RE')
('-d', 'AA', 'cocap.AM', 'co.RE') => ('-d', 'T', 'cocap.AM', 'co.RE')
('-d', 'AA', 'cocap.AM', 'co.RE') => ('-d', 'EA', 'cocap.AM', 'co.RE')
('-d', 'AA', 'cocap.AM', 'RE') => ('-d', 'T', 'cocap.AM', 'RE')
('-d', 'AA', 'cocap.AM', 'RE') => ('-d', 'EA', 'cocap.AM', 'RE')
('-d', 'AA', 'cocap.AM', 'R') => ('-d', 'T', 'cocap.AM', 'R')
('-d', 'AA', 'cocap.AM', 'R') => ('-d', 'EA', 'cocap.AM', 'R')
('-d', 'AA', 'cocap.AM', 'cocap.QMIP_cme') => ('-d', 'T', 'cocap.AM', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.AM', 'cocap.QMIP_cme') => ('-d', 'EA', 'cocap.AM', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.AM', 'QMIP_cme') => ('-d', 'T', 'cocap.AM', 'QMIP_cme')
('-d', 'AA', 'cocap.AM', 'QMIP_cme') => ('-d', 'EA', 'cocap.AM', 'QMIP_cme')
('-d', 'AA', 'cocap.AM', 'co.QMIP_cme') => ('-d', 'T', 'cocap.AM', 'co.QMIP_cme')
('-d', 'AA', 'cocap.AM', 'co.QMIP_cme') => ('-d', 'EA', 'cocap.AM', 'co.QMIP_cme')
('p', 'A', 'cocap.AM', 'QMIP_cme') => ('p', 'R', 'cocap.AM', 'QMIP_cme')
('p', 'A', 'cocap.AM', 'QMIP_cme') => ('p', 'AA', 'cocap.AM', 'QMIP_cme')
('p', 'A', 'cocap.AM', 'co.QMIP_cme') => ('p', 'R', 'cocap.AM', 'co.QMIP_cme')
('p', 'A', 'cocap.AM', 'co.QMIP_cme') => ('p', 'AA', 'cocap.AM', 'co.QMIP_cme')
('p', 'A', 'cocap.AM', 'cocap.QMIP_cme') => ('p', 'R', 'cocap.AM', 'cocap.QMIP_cme')
('p', 'A', 'cocap.AM', 'cocap.QMIP_cme') => ('p', 'AA', 'cocap.AM', 'cocap.QMIP_cme')
('p', 'A', 'cocap.AM', 'R') => ('p', 'R', 'cocap.AM', 'R')
('p', 'A', 'cocap.AM', 'R') => ('p', 'AA', 'cocap.AM', 'R')
('p', 'A', 'cocap.AM', 'RE') => ('p', 'R', 'cocap.AM', 'RE')
('p', 'A', 'cocap.AM', 'RE') => ('p', 'AA', 'cocap.AM', 'RE')
('p', 'A', 'cocap.AM', 'co.RE') => ('p', 'R', 'cocap.AM', 'co.RE')
('p', 'A', 'cocap.AM', 'co.RE') => ('p', 'AA', 'cocap.AM', 'co.RE')
('p', 'AA', 'cocap.AM', 'co.RE') => ('p', 'T', 'cocap.AM', 'co.RE')
('p', 'AA', 'cocap.AM', 'co.RE') => ('p', 'EA', 'cocap.AM', 'co.RE')
('p', 'AA', 'cocap.AM', 'RE') => ('p', 'T', 'cocap.AM', 'RE')
('p', 'AA', 'cocap.AM', 'RE') => ('p', 'EA', 'cocap.AM', 'RE')
('p', 'AA', 'cocap.AM', 'R') => ('p', 'T', 'cocap.AM', 'R')
('p', 'AA', 'cocap.AM', 'R') => ('p', 'EA', 'cocap.AM', 'R')
('p', 'AA', 'cocap.AM', 'cocap.QMIP_cme') => ('p', 'T', 'cocap.AM', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.AM', 'cocap.QMIP_cme') => ('p', 'EA', 'cocap.AM', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.AM', 'QMIP_cme') => ('p', 'T', 'cocap.AM', 'QMIP_cme')
('p', 'AA', 'cocap.AM', 'QMIP_cme') => ('p', 'EA', 'cocap.AM', 'QMIP_cme')
('p', 'AA', 'cocap.AM', 'co.QMIP_cme') => ('p', 'T', 'cocap.AM', 'co.QMIP_cme')
('p', 'AA', 'cocap.AM', 'co.QMIP_cme') => ('p', 'EA', 'cocap.AM', 'co.QMIP_cme')
('-d', 'A', 'cocap.AM', 'cocap.MIP*_cme') => ('-d', 'R', 'cocap.AM', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.AM', 'cocap.MIP*_cme') => ('-d', 'AA', 'cocap.AM', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.AM', 'MIP*_cme') => ('-d', 'R', 'cocap.AM', 'MIP*_cme')
('-d', 'A', 'cocap.AM', 'MIP*_cme') => ('-d', 'AA', 'cocap.AM', 'MIP*_cme')
('-d', 'A', 'cocap.AM', 'co.MIP*_cme') => ('-d', 'R', 'cocap.AM', 'co.MIP*_cme')
('-d', 'A', 'cocap.AM', 'co.MIP*_cme') => ('-d', 'AA', 'cocap.AM', 'co.MIP*_cme')
('-d', 'AA', 'cocap.AM', 'co.MIP*_cme') => ('-d', 'T', 'cocap.AM', 'co.MIP*_cme')
('-d', 'AA', 'cocap.AM', 'co.MIP*_cme') => ('-d', 'EA', 'cocap.AM', 'co.MIP*_cme')
('-d', 'AA', 'cocap.AM', 'MIP*_cme') => ('-d', 'T', 'cocap.AM', 'MIP*_cme')
('-d', 'AA', 'cocap.AM', 'MIP*_cme') => ('-d', 'EA', 'cocap.AM', 'MIP*_cme')
('-d', 'AA', 'cocap.AM', 'cocap.MIP*_cme') => ('-d', 'T', 'cocap.AM', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.AM', 'cocap.MIP*_cme') => ('-d', 'EA', 'cocap.AM', 'cocap.MIP*_cme')
('p', 'A', 'cocap.AM', 'cocap.MIP*_cme') => ('p', 'R', 'cocap.AM', 'cocap.MIP*_cme')
('p', 'A', 'cocap.AM', 'cocap.MIP*_cme') => ('p', 'AA', 'cocap.AM', 'cocap.MIP*_cme')
('p', 'A', 'cocap.AM', 'MIP*_cme') => ('p', 'R', 'cocap.AM', 'MIP*_cme')
('p', 'A', 'cocap.AM', 'MIP*_cme') => ('p', 'AA', 'cocap.AM', 'MIP*_cme')
('p', 'A', 'cocap.AM', 'co.MIP*_cme') => ('p', 'R', 'cocap.AM', 'co.MIP*_cme')
('p', 'A', 'cocap.AM', 'co.MIP*_cme') => ('p', 'AA', 'cocap.AM', 'co.MIP*_cme')
('p', 'AA', 'cocap.AM', 'co.MIP*_cme') => ('p', 'T', 'cocap.AM', 'co.MIP*_cme')
('p', 'AA', 'cocap.AM', 'co.MIP*_cme') => ('p', 'EA', 'cocap.AM', 'co.MIP*_cme')
('p', 'AA', 'cocap.AM', 'MIP*_cme') => ('p', 'T', 'cocap.AM', 'MIP*_cme')
('p', 'AA', 'cocap.AM', 'MIP*_cme') => ('p', 'EA', 'cocap.AM', 'MIP*_cme')
('p', 'AA', 'cocap.AM', 'cocap.MIP*_cme') => ('p', 'T', 'cocap.AM', 'cocap.MIP*_cme')
('p', 'AA', 'cocap.AM', 'cocap.MIP*_cme') => ('p', 'EA', 'cocap.AM', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.AM', 'co.NEXP') => ('-d', 'R', 'cocap.AM', 'co.NEXP')
('-d', 'A', 'cocap.AM', 'co.NEXP') => ('-d', 'AA', 'cocap.AM', 'co.NEXP')
('-d', 'A', 'cocap.AM', 'NEXP') => ('-d', 'R', 'cocap.AM', 'NEXP')
('-d', 'A', 'cocap.AM', 'NEXP') => ('-d', 'AA', 'cocap.AM', 'NEXP')
('-d', 'A', 'cocap.AM', 'cocap.NEXP') => ('-d', 'R', 'cocap.AM', 'cocap.NEXP')
('-d', 'A', 'cocap.AM', 'cocap.NEXP') => ('-d', 'AA', 'cocap.AM', 'cocap.NEXP')
('-d', 'A', 'cocap.AM', 'NEXP/poly') => ('-d', 'R', 'cocap.AM', 'NEXP/poly')
('-d', 'A', 'cocap.AM', 'NEXP/poly') => ('-d', 'AA', 'cocap.AM', 'NEXP/poly')
('-d', 'AA', 'cocap.AM', 'NEXP/poly') => ('-d', 'T', 'cocap.AM', 'NEXP/poly')
('-d', 'AA', 'cocap.AM', 'NEXP/poly') => ('-d', 'EA', 'cocap.AM', 'NEXP/poly')
('-d', 'AA', 'cocap.AM', 'cocap.NEXP') => ('-d', 'T', 'cocap.AM', 'cocap.NEXP')
('-d', 'AA', 'cocap.AM', 'cocap.NEXP') => ('-d', 'EA', 'cocap.AM', 'cocap.NEXP')
('-d', 'AA', 'cocap.AM', 'co.NEXP') => ('-d', 'T', 'cocap.AM', 'co.NEXP')
('-d', 'AA', 'cocap.AM', 'co.NEXP') => ('-d', 'EA', 'cocap.AM', 'co.NEXP')
('-d', 'AA', 'cocap.AM', 'NEXP') => ('-d', 'T', 'cocap.AM', 'NEXP')
('-d', 'AA', 'cocap.AM', 'NEXP') => ('-d', 'EA', 'cocap.AM', 'NEXP')
('p', 'A', 'cocap.AM', 'co.NEXP') => ('p', 'R', 'cocap.AM', 'co.NEXP')
('p', 'A', 'cocap.AM', 'co.NEXP') => ('p', 'AA', 'cocap.AM', 'co.NEXP')
('p', 'A', 'cocap.AM', 'NEXP') => ('p', 'R', 'cocap.AM', 'NEXP')
('p', 'A', 'cocap.AM', 'NEXP') => ('p', 'AA', 'cocap.AM', 'NEXP')
('p', 'A', 'cocap.AM', 'cocap.NEXP') => ('p', 'R', 'cocap.AM', 'cocap.NEXP')
('p', 'A', 'cocap.AM', 'cocap.NEXP') => ('p', 'AA', 'cocap.AM', 'cocap.NEXP')
('p', 'A', 'cocap.AM', 'NEXP/poly') => ('p', 'R', 'cocap.AM', 'NEXP/poly')
('p', 'A', 'cocap.AM', 'NEXP/poly') => ('p', 'AA', 'cocap.AM', 'NEXP/poly')
('p', 'AA', 'cocap.AM', 'NEXP/poly') => ('p', 'T', 'cocap.AM', 'NEXP/poly')
('p', 'AA', 'cocap.AM', 'NEXP/poly') => ('p', 'EA', 'cocap.AM', 'NEXP/poly')
('p', 'AA', 'cocap.AM', 'cocap.NEXP') => ('p', 'T', 'cocap.AM', 'cocap.NEXP')
('p', 'AA', 'cocap.AM', 'cocap.NEXP') => ('p', 'EA', 'cocap.AM', 'cocap.NEXP')
('p', 'AA', 'cocap.AM', 'co.NEXP') => ('p', 'T', 'cocap.AM', 'co.NEXP')
('p', 'AA', 'cocap.AM', 'co.NEXP') => ('p', 'EA', 'cocap.AM', 'co.NEXP')
('p', 'AA', 'cocap.AM', 'NEXP') => ('p', 'T', 'cocap.AM', 'NEXP')
('p', 'AA', 'cocap.AM', 'NEXP') => ('p', 'EA', 'cocap.AM', 'NEXP')
('-d', 'A', 'cocap.AM', 'QIP') => ('-d', 'R', 'cocap.AM', 'QIP')
('-d', 'A', 'cocap.AM', 'QIP') => ('-d', 'AA', 'cocap.AM', 'QIP')
('-d', 'A', 'cocap.AM', 'co.QIP') => ('-d', 'R', 'cocap.AM', 'co.QIP')
('-d', 'A', 'cocap.AM', 'co.QIP') => ('-d', 'AA', 'cocap.AM', 'co.QIP')
('-d', 'A', 'cocap.AM', 'cocap.QIP') => ('-d', 'R', 'cocap.AM', 'cocap.QIP')
('-d', 'A', 'cocap.AM', 'cocap.QIP') => ('-d', 'AA', 'cocap.AM', 'cocap.QIP')
('-d', 'A', 'cocap.AM', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.AM', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.AM', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.AM', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.AM', 'QMIP_ne') => ('-d', 'R', 'cocap.AM', 'QMIP_ne')
('-d', 'A', 'cocap.AM', 'QMIP_ne') => ('-d', 'AA', 'cocap.AM', 'QMIP_ne')
('-d', 'A', 'cocap.AM', 'co.QMIP_ne') => ('-d', 'R', 'cocap.AM', 'co.QMIP_ne')
('-d', 'A', 'cocap.AM', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.AM', 'co.QMIP_ne')
('-d', 'AA', 'cocap.AM', 'co.QMIP_ne') => ('-d', 'T', 'cocap.AM', 'co.QMIP_ne')
('-d', 'AA', 'cocap.AM', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.AM', 'co.QMIP_ne')
('-d', 'AA', 'cocap.AM', 'QMIP_ne') => ('-d', 'T', 'cocap.AM', 'QMIP_ne')
('-d', 'AA', 'cocap.AM', 'QMIP_ne') => ('-d', 'EA', 'cocap.AM', 'QMIP_ne')
('-d', 'AA', 'cocap.AM', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.AM', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.AM', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.AM', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.AM', 'cocap.QIP') => ('-d', 'T', 'cocap.AM', 'cocap.QIP')
('-d', 'AA', 'cocap.AM', 'cocap.QIP') => ('-d', 'EA', 'cocap.AM', 'cocap.QIP')
('-d', 'AA', 'cocap.AM', 'QIP') => ('-d', 'T', 'cocap.AM', 'QIP')
('-d', 'AA', 'cocap.AM', 'QIP') => ('-d', 'EA', 'cocap.AM', 'QIP')
('-d', 'AA', 'cocap.AM', 'co.QIP') => ('-d', 'T', 'cocap.AM', 'co.QIP')
('-d', 'AA', 'cocap.AM', 'co.QIP') => ('-d', 'EA', 'cocap.AM', 'co.QIP')
('p', 'A', 'cocap.AM', 'QIP') => ('p', 'R', 'cocap.AM', 'QIP')
('p', 'A', 'cocap.AM', 'QIP') => ('p', 'AA', 'cocap.AM', 'QIP')
('p', 'A', 'cocap.AM', 'co.QIP') => ('p', 'R', 'cocap.AM', 'co.QIP')
('p', 'A', 'cocap.AM', 'co.QIP') => ('p', 'AA', 'cocap.AM', 'co.QIP')
('p', 'A', 'cocap.AM', 'cocap.QIP') => ('p', 'R', 'cocap.AM', 'cocap.QIP')
('p', 'A', 'cocap.AM', 'cocap.QIP') => ('p', 'AA', 'cocap.AM', 'cocap.QIP')
('p', 'A', 'cocap.AM', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.AM', 'cocap.QMIP_ne')
('p', 'A', 'cocap.AM', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.AM', 'cocap.QMIP_ne')
('p', 'A', 'cocap.AM', 'QMIP_ne') => ('p', 'R', 'cocap.AM', 'QMIP_ne')
('p', 'A', 'cocap.AM', 'QMIP_ne') => ('p', 'AA', 'cocap.AM', 'QMIP_ne')
('p', 'A', 'cocap.AM', 'co.QMIP_ne') => ('p', 'R', 'cocap.AM', 'co.QMIP_ne')
('p', 'A', 'cocap.AM', 'co.QMIP_ne') => ('p', 'AA', 'cocap.AM', 'co.QMIP_ne')
('p', 'AA', 'cocap.AM', 'co.QMIP_ne') => ('p', 'T', 'cocap.AM', 'co.QMIP_ne')
('p', 'AA', 'cocap.AM', 'co.QMIP_ne') => ('p', 'EA', 'cocap.AM', 'co.QMIP_ne')
('p', 'AA', 'cocap.AM', 'QMIP_ne') => ('p', 'T', 'cocap.AM', 'QMIP_ne')
('p', 'AA', 'cocap.AM', 'QMIP_ne') => ('p', 'EA', 'cocap.AM', 'QMIP_ne')
('p', 'AA', 'cocap.AM', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.AM', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.AM', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.AM', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.AM', 'cocap.QIP') => ('p', 'T', 'cocap.AM', 'cocap.QIP')
('p', 'AA', 'cocap.AM', 'cocap.QIP') => ('p', 'EA', 'cocap.AM', 'cocap.QIP')
('p', 'AA', 'cocap.AM', 'QIP') => ('p', 'T', 'cocap.AM', 'QIP')
('p', 'AA', 'cocap.AM', 'QIP') => ('p', 'EA', 'cocap.AM', 'QIP')
('p', 'AA', 'cocap.AM', 'co.QIP') => ('p', 'T', 'cocap.AM', 'co.QIP')
('p', 'AA', 'cocap.AM', 'co.QIP') => ('p', 'EA', 'cocap.AM', 'co.QIP')
('d', 'A', 'PSPACE/poly', 'cocap.AM') => ('-p', 'A', 'PSPACE/poly', 'cocap.AM')
('d', 'A', 'PSPACE/poly', 'AM') => ('-p', 'A', 'PSPACE/poly', 'AM')
('d', 'A', 'PSPACE/poly', 'co.AM') => ('-p', 'A', 'PSPACE/poly', 'co.AM')
('-d', 'A', 'cocap.AM', 'PSPACE/poly') => ('-d', 'R', 'cocap.AM', 'PSPACE/poly')
('-d', 'A', 'cocap.AM', 'PSPACE/poly') => ('-d', 'AA', 'cocap.AM', 'PSPACE/poly')
('-d', 'AA', 'cocap.AM', 'PSPACE/poly') => ('-d', 'T', 'cocap.AM', 'PSPACE/poly')
('-d', 'AA', 'cocap.AM', 'PSPACE/poly') => ('-d', 'EA', 'cocap.AM', 'PSPACE/poly')
('p', 'A', 'cocap.AM', 'PSPACE/poly') => ('p', 'R', 'cocap.AM', 'PSPACE/poly')
('p', 'A', 'cocap.AM', 'PSPACE/poly') => ('p', 'AA', 'cocap.AM', 'PSPACE/poly')
('p', 'AA', 'cocap.AM', 'PSPACE/poly') => ('p', 'T', 'cocap.AM', 'PSPACE/poly')
('p', 'AA', 'cocap.AM', 'PSPACE/poly') => ('p', 'EA', 'cocap.AM', 'PSPACE/poly')
('d', 'A', 'PSPACE', 'cocap.AM') => ('-p', 'A', 'PSPACE', 'cocap.AM')
('d', 'A', 'PSPACE', 'AM') => ('-p', 'A', 'PSPACE', 'AM')
('d', 'A', 'PSPACE', 'co.AM') => ('-p', 'A', 'PSPACE', 'co.AM')
('-d', 'A', 'cocap.AM', 'PSPACE') => ('-d', 'R', 'cocap.AM', 'PSPACE')
('-d', 'A', 'cocap.AM', 'PSPACE') => ('-d', 'AA', 'cocap.AM', 'PSPACE')
('-d', 'AA', 'cocap.AM', 'PSPACE') => ('-d', 'T', 'cocap.AM', 'PSPACE')
('-d', 'AA', 'cocap.AM', 'PSPACE') => ('-d', 'EA', 'cocap.AM', 'PSPACE')
('p', 'A', 'cocap.AM', 'PSPACE') => ('p', 'R', 'cocap.AM', 'PSPACE')
('p', 'A', 'cocap.AM', 'PSPACE') => ('p', 'AA', 'cocap.AM', 'PSPACE')
('p', 'AA', 'cocap.AM', 'PSPACE') => ('p', 'T', 'cocap.AM', 'PSPACE')
('p', 'AA', 'cocap.AM', 'PSPACE') => ('p', 'EA', 'cocap.AM', 'PSPACE')
('-d', 'A', 'cocap.AM', 'IP') => ('-d', 'R', 'cocap.AM', 'IP')
('-d', 'A', 'cocap.AM', 'IP') => ('-d', 'AA', 'cocap.AM', 'IP')
('-d', 'A', 'cocap.AM', 'co.IP') => ('-d', 'R', 'cocap.AM', 'co.IP')
('-d', 'A', 'cocap.AM', 'co.IP') => ('-d', 'AA', 'cocap.AM', 'co.IP')
('-d', 'A', 'cocap.AM', 'cocap.IP') => ('-d', 'R', 'cocap.AM', 'cocap.IP')
('-d', 'A', 'cocap.AM', 'cocap.IP') => ('-d', 'AA', 'cocap.AM', 'cocap.IP')
('-d', 'AA', 'cocap.AM', 'cocap.IP') => ('-d', 'T', 'cocap.AM', 'cocap.IP')
('-d', 'AA', 'cocap.AM', 'cocap.IP') => ('-d', 'EA', 'cocap.AM', 'cocap.IP')
('-d', 'AA', 'cocap.AM', 'IP') => ('-d', 'T', 'cocap.AM', 'IP')
('-d', 'AA', 'cocap.AM', 'IP') => ('-d', 'EA', 'cocap.AM', 'IP')
('-d', 'AA', 'cocap.AM', 'co.IP') => ('-d', 'T', 'cocap.AM', 'co.IP')
('-d', 'AA', 'cocap.AM', 'co.IP') => ('-d', 'EA', 'cocap.AM', 'co.IP')
('p', 'A', 'cocap.AM', 'IP') => ('p', 'R', 'cocap.AM', 'IP')
('p', 'A', 'cocap.AM', 'IP') => ('p', 'AA', 'cocap.AM', 'IP')
('p', 'A', 'cocap.AM', 'co.IP') => ('p', 'R', 'cocap.AM', 'co.IP')
('p', 'A', 'cocap.AM', 'co.IP') => ('p', 'AA', 'cocap.AM', 'co.IP')
('p', 'AA', 'cocap.AM', 'co.IP') => ('p', 'T', 'cocap.AM', 'co.IP')
('p', 'AA', 'cocap.AM', 'co.IP') => ('p', 'EA', 'cocap.AM', 'co.IP')
('p', 'AA', 'cocap.AM', 'IP') => ('p', 'T', 'cocap.AM', 'IP')
('p', 'AA', 'cocap.AM', 'IP') => ('p', 'EA', 'cocap.AM', 'IP')
('p', 'AA', 'cocap.AM', 'cocap.IP') => ('p', 'T', 'cocap.AM', 'cocap.IP')
('p', 'AA', 'cocap.AM', 'cocap.IP') => ('p', 'EA', 'cocap.AM', 'cocap.IP')
('-d', 'A', 'co.AM', 'co.NEXP') => ('-d', 'R', 'co.AM', 'co.NEXP')
('-d', 'A', 'co.AM', 'co.NEXP') => ('-d', 'AA', 'co.AM', 'co.NEXP')
('-d', 'A', 'AM', 'NEXP') => ('-d', 'R', 'AM', 'NEXP')
('-d', 'A', 'AM', 'NEXP') => ('-d', 'AA', 'AM', 'NEXP')
('-d', 'A', 'NP/poly', 'NEXP/poly') => ('-d', 'R', 'NP/poly', 'NEXP/poly')
('-d', 'A', 'NP/poly', 'NEXP/poly') => ('-d', 'AA', 'NP/poly', 'NEXP/poly')
('-d', 'A', 'co.NP/poly', 'NEXP/poly') => ('-d', 'R', 'co.NP/poly', 'NEXP/poly')
('-d', 'A', 'co.NP/poly', 'NEXP/poly') => ('-d', 'AA', 'co.NP/poly', 'NEXP/poly')
('-d', 'A', 'cocap.NP/poly', 'NEXP/poly') => ('-d', 'R', 'cocap.NP/poly', 'NEXP/poly')
('-d', 'A', 'cocap.NP/poly', 'NEXP/poly') => ('-d', 'AA', 'cocap.NP/poly', 'NEXP/poly')
('-d', 'A', 'cocap.NP', 'NEXP/poly') => ('-d', 'R', 'cocap.NP', 'NEXP/poly')
('-d', 'A', 'cocap.NP', 'NEXP/poly') => ('-d', 'AA', 'cocap.NP', 'NEXP/poly')
('-d', 'A', '(NP-cap-coNP)/poly', 'NEXP/poly') => ('-d', 'R', '(NP-cap-coNP)/poly', 'NEXP/poly')
('-d', 'A', '(NP-cap-coNP)/poly', 'NEXP/poly') => ('-d', 'AA', '(NP-cap-coNP)/poly', 'NEXP/poly')
('-d', 'A', 'ZPP', 'NEXP/poly') => ('-d', 'R', 'ZPP', 'NEXP/poly')
('-d', 'A', 'ZPP', 'NEXP/poly') => ('-d', 'AA', 'ZPP', 'NEXP/poly')
('-d', 'AA', 'ZPP', 'NEXP/poly') => ('-d', 'T', 'ZPP', 'NEXP/poly')
('-d', 'AA', 'ZPP', 'NEXP/poly') => ('-d', 'EA', 'ZPP', 'NEXP/poly')
('-d', 'AA', '(NP-cap-coNP)/poly', 'NEXP/poly') => ('-d', 'T', '(NP-cap-coNP)/poly', 'NEXP/poly')
('-d', 'AA', '(NP-cap-coNP)/poly', 'NEXP/poly') => ('-d', 'EA', '(NP-cap-coNP)/poly', 'NEXP/poly')
('-d', 'AA', 'cocap.NP', 'NEXP/poly') => ('-d', 'T', 'cocap.NP', 'NEXP/poly')
('-d', 'AA', 'cocap.NP', 'NEXP/poly') => ('-d', 'EA', 'cocap.NP', 'NEXP/poly')
('-d', 'AA', 'cocap.NP/poly', 'NEXP/poly') => ('-d', 'T', 'cocap.NP/poly', 'NEXP/poly')
('-d', 'AA', 'cocap.NP/poly', 'NEXP/poly') => ('-d', 'EA', 'cocap.NP/poly', 'NEXP/poly')
('-d', 'A', 'co.NP', 'NEXP/poly') => ('-d', 'R', 'co.NP', 'NEXP/poly')
('-d', 'A', 'co.NP', 'NEXP/poly') => ('-d', 'AA', 'co.NP', 'NEXP/poly')
('-d', 'A', 'NP', 'NEXP/poly') => ('-d', 'R', 'NP', 'NEXP/poly')
('-d', 'A', 'NP', 'NEXP/poly') => ('-d', 'AA', 'NP', 'NEXP/poly')
('-d', 'A', 'RP', 'NEXP/poly') => ('-d', 'R', 'RP', 'NEXP/poly')
('-d', 'A', 'RP', 'NEXP/poly') => ('-d', 'AA', 'RP', 'NEXP/poly')
('-d', 'A', 'co.RP', 'NEXP/poly') => ('-d', 'R', 'co.RP', 'NEXP/poly')
('-d', 'A', 'co.RP', 'NEXP/poly') => ('-d', 'AA', 'co.RP', 'NEXP/poly')
('-d', 'AA', 'co.RP', 'NEXP/poly') => ('-d', 'T', 'co.RP', 'NEXP/poly')
('-d', 'AA', 'co.RP', 'NEXP/poly') => ('-d', 'EA', 'co.RP', 'NEXP/poly')
('-d', 'AA', 'RP', 'NEXP/poly') => ('-d', 'T', 'RP', 'NEXP/poly')
('-d', 'AA', 'RP', 'NEXP/poly') => ('-d', 'EA', 'RP', 'NEXP/poly')
('-d', 'AA', 'NP', 'NEXP/poly') => ('-d', 'T', 'NP', 'NEXP/poly')
('-d', 'AA', 'NP', 'NEXP/poly') => ('-d', 'EA', 'NP', 'NEXP/poly')
('-d', 'AA', 'co.NP', 'NEXP/poly') => ('-d', 'T', 'co.NP', 'NEXP/poly')
('-d', 'AA', 'co.NP', 'NEXP/poly') => ('-d', 'EA', 'co.NP', 'NEXP/poly')
('-d', 'AA', 'co.NP/poly', 'NEXP/poly') => ('-d', 'T', 'co.NP/poly', 'NEXP/poly')
('-d', 'AA', 'co.NP/poly', 'NEXP/poly') => ('-d', 'EA', 'co.NP/poly', 'NEXP/poly')
('-d', 'AA', 'NP/poly', 'NEXP/poly') => ('-d', 'T', 'NP/poly', 'NEXP/poly')
('-d', 'AA', 'NP/poly', 'NEXP/poly') => ('-d', 'EA', 'NP/poly', 'NEXP/poly')
('-d', 'AA', 'AM', 'NEXP/poly') => ('-d', 'T', 'AM', 'NEXP/poly')
('-d', 'AA', 'co.AM', 'NEXP/poly') => ('-d', 'T', 'co.AM', 'NEXP/poly')
('-d', 'A', 'AM', 'R') => ('-d', 'R', 'AM', 'R')
('-d', 'A', 'AM', 'R') => ('-d', 'AA', 'AM', 'R')
('-d', 'A', 'co.AM', 'R') => ('-d', 'R', 'co.AM', 'R')
('-d', 'A', 'co.AM', 'R') => ('-d', 'AA', 'co.AM', 'R')
('-d', 'A', 'co.AM', 'RE') => ('-d', 'R', 'co.AM', 'RE')
('-d', 'A', 'co.AM', 'RE') => ('-d', 'AA', 'co.AM', 'RE')
('-d', 'A', 'AM', 'co.RE') => ('-d', 'R', 'AM', 'co.RE')
('-d', 'A', 'AM', 'co.RE') => ('-d', 'AA', 'AM', 'co.RE')
('-d', 'AA', 'AM', 'co.RE') => ('-d', 'T', 'AM', 'co.RE')
('-d', 'AA', 'AM', 'co.RE') => ('-d', 'EA', 'AM', 'co.RE')
('-d', 'AA', 'co.AM', 'RE') => ('-d', 'T', 'co.AM', 'RE')
('-d', 'AA', 'co.AM', 'RE') => ('-d', 'EA', 'co.AM', 'RE')
('-d', 'A', 'co.AM', 'co.RE') => ('-d', 'R', 'co.AM', 'co.RE')
('-d', 'A', 'co.AM', 'co.RE') => ('-d', 'AA', 'co.AM', 'co.RE')
('-d', 'A', 'AM', 'RE') => ('-d', 'R', 'AM', 'RE')
('-d', 'A', 'AM', 'RE') => ('-d', 'AA', 'AM', 'RE')
('-d', 'AA', 'AM', 'RE') => ('-d', 'T', 'AM', 'RE')
('-d', 'AA', 'AM', 'RE') => ('-d', 'EA', 'AM', 'RE')
('-d', 'AA', 'co.AM', 'co.RE') => ('-d', 'T', 'co.AM', 'co.RE')
('-d', 'AA', 'co.AM', 'co.RE') => ('-d', 'EA', 'co.AM', 'co.RE')
('-d', 'AA', 'co.AM', 'R') => ('-d', 'T', 'co.AM', 'R')
('-d', 'AA', 'co.AM', 'R') => ('-d', 'EA', 'co.AM', 'R')
('-d', 'AA', 'AM', 'R') => ('-d', 'T', 'AM', 'R')
('-d', 'AA', 'AM', 'R') => ('-d', 'EA', 'AM', 'R')
('-d', 'AA', 'AM', 'NEXP') => ('-d', 'T', 'AM', 'NEXP')
('-d', 'AA', 'AM', 'NEXP') => ('-d', 'EA', 'AM', 'NEXP')
('-d', 'AA', 'co.AM', 'co.NEXP') => ('-d', 'T', 'co.AM', 'co.NEXP')
('-d', 'AA', 'co.AM', 'co.NEXP') => ('-d', 'EA', 'co.AM', 'co.NEXP')
('p', 'A', 'co.AM', 'co.NEXP') => ('p', 'R', 'co.AM', 'co.NEXP')
('p', 'A', 'co.AM', 'co.NEXP') => ('p', 'AA', 'co.AM', 'co.NEXP')
('p', 'A', 'AM', 'NEXP') => ('p', 'R', 'AM', 'NEXP')
('p', 'A', 'AM', 'NEXP') => ('p', 'AA', 'AM', 'NEXP')
('p', 'A', 'NP/poly', 'NEXP/poly') => ('p', 'R', 'NP/poly', 'NEXP/poly')
('p', 'A', 'NP/poly', 'NEXP/poly') => ('p', 'AA', 'NP/poly', 'NEXP/poly')
('p', 'A', 'co.NP/poly', 'NEXP/poly') => ('p', 'R', 'co.NP/poly', 'NEXP/poly')
('p', 'A', 'co.NP/poly', 'NEXP/poly') => ('p', 'AA', 'co.NP/poly', 'NEXP/poly')
('p', 'A', 'cocap.NP/poly', 'NEXP/poly') => ('p', 'R', 'cocap.NP/poly', 'NEXP/poly')
('p', 'A', 'cocap.NP/poly', 'NEXP/poly') => ('p', 'AA', 'cocap.NP/poly', 'NEXP/poly')
('p', 'A', 'cocap.NP', 'NEXP/poly') => ('p', 'R', 'cocap.NP', 'NEXP/poly')
('p', 'A', 'cocap.NP', 'NEXP/poly') => ('p', 'AA', 'cocap.NP', 'NEXP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'NEXP/poly') => ('p', 'R', '(NP-cap-coNP)/poly', 'NEXP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'NEXP/poly') => ('p', 'AA', '(NP-cap-coNP)/poly', 'NEXP/poly')
('p', 'A', 'ZPP', 'NEXP/poly') => ('p', 'R', 'ZPP', 'NEXP/poly')
('p', 'A', 'ZPP', 'NEXP/poly') => ('p', 'AA', 'ZPP', 'NEXP/poly')
('p', 'AA', 'ZPP', 'NEXP/poly') => ('p', 'T', 'ZPP', 'NEXP/poly')
('p', 'AA', 'ZPP', 'NEXP/poly') => ('p', 'EA', 'ZPP', 'NEXP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'NEXP/poly') => ('p', 'T', '(NP-cap-coNP)/poly', 'NEXP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'NEXP/poly') => ('p', 'EA', '(NP-cap-coNP)/poly', 'NEXP/poly')
('p', 'AA', 'cocap.NP', 'NEXP/poly') => ('p', 'T', 'cocap.NP', 'NEXP/poly')
('p', 'AA', 'cocap.NP', 'NEXP/poly') => ('p', 'EA', 'cocap.NP', 'NEXP/poly')
('p', 'AA', 'cocap.NP/poly', 'NEXP/poly') => ('p', 'T', 'cocap.NP/poly', 'NEXP/poly')
('p', 'AA', 'cocap.NP/poly', 'NEXP/poly') => ('p', 'EA', 'cocap.NP/poly', 'NEXP/poly')
('p', 'A', 'co.NP', 'NEXP/poly') => ('p', 'R', 'co.NP', 'NEXP/poly')
('p', 'A', 'co.NP', 'NEXP/poly') => ('p', 'AA', 'co.NP', 'NEXP/poly')
('p', 'A', 'NP', 'NEXP/poly') => ('p', 'R', 'NP', 'NEXP/poly')
('p', 'A', 'NP', 'NEXP/poly') => ('p', 'AA', 'NP', 'NEXP/poly')
('p', 'A', 'RP', 'NEXP/poly') => ('p', 'R', 'RP', 'NEXP/poly')
('p', 'A', 'RP', 'NEXP/poly') => ('p', 'AA', 'RP', 'NEXP/poly')
('p', 'A', 'co.RP', 'NEXP/poly') => ('p', 'R', 'co.RP', 'NEXP/poly')
('p', 'A', 'co.RP', 'NEXP/poly') => ('p', 'AA', 'co.RP', 'NEXP/poly')
('p', 'AA', 'co.RP', 'NEXP/poly') => ('p', 'T', 'co.RP', 'NEXP/poly')
('p', 'AA', 'co.RP', 'NEXP/poly') => ('p', 'EA', 'co.RP', 'NEXP/poly')
('p', 'AA', 'RP', 'NEXP/poly') => ('p', 'T', 'RP', 'NEXP/poly')
('p', 'AA', 'RP', 'NEXP/poly') => ('p', 'EA', 'RP', 'NEXP/poly')
('p', 'AA', 'NP', 'NEXP/poly') => ('p', 'T', 'NP', 'NEXP/poly')
('p', 'AA', 'NP', 'NEXP/poly') => ('p', 'EA', 'NP', 'NEXP/poly')
('p', 'AA', 'co.NP', 'NEXP/poly') => ('p', 'T', 'co.NP', 'NEXP/poly')
('p', 'AA', 'co.NP', 'NEXP/poly') => ('p', 'EA', 'co.NP', 'NEXP/poly')
('p', 'AA', 'co.NP/poly', 'NEXP/poly') => ('p', 'T', 'co.NP/poly', 'NEXP/poly')
('p', 'AA', 'co.NP/poly', 'NEXP/poly') => ('p', 'EA', 'co.NP/poly', 'NEXP/poly')
('p', 'AA', 'NP/poly', 'NEXP/poly') => ('p', 'T', 'NP/poly', 'NEXP/poly')
('p', 'AA', 'NP/poly', 'NEXP/poly') => ('p', 'EA', 'NP/poly', 'NEXP/poly')
('p', 'AA', 'AM', 'NEXP/poly') => ('p', 'T', 'AM', 'NEXP/poly')
('p', 'AA', 'co.AM', 'NEXP/poly') => ('p', 'T', 'co.AM', 'NEXP/poly')
('p', 'A', 'AM', 'R') => ('p', 'R', 'AM', 'R')
('p', 'A', 'AM', 'R') => ('p', 'AA', 'AM', 'R')
('p', 'A', 'co.AM', 'R') => ('p', 'R', 'co.AM', 'R')
('p', 'A', 'co.AM', 'R') => ('p', 'AA', 'co.AM', 'R')
('p', 'A', 'co.AM', 'RE') => ('p', 'R', 'co.AM', 'RE')
('p', 'A', 'co.AM', 'RE') => ('p', 'AA', 'co.AM', 'RE')
('p', 'A', 'AM', 'co.RE') => ('p', 'R', 'AM', 'co.RE')
('p', 'A', 'AM', 'co.RE') => ('p', 'AA', 'AM', 'co.RE')
('p', 'AA', 'AM', 'co.RE') => ('p', 'T', 'AM', 'co.RE')
('p', 'AA', 'AM', 'co.RE') => ('p', 'EA', 'AM', 'co.RE')
('p', 'AA', 'co.AM', 'RE') => ('p', 'T', 'co.AM', 'RE')
('p', 'AA', 'co.AM', 'RE') => ('p', 'EA', 'co.AM', 'RE')
('p', 'A', 'co.AM', 'co.RE') => ('p', 'R', 'co.AM', 'co.RE')
('p', 'A', 'co.AM', 'co.RE') => ('p', 'AA', 'co.AM', 'co.RE')
('p', 'A', 'AM', 'RE') => ('p', 'R', 'AM', 'RE')
('p', 'A', 'AM', 'RE') => ('p', 'AA', 'AM', 'RE')
('p', 'AA', 'AM', 'RE') => ('p', 'T', 'AM', 'RE')
('p', 'AA', 'AM', 'RE') => ('p', 'EA', 'AM', 'RE')
('p', 'AA', 'AM', 'R') => ('p', 'T', 'AM', 'R')
('p', 'AA', 'AM', 'R') => ('p', 'EA', 'AM', 'R')
('p', 'AA', 'co.AM', 'R') => ('p', 'T', 'co.AM', 'R')
('p', 'AA', 'co.AM', 'R') => ('p', 'EA', 'co.AM', 'R')
('p', 'AA', 'co.AM', 'co.RE') => ('p', 'T', 'co.AM', 'co.RE')
('p', 'AA', 'co.AM', 'co.RE') => ('p', 'EA', 'co.AM', 'co.RE')
('p', 'AA', 'AM', 'NEXP') => ('p', 'T', 'AM', 'NEXP')
('p', 'AA', 'AM', 'NEXP') => ('p', 'EA', 'AM', 'NEXP')
('p', 'AA', 'co.AM', 'co.NEXP') => ('p', 'T', 'co.AM', 'co.NEXP')
('p', 'AA', 'co.AM', 'co.NEXP') => ('p', 'EA', 'co.AM', 'co.NEXP')
('-d', 'A', 'co.AM', 'PSPACE/poly') => ('-d', 'R', 'co.AM', 'PSPACE/poly')
('-d', 'A', 'co.AM', 'PSPACE/poly') => ('-d', 'AA', 'co.AM', 'PSPACE/poly')
('-d', 'A', 'AM', 'PSPACE/poly') => ('-d', 'R', 'AM', 'PSPACE/poly')
('-d', 'A', 'AM', 'PSPACE/poly') => ('-d', 'AA', 'AM', 'PSPACE/poly')
('-d', 'A', 'NP/poly', 'PSPACE/poly') => ('-d', 'R', 'NP/poly', 'PSPACE/poly')
('-d', 'A', 'NP/poly', 'PSPACE/poly') => ('-d', 'AA', 'NP/poly', 'PSPACE/poly')
('-d', 'A', 'co.NP/poly', 'PSPACE/poly') => ('-d', 'R', 'co.NP/poly', 'PSPACE/poly')
('-d', 'A', 'co.NP/poly', 'PSPACE/poly') => ('-d', 'AA', 'co.NP/poly', 'PSPACE/poly')
('-d', 'A', 'cocap.NP/poly', 'PSPACE/poly') => ('-d', 'R', 'cocap.NP/poly', 'PSPACE/poly')
('-d', 'A', 'cocap.NP/poly', 'PSPACE/poly') => ('-d', 'AA', 'cocap.NP/poly', 'PSPACE/poly')
('-d', 'A', 'cocap.NP', 'PSPACE/poly') => ('-d', 'R', 'cocap.NP', 'PSPACE/poly')
('-d', 'A', 'cocap.NP', 'PSPACE/poly') => ('-d', 'AA', 'cocap.NP', 'PSPACE/poly')
('-d', 'A', '(NP-cap-coNP)/poly', 'PSPACE/poly') => ('-d', 'R', '(NP-cap-coNP)/poly', 'PSPACE/poly')
('-d', 'A', '(NP-cap-coNP)/poly', 'PSPACE/poly') => ('-d', 'AA', '(NP-cap-coNP)/poly', 'PSPACE/poly')
('-d', 'A', 'ZPP', 'PSPACE/poly') => ('-d', 'R', 'ZPP', 'PSPACE/poly')
('-d', 'A', 'ZPP', 'PSPACE/poly') => ('-d', 'AA', 'ZPP', 'PSPACE/poly')
('-d', 'AA', 'ZPP', 'PSPACE/poly') => ('-d', 'T', 'ZPP', 'PSPACE/poly')
('-d', 'AA', 'ZPP', 'PSPACE/poly') => ('-d', 'EA', 'ZPP', 'PSPACE/poly')
('-d', 'AA', '(NP-cap-coNP)/poly', 'PSPACE/poly') => ('-d', 'T', '(NP-cap-coNP)/poly', 'PSPACE/poly')
('-d', 'AA', '(NP-cap-coNP)/poly', 'PSPACE/poly') => ('-d', 'EA', '(NP-cap-coNP)/poly', 'PSPACE/poly')
('-d', 'AA', 'cocap.NP', 'PSPACE/poly') => ('-d', 'T', 'cocap.NP', 'PSPACE/poly')
('-d', 'AA', 'cocap.NP', 'PSPACE/poly') => ('-d', 'EA', 'cocap.NP', 'PSPACE/poly')
('-d', 'AA', 'cocap.NP/poly', 'PSPACE/poly') => ('-d', 'T', 'cocap.NP/poly', 'PSPACE/poly')
('-d', 'AA', 'cocap.NP/poly', 'PSPACE/poly') => ('-d', 'EA', 'cocap.NP/poly', 'PSPACE/poly')
('-d', 'A', 'co.NP', 'PSPACE/poly') => ('-d', 'R', 'co.NP', 'PSPACE/poly')
('-d', 'A', 'co.NP', 'PSPACE/poly') => ('-d', 'AA', 'co.NP', 'PSPACE/poly')
('-d', 'A', 'NP', 'PSPACE/poly') => ('-d', 'R', 'NP', 'PSPACE/poly')
('-d', 'A', 'NP', 'PSPACE/poly') => ('-d', 'AA', 'NP', 'PSPACE/poly')
('-d', 'A', 'RP', 'PSPACE/poly') => ('-d', 'R', 'RP', 'PSPACE/poly')
('-d', 'A', 'RP', 'PSPACE/poly') => ('-d', 'AA', 'RP', 'PSPACE/poly')
('-d', 'A', 'co.RP', 'PSPACE/poly') => ('-d', 'R', 'co.RP', 'PSPACE/poly')
('-d', 'A', 'co.RP', 'PSPACE/poly') => ('-d', 'AA', 'co.RP', 'PSPACE/poly')
('-d', 'AA', 'co.RP', 'PSPACE/poly') => ('-d', 'T', 'co.RP', 'PSPACE/poly')
('-d', 'AA', 'co.RP', 'PSPACE/poly') => ('-d', 'EA', 'co.RP', 'PSPACE/poly')
('-d', 'AA', 'RP', 'PSPACE/poly') => ('-d', 'T', 'RP', 'PSPACE/poly')
('-d', 'AA', 'RP', 'PSPACE/poly') => ('-d', 'EA', 'RP', 'PSPACE/poly')
('-d', 'AA', 'NP', 'PSPACE/poly') => ('-d', 'T', 'NP', 'PSPACE/poly')
('-d', 'AA', 'NP', 'PSPACE/poly') => ('-d', 'EA', 'NP', 'PSPACE/poly')
('-d', 'AA', 'co.NP', 'PSPACE/poly') => ('-d', 'T', 'co.NP', 'PSPACE/poly')
('-d', 'AA', 'co.NP', 'PSPACE/poly') => ('-d', 'EA', 'co.NP', 'PSPACE/poly')
('-d', 'AA', 'co.NP/poly', 'PSPACE/poly') => ('-d', 'T', 'co.NP/poly', 'PSPACE/poly')
('-d', 'AA', 'co.NP/poly', 'PSPACE/poly') => ('-d', 'EA', 'co.NP/poly', 'PSPACE/poly')
('-d', 'AA', 'NP/poly', 'PSPACE/poly') => ('-d', 'T', 'NP/poly', 'PSPACE/poly')
('-d', 'AA', 'NP/poly', 'PSPACE/poly') => ('-d', 'EA', 'NP/poly', 'PSPACE/poly')
('-d', 'AA', 'AM', 'PSPACE/poly') => ('-d', 'T', 'AM', 'PSPACE/poly')
('-d', 'AA', 'co.AM', 'PSPACE/poly') => ('-d', 'T', 'co.AM', 'PSPACE/poly')
('p', 'A', 'co.AM', 'PSPACE/poly') => ('p', 'R', 'co.AM', 'PSPACE/poly')
('p', 'A', 'co.AM', 'PSPACE/poly') => ('p', 'AA', 'co.AM', 'PSPACE/poly')
('p', 'A', 'AM', 'PSPACE/poly') => ('p', 'R', 'AM', 'PSPACE/poly')
('p', 'A', 'AM', 'PSPACE/poly') => ('p', 'AA', 'AM', 'PSPACE/poly')
('p', 'A', 'NP/poly', 'PSPACE/poly') => ('p', 'R', 'NP/poly', 'PSPACE/poly')
('p', 'A', 'NP/poly', 'PSPACE/poly') => ('p', 'AA', 'NP/poly', 'PSPACE/poly')
('p', 'A', 'co.NP/poly', 'PSPACE/poly') => ('p', 'R', 'co.NP/poly', 'PSPACE/poly')
('p', 'A', 'co.NP/poly', 'PSPACE/poly') => ('p', 'AA', 'co.NP/poly', 'PSPACE/poly')
('p', 'A', 'cocap.NP/poly', 'PSPACE/poly') => ('p', 'R', 'cocap.NP/poly', 'PSPACE/poly')
('p', 'A', 'cocap.NP/poly', 'PSPACE/poly') => ('p', 'AA', 'cocap.NP/poly', 'PSPACE/poly')
('p', 'A', 'cocap.NP', 'PSPACE/poly') => ('p', 'R', 'cocap.NP', 'PSPACE/poly')
('p', 'A', 'cocap.NP', 'PSPACE/poly') => ('p', 'AA', 'cocap.NP', 'PSPACE/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'PSPACE/poly') => ('p', 'R', '(NP-cap-coNP)/poly', 'PSPACE/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'PSPACE/poly') => ('p', 'AA', '(NP-cap-coNP)/poly', 'PSPACE/poly')
('p', 'A', 'ZPP', 'PSPACE/poly') => ('p', 'R', 'ZPP', 'PSPACE/poly')
('p', 'A', 'ZPP', 'PSPACE/poly') => ('p', 'AA', 'ZPP', 'PSPACE/poly')
('p', 'AA', 'ZPP', 'PSPACE/poly') => ('p', 'T', 'ZPP', 'PSPACE/poly')
('p', 'AA', 'ZPP', 'PSPACE/poly') => ('p', 'EA', 'ZPP', 'PSPACE/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'PSPACE/poly') => ('p', 'T', '(NP-cap-coNP)/poly', 'PSPACE/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'PSPACE/poly') => ('p', 'EA', '(NP-cap-coNP)/poly', 'PSPACE/poly')
('p', 'AA', 'cocap.NP', 'PSPACE/poly') => ('p', 'T', 'cocap.NP', 'PSPACE/poly')
('p', 'AA', 'cocap.NP', 'PSPACE/poly') => ('p', 'EA', 'cocap.NP', 'PSPACE/poly')
('p', 'AA', 'cocap.NP/poly', 'PSPACE/poly') => ('p', 'T', 'cocap.NP/poly', 'PSPACE/poly')
('p', 'AA', 'cocap.NP/poly', 'PSPACE/poly') => ('p', 'EA', 'cocap.NP/poly', 'PSPACE/poly')
('p', 'A', 'co.NP', 'PSPACE/poly') => ('p', 'R', 'co.NP', 'PSPACE/poly')
('p', 'A', 'co.NP', 'PSPACE/poly') => ('p', 'AA', 'co.NP', 'PSPACE/poly')
('p', 'A', 'NP', 'PSPACE/poly') => ('p', 'R', 'NP', 'PSPACE/poly')
('p', 'A', 'NP', 'PSPACE/poly') => ('p', 'AA', 'NP', 'PSPACE/poly')
('p', 'A', 'RP', 'PSPACE/poly') => ('p', 'R', 'RP', 'PSPACE/poly')
('p', 'A', 'RP', 'PSPACE/poly') => ('p', 'AA', 'RP', 'PSPACE/poly')
('p', 'A', 'co.RP', 'PSPACE/poly') => ('p', 'R', 'co.RP', 'PSPACE/poly')
('p', 'A', 'co.RP', 'PSPACE/poly') => ('p', 'AA', 'co.RP', 'PSPACE/poly')
('p', 'AA', 'co.RP', 'PSPACE/poly') => ('p', 'T', 'co.RP', 'PSPACE/poly')
('p', 'AA', 'co.RP', 'PSPACE/poly') => ('p', 'EA', 'co.RP', 'PSPACE/poly')
('p', 'AA', 'RP', 'PSPACE/poly') => ('p', 'T', 'RP', 'PSPACE/poly')
('p', 'AA', 'RP', 'PSPACE/poly') => ('p', 'EA', 'RP', 'PSPACE/poly')
('p', 'AA', 'NP', 'PSPACE/poly') => ('p', 'T', 'NP', 'PSPACE/poly')
('p', 'AA', 'NP', 'PSPACE/poly') => ('p', 'EA', 'NP', 'PSPACE/poly')
('p', 'AA', 'co.NP', 'PSPACE/poly') => ('p', 'T', 'co.NP', 'PSPACE/poly')
('p', 'AA', 'co.NP', 'PSPACE/poly') => ('p', 'EA', 'co.NP', 'PSPACE/poly')
('p', 'AA', 'co.NP/poly', 'PSPACE/poly') => ('p', 'T', 'co.NP/poly', 'PSPACE/poly')
('p', 'AA', 'co.NP/poly', 'PSPACE/poly') => ('p', 'EA', 'co.NP/poly', 'PSPACE/poly')
('p', 'AA', 'NP/poly', 'PSPACE/poly') => ('p', 'T', 'NP/poly', 'PSPACE/poly')
('p', 'AA', 'NP/poly', 'PSPACE/poly') => ('p', 'EA', 'NP/poly', 'PSPACE/poly')
('p', 'AA', 'AM', 'PSPACE/poly') => ('p', 'T', 'AM', 'PSPACE/poly')
('p', 'AA', 'co.AM', 'PSPACE/poly') => ('p', 'T', 'co.AM', 'PSPACE/poly')
('-d', 'A', 'co.AM', 'PSPACE') => ('-d', 'R', 'co.AM', 'PSPACE')
('-d', 'A', 'co.AM', 'PSPACE') => ('-d', 'AA', 'co.AM', 'PSPACE')
('-d', 'A', 'AM', 'PSPACE') => ('-d', 'R', 'AM', 'PSPACE')
('-d', 'A', 'AM', 'PSPACE') => ('-d', 'AA', 'AM', 'PSPACE')
('-d', 'AA', 'AM', 'PSPACE') => ('-d', 'T', 'AM', 'PSPACE')
('-d', 'AA', 'AM', 'PSPACE') => ('-d', 'EA', 'AM', 'PSPACE')
('-d', 'AA', 'co.AM', 'PSPACE') => ('-d', 'T', 'co.AM', 'PSPACE')
('-d', 'AA', 'co.AM', 'PSPACE') => ('-d', 'EA', 'co.AM', 'PSPACE')
('p', 'A', 'co.AM', 'PSPACE') => ('p', 'R', 'co.AM', 'PSPACE')
('p', 'A', 'co.AM', 'PSPACE') => ('p', 'AA', 'co.AM', 'PSPACE')
('p', 'A', 'AM', 'PSPACE') => ('p', 'R', 'AM', 'PSPACE')
('p', 'A', 'AM', 'PSPACE') => ('p', 'AA', 'AM', 'PSPACE')
('p', 'AA', 'AM', 'PSPACE') => ('p', 'T', 'AM', 'PSPACE')
('p', 'AA', 'AM', 'PSPACE') => ('p', 'EA', 'AM', 'PSPACE')
('p', 'AA', 'co.AM', 'PSPACE') => ('p', 'T', 'co.AM', 'PSPACE')
('p', 'AA', 'co.AM', 'PSPACE') => ('p', 'EA', 'co.AM', 'PSPACE')
('-d', 'A', 'co.AM', 'co.QMIP_cme') => ('-d', 'R', 'co.AM', 'co.QMIP_cme')
('-d', 'A', 'co.AM', 'co.QMIP_cme') => ('-d', 'AA', 'co.AM', 'co.QMIP_cme')
('-d', 'A', 'AM', 'QMIP_cme') => ('-d', 'R', 'AM', 'QMIP_cme')
('-d', 'A', 'AM', 'QMIP_cme') => ('-d', 'AA', 'AM', 'QMIP_cme')
('-d', 'AA', 'AM', 'QMIP_cme') => ('-d', 'T', 'AM', 'QMIP_cme')
('-d', 'AA', 'AM', 'QMIP_cme') => ('-d', 'EA', 'AM', 'QMIP_cme')
('-d', 'AA', 'co.AM', 'co.QMIP_cme') => ('-d', 'T', 'co.AM', 'co.QMIP_cme')
('-d', 'AA', 'co.AM', 'co.QMIP_cme') => ('-d', 'EA', 'co.AM', 'co.QMIP_cme')
('p', 'A', 'co.AM', 'co.QMIP_cme') => ('p', 'R', 'co.AM', 'co.QMIP_cme')
('p', 'A', 'co.AM', 'co.QMIP_cme') => ('p', 'AA', 'co.AM', 'co.QMIP_cme')
('p', 'A', 'AM', 'QMIP_cme') => ('p', 'R', 'AM', 'QMIP_cme')
('p', 'A', 'AM', 'QMIP_cme') => ('p', 'AA', 'AM', 'QMIP_cme')
('p', 'AA', 'AM', 'QMIP_cme') => ('p', 'T', 'AM', 'QMIP_cme')
('p', 'AA', 'AM', 'QMIP_cme') => ('p', 'EA', 'AM', 'QMIP_cme')
('p', 'AA', 'co.AM', 'co.QMIP_cme') => ('p', 'T', 'co.AM', 'co.QMIP_cme')
('p', 'AA', 'co.AM', 'co.QMIP_cme') => ('p', 'EA', 'co.AM', 'co.QMIP_cme')
('-d', 'A', 'co.AM', 'co.QIP') => ('-d', 'R', 'co.AM', 'co.QIP')
('-d', 'A', 'co.AM', 'co.QIP') => ('-d', 'AA', 'co.AM', 'co.QIP')
('-d', 'A', 'AM', 'QIP') => ('-d', 'R', 'AM', 'QIP')
('-d', 'A', 'AM', 'QIP') => ('-d', 'AA', 'AM', 'QIP')
('-d', 'A', 'AM', 'QMIP_ne') => ('-d', 'R', 'AM', 'QMIP_ne')
('-d', 'A', 'AM', 'QMIP_ne') => ('-d', 'AA', 'AM', 'QMIP_ne')
('-d', 'A', 'co.AM', 'co.QMIP_ne') => ('-d', 'R', 'co.AM', 'co.QMIP_ne')
('-d', 'A', 'co.AM', 'co.QMIP_ne') => ('-d', 'AA', 'co.AM', 'co.QMIP_ne')
('-d', 'AA', 'co.AM', 'co.QMIP_ne') => ('-d', 'T', 'co.AM', 'co.QMIP_ne')
('-d', 'AA', 'co.AM', 'co.QMIP_ne') => ('-d', 'EA', 'co.AM', 'co.QMIP_ne')
('-d', 'AA', 'AM', 'QMIP_ne') => ('-d', 'T', 'AM', 'QMIP_ne')
('-d', 'AA', 'AM', 'QMIP_ne') => ('-d', 'EA', 'AM', 'QMIP_ne')
('-d', 'AA', 'AM', 'QIP') => ('-d', 'T', 'AM', 'QIP')
('-d', 'AA', 'AM', 'QIP') => ('-d', 'EA', 'AM', 'QIP')
('-d', 'AA', 'co.AM', 'co.QIP') => ('-d', 'T', 'co.AM', 'co.QIP')
('-d', 'AA', 'co.AM', 'co.QIP') => ('-d', 'EA', 'co.AM', 'co.QIP')
('p', 'A', 'co.AM', 'co.QIP') => ('p', 'R', 'co.AM', 'co.QIP')
('p', 'A', 'co.AM', 'co.QIP') => ('p', 'AA', 'co.AM', 'co.QIP')
('p', 'A', 'AM', 'QIP') => ('p', 'R', 'AM', 'QIP')
('p', 'A', 'AM', 'QIP') => ('p', 'AA', 'AM', 'QIP')
('p', 'A', 'AM', 'QMIP_ne') => ('p', 'R', 'AM', 'QMIP_ne')
('p', 'A', 'AM', 'QMIP_ne') => ('p', 'AA', 'AM', 'QMIP_ne')
('p', 'A', 'co.AM', 'co.QMIP_ne') => ('p', 'R', 'co.AM', 'co.QMIP_ne')
('p', 'A', 'co.AM', 'co.QMIP_ne') => ('p', 'AA', 'co.AM', 'co.QMIP_ne')
('p', 'AA', 'co.AM', 'co.QMIP_ne') => ('p', 'T', 'co.AM', 'co.QMIP_ne')
('p', 'AA', 'co.AM', 'co.QMIP_ne') => ('p', 'EA', 'co.AM', 'co.QMIP_ne')
('p', 'AA', 'AM', 'QMIP_ne') => ('p', 'T', 'AM', 'QMIP_ne')
('p', 'AA', 'AM', 'QMIP_ne') => ('p', 'EA', 'AM', 'QMIP_ne')
('p', 'AA', 'AM', 'QIP') => ('p', 'T', 'AM', 'QIP')
('p', 'AA', 'AM', 'QIP') => ('p', 'EA', 'AM', 'QIP')
('p', 'AA', 'co.AM', 'co.QIP') => ('p', 'T', 'co.AM', 'co.QIP')
('p', 'AA', 'co.AM', 'co.QIP') => ('p', 'EA', 'co.AM', 'co.QIP')
('-d', 'A', 'co.AM', 'co.MIP*_cme') => ('-d', 'R', 'co.AM', 'co.MIP*_cme')
('-d', 'A', 'co.AM', 'co.MIP*_cme') => ('-d', 'AA', 'co.AM', 'co.MIP*_cme')
('-d', 'A', 'AM', 'MIP*_cme') => ('-d', 'R', 'AM', 'MIP*_cme')
('-d', 'A', 'AM', 'MIP*_cme') => ('-d', 'AA', 'AM', 'MIP*_cme')
('-d', 'AA', 'AM', 'MIP*_cme') => ('-d', 'T', 'AM', 'MIP*_cme')
('-d', 'AA', 'AM', 'MIP*_cme') => ('-d', 'EA', 'AM', 'MIP*_cme')
('-d', 'AA', 'co.AM', 'co.MIP*_cme') => ('-d', 'T', 'co.AM', 'co.MIP*_cme')
('-d', 'AA', 'co.AM', 'co.MIP*_cme') => ('-d', 'EA', 'co.AM', 'co.MIP*_cme')
('p', 'A', 'co.AM', 'co.MIP*_cme') => ('p', 'R', 'co.AM', 'co.MIP*_cme')
('p', 'A', 'co.AM', 'co.MIP*_cme') => ('p', 'AA', 'co.AM', 'co.MIP*_cme')
('p', 'A', 'AM', 'MIP*_cme') => ('p', 'R', 'AM', 'MIP*_cme')
('p', 'A', 'AM', 'MIP*_cme') => ('p', 'AA', 'AM', 'MIP*_cme')
('p', 'AA', 'AM', 'MIP*_cme') => ('p', 'T', 'AM', 'MIP*_cme')
('p', 'AA', 'AM', 'MIP*_cme') => ('p', 'EA', 'AM', 'MIP*_cme')
('p', 'AA', 'co.AM', 'co.MIP*_cme') => ('p', 'T', 'co.AM', 'co.MIP*_cme')
('p', 'AA', 'co.AM', 'co.MIP*_cme') => ('p', 'EA', 'co.AM', 'co.MIP*_cme')
('p', 'AA', 'co.AM', 'co.IP') => ('-d', 'AA', 'co.AM', 'co.IP')
('p', 'AA', 'co.AM', 'co.IP') => ('p', 'T', 'co.AM', 'co.IP')
('p', 'AA', 'co.AM', 'co.IP') => ('p', 'EA', 'co.AM', 'co.IP')
('p', 'AA', 'AM', 'IP') => ('-d', 'AA', 'AM', 'IP')
('p', 'AA', 'AM', 'IP') => ('p', 'T', 'AM', 'IP')
('p', 'AA', 'AM', 'IP') => ('p', 'EA', 'AM', 'IP')
('p', 'EA', 'AM', 'IP') => ('-d', 'EA', 'AM', 'IP')
('p', 'EA', 'AM', 'IP') => ('p', 'E', 'AM', 'IP')
('p', 'EA', 'co.AM', 'co.IP') => ('-d', 'EA', 'co.AM', 'co.IP')
('p', 'EA', 'co.AM', 'co.IP') => ('p', 'E', 'co.AM', 'co.IP')
('p', 'E', 'co.AM', 'co.IP') => ('-d', 'E', 'co.AM', 'co.IP')
('p', 'E', 'AM', 'IP') => ('-d', 'E', 'AM', 'IP')
('p', 'T', 'AM', 'IP') => ('-d', 'T', 'AM', 'IP')
('p', 'T', 'co.AM', 'co.IP') => ('-d', 'T', 'co.AM', 'co.IP')
('p', 'R', 'co.AM', 'co.IP') => ('-d', 'R', 'co.AM', 'co.IP')
('p', 'R', 'AM', 'IP') => ('-d', 'R', 'AM', 'IP')
('p', 'A', 'BQP', 'QCMA') => ('-d', 'A', 'BQP', 'QCMA')
('p', 'A', 'BQP', 'QCMA') => ('p', 'R', 'BQP', 'QCMA')
('p', 'A', 'BQP', 'QCMA') => ('p', 'AA', 'BQP', 'QCMA')
('p', 'A', 'BQP', 'co.QCMA') => ('-d', 'A', 'BQP', 'co.QCMA')
('p', 'A', 'BQP', 'co.QCMA') => ('p', 'R', 'BQP', 'co.QCMA')
('p', 'A', 'BQP', 'co.QCMA') => ('p', 'AA', 'BQP', 'co.QCMA')
('p', 'A', 'BQP', 'cocap.QCMA') => ('-d', 'A', 'BQP', 'cocap.QCMA')
('p', 'A', 'BQP', 'cocap.QCMA') => ('p', 'R', 'BQP', 'cocap.QCMA')
('p', 'A', 'BQP', 'cocap.QCMA') => ('p', 'AA', 'BQP', 'cocap.QCMA')
('d', 'A', 'cocap.QCMA', 'P') => ('-p', 'A', 'cocap.QCMA', 'P')
('d', 'A', 'QCMA', 'P') => ('-p', 'A', 'QCMA', 'P')
('d', 'A', 'co.QCMA', 'P') => ('-p', 'A', 'co.QCMA', 'P')
('d', 'A', 'cocap.QCMA', 'SZK') => ('-p', 'A', 'cocap.QCMA', 'SZK')
('d', 'A', 'QCMA', 'SZK') => ('-p', 'A', 'QCMA', 'SZK')
('d', 'A', 'co.QCMA', 'SZK') => ('-p', 'A', 'co.QCMA', 'SZK')
('-d', 'A', 'BQP', 'QCMA') => ('-d', 'R', 'BQP', 'QCMA')
('-d', 'A', 'BQP', 'QCMA') => ('-d', 'AA', 'BQP', 'QCMA')
('-d', 'A', 'BQP', 'cocap.QCMA') => ('-d', 'R', 'BQP', 'cocap.QCMA')
('-d', 'A', 'BQP', 'cocap.QCMA') => ('-d', 'AA', 'BQP', 'cocap.QCMA')
('-d', 'A', 'BQP', 'co.QCMA') => ('-d', 'R', 'BQP', 'co.QCMA')
('-d', 'A', 'BQP', 'co.QCMA') => ('-d', 'AA', 'BQP', 'co.QCMA')
('-d', 'AA', 'BQP', 'co.QCMA') => ('-d', 'T', 'BQP', 'co.QCMA')
('-d', 'AA', 'BQP', 'co.QCMA') => ('-d', 'EA', 'BQP', 'co.QCMA')
('-d', 'AA', 'BQP', 'QCMA') => ('-d', 'T', 'BQP', 'QCMA')
('-d', 'AA', 'BQP', 'QCMA') => ('-d', 'EA', 'BQP', 'QCMA')
('-d', 'AA', 'BQP', 'cocap.QCMA') => ('-d', 'T', 'BQP', 'cocap.QCMA')
('-d', 'AA', 'BQP', 'cocap.QCMA') => ('-d', 'EA', 'BQP', 'cocap.QCMA')
('p', 'AA', 'BQP', 'cocap.QCMA') => ('p', 'T', 'BQP', 'cocap.QCMA')
('p', 'AA', 'BQP', 'cocap.QCMA') => ('p', 'EA', 'BQP', 'cocap.QCMA')
('p', 'AA', 'BQP', 'QCMA') => ('p', 'T', 'BQP', 'QCMA')
('p', 'AA', 'BQP', 'QCMA') => ('p', 'EA', 'BQP', 'QCMA')
('p', 'AA', 'BQP', 'co.QCMA') => ('p', 'T', 'BQP', 'co.QCMA')
('p', 'AA', 'BQP', 'co.QCMA') => ('p', 'EA', 'BQP', 'co.QCMA')
('-d', 'R', 'BQP', 'BPP') => ('-d', 'E', 'BQP', 'BPP')
('-d', 'R', 'BQP', 'P^Sharp-P') => ('-d', 'E', 'BQP', 'P^Sharp-P')
('-d', 'R', 'BQP', 'SZK') => ('-d', 'E', 'BQP', 'SZK')
('-d', 'R', 'BQP', 'PSPACE/poly') => ('-d', 'E', 'BQP', 'PSPACE/poly')
('-d', 'R', 'BQP', 'PSPACE') => ('-d', 'E', 'BQP', 'PSPACE')
('-d', 'R', 'BQP', 'QSZK') => ('-d', 'E', 'BQP', 'QSZK')
('-d', 'R', 'BQP', 'P/poly') => ('-d', 'E', 'BQP', 'P/poly')
('-d', 'R', 'BQP', 'PP/poly') => ('-d', 'E', 'BQP', 'PP/poly')
('-d', 'R', 'BQP', 'PP') => ('-d', 'E', 'BQP', 'PP')
('p', 'A', 'BQP', 'QSZK') => ('-d', 'A', 'BQP', 'QSZK')
('p', 'A', 'BQP', 'QSZK') => ('p', 'R', 'BQP', 'QSZK')
('p', 'A', 'BQP', 'QSZK') => ('p', 'AA', 'BQP', 'QSZK')
('d', 'A', 'QSZK', 'P') => ('-p', 'A', 'QSZK', 'P')
('d', 'A', 'QSZK', 'SZK') => ('-p', 'A', 'QSZK', 'SZK')
('-d', 'A', 'BQP', 'PSPACE/poly') => ('-d', 'AA', 'BQP', 'PSPACE/poly')
('-d', 'AA', 'BQP', 'PSPACE/poly') => ('-d', 'T', 'BQP', 'PSPACE/poly')
('-d', 'AA', 'BQP', 'PSPACE/poly') => ('-d', 'EA', 'BQP', 'PSPACE/poly')
('p', 'A', 'BQP', 'PSPACE/poly') => ('p', 'R', 'BQP', 'PSPACE/poly')
('p', 'A', 'BQP', 'PSPACE/poly') => ('p', 'AA', 'BQP', 'PSPACE/poly')
('p', 'AA', 'BQP', 'PSPACE/poly') => ('p', 'T', 'BQP', 'PSPACE/poly')
('p', 'AA', 'BQP', 'PSPACE/poly') => ('p', 'EA', 'BQP', 'PSPACE/poly')
('-d', 'A', 'BQP', 'PSPACE') => ('-d', 'AA', 'BQP', 'PSPACE')
('-d', 'AA', 'BQP', 'PSPACE') => ('-d', 'T', 'BQP', 'PSPACE')
('-d', 'AA', 'BQP', 'PSPACE') => ('-d', 'EA', 'BQP', 'PSPACE')
('p', 'A', 'BQP', 'PSPACE') => ('p', 'R', 'BQP', 'PSPACE')
('p', 'A', 'BQP', 'PSPACE') => ('p', 'AA', 'BQP', 'PSPACE')
('p', 'AA', 'BQP', 'PSPACE') => ('p', 'T', 'BQP', 'PSPACE')
('p', 'AA', 'BQP', 'PSPACE') => ('p', 'EA', 'BQP', 'PSPACE')
('d', 'A', 'QSZK', 'PostBPP') => ('-p', 'A', 'QSZK', 'PostBPP')
('p', 'AA', 'BQP', 'QSZK') => ('-d', 'AA', 'BQP', 'QSZK')
('p', 'AA', 'BQP', 'QSZK') => ('p', 'T', 'BQP', 'QSZK')
('p', 'AA', 'BQP', 'QSZK') => ('p', 'EA', 'BQP', 'QSZK')
('p', 'EA', 'BQP', 'QSZK') => ('-d', 'EA', 'BQP', 'QSZK')
('p', 'EA', 'BQP', 'QSZK') => ('p', 'E', 'BQP', 'QSZK')
('p', 'T', 'BQP', 'QSZK') => ('-d', 'T', 'BQP', 'QSZK')
('p', 'A', 'Sigma_2P', 'Delta_3P') => ('-d', 'A', 'Sigma_2P', 'Delta_3P')
('p', 'A', 'Sigma_2P', 'Delta_3P') => ('p', 'R', 'Sigma_2P', 'Delta_3P')
('p', 'A', 'Sigma_2P', 'Delta_3P') => ('p', 'AA', 'Sigma_2P', 'Delta_3P')
('p', 'A', 'co.Sigma_2P', 'Delta_3P') => ('-d', 'A', 'co.Sigma_2P', 'Delta_3P')
('p', 'A', 'co.Sigma_2P', 'Delta_3P') => ('p', 'R', 'co.Sigma_2P', 'Delta_3P')
('p', 'A', 'co.Sigma_2P', 'Delta_3P') => ('p', 'AA', 'co.Sigma_2P', 'Delta_3P')
('p', 'A', 'cocap.Sigma_2P', 'Delta_3P') => ('-d', 'A', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'A', 'cocap.Sigma_2P', 'Delta_3P') => ('p', 'R', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'A', 'cocap.Sigma_2P', 'Delta_3P') => ('p', 'AA', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'E', 'RP', 'Delta_3P') => ('-d', 'E', 'RP', 'Delta_3P')
('p', 'E', 'co.RP', 'Delta_3P') => ('-d', 'E', 'co.RP', 'Delta_3P')
('p', 'E', 'ZPP', 'Delta_3P') => ('-d', 'E', 'ZPP', 'Delta_3P')
('p', 'A', 'RP', 'Delta_3P') => ('-d', 'A', 'RP', 'Delta_3P')
('p', 'A', 'RP', 'Delta_3P') => ('p', 'R', 'RP', 'Delta_3P')
('p', 'A', 'RP', 'Delta_3P') => ('p', 'AA', 'RP', 'Delta_3P')
('p', 'A', 'co.RP', 'Delta_3P') => ('-d', 'A', 'co.RP', 'Delta_3P')
('p', 'A', 'co.RP', 'Delta_3P') => ('p', 'R', 'co.RP', 'Delta_3P')
('p', 'A', 'co.RP', 'Delta_3P') => ('p', 'AA', 'co.RP', 'Delta_3P')
('p', 'A', 'ZPP', 'Delta_3P') => ('-d', 'A', 'ZPP', 'Delta_3P')
('p', 'A', 'ZPP', 'Delta_3P') => ('p', 'R', 'ZPP', 'Delta_3P')
('p', 'A', 'ZPP', 'Delta_3P') => ('p', 'AA', 'ZPP', 'Delta_3P')
('p', 'AA', 'ZPP', 'Delta_3P') => ('-d', 'AA', 'ZPP', 'Delta_3P')
('p', 'AA', 'ZPP', 'Delta_3P') => ('p', 'T', 'ZPP', 'Delta_3P')
('p', 'AA', 'ZPP', 'Delta_3P') => ('p', 'EA', 'ZPP', 'Delta_3P')
('p', 'EA', 'ZPP', 'Delta_3P') => ('-d', 'EA', 'ZPP', 'Delta_3P')
('p', 'T', 'ZPP', 'Delta_3P') => ('-d', 'T', 'ZPP', 'Delta_3P')
('p', 'R', 'ZPP', 'Delta_3P') => ('-d', 'R', 'ZPP', 'Delta_3P')
('p', 'AA', 'co.RP', 'Delta_3P') => ('-d', 'AA', 'co.RP', 'Delta_3P')
('p', 'AA', 'co.RP', 'Delta_3P') => ('p', 'T', 'co.RP', 'Delta_3P')
('p', 'AA', 'co.RP', 'Delta_3P') => ('p', 'EA', 'co.RP', 'Delta_3P')
('p', 'AA', 'RP', 'Delta_3P') => ('-d', 'AA', 'RP', 'Delta_3P')
('p', 'AA', 'RP', 'Delta_3P') => ('p', 'T', 'RP', 'Delta_3P')
('p', 'AA', 'RP', 'Delta_3P') => ('p', 'EA', 'RP', 'Delta_3P')
('p', 'EA', 'RP', 'Delta_3P') => ('-d', 'EA', 'RP', 'Delta_3P')
('p', 'EA', 'co.RP', 'Delta_3P') => ('-d', 'EA', 'co.RP', 'Delta_3P')
('p', 'T', 'RP', 'Delta_3P') => ('-d', 'T', 'RP', 'Delta_3P')
('p', 'T', 'co.RP', 'Delta_3P') => ('-d', 'T', 'co.RP', 'Delta_3P')
('p', 'R', 'co.RP', 'Delta_3P') => ('-d', 'R', 'co.RP', 'Delta_3P')
('p', 'R', 'RP', 'Delta_3P') => ('-d', 'R', 'RP', 'Delta_3P')
('p', 'E', 'NP', 'Delta_3P') => ('-d', 'E', 'NP', 'Delta_3P')
('p', 'E', 'co.NP', 'Delta_3P') => ('-d', 'E', 'co.NP', 'Delta_3P')
('p', 'E', 'cocap.NP', 'Delta_3P') => ('-d', 'E', 'cocap.NP', 'Delta_3P')
('p', 'A', 'NP', 'Delta_3P') => ('-d', 'A', 'NP', 'Delta_3P')
('p', 'A', 'NP', 'Delta_3P') => ('p', 'R', 'NP', 'Delta_3P')
('p', 'A', 'NP', 'Delta_3P') => ('p', 'AA', 'NP', 'Delta_3P')
('p', 'A', 'co.NP', 'Delta_3P') => ('-d', 'A', 'co.NP', 'Delta_3P')
('p', 'A', 'co.NP', 'Delta_3P') => ('p', 'R', 'co.NP', 'Delta_3P')
('p', 'A', 'co.NP', 'Delta_3P') => ('p', 'AA', 'co.NP', 'Delta_3P')
('p', 'A', 'cocap.NP', 'Delta_3P') => ('-d', 'A', 'cocap.NP', 'Delta_3P')
('p', 'A', 'cocap.NP', 'Delta_3P') => ('p', 'R', 'cocap.NP', 'Delta_3P')
('p', 'A', 'cocap.NP', 'Delta_3P') => ('p', 'AA', 'cocap.NP', 'Delta_3P')
('p', 'AA', 'cocap.NP', 'Delta_3P') => ('-d', 'AA', 'cocap.NP', 'Delta_3P')
('p', 'AA', 'cocap.NP', 'Delta_3P') => ('p', 'T', 'cocap.NP', 'Delta_3P')
('p', 'AA', 'cocap.NP', 'Delta_3P') => ('p', 'EA', 'cocap.NP', 'Delta_3P')
('p', 'EA', 'cocap.NP', 'Delta_3P') => ('-d', 'EA', 'cocap.NP', 'Delta_3P')
('p', 'T', 'cocap.NP', 'Delta_3P') => ('-d', 'T', 'cocap.NP', 'Delta_3P')
('p', 'R', 'cocap.NP', 'Delta_3P') => ('-d', 'R', 'cocap.NP', 'Delta_3P')
('d', 'A', 'Delta_3P', 'BQP') => ('-p', 'A', 'Delta_3P', 'BQP')
('d', 'A', 'Delta_3P', 'BQP/mpoly') => ('-p', 'A', 'Delta_3P', 'BQP/mpoly')
('d', 'A', 'Delta_3P', 'BQP/qpoly') => ('-p', 'A', 'Delta_3P', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'Delta_3P') => ('-d', 'AA', 'co.NP', 'Delta_3P')
('p', 'AA', 'co.NP', 'Delta_3P') => ('p', 'T', 'co.NP', 'Delta_3P')
('p', 'AA', 'co.NP', 'Delta_3P') => ('p', 'EA', 'co.NP', 'Delta_3P')
('p', 'AA', 'NP', 'Delta_3P') => ('-d', 'AA', 'NP', 'Delta_3P')
('p', 'AA', 'NP', 'Delta_3P') => ('p', 'T', 'NP', 'Delta_3P')
('p', 'AA', 'NP', 'Delta_3P') => ('p', 'EA', 'NP', 'Delta_3P')
('p', 'EA', 'NP', 'Delta_3P') => ('-d', 'EA', 'NP', 'Delta_3P')
('p', 'EA', 'co.NP', 'Delta_3P') => ('-d', 'EA', 'co.NP', 'Delta_3P')
('p', 'T', 'NP', 'Delta_3P') => ('-d', 'T', 'NP', 'Delta_3P')
('p', 'T', 'co.NP', 'Delta_3P') => ('-d', 'T', 'co.NP', 'Delta_3P')
('p', 'R', 'co.NP', 'Delta_3P') => ('-d', 'R', 'co.NP', 'Delta_3P')
('p', 'R', 'NP', 'Delta_3P') => ('-d', 'R', 'NP', 'Delta_3P')
('p', 'E', 'Delta_2P', 'Delta_3P') => ('-d', 'E', 'Delta_2P', 'Delta_3P')
('p', 'A', 'Delta_2P', 'Delta_3P') => ('-d', 'A', 'Delta_2P', 'Delta_3P')
('p', 'A', 'Delta_2P', 'Delta_3P') => ('p', 'R', 'Delta_2P', 'Delta_3P')
('p', 'A', 'Delta_2P', 'Delta_3P') => ('p', 'AA', 'Delta_2P', 'Delta_3P')
('p', 'AA', 'Delta_2P', 'Delta_3P') => ('-d', 'AA', 'Delta_2P', 'Delta_3P')
('p', 'AA', 'Delta_2P', 'Delta_3P') => ('p', 'T', 'Delta_2P', 'Delta_3P')
('p', 'AA', 'Delta_2P', 'Delta_3P') => ('p', 'EA', 'Delta_2P', 'Delta_3P')
('p', 'EA', 'Delta_2P', 'Delta_3P') => ('-d', 'EA', 'Delta_2P', 'Delta_3P')
('p', 'T', 'Delta_2P', 'Delta_3P') => ('-d', 'T', 'Delta_2P', 'Delta_3P')
('p', 'R', 'Delta_2P', 'Delta_3P') => ('-d', 'R', 'Delta_2P', 'Delta_3P')
('p', 'AA', 'cocap.Sigma_2P', 'Delta_3P') => ('-d', 'AA', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'AA', 'cocap.Sigma_2P', 'Delta_3P') => ('p', 'T', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'AA', 'cocap.Sigma_2P', 'Delta_3P') => ('p', 'EA', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'EA', 'cocap.Sigma_2P', 'Delta_3P') => ('-d', 'EA', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'EA', 'cocap.Sigma_2P', 'Delta_3P') => ('p', 'E', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'E', 'cocap.Sigma_2P', 'Delta_3P') => ('-d', 'E', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'T', 'cocap.Sigma_2P', 'Delta_3P') => ('-d', 'T', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'R', 'cocap.Sigma_2P', 'Delta_3P') => ('-d', 'R', 'cocap.Sigma_2P', 'Delta_3P')
('p', 'AA', 'co.Sigma_2P', 'Delta_3P') => ('-d', 'AA', 'co.Sigma_2P', 'Delta_3P')
('p', 'AA', 'co.Sigma_2P', 'Delta_3P') => ('p', 'T', 'co.Sigma_2P', 'Delta_3P')
('p', 'AA', 'co.Sigma_2P', 'Delta_3P') => ('p', 'EA', 'co.Sigma_2P', 'Delta_3P')
('p', 'AA', 'Sigma_2P', 'Delta_3P') => ('-d', 'AA', 'Sigma_2P', 'Delta_3P')
('p', 'AA', 'Sigma_2P', 'Delta_3P') => ('p', 'T', 'Sigma_2P', 'Delta_3P')
('p', 'AA', 'Sigma_2P', 'Delta_3P') => ('p', 'EA', 'Sigma_2P', 'Delta_3P')
('p', 'EA', 'Sigma_2P', 'Delta_3P') => ('-d', 'EA', 'Sigma_2P', 'Delta_3P')
('p', 'EA', 'Sigma_2P', 'Delta_3P') => ('p', 'E', 'Sigma_2P', 'Delta_3P')
('p', 'EA', 'co.Sigma_2P', 'Delta_3P') => ('-d', 'EA', 'co.Sigma_2P', 'Delta_3P')
('p', 'EA', 'co.Sigma_2P', 'Delta_3P') => ('p', 'E', 'co.Sigma_2P', 'Delta_3P')
('p', 'E', 'co.Sigma_2P', 'Delta_3P') => ('-d', 'E', 'co.Sigma_2P', 'Delta_3P')
('p', 'E', 'Sigma_2P', 'Delta_3P') => ('-d', 'E', 'Sigma_2P', 'Delta_3P')
('p', 'T', 'Sigma_2P', 'Delta_3P') => ('-d', 'T', 'Sigma_2P', 'Delta_3P')
('p', 'T', 'co.Sigma_2P', 'Delta_3P') => ('-d', 'T', 'co.Sigma_2P', 'Delta_3P')
('p', 'R', 'co.Sigma_2P', 'Delta_3P') => ('-d', 'R', 'co.Sigma_2P', 'Delta_3P')
('p', 'R', 'Sigma_2P', 'Delta_3P') => ('-d', 'R', 'Sigma_2P', 'Delta_3P')
('p', 'A', 'S_2P', 'Sigma_2P') => ('-d', 'A', 'S_2P', 'Sigma_2P')
('p', 'A', 'S_2P', 'Sigma_2P') => ('p', 'R', 'S_2P', 'Sigma_2P')
('p', 'A', 'S_2P', 'Sigma_2P') => ('p', 'AA', 'S_2P', 'Sigma_2P')
('p', 'A', 'S_2P', 'co.Sigma_2P') => ('-d', 'A', 'S_2P', 'co.Sigma_2P')
('p', 'A', 'S_2P', 'co.Sigma_2P') => ('p', 'R', 'S_2P', 'co.Sigma_2P')
('p', 'A', 'S_2P', 'co.Sigma_2P') => ('p', 'AA', 'S_2P', 'co.Sigma_2P')
('p', 'A', 'S_2P', 'cocap.Sigma_2P') => ('-d', 'A', 'S_2P', 'cocap.Sigma_2P')
('p', 'A', 'S_2P', 'cocap.Sigma_2P') => ('p', 'R', 'S_2P', 'cocap.Sigma_2P')
('p', 'A', 'S_2P', 'cocap.Sigma_2P') => ('p', 'AA', 'S_2P', 'cocap.Sigma_2P')
('-d', 'A', 'S_2P', 'co.Sigma_2P') => ('-d', 'R', 'S_2P', 'co.Sigma_2P')
('-d', 'A', 'S_2P', 'co.Sigma_2P') => ('-d', 'AA', 'S_2P', 'co.Sigma_2P')
('-d', 'A', 'S_2P', 'cocap.Sigma_2P') => ('-d', 'R', 'S_2P', 'cocap.Sigma_2P')
('-d', 'A', 'S_2P', 'cocap.Sigma_2P') => ('-d', 'AA', 'S_2P', 'cocap.Sigma_2P')
('-d', 'A', 'S_2P', 'Delta_3P') => ('-d', 'R', 'S_2P', 'Delta_3P')
('-d', 'A', 'S_2P', 'Delta_3P') => ('-d', 'AA', 'S_2P', 'Delta_3P')
('-d', 'AA', 'S_2P', 'Delta_3P') => ('-d', 'T', 'S_2P', 'Delta_3P')
('-d', 'AA', 'S_2P', 'Delta_3P') => ('-d', 'EA', 'S_2P', 'Delta_3P')
('-d', 'A', 'S_2P', 'Sigma_2P') => ('-d', 'R', 'S_2P', 'Sigma_2P')
('-d', 'A', 'S_2P', 'Sigma_2P') => ('-d', 'AA', 'S_2P', 'Sigma_2P')
('-d', 'AA', 'S_2P', 'Sigma_2P') => ('-d', 'T', 'S_2P', 'Sigma_2P')
('-d', 'AA', 'S_2P', 'Sigma_2P') => ('-d', 'EA', 'S_2P', 'Sigma_2P')
('-d', 'AA', 'S_2P', 'co.Sigma_2P') => ('-d', 'T', 'S_2P', 'co.Sigma_2P')
('-d', 'AA', 'S_2P', 'co.Sigma_2P') => ('-d', 'EA', 'S_2P', 'co.Sigma_2P')
('-d', 'AA', 'S_2P', 'cocap.Sigma_2P') => ('-d', 'T', 'S_2P', 'cocap.Sigma_2P')
('-d', 'AA', 'S_2P', 'cocap.Sigma_2P') => ('-d', 'EA', 'S_2P', 'cocap.Sigma_2P')
('p', 'A', 'S_2P', 'Delta_3P') => ('p', 'R', 'S_2P', 'Delta_3P')
('p', 'A', 'S_2P', 'Delta_3P') => ('p', 'AA', 'S_2P', 'Delta_3P')
('p', 'AA', 'S_2P', 'Delta_3P') => ('p', 'T', 'S_2P', 'Delta_3P')
('p', 'AA', 'S_2P', 'Delta_3P') => ('p', 'EA', 'S_2P', 'Delta_3P')
('p', 'AA', 'S_2P', 'cocap.Sigma_2P') => ('p', 'T', 'S_2P', 'cocap.Sigma_2P')
('p', 'AA', 'S_2P', 'cocap.Sigma_2P') => ('p', 'EA', 'S_2P', 'cocap.Sigma_2P')
('p', 'AA', 'S_2P', 'co.Sigma_2P') => ('p', 'T', 'S_2P', 'co.Sigma_2P')
('p', 'AA', 'S_2P', 'co.Sigma_2P') => ('p', 'EA', 'S_2P', 'co.Sigma_2P')
('p', 'AA', 'S_2P', 'Sigma_2P') => ('p', 'T', 'S_2P', 'Sigma_2P')
('p', 'AA', 'S_2P', 'Sigma_2P') => ('p', 'EA', 'S_2P', 'Sigma_2P')
('p', 'A', 'MA', 'SBP') => ('-d', 'A', 'MA', 'SBP')
('p', 'A', 'MA', 'SBP') => ('p', 'R', 'MA', 'SBP')
('p', 'A', 'MA', 'SBP') => ('p', 'AA', 'MA', 'SBP')
('p', 'A', 'co.MA', 'co.SBP') => ('-d', 'A', 'co.MA', 'co.SBP')
('p', 'A', 'co.MA', 'co.SBP') => ('p', 'R', 'co.MA', 'co.SBP')
('p', 'A', 'co.MA', 'co.SBP') => ('p', 'AA', 'co.MA', 'co.SBP')
('p', 'A', 'cocap.MA', 'cocap.SBP') => ('-d', 'A', 'cocap.MA', 'cocap.SBP')
('p', 'A', 'cocap.MA', 'cocap.SBP') => ('p', 'R', 'cocap.MA', 'cocap.SBP')
('p', 'A', 'cocap.MA', 'cocap.SBP') => ('p', 'AA', 'cocap.MA', 'cocap.SBP')
('-d', 'A', 'cocap.MA', 'SBP') => ('-d', 'R', 'cocap.MA', 'SBP')
('-d', 'A', 'cocap.MA', 'SBP') => ('-d', 'AA', 'cocap.MA', 'SBP')
('-d', 'A', 'cocap.MA', 'co.SBP') => ('-d', 'R', 'cocap.MA', 'co.SBP')
('-d', 'A', 'cocap.MA', 'co.SBP') => ('-d', 'AA', 'cocap.MA', 'co.SBP')
('-d', 'A', 'cocap.MA', 'cocap.SBP') => ('-d', 'R', 'cocap.MA', 'cocap.SBP')
('-d', 'A', 'cocap.MA', 'cocap.SBP') => ('-d', 'AA', 'cocap.MA', 'cocap.SBP')
('-d', 'A', 'cocap.NP', 'cocap.SBP') => ('-d', 'R', 'cocap.NP', 'cocap.SBP')
('-d', 'A', 'cocap.NP', 'cocap.SBP') => ('-d', 'AA', 'cocap.NP', 'cocap.SBP')
('-d', 'A', 'cocap.NP', 'SBP') => ('-d', 'R', 'cocap.NP', 'SBP')
('-d', 'A', 'cocap.NP', 'SBP') => ('-d', 'AA', 'cocap.NP', 'SBP')
('-d', 'A', 'cocap.NP', 'co.SBP') => ('-d', 'R', 'cocap.NP', 'co.SBP')
('-d', 'A', 'cocap.NP', 'co.SBP') => ('-d', 'AA', 'cocap.NP', 'co.SBP')
('-d', 'A', 'ZPP', 'co.SBP') => ('-d', 'R', 'ZPP', 'co.SBP')
('-d', 'A', 'ZPP', 'co.SBP') => ('-d', 'AA', 'ZPP', 'co.SBP')
('-d', 'A', 'ZPP', 'SBP') => ('-d', 'R', 'ZPP', 'SBP')
('-d', 'A', 'ZPP', 'SBP') => ('-d', 'AA', 'ZPP', 'SBP')
('-d', 'A', 'ZPP', 'cocap.SBP') => ('-d', 'R', 'ZPP', 'cocap.SBP')
('-d', 'A', 'ZPP', 'cocap.SBP') => ('-d', 'AA', 'ZPP', 'cocap.SBP')
('-d', 'AA', 'ZPP', 'cocap.SBP') => ('-d', 'T', 'ZPP', 'cocap.SBP')
('-d', 'AA', 'ZPP', 'cocap.SBP') => ('-d', 'EA', 'ZPP', 'cocap.SBP')
('-d', 'AA', 'ZPP', 'SBP') => ('-d', 'T', 'ZPP', 'SBP')
('-d', 'AA', 'ZPP', 'SBP') => ('-d', 'EA', 'ZPP', 'SBP')
('-d', 'AA', 'ZPP', 'co.SBP') => ('-d', 'T', 'ZPP', 'co.SBP')
('-d', 'AA', 'ZPP', 'co.SBP') => ('-d', 'EA', 'ZPP', 'co.SBP')
('-d', 'AA', 'cocap.NP', 'co.SBP') => ('-d', 'T', 'cocap.NP', 'co.SBP')
('-d', 'AA', 'cocap.NP', 'co.SBP') => ('-d', 'EA', 'cocap.NP', 'co.SBP')
('-d', 'AA', 'cocap.NP', 'SBP') => ('-d', 'T', 'cocap.NP', 'SBP')
('-d', 'AA', 'cocap.NP', 'SBP') => ('-d', 'EA', 'cocap.NP', 'SBP')
('-d', 'AA', 'cocap.NP', 'cocap.SBP') => ('-d', 'T', 'cocap.NP', 'cocap.SBP')
('-d', 'AA', 'cocap.NP', 'cocap.SBP') => ('-d', 'EA', 'cocap.NP', 'cocap.SBP')
('-d', 'AA', 'cocap.MA', 'cocap.SBP') => ('-d', 'T', 'cocap.MA', 'cocap.SBP')
('-d', 'AA', 'cocap.MA', 'cocap.SBP') => ('-d', 'EA', 'cocap.MA', 'cocap.SBP')
('-d', 'AA', 'cocap.MA', 'SBP') => ('-d', 'T', 'cocap.MA', 'SBP')
('-d', 'AA', 'cocap.MA', 'SBP') => ('-d', 'EA', 'cocap.MA', 'SBP')
('-d', 'AA', 'cocap.MA', 'co.SBP') => ('-d', 'T', 'cocap.MA', 'co.SBP')
('-d', 'AA', 'cocap.MA', 'co.SBP') => ('-d', 'EA', 'cocap.MA', 'co.SBP')
('p', 'A', 'cocap.MA', 'SBP') => ('p', 'R', 'cocap.MA', 'SBP')
('p', 'A', 'cocap.MA', 'SBP') => ('p', 'AA', 'cocap.MA', 'SBP')
('p', 'A', 'cocap.MA', 'co.SBP') => ('p', 'R', 'cocap.MA', 'co.SBP')
('p', 'A', 'cocap.MA', 'co.SBP') => ('p', 'AA', 'cocap.MA', 'co.SBP')
('p', 'A', 'cocap.NP', 'co.SBP') => ('p', 'R', 'cocap.NP', 'co.SBP')
('p', 'A', 'cocap.NP', 'co.SBP') => ('p', 'AA', 'cocap.NP', 'co.SBP')
('p', 'A', 'cocap.NP', 'SBP') => ('p', 'R', 'cocap.NP', 'SBP')
('p', 'A', 'cocap.NP', 'SBP') => ('p', 'AA', 'cocap.NP', 'SBP')
('p', 'A', 'cocap.NP', 'cocap.SBP') => ('p', 'R', 'cocap.NP', 'cocap.SBP')
('p', 'A', 'cocap.NP', 'cocap.SBP') => ('p', 'AA', 'cocap.NP', 'cocap.SBP')
('p', 'A', 'ZPP', 'cocap.SBP') => ('p', 'R', 'ZPP', 'cocap.SBP')
('p', 'A', 'ZPP', 'cocap.SBP') => ('p', 'AA', 'ZPP', 'cocap.SBP')
('p', 'A', 'ZPP', 'SBP') => ('p', 'R', 'ZPP', 'SBP')
('p', 'A', 'ZPP', 'SBP') => ('p', 'AA', 'ZPP', 'SBP')
('p', 'A', 'ZPP', 'co.SBP') => ('p', 'R', 'ZPP', 'co.SBP')
('p', 'A', 'ZPP', 'co.SBP') => ('p', 'AA', 'ZPP', 'co.SBP')
('p', 'AA', 'ZPP', 'co.SBP') => ('p', 'T', 'ZPP', 'co.SBP')
('p', 'AA', 'ZPP', 'co.SBP') => ('p', 'EA', 'ZPP', 'co.SBP')
('p', 'AA', 'ZPP', 'SBP') => ('p', 'T', 'ZPP', 'SBP')
('p', 'AA', 'ZPP', 'SBP') => ('p', 'EA', 'ZPP', 'SBP')
('p', 'AA', 'ZPP', 'cocap.SBP') => ('p', 'T', 'ZPP', 'cocap.SBP')
('p', 'AA', 'ZPP', 'cocap.SBP') => ('p', 'EA', 'ZPP', 'cocap.SBP')
('p', 'AA', 'cocap.NP', 'cocap.SBP') => ('p', 'T', 'cocap.NP', 'cocap.SBP')
('p', 'AA', 'cocap.NP', 'cocap.SBP') => ('p', 'EA', 'cocap.NP', 'cocap.SBP')
('p', 'AA', 'cocap.NP', 'SBP') => ('p', 'T', 'cocap.NP', 'SBP')
('p', 'AA', 'cocap.NP', 'SBP') => ('p', 'EA', 'cocap.NP', 'SBP')
('p', 'AA', 'cocap.NP', 'co.SBP') => ('p', 'T', 'cocap.NP', 'co.SBP')
('p', 'AA', 'cocap.NP', 'co.SBP') => ('p', 'EA', 'cocap.NP', 'co.SBP')
('p', 'AA', 'cocap.MA', 'co.SBP') => ('p', 'T', 'cocap.MA', 'co.SBP')
('p', 'AA', 'cocap.MA', 'co.SBP') => ('p', 'EA', 'cocap.MA', 'co.SBP')
('p', 'AA', 'cocap.MA', 'SBP') => ('p', 'T', 'cocap.MA', 'SBP')
('p', 'AA', 'cocap.MA', 'SBP') => ('p', 'EA', 'cocap.MA', 'SBP')
('p', 'AA', 'cocap.MA', 'cocap.SBP') => ('p', 'T', 'cocap.MA', 'cocap.SBP')
('p', 'AA', 'cocap.MA', 'cocap.SBP') => ('p', 'EA', 'cocap.MA', 'cocap.SBP')
('d', 'A', 'co.SBP', 'BQP') => ('-p', 'A', 'co.SBP', 'BQP')
('d', 'A', 'SBP', 'BQP') => ('-p', 'A', 'SBP', 'BQP')
('p', 'E', 'co.NP', 'co.SBP') => ('-d', 'E', 'co.NP', 'co.SBP')
('p', 'E', 'NP', 'SBP') => ('-d', 'E', 'NP', 'SBP')
('p', 'E', 'RP', 'SBP') => ('-d', 'E', 'RP', 'SBP')
('p', 'E', 'co.RP', 'co.SBP') => ('-d', 'E', 'co.RP', 'co.SBP')
('p', 'A', 'co.NP', 'co.SBP') => ('-d', 'A', 'co.NP', 'co.SBP')
('p', 'A', 'co.NP', 'co.SBP') => ('p', 'R', 'co.NP', 'co.SBP')
('p', 'A', 'co.NP', 'co.SBP') => ('p', 'AA', 'co.NP', 'co.SBP')
('p', 'A', 'NP', 'SBP') => ('-d', 'A', 'NP', 'SBP')
('p', 'A', 'NP', 'SBP') => ('p', 'R', 'NP', 'SBP')
('p', 'A', 'NP', 'SBP') => ('p', 'AA', 'NP', 'SBP')
('p', 'A', 'RP', 'SBP') => ('-d', 'A', 'RP', 'SBP')
('p', 'A', 'RP', 'SBP') => ('p', 'R', 'RP', 'SBP')
('p', 'A', 'RP', 'SBP') => ('p', 'AA', 'RP', 'SBP')
('p', 'A', 'co.RP', 'co.SBP') => ('-d', 'A', 'co.RP', 'co.SBP')
('p', 'A', 'co.RP', 'co.SBP') => ('p', 'R', 'co.RP', 'co.SBP')
('p', 'A', 'co.RP', 'co.SBP') => ('p', 'AA', 'co.RP', 'co.SBP')
('p', 'AA', 'co.RP', 'co.SBP') => ('-d', 'AA', 'co.RP', 'co.SBP')
('p', 'AA', 'co.RP', 'co.SBP') => ('p', 'T', 'co.RP', 'co.SBP')
('p', 'AA', 'co.RP', 'co.SBP') => ('p', 'EA', 'co.RP', 'co.SBP')
('p', 'AA', 'RP', 'SBP') => ('-d', 'AA', 'RP', 'SBP')
('p', 'AA', 'RP', 'SBP') => ('p', 'T', 'RP', 'SBP')
('p', 'AA', 'RP', 'SBP') => ('p', 'EA', 'RP', 'SBP')
('p', 'EA', 'RP', 'SBP') => ('-d', 'EA', 'RP', 'SBP')
('p', 'EA', 'co.RP', 'co.SBP') => ('-d', 'EA', 'co.RP', 'co.SBP')
('p', 'T', 'RP', 'SBP') => ('-d', 'T', 'RP', 'SBP')
('p', 'T', 'co.RP', 'co.SBP') => ('-d', 'T', 'co.RP', 'co.SBP')
('p', 'R', 'co.RP', 'co.SBP') => ('-d', 'R', 'co.RP', 'co.SBP')
('p', 'R', 'RP', 'SBP') => ('-d', 'R', 'RP', 'SBP')
('d', 'A', 'SBP', 'BQP/mpoly') => ('-p', 'A', 'SBP', 'BQP/mpoly')
('d', 'A', 'co.SBP', 'BQP/mpoly') => ('-p', 'A', 'co.SBP', 'BQP/mpoly')
('d', 'A', 'SBP', 'BQP/qpoly') => ('-p', 'A', 'SBP', 'BQP/qpoly')
('d', 'A', 'co.SBP', 'BQP/qpoly') => ('-p', 'A', 'co.SBP', 'BQP/qpoly')
('p', 'AA', 'NP', 'SBP') => ('-d', 'AA', 'NP', 'SBP')
('p', 'AA', 'NP', 'SBP') => ('p', 'T', 'NP', 'SBP')
('p', 'AA', 'NP', 'SBP') => ('p', 'EA', 'NP', 'SBP')
('p', 'AA', 'co.NP', 'co.SBP') => ('-d', 'AA', 'co.NP', 'co.SBP')
('p', 'AA', 'co.NP', 'co.SBP') => ('p', 'T', 'co.NP', 'co.SBP')
('p', 'AA', 'co.NP', 'co.SBP') => ('p', 'EA', 'co.NP', 'co.SBP')
('p', 'EA', 'co.NP', 'co.SBP') => ('-d', 'EA', 'co.NP', 'co.SBP')
('p', 'EA', 'NP', 'SBP') => ('-d', 'EA', 'NP', 'SBP')
('p', 'T', 'co.NP', 'co.SBP') => ('-d', 'T', 'co.NP', 'co.SBP')
('p', 'T', 'NP', 'SBP') => ('-d', 'T', 'NP', 'SBP')
('p', 'R', 'NP', 'SBP') => ('-d', 'R', 'NP', 'SBP')
('p', 'R', 'co.NP', 'co.SBP') => ('-d', 'R', 'co.NP', 'co.SBP')
('p', 'AA', 'co.MA', 'co.SBP') => ('-d', 'AA', 'co.MA', 'co.SBP')
('p', 'AA', 'co.MA', 'co.SBP') => ('p', 'T', 'co.MA', 'co.SBP')
('p', 'AA', 'co.MA', 'co.SBP') => ('p', 'EA', 'co.MA', 'co.SBP')
('p', 'AA', 'MA', 'SBP') => ('-d', 'AA', 'MA', 'SBP')
('p', 'AA', 'MA', 'SBP') => ('p', 'T', 'MA', 'SBP')
('p', 'AA', 'MA', 'SBP') => ('p', 'EA', 'MA', 'SBP')
('p', 'EA', 'MA', 'SBP') => ('-d', 'EA', 'MA', 'SBP')
('p', 'EA', 'MA', 'SBP') => ('p', 'E', 'MA', 'SBP')
('p', 'EA', 'co.MA', 'co.SBP') => ('-d', 'EA', 'co.MA', 'co.SBP')
('p', 'EA', 'co.MA', 'co.SBP') => ('p', 'E', 'co.MA', 'co.SBP')
('p', 'E', 'co.MA', 'co.SBP') => ('-d', 'E', 'co.MA', 'co.SBP')
('p', 'E', 'MA', 'SBP') => ('-d', 'E', 'MA', 'SBP')
('p', 'T', 'MA', 'SBP') => ('-d', 'T', 'MA', 'SBP')
('p', 'T', 'co.MA', 'co.SBP') => ('-d', 'T', 'co.MA', 'co.SBP')
('p', 'R', 'co.MA', 'co.SBP') => ('-d', 'R', 'co.MA', 'co.SBP')
('p', 'R', 'MA', 'SBP') => ('-d', 'R', 'MA', 'SBP')
('d', 'A', 'ALL', 'PSPACE/poly') => ('-p', 'A', 'ALL', 'PSPACE/poly')
('d', 'E', 'EXP', 'P') => ('-p', 'E', 'EXP', 'P')
('d', 'E', 'EXP', 'P') => ('d', 'R', 'EXP', 'P')
('d', 'E', 'EXP', 'P') => ('d', 'T', 'EXP', 'P')
('d', 'E', 'EXP', 'P') => ('d', 'EA', 'EXP', 'P')
('d', 'EA', 'EXP', 'P') => ('-p', 'EA', 'EXP', 'P')
('d', 'EA', 'EXP', 'P') => ('d', 'AA', 'EXP', 'P')
('d', 'AA', 'EXP', 'P') => ('-p', 'AA', 'EXP', 'P')
('d', 'AA', 'EXP', 'P') => ('d', 'A', 'EXP', 'P')
('d', 'A', 'EXP', 'P') => ('-p', 'A', 'EXP', 'P')
('d', 'T', 'EXP', 'P') => ('-p', 'T', 'EXP', 'P')
('d', 'R', 'EXP', 'P') => ('-p', 'R', 'EXP', 'P')
('d', 'E', 'AH', 'P/poly') => ('-p', 'E', 'AH', 'P/poly')
('d', 'E', 'AH', 'P/poly') => ('d', 'R', 'AH', 'P/poly')
('d', 'E', 'AH', 'P/poly') => ('d', 'T', 'AH', 'P/poly')
('d', 'E', 'AH', 'P/poly') => ('d', 'EA', 'AH', 'P/poly')
('-p', 'E', 'AH', 'P') => ('-p', 'R', 'AH', 'P')
('-p', 'E', 'AH', 'P') => ('-p', 'T', 'AH', 'P')
('-p', 'E', 'AH', 'P') => ('-p', 'EA', 'AH', 'P')
('-p', 'EA', 'AH', 'P') => ('-p', 'AA', 'AH', 'P')
('d', 'E', 'AH', 'P') => ('d', 'R', 'AH', 'P')
('d', 'E', 'AH', 'P') => ('d', 'T', 'AH', 'P')
('d', 'E', 'AH', 'P') => ('d', 'EA', 'AH', 'P')
('d', 'EA', 'AH', 'P') => ('d', 'AA', 'AH', 'P')
('-p', 'E', 'AH', 'BPP') => ('-p', 'R', 'AH', 'BPP')
('-p', 'E', 'AH', 'BPP') => ('-p', 'T', 'AH', 'BPP')
('-p', 'E', 'AH', 'BPP') => ('-p', 'EA', 'AH', 'BPP')
('-p', 'EA', 'AH', 'BPP') => ('-p', 'AA', 'AH', 'BPP')
('d', 'E', 'AH', 'BPP') => ('d', 'R', 'AH', 'BPP')
('d', 'E', 'AH', 'BPP') => ('d', 'T', 'AH', 'BPP')
('d', 'E', 'AH', 'BPP') => ('d', 'EA', 'AH', 'BPP')
('d', 'EA', 'AH', 'BPP') => ('d', 'AA', 'AH', 'BPP')
('d', 'EA', 'AH', 'P/poly') => ('-p', 'EA', 'AH', 'P/poly')
('d', 'EA', 'AH', 'P/poly') => ('d', 'AA', 'AH', 'P/poly')
('d', 'AA', 'AH', 'P/poly') => ('-p', 'AA', 'AH', 'P/poly')
('d', 'AA', 'AH', 'P/poly') => ('d', 'A', 'AH', 'P/poly')
('d', 'A', 'AH', 'P/poly') => ('-p', 'A', 'AH', 'P/poly')
('d', 'T', 'AH', 'P/poly') => ('-p', 'T', 'AH', 'P/poly')
('d', 'R', 'AH', 'P/poly') => ('-p', 'R', 'AH', 'P/poly')
('d', 'A', 'Delta_2P', 'PP') => ('-p', 'A', 'Delta_2P', 'PP')
('p', 'A', 'MIP', 'NEXP_plo') => ('-d', 'A', 'MIP', 'NEXP_plo')
('p', 'A', 'MIP', 'NEXP_plo') => ('p', 'R', 'MIP', 'NEXP_plo')
('p', 'A', 'MIP', 'NEXP_plo') => ('p', 'AA', 'MIP', 'NEXP_plo')
('p', 'A', 'co.MIP', 'co.NEXP_plo') => ('-d', 'A', 'co.MIP', 'co.NEXP_plo')
('p', 'A', 'co.MIP', 'co.NEXP_plo') => ('p', 'R', 'co.MIP', 'co.NEXP_plo')
('p', 'A', 'co.MIP', 'co.NEXP_plo') => ('p', 'AA', 'co.MIP', 'co.NEXP_plo')
('p', 'A', 'cocap.MIP', 'cocap.NEXP_plo') => ('-d', 'A', 'cocap.MIP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.MIP', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.MIP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.MIP', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.MIP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.MIP', 'co.NEXP_plo') => ('-d', 'R', 'cocap.MIP', 'co.NEXP_plo')
('-d', 'A', 'cocap.MIP', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.MIP', 'co.NEXP_plo')
('-d', 'A', 'cocap.MIP', 'NEXP_plo') => ('-d', 'R', 'cocap.MIP', 'NEXP_plo')
('-d', 'A', 'cocap.MIP', 'NEXP_plo') => ('-d', 'AA', 'cocap.MIP', 'NEXP_plo')
('-d', 'A', 'cocap.MIP', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.MIP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.MIP', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.MIP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.MIP', 'cocap.AH_plo') => ('-d', 'R', 'cocap.MIP', 'cocap.AH_plo')
('-d', 'A', 'cocap.MIP', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.MIP', 'cocap.AH_plo')
('-d', 'A', 'cocap.MIP', 'co.AH_plo') => ('-d', 'R', 'cocap.MIP', 'co.AH_plo')
('-d', 'A', 'cocap.MIP', 'co.AH_plo') => ('-d', 'AA', 'cocap.MIP', 'co.AH_plo')
('-d', 'A', 'cocap.MIP', 'AH_plo') => ('-d', 'R', 'cocap.MIP', 'AH_plo')
('-d', 'A', 'cocap.MIP', 'AH_plo') => ('-d', 'AA', 'cocap.MIP', 'AH_plo')
('-d', 'AA', 'cocap.MIP', 'AH_plo') => ('-d', 'T', 'cocap.MIP', 'AH_plo')
('-d', 'AA', 'cocap.MIP', 'AH_plo') => ('-d', 'EA', 'cocap.MIP', 'AH_plo')
('-d', 'AA', 'cocap.MIP', 'co.AH_plo') => ('-d', 'T', 'cocap.MIP', 'co.AH_plo')
('-d', 'AA', 'cocap.MIP', 'co.AH_plo') => ('-d', 'EA', 'cocap.MIP', 'co.AH_plo')
('-d', 'AA', 'cocap.MIP', 'cocap.AH_plo') => ('-d', 'T', 'cocap.MIP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.MIP', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.MIP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.MIP', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.MIP', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.MIP', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.MIP', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.MIP', 'co.NEXP_plo') => ('-d', 'T', 'cocap.MIP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.MIP', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.MIP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.MIP', 'NEXP_plo') => ('-d', 'T', 'cocap.MIP', 'NEXP_plo')
('-d', 'AA', 'cocap.MIP', 'NEXP_plo') => ('-d', 'EA', 'cocap.MIP', 'NEXP_plo')
('p', 'A', 'cocap.MIP', 'co.NEXP_plo') => ('p', 'R', 'cocap.MIP', 'co.NEXP_plo')
('p', 'A', 'cocap.MIP', 'co.NEXP_plo') => ('p', 'AA', 'cocap.MIP', 'co.NEXP_plo')
('p', 'A', 'cocap.MIP', 'NEXP_plo') => ('p', 'R', 'cocap.MIP', 'NEXP_plo')
('p', 'A', 'cocap.MIP', 'NEXP_plo') => ('p', 'AA', 'cocap.MIP', 'NEXP_plo')
('p', 'A', 'cocap.MIP', 'AH_plo') => ('p', 'R', 'cocap.MIP', 'AH_plo')
('p', 'A', 'cocap.MIP', 'AH_plo') => ('p', 'AA', 'cocap.MIP', 'AH_plo')
('p', 'A', 'cocap.MIP', 'co.AH_plo') => ('p', 'R', 'cocap.MIP', 'co.AH_plo')
('p', 'A', 'cocap.MIP', 'co.AH_plo') => ('p', 'AA', 'cocap.MIP', 'co.AH_plo')
('p', 'A', 'cocap.MIP', 'cocap.AH_plo') => ('p', 'R', 'cocap.MIP', 'cocap.AH_plo')
('p', 'A', 'cocap.MIP', 'cocap.AH_plo') => ('p', 'AA', 'cocap.MIP', 'cocap.AH_plo')
('p', 'AA', 'cocap.MIP', 'cocap.AH_plo') => ('p', 'T', 'cocap.MIP', 'cocap.AH_plo')
('p', 'AA', 'cocap.MIP', 'cocap.AH_plo') => ('p', 'EA', 'cocap.MIP', 'cocap.AH_plo')
('p', 'AA', 'cocap.MIP', 'co.AH_plo') => ('p', 'T', 'cocap.MIP', 'co.AH_plo')
('p', 'AA', 'cocap.MIP', 'co.AH_plo') => ('p', 'EA', 'cocap.MIP', 'co.AH_plo')
('p', 'AA', 'cocap.MIP', 'AH_plo') => ('p', 'T', 'cocap.MIP', 'AH_plo')
('p', 'AA', 'cocap.MIP', 'AH_plo') => ('p', 'EA', 'cocap.MIP', 'AH_plo')
('p', 'AA', 'cocap.MIP', 'NEXP_plo') => ('p', 'T', 'cocap.MIP', 'NEXP_plo')
('p', 'AA', 'cocap.MIP', 'NEXP_plo') => ('p', 'EA', 'cocap.MIP', 'NEXP_plo')
('p', 'AA', 'cocap.MIP', 'co.NEXP_plo') => ('p', 'T', 'cocap.MIP', 'co.NEXP_plo')
('p', 'AA', 'cocap.MIP', 'co.NEXP_plo') => ('p', 'EA', 'cocap.MIP', 'co.NEXP_plo')
('p', 'AA', 'cocap.MIP', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.MIP', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.MIP', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.MIP', 'cocap.NEXP_plo')
('-d', 'A', 'co.MIP', 'co.AH_plo') => ('-d', 'R', 'co.MIP', 'co.AH_plo')
('-d', 'A', 'co.MIP', 'co.AH_plo') => ('-d', 'AA', 'co.MIP', 'co.AH_plo')
('-d', 'A', 'MIP', 'AH_plo') => ('-d', 'R', 'MIP', 'AH_plo')
('-d', 'A', 'MIP', 'AH_plo') => ('-d', 'AA', 'MIP', 'AH_plo')
('-d', 'AA', 'MIP', 'AH_plo') => ('-d', 'T', 'MIP', 'AH_plo')
('-d', 'AA', 'MIP', 'AH_plo') => ('-d', 'EA', 'MIP', 'AH_plo')
('-d', 'AA', 'co.MIP', 'co.AH_plo') => ('-d', 'T', 'co.MIP', 'co.AH_plo')
('-d', 'AA', 'co.MIP', 'co.AH_plo') => ('-d', 'EA', 'co.MIP', 'co.AH_plo')
('p', 'A', 'co.MIP', 'co.AH_plo') => ('p', 'R', 'co.MIP', 'co.AH_plo')
('p', 'A', 'co.MIP', 'co.AH_plo') => ('p', 'AA', 'co.MIP', 'co.AH_plo')
('p', 'A', 'MIP', 'AH_plo') => ('p', 'R', 'MIP', 'AH_plo')
('p', 'A', 'MIP', 'AH_plo') => ('p', 'AA', 'MIP', 'AH_plo')
('p', 'AA', 'MIP', 'AH_plo') => ('p', 'T', 'MIP', 'AH_plo')
('p', 'AA', 'MIP', 'AH_plo') => ('p', 'EA', 'MIP', 'AH_plo')
('p', 'AA', 'co.MIP', 'co.AH_plo') => ('p', 'T', 'co.MIP', 'co.AH_plo')
('p', 'AA', 'co.MIP', 'co.AH_plo') => ('p', 'EA', 'co.MIP', 'co.AH_plo')
('p', 'AA', 'co.MIP', 'co.NEXP_plo') => ('-d', 'AA', 'co.MIP', 'co.NEXP_plo')
('p', 'AA', 'co.MIP', 'co.NEXP_plo') => ('p', 'T', 'co.MIP', 'co.NEXP_plo')
('p', 'AA', 'co.MIP', 'co.NEXP_plo') => ('p', 'EA', 'co.MIP', 'co.NEXP_plo')
('p', 'AA', 'MIP', 'NEXP_plo') => ('-d', 'AA', 'MIP', 'NEXP_plo')
('p', 'AA', 'MIP', 'NEXP_plo') => ('p', 'T', 'MIP', 'NEXP_plo')
('p', 'AA', 'MIP', 'NEXP_plo') => ('p', 'EA', 'MIP', 'NEXP_plo')
('p', 'EA', 'MIP', 'NEXP_plo') => ('-d', 'EA', 'MIP', 'NEXP_plo')
('p', 'EA', 'MIP', 'NEXP_plo') => ('p', 'E', 'MIP', 'NEXP_plo')
('p', 'EA', 'co.MIP', 'co.NEXP_plo') => ('-d', 'EA', 'co.MIP', 'co.NEXP_plo')
('p', 'EA', 'co.MIP', 'co.NEXP_plo') => ('p', 'E', 'co.MIP', 'co.NEXP_plo')
('p', 'E', 'co.MIP', 'co.NEXP_plo') => ('-d', 'E', 'co.MIP', 'co.NEXP_plo')
('p', 'E', 'MIP', 'NEXP_plo') => ('-d', 'E', 'MIP', 'NEXP_plo')
('p', 'T', 'MIP', 'NEXP_plo') => ('-d', 'T', 'MIP', 'NEXP_plo')
('p', 'T', 'co.MIP', 'co.NEXP_plo') => ('-d', 'T', 'co.MIP', 'co.NEXP_plo')
('p', 'R', 'co.MIP', 'co.NEXP_plo') => ('-d', 'R', 'co.MIP', 'co.NEXP_plo')
('p', 'R', 'MIP', 'NEXP_plo') => ('-d', 'R', 'MIP', 'NEXP_plo')
('d', 'A', 'BPP', 'P') => ('-p', 'A', 'BPP', 'P')
('p', 'A', 'BQP/qpoly', 'QCMA/qpoly') => ('-d', 'A', 'BQP/qpoly', 'QCMA/qpoly')
('p', 'A', 'BQP/qpoly', 'QCMA/qpoly') => ('p', 'R', 'BQP/qpoly', 'QCMA/qpoly')
('p', 'A', 'BQP/qpoly', 'QCMA/qpoly') => ('p', 'AA', 'BQP/qpoly', 'QCMA/qpoly')
('p', 'A', 'BQP/qpoly', 'co.QCMA/qpoly') => ('-d', 'A', 'BQP/qpoly', 'co.QCMA/qpoly')
('p', 'A', 'BQP/qpoly', 'co.QCMA/qpoly') => ('p', 'R', 'BQP/qpoly', 'co.QCMA/qpoly')
('p', 'A', 'BQP/qpoly', 'co.QCMA/qpoly') => ('p', 'AA', 'BQP/qpoly', 'co.QCMA/qpoly')
('p', 'A', 'BQP/qpoly', 'cocap.QCMA/qpoly') => ('-d', 'A', 'BQP/qpoly', 'cocap.QCMA/qpoly')
('p', 'A', 'BQP/qpoly', 'cocap.QCMA/qpoly') => ('p', 'R', 'BQP/qpoly', 'cocap.QCMA/qpoly')
('p', 'A', 'BQP/qpoly', 'cocap.QCMA/qpoly') => ('p', 'AA', 'BQP/qpoly', 'cocap.QCMA/qpoly')
('d', 'A', 'cocap.QCMA/qpoly', 'P') => ('-p', 'A', 'cocap.QCMA/qpoly', 'P')
('d', 'A', 'QCMA/qpoly', 'P') => ('-p', 'A', 'QCMA/qpoly', 'P')
('d', 'A', 'co.QCMA/qpoly', 'P') => ('-p', 'A', 'co.QCMA/qpoly', 'P')
('-d', 'A', 'BQP/qpoly', 'co.QCMA/qpoly') => ('-d', 'R', 'BQP/qpoly', 'co.QCMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'co.QCMA/qpoly') => ('-d', 'AA', 'BQP/qpoly', 'co.QCMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'cocap.QCMA/qpoly') => ('-d', 'R', 'BQP/qpoly', 'cocap.QCMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'cocap.QCMA/qpoly') => ('-d', 'AA', 'BQP/qpoly', 'cocap.QCMA/qpoly')
('-d', 'A', 'BQP', 'cocap.QCMA/qpoly') => ('-d', 'R', 'BQP', 'cocap.QCMA/qpoly')
('-d', 'A', 'BQP', 'cocap.QCMA/qpoly') => ('-d', 'AA', 'BQP', 'cocap.QCMA/qpoly')
('-d', 'A', 'BQP', 'co.QCMA/qpoly') => ('-d', 'R', 'BQP', 'co.QCMA/qpoly')
('-d', 'A', 'BQP', 'co.QCMA/qpoly') => ('-d', 'AA', 'BQP', 'co.QCMA/qpoly')
('-d', 'A', 'BQP', 'QCMA/qpoly') => ('-d', 'R', 'BQP', 'QCMA/qpoly')
('-d', 'A', 'BQP', 'QCMA/qpoly') => ('-d', 'AA', 'BQP', 'QCMA/qpoly')
('-d', 'AA', 'BQP', 'QCMA/qpoly') => ('-d', 'T', 'BQP', 'QCMA/qpoly')
('-d', 'AA', 'BQP', 'QCMA/qpoly') => ('-d', 'EA', 'BQP', 'QCMA/qpoly')
('-d', 'AA', 'BQP', 'co.QCMA/qpoly') => ('-d', 'T', 'BQP', 'co.QCMA/qpoly')
('-d', 'AA', 'BQP', 'co.QCMA/qpoly') => ('-d', 'EA', 'BQP', 'co.QCMA/qpoly')
('-d', 'AA', 'BQP', 'cocap.QCMA/qpoly') => ('-d', 'T', 'BQP', 'cocap.QCMA/qpoly')
('-d', 'AA', 'BQP', 'cocap.QCMA/qpoly') => ('-d', 'EA', 'BQP', 'cocap.QCMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'cocap.QCMA/qpoly') => ('-d', 'R', 'BQP/mpoly', 'cocap.QCMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'cocap.QCMA/qpoly') => ('-d', 'AA', 'BQP/mpoly', 'cocap.QCMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'co.QCMA/qpoly') => ('-d', 'R', 'BQP/mpoly', 'co.QCMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'co.QCMA/qpoly') => ('-d', 'AA', 'BQP/mpoly', 'co.QCMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'QCMA/qpoly') => ('-d', 'R', 'BQP/mpoly', 'QCMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'QCMA/qpoly') => ('-d', 'AA', 'BQP/mpoly', 'QCMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'QCMA/qpoly') => ('-d', 'T', 'BQP/mpoly', 'QCMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'QCMA/qpoly') => ('-d', 'EA', 'BQP/mpoly', 'QCMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'co.QCMA/qpoly') => ('-d', 'T', 'BQP/mpoly', 'co.QCMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'co.QCMA/qpoly') => ('-d', 'EA', 'BQP/mpoly', 'co.QCMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'cocap.QCMA/qpoly') => ('-d', 'T', 'BQP/mpoly', 'cocap.QCMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'cocap.QCMA/qpoly') => ('-d', 'EA', 'BQP/mpoly', 'cocap.QCMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'QCMA/qpoly') => ('-d', 'R', 'BQP/qpoly', 'QCMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'QCMA/qpoly') => ('-d', 'AA', 'BQP/qpoly', 'QCMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'QCMA/qpoly') => ('-d', 'T', 'BQP/qpoly', 'QCMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'QCMA/qpoly') => ('-d', 'EA', 'BQP/qpoly', 'QCMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'co.QCMA/qpoly') => ('-d', 'T', 'BQP/qpoly', 'co.QCMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'co.QCMA/qpoly') => ('-d', 'EA', 'BQP/qpoly', 'co.QCMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'cocap.QCMA/qpoly') => ('-d', 'T', 'BQP/qpoly', 'cocap.QCMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'cocap.QCMA/qpoly') => ('-d', 'EA', 'BQP/qpoly', 'cocap.QCMA/qpoly')
('p', 'A', 'BQP', 'cocap.QCMA/qpoly') => ('p', 'R', 'BQP', 'cocap.QCMA/qpoly')
('p', 'A', 'BQP', 'cocap.QCMA/qpoly') => ('p', 'AA', 'BQP', 'cocap.QCMA/qpoly')
('p', 'A', 'BQP', 'co.QCMA/qpoly') => ('p', 'R', 'BQP', 'co.QCMA/qpoly')
('p', 'A', 'BQP', 'co.QCMA/qpoly') => ('p', 'AA', 'BQP', 'co.QCMA/qpoly')
('p', 'A', 'BQP', 'QCMA/qpoly') => ('p', 'R', 'BQP', 'QCMA/qpoly')
('p', 'A', 'BQP', 'QCMA/qpoly') => ('p', 'AA', 'BQP', 'QCMA/qpoly')
('p', 'AA', 'BQP', 'QCMA/qpoly') => ('p', 'T', 'BQP', 'QCMA/qpoly')
('p', 'AA', 'BQP', 'QCMA/qpoly') => ('p', 'EA', 'BQP', 'QCMA/qpoly')
('p', 'AA', 'BQP', 'co.QCMA/qpoly') => ('p', 'T', 'BQP', 'co.QCMA/qpoly')
('p', 'AA', 'BQP', 'co.QCMA/qpoly') => ('p', 'EA', 'BQP', 'co.QCMA/qpoly')
('p', 'AA', 'BQP', 'cocap.QCMA/qpoly') => ('p', 'T', 'BQP', 'cocap.QCMA/qpoly')
('p', 'AA', 'BQP', 'cocap.QCMA/qpoly') => ('p', 'EA', 'BQP', 'cocap.QCMA/qpoly')
('p', 'A', 'BQP/mpoly', 'cocap.QCMA/qpoly') => ('p', 'R', 'BQP/mpoly', 'cocap.QCMA/qpoly')
('p', 'A', 'BQP/mpoly', 'cocap.QCMA/qpoly') => ('p', 'AA', 'BQP/mpoly', 'cocap.QCMA/qpoly')
('p', 'A', 'BQP/mpoly', 'co.QCMA/qpoly') => ('p', 'R', 'BQP/mpoly', 'co.QCMA/qpoly')
('p', 'A', 'BQP/mpoly', 'co.QCMA/qpoly') => ('p', 'AA', 'BQP/mpoly', 'co.QCMA/qpoly')
('p', 'A', 'BQP/mpoly', 'QCMA/qpoly') => ('p', 'R', 'BQP/mpoly', 'QCMA/qpoly')
('p', 'A', 'BQP/mpoly', 'QCMA/qpoly') => ('p', 'AA', 'BQP/mpoly', 'QCMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'QCMA/qpoly') => ('p', 'T', 'BQP/mpoly', 'QCMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'QCMA/qpoly') => ('p', 'EA', 'BQP/mpoly', 'QCMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'co.QCMA/qpoly') => ('p', 'T', 'BQP/mpoly', 'co.QCMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'co.QCMA/qpoly') => ('p', 'EA', 'BQP/mpoly', 'co.QCMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'cocap.QCMA/qpoly') => ('p', 'T', 'BQP/mpoly', 'cocap.QCMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'cocap.QCMA/qpoly') => ('p', 'EA', 'BQP/mpoly', 'cocap.QCMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'cocap.QCMA/qpoly') => ('p', 'T', 'BQP/qpoly', 'cocap.QCMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'cocap.QCMA/qpoly') => ('p', 'EA', 'BQP/qpoly', 'cocap.QCMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'co.QCMA/qpoly') => ('p', 'T', 'BQP/qpoly', 'co.QCMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'co.QCMA/qpoly') => ('p', 'EA', 'BQP/qpoly', 'co.QCMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'QCMA/qpoly') => ('p', 'T', 'BQP/qpoly', 'QCMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'QCMA/qpoly') => ('p', 'EA', 'BQP/qpoly', 'QCMA/qpoly')
('p', 'A', 'PH', 'MP') => ('-d', 'A', 'PH', 'MP')
('p', 'A', 'PH', 'MP') => ('p', 'R', 'PH', 'MP')
('p', 'A', 'PH', 'MP') => ('p', 'AA', 'PH', 'MP')
('p', 'A', 'PH', 'co.MP') => ('-d', 'A', 'PH', 'co.MP')
('p', 'A', 'PH', 'co.MP') => ('p', 'R', 'PH', 'co.MP')
('p', 'A', 'PH', 'co.MP') => ('p', 'AA', 'PH', 'co.MP')
('p', 'A', 'PH', 'cocap.MP') => ('-d', 'A', 'PH', 'cocap.MP')
('p', 'A', 'PH', 'cocap.MP') => ('p', 'R', 'PH', 'cocap.MP')
('p', 'A', 'PH', 'cocap.MP') => ('p', 'AA', 'PH', 'cocap.MP')
('-d', 'A', 'PH', 'MP') => ('-d', 'R', 'PH', 'MP')
('-d', 'A', 'PH', 'MP') => ('-d', 'AA', 'PH', 'MP')
('-d', 'A', 'PH', 'cocap.MP') => ('-d', 'R', 'PH', 'cocap.MP')
('-d', 'A', 'PH', 'cocap.MP') => ('-d', 'AA', 'PH', 'cocap.MP')
('-d', 'A', 'PH', 'co.MP') => ('-d', 'R', 'PH', 'co.MP')
('-d', 'A', 'PH', 'co.MP') => ('-d', 'AA', 'PH', 'co.MP')
('-d', 'AA', 'PH', 'co.MP') => ('-d', 'T', 'PH', 'co.MP')
('-d', 'AA', 'PH', 'co.MP') => ('-d', 'EA', 'PH', 'co.MP')
('-d', 'AA', 'PH', 'MP') => ('-d', 'T', 'PH', 'MP')
('-d', 'AA', 'PH', 'MP') => ('-d', 'EA', 'PH', 'MP')
('-d', 'AA', 'PH', 'cocap.MP') => ('-d', 'T', 'PH', 'cocap.MP')
('-d', 'AA', 'PH', 'cocap.MP') => ('-d', 'EA', 'PH', 'cocap.MP')
('p', 'AA', 'PH', 'cocap.MP') => ('p', 'T', 'PH', 'cocap.MP')
('p', 'AA', 'PH', 'cocap.MP') => ('p', 'EA', 'PH', 'cocap.MP')
('p', 'AA', 'PH', 'MP') => ('p', 'T', 'PH', 'MP')
('p', 'AA', 'PH', 'MP') => ('p', 'EA', 'PH', 'MP')
('p', 'AA', 'PH', 'co.MP') => ('p', 'T', 'PH', 'co.MP')
('p', 'AA', 'PH', 'co.MP') => ('p', 'EA', 'PH', 'co.MP')
('p', 'A', 'IP', 'MIP') => ('-d', 'A', 'IP', 'MIP')
('p', 'A', 'IP', 'MIP') => ('p', 'R', 'IP', 'MIP')
('p', 'A', 'IP', 'MIP') => ('p', 'AA', 'IP', 'MIP')
('p', 'A', 'co.IP', 'co.MIP') => ('-d', 'A', 'co.IP', 'co.MIP')
('p', 'A', 'co.IP', 'co.MIP') => ('p', 'R', 'co.IP', 'co.MIP')
('p', 'A', 'co.IP', 'co.MIP') => ('p', 'AA', 'co.IP', 'co.MIP')
('p', 'A', 'cocap.IP', 'cocap.MIP') => ('-d', 'A', 'cocap.IP', 'cocap.MIP')
('p', 'A', 'cocap.IP', 'cocap.MIP') => ('p', 'R', 'cocap.IP', 'cocap.MIP')
('p', 'A', 'cocap.IP', 'cocap.MIP') => ('p', 'AA', 'cocap.IP', 'cocap.MIP')
('-d', 'A', 'cocap.IP', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.IP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.IP', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.IP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.IP', 'co.NEXP_plo') => ('-d', 'R', 'cocap.IP', 'co.NEXP_plo')
('-d', 'A', 'cocap.IP', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.IP', 'co.NEXP_plo')
('-d', 'A', 'cocap.IP', 'NEXP_plo') => ('-d', 'R', 'cocap.IP', 'NEXP_plo')
('-d', 'A', 'cocap.IP', 'NEXP_plo') => ('-d', 'AA', 'cocap.IP', 'NEXP_plo')
('-d', 'A', 'cocap.AM', 'NEXP_plo') => ('-d', 'R', 'cocap.AM', 'NEXP_plo')
('-d', 'A', 'cocap.AM', 'NEXP_plo') => ('-d', 'AA', 'cocap.AM', 'NEXP_plo')
('-d', 'A', 'cocap.AM', 'co.NEXP_plo') => ('-d', 'R', 'cocap.AM', 'co.NEXP_plo')
('-d', 'A', 'cocap.AM', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.AM', 'co.NEXP_plo')
('-d', 'A', 'cocap.AM', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.AM', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.AM', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.AM', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.AM', 'cocap.AH_plo') => ('-d', 'R', 'cocap.AM', 'cocap.AH_plo')
('-d', 'A', 'cocap.AM', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.AM', 'cocap.AH_plo')
('-d', 'A', 'cocap.AM', 'co.AH_plo') => ('-d', 'R', 'cocap.AM', 'co.AH_plo')
('-d', 'A', 'cocap.AM', 'co.AH_plo') => ('-d', 'AA', 'cocap.AM', 'co.AH_plo')
('-d', 'A', 'cocap.AM', 'AH_plo') => ('-d', 'R', 'cocap.AM', 'AH_plo')
('-d', 'A', 'cocap.AM', 'AH_plo') => ('-d', 'AA', 'cocap.AM', 'AH_plo')
('-d', 'AA', 'cocap.AM', 'AH_plo') => ('-d', 'T', 'cocap.AM', 'AH_plo')
('-d', 'AA', 'cocap.AM', 'AH_plo') => ('-d', 'EA', 'cocap.AM', 'AH_plo')
('-d', 'AA', 'cocap.AM', 'co.AH_plo') => ('-d', 'T', 'cocap.AM', 'co.AH_plo')
('-d', 'AA', 'cocap.AM', 'co.AH_plo') => ('-d', 'EA', 'cocap.AM', 'co.AH_plo')
('-d', 'AA', 'cocap.AM', 'cocap.AH_plo') => ('-d', 'T', 'cocap.AM', 'cocap.AH_plo')
('-d', 'AA', 'cocap.AM', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.AM', 'cocap.AH_plo')
('-d', 'AA', 'cocap.AM', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.AM', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.AM', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.AM', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.AM', 'co.NEXP_plo') => ('-d', 'T', 'cocap.AM', 'co.NEXP_plo')
('-d', 'AA', 'cocap.AM', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.AM', 'co.NEXP_plo')
('-d', 'AA', 'cocap.AM', 'NEXP_plo') => ('-d', 'T', 'cocap.AM', 'NEXP_plo')
('-d', 'AA', 'cocap.AM', 'NEXP_plo') => ('-d', 'EA', 'cocap.AM', 'NEXP_plo')
('-d', 'A', 'cocap.IP', 'AH_plo') => ('-d', 'R', 'cocap.IP', 'AH_plo')
('-d', 'A', 'cocap.IP', 'AH_plo') => ('-d', 'AA', 'cocap.IP', 'AH_plo')
('-d', 'A', 'cocap.IP', 'co.AH_plo') => ('-d', 'R', 'cocap.IP', 'co.AH_plo')
('-d', 'A', 'cocap.IP', 'co.AH_plo') => ('-d', 'AA', 'cocap.IP', 'co.AH_plo')
('-d', 'A', 'cocap.IP', 'cocap.AH_plo') => ('-d', 'R', 'cocap.IP', 'cocap.AH_plo')
('-d', 'A', 'cocap.IP', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.IP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.IP', 'cocap.AH_plo') => ('-d', 'T', 'cocap.IP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.IP', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.IP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.IP', 'co.AH_plo') => ('-d', 'T', 'cocap.IP', 'co.AH_plo')
('-d', 'AA', 'cocap.IP', 'co.AH_plo') => ('-d', 'EA', 'cocap.IP', 'co.AH_plo')
('-d', 'AA', 'cocap.IP', 'AH_plo') => ('-d', 'T', 'cocap.IP', 'AH_plo')
('-d', 'AA', 'cocap.IP', 'AH_plo') => ('-d', 'EA', 'cocap.IP', 'AH_plo')
('-d', 'AA', 'cocap.IP', 'NEXP_plo') => ('-d', 'T', 'cocap.IP', 'NEXP_plo')
('-d', 'AA', 'cocap.IP', 'NEXP_plo') => ('-d', 'EA', 'cocap.IP', 'NEXP_plo')
('-d', 'AA', 'cocap.IP', 'co.NEXP_plo') => ('-d', 'T', 'cocap.IP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.IP', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.IP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.IP', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.IP', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.IP', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.IP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.IP', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.IP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.IP', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.IP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.IP', 'co.NEXP_plo') => ('p', 'R', 'cocap.IP', 'co.NEXP_plo')
('p', 'A', 'cocap.IP', 'co.NEXP_plo') => ('p', 'AA', 'cocap.IP', 'co.NEXP_plo')
('p', 'A', 'cocap.IP', 'NEXP_plo') => ('p', 'R', 'cocap.IP', 'NEXP_plo')
('p', 'A', 'cocap.IP', 'NEXP_plo') => ('p', 'AA', 'cocap.IP', 'NEXP_plo')
('p', 'A', 'cocap.AM', 'NEXP_plo') => ('p', 'R', 'cocap.AM', 'NEXP_plo')
('p', 'A', 'cocap.AM', 'NEXP_plo') => ('p', 'AA', 'cocap.AM', 'NEXP_plo')
('p', 'A', 'cocap.AM', 'co.NEXP_plo') => ('p', 'R', 'cocap.AM', 'co.NEXP_plo')
('p', 'A', 'cocap.AM', 'co.NEXP_plo') => ('p', 'AA', 'cocap.AM', 'co.NEXP_plo')
('p', 'A', 'cocap.AM', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.AM', 'cocap.NEXP_plo')
('p', 'A', 'cocap.AM', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.AM', 'cocap.NEXP_plo')
('p', 'A', 'cocap.AM', 'cocap.AH_plo') => ('p', 'R', 'cocap.AM', 'cocap.AH_plo')
('p', 'A', 'cocap.AM', 'cocap.AH_plo') => ('p', 'AA', 'cocap.AM', 'cocap.AH_plo')
('p', 'A', 'cocap.AM', 'co.AH_plo') => ('p', 'R', 'cocap.AM', 'co.AH_plo')
('p', 'A', 'cocap.AM', 'co.AH_plo') => ('p', 'AA', 'cocap.AM', 'co.AH_plo')
('p', 'A', 'cocap.AM', 'AH_plo') => ('p', 'R', 'cocap.AM', 'AH_plo')
('p', 'A', 'cocap.AM', 'AH_plo') => ('p', 'AA', 'cocap.AM', 'AH_plo')
('p', 'AA', 'cocap.AM', 'AH_plo') => ('p', 'T', 'cocap.AM', 'AH_plo')
('p', 'AA', 'cocap.AM', 'AH_plo') => ('p', 'EA', 'cocap.AM', 'AH_plo')
('p', 'AA', 'cocap.AM', 'co.AH_plo') => ('p', 'T', 'cocap.AM', 'co.AH_plo')
('p', 'AA', 'cocap.AM', 'co.AH_plo') => ('p', 'EA', 'cocap.AM', 'co.AH_plo')
('p', 'AA', 'cocap.AM', 'cocap.AH_plo') => ('p', 'T', 'cocap.AM', 'cocap.AH_plo')
('p', 'AA', 'cocap.AM', 'cocap.AH_plo') => ('p', 'EA', 'cocap.AM', 'cocap.AH_plo')
('p', 'AA', 'cocap.AM', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.AM', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.AM', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.AM', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.AM', 'co.NEXP_plo') => ('p', 'T', 'cocap.AM', 'co.NEXP_plo')
('p', 'AA', 'cocap.AM', 'co.NEXP_plo') => ('p', 'EA', 'cocap.AM', 'co.NEXP_plo')
('p', 'AA', 'cocap.AM', 'NEXP_plo') => ('p', 'T', 'cocap.AM', 'NEXP_plo')
('p', 'AA', 'cocap.AM', 'NEXP_plo') => ('p', 'EA', 'cocap.AM', 'NEXP_plo')
('p', 'A', 'cocap.IP', 'AH_plo') => ('p', 'R', 'cocap.IP', 'AH_plo')
('p', 'A', 'cocap.IP', 'AH_plo') => ('p', 'AA', 'cocap.IP', 'AH_plo')
('p', 'A', 'cocap.IP', 'co.AH_plo') => ('p', 'R', 'cocap.IP', 'co.AH_plo')
('p', 'A', 'cocap.IP', 'co.AH_plo') => ('p', 'AA', 'cocap.IP', 'co.AH_plo')
('p', 'A', 'cocap.IP', 'cocap.AH_plo') => ('p', 'R', 'cocap.IP', 'cocap.AH_plo')
('p', 'A', 'cocap.IP', 'cocap.AH_plo') => ('p', 'AA', 'cocap.IP', 'cocap.AH_plo')
('p', 'AA', 'cocap.IP', 'cocap.AH_plo') => ('p', 'T', 'cocap.IP', 'cocap.AH_plo')
('p', 'AA', 'cocap.IP', 'cocap.AH_plo') => ('p', 'EA', 'cocap.IP', 'cocap.AH_plo')
('p', 'AA', 'cocap.IP', 'co.AH_plo') => ('p', 'T', 'cocap.IP', 'co.AH_plo')
('p', 'AA', 'cocap.IP', 'co.AH_plo') => ('p', 'EA', 'cocap.IP', 'co.AH_plo')
('p', 'AA', 'cocap.IP', 'AH_plo') => ('p', 'T', 'cocap.IP', 'AH_plo')
('p', 'AA', 'cocap.IP', 'AH_plo') => ('p', 'EA', 'cocap.IP', 'AH_plo')
('p', 'AA', 'cocap.IP', 'NEXP_plo') => ('p', 'T', 'cocap.IP', 'NEXP_plo')
('p', 'AA', 'cocap.IP', 'NEXP_plo') => ('p', 'EA', 'cocap.IP', 'NEXP_plo')
('p', 'AA', 'cocap.IP', 'co.NEXP_plo') => ('p', 'T', 'cocap.IP', 'co.NEXP_plo')
('p', 'AA', 'cocap.IP', 'co.NEXP_plo') => ('p', 'EA', 'cocap.IP', 'co.NEXP_plo')
('p', 'AA', 'cocap.IP', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.IP', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.IP', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.IP', 'cocap.NEXP_plo')
('p', 'E', 'cocap.AM', 'cocap.MIP') => ('-d', 'E', 'cocap.AM', 'cocap.MIP')
('p', 'A', 'cocap.AM', 'cocap.MIP') => ('-d', 'A', 'cocap.AM', 'cocap.MIP')
('p', 'A', 'cocap.AM', 'cocap.MIP') => ('p', 'R', 'cocap.AM', 'cocap.MIP')
('p', 'A', 'cocap.AM', 'cocap.MIP') => ('p', 'AA', 'cocap.AM', 'cocap.MIP')
('-d', 'A', 'cocap.AM', 'MIP') => ('-d', 'R', 'cocap.AM', 'MIP')
('-d', 'A', 'cocap.AM', 'MIP') => ('-d', 'AA', 'cocap.AM', 'MIP')
('-d', 'A', 'cocap.AM', 'co.MIP') => ('-d', 'R', 'cocap.AM', 'co.MIP')
('-d', 'A', 'cocap.AM', 'co.MIP') => ('-d', 'AA', 'cocap.AM', 'co.MIP')
('-d', 'A', 'cocap.AM', 'cocap.MIP') => ('-d', 'R', 'cocap.AM', 'cocap.MIP')
('-d', 'A', 'cocap.AM', 'cocap.MIP') => ('-d', 'AA', 'cocap.AM', 'cocap.MIP')
('-d', 'AA', 'cocap.AM', 'cocap.MIP') => ('-d', 'T', 'cocap.AM', 'cocap.MIP')
('-d', 'AA', 'cocap.AM', 'cocap.MIP') => ('-d', 'EA', 'cocap.AM', 'cocap.MIP')
('-d', 'AA', 'cocap.AM', 'MIP') => ('-d', 'T', 'cocap.AM', 'MIP')
('-d', 'AA', 'cocap.AM', 'MIP') => ('-d', 'EA', 'cocap.AM', 'MIP')
('-d', 'AA', 'cocap.AM', 'co.MIP') => ('-d', 'T', 'cocap.AM', 'co.MIP')
('-d', 'AA', 'cocap.AM', 'co.MIP') => ('-d', 'EA', 'cocap.AM', 'co.MIP')
('p', 'A', 'cocap.AM', 'MIP') => ('p', 'R', 'cocap.AM', 'MIP')
('p', 'A', 'cocap.AM', 'MIP') => ('p', 'AA', 'cocap.AM', 'MIP')
('p', 'A', 'cocap.AM', 'co.MIP') => ('p', 'R', 'cocap.AM', 'co.MIP')
('p', 'A', 'cocap.AM', 'co.MIP') => ('p', 'AA', 'cocap.AM', 'co.MIP')
('p', 'AA', 'cocap.AM', 'co.MIP') => ('p', 'T', 'cocap.AM', 'co.MIP')
('p', 'AA', 'cocap.AM', 'co.MIP') => ('p', 'EA', 'cocap.AM', 'co.MIP')
('p', 'AA', 'cocap.AM', 'MIP') => ('p', 'T', 'cocap.AM', 'MIP')
('p', 'AA', 'cocap.AM', 'MIP') => ('p', 'EA', 'cocap.AM', 'MIP')
('p', 'AA', 'cocap.AM', 'cocap.MIP') => ('p', 'T', 'cocap.AM', 'cocap.MIP')
('p', 'AA', 'cocap.AM', 'cocap.MIP') => ('p', 'EA', 'cocap.AM', 'cocap.MIP')
('-d', 'A', 'cocap.IP', 'MIP') => ('-d', 'R', 'cocap.IP', 'MIP')
('-d', 'A', 'cocap.IP', 'MIP') => ('-d', 'AA', 'cocap.IP', 'MIP')
('-d', 'A', 'cocap.IP', 'co.MIP') => ('-d', 'R', 'cocap.IP', 'co.MIP')
('-d', 'A', 'cocap.IP', 'co.MIP') => ('-d', 'AA', 'cocap.IP', 'co.MIP')
('-d', 'A', 'cocap.IP', 'cocap.MIP') => ('-d', 'R', 'cocap.IP', 'cocap.MIP')
('-d', 'A', 'cocap.IP', 'cocap.MIP') => ('-d', 'AA', 'cocap.IP', 'cocap.MIP')
('-d', 'AA', 'cocap.IP', 'cocap.MIP') => ('-d', 'T', 'cocap.IP', 'cocap.MIP')
('-d', 'AA', 'cocap.IP', 'cocap.MIP') => ('-d', 'EA', 'cocap.IP', 'cocap.MIP')
('-d', 'AA', 'cocap.IP', 'MIP') => ('-d', 'T', 'cocap.IP', 'MIP')
('-d', 'AA', 'cocap.IP', 'MIP') => ('-d', 'EA', 'cocap.IP', 'MIP')
('-d', 'AA', 'cocap.IP', 'co.MIP') => ('-d', 'T', 'cocap.IP', 'co.MIP')
('-d', 'AA', 'cocap.IP', 'co.MIP') => ('-d', 'EA', 'cocap.IP', 'co.MIP')
('p', 'A', 'cocap.IP', 'MIP') => ('p', 'R', 'cocap.IP', 'MIP')
('p', 'A', 'cocap.IP', 'MIP') => ('p', 'AA', 'cocap.IP', 'MIP')
('p', 'A', 'cocap.IP', 'co.MIP') => ('p', 'R', 'cocap.IP', 'co.MIP')
('p', 'A', 'cocap.IP', 'co.MIP') => ('p', 'AA', 'cocap.IP', 'co.MIP')
('p', 'AA', 'cocap.IP', 'co.MIP') => ('p', 'T', 'cocap.IP', 'co.MIP')
('p', 'AA', 'cocap.IP', 'co.MIP') => ('p', 'EA', 'cocap.IP', 'co.MIP')
('p', 'AA', 'cocap.IP', 'MIP') => ('p', 'T', 'cocap.IP', 'MIP')
('p', 'AA', 'cocap.IP', 'MIP') => ('p', 'EA', 'cocap.IP', 'MIP')
('p', 'AA', 'cocap.IP', 'cocap.MIP') => ('p', 'T', 'cocap.IP', 'cocap.MIP')
('p', 'AA', 'cocap.IP', 'cocap.MIP') => ('p', 'EA', 'cocap.IP', 'cocap.MIP')
('-d', 'A', 'co.IP', 'co.NEXP_plo') => ('-d', 'R', 'co.IP', 'co.NEXP_plo')
('-d', 'A', 'co.IP', 'co.NEXP_plo') => ('-d', 'AA', 'co.IP', 'co.NEXP_plo')
('-d', 'A', 'IP', 'NEXP_plo') => ('-d', 'R', 'IP', 'NEXP_plo')
('-d', 'A', 'IP', 'NEXP_plo') => ('-d', 'AA', 'IP', 'NEXP_plo')
('-d', 'A', 'AM', 'NEXP_plo') => ('-d', 'R', 'AM', 'NEXP_plo')
('-d', 'A', 'AM', 'NEXP_plo') => ('-d', 'AA', 'AM', 'NEXP_plo')
('-d', 'A', 'co.AM', 'co.NEXP_plo') => ('-d', 'R', 'co.AM', 'co.NEXP_plo')
('-d', 'A', 'co.AM', 'co.NEXP_plo') => ('-d', 'AA', 'co.AM', 'co.NEXP_plo')
('-d', 'A', 'co.AM', 'co.AH_plo') => ('-d', 'R', 'co.AM', 'co.AH_plo')
('-d', 'A', 'co.AM', 'co.AH_plo') => ('-d', 'AA', 'co.AM', 'co.AH_plo')
('-d', 'A', 'AM', 'AH_plo') => ('-d', 'R', 'AM', 'AH_plo')
('-d', 'A', 'AM', 'AH_plo') => ('-d', 'AA', 'AM', 'AH_plo')
('-d', 'AA', 'AM', 'AH_plo') => ('-d', 'T', 'AM', 'AH_plo')
('-d', 'AA', 'AM', 'AH_plo') => ('-d', 'EA', 'AM', 'AH_plo')
('-d', 'AA', 'co.AM', 'co.AH_plo') => ('-d', 'T', 'co.AM', 'co.AH_plo')
('-d', 'AA', 'co.AM', 'co.AH_plo') => ('-d', 'EA', 'co.AM', 'co.AH_plo')
('-d', 'AA', 'co.AM', 'co.NEXP_plo') => ('-d', 'T', 'co.AM', 'co.NEXP_plo')
('-d', 'AA', 'co.AM', 'co.NEXP_plo') => ('-d', 'EA', 'co.AM', 'co.NEXP_plo')
('-d', 'AA', 'AM', 'NEXP_plo') => ('-d', 'T', 'AM', 'NEXP_plo')
('-d', 'AA', 'AM', 'NEXP_plo') => ('-d', 'EA', 'AM', 'NEXP_plo')
('-d', 'A', 'IP', 'AH_plo') => ('-d', 'R', 'IP', 'AH_plo')
('-d', 'A', 'IP', 'AH_plo') => ('-d', 'AA', 'IP', 'AH_plo')
('-d', 'A', 'co.IP', 'co.AH_plo') => ('-d', 'R', 'co.IP', 'co.AH_plo')
('-d', 'A', 'co.IP', 'co.AH_plo') => ('-d', 'AA', 'co.IP', 'co.AH_plo')
('-d', 'AA', 'co.IP', 'co.AH_plo') => ('-d', 'T', 'co.IP', 'co.AH_plo')
('-d', 'AA', 'co.IP', 'co.AH_plo') => ('-d', 'EA', 'co.IP', 'co.AH_plo')
('-d', 'AA', 'IP', 'AH_plo') => ('-d', 'T', 'IP', 'AH_plo')
('-d', 'AA', 'IP', 'AH_plo') => ('-d', 'EA', 'IP', 'AH_plo')
('-d', 'AA', 'IP', 'NEXP_plo') => ('-d', 'T', 'IP', 'NEXP_plo')
('-d', 'AA', 'IP', 'NEXP_plo') => ('-d', 'EA', 'IP', 'NEXP_plo')
('-d', 'AA', 'co.IP', 'co.NEXP_plo') => ('-d', 'T', 'co.IP', 'co.NEXP_plo')
('-d', 'AA', 'co.IP', 'co.NEXP_plo') => ('-d', 'EA', 'co.IP', 'co.NEXP_plo')
('p', 'A', 'co.IP', 'co.NEXP_plo') => ('p', 'R', 'co.IP', 'co.NEXP_plo')
('p', 'A', 'co.IP', 'co.NEXP_plo') => ('p', 'AA', 'co.IP', 'co.NEXP_plo')
('p', 'A', 'IP', 'NEXP_plo') => ('p', 'R', 'IP', 'NEXP_plo')
('p', 'A', 'IP', 'NEXP_plo') => ('p', 'AA', 'IP', 'NEXP_plo')
('p', 'A', 'AM', 'NEXP_plo') => ('p', 'R', 'AM', 'NEXP_plo')
('p', 'A', 'AM', 'NEXP_plo') => ('p', 'AA', 'AM', 'NEXP_plo')
('p', 'A', 'co.AM', 'co.NEXP_plo') => ('p', 'R', 'co.AM', 'co.NEXP_plo')
('p', 'A', 'co.AM', 'co.NEXP_plo') => ('p', 'AA', 'co.AM', 'co.NEXP_plo')
('p', 'A', 'co.AM', 'co.AH_plo') => ('p', 'R', 'co.AM', 'co.AH_plo')
('p', 'A', 'co.AM', 'co.AH_plo') => ('p', 'AA', 'co.AM', 'co.AH_plo')
('p', 'A', 'AM', 'AH_plo') => ('p', 'R', 'AM', 'AH_plo')
('p', 'A', 'AM', 'AH_plo') => ('p', 'AA', 'AM', 'AH_plo')
('p', 'AA', 'AM', 'AH_plo') => ('p', 'T', 'AM', 'AH_plo')
('p', 'AA', 'AM', 'AH_plo') => ('p', 'EA', 'AM', 'AH_plo')
('p', 'AA', 'co.AM', 'co.AH_plo') => ('p', 'T', 'co.AM', 'co.AH_plo')
('p', 'AA', 'co.AM', 'co.AH_plo') => ('p', 'EA', 'co.AM', 'co.AH_plo')
('p', 'AA', 'co.AM', 'co.NEXP_plo') => ('p', 'T', 'co.AM', 'co.NEXP_plo')
('p', 'AA', 'co.AM', 'co.NEXP_plo') => ('p', 'EA', 'co.AM', 'co.NEXP_plo')
('p', 'AA', 'AM', 'NEXP_plo') => ('p', 'T', 'AM', 'NEXP_plo')
('p', 'AA', 'AM', 'NEXP_plo') => ('p', 'EA', 'AM', 'NEXP_plo')
('p', 'A', 'IP', 'AH_plo') => ('p', 'R', 'IP', 'AH_plo')
('p', 'A', 'IP', 'AH_plo') => ('p', 'AA', 'IP', 'AH_plo')
('p', 'A', 'co.IP', 'co.AH_plo') => ('p', 'R', 'co.IP', 'co.AH_plo')
('p', 'A', 'co.IP', 'co.AH_plo') => ('p', 'AA', 'co.IP', 'co.AH_plo')
('p', 'AA', 'co.IP', 'co.AH_plo') => ('p', 'T', 'co.IP', 'co.AH_plo')
('p', 'AA', 'co.IP', 'co.AH_plo') => ('p', 'EA', 'co.IP', 'co.AH_plo')
('p', 'AA', 'IP', 'AH_plo') => ('p', 'T', 'IP', 'AH_plo')
('p', 'AA', 'IP', 'AH_plo') => ('p', 'EA', 'IP', 'AH_plo')
('p', 'AA', 'IP', 'NEXP_plo') => ('p', 'T', 'IP', 'NEXP_plo')
('p', 'AA', 'IP', 'NEXP_plo') => ('p', 'EA', 'IP', 'NEXP_plo')
('p', 'AA', 'co.IP', 'co.NEXP_plo') => ('p', 'T', 'co.IP', 'co.NEXP_plo')
('p', 'AA', 'co.IP', 'co.NEXP_plo') => ('p', 'EA', 'co.IP', 'co.NEXP_plo')
('p', 'E', 'co.AM', 'co.MIP') => ('-d', 'E', 'co.AM', 'co.MIP')
('p', 'E', 'AM', 'MIP') => ('-d', 'E', 'AM', 'MIP')
('p', 'A', 'co.AM', 'co.MIP') => ('-d', 'A', 'co.AM', 'co.MIP')
('p', 'A', 'co.AM', 'co.MIP') => ('p', 'R', 'co.AM', 'co.MIP')
('p', 'A', 'co.AM', 'co.MIP') => ('p', 'AA', 'co.AM', 'co.MIP')
('p', 'A', 'AM', 'MIP') => ('-d', 'A', 'AM', 'MIP')
('p', 'A', 'AM', 'MIP') => ('p', 'R', 'AM', 'MIP')
('p', 'A', 'AM', 'MIP') => ('p', 'AA', 'AM', 'MIP')
('p', 'AA', 'AM', 'MIP') => ('-d', 'AA', 'AM', 'MIP')
('p', 'AA', 'AM', 'MIP') => ('p', 'T', 'AM', 'MIP')
('p', 'AA', 'AM', 'MIP') => ('p', 'EA', 'AM', 'MIP')
('p', 'AA', 'co.AM', 'co.MIP') => ('-d', 'AA', 'co.AM', 'co.MIP')
('p', 'AA', 'co.AM', 'co.MIP') => ('p', 'T', 'co.AM', 'co.MIP')
('p', 'AA', 'co.AM', 'co.MIP') => ('p', 'EA', 'co.AM', 'co.MIP')
('p', 'EA', 'co.AM', 'co.MIP') => ('-d', 'EA', 'co.AM', 'co.MIP')
('p', 'EA', 'AM', 'MIP') => ('-d', 'EA', 'AM', 'MIP')
('p', 'T', 'co.AM', 'co.MIP') => ('-d', 'T', 'co.AM', 'co.MIP')
('p', 'T', 'AM', 'MIP') => ('-d', 'T', 'AM', 'MIP')
('p', 'R', 'AM', 'MIP') => ('-d', 'R', 'AM', 'MIP')
('p', 'R', 'co.AM', 'co.MIP') => ('-d', 'R', 'co.AM', 'co.MIP')
('p', 'AA', 'co.IP', 'co.MIP') => ('-d', 'AA', 'co.IP', 'co.MIP')
('p', 'AA', 'co.IP', 'co.MIP') => ('p', 'T', 'co.IP', 'co.MIP')
('p', 'AA', 'co.IP', 'co.MIP') => ('p', 'EA', 'co.IP', 'co.MIP')
('p', 'AA', 'IP', 'MIP') => ('-d', 'AA', 'IP', 'MIP')
('p', 'AA', 'IP', 'MIP') => ('p', 'T', 'IP', 'MIP')
('p', 'AA', 'IP', 'MIP') => ('p', 'EA', 'IP', 'MIP')
('p', 'EA', 'IP', 'MIP') => ('-d', 'EA', 'IP', 'MIP')
('p', 'EA', 'IP', 'MIP') => ('p', 'E', 'IP', 'MIP')
('p', 'EA', 'co.IP', 'co.MIP') => ('-d', 'EA', 'co.IP', 'co.MIP')
('p', 'EA', 'co.IP', 'co.MIP') => ('p', 'E', 'co.IP', 'co.MIP')
('p', 'E', 'co.IP', 'co.MIP') => ('-d', 'E', 'co.IP', 'co.MIP')
('p', 'E', 'IP', 'MIP') => ('-d', 'E', 'IP', 'MIP')
('p', 'T', 'IP', 'MIP') => ('-d', 'T', 'IP', 'MIP')
('p', 'T', 'co.IP', 'co.MIP') => ('-d', 'T', 'co.IP', 'co.MIP')
('p', 'R', 'co.IP', 'co.MIP') => ('-d', 'R', 'co.IP', 'co.MIP')
('p', 'R', 'IP', 'MIP') => ('-d', 'R', 'IP', 'MIP')
('p', 'A', 'EXP_plo', 'NEXP_plo') => ('-d', 'A', 'EXP_plo', 'NEXP_plo')
('p', 'A', 'EXP_plo', 'NEXP_plo') => ('p', 'R', 'EXP_plo', 'NEXP_plo')
('p', 'A', 'EXP_plo', 'NEXP_plo') => ('p', 'AA', 'EXP_plo', 'NEXP_plo')
('p', 'A', 'EXP_plo', 'co.NEXP_plo') => ('-d', 'A', 'EXP_plo', 'co.NEXP_plo')
('p', 'A', 'EXP_plo', 'co.NEXP_plo') => ('p', 'R', 'EXP_plo', 'co.NEXP_plo')
('p', 'A', 'EXP_plo', 'co.NEXP_plo') => ('p', 'AA', 'EXP_plo', 'co.NEXP_plo')
('p', 'A', 'EXP_plo', 'cocap.NEXP_plo') => ('-d', 'A', 'EXP_plo', 'cocap.NEXP_plo')
('p', 'A', 'EXP_plo', 'cocap.NEXP_plo') => ('p', 'R', 'EXP_plo', 'cocap.NEXP_plo')
('p', 'A', 'EXP_plo', 'cocap.NEXP_plo') => ('p', 'AA', 'EXP_plo', 'cocap.NEXP_plo')
('-d', 'A', 'EXP_plo', 'co.NEXP_plo') => ('-d', 'R', 'EXP_plo', 'co.NEXP_plo')
('-d', 'A', 'EXP_plo', 'co.NEXP_plo') => ('-d', 'AA', 'EXP_plo', 'co.NEXP_plo')
('-d', 'A', 'EXP_plo', 'cocap.NEXP_plo') => ('-d', 'R', 'EXP_plo', 'cocap.NEXP_plo')
('-d', 'A', 'EXP_plo', 'cocap.NEXP_plo') => ('-d', 'AA', 'EXP_plo', 'cocap.NEXP_plo')
('-d', 'A', 'EXP_plo', 'cocap.AH_plo') => ('-d', 'R', 'EXP_plo', 'cocap.AH_plo')
('-d', 'A', 'EXP_plo', 'cocap.AH_plo') => ('-d', 'AA', 'EXP_plo', 'cocap.AH_plo')
('-d', 'A', 'EXP_plo', 'co.AH_plo') => ('-d', 'R', 'EXP_plo', 'co.AH_plo')
('-d', 'A', 'EXP_plo', 'co.AH_plo') => ('-d', 'AA', 'EXP_plo', 'co.AH_plo')
('-d', 'A', 'EXP_plo', 'AH_plo') => ('-d', 'R', 'EXP_plo', 'AH_plo')
('-d', 'A', 'EXP_plo', 'AH_plo') => ('-d', 'AA', 'EXP_plo', 'AH_plo')
('-d', 'AA', 'EXP_plo', 'AH_plo') => ('-d', 'T', 'EXP_plo', 'AH_plo')
('-d', 'AA', 'EXP_plo', 'AH_plo') => ('-d', 'EA', 'EXP_plo', 'AH_plo')
('-d', 'AA', 'EXP_plo', 'co.AH_plo') => ('-d', 'T', 'EXP_plo', 'co.AH_plo')
('-d', 'AA', 'EXP_plo', 'co.AH_plo') => ('-d', 'EA', 'EXP_plo', 'co.AH_plo')
('-d', 'AA', 'EXP_plo', 'cocap.AH_plo') => ('-d', 'T', 'EXP_plo', 'cocap.AH_plo')
('-d', 'AA', 'EXP_plo', 'cocap.AH_plo') => ('-d', 'EA', 'EXP_plo', 'cocap.AH_plo')
('-d', 'A', 'EXP_plo', 'NEXP_plo') => ('-d', 'R', 'EXP_plo', 'NEXP_plo')
('-d', 'A', 'EXP_plo', 'NEXP_plo') => ('-d', 'AA', 'EXP_plo', 'NEXP_plo')
('-d', 'AA', 'EXP_plo', 'NEXP_plo') => ('-d', 'T', 'EXP_plo', 'NEXP_plo')
('-d', 'AA', 'EXP_plo', 'NEXP_plo') => ('-d', 'EA', 'EXP_plo', 'NEXP_plo')
('-d', 'AA', 'EXP_plo', 'co.NEXP_plo') => ('-d', 'T', 'EXP_plo', 'co.NEXP_plo')
('-d', 'AA', 'EXP_plo', 'co.NEXP_plo') => ('-d', 'EA', 'EXP_plo', 'co.NEXP_plo')
('-d', 'AA', 'EXP_plo', 'cocap.NEXP_plo') => ('-d', 'T', 'EXP_plo', 'cocap.NEXP_plo')
('-d', 'AA', 'EXP_plo', 'cocap.NEXP_plo') => ('-d', 'EA', 'EXP_plo', 'cocap.NEXP_plo')
('p', 'A', 'EXP_plo', 'cocap.AH_plo') => ('p', 'R', 'EXP_plo', 'cocap.AH_plo')
('p', 'A', 'EXP_plo', 'cocap.AH_plo') => ('p', 'AA', 'EXP_plo', 'cocap.AH_plo')
('p', 'A', 'EXP_plo', 'co.AH_plo') => ('p', 'R', 'EXP_plo', 'co.AH_plo')
('p', 'A', 'EXP_plo', 'co.AH_plo') => ('p', 'AA', 'EXP_plo', 'co.AH_plo')
('p', 'A', 'EXP_plo', 'AH_plo') => ('p', 'R', 'EXP_plo', 'AH_plo')
('p', 'A', 'EXP_plo', 'AH_plo') => ('p', 'AA', 'EXP_plo', 'AH_plo')
('p', 'AA', 'EXP_plo', 'AH_plo') => ('p', 'T', 'EXP_plo', 'AH_plo')
('p', 'AA', 'EXP_plo', 'AH_plo') => ('p', 'EA', 'EXP_plo', 'AH_plo')
('p', 'AA', 'EXP_plo', 'co.AH_plo') => ('p', 'T', 'EXP_plo', 'co.AH_plo')
('p', 'AA', 'EXP_plo', 'co.AH_plo') => ('p', 'EA', 'EXP_plo', 'co.AH_plo')
('p', 'AA', 'EXP_plo', 'cocap.AH_plo') => ('p', 'T', 'EXP_plo', 'cocap.AH_plo')
('p', 'AA', 'EXP_plo', 'cocap.AH_plo') => ('p', 'EA', 'EXP_plo', 'cocap.AH_plo')
('p', 'AA', 'EXP_plo', 'cocap.NEXP_plo') => ('p', 'T', 'EXP_plo', 'cocap.NEXP_plo')
('p', 'AA', 'EXP_plo', 'cocap.NEXP_plo') => ('p', 'EA', 'EXP_plo', 'cocap.NEXP_plo')
('p', 'AA', 'EXP_plo', 'co.NEXP_plo') => ('p', 'T', 'EXP_plo', 'co.NEXP_plo')
('p', 'AA', 'EXP_plo', 'co.NEXP_plo') => ('p', 'EA', 'EXP_plo', 'co.NEXP_plo')
('p', 'AA', 'EXP_plo', 'NEXP_plo') => ('p', 'T', 'EXP_plo', 'NEXP_plo')
('p', 'AA', 'EXP_plo', 'NEXP_plo') => ('p', 'EA', 'EXP_plo', 'NEXP_plo')
('p', 'A', 'NEXP_plo', 'NEXP') => ('-d', 'A', 'NEXP_plo', 'NEXP')
('p', 'A', 'NEXP_plo', 'NEXP') => ('p', 'R', 'NEXP_plo', 'NEXP')
('p', 'A', 'NEXP_plo', 'NEXP') => ('p', 'AA', 'NEXP_plo', 'NEXP')
('p', 'A', 'co.NEXP_plo', 'co.NEXP') => ('-d', 'A', 'co.NEXP_plo', 'co.NEXP')
('p', 'A', 'co.NEXP_plo', 'co.NEXP') => ('p', 'R', 'co.NEXP_plo', 'co.NEXP')
('p', 'A', 'co.NEXP_plo', 'co.NEXP') => ('p', 'AA', 'co.NEXP_plo', 'co.NEXP')
('p', 'A', 'cocap.NEXP_plo', 'cocap.NEXP') => ('-d', 'A', 'cocap.NEXP_plo', 'cocap.NEXP')
('p', 'A', 'cocap.NEXP_plo', 'cocap.NEXP') => ('p', 'R', 'cocap.NEXP_plo', 'cocap.NEXP')
('p', 'A', 'cocap.NEXP_plo', 'cocap.NEXP') => ('p', 'AA', 'cocap.NEXP_plo', 'cocap.NEXP')
('p', 'E', 'EXP_plo', 'cocap.NEXP') => ('-d', 'E', 'EXP_plo', 'cocap.NEXP')
('p', 'A', 'EXP_plo', 'cocap.NEXP') => ('-d', 'A', 'EXP_plo', 'cocap.NEXP')
('p', 'A', 'EXP_plo', 'cocap.NEXP') => ('p', 'R', 'EXP_plo', 'cocap.NEXP')
('p', 'A', 'EXP_plo', 'cocap.NEXP') => ('p', 'AA', 'EXP_plo', 'cocap.NEXP')
('-d', 'A', 'EXP_plo', 'co.NEXP') => ('-d', 'R', 'EXP_plo', 'co.NEXP')
('-d', 'A', 'EXP_plo', 'co.NEXP') => ('-d', 'AA', 'EXP_plo', 'co.NEXP')
('-d', 'A', 'EXP_plo', 'NEXP') => ('-d', 'R', 'EXP_plo', 'NEXP')
('-d', 'A', 'EXP_plo', 'NEXP') => ('-d', 'AA', 'EXP_plo', 'NEXP')
('-d', 'A', 'EXP_plo', 'cocap.NEXP') => ('-d', 'R', 'EXP_plo', 'cocap.NEXP')
('-d', 'A', 'EXP_plo', 'cocap.NEXP') => ('-d', 'AA', 'EXP_plo', 'cocap.NEXP')
('-d', 'A', 'EXP_plo', 'R') => ('-d', 'R', 'EXP_plo', 'R')
('-d', 'A', 'EXP_plo', 'R') => ('-d', 'AA', 'EXP_plo', 'R')
('-d', 'A', 'EXP_plo', 'RE') => ('-d', 'R', 'EXP_plo', 'RE')
('-d', 'A', 'EXP_plo', 'RE') => ('-d', 'AA', 'EXP_plo', 'RE')
('-d', 'A', 'EXP_plo', 'co.RE') => ('-d', 'R', 'EXP_plo', 'co.RE')
('-d', 'A', 'EXP_plo', 'co.RE') => ('-d', 'AA', 'EXP_plo', 'co.RE')
('-d', 'AA', 'EXP_plo', 'co.RE') => ('-d', 'T', 'EXP_plo', 'co.RE')
('-d', 'AA', 'EXP_plo', 'co.RE') => ('-d', 'EA', 'EXP_plo', 'co.RE')
('-d', 'AA', 'EXP_plo', 'RE') => ('-d', 'T', 'EXP_plo', 'RE')
('-d', 'AA', 'EXP_plo', 'RE') => ('-d', 'EA', 'EXP_plo', 'RE')
('-d', 'AA', 'EXP_plo', 'R') => ('-d', 'T', 'EXP_plo', 'R')
('-d', 'AA', 'EXP_plo', 'R') => ('-d', 'EA', 'EXP_plo', 'R')
('-d', 'A', 'EXP_plo', 'NEXP/poly') => ('-d', 'R', 'EXP_plo', 'NEXP/poly')
('-d', 'A', 'EXP_plo', 'NEXP/poly') => ('-d', 'AA', 'EXP_plo', 'NEXP/poly')
('-d', 'AA', 'EXP_plo', 'NEXP/poly') => ('-d', 'T', 'EXP_plo', 'NEXP/poly')
('-d', 'AA', 'EXP_plo', 'NEXP/poly') => ('-d', 'EA', 'EXP_plo', 'NEXP/poly')
('-d', 'AA', 'EXP_plo', 'cocap.NEXP') => ('-d', 'T', 'EXP_plo', 'cocap.NEXP')
('-d', 'AA', 'EXP_plo', 'cocap.NEXP') => ('-d', 'EA', 'EXP_plo', 'cocap.NEXP')
('-d', 'AA', 'EXP_plo', 'co.NEXP') => ('-d', 'T', 'EXP_plo', 'co.NEXP')
('-d', 'AA', 'EXP_plo', 'co.NEXP') => ('-d', 'EA', 'EXP_plo', 'co.NEXP')
('-d', 'AA', 'EXP_plo', 'NEXP') => ('-d', 'T', 'EXP_plo', 'NEXP')
('-d', 'AA', 'EXP_plo', 'NEXP') => ('-d', 'EA', 'EXP_plo', 'NEXP')
('p', 'A', 'EXP_plo', 'co.NEXP') => ('p', 'R', 'EXP_plo', 'co.NEXP')
('p', 'A', 'EXP_plo', 'co.NEXP') => ('p', 'AA', 'EXP_plo', 'co.NEXP')
('p', 'A', 'EXP_plo', 'NEXP') => ('p', 'R', 'EXP_plo', 'NEXP')
('p', 'A', 'EXP_plo', 'NEXP') => ('p', 'AA', 'EXP_plo', 'NEXP')
('p', 'A', 'EXP_plo', 'R') => ('p', 'R', 'EXP_plo', 'R')
('p', 'A', 'EXP_plo', 'R') => ('p', 'AA', 'EXP_plo', 'R')
('p', 'A', 'EXP_plo', 'RE') => ('p', 'R', 'EXP_plo', 'RE')
('p', 'A', 'EXP_plo', 'RE') => ('p', 'AA', 'EXP_plo', 'RE')
('p', 'A', 'EXP_plo', 'co.RE') => ('p', 'R', 'EXP_plo', 'co.RE')
('p', 'A', 'EXP_plo', 'co.RE') => ('p', 'AA', 'EXP_plo', 'co.RE')
('p', 'AA', 'EXP_plo', 'co.RE') => ('p', 'T', 'EXP_plo', 'co.RE')
('p', 'AA', 'EXP_plo', 'co.RE') => ('p', 'EA', 'EXP_plo', 'co.RE')
('p', 'AA', 'EXP_plo', 'RE') => ('p', 'T', 'EXP_plo', 'RE')
('p', 'AA', 'EXP_plo', 'RE') => ('p', 'EA', 'EXP_plo', 'RE')
('p', 'AA', 'EXP_plo', 'R') => ('p', 'T', 'EXP_plo', 'R')
('p', 'AA', 'EXP_plo', 'R') => ('p', 'EA', 'EXP_plo', 'R')
('p', 'A', 'EXP_plo', 'NEXP/poly') => ('p', 'R', 'EXP_plo', 'NEXP/poly')
('p', 'A', 'EXP_plo', 'NEXP/poly') => ('p', 'AA', 'EXP_plo', 'NEXP/poly')
('p', 'AA', 'EXP_plo', 'NEXP/poly') => ('p', 'T', 'EXP_plo', 'NEXP/poly')
('p', 'AA', 'EXP_plo', 'NEXP/poly') => ('p', 'EA', 'EXP_plo', 'NEXP/poly')
('p', 'AA', 'EXP_plo', 'NEXP') => ('p', 'T', 'EXP_plo', 'NEXP')
('p', 'AA', 'EXP_plo', 'NEXP') => ('p', 'EA', 'EXP_plo', 'NEXP')
('p', 'AA', 'EXP_plo', 'co.NEXP') => ('p', 'T', 'EXP_plo', 'co.NEXP')
('p', 'AA', 'EXP_plo', 'co.NEXP') => ('p', 'EA', 'EXP_plo', 'co.NEXP')
('p', 'AA', 'EXP_plo', 'cocap.NEXP') => ('p', 'T', 'EXP_plo', 'cocap.NEXP')
('p', 'AA', 'EXP_plo', 'cocap.NEXP') => ('p', 'EA', 'EXP_plo', 'cocap.NEXP')
('-d', 'A', 'cocap.NEXP_plo', 'co.NEXP') => ('-d', 'R', 'cocap.NEXP_plo', 'co.NEXP')
('-d', 'A', 'cocap.NEXP_plo', 'co.NEXP') => ('-d', 'AA', 'cocap.NEXP_plo', 'co.NEXP')
('-d', 'A', 'cocap.NEXP_plo', 'NEXP') => ('-d', 'R', 'cocap.NEXP_plo', 'NEXP')
('-d', 'A', 'cocap.NEXP_plo', 'NEXP') => ('-d', 'AA', 'cocap.NEXP_plo', 'NEXP')
('-d', 'A', 'cocap.NEXP_plo', 'cocap.NEXP') => ('-d', 'R', 'cocap.NEXP_plo', 'cocap.NEXP')
('-d', 'A', 'cocap.NEXP_plo', 'cocap.NEXP') => ('-d', 'AA', 'cocap.NEXP_plo', 'cocap.NEXP')
('-d', 'A', 'cocap.MIP', 'cocap.NEXP') => ('-d', 'R', 'cocap.MIP', 'cocap.NEXP')
('-d', 'A', 'cocap.MIP', 'cocap.NEXP') => ('-d', 'AA', 'cocap.MIP', 'cocap.NEXP')
('-d', 'A', 'cocap.MIP', 'co.NEXP') => ('-d', 'R', 'cocap.MIP', 'co.NEXP')
('-d', 'A', 'cocap.MIP', 'co.NEXP') => ('-d', 'AA', 'cocap.MIP', 'co.NEXP')
('-d', 'A', 'cocap.MIP', 'NEXP') => ('-d', 'R', 'cocap.MIP', 'NEXP')
('-d', 'A', 'cocap.MIP', 'NEXP') => ('-d', 'AA', 'cocap.MIP', 'NEXP')
('-d', 'A', 'cocap.MIP', 'R') => ('-d', 'R', 'cocap.MIP', 'R')
('-d', 'A', 'cocap.MIP', 'R') => ('-d', 'AA', 'cocap.MIP', 'R')
('-d', 'A', 'cocap.MIP', 'RE') => ('-d', 'R', 'cocap.MIP', 'RE')
('-d', 'A', 'cocap.MIP', 'RE') => ('-d', 'AA', 'cocap.MIP', 'RE')
('-d', 'A', 'cocap.MIP', 'co.RE') => ('-d', 'R', 'cocap.MIP', 'co.RE')
('-d', 'A', 'cocap.MIP', 'co.RE') => ('-d', 'AA', 'cocap.MIP', 'co.RE')
('-d', 'AA', 'cocap.MIP', 'co.RE') => ('-d', 'T', 'cocap.MIP', 'co.RE')
('-d', 'AA', 'cocap.MIP', 'co.RE') => ('-d', 'EA', 'cocap.MIP', 'co.RE')
('-d', 'AA', 'cocap.MIP', 'RE') => ('-d', 'T', 'cocap.MIP', 'RE')
('-d', 'AA', 'cocap.MIP', 'RE') => ('-d', 'EA', 'cocap.MIP', 'RE')
('-d', 'AA', 'cocap.MIP', 'R') => ('-d', 'T', 'cocap.MIP', 'R')
('-d', 'AA', 'cocap.MIP', 'R') => ('-d', 'EA', 'cocap.MIP', 'R')
('-d', 'A', 'cocap.MIP', 'NEXP/poly') => ('-d', 'R', 'cocap.MIP', 'NEXP/poly')
('-d', 'A', 'cocap.MIP', 'NEXP/poly') => ('-d', 'AA', 'cocap.MIP', 'NEXP/poly')
('-d', 'AA', 'cocap.MIP', 'NEXP/poly') => ('-d', 'T', 'cocap.MIP', 'NEXP/poly')
('-d', 'AA', 'cocap.MIP', 'NEXP/poly') => ('-d', 'EA', 'cocap.MIP', 'NEXP/poly')
('-d', 'AA', 'cocap.MIP', 'NEXP') => ('-d', 'T', 'cocap.MIP', 'NEXP')
('-d', 'AA', 'cocap.MIP', 'NEXP') => ('-d', 'EA', 'cocap.MIP', 'NEXP')
('-d', 'AA', 'cocap.MIP', 'co.NEXP') => ('-d', 'T', 'cocap.MIP', 'co.NEXP')
('-d', 'AA', 'cocap.MIP', 'co.NEXP') => ('-d', 'EA', 'cocap.MIP', 'co.NEXP')
('-d', 'AA', 'cocap.MIP', 'cocap.NEXP') => ('-d', 'T', 'cocap.MIP', 'cocap.NEXP')
('-d', 'AA', 'cocap.MIP', 'cocap.NEXP') => ('-d', 'EA', 'cocap.MIP', 'cocap.NEXP')
('-d', 'A', 'cocap.NEXP_plo', 'R') => ('-d', 'R', 'cocap.NEXP_plo', 'R')
('-d', 'A', 'cocap.NEXP_plo', 'R') => ('-d', 'AA', 'cocap.NEXP_plo', 'R')
('-d', 'A', 'cocap.NEXP_plo', 'RE') => ('-d', 'R', 'cocap.NEXP_plo', 'RE')
('-d', 'A', 'cocap.NEXP_plo', 'RE') => ('-d', 'AA', 'cocap.NEXP_plo', 'RE')
('-d', 'A', 'cocap.NEXP_plo', 'co.RE') => ('-d', 'R', 'cocap.NEXP_plo', 'co.RE')
('-d', 'A', 'cocap.NEXP_plo', 'co.RE') => ('-d', 'AA', 'cocap.NEXP_plo', 'co.RE')
('-d', 'AA', 'cocap.NEXP_plo', 'co.RE') => ('-d', 'T', 'cocap.NEXP_plo', 'co.RE')
('-d', 'AA', 'cocap.NEXP_plo', 'co.RE') => ('-d', 'EA', 'cocap.NEXP_plo', 'co.RE')
('-d', 'AA', 'cocap.NEXP_plo', 'RE') => ('-d', 'T', 'cocap.NEXP_plo', 'RE')
('-d', 'AA', 'cocap.NEXP_plo', 'RE') => ('-d', 'EA', 'cocap.NEXP_plo', 'RE')
('-d', 'AA', 'cocap.NEXP_plo', 'R') => ('-d', 'T', 'cocap.NEXP_plo', 'R')
('-d', 'AA', 'cocap.NEXP_plo', 'R') => ('-d', 'EA', 'cocap.NEXP_plo', 'R')
('-d', 'A', 'cocap.NEXP_plo', 'NEXP/poly') => ('-d', 'R', 'cocap.NEXP_plo', 'NEXP/poly')
('-d', 'A', 'cocap.NEXP_plo', 'NEXP/poly') => ('-d', 'AA', 'cocap.NEXP_plo', 'NEXP/poly')
('-d', 'AA', 'cocap.NEXP_plo', 'NEXP/poly') => ('-d', 'T', 'cocap.NEXP_plo', 'NEXP/poly')
('-d', 'AA', 'cocap.NEXP_plo', 'NEXP/poly') => ('-d', 'EA', 'cocap.NEXP_plo', 'NEXP/poly')
('-d', 'AA', 'cocap.NEXP_plo', 'cocap.NEXP') => ('-d', 'T', 'cocap.NEXP_plo', 'cocap.NEXP')
('-d', 'AA', 'cocap.NEXP_plo', 'cocap.NEXP') => ('-d', 'EA', 'cocap.NEXP_plo', 'cocap.NEXP')
('-d', 'AA', 'cocap.NEXP_plo', 'co.NEXP') => ('-d', 'T', 'cocap.NEXP_plo', 'co.NEXP')
('-d', 'AA', 'cocap.NEXP_plo', 'co.NEXP') => ('-d', 'EA', 'cocap.NEXP_plo', 'co.NEXP')
('-d', 'AA', 'cocap.NEXP_plo', 'NEXP') => ('-d', 'T', 'cocap.NEXP_plo', 'NEXP')
('-d', 'AA', 'cocap.NEXP_plo', 'NEXP') => ('-d', 'EA', 'cocap.NEXP_plo', 'NEXP')
('p', 'A', 'cocap.NEXP_plo', 'co.NEXP') => ('p', 'R', 'cocap.NEXP_plo', 'co.NEXP')
('p', 'A', 'cocap.NEXP_plo', 'co.NEXP') => ('p', 'AA', 'cocap.NEXP_plo', 'co.NEXP')
('p', 'A', 'cocap.NEXP_plo', 'NEXP') => ('p', 'R', 'cocap.NEXP_plo', 'NEXP')
('p', 'A', 'cocap.NEXP_plo', 'NEXP') => ('p', 'AA', 'cocap.NEXP_plo', 'NEXP')
('p', 'A', 'cocap.MIP', 'NEXP') => ('p', 'R', 'cocap.MIP', 'NEXP')
('p', 'A', 'cocap.MIP', 'NEXP') => ('p', 'AA', 'cocap.MIP', 'NEXP')
('p', 'A', 'cocap.MIP', 'co.NEXP') => ('p', 'R', 'cocap.MIP', 'co.NEXP')
('p', 'A', 'cocap.MIP', 'co.NEXP') => ('p', 'AA', 'cocap.MIP', 'co.NEXP')
('p', 'A', 'cocap.MIP', 'cocap.NEXP') => ('p', 'R', 'cocap.MIP', 'cocap.NEXP')
('p', 'A', 'cocap.MIP', 'cocap.NEXP') => ('p', 'AA', 'cocap.MIP', 'cocap.NEXP')
('p', 'A', 'cocap.MIP', 'R') => ('p', 'R', 'cocap.MIP', 'R')
('p', 'A', 'cocap.MIP', 'R') => ('p', 'AA', 'cocap.MIP', 'R')
('p', 'A', 'cocap.MIP', 'RE') => ('p', 'R', 'cocap.MIP', 'RE')
('p', 'A', 'cocap.MIP', 'RE') => ('p', 'AA', 'cocap.MIP', 'RE')
('p', 'A', 'cocap.MIP', 'co.RE') => ('p', 'R', 'cocap.MIP', 'co.RE')
('p', 'A', 'cocap.MIP', 'co.RE') => ('p', 'AA', 'cocap.MIP', 'co.RE')
('p', 'AA', 'cocap.MIP', 'co.RE') => ('p', 'T', 'cocap.MIP', 'co.RE')
('p', 'AA', 'cocap.MIP', 'co.RE') => ('p', 'EA', 'cocap.MIP', 'co.RE')
('p', 'AA', 'cocap.MIP', 'RE') => ('p', 'T', 'cocap.MIP', 'RE')
('p', 'AA', 'cocap.MIP', 'RE') => ('p', 'EA', 'cocap.MIP', 'RE')
('p', 'AA', 'cocap.MIP', 'R') => ('p', 'T', 'cocap.MIP', 'R')
('p', 'AA', 'cocap.MIP', 'R') => ('p', 'EA', 'cocap.MIP', 'R')
('p', 'A', 'cocap.MIP', 'NEXP/poly') => ('p', 'R', 'cocap.MIP', 'NEXP/poly')
('p', 'A', 'cocap.MIP', 'NEXP/poly') => ('p', 'AA', 'cocap.MIP', 'NEXP/poly')
('p', 'AA', 'cocap.MIP', 'NEXP/poly') => ('p', 'T', 'cocap.MIP', 'NEXP/poly')
('p', 'AA', 'cocap.MIP', 'NEXP/poly') => ('p', 'EA', 'cocap.MIP', 'NEXP/poly')
('p', 'AA', 'cocap.MIP', 'cocap.NEXP') => ('p', 'T', 'cocap.MIP', 'cocap.NEXP')
('p', 'AA', 'cocap.MIP', 'cocap.NEXP') => ('p', 'EA', 'cocap.MIP', 'cocap.NEXP')
('p', 'AA', 'cocap.MIP', 'co.NEXP') => ('p', 'T', 'cocap.MIP', 'co.NEXP')
('p', 'AA', 'cocap.MIP', 'co.NEXP') => ('p', 'EA', 'cocap.MIP', 'co.NEXP')
('p', 'AA', 'cocap.MIP', 'NEXP') => ('p', 'T', 'cocap.MIP', 'NEXP')
('p', 'AA', 'cocap.MIP', 'NEXP') => ('p', 'EA', 'cocap.MIP', 'NEXP')
('p', 'A', 'cocap.NEXP_plo', 'R') => ('p', 'R', 'cocap.NEXP_plo', 'R')
('p', 'A', 'cocap.NEXP_plo', 'R') => ('p', 'AA', 'cocap.NEXP_plo', 'R')
('p', 'A', 'cocap.NEXP_plo', 'RE') => ('p', 'R', 'cocap.NEXP_plo', 'RE')
('p', 'A', 'cocap.NEXP_plo', 'RE') => ('p', 'AA', 'cocap.NEXP_plo', 'RE')
('p', 'A', 'cocap.NEXP_plo', 'co.RE') => ('p', 'R', 'cocap.NEXP_plo', 'co.RE')
('p', 'A', 'cocap.NEXP_plo', 'co.RE') => ('p', 'AA', 'cocap.NEXP_plo', 'co.RE')
('p', 'AA', 'cocap.NEXP_plo', 'co.RE') => ('p', 'T', 'cocap.NEXP_plo', 'co.RE')
('p', 'AA', 'cocap.NEXP_plo', 'co.RE') => ('p', 'EA', 'cocap.NEXP_plo', 'co.RE')
('p', 'AA', 'cocap.NEXP_plo', 'RE') => ('p', 'T', 'cocap.NEXP_plo', 'RE')
('p', 'AA', 'cocap.NEXP_plo', 'RE') => ('p', 'EA', 'cocap.NEXP_plo', 'RE')
('p', 'AA', 'cocap.NEXP_plo', 'R') => ('p', 'T', 'cocap.NEXP_plo', 'R')
('p', 'AA', 'cocap.NEXP_plo', 'R') => ('p', 'EA', 'cocap.NEXP_plo', 'R')
('p', 'A', 'cocap.NEXP_plo', 'NEXP/poly') => ('p', 'R', 'cocap.NEXP_plo', 'NEXP/poly')
('p', 'A', 'cocap.NEXP_plo', 'NEXP/poly') => ('p', 'AA', 'cocap.NEXP_plo', 'NEXP/poly')
('p', 'AA', 'cocap.NEXP_plo', 'NEXP/poly') => ('p', 'T', 'cocap.NEXP_plo', 'NEXP/poly')
('p', 'AA', 'cocap.NEXP_plo', 'NEXP/poly') => ('p', 'EA', 'cocap.NEXP_plo', 'NEXP/poly')
('p', 'AA', 'cocap.NEXP_plo', 'NEXP') => ('p', 'T', 'cocap.NEXP_plo', 'NEXP')
('p', 'AA', 'cocap.NEXP_plo', 'NEXP') => ('p', 'EA', 'cocap.NEXP_plo', 'NEXP')
('p', 'AA', 'cocap.NEXP_plo', 'co.NEXP') => ('p', 'T', 'cocap.NEXP_plo', 'co.NEXP')
('p', 'AA', 'cocap.NEXP_plo', 'co.NEXP') => ('p', 'EA', 'cocap.NEXP_plo', 'co.NEXP')
('p', 'AA', 'cocap.NEXP_plo', 'cocap.NEXP') => ('p', 'T', 'cocap.NEXP_plo', 'cocap.NEXP')
('p', 'AA', 'cocap.NEXP_plo', 'cocap.NEXP') => ('p', 'EA', 'cocap.NEXP_plo', 'cocap.NEXP')
('-d', 'A', 'co.NEXP_plo', 'R') => ('-d', 'R', 'co.NEXP_plo', 'R')
('-d', 'A', 'co.NEXP_plo', 'R') => ('-d', 'AA', 'co.NEXP_plo', 'R')
('-d', 'A', 'NEXP_plo', 'R') => ('-d', 'R', 'NEXP_plo', 'R')
('-d', 'A', 'NEXP_plo', 'R') => ('-d', 'AA', 'NEXP_plo', 'R')
('-d', 'A', 'MIP', 'R') => ('-d', 'R', 'MIP', 'R')
('-d', 'A', 'MIP', 'R') => ('-d', 'AA', 'MIP', 'R')
('-d', 'A', 'co.MIP', 'R') => ('-d', 'R', 'co.MIP', 'R')
('-d', 'A', 'co.MIP', 'R') => ('-d', 'AA', 'co.MIP', 'R')
('-d', 'A', 'co.MIP', 'RE') => ('-d', 'R', 'co.MIP', 'RE')
('-d', 'A', 'co.MIP', 'RE') => ('-d', 'AA', 'co.MIP', 'RE')
('-d', 'A', 'MIP', 'co.RE') => ('-d', 'R', 'MIP', 'co.RE')
('-d', 'A', 'MIP', 'co.RE') => ('-d', 'AA', 'MIP', 'co.RE')
('-d', 'AA', 'MIP', 'co.RE') => ('-d', 'T', 'MIP', 'co.RE')
('-d', 'AA', 'MIP', 'co.RE') => ('-d', 'EA', 'MIP', 'co.RE')
('-d', 'AA', 'co.MIP', 'RE') => ('-d', 'T', 'co.MIP', 'RE')
('-d', 'AA', 'co.MIP', 'RE') => ('-d', 'EA', 'co.MIP', 'RE')
('-d', 'A', 'co.MIP', 'co.RE') => ('-d', 'R', 'co.MIP', 'co.RE')
('-d', 'A', 'co.MIP', 'co.RE') => ('-d', 'AA', 'co.MIP', 'co.RE')
('-d', 'A', 'MIP', 'RE') => ('-d', 'R', 'MIP', 'RE')
('-d', 'A', 'MIP', 'RE') => ('-d', 'AA', 'MIP', 'RE')
('-d', 'AA', 'MIP', 'RE') => ('-d', 'T', 'MIP', 'RE')
('-d', 'AA', 'MIP', 'RE') => ('-d', 'EA', 'MIP', 'RE')
('-d', 'AA', 'co.MIP', 'co.RE') => ('-d', 'T', 'co.MIP', 'co.RE')
('-d', 'AA', 'co.MIP', 'co.RE') => ('-d', 'EA', 'co.MIP', 'co.RE')
('-d', 'AA', 'co.MIP', 'R') => ('-d', 'T', 'co.MIP', 'R')
('-d', 'AA', 'co.MIP', 'R') => ('-d', 'EA', 'co.MIP', 'R')
('-d', 'AA', 'MIP', 'R') => ('-d', 'T', 'MIP', 'R')
('-d', 'AA', 'MIP', 'R') => ('-d', 'EA', 'MIP', 'R')
('-d', 'A', 'NEXP_plo', 'RE') => ('-d', 'R', 'NEXP_plo', 'RE')
('-d', 'A', 'NEXP_plo', 'RE') => ('-d', 'AA', 'NEXP_plo', 'RE')
('-d', 'A', 'co.NEXP_plo', 'co.RE') => ('-d', 'R', 'co.NEXP_plo', 'co.RE')
('-d', 'A', 'co.NEXP_plo', 'co.RE') => ('-d', 'AA', 'co.NEXP_plo', 'co.RE')
('-d', 'AA', 'co.NEXP_plo', 'co.RE') => ('-d', 'T', 'co.NEXP_plo', 'co.RE')
('-d', 'AA', 'co.NEXP_plo', 'co.RE') => ('-d', 'EA', 'co.NEXP_plo', 'co.RE')
('-d', 'AA', 'NEXP_plo', 'RE') => ('-d', 'T', 'NEXP_plo', 'RE')
('-d', 'AA', 'NEXP_plo', 'RE') => ('-d', 'EA', 'NEXP_plo', 'RE')
('-d', 'A', 'NEXP_plo', 'co.RE') => ('-d', 'R', 'NEXP_plo', 'co.RE')
('-d', 'A', 'NEXP_plo', 'co.RE') => ('-d', 'AA', 'NEXP_plo', 'co.RE')
('-d', 'A', 'co.NEXP_plo', 'RE') => ('-d', 'R', 'co.NEXP_plo', 'RE')
('-d', 'A', 'co.NEXP_plo', 'RE') => ('-d', 'AA', 'co.NEXP_plo', 'RE')
('-d', 'AA', 'co.NEXP_plo', 'RE') => ('-d', 'T', 'co.NEXP_plo', 'RE')
('-d', 'AA', 'co.NEXP_plo', 'RE') => ('-d', 'EA', 'co.NEXP_plo', 'RE')
('-d', 'AA', 'NEXP_plo', 'co.RE') => ('-d', 'T', 'NEXP_plo', 'co.RE')
('-d', 'AA', 'NEXP_plo', 'co.RE') => ('-d', 'EA', 'NEXP_plo', 'co.RE')
('-d', 'AA', 'NEXP_plo', 'R') => ('-d', 'T', 'NEXP_plo', 'R')
('-d', 'AA', 'NEXP_plo', 'R') => ('-d', 'EA', 'NEXP_plo', 'R')
('-d', 'AA', 'co.NEXP_plo', 'R') => ('-d', 'T', 'co.NEXP_plo', 'R')
('-d', 'AA', 'co.NEXP_plo', 'R') => ('-d', 'EA', 'co.NEXP_plo', 'R')
('p', 'A', 'co.NEXP_plo', 'R') => ('p', 'R', 'co.NEXP_plo', 'R')
('p', 'A', 'co.NEXP_plo', 'R') => ('p', 'AA', 'co.NEXP_plo', 'R')
('p', 'A', 'NEXP_plo', 'R') => ('p', 'R', 'NEXP_plo', 'R')
('p', 'A', 'NEXP_plo', 'R') => ('p', 'AA', 'NEXP_plo', 'R')
('p', 'A', 'MIP', 'R') => ('p', 'R', 'MIP', 'R')
('p', 'A', 'MIP', 'R') => ('p', 'AA', 'MIP', 'R')
('p', 'A', 'co.MIP', 'R') => ('p', 'R', 'co.MIP', 'R')
('p', 'A', 'co.MIP', 'R') => ('p', 'AA', 'co.MIP', 'R')
('p', 'A', 'co.MIP', 'RE') => ('p', 'R', 'co.MIP', 'RE')
('p', 'A', 'co.MIP', 'RE') => ('p', 'AA', 'co.MIP', 'RE')
('p', 'A', 'MIP', 'co.RE') => ('p', 'R', 'MIP', 'co.RE')
('p', 'A', 'MIP', 'co.RE') => ('p', 'AA', 'MIP', 'co.RE')
('p', 'AA', 'MIP', 'co.RE') => ('p', 'T', 'MIP', 'co.RE')
('p', 'AA', 'MIP', 'co.RE') => ('p', 'EA', 'MIP', 'co.RE')
('p', 'AA', 'co.MIP', 'RE') => ('p', 'T', 'co.MIP', 'RE')
('p', 'AA', 'co.MIP', 'RE') => ('p', 'EA', 'co.MIP', 'RE')
('p', 'A', 'co.MIP', 'co.RE') => ('p', 'R', 'co.MIP', 'co.RE')
('p', 'A', 'co.MIP', 'co.RE') => ('p', 'AA', 'co.MIP', 'co.RE')
('p', 'A', 'MIP', 'RE') => ('p', 'R', 'MIP', 'RE')
('p', 'A', 'MIP', 'RE') => ('p', 'AA', 'MIP', 'RE')
('p', 'AA', 'MIP', 'RE') => ('p', 'T', 'MIP', 'RE')
('p', 'AA', 'MIP', 'RE') => ('p', 'EA', 'MIP', 'RE')
('p', 'AA', 'MIP', 'R') => ('p', 'T', 'MIP', 'R')
('p', 'AA', 'MIP', 'R') => ('p', 'EA', 'MIP', 'R')
('p', 'AA', 'co.MIP', 'R') => ('p', 'T', 'co.MIP', 'R')
('p', 'AA', 'co.MIP', 'R') => ('p', 'EA', 'co.MIP', 'R')
('p', 'AA', 'co.MIP', 'co.RE') => ('p', 'T', 'co.MIP', 'co.RE')
('p', 'AA', 'co.MIP', 'co.RE') => ('p', 'EA', 'co.MIP', 'co.RE')
('p', 'A', 'NEXP_plo', 'RE') => ('p', 'R', 'NEXP_plo', 'RE')
('p', 'A', 'NEXP_plo', 'RE') => ('p', 'AA', 'NEXP_plo', 'RE')
('p', 'A', 'co.NEXP_plo', 'co.RE') => ('p', 'R', 'co.NEXP_plo', 'co.RE')
('p', 'A', 'co.NEXP_plo', 'co.RE') => ('p', 'AA', 'co.NEXP_plo', 'co.RE')
('p', 'AA', 'co.NEXP_plo', 'co.RE') => ('p', 'T', 'co.NEXP_plo', 'co.RE')
('p', 'AA', 'co.NEXP_plo', 'co.RE') => ('p', 'EA', 'co.NEXP_plo', 'co.RE')
('p', 'AA', 'NEXP_plo', 'RE') => ('p', 'T', 'NEXP_plo', 'RE')
('p', 'AA', 'NEXP_plo', 'RE') => ('p', 'EA', 'NEXP_plo', 'RE')
('p', 'A', 'NEXP_plo', 'co.RE') => ('p', 'R', 'NEXP_plo', 'co.RE')
('p', 'A', 'NEXP_plo', 'co.RE') => ('p', 'AA', 'NEXP_plo', 'co.RE')
('p', 'A', 'co.NEXP_plo', 'RE') => ('p', 'R', 'co.NEXP_plo', 'RE')
('p', 'A', 'co.NEXP_plo', 'RE') => ('p', 'AA', 'co.NEXP_plo', 'RE')
('p', 'AA', 'co.NEXP_plo', 'RE') => ('p', 'T', 'co.NEXP_plo', 'RE')
('p', 'AA', 'co.NEXP_plo', 'RE') => ('p', 'EA', 'co.NEXP_plo', 'RE')
('p', 'AA', 'co.NEXP_plo', 'R') => ('p', 'T', 'co.NEXP_plo', 'R')
('p', 'AA', 'co.NEXP_plo', 'R') => ('p', 'EA', 'co.NEXP_plo', 'R')
('p', 'AA', 'NEXP_plo', 'R') => ('p', 'T', 'NEXP_plo', 'R')
('p', 'AA', 'NEXP_plo', 'R') => ('p', 'EA', 'NEXP_plo', 'R')
('p', 'AA', 'NEXP_plo', 'co.RE') => ('p', 'T', 'NEXP_plo', 'co.RE')
('p', 'AA', 'NEXP_plo', 'co.RE') => ('p', 'EA', 'NEXP_plo', 'co.RE')
('p', 'E', 'co.MIP', 'co.NEXP') => ('-d', 'E', 'co.MIP', 'co.NEXP')
('p', 'E', 'MIP', 'NEXP') => ('-d', 'E', 'MIP', 'NEXP')
('p', 'A', 'co.MIP', 'co.NEXP') => ('-d', 'A', 'co.MIP', 'co.NEXP')
('p', 'A', 'co.MIP', 'co.NEXP') => ('p', 'R', 'co.MIP', 'co.NEXP')
('p', 'A', 'co.MIP', 'co.NEXP') => ('p', 'AA', 'co.MIP', 'co.NEXP')
('p', 'A', 'MIP', 'NEXP') => ('-d', 'A', 'MIP', 'NEXP')
('p', 'A', 'MIP', 'NEXP') => ('p', 'R', 'MIP', 'NEXP')
('p', 'A', 'MIP', 'NEXP') => ('p', 'AA', 'MIP', 'NEXP')
('-d', 'A', 'MIP', 'NEXP/poly') => ('-d', 'R', 'MIP', 'NEXP/poly')
('-d', 'A', 'MIP', 'NEXP/poly') => ('-d', 'AA', 'MIP', 'NEXP/poly')
('-d', 'A', 'co.MIP', 'NEXP/poly') => ('-d', 'R', 'co.MIP', 'NEXP/poly')
('-d', 'A', 'co.MIP', 'NEXP/poly') => ('-d', 'AA', 'co.MIP', 'NEXP/poly')
('-d', 'AA', 'co.MIP', 'NEXP/poly') => ('-d', 'T', 'co.MIP', 'NEXP/poly')
('-d', 'AA', 'co.MIP', 'NEXP/poly') => ('-d', 'EA', 'co.MIP', 'NEXP/poly')
('-d', 'AA', 'MIP', 'NEXP/poly') => ('-d', 'T', 'MIP', 'NEXP/poly')
('-d', 'AA', 'MIP', 'NEXP/poly') => ('-d', 'EA', 'MIP', 'NEXP/poly')
('p', 'A', 'MIP', 'NEXP/poly') => ('p', 'R', 'MIP', 'NEXP/poly')
('p', 'A', 'MIP', 'NEXP/poly') => ('p', 'AA', 'MIP', 'NEXP/poly')
('p', 'A', 'co.MIP', 'NEXP/poly') => ('p', 'R', 'co.MIP', 'NEXP/poly')
('p', 'A', 'co.MIP', 'NEXP/poly') => ('p', 'AA', 'co.MIP', 'NEXP/poly')
('p', 'AA', 'co.MIP', 'NEXP/poly') => ('p', 'T', 'co.MIP', 'NEXP/poly')
('p', 'AA', 'co.MIP', 'NEXP/poly') => ('p', 'EA', 'co.MIP', 'NEXP/poly')
('p', 'AA', 'MIP', 'NEXP/poly') => ('p', 'T', 'MIP', 'NEXP/poly')
('p', 'AA', 'MIP', 'NEXP/poly') => ('p', 'EA', 'MIP', 'NEXP/poly')
('p', 'AA', 'MIP', 'NEXP') => ('-d', 'AA', 'MIP', 'NEXP')
('p', 'AA', 'MIP', 'NEXP') => ('p', 'T', 'MIP', 'NEXP')
('p', 'AA', 'MIP', 'NEXP') => ('p', 'EA', 'MIP', 'NEXP')
('p', 'AA', 'co.MIP', 'co.NEXP') => ('-d', 'AA', 'co.MIP', 'co.NEXP')
('p', 'AA', 'co.MIP', 'co.NEXP') => ('p', 'T', 'co.MIP', 'co.NEXP')
('p', 'AA', 'co.MIP', 'co.NEXP') => ('p', 'EA', 'co.MIP', 'co.NEXP')
('p', 'EA', 'co.MIP', 'co.NEXP') => ('-d', 'EA', 'co.MIP', 'co.NEXP')
('p', 'EA', 'MIP', 'NEXP') => ('-d', 'EA', 'MIP', 'NEXP')
('p', 'T', 'co.MIP', 'co.NEXP') => ('-d', 'T', 'co.MIP', 'co.NEXP')
('p', 'T', 'MIP', 'NEXP') => ('-d', 'T', 'MIP', 'NEXP')
('p', 'R', 'MIP', 'NEXP') => ('-d', 'R', 'MIP', 'NEXP')
('p', 'R', 'co.MIP', 'co.NEXP') => ('-d', 'R', 'co.MIP', 'co.NEXP')
('-d', 'A', 'co.NEXP_plo', 'NEXP/poly') => ('-d', 'R', 'co.NEXP_plo', 'NEXP/poly')
('-d', 'A', 'co.NEXP_plo', 'NEXP/poly') => ('-d', 'AA', 'co.NEXP_plo', 'NEXP/poly')
('-d', 'A', 'NEXP_plo', 'NEXP/poly') => ('-d', 'R', 'NEXP_plo', 'NEXP/poly')
('-d', 'A', 'NEXP_plo', 'NEXP/poly') => ('-d', 'AA', 'NEXP_plo', 'NEXP/poly')
('-d', 'AA', 'NEXP_plo', 'NEXP/poly') => ('-d', 'T', 'NEXP_plo', 'NEXP/poly')
('-d', 'AA', 'NEXP_plo', 'NEXP/poly') => ('-d', 'EA', 'NEXP_plo', 'NEXP/poly')
('-d', 'AA', 'co.NEXP_plo', 'NEXP/poly') => ('-d', 'T', 'co.NEXP_plo', 'NEXP/poly')
('-d', 'AA', 'co.NEXP_plo', 'NEXP/poly') => ('-d', 'EA', 'co.NEXP_plo', 'NEXP/poly')
('p', 'A', 'co.NEXP_plo', 'NEXP/poly') => ('p', 'R', 'co.NEXP_plo', 'NEXP/poly')
('p', 'A', 'co.NEXP_plo', 'NEXP/poly') => ('p', 'AA', 'co.NEXP_plo', 'NEXP/poly')
('p', 'A', 'NEXP_plo', 'NEXP/poly') => ('p', 'R', 'NEXP_plo', 'NEXP/poly')
('p', 'A', 'NEXP_plo', 'NEXP/poly') => ('p', 'AA', 'NEXP_plo', 'NEXP/poly')
('p', 'AA', 'NEXP_plo', 'NEXP/poly') => ('p', 'T', 'NEXP_plo', 'NEXP/poly')
('p', 'AA', 'NEXP_plo', 'NEXP/poly') => ('p', 'EA', 'NEXP_plo', 'NEXP/poly')
('p', 'AA', 'co.NEXP_plo', 'NEXP/poly') => ('p', 'T', 'co.NEXP_plo', 'NEXP/poly')
('p', 'AA', 'co.NEXP_plo', 'NEXP/poly') => ('p', 'EA', 'co.NEXP_plo', 'NEXP/poly')
('p', 'AA', 'co.NEXP_plo', 'co.NEXP') => ('-d', 'AA', 'co.NEXP_plo', 'co.NEXP')
('p', 'AA', 'co.NEXP_plo', 'co.NEXP') => ('p', 'T', 'co.NEXP_plo', 'co.NEXP')
('p', 'AA', 'co.NEXP_plo', 'co.NEXP') => ('p', 'EA', 'co.NEXP_plo', 'co.NEXP')
('p', 'AA', 'NEXP_plo', 'NEXP') => ('-d', 'AA', 'NEXP_plo', 'NEXP')
('p', 'AA', 'NEXP_plo', 'NEXP') => ('p', 'T', 'NEXP_plo', 'NEXP')
('p', 'AA', 'NEXP_plo', 'NEXP') => ('p', 'EA', 'NEXP_plo', 'NEXP')
('p', 'EA', 'NEXP_plo', 'NEXP') => ('-d', 'EA', 'NEXP_plo', 'NEXP')
('p', 'EA', 'NEXP_plo', 'NEXP') => ('p', 'E', 'NEXP_plo', 'NEXP')
('p', 'EA', 'co.NEXP_plo', 'co.NEXP') => ('-d', 'EA', 'co.NEXP_plo', 'co.NEXP')
('p', 'EA', 'co.NEXP_plo', 'co.NEXP') => ('p', 'E', 'co.NEXP_plo', 'co.NEXP')
('p', 'E', 'co.NEXP_plo', 'co.NEXP') => ('-d', 'E', 'co.NEXP_plo', 'co.NEXP')
('p', 'E', 'NEXP_plo', 'NEXP') => ('-d', 'E', 'NEXP_plo', 'NEXP')
('p', 'T', 'NEXP_plo', 'NEXP') => ('-d', 'T', 'NEXP_plo', 'NEXP')
('p', 'T', 'co.NEXP_plo', 'co.NEXP') => ('-d', 'T', 'co.NEXP_plo', 'co.NEXP')
('p', 'R', 'co.NEXP_plo', 'co.NEXP') => ('-d', 'R', 'co.NEXP_plo', 'co.NEXP')
('p', 'R', 'NEXP_plo', 'NEXP') => ('-d', 'R', 'NEXP_plo', 'NEXP')
('p', 'A', 'QCMA', 'QMA') => ('-d', 'A', 'QCMA', 'QMA')
('p', 'A', 'QCMA', 'QMA') => ('p', 'R', 'QCMA', 'QMA')
('p', 'A', 'QCMA', 'QMA') => ('p', 'AA', 'QCMA', 'QMA')
('p', 'A', 'co.QCMA', 'co.QMA') => ('-d', 'A', 'co.QCMA', 'co.QMA')
('p', 'A', 'co.QCMA', 'co.QMA') => ('p', 'R', 'co.QCMA', 'co.QMA')
('p', 'A', 'co.QCMA', 'co.QMA') => ('p', 'AA', 'co.QCMA', 'co.QMA')
('p', 'A', 'cocap.QCMA', 'cocap.QMA') => ('-d', 'A', 'cocap.QCMA', 'cocap.QMA')
('p', 'A', 'cocap.QCMA', 'cocap.QMA') => ('p', 'R', 'cocap.QCMA', 'cocap.QMA')
('p', 'A', 'cocap.QCMA', 'cocap.QMA') => ('p', 'AA', 'cocap.QCMA', 'cocap.QMA')
('d', 'A', 'cocap.QMA', 'P') => ('-p', 'A', 'cocap.QMA', 'P')
('d', 'A', 'co.QMA', 'P') => ('-p', 'A', 'co.QMA', 'P')
('d', 'A', 'QMA', 'P') => ('-p', 'A', 'QMA', 'P')
('d', 'A', 'cocap.QMA', 'SZK') => ('-p', 'A', 'cocap.QMA', 'SZK')
('d', 'A', 'co.QMA', 'SZK') => ('-p', 'A', 'co.QMA', 'SZK')
('d', 'A', 'QMA', 'SZK') => ('-p', 'A', 'QMA', 'SZK')
('p', 'E', 'BQP', 'cocap.QMA') => ('-d', 'E', 'BQP', 'cocap.QMA')
('p', 'A', 'BQP', 'cocap.QMA') => ('-d', 'A', 'BQP', 'cocap.QMA')
('p', 'A', 'BQP', 'cocap.QMA') => ('p', 'R', 'BQP', 'cocap.QMA')
('p', 'A', 'BQP', 'cocap.QMA') => ('p', 'AA', 'BQP', 'cocap.QMA')
('-d', 'A', 'BQP', 'QMA') => ('-d', 'R', 'BQP', 'QMA')
('-d', 'A', 'BQP', 'QMA') => ('-d', 'AA', 'BQP', 'QMA')
('-d', 'A', 'BQP', 'co.QMA') => ('-d', 'R', 'BQP', 'co.QMA')
('-d', 'A', 'BQP', 'co.QMA') => ('-d', 'AA', 'BQP', 'co.QMA')
('-d', 'A', 'BQP', 'cocap.QMA') => ('-d', 'R', 'BQP', 'cocap.QMA')
('-d', 'A', 'BQP', 'cocap.QMA') => ('-d', 'AA', 'BQP', 'cocap.QMA')
('-d', 'AA', 'BQP', 'cocap.QMA') => ('-d', 'T', 'BQP', 'cocap.QMA')
('-d', 'AA', 'BQP', 'cocap.QMA') => ('-d', 'EA', 'BQP', 'cocap.QMA')
('-d', 'AA', 'BQP', 'QMA') => ('-d', 'T', 'BQP', 'QMA')
('-d', 'AA', 'BQP', 'QMA') => ('-d', 'EA', 'BQP', 'QMA')
('-d', 'AA', 'BQP', 'co.QMA') => ('-d', 'T', 'BQP', 'co.QMA')
('-d', 'AA', 'BQP', 'co.QMA') => ('-d', 'EA', 'BQP', 'co.QMA')
('p', 'A', 'BQP', 'QMA') => ('p', 'R', 'BQP', 'QMA')
('p', 'A', 'BQP', 'QMA') => ('p', 'AA', 'BQP', 'QMA')
('p', 'A', 'BQP', 'co.QMA') => ('p', 'R', 'BQP', 'co.QMA')
('p', 'A', 'BQP', 'co.QMA') => ('p', 'AA', 'BQP', 'co.QMA')
('p', 'AA', 'BQP', 'co.QMA') => ('p', 'T', 'BQP', 'co.QMA')
('p', 'AA', 'BQP', 'co.QMA') => ('p', 'EA', 'BQP', 'co.QMA')
('p', 'AA', 'BQP', 'QMA') => ('p', 'T', 'BQP', 'QMA')
('p', 'AA', 'BQP', 'QMA') => ('p', 'EA', 'BQP', 'QMA')
('p', 'AA', 'BQP', 'cocap.QMA') => ('p', 'T', 'BQP', 'cocap.QMA')
('p', 'AA', 'BQP', 'cocap.QMA') => ('p', 'EA', 'BQP', 'cocap.QMA')
('-d', 'A', 'cocap.QCMA', 'QMA') => ('-d', 'R', 'cocap.QCMA', 'QMA')
('-d', 'A', 'cocap.QCMA', 'QMA') => ('-d', 'AA', 'cocap.QCMA', 'QMA')
('-d', 'A', 'cocap.QCMA', 'co.QMA') => ('-d', 'R', 'cocap.QCMA', 'co.QMA')
('-d', 'A', 'cocap.QCMA', 'co.QMA') => ('-d', 'AA', 'cocap.QCMA', 'co.QMA')
('-d', 'A', 'cocap.QCMA', 'cocap.QMA') => ('-d', 'R', 'cocap.QCMA', 'cocap.QMA')
('-d', 'A', 'cocap.QCMA', 'cocap.QMA') => ('-d', 'AA', 'cocap.QCMA', 'cocap.QMA')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMA') => ('-d', 'T', 'cocap.QCMA', 'cocap.QMA')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMA') => ('-d', 'EA', 'cocap.QCMA', 'cocap.QMA')
('-d', 'AA', 'cocap.QCMA', 'QMA') => ('-d', 'T', 'cocap.QCMA', 'QMA')
('-d', 'AA', 'cocap.QCMA', 'QMA') => ('-d', 'EA', 'cocap.QCMA', 'QMA')
('-d', 'AA', 'cocap.QCMA', 'co.QMA') => ('-d', 'T', 'cocap.QCMA', 'co.QMA')
('-d', 'AA', 'cocap.QCMA', 'co.QMA') => ('-d', 'EA', 'cocap.QCMA', 'co.QMA')
('p', 'A', 'cocap.QCMA', 'QMA') => ('p', 'R', 'cocap.QCMA', 'QMA')
('p', 'A', 'cocap.QCMA', 'QMA') => ('p', 'AA', 'cocap.QCMA', 'QMA')
('p', 'A', 'cocap.QCMA', 'co.QMA') => ('p', 'R', 'cocap.QCMA', 'co.QMA')
('p', 'A', 'cocap.QCMA', 'co.QMA') => ('p', 'AA', 'cocap.QCMA', 'co.QMA')
('p', 'AA', 'cocap.QCMA', 'co.QMA') => ('p', 'T', 'cocap.QCMA', 'co.QMA')
('p', 'AA', 'cocap.QCMA', 'co.QMA') => ('p', 'EA', 'cocap.QCMA', 'co.QMA')
('p', 'AA', 'cocap.QCMA', 'QMA') => ('p', 'T', 'cocap.QCMA', 'QMA')
('p', 'AA', 'cocap.QCMA', 'QMA') => ('p', 'EA', 'cocap.QCMA', 'QMA')
('p', 'AA', 'cocap.QCMA', 'cocap.QMA') => ('p', 'T', 'cocap.QCMA', 'cocap.QMA')
('p', 'AA', 'cocap.QCMA', 'cocap.QMA') => ('p', 'EA', 'cocap.QCMA', 'cocap.QMA')
('p', 'AA', 'co.QCMA', 'co.QMA') => ('-d', 'AA', 'co.QCMA', 'co.QMA')
('p', 'AA', 'co.QCMA', 'co.QMA') => ('p', 'T', 'co.QCMA', 'co.QMA')
('p', 'AA', 'co.QCMA', 'co.QMA') => ('p', 'EA', 'co.QCMA', 'co.QMA')
('p', 'AA', 'QCMA', 'QMA') => ('-d', 'AA', 'QCMA', 'QMA')
('p', 'AA', 'QCMA', 'QMA') => ('p', 'T', 'QCMA', 'QMA')
('p', 'AA', 'QCMA', 'QMA') => ('p', 'EA', 'QCMA', 'QMA')
('p', 'EA', 'QCMA', 'QMA') => ('-d', 'EA', 'QCMA', 'QMA')
('p', 'EA', 'QCMA', 'QMA') => ('p', 'E', 'QCMA', 'QMA')
('p', 'EA', 'co.QCMA', 'co.QMA') => ('-d', 'EA', 'co.QCMA', 'co.QMA')
('p', 'EA', 'co.QCMA', 'co.QMA') => ('p', 'E', 'co.QCMA', 'co.QMA')
('p', 'E', 'co.QCMA', 'co.QMA') => ('-d', 'E', 'co.QCMA', 'co.QMA')
('p', 'E', 'QCMA', 'QMA') => ('-d', 'E', 'QCMA', 'QMA')
('p', 'T', 'QCMA', 'QMA') => ('-d', 'T', 'QCMA', 'QMA')
('p', 'T', 'co.QCMA', 'co.QMA') => ('-d', 'T', 'co.QCMA', 'co.QMA')
('p', 'R', 'co.QCMA', 'co.QMA') => ('-d', 'R', 'co.QCMA', 'co.QMA')
('p', 'R', 'QCMA', 'QMA') => ('-d', 'R', 'QCMA', 'QMA')
('p', 'A', 'MA', 'QCMA') => ('-d', 'A', 'MA', 'QCMA')
('p', 'A', 'MA', 'QCMA') => ('p', 'R', 'MA', 'QCMA')
('p', 'A', 'MA', 'QCMA') => ('p', 'AA', 'MA', 'QCMA')
('p', 'A', 'co.MA', 'co.QCMA') => ('-d', 'A', 'co.MA', 'co.QCMA')
('p', 'A', 'co.MA', 'co.QCMA') => ('p', 'R', 'co.MA', 'co.QCMA')
('p', 'A', 'co.MA', 'co.QCMA') => ('p', 'AA', 'co.MA', 'co.QCMA')
('p', 'A', 'cocap.MA', 'cocap.QCMA') => ('-d', 'A', 'cocap.MA', 'cocap.QCMA')
('p', 'A', 'cocap.MA', 'cocap.QCMA') => ('p', 'R', 'cocap.MA', 'cocap.QCMA')
('p', 'A', 'cocap.MA', 'cocap.QCMA') => ('p', 'AA', 'cocap.MA', 'cocap.QCMA')
('-d', 'A', 'cocap.MA', 'QMA') => ('-d', 'R', 'cocap.MA', 'QMA')
('-d', 'A', 'cocap.MA', 'QMA') => ('-d', 'AA', 'cocap.MA', 'QMA')
('-d', 'A', 'cocap.MA', 'co.QMA') => ('-d', 'R', 'cocap.MA', 'co.QMA')
('-d', 'A', 'cocap.MA', 'co.QMA') => ('-d', 'AA', 'cocap.MA', 'co.QMA')
('-d', 'A', 'cocap.MA', 'cocap.QMA') => ('-d', 'R', 'cocap.MA', 'cocap.QMA')
('-d', 'A', 'cocap.MA', 'cocap.QMA') => ('-d', 'AA', 'cocap.MA', 'cocap.QMA')
('-d', 'A', 'cocap.NP', 'cocap.QMA') => ('-d', 'R', 'cocap.NP', 'cocap.QMA')
('-d', 'A', 'cocap.NP', 'cocap.QMA') => ('-d', 'AA', 'cocap.NP', 'cocap.QMA')
('-d', 'A', 'cocap.NP', 'QMA') => ('-d', 'R', 'cocap.NP', 'QMA')
('-d', 'A', 'cocap.NP', 'QMA') => ('-d', 'AA', 'cocap.NP', 'QMA')
('-d', 'A', 'cocap.NP', 'co.QMA') => ('-d', 'R', 'cocap.NP', 'co.QMA')
('-d', 'A', 'cocap.NP', 'co.QMA') => ('-d', 'AA', 'cocap.NP', 'co.QMA')
('-d', 'A', 'ZPP', 'co.QMA') => ('-d', 'R', 'ZPP', 'co.QMA')
('-d', 'A', 'ZPP', 'co.QMA') => ('-d', 'AA', 'ZPP', 'co.QMA')
('-d', 'A', 'ZPP', 'QMA') => ('-d', 'R', 'ZPP', 'QMA')
('-d', 'A', 'ZPP', 'QMA') => ('-d', 'AA', 'ZPP', 'QMA')
('-d', 'A', 'ZPP', 'cocap.QMA') => ('-d', 'R', 'ZPP', 'cocap.QMA')
('-d', 'A', 'ZPP', 'cocap.QMA') => ('-d', 'AA', 'ZPP', 'cocap.QMA')
('-d', 'AA', 'ZPP', 'cocap.QMA') => ('-d', 'T', 'ZPP', 'cocap.QMA')
('-d', 'AA', 'ZPP', 'cocap.QMA') => ('-d', 'EA', 'ZPP', 'cocap.QMA')
('-d', 'AA', 'ZPP', 'QMA') => ('-d', 'T', 'ZPP', 'QMA')
('-d', 'AA', 'ZPP', 'QMA') => ('-d', 'EA', 'ZPP', 'QMA')
('-d', 'AA', 'ZPP', 'co.QMA') => ('-d', 'T', 'ZPP', 'co.QMA')
('-d', 'AA', 'ZPP', 'co.QMA') => ('-d', 'EA', 'ZPP', 'co.QMA')
('-d', 'AA', 'cocap.NP', 'co.QMA') => ('-d', 'T', 'cocap.NP', 'co.QMA')
('-d', 'AA', 'cocap.NP', 'co.QMA') => ('-d', 'EA', 'cocap.NP', 'co.QMA')
('-d', 'AA', 'cocap.NP', 'QMA') => ('-d', 'T', 'cocap.NP', 'QMA')
('-d', 'AA', 'cocap.NP', 'QMA') => ('-d', 'EA', 'cocap.NP', 'QMA')
('-d', 'AA', 'cocap.NP', 'cocap.QMA') => ('-d', 'T', 'cocap.NP', 'cocap.QMA')
('-d', 'AA', 'cocap.NP', 'cocap.QMA') => ('-d', 'EA', 'cocap.NP', 'cocap.QMA')
('-d', 'AA', 'cocap.MA', 'cocap.QMA') => ('-d', 'T', 'cocap.MA', 'cocap.QMA')
('-d', 'AA', 'cocap.MA', 'cocap.QMA') => ('-d', 'EA', 'cocap.MA', 'cocap.QMA')
('-d', 'AA', 'cocap.MA', 'QMA') => ('-d', 'T', 'cocap.MA', 'QMA')
('-d', 'AA', 'cocap.MA', 'QMA') => ('-d', 'EA', 'cocap.MA', 'QMA')
('-d', 'AA', 'cocap.MA', 'co.QMA') => ('-d', 'T', 'cocap.MA', 'co.QMA')
('-d', 'AA', 'cocap.MA', 'co.QMA') => ('-d', 'EA', 'cocap.MA', 'co.QMA')
('p', 'A', 'cocap.MA', 'QMA') => ('p', 'R', 'cocap.MA', 'QMA')
('p', 'A', 'cocap.MA', 'QMA') => ('p', 'AA', 'cocap.MA', 'QMA')
('p', 'A', 'cocap.MA', 'co.QMA') => ('p', 'R', 'cocap.MA', 'co.QMA')
('p', 'A', 'cocap.MA', 'co.QMA') => ('p', 'AA', 'cocap.MA', 'co.QMA')
('p', 'A', 'cocap.MA', 'cocap.QMA') => ('p', 'R', 'cocap.MA', 'cocap.QMA')
('p', 'A', 'cocap.MA', 'cocap.QMA') => ('p', 'AA', 'cocap.MA', 'cocap.QMA')
('p', 'A', 'cocap.NP', 'cocap.QMA') => ('p', 'R', 'cocap.NP', 'cocap.QMA')
('p', 'A', 'cocap.NP', 'cocap.QMA') => ('p', 'AA', 'cocap.NP', 'cocap.QMA')
('p', 'A', 'cocap.NP', 'QMA') => ('p', 'R', 'cocap.NP', 'QMA')
('p', 'A', 'cocap.NP', 'QMA') => ('p', 'AA', 'cocap.NP', 'QMA')
('p', 'A', 'cocap.NP', 'co.QMA') => ('p', 'R', 'cocap.NP', 'co.QMA')
('p', 'A', 'cocap.NP', 'co.QMA') => ('p', 'AA', 'cocap.NP', 'co.QMA')
('p', 'A', 'ZPP', 'co.QMA') => ('p', 'R', 'ZPP', 'co.QMA')
('p', 'A', 'ZPP', 'co.QMA') => ('p', 'AA', 'ZPP', 'co.QMA')
('p', 'A', 'ZPP', 'QMA') => ('p', 'R', 'ZPP', 'QMA')
('p', 'A', 'ZPP', 'QMA') => ('p', 'AA', 'ZPP', 'QMA')
('p', 'A', 'ZPP', 'cocap.QMA') => ('p', 'R', 'ZPP', 'cocap.QMA')
('p', 'A', 'ZPP', 'cocap.QMA') => ('p', 'AA', 'ZPP', 'cocap.QMA')
('p', 'AA', 'ZPP', 'cocap.QMA') => ('p', 'T', 'ZPP', 'cocap.QMA')
('p', 'AA', 'ZPP', 'cocap.QMA') => ('p', 'EA', 'ZPP', 'cocap.QMA')
('p', 'AA', 'ZPP', 'QMA') => ('p', 'T', 'ZPP', 'QMA')
('p', 'AA', 'ZPP', 'QMA') => ('p', 'EA', 'ZPP', 'QMA')
('p', 'AA', 'ZPP', 'co.QMA') => ('p', 'T', 'ZPP', 'co.QMA')
('p', 'AA', 'ZPP', 'co.QMA') => ('p', 'EA', 'ZPP', 'co.QMA')
('p', 'AA', 'cocap.NP', 'co.QMA') => ('p', 'T', 'cocap.NP', 'co.QMA')
('p', 'AA', 'cocap.NP', 'co.QMA') => ('p', 'EA', 'cocap.NP', 'co.QMA')
('p', 'AA', 'cocap.NP', 'QMA') => ('p', 'T', 'cocap.NP', 'QMA')
('p', 'AA', 'cocap.NP', 'QMA') => ('p', 'EA', 'cocap.NP', 'QMA')
('p', 'AA', 'cocap.NP', 'cocap.QMA') => ('p', 'T', 'cocap.NP', 'cocap.QMA')
('p', 'AA', 'cocap.NP', 'cocap.QMA') => ('p', 'EA', 'cocap.NP', 'cocap.QMA')
('p', 'AA', 'cocap.MA', 'cocap.QMA') => ('p', 'T', 'cocap.MA', 'cocap.QMA')
('p', 'AA', 'cocap.MA', 'cocap.QMA') => ('p', 'EA', 'cocap.MA', 'cocap.QMA')
('p', 'AA', 'cocap.MA', 'QMA') => ('p', 'T', 'cocap.MA', 'QMA')
('p', 'AA', 'cocap.MA', 'QMA') => ('p', 'EA', 'cocap.MA', 'QMA')
('p', 'AA', 'cocap.MA', 'co.QMA') => ('p', 'T', 'cocap.MA', 'co.QMA')
('p', 'AA', 'cocap.MA', 'co.QMA') => ('p', 'EA', 'cocap.MA', 'co.QMA')
('-d', 'A', 'cocap.MA', 'QCMA') => ('-d', 'R', 'cocap.MA', 'QCMA')
('-d', 'A', 'cocap.MA', 'QCMA') => ('-d', 'AA', 'cocap.MA', 'QCMA')
('-d', 'A', 'cocap.MA', 'co.QCMA') => ('-d', 'R', 'cocap.MA', 'co.QCMA')
('-d', 'A', 'cocap.MA', 'co.QCMA') => ('-d', 'AA', 'cocap.MA', 'co.QCMA')
('-d', 'A', 'cocap.MA', 'cocap.QCMA') => ('-d', 'R', 'cocap.MA', 'cocap.QCMA')
('-d', 'A', 'cocap.MA', 'cocap.QCMA') => ('-d', 'AA', 'cocap.MA', 'cocap.QCMA')
('-d', 'A', 'cocap.NP', 'cocap.QCMA') => ('-d', 'R', 'cocap.NP', 'cocap.QCMA')
('-d', 'A', 'cocap.NP', 'cocap.QCMA') => ('-d', 'AA', 'cocap.NP', 'cocap.QCMA')
('-d', 'A', 'cocap.NP', 'QCMA') => ('-d', 'R', 'cocap.NP', 'QCMA')
('-d', 'A', 'cocap.NP', 'QCMA') => ('-d', 'AA', 'cocap.NP', 'QCMA')
('-d', 'A', 'cocap.NP', 'co.QCMA') => ('-d', 'R', 'cocap.NP', 'co.QCMA')
('-d', 'A', 'cocap.NP', 'co.QCMA') => ('-d', 'AA', 'cocap.NP', 'co.QCMA')
('-d', 'A', 'ZPP', 'co.QCMA') => ('-d', 'R', 'ZPP', 'co.QCMA')
('-d', 'A', 'ZPP', 'co.QCMA') => ('-d', 'AA', 'ZPP', 'co.QCMA')
('-d', 'A', 'ZPP', 'QCMA') => ('-d', 'R', 'ZPP', 'QCMA')
('-d', 'A', 'ZPP', 'QCMA') => ('-d', 'AA', 'ZPP', 'QCMA')
('-d', 'A', 'ZPP', 'cocap.QCMA') => ('-d', 'R', 'ZPP', 'cocap.QCMA')
('-d', 'A', 'ZPP', 'cocap.QCMA') => ('-d', 'AA', 'ZPP', 'cocap.QCMA')
('-d', 'AA', 'ZPP', 'cocap.QCMA') => ('-d', 'T', 'ZPP', 'cocap.QCMA')
('-d', 'AA', 'ZPP', 'cocap.QCMA') => ('-d', 'EA', 'ZPP', 'cocap.QCMA')
('-d', 'AA', 'ZPP', 'QCMA') => ('-d', 'T', 'ZPP', 'QCMA')
('-d', 'AA', 'ZPP', 'QCMA') => ('-d', 'EA', 'ZPP', 'QCMA')
('-d', 'AA', 'ZPP', 'co.QCMA') => ('-d', 'T', 'ZPP', 'co.QCMA')
('-d', 'AA', 'ZPP', 'co.QCMA') => ('-d', 'EA', 'ZPP', 'co.QCMA')
('-d', 'AA', 'cocap.NP', 'co.QCMA') => ('-d', 'T', 'cocap.NP', 'co.QCMA')
('-d', 'AA', 'cocap.NP', 'co.QCMA') => ('-d', 'EA', 'cocap.NP', 'co.QCMA')
('-d', 'AA', 'cocap.NP', 'QCMA') => ('-d', 'T', 'cocap.NP', 'QCMA')
('-d', 'AA', 'cocap.NP', 'QCMA') => ('-d', 'EA', 'cocap.NP', 'QCMA')
('-d', 'AA', 'cocap.NP', 'cocap.QCMA') => ('-d', 'T', 'cocap.NP', 'cocap.QCMA')
('-d', 'AA', 'cocap.NP', 'cocap.QCMA') => ('-d', 'EA', 'cocap.NP', 'cocap.QCMA')
('-d', 'AA', 'cocap.MA', 'cocap.QCMA') => ('-d', 'T', 'cocap.MA', 'cocap.QCMA')
('-d', 'AA', 'cocap.MA', 'cocap.QCMA') => ('-d', 'EA', 'cocap.MA', 'cocap.QCMA')
('-d', 'AA', 'cocap.MA', 'QCMA') => ('-d', 'T', 'cocap.MA', 'QCMA')
('-d', 'AA', 'cocap.MA', 'QCMA') => ('-d', 'EA', 'cocap.MA', 'QCMA')
('-d', 'AA', 'cocap.MA', 'co.QCMA') => ('-d', 'T', 'cocap.MA', 'co.QCMA')
('-d', 'AA', 'cocap.MA', 'co.QCMA') => ('-d', 'EA', 'cocap.MA', 'co.QCMA')
('p', 'A', 'cocap.MA', 'QCMA') => ('p', 'R', 'cocap.MA', 'QCMA')
('p', 'A', 'cocap.MA', 'QCMA') => ('p', 'AA', 'cocap.MA', 'QCMA')
('p', 'A', 'cocap.MA', 'co.QCMA') => ('p', 'R', 'cocap.MA', 'co.QCMA')
('p', 'A', 'cocap.MA', 'co.QCMA') => ('p', 'AA', 'cocap.MA', 'co.QCMA')
('p', 'A', 'cocap.NP', 'co.QCMA') => ('p', 'R', 'cocap.NP', 'co.QCMA')
('p', 'A', 'cocap.NP', 'co.QCMA') => ('p', 'AA', 'cocap.NP', 'co.QCMA')
('p', 'A', 'cocap.NP', 'QCMA') => ('p', 'R', 'cocap.NP', 'QCMA')
('p', 'A', 'cocap.NP', 'QCMA') => ('p', 'AA', 'cocap.NP', 'QCMA')
('p', 'A', 'cocap.NP', 'cocap.QCMA') => ('p', 'R', 'cocap.NP', 'cocap.QCMA')
('p', 'A', 'cocap.NP', 'cocap.QCMA') => ('p', 'AA', 'cocap.NP', 'cocap.QCMA')
('p', 'A', 'ZPP', 'cocap.QCMA') => ('p', 'R', 'ZPP', 'cocap.QCMA')
('p', 'A', 'ZPP', 'cocap.QCMA') => ('p', 'AA', 'ZPP', 'cocap.QCMA')
('p', 'A', 'ZPP', 'QCMA') => ('p', 'R', 'ZPP', 'QCMA')
('p', 'A', 'ZPP', 'QCMA') => ('p', 'AA', 'ZPP', 'QCMA')
('p', 'A', 'ZPP', 'co.QCMA') => ('p', 'R', 'ZPP', 'co.QCMA')
('p', 'A', 'ZPP', 'co.QCMA') => ('p', 'AA', 'ZPP', 'co.QCMA')
('p', 'AA', 'ZPP', 'co.QCMA') => ('p', 'T', 'ZPP', 'co.QCMA')
('p', 'AA', 'ZPP', 'co.QCMA') => ('p', 'EA', 'ZPP', 'co.QCMA')
('p', 'AA', 'ZPP', 'QCMA') => ('p', 'T', 'ZPP', 'QCMA')
('p', 'AA', 'ZPP', 'QCMA') => ('p', 'EA', 'ZPP', 'QCMA')
('p', 'AA', 'ZPP', 'cocap.QCMA') => ('p', 'T', 'ZPP', 'cocap.QCMA')
('p', 'AA', 'ZPP', 'cocap.QCMA') => ('p', 'EA', 'ZPP', 'cocap.QCMA')
('p', 'AA', 'cocap.NP', 'cocap.QCMA') => ('p', 'T', 'cocap.NP', 'cocap.QCMA')
('p', 'AA', 'cocap.NP', 'cocap.QCMA') => ('p', 'EA', 'cocap.NP', 'cocap.QCMA')
('p', 'AA', 'cocap.NP', 'QCMA') => ('p', 'T', 'cocap.NP', 'QCMA')
('p', 'AA', 'cocap.NP', 'QCMA') => ('p', 'EA', 'cocap.NP', 'QCMA')
('p', 'AA', 'cocap.NP', 'co.QCMA') => ('p', 'T', 'cocap.NP', 'co.QCMA')
('p', 'AA', 'cocap.NP', 'co.QCMA') => ('p', 'EA', 'cocap.NP', 'co.QCMA')
('p', 'AA', 'cocap.MA', 'co.QCMA') => ('p', 'T', 'cocap.MA', 'co.QCMA')
('p', 'AA', 'cocap.MA', 'co.QCMA') => ('p', 'EA', 'cocap.MA', 'co.QCMA')
('p', 'AA', 'cocap.MA', 'QCMA') => ('p', 'T', 'cocap.MA', 'QCMA')
('p', 'AA', 'cocap.MA', 'QCMA') => ('p', 'EA', 'cocap.MA', 'QCMA')
('p', 'AA', 'cocap.MA', 'cocap.QCMA') => ('p', 'T', 'cocap.MA', 'cocap.QCMA')
('p', 'AA', 'cocap.MA', 'cocap.QCMA') => ('p', 'EA', 'cocap.MA', 'cocap.QCMA')
('d', 'A', 'co.QCMA', 'BQP') => ('-p', 'A', 'co.QCMA', 'BQP')
('d', 'A', 'QCMA', 'BQP') => ('-p', 'A', 'QCMA', 'BQP')
('p', 'E', 'co.NP', 'co.QCMA') => ('-d', 'E', 'co.NP', 'co.QCMA')
('p', 'E', 'NP', 'QCMA') => ('-d', 'E', 'NP', 'QCMA')
('p', 'E', 'RP', 'QCMA') => ('-d', 'E', 'RP', 'QCMA')
('p', 'E', 'co.RP', 'co.QCMA') => ('-d', 'E', 'co.RP', 'co.QCMA')
('p', 'A', 'co.NP', 'co.QCMA') => ('-d', 'A', 'co.NP', 'co.QCMA')
('p', 'A', 'co.NP', 'co.QCMA') => ('p', 'R', 'co.NP', 'co.QCMA')
('p', 'A', 'co.NP', 'co.QCMA') => ('p', 'AA', 'co.NP', 'co.QCMA')
('p', 'A', 'NP', 'QCMA') => ('-d', 'A', 'NP', 'QCMA')
('p', 'A', 'NP', 'QCMA') => ('p', 'R', 'NP', 'QCMA')
('p', 'A', 'NP', 'QCMA') => ('p', 'AA', 'NP', 'QCMA')
('p', 'A', 'RP', 'QCMA') => ('-d', 'A', 'RP', 'QCMA')
('p', 'A', 'RP', 'QCMA') => ('p', 'R', 'RP', 'QCMA')
('p', 'A', 'RP', 'QCMA') => ('p', 'AA', 'RP', 'QCMA')
('p', 'A', 'co.RP', 'co.QCMA') => ('-d', 'A', 'co.RP', 'co.QCMA')
('p', 'A', 'co.RP', 'co.QCMA') => ('p', 'R', 'co.RP', 'co.QCMA')
('p', 'A', 'co.RP', 'co.QCMA') => ('p', 'AA', 'co.RP', 'co.QCMA')
('-d', 'A', 'co.RP', 'co.QMA') => ('-d', 'R', 'co.RP', 'co.QMA')
('-d', 'A', 'co.RP', 'co.QMA') => ('-d', 'AA', 'co.RP', 'co.QMA')
('-d', 'A', 'RP', 'QMA') => ('-d', 'R', 'RP', 'QMA')
('-d', 'A', 'RP', 'QMA') => ('-d', 'AA', 'RP', 'QMA')
('-d', 'AA', 'RP', 'QMA') => ('-d', 'T', 'RP', 'QMA')
('-d', 'AA', 'RP', 'QMA') => ('-d', 'EA', 'RP', 'QMA')
('-d', 'AA', 'co.RP', 'co.QMA') => ('-d', 'T', 'co.RP', 'co.QMA')
('-d', 'AA', 'co.RP', 'co.QMA') => ('-d', 'EA', 'co.RP', 'co.QMA')
('p', 'A', 'co.RP', 'co.QMA') => ('p', 'R', 'co.RP', 'co.QMA')
('p', 'A', 'co.RP', 'co.QMA') => ('p', 'AA', 'co.RP', 'co.QMA')
('p', 'A', 'RP', 'QMA') => ('p', 'R', 'RP', 'QMA')
('p', 'A', 'RP', 'QMA') => ('p', 'AA', 'RP', 'QMA')
('p', 'AA', 'RP', 'QMA') => ('p', 'T', 'RP', 'QMA')
('p', 'AA', 'RP', 'QMA') => ('p', 'EA', 'RP', 'QMA')
('p', 'AA', 'co.RP', 'co.QMA') => ('p', 'T', 'co.RP', 'co.QMA')
('p', 'AA', 'co.RP', 'co.QMA') => ('p', 'EA', 'co.RP', 'co.QMA')
('p', 'AA', 'co.RP', 'co.QCMA') => ('-d', 'AA', 'co.RP', 'co.QCMA')
('p', 'AA', 'co.RP', 'co.QCMA') => ('p', 'T', 'co.RP', 'co.QCMA')
('p', 'AA', 'co.RP', 'co.QCMA') => ('p', 'EA', 'co.RP', 'co.QCMA')
('p', 'AA', 'RP', 'QCMA') => ('-d', 'AA', 'RP', 'QCMA')
('p', 'AA', 'RP', 'QCMA') => ('p', 'T', 'RP', 'QCMA')
('p', 'AA', 'RP', 'QCMA') => ('p', 'EA', 'RP', 'QCMA')
('p', 'EA', 'RP', 'QCMA') => ('-d', 'EA', 'RP', 'QCMA')
('p', 'EA', 'co.RP', 'co.QCMA') => ('-d', 'EA', 'co.RP', 'co.QCMA')
('p', 'T', 'RP', 'QCMA') => ('-d', 'T', 'RP', 'QCMA')
('p', 'T', 'co.RP', 'co.QCMA') => ('-d', 'T', 'co.RP', 'co.QCMA')
('p', 'R', 'co.RP', 'co.QCMA') => ('-d', 'R', 'co.RP', 'co.QCMA')
('p', 'R', 'RP', 'QCMA') => ('-d', 'R', 'RP', 'QCMA')
('-d', 'A', 'NP', 'QMA') => ('-d', 'R', 'NP', 'QMA')
('-d', 'A', 'NP', 'QMA') => ('-d', 'AA', 'NP', 'QMA')
('-d', 'A', 'co.NP', 'co.QMA') => ('-d', 'R', 'co.NP', 'co.QMA')
('-d', 'A', 'co.NP', 'co.QMA') => ('-d', 'AA', 'co.NP', 'co.QMA')
('-d', 'AA', 'co.NP', 'co.QMA') => ('-d', 'T', 'co.NP', 'co.QMA')
('-d', 'AA', 'co.NP', 'co.QMA') => ('-d', 'EA', 'co.NP', 'co.QMA')
('-d', 'AA', 'NP', 'QMA') => ('-d', 'T', 'NP', 'QMA')
('-d', 'AA', 'NP', 'QMA') => ('-d', 'EA', 'NP', 'QMA')
('p', 'A', 'NP', 'QMA') => ('p', 'R', 'NP', 'QMA')
('p', 'A', 'NP', 'QMA') => ('p', 'AA', 'NP', 'QMA')
('p', 'A', 'co.NP', 'co.QMA') => ('p', 'R', 'co.NP', 'co.QMA')
('p', 'A', 'co.NP', 'co.QMA') => ('p', 'AA', 'co.NP', 'co.QMA')
('p', 'AA', 'co.NP', 'co.QMA') => ('p', 'T', 'co.NP', 'co.QMA')
('p', 'AA', 'co.NP', 'co.QMA') => ('p', 'EA', 'co.NP', 'co.QMA')
('p', 'AA', 'NP', 'QMA') => ('p', 'T', 'NP', 'QMA')
('p', 'AA', 'NP', 'QMA') => ('p', 'EA', 'NP', 'QMA')
('d', 'A', 'QCMA', 'BQP/mpoly') => ('-p', 'A', 'QCMA', 'BQP/mpoly')
('d', 'A', 'co.QCMA', 'BQP/mpoly') => ('-p', 'A', 'co.QCMA', 'BQP/mpoly')
('d', 'A', 'QCMA', 'BQP/qpoly') => ('-p', 'A', 'QCMA', 'BQP/qpoly')
('d', 'A', 'co.QCMA', 'BQP/qpoly') => ('-p', 'A', 'co.QCMA', 'BQP/qpoly')
('p', 'AA', 'NP', 'QCMA') => ('-d', 'AA', 'NP', 'QCMA')
('p', 'AA', 'NP', 'QCMA') => ('p', 'T', 'NP', 'QCMA')
('p', 'AA', 'NP', 'QCMA') => ('p', 'EA', 'NP', 'QCMA')
('p', 'AA', 'co.NP', 'co.QCMA') => ('-d', 'AA', 'co.NP', 'co.QCMA')
('p', 'AA', 'co.NP', 'co.QCMA') => ('p', 'T', 'co.NP', 'co.QCMA')
('p', 'AA', 'co.NP', 'co.QCMA') => ('p', 'EA', 'co.NP', 'co.QCMA')
('p', 'EA', 'co.NP', 'co.QCMA') => ('-d', 'EA', 'co.NP', 'co.QCMA')
('p', 'EA', 'NP', 'QCMA') => ('-d', 'EA', 'NP', 'QCMA')
('p', 'T', 'co.NP', 'co.QCMA') => ('-d', 'T', 'co.NP', 'co.QCMA')
('p', 'T', 'NP', 'QCMA') => ('-d', 'T', 'NP', 'QCMA')
('p', 'R', 'NP', 'QCMA') => ('-d', 'R', 'NP', 'QCMA')
('p', 'R', 'co.NP', 'co.QCMA') => ('-d', 'R', 'co.NP', 'co.QCMA')
('-d', 'A', 'co.MA', 'co.QMA') => ('-d', 'R', 'co.MA', 'co.QMA')
('-d', 'A', 'co.MA', 'co.QMA') => ('-d', 'AA', 'co.MA', 'co.QMA')
('-d', 'A', 'MA', 'QMA') => ('-d', 'R', 'MA', 'QMA')
('-d', 'A', 'MA', 'QMA') => ('-d', 'AA', 'MA', 'QMA')
('-d', 'AA', 'MA', 'QMA') => ('-d', 'T', 'MA', 'QMA')
('-d', 'AA', 'MA', 'QMA') => ('-d', 'EA', 'MA', 'QMA')
('-d', 'AA', 'co.MA', 'co.QMA') => ('-d', 'T', 'co.MA', 'co.QMA')
('-d', 'AA', 'co.MA', 'co.QMA') => ('-d', 'EA', 'co.MA', 'co.QMA')
('p', 'A', 'co.MA', 'co.QMA') => ('p', 'R', 'co.MA', 'co.QMA')
('p', 'A', 'co.MA', 'co.QMA') => ('p', 'AA', 'co.MA', 'co.QMA')
('p', 'A', 'MA', 'QMA') => ('p', 'R', 'MA', 'QMA')
('p', 'A', 'MA', 'QMA') => ('p', 'AA', 'MA', 'QMA')
('p', 'AA', 'MA', 'QMA') => ('p', 'T', 'MA', 'QMA')
('p', 'AA', 'MA', 'QMA') => ('p', 'EA', 'MA', 'QMA')
('p', 'AA', 'co.MA', 'co.QMA') => ('p', 'T', 'co.MA', 'co.QMA')
('p', 'AA', 'co.MA', 'co.QMA') => ('p', 'EA', 'co.MA', 'co.QMA')
('p', 'AA', 'co.MA', 'co.QCMA') => ('-d', 'AA', 'co.MA', 'co.QCMA')
('p', 'AA', 'co.MA', 'co.QCMA') => ('p', 'T', 'co.MA', 'co.QCMA')
('p', 'AA', 'co.MA', 'co.QCMA') => ('p', 'EA', 'co.MA', 'co.QCMA')
('p', 'AA', 'MA', 'QCMA') => ('-d', 'AA', 'MA', 'QCMA')
('p', 'AA', 'MA', 'QCMA') => ('p', 'T', 'MA', 'QCMA')
('p', 'AA', 'MA', 'QCMA') => ('p', 'EA', 'MA', 'QCMA')
('p', 'EA', 'MA', 'QCMA') => ('-d', 'EA', 'MA', 'QCMA')
('p', 'EA', 'MA', 'QCMA') => ('p', 'E', 'MA', 'QCMA')
('p', 'EA', 'co.MA', 'co.QCMA') => ('-d', 'EA', 'co.MA', 'co.QCMA')
('p', 'EA', 'co.MA', 'co.QCMA') => ('p', 'E', 'co.MA', 'co.QCMA')
('p', 'E', 'co.MA', 'co.QCMA') => ('-d', 'E', 'co.MA', 'co.QCMA')
('p', 'E', 'MA', 'QCMA') => ('-d', 'E', 'MA', 'QCMA')
('p', 'T', 'MA', 'QCMA') => ('-d', 'T', 'MA', 'QCMA')
('p', 'T', 'co.MA', 'co.QCMA') => ('-d', 'T', 'co.MA', 'co.QCMA')
('p', 'R', 'co.MA', 'co.QCMA') => ('-d', 'R', 'co.MA', 'co.QCMA')
('p', 'R', 'MA', 'QCMA') => ('-d', 'R', 'MA', 'QCMA')
('p', 'A', 'NEXP/poly', 'ALL') => ('-d', 'A', 'NEXP/poly', 'ALL')
('p', 'A', 'NEXP/poly', 'ALL') => ('p', 'R', 'NEXP/poly', 'ALL')
('p', 'A', 'NEXP/poly', 'ALL') => ('p', 'AA', 'NEXP/poly', 'ALL')
('p', 'E', 'RP', 'ALL') => ('-d', 'E', 'RP', 'ALL')
('p', 'E', 'co.RP', 'ALL') => ('-d', 'E', 'co.RP', 'ALL')
('p', 'E', 'ZPP', 'ALL') => ('-d', 'E', 'ZPP', 'ALL')
('p', 'A', 'RP', 'ALL') => ('-d', 'A', 'RP', 'ALL')
('p', 'A', 'RP', 'ALL') => ('p', 'R', 'RP', 'ALL')
('p', 'A', 'RP', 'ALL') => ('p', 'AA', 'RP', 'ALL')
('p', 'A', 'co.RP', 'ALL') => ('-d', 'A', 'co.RP', 'ALL')
('p', 'A', 'co.RP', 'ALL') => ('p', 'R', 'co.RP', 'ALL')
('p', 'A', 'co.RP', 'ALL') => ('p', 'AA', 'co.RP', 'ALL')
('p', 'A', 'ZPP', 'ALL') => ('-d', 'A', 'ZPP', 'ALL')
('p', 'A', 'ZPP', 'ALL') => ('p', 'R', 'ZPP', 'ALL')
('p', 'A', 'ZPP', 'ALL') => ('p', 'AA', 'ZPP', 'ALL')
('p', 'AA', 'ZPP', 'ALL') => ('-d', 'AA', 'ZPP', 'ALL')
('p', 'AA', 'ZPP', 'ALL') => ('p', 'T', 'ZPP', 'ALL')
('p', 'AA', 'ZPP', 'ALL') => ('p', 'EA', 'ZPP', 'ALL')
('p', 'EA', 'ZPP', 'ALL') => ('-d', 'EA', 'ZPP', 'ALL')
('p', 'T', 'ZPP', 'ALL') => ('-d', 'T', 'ZPP', 'ALL')
('p', 'R', 'ZPP', 'ALL') => ('-d', 'R', 'ZPP', 'ALL')
('p', 'AA', 'co.RP', 'ALL') => ('-d', 'AA', 'co.RP', 'ALL')
('p', 'AA', 'co.RP', 'ALL') => ('p', 'T', 'co.RP', 'ALL')
('p', 'AA', 'co.RP', 'ALL') => ('p', 'EA', 'co.RP', 'ALL')
('p', 'AA', 'RP', 'ALL') => ('-d', 'AA', 'RP', 'ALL')
('p', 'AA', 'RP', 'ALL') => ('p', 'T', 'RP', 'ALL')
('p', 'AA', 'RP', 'ALL') => ('p', 'EA', 'RP', 'ALL')
('p', 'EA', 'RP', 'ALL') => ('-d', 'EA', 'RP', 'ALL')
('p', 'EA', 'co.RP', 'ALL') => ('-d', 'EA', 'co.RP', 'ALL')
('p', 'T', 'RP', 'ALL') => ('-d', 'T', 'RP', 'ALL')
('p', 'T', 'co.RP', 'ALL') => ('-d', 'T', 'co.RP', 'ALL')
('p', 'R', 'co.RP', 'ALL') => ('-d', 'R', 'co.RP', 'ALL')
('p', 'R', 'RP', 'ALL') => ('-d', 'R', 'RP', 'ALL')
('p', 'E', 'EXP_plo', 'ALL') => ('-d', 'E', 'EXP_plo', 'ALL')
('p', 'A', 'EXP_plo', 'ALL') => ('-d', 'A', 'EXP_plo', 'ALL')
('p', 'A', 'EXP_plo', 'ALL') => ('p', 'R', 'EXP_plo', 'ALL')
('p', 'A', 'EXP_plo', 'ALL') => ('p', 'AA', 'EXP_plo', 'ALL')
('p', 'AA', 'EXP_plo', 'ALL') => ('-d', 'AA', 'EXP_plo', 'ALL')
('p', 'AA', 'EXP_plo', 'ALL') => ('p', 'T', 'EXP_plo', 'ALL')
('p', 'AA', 'EXP_plo', 'ALL') => ('p', 'EA', 'EXP_plo', 'ALL')
('p', 'EA', 'EXP_plo', 'ALL') => ('-d', 'EA', 'EXP_plo', 'ALL')
('p', 'T', 'EXP_plo', 'ALL') => ('-d', 'T', 'EXP_plo', 'ALL')
('p', 'R', 'EXP_plo', 'ALL') => ('-d', 'R', 'EXP_plo', 'ALL')
('p', 'E', 'cocap.NEXP_plo', 'ALL') => ('-d', 'E', 'cocap.NEXP_plo', 'ALL')
('p', 'E', 'cocap.MIP', 'ALL') => ('-d', 'E', 'cocap.MIP', 'ALL')
('p', 'E', 'cocap.AM', 'ALL') => ('-d', 'E', 'cocap.AM', 'ALL')
('p', 'E', 'cocap.IP', 'ALL') => ('-d', 'E', 'cocap.IP', 'ALL')
('p', 'A', 'cocap.NEXP_plo', 'ALL') => ('-d', 'A', 'cocap.NEXP_plo', 'ALL')
('p', 'A', 'cocap.NEXP_plo', 'ALL') => ('p', 'R', 'cocap.NEXP_plo', 'ALL')
('p', 'A', 'cocap.NEXP_plo', 'ALL') => ('p', 'AA', 'cocap.NEXP_plo', 'ALL')
('p', 'A', 'cocap.MIP', 'ALL') => ('-d', 'A', 'cocap.MIP', 'ALL')
('p', 'A', 'cocap.MIP', 'ALL') => ('p', 'R', 'cocap.MIP', 'ALL')
('p', 'A', 'cocap.MIP', 'ALL') => ('p', 'AA', 'cocap.MIP', 'ALL')
('p', 'A', 'cocap.AM', 'ALL') => ('-d', 'A', 'cocap.AM', 'ALL')
('p', 'A', 'cocap.AM', 'ALL') => ('p', 'R', 'cocap.AM', 'ALL')
('p', 'A', 'cocap.AM', 'ALL') => ('p', 'AA', 'cocap.AM', 'ALL')
('p', 'AA', 'cocap.AM', 'ALL') => ('-d', 'AA', 'cocap.AM', 'ALL')
('p', 'AA', 'cocap.AM', 'ALL') => ('p', 'T', 'cocap.AM', 'ALL')
('p', 'AA', 'cocap.AM', 'ALL') => ('p', 'EA', 'cocap.AM', 'ALL')
('p', 'EA', 'cocap.AM', 'ALL') => ('-d', 'EA', 'cocap.AM', 'ALL')
('p', 'T', 'cocap.AM', 'ALL') => ('-d', 'T', 'cocap.AM', 'ALL')
('p', 'R', 'cocap.AM', 'ALL') => ('-d', 'R', 'cocap.AM', 'ALL')
('p', 'A', 'cocap.IP', 'ALL') => ('-d', 'A', 'cocap.IP', 'ALL')
('p', 'A', 'cocap.IP', 'ALL') => ('p', 'R', 'cocap.IP', 'ALL')
('p', 'A', 'cocap.IP', 'ALL') => ('p', 'AA', 'cocap.IP', 'ALL')
('p', 'AA', 'cocap.IP', 'ALL') => ('-d', 'AA', 'cocap.IP', 'ALL')
('p', 'AA', 'cocap.IP', 'ALL') => ('p', 'T', 'cocap.IP', 'ALL')
('p', 'AA', 'cocap.IP', 'ALL') => ('p', 'EA', 'cocap.IP', 'ALL')
('p', 'EA', 'cocap.IP', 'ALL') => ('-d', 'EA', 'cocap.IP', 'ALL')
('p', 'T', 'cocap.IP', 'ALL') => ('-d', 'T', 'cocap.IP', 'ALL')
('p', 'R', 'cocap.IP', 'ALL') => ('-d', 'R', 'cocap.IP', 'ALL')
('p', 'AA', 'cocap.MIP', 'ALL') => ('-d', 'AA', 'cocap.MIP', 'ALL')
('p', 'AA', 'cocap.MIP', 'ALL') => ('p', 'T', 'cocap.MIP', 'ALL')
('p', 'AA', 'cocap.MIP', 'ALL') => ('p', 'EA', 'cocap.MIP', 'ALL')
('p', 'EA', 'cocap.MIP', 'ALL') => ('-d', 'EA', 'cocap.MIP', 'ALL')
('p', 'T', 'cocap.MIP', 'ALL') => ('-d', 'T', 'cocap.MIP', 'ALL')
('p', 'R', 'cocap.MIP', 'ALL') => ('-d', 'R', 'cocap.MIP', 'ALL')
('p', 'AA', 'cocap.NEXP_plo', 'ALL') => ('-d', 'AA', 'cocap.NEXP_plo', 'ALL')
('p', 'AA', 'cocap.NEXP_plo', 'ALL') => ('p', 'T', 'cocap.NEXP_plo', 'ALL')
('p', 'AA', 'cocap.NEXP_plo', 'ALL') => ('p', 'EA', 'cocap.NEXP_plo', 'ALL')
('p', 'EA', 'cocap.NEXP_plo', 'ALL') => ('-d', 'EA', 'cocap.NEXP_plo', 'ALL')
('p', 'T', 'cocap.NEXP_plo', 'ALL') => ('-d', 'T', 'cocap.NEXP_plo', 'ALL')
('p', 'R', 'cocap.NEXP_plo', 'ALL') => ('-d', 'R', 'cocap.NEXP_plo', 'ALL')
('p', 'E', 'NP', 'ALL') => ('-d', 'E', 'NP', 'ALL')
('p', 'E', 'co.NP', 'ALL') => ('-d', 'E', 'co.NP', 'ALL')
('p', 'E', 'cocap.NP', 'ALL') => ('-d', 'E', 'cocap.NP', 'ALL')
('p', 'A', 'NP', 'ALL') => ('-d', 'A', 'NP', 'ALL')
('p', 'A', 'NP', 'ALL') => ('p', 'R', 'NP', 'ALL')
('p', 'A', 'NP', 'ALL') => ('p', 'AA', 'NP', 'ALL')
('p', 'A', 'co.NP', 'ALL') => ('-d', 'A', 'co.NP', 'ALL')
('p', 'A', 'co.NP', 'ALL') => ('p', 'R', 'co.NP', 'ALL')
('p', 'A', 'co.NP', 'ALL') => ('p', 'AA', 'co.NP', 'ALL')
('p', 'A', 'cocap.NP', 'ALL') => ('-d', 'A', 'cocap.NP', 'ALL')
('p', 'A', 'cocap.NP', 'ALL') => ('p', 'R', 'cocap.NP', 'ALL')
('p', 'A', 'cocap.NP', 'ALL') => ('p', 'AA', 'cocap.NP', 'ALL')
('p', 'AA', 'cocap.NP', 'ALL') => ('-d', 'AA', 'cocap.NP', 'ALL')
('p', 'AA', 'cocap.NP', 'ALL') => ('p', 'T', 'cocap.NP', 'ALL')
('p', 'AA', 'cocap.NP', 'ALL') => ('p', 'EA', 'cocap.NP', 'ALL')
('p', 'EA', 'cocap.NP', 'ALL') => ('-d', 'EA', 'cocap.NP', 'ALL')
('p', 'T', 'cocap.NP', 'ALL') => ('-d', 'T', 'cocap.NP', 'ALL')
('p', 'R', 'cocap.NP', 'ALL') => ('-d', 'R', 'cocap.NP', 'ALL')
('d', 'A', 'ALL', 'BQP/mpoly') => ('-p', 'A', 'ALL', 'BQP/mpoly')
('d', 'A', 'ALL', 'BQP/qpoly') => ('-p', 'A', 'ALL', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'ALL') => ('-d', 'AA', 'co.NP', 'ALL')
('p', 'AA', 'co.NP', 'ALL') => ('p', 'T', 'co.NP', 'ALL')
('p', 'AA', 'co.NP', 'ALL') => ('p', 'EA', 'co.NP', 'ALL')
('p', 'AA', 'NP', 'ALL') => ('-d', 'AA', 'NP', 'ALL')
('p', 'AA', 'NP', 'ALL') => ('p', 'T', 'NP', 'ALL')
('p', 'AA', 'NP', 'ALL') => ('p', 'EA', 'NP', 'ALL')
('p', 'EA', 'NP', 'ALL') => ('-d', 'EA', 'NP', 'ALL')
('p', 'EA', 'co.NP', 'ALL') => ('-d', 'EA', 'co.NP', 'ALL')
('p', 'T', 'NP', 'ALL') => ('-d', 'T', 'NP', 'ALL')
('p', 'T', 'co.NP', 'ALL') => ('-d', 'T', 'co.NP', 'ALL')
('p', 'R', 'co.NP', 'ALL') => ('-d', 'R', 'co.NP', 'ALL')
('p', 'R', 'NP', 'ALL') => ('-d', 'R', 'NP', 'ALL')
('p', 'E', 'co.NEXP', 'ALL') => ('-d', 'E', 'co.NEXP', 'ALL')
('p', 'E', 'NEXP', 'ALL') => ('-d', 'E', 'NEXP', 'ALL')
('p', 'E', 'cocap.NEXP', 'ALL') => ('-d', 'E', 'cocap.NEXP', 'ALL')
('p', 'E', 'cocap.QMIP_ne', 'ALL') => ('-d', 'E', 'cocap.QMIP_ne', 'ALL')
('p', 'E', 'cocap.QIP', 'ALL') => ('-d', 'E', 'cocap.QIP', 'ALL')
('p', 'E', 'QIP', 'ALL') => ('-d', 'E', 'QIP', 'ALL')
('p', 'E', 'co.QIP', 'ALL') => ('-d', 'E', 'co.QIP', 'ALL')
('p', 'E', 'co.AM', 'ALL') => ('-d', 'E', 'co.AM', 'ALL')
('p', 'E', 'AM', 'ALL') => ('-d', 'E', 'AM', 'ALL')
('p', 'E', 'co.IP', 'ALL') => ('-d', 'E', 'co.IP', 'ALL')
('p', 'E', 'IP', 'ALL') => ('-d', 'E', 'IP', 'ALL')
('p', 'E', 'QMIP_ne', 'ALL') => ('-d', 'E', 'QMIP_ne', 'ALL')
('p', 'E', 'co.QMIP_ne', 'ALL') => ('-d', 'E', 'co.QMIP_ne', 'ALL')
('p', 'E', 'MIP', 'ALL') => ('-d', 'E', 'MIP', 'ALL')
('p', 'E', 'co.MIP', 'ALL') => ('-d', 'E', 'co.MIP', 'ALL')
('p', 'E', 'NEXP_plo', 'ALL') => ('-d', 'E', 'NEXP_plo', 'ALL')
('p', 'E', 'co.NEXP_plo', 'ALL') => ('-d', 'E', 'co.NEXP_plo', 'ALL')
('p', 'A', 'co.NEXP', 'ALL') => ('-d', 'A', 'co.NEXP', 'ALL')
('p', 'A', 'co.NEXP', 'ALL') => ('p', 'R', 'co.NEXP', 'ALL')
('p', 'A', 'co.NEXP', 'ALL') => ('p', 'AA', 'co.NEXP', 'ALL')
('p', 'A', 'NEXP', 'ALL') => ('-d', 'A', 'NEXP', 'ALL')
('p', 'A', 'NEXP', 'ALL') => ('p', 'R', 'NEXP', 'ALL')
('p', 'A', 'NEXP', 'ALL') => ('p', 'AA', 'NEXP', 'ALL')
('p', 'A', 'cocap.NEXP', 'ALL') => ('-d', 'A', 'cocap.NEXP', 'ALL')
('p', 'A', 'cocap.NEXP', 'ALL') => ('p', 'R', 'cocap.NEXP', 'ALL')
('p', 'A', 'cocap.NEXP', 'ALL') => ('p', 'AA', 'cocap.NEXP', 'ALL')
('p', 'A', 'cocap.QMIP_ne', 'ALL') => ('-d', 'A', 'cocap.QMIP_ne', 'ALL')
('p', 'A', 'cocap.QMIP_ne', 'ALL') => ('p', 'R', 'cocap.QMIP_ne', 'ALL')
('p', 'A', 'cocap.QMIP_ne', 'ALL') => ('p', 'AA', 'cocap.QMIP_ne', 'ALL')
('p', 'A', 'cocap.QIP', 'ALL') => ('-d', 'A', 'cocap.QIP', 'ALL')
('p', 'A', 'cocap.QIP', 'ALL') => ('p', 'R', 'cocap.QIP', 'ALL')
('p', 'A', 'cocap.QIP', 'ALL') => ('p', 'AA', 'cocap.QIP', 'ALL')
('p', 'AA', 'cocap.QIP', 'ALL') => ('-d', 'AA', 'cocap.QIP', 'ALL')
('p', 'AA', 'cocap.QIP', 'ALL') => ('p', 'T', 'cocap.QIP', 'ALL')
('p', 'AA', 'cocap.QIP', 'ALL') => ('p', 'EA', 'cocap.QIP', 'ALL')
('p', 'EA', 'cocap.QIP', 'ALL') => ('-d', 'EA', 'cocap.QIP', 'ALL')
('p', 'T', 'cocap.QIP', 'ALL') => ('-d', 'T', 'cocap.QIP', 'ALL')
('p', 'R', 'cocap.QIP', 'ALL') => ('-d', 'R', 'cocap.QIP', 'ALL')
('p', 'AA', 'cocap.QMIP_ne', 'ALL') => ('-d', 'AA', 'cocap.QMIP_ne', 'ALL')
('p', 'AA', 'cocap.QMIP_ne', 'ALL') => ('p', 'T', 'cocap.QMIP_ne', 'ALL')
('p', 'AA', 'cocap.QMIP_ne', 'ALL') => ('p', 'EA', 'cocap.QMIP_ne', 'ALL')
('p', 'EA', 'cocap.QMIP_ne', 'ALL') => ('-d', 'EA', 'cocap.QMIP_ne', 'ALL')
('p', 'T', 'cocap.QMIP_ne', 'ALL') => ('-d', 'T', 'cocap.QMIP_ne', 'ALL')
('p', 'R', 'cocap.QMIP_ne', 'ALL') => ('-d', 'R', 'cocap.QMIP_ne', 'ALL')
('p', 'AA', 'cocap.NEXP', 'ALL') => ('-d', 'AA', 'cocap.NEXP', 'ALL')
('p', 'AA', 'cocap.NEXP', 'ALL') => ('p', 'T', 'cocap.NEXP', 'ALL')
('p', 'AA', 'cocap.NEXP', 'ALL') => ('p', 'EA', 'cocap.NEXP', 'ALL')
('p', 'EA', 'cocap.NEXP', 'ALL') => ('-d', 'EA', 'cocap.NEXP', 'ALL')
('p', 'T', 'cocap.NEXP', 'ALL') => ('-d', 'T', 'cocap.NEXP', 'ALL')
('p', 'R', 'cocap.NEXP', 'ALL') => ('-d', 'R', 'cocap.NEXP', 'ALL')
('p', 'A', 'QIP', 'ALL') => ('-d', 'A', 'QIP', 'ALL')
('p', 'A', 'QIP', 'ALL') => ('p', 'R', 'QIP', 'ALL')
('p', 'A', 'QIP', 'ALL') => ('p', 'AA', 'QIP', 'ALL')
('p', 'A', 'co.QIP', 'ALL') => ('-d', 'A', 'co.QIP', 'ALL')
('p', 'A', 'co.QIP', 'ALL') => ('p', 'R', 'co.QIP', 'ALL')
('p', 'A', 'co.QIP', 'ALL') => ('p', 'AA', 'co.QIP', 'ALL')
('p', 'A', 'co.AM', 'ALL') => ('-d', 'A', 'co.AM', 'ALL')
('p', 'A', 'co.AM', 'ALL') => ('p', 'R', 'co.AM', 'ALL')
('p', 'A', 'co.AM', 'ALL') => ('p', 'AA', 'co.AM', 'ALL')
('p', 'A', 'AM', 'ALL') => ('-d', 'A', 'AM', 'ALL')
('p', 'A', 'AM', 'ALL') => ('p', 'R', 'AM', 'ALL')
('p', 'A', 'AM', 'ALL') => ('p', 'AA', 'AM', 'ALL')
('p', 'AA', 'AM', 'ALL') => ('-d', 'AA', 'AM', 'ALL')
('p', 'AA', 'AM', 'ALL') => ('p', 'T', 'AM', 'ALL')
('p', 'AA', 'AM', 'ALL') => ('p', 'EA', 'AM', 'ALL')
('p', 'AA', 'co.AM', 'ALL') => ('-d', 'AA', 'co.AM', 'ALL')
('p', 'AA', 'co.AM', 'ALL') => ('p', 'T', 'co.AM', 'ALL')
('p', 'AA', 'co.AM', 'ALL') => ('p', 'EA', 'co.AM', 'ALL')
('p', 'EA', 'co.AM', 'ALL') => ('-d', 'EA', 'co.AM', 'ALL')
('p', 'EA', 'AM', 'ALL') => ('-d', 'EA', 'AM', 'ALL')
('p', 'T', 'co.AM', 'ALL') => ('-d', 'T', 'co.AM', 'ALL')
('p', 'T', 'AM', 'ALL') => ('-d', 'T', 'AM', 'ALL')
('p', 'R', 'AM', 'ALL') => ('-d', 'R', 'AM', 'ALL')
('p', 'R', 'co.AM', 'ALL') => ('-d', 'R', 'co.AM', 'ALL')
('p', 'A', 'co.IP', 'ALL') => ('-d', 'A', 'co.IP', 'ALL')
('p', 'A', 'co.IP', 'ALL') => ('p', 'R', 'co.IP', 'ALL')
('p', 'A', 'co.IP', 'ALL') => ('p', 'AA', 'co.IP', 'ALL')
('p', 'A', 'IP', 'ALL') => ('-d', 'A', 'IP', 'ALL')
('p', 'A', 'IP', 'ALL') => ('p', 'R', 'IP', 'ALL')
('p', 'A', 'IP', 'ALL') => ('p', 'AA', 'IP', 'ALL')
('p', 'AA', 'IP', 'ALL') => ('-d', 'AA', 'IP', 'ALL')
('p', 'AA', 'IP', 'ALL') => ('p', 'T', 'IP', 'ALL')
('p', 'AA', 'IP', 'ALL') => ('p', 'EA', 'IP', 'ALL')
('p', 'AA', 'co.IP', 'ALL') => ('-d', 'AA', 'co.IP', 'ALL')
('p', 'AA', 'co.IP', 'ALL') => ('p', 'T', 'co.IP', 'ALL')
('p', 'AA', 'co.IP', 'ALL') => ('p', 'EA', 'co.IP', 'ALL')
('p', 'EA', 'co.IP', 'ALL') => ('-d', 'EA', 'co.IP', 'ALL')
('p', 'EA', 'IP', 'ALL') => ('-d', 'EA', 'IP', 'ALL')
('p', 'T', 'co.IP', 'ALL') => ('-d', 'T', 'co.IP', 'ALL')
('p', 'T', 'IP', 'ALL') => ('-d', 'T', 'IP', 'ALL')
('p', 'R', 'IP', 'ALL') => ('-d', 'R', 'IP', 'ALL')
('p', 'R', 'co.IP', 'ALL') => ('-d', 'R', 'co.IP', 'ALL')
('p', 'AA', 'co.QIP', 'ALL') => ('-d', 'AA', 'co.QIP', 'ALL')
('p', 'AA', 'co.QIP', 'ALL') => ('p', 'T', 'co.QIP', 'ALL')
('p', 'AA', 'co.QIP', 'ALL') => ('p', 'EA', 'co.QIP', 'ALL')
('p', 'AA', 'QIP', 'ALL') => ('-d', 'AA', 'QIP', 'ALL')
('p', 'AA', 'QIP', 'ALL') => ('p', 'T', 'QIP', 'ALL')
('p', 'AA', 'QIP', 'ALL') => ('p', 'EA', 'QIP', 'ALL')
('p', 'EA', 'QIP', 'ALL') => ('-d', 'EA', 'QIP', 'ALL')
('p', 'EA', 'co.QIP', 'ALL') => ('-d', 'EA', 'co.QIP', 'ALL')
('p', 'T', 'QIP', 'ALL') => ('-d', 'T', 'QIP', 'ALL')
('p', 'T', 'co.QIP', 'ALL') => ('-d', 'T', 'co.QIP', 'ALL')
('p', 'R', 'co.QIP', 'ALL') => ('-d', 'R', 'co.QIP', 'ALL')
('p', 'R', 'QIP', 'ALL') => ('-d', 'R', 'QIP', 'ALL')
('p', 'A', 'QMIP_ne', 'ALL') => ('-d', 'A', 'QMIP_ne', 'ALL')
('p', 'A', 'QMIP_ne', 'ALL') => ('p', 'R', 'QMIP_ne', 'ALL')
('p', 'A', 'QMIP_ne', 'ALL') => ('p', 'AA', 'QMIP_ne', 'ALL')
('p', 'A', 'co.QMIP_ne', 'ALL') => ('-d', 'A', 'co.QMIP_ne', 'ALL')
('p', 'A', 'co.QMIP_ne', 'ALL') => ('p', 'R', 'co.QMIP_ne', 'ALL')
('p', 'A', 'co.QMIP_ne', 'ALL') => ('p', 'AA', 'co.QMIP_ne', 'ALL')
('p', 'AA', 'co.QMIP_ne', 'ALL') => ('-d', 'AA', 'co.QMIP_ne', 'ALL')
('p', 'AA', 'co.QMIP_ne', 'ALL') => ('p', 'T', 'co.QMIP_ne', 'ALL')
('p', 'AA', 'co.QMIP_ne', 'ALL') => ('p', 'EA', 'co.QMIP_ne', 'ALL')
('p', 'AA', 'QMIP_ne', 'ALL') => ('-d', 'AA', 'QMIP_ne', 'ALL')
('p', 'AA', 'QMIP_ne', 'ALL') => ('p', 'T', 'QMIP_ne', 'ALL')
('p', 'AA', 'QMIP_ne', 'ALL') => ('p', 'EA', 'QMIP_ne', 'ALL')
('p', 'EA', 'QMIP_ne', 'ALL') => ('-d', 'EA', 'QMIP_ne', 'ALL')
('p', 'EA', 'co.QMIP_ne', 'ALL') => ('-d', 'EA', 'co.QMIP_ne', 'ALL')
('p', 'T', 'QMIP_ne', 'ALL') => ('-d', 'T', 'QMIP_ne', 'ALL')
('p', 'T', 'co.QMIP_ne', 'ALL') => ('-d', 'T', 'co.QMIP_ne', 'ALL')
('p', 'R', 'co.QMIP_ne', 'ALL') => ('-d', 'R', 'co.QMIP_ne', 'ALL')
('p', 'R', 'QMIP_ne', 'ALL') => ('-d', 'R', 'QMIP_ne', 'ALL')
('p', 'A', 'MIP', 'ALL') => ('-d', 'A', 'MIP', 'ALL')
('p', 'A', 'MIP', 'ALL') => ('p', 'R', 'MIP', 'ALL')
('p', 'A', 'MIP', 'ALL') => ('p', 'AA', 'MIP', 'ALL')
('p', 'A', 'co.MIP', 'ALL') => ('-d', 'A', 'co.MIP', 'ALL')
('p', 'A', 'co.MIP', 'ALL') => ('p', 'R', 'co.MIP', 'ALL')
('p', 'A', 'co.MIP', 'ALL') => ('p', 'AA', 'co.MIP', 'ALL')
('p', 'AA', 'co.MIP', 'ALL') => ('-d', 'AA', 'co.MIP', 'ALL')
('p', 'AA', 'co.MIP', 'ALL') => ('p', 'T', 'co.MIP', 'ALL')
('p', 'AA', 'co.MIP', 'ALL') => ('p', 'EA', 'co.MIP', 'ALL')
('p', 'AA', 'MIP', 'ALL') => ('-d', 'AA', 'MIP', 'ALL')
('p', 'AA', 'MIP', 'ALL') => ('p', 'T', 'MIP', 'ALL')
('p', 'AA', 'MIP', 'ALL') => ('p', 'EA', 'MIP', 'ALL')
('p', 'EA', 'MIP', 'ALL') => ('-d', 'EA', 'MIP', 'ALL')
('p', 'EA', 'co.MIP', 'ALL') => ('-d', 'EA', 'co.MIP', 'ALL')
('p', 'T', 'MIP', 'ALL') => ('-d', 'T', 'MIP', 'ALL')
('p', 'T', 'co.MIP', 'ALL') => ('-d', 'T', 'co.MIP', 'ALL')
('p', 'R', 'co.MIP', 'ALL') => ('-d', 'R', 'co.MIP', 'ALL')
('p', 'R', 'MIP', 'ALL') => ('-d', 'R', 'MIP', 'ALL')
('p', 'A', 'NEXP_plo', 'ALL') => ('-d', 'A', 'NEXP_plo', 'ALL')
('p', 'A', 'NEXP_plo', 'ALL') => ('p', 'R', 'NEXP_plo', 'ALL')
('p', 'A', 'NEXP_plo', 'ALL') => ('p', 'AA', 'NEXP_plo', 'ALL')
('p', 'A', 'co.NEXP_plo', 'ALL') => ('-d', 'A', 'co.NEXP_plo', 'ALL')
('p', 'A', 'co.NEXP_plo', 'ALL') => ('p', 'R', 'co.NEXP_plo', 'ALL')
('p', 'A', 'co.NEXP_plo', 'ALL') => ('p', 'AA', 'co.NEXP_plo', 'ALL')
('p', 'AA', 'co.NEXP_plo', 'ALL') => ('-d', 'AA', 'co.NEXP_plo', 'ALL')
('p', 'AA', 'co.NEXP_plo', 'ALL') => ('p', 'T', 'co.NEXP_plo', 'ALL')
('p', 'AA', 'co.NEXP_plo', 'ALL') => ('p', 'EA', 'co.NEXP_plo', 'ALL')
('p', 'AA', 'NEXP_plo', 'ALL') => ('-d', 'AA', 'NEXP_plo', 'ALL')
('p', 'AA', 'NEXP_plo', 'ALL') => ('p', 'T', 'NEXP_plo', 'ALL')
('p', 'AA', 'NEXP_plo', 'ALL') => ('p', 'EA', 'NEXP_plo', 'ALL')
('p', 'EA', 'NEXP_plo', 'ALL') => ('-d', 'EA', 'NEXP_plo', 'ALL')
('p', 'EA', 'co.NEXP_plo', 'ALL') => ('-d', 'EA', 'co.NEXP_plo', 'ALL')
('p', 'T', 'NEXP_plo', 'ALL') => ('-d', 'T', 'NEXP_plo', 'ALL')
('p', 'T', 'co.NEXP_plo', 'ALL') => ('-d', 'T', 'co.NEXP_plo', 'ALL')
('p', 'R', 'co.NEXP_plo', 'ALL') => ('-d', 'R', 'co.NEXP_plo', 'ALL')
('p', 'R', 'NEXP_plo', 'ALL') => ('-d', 'R', 'NEXP_plo', 'ALL')
('p', 'AA', 'NEXP', 'ALL') => ('-d', 'AA', 'NEXP', 'ALL')
('p', 'AA', 'NEXP', 'ALL') => ('p', 'T', 'NEXP', 'ALL')
('p', 'AA', 'NEXP', 'ALL') => ('p', 'EA', 'NEXP', 'ALL')
('p', 'AA', 'co.NEXP', 'ALL') => ('-d', 'AA', 'co.NEXP', 'ALL')
('p', 'AA', 'co.NEXP', 'ALL') => ('p', 'T', 'co.NEXP', 'ALL')
('p', 'AA', 'co.NEXP', 'ALL') => ('p', 'EA', 'co.NEXP', 'ALL')
('p', 'EA', 'co.NEXP', 'ALL') => ('-d', 'EA', 'co.NEXP', 'ALL')
('p', 'EA', 'NEXP', 'ALL') => ('-d', 'EA', 'NEXP', 'ALL')
('p', 'T', 'co.NEXP', 'ALL') => ('-d', 'T', 'co.NEXP', 'ALL')
('p', 'T', 'NEXP', 'ALL') => ('-d', 'T', 'NEXP', 'ALL')
('p', 'R', 'NEXP', 'ALL') => ('-d', 'R', 'NEXP', 'ALL')
('p', 'R', 'co.NEXP', 'ALL') => ('-d', 'R', 'co.NEXP', 'ALL')
('p', 'E', '(NP-cap-coNP)/poly', 'ALL') => ('-d', 'E', '(NP-cap-coNP)/poly', 'ALL')
('p', 'A', '(NP-cap-coNP)/poly', 'ALL') => ('-d', 'A', '(NP-cap-coNP)/poly', 'ALL')
('p', 'A', '(NP-cap-coNP)/poly', 'ALL') => ('p', 'R', '(NP-cap-coNP)/poly', 'ALL')
('p', 'A', '(NP-cap-coNP)/poly', 'ALL') => ('p', 'AA', '(NP-cap-coNP)/poly', 'ALL')
('p', 'AA', '(NP-cap-coNP)/poly', 'ALL') => ('-d', 'AA', '(NP-cap-coNP)/poly', 'ALL')
('p', 'AA', '(NP-cap-coNP)/poly', 'ALL') => ('p', 'T', '(NP-cap-coNP)/poly', 'ALL')
('p', 'AA', '(NP-cap-coNP)/poly', 'ALL') => ('p', 'EA', '(NP-cap-coNP)/poly', 'ALL')
('p', 'EA', '(NP-cap-coNP)/poly', 'ALL') => ('-d', 'EA', '(NP-cap-coNP)/poly', 'ALL')
('p', 'T', '(NP-cap-coNP)/poly', 'ALL') => ('-d', 'T', '(NP-cap-coNP)/poly', 'ALL')
('p', 'R', '(NP-cap-coNP)/poly', 'ALL') => ('-d', 'R', '(NP-cap-coNP)/poly', 'ALL')
('p', 'E', 'co.NP/poly', 'ALL') => ('-d', 'E', 'co.NP/poly', 'ALL')
('p', 'E', 'NP/poly', 'ALL') => ('-d', 'E', 'NP/poly', 'ALL')
('p', 'E', 'cocap.NP/poly', 'ALL') => ('-d', 'E', 'cocap.NP/poly', 'ALL')
('p', 'A', 'co.NP/poly', 'ALL') => ('-d', 'A', 'co.NP/poly', 'ALL')
('p', 'A', 'co.NP/poly', 'ALL') => ('p', 'R', 'co.NP/poly', 'ALL')
('p', 'A', 'co.NP/poly', 'ALL') => ('p', 'AA', 'co.NP/poly', 'ALL')
('p', 'A', 'NP/poly', 'ALL') => ('-d', 'A', 'NP/poly', 'ALL')
('p', 'A', 'NP/poly', 'ALL') => ('p', 'R', 'NP/poly', 'ALL')
('p', 'A', 'NP/poly', 'ALL') => ('p', 'AA', 'NP/poly', 'ALL')
('p', 'A', 'cocap.NP/poly', 'ALL') => ('-d', 'A', 'cocap.NP/poly', 'ALL')
('p', 'A', 'cocap.NP/poly', 'ALL') => ('p', 'R', 'cocap.NP/poly', 'ALL')
('p', 'A', 'cocap.NP/poly', 'ALL') => ('p', 'AA', 'cocap.NP/poly', 'ALL')
('p', 'AA', 'cocap.NP/poly', 'ALL') => ('-d', 'AA', 'cocap.NP/poly', 'ALL')
('p', 'AA', 'cocap.NP/poly', 'ALL') => ('p', 'T', 'cocap.NP/poly', 'ALL')
('p', 'AA', 'cocap.NP/poly', 'ALL') => ('p', 'EA', 'cocap.NP/poly', 'ALL')
('p', 'EA', 'cocap.NP/poly', 'ALL') => ('-d', 'EA', 'cocap.NP/poly', 'ALL')
('p', 'T', 'cocap.NP/poly', 'ALL') => ('-d', 'T', 'cocap.NP/poly', 'ALL')
('p', 'R', 'cocap.NP/poly', 'ALL') => ('-d', 'R', 'cocap.NP/poly', 'ALL')
('p', 'AA', 'NP/poly', 'ALL') => ('-d', 'AA', 'NP/poly', 'ALL')
('p', 'AA', 'NP/poly', 'ALL') => ('p', 'T', 'NP/poly', 'ALL')
('p', 'AA', 'NP/poly', 'ALL') => ('p', 'EA', 'NP/poly', 'ALL')
('p', 'AA', 'co.NP/poly', 'ALL') => ('-d', 'AA', 'co.NP/poly', 'ALL')
('p', 'AA', 'co.NP/poly', 'ALL') => ('p', 'T', 'co.NP/poly', 'ALL')
('p', 'AA', 'co.NP/poly', 'ALL') => ('p', 'EA', 'co.NP/poly', 'ALL')
('p', 'EA', 'co.NP/poly', 'ALL') => ('-d', 'EA', 'co.NP/poly', 'ALL')
('p', 'EA', 'NP/poly', 'ALL') => ('-d', 'EA', 'NP/poly', 'ALL')
('p', 'T', 'co.NP/poly', 'ALL') => ('-d', 'T', 'co.NP/poly', 'ALL')
('p', 'T', 'NP/poly', 'ALL') => ('-d', 'T', 'NP/poly', 'ALL')
('p', 'R', 'NP/poly', 'ALL') => ('-d', 'R', 'NP/poly', 'ALL')
('p', 'R', 'co.NP/poly', 'ALL') => ('-d', 'R', 'co.NP/poly', 'ALL')
('p', 'AA', 'NEXP/poly', 'ALL') => ('-d', 'AA', 'NEXP/poly', 'ALL')
('p', 'AA', 'NEXP/poly', 'ALL') => ('p', 'T', 'NEXP/poly', 'ALL')
('p', 'AA', 'NEXP/poly', 'ALL') => ('p', 'EA', 'NEXP/poly', 'ALL')
('p', 'EA', 'NEXP/poly', 'ALL') => ('-d', 'EA', 'NEXP/poly', 'ALL')
('p', 'EA', 'NEXP/poly', 'ALL') => ('p', 'E', 'NEXP/poly', 'ALL')
('p', 'E', 'NEXP/poly', 'ALL') => ('-d', 'E', 'NEXP/poly', 'ALL')
('p', 'T', 'NEXP/poly', 'ALL') => ('-d', 'T', 'NEXP/poly', 'ALL')
('p', 'R', 'NEXP/poly', 'ALL') => ('-d', 'R', 'NEXP/poly', 'ALL')
('d', 'A', 'BPP', 'Delta_2P') => ('-p', 'A', 'BPP', 'Delta_2P')
('p', 'A', 'P', 'ZPP') => ('-d', 'A', 'P', 'ZPP')
('p', 'A', 'P', 'ZPP') => ('p', 'R', 'P', 'ZPP')
('p', 'A', 'P', 'ZPP') => ('p', 'AA', 'P', 'ZPP')
('-d', 'A', 'P', 'RP') => ('-d', 'R', 'P', 'RP')
('-d', 'A', 'P', 'RP') => ('-d', 'AA', 'P', 'RP')
('-d', 'A', 'P', 'co.RP') => ('-d', 'R', 'P', 'co.RP')
('-d', 'A', 'P', 'co.RP') => ('-d', 'AA', 'P', 'co.RP')
('-d', 'A', 'P', 'ZPP') => ('-d', 'R', 'P', 'ZPP')
('-d', 'A', 'P', 'ZPP') => ('-d', 'AA', 'P', 'ZPP')
('-d', 'A', 'P', 'ALL') => ('-d', 'R', 'P', 'ALL')
('-d', 'A', 'P', 'ALL') => ('-d', 'AA', 'P', 'ALL')
('-d', 'AA', 'P', 'ALL') => ('-d', 'T', 'P', 'ALL')
('-d', 'AA', 'P', 'ALL') => ('-d', 'EA', 'P', 'ALL')
('-d', 'A', 'P', 'co.Sigma_2P') => ('-d', 'R', 'P', 'co.Sigma_2P')
('-d', 'A', 'P', 'co.Sigma_2P') => ('-d', 'AA', 'P', 'co.Sigma_2P')
('-d', 'A', 'P', 'Sigma_2P') => ('-d', 'R', 'P', 'Sigma_2P')
('-d', 'A', 'P', 'Sigma_2P') => ('-d', 'AA', 'P', 'Sigma_2P')
('-d', 'A', 'P', 'cocap.Sigma_2P') => ('-d', 'R', 'P', 'cocap.Sigma_2P')
('-d', 'A', 'P', 'cocap.Sigma_2P') => ('-d', 'AA', 'P', 'cocap.Sigma_2P')
('-d', 'A', 'P', 'Delta_3P') => ('-d', 'R', 'P', 'Delta_3P')
('-d', 'A', 'P', 'Delta_3P') => ('-d', 'AA', 'P', 'Delta_3P')
('-d', 'AA', 'P', 'Delta_3P') => ('-d', 'T', 'P', 'Delta_3P')
('-d', 'AA', 'P', 'Delta_3P') => ('-d', 'EA', 'P', 'Delta_3P')
('-d', 'AA', 'P', 'cocap.Sigma_2P') => ('-d', 'T', 'P', 'cocap.Sigma_2P')
('-d', 'AA', 'P', 'cocap.Sigma_2P') => ('-d', 'EA', 'P', 'cocap.Sigma_2P')
('-d', 'AA', 'P', 'co.Sigma_2P') => ('-d', 'T', 'P', 'co.Sigma_2P')
('-d', 'AA', 'P', 'co.Sigma_2P') => ('-d', 'EA', 'P', 'co.Sigma_2P')
('-d', 'AA', 'P', 'Sigma_2P') => ('-d', 'T', 'P', 'Sigma_2P')
('-d', 'AA', 'P', 'Sigma_2P') => ('-d', 'EA', 'P', 'Sigma_2P')
('-d', 'A', 'P', 'NP') => ('-d', 'R', 'P', 'NP')
('-d', 'A', 'P', 'NP') => ('-d', 'AA', 'P', 'NP')
('-d', 'A', 'P', 'co.NP') => ('-d', 'R', 'P', 'co.NP')
('-d', 'A', 'P', 'co.NP') => ('-d', 'AA', 'P', 'co.NP')
('-d', 'A', 'P', 'cocap.NP') => ('-d', 'R', 'P', 'cocap.NP')
('-d', 'A', 'P', 'cocap.NP') => ('-d', 'AA', 'P', 'cocap.NP')
('-d', 'A', 'P/poly', '(NP-cap-coNP)/poly') => ('-d', 'R', 'P/poly', '(NP-cap-coNP)/poly')
('-d', 'A', 'P/poly', '(NP-cap-coNP)/poly') => ('-d', 'AA', 'P/poly', '(NP-cap-coNP)/poly')
('-d', 'A', 'P', '(NP-cap-coNP)/poly') => ('-d', 'R', 'P', '(NP-cap-coNP)/poly')
('-d', 'A', 'P', '(NP-cap-coNP)/poly') => ('-d', 'AA', 'P', '(NP-cap-coNP)/poly')
('-d', 'A', 'P', 'NEXP/poly') => ('-d', 'R', 'P', 'NEXP/poly')
('-d', 'A', 'P', 'NEXP/poly') => ('-d', 'AA', 'P', 'NEXP/poly')
('-d', 'A', 'P/poly', 'NEXP/poly') => ('-d', 'R', 'P/poly', 'NEXP/poly')
('-d', 'A', 'P/poly', 'NEXP/poly') => ('-d', 'AA', 'P/poly', 'NEXP/poly')
('-d', 'A', 'P/poly', 'ALL') => ('-d', 'R', 'P/poly', 'ALL')
('-d', 'A', 'P/poly', 'ALL') => ('-d', 'AA', 'P/poly', 'ALL')
('-d', 'A', 'BPP', 'ALL') => ('-d', 'R', 'BPP', 'ALL')
('-d', 'A', 'BPP', 'ALL') => ('-d', 'AA', 'BPP', 'ALL')
('-d', 'AA', 'BPP', 'ALL') => ('-d', 'T', 'BPP', 'ALL')
('-d', 'AA', 'BPP', 'ALL') => ('-d', 'EA', 'BPP', 'ALL')
('-d', 'AA', 'P/poly', 'ALL') => ('-d', 'T', 'P/poly', 'ALL')
('-d', 'AA', 'P/poly', 'ALL') => ('-d', 'EA', 'P/poly', 'ALL')
('-d', 'A', 'BPP', 'NEXP/poly') => ('-d', 'R', 'BPP', 'NEXP/poly')
('-d', 'A', 'BPP', 'NEXP/poly') => ('-d', 'AA', 'BPP', 'NEXP/poly')
('-d', 'AA', 'BPP', 'NEXP/poly') => ('-d', 'T', 'BPP', 'NEXP/poly')
('-d', 'AA', 'BPP', 'NEXP/poly') => ('-d', 'EA', 'BPP', 'NEXP/poly')
('-d', 'AA', 'P/poly', 'NEXP/poly') => ('-d', 'T', 'P/poly', 'NEXP/poly')
('-d', 'AA', 'P/poly', 'NEXP/poly') => ('-d', 'EA', 'P/poly', 'NEXP/poly')
('-d', 'AA', 'P', 'NEXP/poly') => ('-d', 'T', 'P', 'NEXP/poly')
('-d', 'AA', 'P', 'NEXP/poly') => ('-d', 'EA', 'P', 'NEXP/poly')
('-d', 'A', 'P', 'co.NP/poly') => ('-d', 'R', 'P', 'co.NP/poly')
('-d', 'A', 'P', 'co.NP/poly') => ('-d', 'AA', 'P', 'co.NP/poly')
('-d', 'A', 'P', 'NP/poly') => ('-d', 'R', 'P', 'NP/poly')
('-d', 'A', 'P', 'NP/poly') => ('-d', 'AA', 'P', 'NP/poly')
('-d', 'A', 'P', 'cocap.NP/poly') => ('-d', 'R', 'P', 'cocap.NP/poly')
('-d', 'A', 'P', 'cocap.NP/poly') => ('-d', 'AA', 'P', 'cocap.NP/poly')
('-d', 'AA', 'P', 'cocap.NP/poly') => ('-d', 'T', 'P', 'cocap.NP/poly')
('-d', 'AA', 'P', 'cocap.NP/poly') => ('-d', 'EA', 'P', 'cocap.NP/poly')
('-d', 'AA', 'P', 'co.NP/poly') => ('-d', 'T', 'P', 'co.NP/poly')
('-d', 'AA', 'P', 'co.NP/poly') => ('-d', 'EA', 'P', 'co.NP/poly')
('-d', 'AA', 'P', 'NP/poly') => ('-d', 'T', 'P', 'NP/poly')
('-d', 'AA', 'P', 'NP/poly') => ('-d', 'EA', 'P', 'NP/poly')
('-d', 'AA', 'P/poly', 'NP/poly') => ('-d', 'T', 'P/poly', 'NP/poly')
('-d', 'AA', 'P/poly', 'NP/poly') => ('-d', 'EA', 'P/poly', 'NP/poly')
('-d', 'AA', 'P/poly', 'co.NP/poly') => ('-d', 'T', 'P/poly', 'co.NP/poly')
('-d', 'AA', 'P/poly', 'co.NP/poly') => ('-d', 'EA', 'P/poly', 'co.NP/poly')
('-d', 'AA', 'P/poly', 'cocap.NP/poly') => ('-d', 'T', 'P/poly', 'cocap.NP/poly')
('-d', 'AA', 'P/poly', 'cocap.NP/poly') => ('-d', 'EA', 'P/poly', 'cocap.NP/poly')
('-d', 'AA', 'BPP', 'cocap.NP/poly') => ('-d', 'T', 'BPP', 'cocap.NP/poly')
('-d', 'AA', 'BPP', 'co.NP/poly') => ('-d', 'T', 'BPP', 'co.NP/poly')
('-d', 'AA', 'BPP', 'NP/poly') => ('-d', 'T', 'BPP', 'NP/poly')
('-d', 'AA', 'P', '(NP-cap-coNP)/poly') => ('-d', 'T', 'P', '(NP-cap-coNP)/poly')
('-d', 'AA', 'P', '(NP-cap-coNP)/poly') => ('-d', 'EA', 'P', '(NP-cap-coNP)/poly')
('-d', 'AA', 'P/poly', '(NP-cap-coNP)/poly') => ('-d', 'T', 'P/poly', '(NP-cap-coNP)/poly')
('-d', 'AA', 'P/poly', '(NP-cap-coNP)/poly') => ('-d', 'EA', 'P/poly', '(NP-cap-coNP)/poly')
('-d', 'AA', 'BPP', '(NP-cap-coNP)/poly') => ('-d', 'T', 'BPP', '(NP-cap-coNP)/poly')
('-d', 'A', 'P', 'Delta_2P') => ('-d', 'R', 'P', 'Delta_2P')
('-d', 'A', 'P', 'Delta_2P') => ('-d', 'AA', 'P', 'Delta_2P')
('-d', 'A', 'P', 'S_2P') => ('-d', 'R', 'P', 'S_2P')
('-d', 'A', 'P', 'S_2P') => ('-d', 'AA', 'P', 'S_2P')
('-d', 'AA', 'P', 'S_2P') => ('-d', 'T', 'P', 'S_2P')
('-d', 'AA', 'P', 'S_2P') => ('-d', 'EA', 'P', 'S_2P')
('-d', 'AA', 'P', 'Delta_2P') => ('-d', 'T', 'P', 'Delta_2P')
('-d', 'AA', 'P', 'Delta_2P') => ('-d', 'EA', 'P', 'Delta_2P')
('-d', 'A', 'P', 'QMA') => ('-d', 'R', 'P', 'QMA')
('-d', 'A', 'P', 'QMA') => ('-d', 'AA', 'P', 'QMA')
('-d', 'A', 'P', 'co.QMA') => ('-d', 'R', 'P', 'co.QMA')
('-d', 'A', 'P', 'co.QMA') => ('-d', 'AA', 'P', 'co.QMA')
('-d', 'A', 'P', 'cocap.QMA') => ('-d', 'R', 'P', 'cocap.QMA')
('-d', 'A', 'P', 'cocap.QMA') => ('-d', 'AA', 'P', 'cocap.QMA')
('-d', 'AA', 'P', 'cocap.QMA') => ('-d', 'T', 'P', 'cocap.QMA')
('-d', 'AA', 'P', 'cocap.QMA') => ('-d', 'EA', 'P', 'cocap.QMA')
('-d', 'AA', 'P', 'QMA') => ('-d', 'T', 'P', 'QMA')
('-d', 'AA', 'P', 'QMA') => ('-d', 'EA', 'P', 'QMA')
('-d', 'AA', 'P', 'co.QMA') => ('-d', 'T', 'P', 'co.QMA')
('-d', 'AA', 'P', 'co.QMA') => ('-d', 'EA', 'P', 'co.QMA')
('-d', 'A', 'P', 'co.MA') => ('-d', 'R', 'P', 'co.MA')
('-d', 'A', 'P', 'co.MA') => ('-d', 'AA', 'P', 'co.MA')
('-d', 'A', 'P', 'MA') => ('-d', 'R', 'P', 'MA')
('-d', 'A', 'P', 'MA') => ('-d', 'AA', 'P', 'MA')
('-d', 'A', 'P', 'cocap.MA') => ('-d', 'R', 'P', 'cocap.MA')
('-d', 'A', 'P', 'cocap.MA') => ('-d', 'AA', 'P', 'cocap.MA')
('-d', 'A', 'P', 'QCMA') => ('-d', 'R', 'P', 'QCMA')
('-d', 'A', 'P', 'QCMA') => ('-d', 'AA', 'P', 'QCMA')
('-d', 'A', 'P', 'co.QCMA') => ('-d', 'R', 'P', 'co.QCMA')
('-d', 'A', 'P', 'co.QCMA') => ('-d', 'AA', 'P', 'co.QCMA')
('-d', 'A', 'P', 'cocap.QCMA') => ('-d', 'R', 'P', 'cocap.QCMA')
('-d', 'A', 'P', 'cocap.QCMA') => ('-d', 'AA', 'P', 'cocap.QCMA')
('-d', 'AA', 'P', 'cocap.QCMA') => ('-d', 'T', 'P', 'cocap.QCMA')
('-d', 'AA', 'P', 'cocap.QCMA') => ('-d', 'EA', 'P', 'cocap.QCMA')
('-d', 'AA', 'P', 'QCMA') => ('-d', 'T', 'P', 'QCMA')
('-d', 'AA', 'P', 'QCMA') => ('-d', 'EA', 'P', 'QCMA')
('-d', 'AA', 'P', 'co.QCMA') => ('-d', 'T', 'P', 'co.QCMA')
('-d', 'AA', 'P', 'co.QCMA') => ('-d', 'EA', 'P', 'co.QCMA')
('-d', 'A', 'P', 'SBP') => ('-d', 'R', 'P', 'SBP')
('-d', 'A', 'P', 'SBP') => ('-d', 'AA', 'P', 'SBP')
('-d', 'A', 'P', 'co.SBP') => ('-d', 'R', 'P', 'co.SBP')
('-d', 'A', 'P', 'co.SBP') => ('-d', 'AA', 'P', 'co.SBP')
('-d', 'A', 'P', 'cocap.SBP') => ('-d', 'R', 'P', 'cocap.SBP')
('-d', 'A', 'P', 'cocap.SBP') => ('-d', 'AA', 'P', 'cocap.SBP')
('-d', 'AA', 'P', 'cocap.SBP') => ('-d', 'T', 'P', 'cocap.SBP')
('-d', 'AA', 'P', 'cocap.SBP') => ('-d', 'EA', 'P', 'cocap.SBP')
('-d', 'AA', 'P', 'SBP') => ('-d', 'T', 'P', 'SBP')
('-d', 'AA', 'P', 'SBP') => ('-d', 'EA', 'P', 'SBP')
('-d', 'AA', 'P', 'co.SBP') => ('-d', 'T', 'P', 'co.SBP')
('-d', 'AA', 'P', 'co.SBP') => ('-d', 'EA', 'P', 'co.SBP')
('-d', 'AA', 'P', 'cocap.MA') => ('-d', 'T', 'P', 'cocap.MA')
('-d', 'AA', 'P', 'cocap.MA') => ('-d', 'EA', 'P', 'cocap.MA')
('-d', 'AA', 'P', 'co.MA') => ('-d', 'T', 'P', 'co.MA')
('-d', 'AA', 'P', 'co.MA') => ('-d', 'EA', 'P', 'co.MA')
('-d', 'AA', 'P', 'MA') => ('-d', 'T', 'P', 'MA')
('-d', 'AA', 'P', 'MA') => ('-d', 'EA', 'P', 'MA')
('-d', 'AA', 'P', 'cocap.NP') => ('-d', 'T', 'P', 'cocap.NP')
('-d', 'AA', 'P', 'cocap.NP') => ('-d', 'EA', 'P', 'cocap.NP')
('-d', 'AA', 'P', 'NP') => ('-d', 'T', 'P', 'NP')
('-d', 'AA', 'P', 'NP') => ('-d', 'EA', 'P', 'NP')
('-d', 'AA', 'P', 'co.NP') => ('-d', 'T', 'P', 'co.NP')
('-d', 'AA', 'P', 'co.NP') => ('-d', 'EA', 'P', 'co.NP')
('-d', 'AA', 'P', 'ZPP') => ('-d', 'T', 'P', 'ZPP')
('-d', 'AA', 'P', 'ZPP') => ('-d', 'EA', 'P', 'ZPP')
('-d', 'AA', 'P', 'RP') => ('-d', 'T', 'P', 'RP')
('-d', 'AA', 'P', 'RP') => ('-d', 'EA', 'P', 'RP')
('-d', 'AA', 'P', 'co.RP') => ('-d', 'T', 'P', 'co.RP')
('-d', 'AA', 'P', 'co.RP') => ('-d', 'EA', 'P', 'co.RP')
('p', 'A', 'P', 'RP') => ('p', 'R', 'P', 'RP')
('p', 'A', 'P', 'RP') => ('p', 'AA', 'P', 'RP')
('p', 'A', 'P', 'co.RP') => ('p', 'R', 'P', 'co.RP')
('p', 'A', 'P', 'co.RP') => ('p', 'AA', 'P', 'co.RP')
('p', 'A', 'P', 'ALL') => ('p', 'R', 'P', 'ALL')
('p', 'A', 'P', 'ALL') => ('p', 'AA', 'P', 'ALL')
('p', 'AA', 'P', 'ALL') => ('p', 'T', 'P', 'ALL')
('p', 'AA', 'P', 'ALL') => ('p', 'EA', 'P', 'ALL')
('p', 'A', 'P', 'co.Sigma_2P') => ('p', 'R', 'P', 'co.Sigma_2P')
('p', 'A', 'P', 'co.Sigma_2P') => ('p', 'AA', 'P', 'co.Sigma_2P')
('p', 'A', 'P', 'Sigma_2P') => ('p', 'R', 'P', 'Sigma_2P')
('p', 'A', 'P', 'Sigma_2P') => ('p', 'AA', 'P', 'Sigma_2P')
('p', 'A', 'P', 'cocap.Sigma_2P') => ('p', 'R', 'P', 'cocap.Sigma_2P')
('p', 'A', 'P', 'cocap.Sigma_2P') => ('p', 'AA', 'P', 'cocap.Sigma_2P')
('p', 'A', 'P', 'Delta_3P') => ('p', 'R', 'P', 'Delta_3P')
('p', 'A', 'P', 'Delta_3P') => ('p', 'AA', 'P', 'Delta_3P')
('p', 'AA', 'P', 'Delta_3P') => ('p', 'T', 'P', 'Delta_3P')
('p', 'AA', 'P', 'Delta_3P') => ('p', 'EA', 'P', 'Delta_3P')
('p', 'AA', 'P', 'cocap.Sigma_2P') => ('p', 'T', 'P', 'cocap.Sigma_2P')
('p', 'AA', 'P', 'cocap.Sigma_2P') => ('p', 'EA', 'P', 'cocap.Sigma_2P')
('p', 'AA', 'P', 'co.Sigma_2P') => ('p', 'T', 'P', 'co.Sigma_2P')
('p', 'AA', 'P', 'co.Sigma_2P') => ('p', 'EA', 'P', 'co.Sigma_2P')
('p', 'AA', 'P', 'Sigma_2P') => ('p', 'T', 'P', 'Sigma_2P')
('p', 'AA', 'P', 'Sigma_2P') => ('p', 'EA', 'P', 'Sigma_2P')
('p', 'A', 'P', 'Delta_2P') => ('p', 'R', 'P', 'Delta_2P')
('p', 'A', 'P', 'Delta_2P') => ('p', 'AA', 'P', 'Delta_2P')
('p', 'A', 'P', 'S_2P') => ('p', 'R', 'P', 'S_2P')
('p', 'A', 'P', 'S_2P') => ('p', 'AA', 'P', 'S_2P')
('p', 'AA', 'P', 'S_2P') => ('p', 'T', 'P', 'S_2P')
('p', 'AA', 'P', 'S_2P') => ('p', 'EA', 'P', 'S_2P')
('p', 'AA', 'P', 'Delta_2P') => ('p', 'T', 'P', 'Delta_2P')
('p', 'AA', 'P', 'Delta_2P') => ('p', 'EA', 'P', 'Delta_2P')
('p', 'A', 'P', 'co.MA') => ('p', 'R', 'P', 'co.MA')
('p', 'A', 'P', 'co.MA') => ('p', 'AA', 'P', 'co.MA')
('p', 'A', 'P', 'MA') => ('p', 'R', 'P', 'MA')
('p', 'A', 'P', 'MA') => ('p', 'AA', 'P', 'MA')
('p', 'A', 'P', 'cocap.MA') => ('p', 'R', 'P', 'cocap.MA')
('p', 'A', 'P', 'cocap.MA') => ('p', 'AA', 'P', 'cocap.MA')
('p', 'A', 'P', 'QMA') => ('p', 'R', 'P', 'QMA')
('p', 'A', 'P', 'QMA') => ('p', 'AA', 'P', 'QMA')
('p', 'A', 'P', 'co.QMA') => ('p', 'R', 'P', 'co.QMA')
('p', 'A', 'P', 'co.QMA') => ('p', 'AA', 'P', 'co.QMA')
('p', 'A', 'P', 'cocap.QMA') => ('p', 'R', 'P', 'cocap.QMA')
('p', 'A', 'P', 'cocap.QMA') => ('p', 'AA', 'P', 'cocap.QMA')
('p', 'AA', 'P', 'cocap.QMA') => ('p', 'T', 'P', 'cocap.QMA')
('p', 'AA', 'P', 'cocap.QMA') => ('p', 'EA', 'P', 'cocap.QMA')
('p', 'AA', 'P', 'QMA') => ('p', 'T', 'P', 'QMA')
('p', 'AA', 'P', 'QMA') => ('p', 'EA', 'P', 'QMA')
('p', 'AA', 'P', 'co.QMA') => ('p', 'T', 'P', 'co.QMA')
('p', 'AA', 'P', 'co.QMA') => ('p', 'EA', 'P', 'co.QMA')
('p', 'A', 'P', 'QCMA') => ('p', 'R', 'P', 'QCMA')
('p', 'A', 'P', 'QCMA') => ('p', 'AA', 'P', 'QCMA')
('p', 'A', 'P', 'co.QCMA') => ('p', 'R', 'P', 'co.QCMA')
('p', 'A', 'P', 'co.QCMA') => ('p', 'AA', 'P', 'co.QCMA')
('p', 'A', 'P', 'cocap.QCMA') => ('p', 'R', 'P', 'cocap.QCMA')
('p', 'A', 'P', 'cocap.QCMA') => ('p', 'AA', 'P', 'cocap.QCMA')
('p', 'AA', 'P', 'cocap.QCMA') => ('p', 'T', 'P', 'cocap.QCMA')
('p', 'AA', 'P', 'cocap.QCMA') => ('p', 'EA', 'P', 'cocap.QCMA')
('p', 'AA', 'P', 'QCMA') => ('p', 'T', 'P', 'QCMA')
('p', 'AA', 'P', 'QCMA') => ('p', 'EA', 'P', 'QCMA')
('p', 'AA', 'P', 'co.QCMA') => ('p', 'T', 'P', 'co.QCMA')
('p', 'AA', 'P', 'co.QCMA') => ('p', 'EA', 'P', 'co.QCMA')
('p', 'A', 'P', 'SBP') => ('p', 'R', 'P', 'SBP')
('p', 'A', 'P', 'SBP') => ('p', 'AA', 'P', 'SBP')
('p', 'A', 'P', 'co.SBP') => ('p', 'R', 'P', 'co.SBP')
('p', 'A', 'P', 'co.SBP') => ('p', 'AA', 'P', 'co.SBP')
('p', 'A', 'P', 'cocap.SBP') => ('p', 'R', 'P', 'cocap.SBP')
('p', 'A', 'P', 'cocap.SBP') => ('p', 'AA', 'P', 'cocap.SBP')
('p', 'AA', 'P', 'cocap.SBP') => ('p', 'T', 'P', 'cocap.SBP')
('p', 'AA', 'P', 'cocap.SBP') => ('p', 'EA', 'P', 'cocap.SBP')
('p', 'AA', 'P', 'SBP') => ('p', 'T', 'P', 'SBP')
('p', 'AA', 'P', 'SBP') => ('p', 'EA', 'P', 'SBP')
('p', 'AA', 'P', 'co.SBP') => ('p', 'T', 'P', 'co.SBP')
('p', 'AA', 'P', 'co.SBP') => ('p', 'EA', 'P', 'co.SBP')
('p', 'AA', 'P', 'cocap.MA') => ('p', 'T', 'P', 'cocap.MA')
('p', 'AA', 'P', 'cocap.MA') => ('p', 'EA', 'P', 'cocap.MA')
('p', 'AA', 'P', 'co.MA') => ('p', 'T', 'P', 'co.MA')
('p', 'AA', 'P', 'co.MA') => ('p', 'EA', 'P', 'co.MA')
('p', 'AA', 'P', 'MA') => ('p', 'T', 'P', 'MA')
('p', 'AA', 'P', 'MA') => ('p', 'EA', 'P', 'MA')
('p', 'A', 'P', 'co.NP') => ('p', 'R', 'P', 'co.NP')
('p', 'A', 'P', 'co.NP') => ('p', 'AA', 'P', 'co.NP')
('p', 'A', 'P', 'NP') => ('p', 'R', 'P', 'NP')
('p', 'A', 'P', 'NP') => ('p', 'AA', 'P', 'NP')
('p', 'A', 'P', 'cocap.NP') => ('p', 'R', 'P', 'cocap.NP')
('p', 'A', 'P', 'cocap.NP') => ('p', 'AA', 'P', 'cocap.NP')
('p', 'A', 'P/poly', '(NP-cap-coNP)/poly') => ('p', 'R', 'P/poly', '(NP-cap-coNP)/poly')
('p', 'A', 'P/poly', '(NP-cap-coNP)/poly') => ('p', 'AA', 'P/poly', '(NP-cap-coNP)/poly')
('p', 'A', 'P', '(NP-cap-coNP)/poly') => ('p', 'R', 'P', '(NP-cap-coNP)/poly')
('p', 'A', 'P', '(NP-cap-coNP)/poly') => ('p', 'AA', 'P', '(NP-cap-coNP)/poly')
('p', 'A', 'P', 'NEXP/poly') => ('p', 'R', 'P', 'NEXP/poly')
('p', 'A', 'P', 'NEXP/poly') => ('p', 'AA', 'P', 'NEXP/poly')
('p', 'A', 'P/poly', 'NEXP/poly') => ('p', 'R', 'P/poly', 'NEXP/poly')
('p', 'A', 'P/poly', 'NEXP/poly') => ('p', 'AA', 'P/poly', 'NEXP/poly')
('p', 'A', 'P/poly', 'ALL') => ('p', 'R', 'P/poly', 'ALL')
('p', 'A', 'P/poly', 'ALL') => ('p', 'AA', 'P/poly', 'ALL')
('p', 'A', 'BPP', 'ALL') => ('p', 'R', 'BPP', 'ALL')
('p', 'A', 'BPP', 'ALL') => ('p', 'AA', 'BPP', 'ALL')
('p', 'AA', 'BPP', 'ALL') => ('p', 'T', 'BPP', 'ALL')
('p', 'AA', 'BPP', 'ALL') => ('p', 'EA', 'BPP', 'ALL')
('p', 'AA', 'P/poly', 'ALL') => ('p', 'T', 'P/poly', 'ALL')
('p', 'AA', 'P/poly', 'ALL') => ('p', 'EA', 'P/poly', 'ALL')
('p', 'A', 'BPP', 'NEXP/poly') => ('p', 'R', 'BPP', 'NEXP/poly')
('p', 'A', 'BPP', 'NEXP/poly') => ('p', 'AA', 'BPP', 'NEXP/poly')
('p', 'AA', 'BPP', 'NEXP/poly') => ('p', 'T', 'BPP', 'NEXP/poly')
('p', 'AA', 'BPP', 'NEXP/poly') => ('p', 'EA', 'BPP', 'NEXP/poly')
('p', 'AA', 'P/poly', 'NEXP/poly') => ('p', 'T', 'P/poly', 'NEXP/poly')
('p', 'AA', 'P/poly', 'NEXP/poly') => ('p', 'EA', 'P/poly', 'NEXP/poly')
('p', 'AA', 'P', 'NEXP/poly') => ('p', 'T', 'P', 'NEXP/poly')
('p', 'AA', 'P', 'NEXP/poly') => ('p', 'EA', 'P', 'NEXP/poly')
('p', 'A', 'P', 'co.NP/poly') => ('p', 'R', 'P', 'co.NP/poly')
('p', 'A', 'P', 'co.NP/poly') => ('p', 'AA', 'P', 'co.NP/poly')
('p', 'A', 'P', 'NP/poly') => ('p', 'R', 'P', 'NP/poly')
('p', 'A', 'P', 'NP/poly') => ('p', 'AA', 'P', 'NP/poly')
('p', 'A', 'P', 'cocap.NP/poly') => ('p', 'R', 'P', 'cocap.NP/poly')
('p', 'A', 'P', 'cocap.NP/poly') => ('p', 'AA', 'P', 'cocap.NP/poly')
('p', 'AA', 'P', 'cocap.NP/poly') => ('p', 'T', 'P', 'cocap.NP/poly')
('p', 'AA', 'P', 'cocap.NP/poly') => ('p', 'EA', 'P', 'cocap.NP/poly')
('p', 'AA', 'P', 'co.NP/poly') => ('p', 'T', 'P', 'co.NP/poly')
('p', 'AA', 'P', 'co.NP/poly') => ('p', 'EA', 'P', 'co.NP/poly')
('p', 'AA', 'P', 'NP/poly') => ('p', 'T', 'P', 'NP/poly')
('p', 'AA', 'P', 'NP/poly') => ('p', 'EA', 'P', 'NP/poly')
('p', 'AA', 'P/poly', 'NP/poly') => ('p', 'T', 'P/poly', 'NP/poly')
('p', 'AA', 'P/poly', 'NP/poly') => ('p', 'EA', 'P/poly', 'NP/poly')
('p', 'AA', 'P/poly', 'co.NP/poly') => ('p', 'T', 'P/poly', 'co.NP/poly')
('p', 'AA', 'P/poly', 'co.NP/poly') => ('p', 'EA', 'P/poly', 'co.NP/poly')
('p', 'AA', 'P/poly', 'cocap.NP/poly') => ('p', 'T', 'P/poly', 'cocap.NP/poly')
('p', 'AA', 'P/poly', 'cocap.NP/poly') => ('p', 'EA', 'P/poly', 'cocap.NP/poly')
('p', 'AA', 'BPP', 'cocap.NP/poly') => ('p', 'T', 'BPP', 'cocap.NP/poly')
('p', 'AA', 'BPP', 'co.NP/poly') => ('p', 'T', 'BPP', 'co.NP/poly')
('p', 'AA', 'BPP', 'NP/poly') => ('p', 'T', 'BPP', 'NP/poly')
('p', 'AA', 'P', '(NP-cap-coNP)/poly') => ('p', 'T', 'P', '(NP-cap-coNP)/poly')
('p', 'AA', 'P', '(NP-cap-coNP)/poly') => ('p', 'EA', 'P', '(NP-cap-coNP)/poly')
('p', 'AA', 'P/poly', '(NP-cap-coNP)/poly') => ('p', 'T', 'P/poly', '(NP-cap-coNP)/poly')
('p', 'AA', 'P/poly', '(NP-cap-coNP)/poly') => ('p', 'EA', 'P/poly', '(NP-cap-coNP)/poly')
('p', 'AA', 'BPP', '(NP-cap-coNP)/poly') => ('p', 'T', 'BPP', '(NP-cap-coNP)/poly')
('p', 'AA', 'P', 'cocap.NP') => ('p', 'T', 'P', 'cocap.NP')
('p', 'AA', 'P', 'cocap.NP') => ('p', 'EA', 'P', 'cocap.NP')
('p', 'AA', 'P', 'NP') => ('p', 'T', 'P', 'NP')
('p', 'AA', 'P', 'NP') => ('p', 'EA', 'P', 'NP')
('p', 'AA', 'P', 'co.NP') => ('p', 'T', 'P', 'co.NP')
('p', 'AA', 'P', 'co.NP') => ('p', 'EA', 'P', 'co.NP')
('p', 'AA', 'P', 'co.RP') => ('p', 'T', 'P', 'co.RP')
('p', 'AA', 'P', 'co.RP') => ('p', 'EA', 'P', 'co.RP')
('p', 'AA', 'P', 'RP') => ('p', 'T', 'P', 'RP')
('p', 'AA', 'P', 'RP') => ('p', 'EA', 'P', 'RP')
('p', 'AA', 'P', 'ZPP') => ('p', 'T', 'P', 'ZPP')
('p', 'AA', 'P', 'ZPP') => ('p', 'EA', 'P', 'ZPP')
('p', 'A', 'QMIP_fe', 'RE') => ('-d', 'A', 'QMIP_fe', 'RE')
('p', 'A', 'QMIP_fe', 'RE') => ('p', 'R', 'QMIP_fe', 'RE')
('p', 'A', 'QMIP_fe', 'RE') => ('p', 'AA', 'QMIP_fe', 'RE')
('p', 'A', 'co.QMIP_fe', 'co.RE') => ('-d', 'A', 'co.QMIP_fe', 'co.RE')
('p', 'A', 'co.QMIP_fe', 'co.RE') => ('p', 'R', 'co.QMIP_fe', 'co.RE')
('p', 'A', 'co.QMIP_fe', 'co.RE') => ('p', 'AA', 'co.QMIP_fe', 'co.RE')
('p', 'A', 'cocap.QMIP_fe', 'R') => ('-d', 'A', 'cocap.QMIP_fe', 'R')
('p', 'A', 'cocap.QMIP_fe', 'R') => ('p', 'R', 'cocap.QMIP_fe', 'R')
('p', 'A', 'cocap.QMIP_fe', 'R') => ('p', 'AA', 'cocap.QMIP_fe', 'R')
('p', 'E', 'cocap.MIP*_fe', 'R') => ('-d', 'E', 'cocap.MIP*_fe', 'R')
('p', 'A', 'cocap.MIP*_fe', 'R') => ('-d', 'A', 'cocap.MIP*_fe', 'R')
('p', 'A', 'cocap.MIP*_fe', 'R') => ('p', 'R', 'cocap.MIP*_fe', 'R')
('p', 'A', 'cocap.MIP*_fe', 'R') => ('p', 'AA', 'cocap.MIP*_fe', 'R')
('-d', 'A', 'cocap.MIP*_fe', 'RE') => ('-d', 'R', 'cocap.MIP*_fe', 'RE')
('-d', 'A', 'cocap.MIP*_fe', 'RE') => ('-d', 'AA', 'cocap.MIP*_fe', 'RE')
('-d', 'A', 'cocap.MIP*_fe', 'co.RE') => ('-d', 'R', 'cocap.MIP*_fe', 'co.RE')
('-d', 'A', 'cocap.MIP*_fe', 'co.RE') => ('-d', 'AA', 'cocap.MIP*_fe', 'co.RE')
('-d', 'A', 'cocap.MIP*_fe', 'R') => ('-d', 'R', 'cocap.MIP*_fe', 'R')
('-d', 'A', 'cocap.MIP*_fe', 'R') => ('-d', 'AA', 'cocap.MIP*_fe', 'R')
('-d', 'AA', 'cocap.MIP*_fe', 'R') => ('-d', 'T', 'cocap.MIP*_fe', 'R')
('-d', 'AA', 'cocap.MIP*_fe', 'R') => ('-d', 'EA', 'cocap.MIP*_fe', 'R')
('-d', 'AA', 'cocap.MIP*_fe', 'RE') => ('-d', 'T', 'cocap.MIP*_fe', 'RE')
('-d', 'AA', 'cocap.MIP*_fe', 'RE') => ('-d', 'EA', 'cocap.MIP*_fe', 'RE')
('-d', 'AA', 'cocap.MIP*_fe', 'co.RE') => ('-d', 'T', 'cocap.MIP*_fe', 'co.RE')
('-d', 'AA', 'cocap.MIP*_fe', 'co.RE') => ('-d', 'EA', 'cocap.MIP*_fe', 'co.RE')
('p', 'A', 'cocap.MIP*_fe', 'RE') => ('p', 'R', 'cocap.MIP*_fe', 'RE')
('p', 'A', 'cocap.MIP*_fe', 'RE') => ('p', 'AA', 'cocap.MIP*_fe', 'RE')
('p', 'A', 'cocap.MIP*_fe', 'co.RE') => ('p', 'R', 'cocap.MIP*_fe', 'co.RE')
('p', 'A', 'cocap.MIP*_fe', 'co.RE') => ('p', 'AA', 'cocap.MIP*_fe', 'co.RE')
('p', 'AA', 'cocap.MIP*_fe', 'co.RE') => ('p', 'T', 'cocap.MIP*_fe', 'co.RE')
('p', 'AA', 'cocap.MIP*_fe', 'co.RE') => ('p', 'EA', 'cocap.MIP*_fe', 'co.RE')
('p', 'AA', 'cocap.MIP*_fe', 'RE') => ('p', 'T', 'cocap.MIP*_fe', 'RE')
('p', 'AA', 'cocap.MIP*_fe', 'RE') => ('p', 'EA', 'cocap.MIP*_fe', 'RE')
('p', 'AA', 'cocap.MIP*_fe', 'R') => ('p', 'T', 'cocap.MIP*_fe', 'R')
('p', 'AA', 'cocap.MIP*_fe', 'R') => ('p', 'EA', 'cocap.MIP*_fe', 'R')
('-d', 'A', 'cocap.QMIP_fe', 'RE') => ('-d', 'R', 'cocap.QMIP_fe', 'RE')
('-d', 'A', 'cocap.QMIP_fe', 'RE') => ('-d', 'AA', 'cocap.QMIP_fe', 'RE')
('-d', 'A', 'cocap.QMIP_fe', 'co.RE') => ('-d', 'R', 'cocap.QMIP_fe', 'co.RE')
('-d', 'A', 'cocap.QMIP_fe', 'co.RE') => ('-d', 'AA', 'cocap.QMIP_fe', 'co.RE')
('-d', 'A', 'cocap.QMIP_fe', 'R') => ('-d', 'R', 'cocap.QMIP_fe', 'R')
('-d', 'A', 'cocap.QMIP_fe', 'R') => ('-d', 'AA', 'cocap.QMIP_fe', 'R')
('-d', 'AA', 'cocap.QMIP_fe', 'R') => ('-d', 'T', 'cocap.QMIP_fe', 'R')
('-d', 'AA', 'cocap.QMIP_fe', 'R') => ('-d', 'EA', 'cocap.QMIP_fe', 'R')
('-d', 'AA', 'cocap.QMIP_fe', 'RE') => ('-d', 'T', 'cocap.QMIP_fe', 'RE')
('-d', 'AA', 'cocap.QMIP_fe', 'RE') => ('-d', 'EA', 'cocap.QMIP_fe', 'RE')
('-d', 'AA', 'cocap.QMIP_fe', 'co.RE') => ('-d', 'T', 'cocap.QMIP_fe', 'co.RE')
('-d', 'AA', 'cocap.QMIP_fe', 'co.RE') => ('-d', 'EA', 'cocap.QMIP_fe', 'co.RE')
('p', 'A', 'cocap.QMIP_fe', 'RE') => ('p', 'R', 'cocap.QMIP_fe', 'RE')
('p', 'A', 'cocap.QMIP_fe', 'RE') => ('p', 'AA', 'cocap.QMIP_fe', 'RE')
('p', 'A', 'cocap.QMIP_fe', 'co.RE') => ('p', 'R', 'cocap.QMIP_fe', 'co.RE')
('p', 'A', 'cocap.QMIP_fe', 'co.RE') => ('p', 'AA', 'cocap.QMIP_fe', 'co.RE')
('p', 'AA', 'cocap.QMIP_fe', 'co.RE') => ('p', 'T', 'cocap.QMIP_fe', 'co.RE')
('p', 'AA', 'cocap.QMIP_fe', 'co.RE') => ('p', 'EA', 'cocap.QMIP_fe', 'co.RE')
('p', 'AA', 'cocap.QMIP_fe', 'RE') => ('p', 'T', 'cocap.QMIP_fe', 'RE')
('p', 'AA', 'cocap.QMIP_fe', 'RE') => ('p', 'EA', 'cocap.QMIP_fe', 'RE')
('p', 'AA', 'cocap.QMIP_fe', 'R') => ('p', 'T', 'cocap.QMIP_fe', 'R')
('p', 'AA', 'cocap.QMIP_fe', 'R') => ('p', 'EA', 'cocap.QMIP_fe', 'R')
('p', 'E', 'co.MIP*_fe', 'co.RE') => ('-d', 'E', 'co.MIP*_fe', 'co.RE')
('p', 'E', 'MIP*_fe', 'RE') => ('-d', 'E', 'MIP*_fe', 'RE')
('p', 'A', 'co.MIP*_fe', 'co.RE') => ('-d', 'A', 'co.MIP*_fe', 'co.RE')
('p', 'A', 'co.MIP*_fe', 'co.RE') => ('p', 'R', 'co.MIP*_fe', 'co.RE')
('p', 'A', 'co.MIP*_fe', 'co.RE') => ('p', 'AA', 'co.MIP*_fe', 'co.RE')
('p', 'A', 'MIP*_fe', 'RE') => ('-d', 'A', 'MIP*_fe', 'RE')
('p', 'A', 'MIP*_fe', 'RE') => ('p', 'R', 'MIP*_fe', 'RE')
('p', 'A', 'MIP*_fe', 'RE') => ('p', 'AA', 'MIP*_fe', 'RE')
('p', 'AA', 'MIP*_fe', 'RE') => ('-d', 'AA', 'MIP*_fe', 'RE')
('p', 'AA', 'MIP*_fe', 'RE') => ('p', 'T', 'MIP*_fe', 'RE')
('p', 'AA', 'MIP*_fe', 'RE') => ('p', 'EA', 'MIP*_fe', 'RE')
('p', 'AA', 'co.MIP*_fe', 'co.RE') => ('-d', 'AA', 'co.MIP*_fe', 'co.RE')
('p', 'AA', 'co.MIP*_fe', 'co.RE') => ('p', 'T', 'co.MIP*_fe', 'co.RE')
('p', 'AA', 'co.MIP*_fe', 'co.RE') => ('p', 'EA', 'co.MIP*_fe', 'co.RE')
('p', 'EA', 'co.MIP*_fe', 'co.RE') => ('-d', 'EA', 'co.MIP*_fe', 'co.RE')
('p', 'EA', 'MIP*_fe', 'RE') => ('-d', 'EA', 'MIP*_fe', 'RE')
('p', 'T', 'co.MIP*_fe', 'co.RE') => ('-d', 'T', 'co.MIP*_fe', 'co.RE')
('p', 'T', 'MIP*_fe', 'RE') => ('-d', 'T', 'MIP*_fe', 'RE')
('p', 'R', 'MIP*_fe', 'RE') => ('-d', 'R', 'MIP*_fe', 'RE')
('p', 'R', 'co.MIP*_fe', 'co.RE') => ('-d', 'R', 'co.MIP*_fe', 'co.RE')
('p', 'AA', 'co.QMIP_fe', 'co.RE') => ('-d', 'AA', 'co.QMIP_fe', 'co.RE')
('p', 'AA', 'co.QMIP_fe', 'co.RE') => ('p', 'T', 'co.QMIP_fe', 'co.RE')
('p', 'AA', 'co.QMIP_fe', 'co.RE') => ('p', 'EA', 'co.QMIP_fe', 'co.RE')
('p', 'AA', 'QMIP_fe', 'RE') => ('-d', 'AA', 'QMIP_fe', 'RE')
('p', 'AA', 'QMIP_fe', 'RE') => ('p', 'T', 'QMIP_fe', 'RE')
('p', 'AA', 'QMIP_fe', 'RE') => ('p', 'EA', 'QMIP_fe', 'RE')
('p', 'EA', 'QMIP_fe', 'RE') => ('-d', 'EA', 'QMIP_fe', 'RE')
('p', 'EA', 'QMIP_fe', 'RE') => ('p', 'E', 'QMIP_fe', 'RE')
('p', 'EA', 'co.QMIP_fe', 'co.RE') => ('-d', 'EA', 'co.QMIP_fe', 'co.RE')
('p', 'EA', 'co.QMIP_fe', 'co.RE') => ('p', 'E', 'co.QMIP_fe', 'co.RE')
('p', 'E', 'co.QMIP_fe', 'co.RE') => ('-d', 'E', 'co.QMIP_fe', 'co.RE')
('p', 'E', 'QMIP_fe', 'RE') => ('-d', 'E', 'QMIP_fe', 'RE')
('p', 'T', 'QMIP_fe', 'RE') => ('-d', 'T', 'QMIP_fe', 'RE')
('p', 'T', 'co.QMIP_fe', 'co.RE') => ('-d', 'T', 'co.QMIP_fe', 'co.RE')
('p', 'R', 'co.QMIP_fe', 'co.RE') => ('-d', 'R', 'co.QMIP_fe', 'co.RE')
('p', 'R', 'QMIP_fe', 'RE') => ('-d', 'R', 'QMIP_fe', 'RE')
('d', 'R', 'Sigma_2P', 'NP') => ('-p', 'R', 'Sigma_2P', 'NP')
('d', 'R', 'Sigma_2P', 'NP') => ('d', 'A', 'Sigma_2P', 'NP')
('d', 'R', 'co.Sigma_2P', 'co.NP') => ('-p', 'R', 'co.Sigma_2P', 'co.NP')
('d', 'R', 'co.Sigma_2P', 'co.NP') => ('d', 'A', 'co.Sigma_2P', 'co.NP')
('-p', 'R', 'co.Sigma_2P', 'co.RP') => ('-p', 'A', 'co.Sigma_2P', 'co.RP')
('-p', 'R', 'Sigma_2P', 'RP') => ('-p', 'A', 'Sigma_2P', 'RP')
('-p', 'R', 'Sigma_2P', 'ZPP') => ('-p', 'A', 'Sigma_2P', 'ZPP')
('-p', 'R', 'co.Sigma_2P', 'ZPP') => ('-p', 'A', 'co.Sigma_2P', 'ZPP')
('-p', 'R', 'Delta_3P', 'ZPP') => ('-p', 'A', 'Delta_3P', 'ZPP')
('-p', 'R', 'Delta_3P', 'co.RP') => ('-p', 'A', 'Delta_3P', 'co.RP')
('-p', 'R', 'Delta_3P', 'RP') => ('-p', 'A', 'Delta_3P', 'RP')
('d', 'R', 'co.Sigma_2P', 'co.RP') => ('d', 'A', 'co.Sigma_2P', 'co.RP')
('d', 'R', 'Sigma_2P', 'RP') => ('d', 'A', 'Sigma_2P', 'RP')
('d', 'R', 'Sigma_2P', 'ZPP') => ('d', 'A', 'Sigma_2P', 'ZPP')
('d', 'R', 'co.Sigma_2P', 'ZPP') => ('d', 'A', 'co.Sigma_2P', 'ZPP')
('d', 'R', 'Delta_3P', 'ZPP') => ('d', 'A', 'Delta_3P', 'ZPP')
('d', 'R', 'Delta_3P', 'co.RP') => ('d', 'A', 'Delta_3P', 'co.RP')
('d', 'R', 'Delta_3P', 'RP') => ('d', 'A', 'Delta_3P', 'RP')
('-p', 'R', 'co.Sigma_2P', 'cocap.NP') => ('-p', 'A', 'co.Sigma_2P', 'cocap.NP')
('-p', 'R', 'Sigma_2P', 'cocap.NP') => ('-p', 'A', 'Sigma_2P', 'cocap.NP')
('-p', 'R', 'Delta_3P', 'cocap.NP') => ('-p', 'A', 'Delta_3P', 'cocap.NP')
('-p', 'R', 'Delta_3P', 'co.NP') => ('-p', 'A', 'Delta_3P', 'co.NP')
('-p', 'R', 'Delta_3P', 'NP') => ('-p', 'A', 'Delta_3P', 'NP')
('d', 'R', 'co.Sigma_2P', 'cocap.NP') => ('d', 'A', 'co.Sigma_2P', 'cocap.NP')
('d', 'R', 'Sigma_2P', 'cocap.NP') => ('d', 'A', 'Sigma_2P', 'cocap.NP')
('d', 'R', 'Delta_3P', 'cocap.NP') => ('d', 'A', 'Delta_3P', 'cocap.NP')
('d', 'R', 'Delta_3P', 'co.NP') => ('d', 'A', 'Delta_3P', 'co.NP')
('d', 'R', 'Delta_3P', 'NP') => ('d', 'A', 'Delta_3P', 'NP')
('d', 'A', 'co.Sigma_2P', 'co.NP') => ('-p', 'A', 'co.Sigma_2P', 'co.NP')
('d', 'A', 'Sigma_2P', 'NP') => ('-p', 'A', 'Sigma_2P', 'NP')
('p', 'A', 'Delta_3P', 'PH') => ('-d', 'A', 'Delta_3P', 'PH')
('p', 'A', 'Delta_3P', 'PH') => ('p', 'R', 'Delta_3P', 'PH')
('p', 'A', 'Delta_3P', 'PH') => ('p', 'AA', 'Delta_3P', 'PH')
('p', 'A', 'RP', 'PH') => ('-d', 'A', 'RP', 'PH')
('p', 'A', 'RP', 'PH') => ('p', 'R', 'RP', 'PH')
('p', 'A', 'RP', 'PH') => ('p', 'AA', 'RP', 'PH')
('p', 'A', 'co.RP', 'PH') => ('-d', 'A', 'co.RP', 'PH')
('p', 'A', 'co.RP', 'PH') => ('p', 'R', 'co.RP', 'PH')
('p', 'A', 'co.RP', 'PH') => ('p', 'AA', 'co.RP', 'PH')
('p', 'A', 'ZPP', 'PH') => ('-d', 'A', 'ZPP', 'PH')
('p', 'A', 'ZPP', 'PH') => ('p', 'R', 'ZPP', 'PH')
('p', 'A', 'ZPP', 'PH') => ('p', 'AA', 'ZPP', 'PH')
('p', 'A', 'P', 'PH') => ('-d', 'A', 'P', 'PH')
('p', 'A', 'P', 'PH') => ('p', 'R', 'P', 'PH')
('p', 'A', 'P', 'PH') => ('p', 'AA', 'P', 'PH')
('p', 'E', 'EXP_plo', 'PH') => ('-d', 'E', 'EXP_plo', 'PH')
('-d', 'A', 'P', 'MP') => ('-d', 'R', 'P', 'MP')
('-d', 'A', 'P', 'MP') => ('-d', 'AA', 'P', 'MP')
('-d', 'A', 'P', 'co.MP') => ('-d', 'R', 'P', 'co.MP')
('-d', 'A', 'P', 'co.MP') => ('-d', 'AA', 'P', 'co.MP')
('-d', 'A', 'P', 'cocap.MP') => ('-d', 'R', 'P', 'cocap.MP')
('-d', 'A', 'P', 'cocap.MP') => ('-d', 'AA', 'P', 'cocap.MP')
('-d', 'AA', 'P', 'cocap.MP') => ('-d', 'T', 'P', 'cocap.MP')
('-d', 'AA', 'P', 'cocap.MP') => ('-d', 'EA', 'P', 'cocap.MP')
('-d', 'AA', 'P', 'MP') => ('-d', 'T', 'P', 'MP')
('-d', 'AA', 'P', 'MP') => ('-d', 'EA', 'P', 'MP')
('-d', 'AA', 'P', 'co.MP') => ('-d', 'T', 'P', 'co.MP')
('-d', 'AA', 'P', 'co.MP') => ('-d', 'EA', 'P', 'co.MP')
('p', 'A', 'P', 'MP') => ('p', 'R', 'P', 'MP')
('p', 'A', 'P', 'MP') => ('p', 'AA', 'P', 'MP')
('p', 'A', 'P', 'co.MP') => ('p', 'R', 'P', 'co.MP')
('p', 'A', 'P', 'co.MP') => ('p', 'AA', 'P', 'co.MP')
('p', 'A', 'P', 'cocap.MP') => ('p', 'R', 'P', 'cocap.MP')
('p', 'A', 'P', 'cocap.MP') => ('p', 'AA', 'P', 'cocap.MP')
('p', 'AA', 'P', 'cocap.MP') => ('p', 'T', 'P', 'cocap.MP')
('p', 'AA', 'P', 'cocap.MP') => ('p', 'EA', 'P', 'cocap.MP')
('p', 'AA', 'P', 'MP') => ('p', 'T', 'P', 'MP')
('p', 'AA', 'P', 'MP') => ('p', 'EA', 'P', 'MP')
('p', 'AA', 'P', 'co.MP') => ('p', 'T', 'P', 'co.MP')
('p', 'AA', 'P', 'co.MP') => ('p', 'EA', 'P', 'co.MP')
('p', 'E', 'cocap.NEXP_plo', 'PH') => ('-d', 'E', 'cocap.NEXP_plo', 'PH')
('p', 'E', 'cocap.MIP', 'PH') => ('-d', 'E', 'cocap.MIP', 'PH')
('p', 'E', 'cocap.AM', 'PH') => ('-d', 'E', 'cocap.AM', 'PH')
('p', 'E', 'cocap.IP', 'PH') => ('-d', 'E', 'cocap.IP', 'PH')
('p', 'E', 'co.NEXP_plo', 'PH') => ('-d', 'E', 'co.NEXP_plo', 'PH')
('p', 'E', 'NEXP_plo', 'PH') => ('-d', 'E', 'NEXP_plo', 'PH')
('p', 'E', 'AM', 'PH') => ('-d', 'E', 'AM', 'PH')
('p', 'E', 'co.AM', 'PH') => ('-d', 'E', 'co.AM', 'PH')
('p', 'E', 'MIP', 'PH') => ('-d', 'E', 'MIP', 'PH')
('p', 'E', 'co.MIP', 'PH') => ('-d', 'E', 'co.MIP', 'PH')
('p', 'E', 'co.IP', 'PH') => ('-d', 'E', 'co.IP', 'PH')
('p', 'E', 'IP', 'PH') => ('-d', 'E', 'IP', 'PH')
('p', 'AA', 'P', 'PH') => ('-d', 'AA', 'P', 'PH')
('p', 'AA', 'P', 'PH') => ('p', 'T', 'P', 'PH')
('p', 'AA', 'P', 'PH') => ('p', 'EA', 'P', 'PH')
('p', 'EA', 'P', 'PH') => ('-d', 'EA', 'P', 'PH')
('p', 'T', 'P', 'PH') => ('-d', 'T', 'P', 'PH')
('p', 'R', 'P', 'PH') => ('-d', 'R', 'P', 'PH')
('-d', 'A', 'ZPP', 'MP') => ('-d', 'R', 'ZPP', 'MP')
('-d', 'A', 'ZPP', 'MP') => ('-d', 'AA', 'ZPP', 'MP')
('-d', 'A', 'ZPP', 'co.MP') => ('-d', 'R', 'ZPP', 'co.MP')
('-d', 'A', 'ZPP', 'co.MP') => ('-d', 'AA', 'ZPP', 'co.MP')
('-d', 'A', 'ZPP', 'cocap.MP') => ('-d', 'R', 'ZPP', 'cocap.MP')
('-d', 'A', 'ZPP', 'cocap.MP') => ('-d', 'AA', 'ZPP', 'cocap.MP')
('-d', 'AA', 'ZPP', 'cocap.MP') => ('-d', 'T', 'ZPP', 'cocap.MP')
('-d', 'AA', 'ZPP', 'cocap.MP') => ('-d', 'EA', 'ZPP', 'cocap.MP')
('-d', 'AA', 'ZPP', 'MP') => ('-d', 'T', 'ZPP', 'MP')
('-d', 'AA', 'ZPP', 'MP') => ('-d', 'EA', 'ZPP', 'MP')
('-d', 'AA', 'ZPP', 'co.MP') => ('-d', 'T', 'ZPP', 'co.MP')
('-d', 'AA', 'ZPP', 'co.MP') => ('-d', 'EA', 'ZPP', 'co.MP')
('p', 'A', 'ZPP', 'MP') => ('p', 'R', 'ZPP', 'MP')
('p', 'A', 'ZPP', 'MP') => ('p', 'AA', 'ZPP', 'MP')
('p', 'A', 'ZPP', 'co.MP') => ('p', 'R', 'ZPP', 'co.MP')
('p', 'A', 'ZPP', 'co.MP') => ('p', 'AA', 'ZPP', 'co.MP')
('p', 'A', 'ZPP', 'cocap.MP') => ('p', 'R', 'ZPP', 'cocap.MP')
('p', 'A', 'ZPP', 'cocap.MP') => ('p', 'AA', 'ZPP', 'cocap.MP')
('p', 'AA', 'ZPP', 'cocap.MP') => ('p', 'T', 'ZPP', 'cocap.MP')
('p', 'AA', 'ZPP', 'cocap.MP') => ('p', 'EA', 'ZPP', 'cocap.MP')
('p', 'AA', 'ZPP', 'MP') => ('p', 'T', 'ZPP', 'MP')
('p', 'AA', 'ZPP', 'MP') => ('p', 'EA', 'ZPP', 'MP')
('p', 'AA', 'ZPP', 'co.MP') => ('p', 'T', 'ZPP', 'co.MP')
('p', 'AA', 'ZPP', 'co.MP') => ('p', 'EA', 'ZPP', 'co.MP')
('p', 'AA', 'ZPP', 'PH') => ('-d', 'AA', 'ZPP', 'PH')
('p', 'AA', 'ZPP', 'PH') => ('p', 'T', 'ZPP', 'PH')
('p', 'AA', 'ZPP', 'PH') => ('p', 'EA', 'ZPP', 'PH')
('p', 'EA', 'ZPP', 'PH') => ('-d', 'EA', 'ZPP', 'PH')
('p', 'T', 'ZPP', 'PH') => ('-d', 'T', 'ZPP', 'PH')
('p', 'R', 'ZPP', 'PH') => ('-d', 'R', 'ZPP', 'PH')
('-d', 'A', 'co.RP', 'MP') => ('-d', 'R', 'co.RP', 'MP')
('-d', 'A', 'co.RP', 'MP') => ('-d', 'AA', 'co.RP', 'MP')
('-d', 'A', 'RP', 'co.MP') => ('-d', 'R', 'RP', 'co.MP')
('-d', 'A', 'RP', 'co.MP') => ('-d', 'AA', 'RP', 'co.MP')
('-d', 'AA', 'RP', 'co.MP') => ('-d', 'T', 'RP', 'co.MP')
('-d', 'AA', 'RP', 'co.MP') => ('-d', 'EA', 'RP', 'co.MP')
('-d', 'AA', 'co.RP', 'MP') => ('-d', 'T', 'co.RP', 'MP')
('-d', 'AA', 'co.RP', 'MP') => ('-d', 'EA', 'co.RP', 'MP')
('p', 'A', 'co.RP', 'MP') => ('p', 'R', 'co.RP', 'MP')
('p', 'A', 'co.RP', 'MP') => ('p', 'AA', 'co.RP', 'MP')
('p', 'A', 'RP', 'co.MP') => ('p', 'R', 'RP', 'co.MP')
('p', 'A', 'RP', 'co.MP') => ('p', 'AA', 'RP', 'co.MP')
('p', 'AA', 'RP', 'co.MP') => ('p', 'T', 'RP', 'co.MP')
('p', 'AA', 'RP', 'co.MP') => ('p', 'EA', 'RP', 'co.MP')
('p', 'AA', 'co.RP', 'MP') => ('p', 'T', 'co.RP', 'MP')
('p', 'AA', 'co.RP', 'MP') => ('p', 'EA', 'co.RP', 'MP')
('-d', 'A', 'co.RP', 'cocap.MP') => ('-d', 'R', 'co.RP', 'cocap.MP')
('-d', 'A', 'co.RP', 'cocap.MP') => ('-d', 'AA', 'co.RP', 'cocap.MP')
('-d', 'A', 'RP', 'cocap.MP') => ('-d', 'R', 'RP', 'cocap.MP')
('-d', 'A', 'RP', 'cocap.MP') => ('-d', 'AA', 'RP', 'cocap.MP')
('-d', 'A', 'RP', 'MP') => ('-d', 'R', 'RP', 'MP')
('-d', 'A', 'RP', 'MP') => ('-d', 'AA', 'RP', 'MP')
('-d', 'A', 'co.RP', 'co.MP') => ('-d', 'R', 'co.RP', 'co.MP')
('-d', 'A', 'co.RP', 'co.MP') => ('-d', 'AA', 'co.RP', 'co.MP')
('-d', 'AA', 'co.RP', 'co.MP') => ('-d', 'T', 'co.RP', 'co.MP')
('-d', 'AA', 'co.RP', 'co.MP') => ('-d', 'EA', 'co.RP', 'co.MP')
('-d', 'AA', 'co.RP', 'cocap.MP') => ('-d', 'T', 'co.RP', 'cocap.MP')
('-d', 'AA', 'co.RP', 'cocap.MP') => ('-d', 'EA', 'co.RP', 'cocap.MP')
('-d', 'AA', 'RP', 'cocap.MP') => ('-d', 'T', 'RP', 'cocap.MP')
('-d', 'AA', 'RP', 'cocap.MP') => ('-d', 'EA', 'RP', 'cocap.MP')
('-d', 'AA', 'RP', 'MP') => ('-d', 'T', 'RP', 'MP')
('-d', 'AA', 'RP', 'MP') => ('-d', 'EA', 'RP', 'MP')
('p', 'A', 'co.RP', 'cocap.MP') => ('p', 'R', 'co.RP', 'cocap.MP')
('p', 'A', 'co.RP', 'cocap.MP') => ('p', 'AA', 'co.RP', 'cocap.MP')
('p', 'A', 'RP', 'cocap.MP') => ('p', 'R', 'RP', 'cocap.MP')
('p', 'A', 'RP', 'cocap.MP') => ('p', 'AA', 'RP', 'cocap.MP')
('p', 'A', 'RP', 'MP') => ('p', 'R', 'RP', 'MP')
('p', 'A', 'RP', 'MP') => ('p', 'AA', 'RP', 'MP')
('p', 'A', 'co.RP', 'co.MP') => ('p', 'R', 'co.RP', 'co.MP')
('p', 'A', 'co.RP', 'co.MP') => ('p', 'AA', 'co.RP', 'co.MP')
('p', 'AA', 'co.RP', 'co.MP') => ('p', 'T', 'co.RP', 'co.MP')
('p', 'AA', 'co.RP', 'co.MP') => ('p', 'EA', 'co.RP', 'co.MP')
('p', 'AA', 'co.RP', 'cocap.MP') => ('p', 'T', 'co.RP', 'cocap.MP')
('p', 'AA', 'co.RP', 'cocap.MP') => ('p', 'EA', 'co.RP', 'cocap.MP')
('p', 'AA', 'RP', 'cocap.MP') => ('p', 'T', 'RP', 'cocap.MP')
('p', 'AA', 'RP', 'cocap.MP') => ('p', 'EA', 'RP', 'cocap.MP')
('p', 'AA', 'RP', 'MP') => ('p', 'T', 'RP', 'MP')
('p', 'AA', 'RP', 'MP') => ('p', 'EA', 'RP', 'MP')
('p', 'AA', 'co.RP', 'PH') => ('-d', 'AA', 'co.RP', 'PH')
('p', 'AA', 'co.RP', 'PH') => ('p', 'T', 'co.RP', 'PH')
('p', 'AA', 'co.RP', 'PH') => ('p', 'EA', 'co.RP', 'PH')
('p', 'AA', 'RP', 'PH') => ('-d', 'AA', 'RP', 'PH')
('p', 'AA', 'RP', 'PH') => ('p', 'T', 'RP', 'PH')
('p', 'AA', 'RP', 'PH') => ('p', 'EA', 'RP', 'PH')
('p', 'EA', 'RP', 'PH') => ('-d', 'EA', 'RP', 'PH')
('p', 'EA', 'co.RP', 'PH') => ('-d', 'EA', 'co.RP', 'PH')
('p', 'T', 'RP', 'PH') => ('-d', 'T', 'RP', 'PH')
('p', 'T', 'co.RP', 'PH') => ('-d', 'T', 'co.RP', 'PH')
('p', 'R', 'co.RP', 'PH') => ('-d', 'R', 'co.RP', 'PH')
('p', 'R', 'RP', 'PH') => ('-d', 'R', 'RP', 'PH')
('d', 'A', 'PH', 'RP') => ('-p', 'A', 'PH', 'RP')
('d', 'A', 'PH', 'co.RP') => ('-p', 'A', 'PH', 'co.RP')
('p', 'E', 'co.Sigma_2P', 'PH') => ('-d', 'E', 'co.Sigma_2P', 'PH')
('p', 'E', 'Sigma_2P', 'PH') => ('-d', 'E', 'Sigma_2P', 'PH')
('p', 'E', 'cocap.Sigma_2P', 'PH') => ('-d', 'E', 'cocap.Sigma_2P', 'PH')
('p', 'E', 'Delta_2P', 'PH') => ('-d', 'E', 'Delta_2P', 'PH')
('p', 'E', 'S_2P', 'PH') => ('-d', 'E', 'S_2P', 'PH')
('p', 'A', 'co.Sigma_2P', 'PH') => ('-d', 'A', 'co.Sigma_2P', 'PH')
('p', 'A', 'co.Sigma_2P', 'PH') => ('p', 'R', 'co.Sigma_2P', 'PH')
('p', 'A', 'co.Sigma_2P', 'PH') => ('p', 'AA', 'co.Sigma_2P', 'PH')
('p', 'A', 'Sigma_2P', 'PH') => ('-d', 'A', 'Sigma_2P', 'PH')
('p', 'A', 'Sigma_2P', 'PH') => ('p', 'R', 'Sigma_2P', 'PH')
('p', 'A', 'Sigma_2P', 'PH') => ('p', 'AA', 'Sigma_2P', 'PH')
('p', 'A', 'cocap.Sigma_2P', 'PH') => ('-d', 'A', 'cocap.Sigma_2P', 'PH')
('p', 'A', 'cocap.Sigma_2P', 'PH') => ('p', 'R', 'cocap.Sigma_2P', 'PH')
('p', 'A', 'cocap.Sigma_2P', 'PH') => ('p', 'AA', 'cocap.Sigma_2P', 'PH')
('-d', 'A', 'cocap.Sigma_2P', 'MP') => ('-d', 'R', 'cocap.Sigma_2P', 'MP')
('-d', 'A', 'cocap.Sigma_2P', 'MP') => ('-d', 'AA', 'cocap.Sigma_2P', 'MP')
('-d', 'A', 'cocap.Sigma_2P', 'co.MP') => ('-d', 'R', 'cocap.Sigma_2P', 'co.MP')
('-d', 'A', 'cocap.Sigma_2P', 'co.MP') => ('-d', 'AA', 'cocap.Sigma_2P', 'co.MP')
('-d', 'A', 'cocap.Sigma_2P', 'cocap.MP') => ('-d', 'R', 'cocap.Sigma_2P', 'cocap.MP')
('-d', 'A', 'cocap.Sigma_2P', 'cocap.MP') => ('-d', 'AA', 'cocap.Sigma_2P', 'cocap.MP')
('-d', 'A', 'NP', 'cocap.MP') => ('-d', 'R', 'NP', 'cocap.MP')
('-d', 'A', 'NP', 'cocap.MP') => ('-d', 'AA', 'NP', 'cocap.MP')
('-d', 'A', 'co.NP', 'cocap.MP') => ('-d', 'R', 'co.NP', 'cocap.MP')
('-d', 'A', 'co.NP', 'cocap.MP') => ('-d', 'AA', 'co.NP', 'cocap.MP')
('-d', 'A', 'cocap.NP', 'cocap.MP') => ('-d', 'R', 'cocap.NP', 'cocap.MP')
('-d', 'A', 'cocap.NP', 'cocap.MP') => ('-d', 'AA', 'cocap.NP', 'cocap.MP')
('-d', 'A', 'cocap.NP', 'MP') => ('-d', 'R', 'cocap.NP', 'MP')
('-d', 'A', 'cocap.NP', 'MP') => ('-d', 'AA', 'cocap.NP', 'MP')
('-d', 'A', 'cocap.NP', 'co.MP') => ('-d', 'R', 'cocap.NP', 'co.MP')
('-d', 'A', 'cocap.NP', 'co.MP') => ('-d', 'AA', 'cocap.NP', 'co.MP')
('-d', 'AA', 'cocap.NP', 'co.MP') => ('-d', 'T', 'cocap.NP', 'co.MP')
('-d', 'AA', 'cocap.NP', 'co.MP') => ('-d', 'EA', 'cocap.NP', 'co.MP')
('-d', 'AA', 'cocap.NP', 'MP') => ('-d', 'T', 'cocap.NP', 'MP')
('-d', 'AA', 'cocap.NP', 'MP') => ('-d', 'EA', 'cocap.NP', 'MP')
('-d', 'AA', 'cocap.NP', 'cocap.MP') => ('-d', 'T', 'cocap.NP', 'cocap.MP')
('-d', 'AA', 'cocap.NP', 'cocap.MP') => ('-d', 'EA', 'cocap.NP', 'cocap.MP')
('-d', 'A', 'co.NP', 'MP') => ('-d', 'R', 'co.NP', 'MP')
('-d', 'A', 'co.NP', 'MP') => ('-d', 'AA', 'co.NP', 'MP')
('-d', 'A', 'NP', 'co.MP') => ('-d', 'R', 'NP', 'co.MP')
('-d', 'A', 'NP', 'co.MP') => ('-d', 'AA', 'NP', 'co.MP')
('-d', 'AA', 'NP', 'co.MP') => ('-d', 'T', 'NP', 'co.MP')
('-d', 'AA', 'NP', 'co.MP') => ('-d', 'EA', 'NP', 'co.MP')
('-d', 'AA', 'co.NP', 'MP') => ('-d', 'T', 'co.NP', 'MP')
('-d', 'AA', 'co.NP', 'MP') => ('-d', 'EA', 'co.NP', 'MP')
('-d', 'A', 'co.NP', 'co.MP') => ('-d', 'R', 'co.NP', 'co.MP')
('-d', 'A', 'co.NP', 'co.MP') => ('-d', 'AA', 'co.NP', 'co.MP')
('-d', 'A', 'NP', 'MP') => ('-d', 'R', 'NP', 'MP')
('-d', 'A', 'NP', 'MP') => ('-d', 'AA', 'NP', 'MP')
('-d', 'AA', 'NP', 'MP') => ('-d', 'T', 'NP', 'MP')
('-d', 'AA', 'NP', 'MP') => ('-d', 'EA', 'NP', 'MP')
('-d', 'AA', 'co.NP', 'co.MP') => ('-d', 'T', 'co.NP', 'co.MP')
('-d', 'AA', 'co.NP', 'co.MP') => ('-d', 'EA', 'co.NP', 'co.MP')
('-d', 'AA', 'co.NP', 'cocap.MP') => ('-d', 'T', 'co.NP', 'cocap.MP')
('-d', 'AA', 'co.NP', 'cocap.MP') => ('-d', 'EA', 'co.NP', 'cocap.MP')
('-d', 'AA', 'NP', 'cocap.MP') => ('-d', 'T', 'NP', 'cocap.MP')
('-d', 'AA', 'NP', 'cocap.MP') => ('-d', 'EA', 'NP', 'cocap.MP')
('-d', 'A', 'Delta_2P', 'cocap.MP') => ('-d', 'R', 'Delta_2P', 'cocap.MP')
('-d', 'A', 'Delta_2P', 'cocap.MP') => ('-d', 'AA', 'Delta_2P', 'cocap.MP')
('-d', 'A', 'Delta_2P', 'MP') => ('-d', 'R', 'Delta_2P', 'MP')
('-d', 'A', 'Delta_2P', 'MP') => ('-d', 'AA', 'Delta_2P', 'MP')
('-d', 'A', 'Delta_2P', 'co.MP') => ('-d', 'R', 'Delta_2P', 'co.MP')
('-d', 'A', 'Delta_2P', 'co.MP') => ('-d', 'AA', 'Delta_2P', 'co.MP')
('-d', 'AA', 'Delta_2P', 'co.MP') => ('-d', 'T', 'Delta_2P', 'co.MP')
('-d', 'AA', 'Delta_2P', 'co.MP') => ('-d', 'EA', 'Delta_2P', 'co.MP')
('-d', 'AA', 'Delta_2P', 'MP') => ('-d', 'T', 'Delta_2P', 'MP')
('-d', 'AA', 'Delta_2P', 'MP') => ('-d', 'EA', 'Delta_2P', 'MP')
('-d', 'AA', 'Delta_2P', 'cocap.MP') => ('-d', 'T', 'Delta_2P', 'cocap.MP')
('-d', 'AA', 'Delta_2P', 'cocap.MP') => ('-d', 'EA', 'Delta_2P', 'cocap.MP')
('-d', 'A', 'S_2P', 'cocap.MP') => ('-d', 'R', 'S_2P', 'cocap.MP')
('-d', 'A', 'S_2P', 'cocap.MP') => ('-d', 'AA', 'S_2P', 'cocap.MP')
('-d', 'A', 'S_2P', 'MP') => ('-d', 'R', 'S_2P', 'MP')
('-d', 'A', 'S_2P', 'MP') => ('-d', 'AA', 'S_2P', 'MP')
('-d', 'A', 'S_2P', 'co.MP') => ('-d', 'R', 'S_2P', 'co.MP')
('-d', 'A', 'S_2P', 'co.MP') => ('-d', 'AA', 'S_2P', 'co.MP')
('-d', 'AA', 'S_2P', 'co.MP') => ('-d', 'T', 'S_2P', 'co.MP')
('-d', 'AA', 'S_2P', 'co.MP') => ('-d', 'EA', 'S_2P', 'co.MP')
('-d', 'AA', 'S_2P', 'MP') => ('-d', 'T', 'S_2P', 'MP')
('-d', 'AA', 'S_2P', 'MP') => ('-d', 'EA', 'S_2P', 'MP')
('-d', 'AA', 'S_2P', 'cocap.MP') => ('-d', 'T', 'S_2P', 'cocap.MP')
('-d', 'AA', 'S_2P', 'cocap.MP') => ('-d', 'EA', 'S_2P', 'cocap.MP')
('-d', 'AA', 'cocap.Sigma_2P', 'cocap.MP') => ('-d', 'T', 'cocap.Sigma_2P', 'cocap.MP')
('-d', 'AA', 'cocap.Sigma_2P', 'cocap.MP') => ('-d', 'EA', 'cocap.Sigma_2P', 'cocap.MP')
('-d', 'AA', 'cocap.Sigma_2P', 'MP') => ('-d', 'T', 'cocap.Sigma_2P', 'MP')
('-d', 'AA', 'cocap.Sigma_2P', 'MP') => ('-d', 'EA', 'cocap.Sigma_2P', 'MP')
('-d', 'AA', 'cocap.Sigma_2P', 'co.MP') => ('-d', 'T', 'cocap.Sigma_2P', 'co.MP')
('-d', 'AA', 'cocap.Sigma_2P', 'co.MP') => ('-d', 'EA', 'cocap.Sigma_2P', 'co.MP')
('p', 'A', 'cocap.Sigma_2P', 'MP') => ('p', 'R', 'cocap.Sigma_2P', 'MP')
('p', 'A', 'cocap.Sigma_2P', 'MP') => ('p', 'AA', 'cocap.Sigma_2P', 'MP')
('p', 'A', 'cocap.Sigma_2P', 'co.MP') => ('p', 'R', 'cocap.Sigma_2P', 'co.MP')
('p', 'A', 'cocap.Sigma_2P', 'co.MP') => ('p', 'AA', 'cocap.Sigma_2P', 'co.MP')
('p', 'A', 'cocap.Sigma_2P', 'cocap.MP') => ('p', 'R', 'cocap.Sigma_2P', 'cocap.MP')
('p', 'A', 'cocap.Sigma_2P', 'cocap.MP') => ('p', 'AA', 'cocap.Sigma_2P', 'cocap.MP')
('p', 'A', 'NP', 'cocap.MP') => ('p', 'R', 'NP', 'cocap.MP')
('p', 'A', 'NP', 'cocap.MP') => ('p', 'AA', 'NP', 'cocap.MP')
('p', 'A', 'co.NP', 'cocap.MP') => ('p', 'R', 'co.NP', 'cocap.MP')
('p', 'A', 'co.NP', 'cocap.MP') => ('p', 'AA', 'co.NP', 'cocap.MP')
('p', 'A', 'cocap.NP', 'cocap.MP') => ('p', 'R', 'cocap.NP', 'cocap.MP')
('p', 'A', 'cocap.NP', 'cocap.MP') => ('p', 'AA', 'cocap.NP', 'cocap.MP')
('p', 'A', 'cocap.NP', 'MP') => ('p', 'R', 'cocap.NP', 'MP')
('p', 'A', 'cocap.NP', 'MP') => ('p', 'AA', 'cocap.NP', 'MP')
('p', 'A', 'cocap.NP', 'co.MP') => ('p', 'R', 'cocap.NP', 'co.MP')
('p', 'A', 'cocap.NP', 'co.MP') => ('p', 'AA', 'cocap.NP', 'co.MP')
('p', 'AA', 'cocap.NP', 'co.MP') => ('p', 'T', 'cocap.NP', 'co.MP')
('p', 'AA', 'cocap.NP', 'co.MP') => ('p', 'EA', 'cocap.NP', 'co.MP')
('p', 'AA', 'cocap.NP', 'MP') => ('p', 'T', 'cocap.NP', 'MP')
('p', 'AA', 'cocap.NP', 'MP') => ('p', 'EA', 'cocap.NP', 'MP')
('p', 'AA', 'cocap.NP', 'cocap.MP') => ('p', 'T', 'cocap.NP', 'cocap.MP')
('p', 'AA', 'cocap.NP', 'cocap.MP') => ('p', 'EA', 'cocap.NP', 'cocap.MP')
('p', 'A', 'co.NP', 'MP') => ('p', 'R', 'co.NP', 'MP')
('p', 'A', 'co.NP', 'MP') => ('p', 'AA', 'co.NP', 'MP')
('p', 'A', 'NP', 'co.MP') => ('p', 'R', 'NP', 'co.MP')
('p', 'A', 'NP', 'co.MP') => ('p', 'AA', 'NP', 'co.MP')
('p', 'AA', 'NP', 'co.MP') => ('p', 'T', 'NP', 'co.MP')
('p', 'AA', 'NP', 'co.MP') => ('p', 'EA', 'NP', 'co.MP')
('p', 'AA', 'co.NP', 'MP') => ('p', 'T', 'co.NP', 'MP')
('p', 'AA', 'co.NP', 'MP') => ('p', 'EA', 'co.NP', 'MP')
('p', 'A', 'co.NP', 'co.MP') => ('p', 'R', 'co.NP', 'co.MP')
('p', 'A', 'co.NP', 'co.MP') => ('p', 'AA', 'co.NP', 'co.MP')
('p', 'A', 'NP', 'MP') => ('p', 'R', 'NP', 'MP')
('p', 'A', 'NP', 'MP') => ('p', 'AA', 'NP', 'MP')
('p', 'AA', 'NP', 'MP') => ('p', 'T', 'NP', 'MP')
('p', 'AA', 'NP', 'MP') => ('p', 'EA', 'NP', 'MP')
('p', 'AA', 'NP', 'cocap.MP') => ('p', 'T', 'NP', 'cocap.MP')
('p', 'AA', 'NP', 'cocap.MP') => ('p', 'EA', 'NP', 'cocap.MP')
('p', 'AA', 'co.NP', 'cocap.MP') => ('p', 'T', 'co.NP', 'cocap.MP')
('p', 'AA', 'co.NP', 'cocap.MP') => ('p', 'EA', 'co.NP', 'cocap.MP')
('p', 'AA', 'co.NP', 'co.MP') => ('p', 'T', 'co.NP', 'co.MP')
('p', 'AA', 'co.NP', 'co.MP') => ('p', 'EA', 'co.NP', 'co.MP')
('p', 'A', 'Delta_2P', 'cocap.MP') => ('p', 'R', 'Delta_2P', 'cocap.MP')
('p', 'A', 'Delta_2P', 'cocap.MP') => ('p', 'AA', 'Delta_2P', 'cocap.MP')
('p', 'A', 'Delta_2P', 'MP') => ('p', 'R', 'Delta_2P', 'MP')
('p', 'A', 'Delta_2P', 'MP') => ('p', 'AA', 'Delta_2P', 'MP')
('p', 'A', 'Delta_2P', 'co.MP') => ('p', 'R', 'Delta_2P', 'co.MP')
('p', 'A', 'Delta_2P', 'co.MP') => ('p', 'AA', 'Delta_2P', 'co.MP')
('p', 'AA', 'Delta_2P', 'co.MP') => ('p', 'T', 'Delta_2P', 'co.MP')
('p', 'AA', 'Delta_2P', 'co.MP') => ('p', 'EA', 'Delta_2P', 'co.MP')
('p', 'AA', 'Delta_2P', 'MP') => ('p', 'T', 'Delta_2P', 'MP')
('p', 'AA', 'Delta_2P', 'MP') => ('p', 'EA', 'Delta_2P', 'MP')
('p', 'AA', 'Delta_2P', 'cocap.MP') => ('p', 'T', 'Delta_2P', 'cocap.MP')
('p', 'AA', 'Delta_2P', 'cocap.MP') => ('p', 'EA', 'Delta_2P', 'cocap.MP')
('p', 'A', 'S_2P', 'cocap.MP') => ('p', 'R', 'S_2P', 'cocap.MP')
('p', 'A', 'S_2P', 'cocap.MP') => ('p', 'AA', 'S_2P', 'cocap.MP')
('p', 'A', 'S_2P', 'MP') => ('p', 'R', 'S_2P', 'MP')
('p', 'A', 'S_2P', 'MP') => ('p', 'AA', 'S_2P', 'MP')
('p', 'A', 'S_2P', 'co.MP') => ('p', 'R', 'S_2P', 'co.MP')
('p', 'A', 'S_2P', 'co.MP') => ('p', 'AA', 'S_2P', 'co.MP')
('p', 'AA', 'S_2P', 'co.MP') => ('p', 'T', 'S_2P', 'co.MP')
('p', 'AA', 'S_2P', 'co.MP') => ('p', 'EA', 'S_2P', 'co.MP')
('p', 'AA', 'S_2P', 'MP') => ('p', 'T', 'S_2P', 'MP')
('p', 'AA', 'S_2P', 'MP') => ('p', 'EA', 'S_2P', 'MP')
('p', 'AA', 'S_2P', 'cocap.MP') => ('p', 'T', 'S_2P', 'cocap.MP')
('p', 'AA', 'S_2P', 'cocap.MP') => ('p', 'EA', 'S_2P', 'cocap.MP')
('p', 'AA', 'cocap.Sigma_2P', 'cocap.MP') => ('p', 'T', 'cocap.Sigma_2P', 'cocap.MP')
('p', 'AA', 'cocap.Sigma_2P', 'cocap.MP') => ('p', 'EA', 'cocap.Sigma_2P', 'cocap.MP')
('p', 'AA', 'cocap.Sigma_2P', 'MP') => ('p', 'T', 'cocap.Sigma_2P', 'MP')
('p', 'AA', 'cocap.Sigma_2P', 'MP') => ('p', 'EA', 'cocap.Sigma_2P', 'MP')
('p', 'AA', 'cocap.Sigma_2P', 'co.MP') => ('p', 'T', 'cocap.Sigma_2P', 'co.MP')
('p', 'AA', 'cocap.Sigma_2P', 'co.MP') => ('p', 'EA', 'cocap.Sigma_2P', 'co.MP')
('p', 'A', 'NP', 'PH') => ('-d', 'A', 'NP', 'PH')
('p', 'A', 'NP', 'PH') => ('p', 'R', 'NP', 'PH')
('p', 'A', 'NP', 'PH') => ('p', 'AA', 'NP', 'PH')
('p', 'A', 'co.NP', 'PH') => ('-d', 'A', 'co.NP', 'PH')
('p', 'A', 'co.NP', 'PH') => ('p', 'R', 'co.NP', 'PH')
('p', 'A', 'co.NP', 'PH') => ('p', 'AA', 'co.NP', 'PH')
('p', 'A', 'cocap.NP', 'PH') => ('-d', 'A', 'cocap.NP', 'PH')
('p', 'A', 'cocap.NP', 'PH') => ('p', 'R', 'cocap.NP', 'PH')
('p', 'A', 'cocap.NP', 'PH') => ('p', 'AA', 'cocap.NP', 'PH')
('p', 'AA', 'cocap.NP', 'PH') => ('-d', 'AA', 'cocap.NP', 'PH')
('p', 'AA', 'cocap.NP', 'PH') => ('p', 'T', 'cocap.NP', 'PH')
('p', 'AA', 'cocap.NP', 'PH') => ('p', 'EA', 'cocap.NP', 'PH')
('p', 'EA', 'cocap.NP', 'PH') => ('-d', 'EA', 'cocap.NP', 'PH')
('p', 'T', 'cocap.NP', 'PH') => ('-d', 'T', 'cocap.NP', 'PH')
('p', 'R', 'cocap.NP', 'PH') => ('-d', 'R', 'cocap.NP', 'PH')
('d', 'A', 'PH', 'BQP') => ('-p', 'A', 'PH', 'BQP')
('d', 'A', 'PH', 'BQP/mpoly') => ('-p', 'A', 'PH', 'BQP/mpoly')
('d', 'A', 'PH', 'BQP/qpoly') => ('-p', 'A', 'PH', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'PH') => ('-d', 'AA', 'co.NP', 'PH')
('p', 'AA', 'co.NP', 'PH') => ('p', 'T', 'co.NP', 'PH')
('p', 'AA', 'co.NP', 'PH') => ('p', 'EA', 'co.NP', 'PH')
('p', 'AA', 'NP', 'PH') => ('-d', 'AA', 'NP', 'PH')
('p', 'AA', 'NP', 'PH') => ('p', 'T', 'NP', 'PH')
('p', 'AA', 'NP', 'PH') => ('p', 'EA', 'NP', 'PH')
('p', 'EA', 'NP', 'PH') => ('-d', 'EA', 'NP', 'PH')
('p', 'EA', 'co.NP', 'PH') => ('-d', 'EA', 'co.NP', 'PH')
('p', 'T', 'NP', 'PH') => ('-d', 'T', 'NP', 'PH')
('p', 'T', 'co.NP', 'PH') => ('-d', 'T', 'co.NP', 'PH')
('p', 'R', 'co.NP', 'PH') => ('-d', 'R', 'co.NP', 'PH')
('p', 'R', 'NP', 'PH') => ('-d', 'R', 'NP', 'PH')
('p', 'A', 'Delta_2P', 'PH') => ('-d', 'A', 'Delta_2P', 'PH')
('p', 'A', 'Delta_2P', 'PH') => ('p', 'R', 'Delta_2P', 'PH')
('p', 'A', 'Delta_2P', 'PH') => ('p', 'AA', 'Delta_2P', 'PH')
('d', 'A', 'PH', 'PP') => ('-p', 'A', 'PH', 'PP')
('p', 'AA', 'Delta_2P', 'PH') => ('-d', 'AA', 'Delta_2P', 'PH')
('p', 'AA', 'Delta_2P', 'PH') => ('p', 'T', 'Delta_2P', 'PH')
('p', 'AA', 'Delta_2P', 'PH') => ('p', 'EA', 'Delta_2P', 'PH')
('p', 'EA', 'Delta_2P', 'PH') => ('-d', 'EA', 'Delta_2P', 'PH')
('p', 'T', 'Delta_2P', 'PH') => ('-d', 'T', 'Delta_2P', 'PH')
('p', 'R', 'Delta_2P', 'PH') => ('-d', 'R', 'Delta_2P', 'PH')
('p', 'A', 'S_2P', 'PH') => ('-d', 'A', 'S_2P', 'PH')
('p', 'A', 'S_2P', 'PH') => ('p', 'R', 'S_2P', 'PH')
('p', 'A', 'S_2P', 'PH') => ('p', 'AA', 'S_2P', 'PH')
('p', 'AA', 'S_2P', 'PH') => ('-d', 'AA', 'S_2P', 'PH')
('p', 'AA', 'S_2P', 'PH') => ('p', 'T', 'S_2P', 'PH')
('p', 'AA', 'S_2P', 'PH') => ('p', 'EA', 'S_2P', 'PH')
('p', 'EA', 'S_2P', 'PH') => ('-d', 'EA', 'S_2P', 'PH')
('p', 'T', 'S_2P', 'PH') => ('-d', 'T', 'S_2P', 'PH')
('p', 'R', 'S_2P', 'PH') => ('-d', 'R', 'S_2P', 'PH')
('p', 'AA', 'cocap.Sigma_2P', 'PH') => ('-d', 'AA', 'cocap.Sigma_2P', 'PH')
('p', 'AA', 'cocap.Sigma_2P', 'PH') => ('p', 'T', 'cocap.Sigma_2P', 'PH')
('p', 'AA', 'cocap.Sigma_2P', 'PH') => ('p', 'EA', 'cocap.Sigma_2P', 'PH')
('p', 'EA', 'cocap.Sigma_2P', 'PH') => ('-d', 'EA', 'cocap.Sigma_2P', 'PH')
('p', 'T', 'cocap.Sigma_2P', 'PH') => ('-d', 'T', 'cocap.Sigma_2P', 'PH')
('p', 'R', 'cocap.Sigma_2P', 'PH') => ('-d', 'R', 'cocap.Sigma_2P', 'PH')
('-d', 'A', 'Sigma_2P', 'MP') => ('-d', 'R', 'Sigma_2P', 'MP')
('-d', 'A', 'Sigma_2P', 'MP') => ('-d', 'AA', 'Sigma_2P', 'MP')
('-d', 'A', 'co.Sigma_2P', 'co.MP') => ('-d', 'R', 'co.Sigma_2P', 'co.MP')
('-d', 'A', 'co.Sigma_2P', 'co.MP') => ('-d', 'AA', 'co.Sigma_2P', 'co.MP')
('-d', 'AA', 'co.Sigma_2P', 'co.MP') => ('-d', 'T', 'co.Sigma_2P', 'co.MP')
('-d', 'AA', 'co.Sigma_2P', 'co.MP') => ('-d', 'EA', 'co.Sigma_2P', 'co.MP')
('-d', 'AA', 'Sigma_2P', 'MP') => ('-d', 'T', 'Sigma_2P', 'MP')
('-d', 'AA', 'Sigma_2P', 'MP') => ('-d', 'EA', 'Sigma_2P', 'MP')
('p', 'A', 'Sigma_2P', 'MP') => ('p', 'R', 'Sigma_2P', 'MP')
('p', 'A', 'Sigma_2P', 'MP') => ('p', 'AA', 'Sigma_2P', 'MP')
('p', 'A', 'co.Sigma_2P', 'co.MP') => ('p', 'R', 'co.Sigma_2P', 'co.MP')
('p', 'A', 'co.Sigma_2P', 'co.MP') => ('p', 'AA', 'co.Sigma_2P', 'co.MP')
('p', 'AA', 'co.Sigma_2P', 'co.MP') => ('p', 'T', 'co.Sigma_2P', 'co.MP')
('p', 'AA', 'co.Sigma_2P', 'co.MP') => ('p', 'EA', 'co.Sigma_2P', 'co.MP')
('p', 'AA', 'Sigma_2P', 'MP') => ('p', 'T', 'Sigma_2P', 'MP')
('p', 'AA', 'Sigma_2P', 'MP') => ('p', 'EA', 'Sigma_2P', 'MP')
('d', 'A', 'PH', 'NP') => ('-p', 'A', 'PH', 'NP')
('d', 'A', 'PH', 'co.NP') => ('-p', 'A', 'PH', 'co.NP')
('-d', 'A', 'Sigma_2P', 'cocap.MP') => ('-d', 'R', 'Sigma_2P', 'cocap.MP')
('-d', 'A', 'Sigma_2P', 'cocap.MP') => ('-d', 'AA', 'Sigma_2P', 'cocap.MP')
('-d', 'A', 'co.Sigma_2P', 'cocap.MP') => ('-d', 'R', 'co.Sigma_2P', 'cocap.MP')
('-d', 'A', 'co.Sigma_2P', 'cocap.MP') => ('-d', 'AA', 'co.Sigma_2P', 'cocap.MP')
('-d', 'A', 'co.Sigma_2P', 'MP') => ('-d', 'R', 'co.Sigma_2P', 'MP')
('-d', 'A', 'co.Sigma_2P', 'MP') => ('-d', 'AA', 'co.Sigma_2P', 'MP')
('-d', 'A', 'Sigma_2P', 'co.MP') => ('-d', 'R', 'Sigma_2P', 'co.MP')
('-d', 'A', 'Sigma_2P', 'co.MP') => ('-d', 'AA', 'Sigma_2P', 'co.MP')
('-d', 'AA', 'Sigma_2P', 'co.MP') => ('-d', 'T', 'Sigma_2P', 'co.MP')
('-d', 'AA', 'Sigma_2P', 'co.MP') => ('-d', 'EA', 'Sigma_2P', 'co.MP')
('-d', 'AA', 'Sigma_2P', 'cocap.MP') => ('-d', 'T', 'Sigma_2P', 'cocap.MP')
('-d', 'AA', 'Sigma_2P', 'cocap.MP') => ('-d', 'EA', 'Sigma_2P', 'cocap.MP')
('-d', 'AA', 'co.Sigma_2P', 'cocap.MP') => ('-d', 'T', 'co.Sigma_2P', 'cocap.MP')
('-d', 'AA', 'co.Sigma_2P', 'cocap.MP') => ('-d', 'EA', 'co.Sigma_2P', 'cocap.MP')
('-d', 'AA', 'co.Sigma_2P', 'MP') => ('-d', 'T', 'co.Sigma_2P', 'MP')
('-d', 'AA', 'co.Sigma_2P', 'MP') => ('-d', 'EA', 'co.Sigma_2P', 'MP')
('p', 'A', 'Sigma_2P', 'cocap.MP') => ('p', 'R', 'Sigma_2P', 'cocap.MP')
('p', 'A', 'Sigma_2P', 'cocap.MP') => ('p', 'AA', 'Sigma_2P', 'cocap.MP')
('p', 'A', 'co.Sigma_2P', 'cocap.MP') => ('p', 'R', 'co.Sigma_2P', 'cocap.MP')
('p', 'A', 'co.Sigma_2P', 'cocap.MP') => ('p', 'AA', 'co.Sigma_2P', 'cocap.MP')
('p', 'A', 'co.Sigma_2P', 'MP') => ('p', 'R', 'co.Sigma_2P', 'MP')
('p', 'A', 'co.Sigma_2P', 'MP') => ('p', 'AA', 'co.Sigma_2P', 'MP')
('p', 'A', 'Sigma_2P', 'co.MP') => ('p', 'R', 'Sigma_2P', 'co.MP')
('p', 'A', 'Sigma_2P', 'co.MP') => ('p', 'AA', 'Sigma_2P', 'co.MP')
('p', 'AA', 'Sigma_2P', 'co.MP') => ('p', 'T', 'Sigma_2P', 'co.MP')
('p', 'AA', 'Sigma_2P', 'co.MP') => ('p', 'EA', 'Sigma_2P', 'co.MP')
('p', 'AA', 'Sigma_2P', 'cocap.MP') => ('p', 'T', 'Sigma_2P', 'cocap.MP')
('p', 'AA', 'Sigma_2P', 'cocap.MP') => ('p', 'EA', 'Sigma_2P', 'cocap.MP')
('p', 'AA', 'co.Sigma_2P', 'cocap.MP') => ('p', 'T', 'co.Sigma_2P', 'cocap.MP')
('p', 'AA', 'co.Sigma_2P', 'cocap.MP') => ('p', 'EA', 'co.Sigma_2P', 'cocap.MP')
('p', 'AA', 'co.Sigma_2P', 'MP') => ('p', 'T', 'co.Sigma_2P', 'MP')
('p', 'AA', 'co.Sigma_2P', 'MP') => ('p', 'EA', 'co.Sigma_2P', 'MP')
('p', 'AA', 'Sigma_2P', 'PH') => ('-d', 'AA', 'Sigma_2P', 'PH')
('p', 'AA', 'Sigma_2P', 'PH') => ('p', 'T', 'Sigma_2P', 'PH')
('p', 'AA', 'Sigma_2P', 'PH') => ('p', 'EA', 'Sigma_2P', 'PH')
('p', 'AA', 'co.Sigma_2P', 'PH') => ('-d', 'AA', 'co.Sigma_2P', 'PH')
('p', 'AA', 'co.Sigma_2P', 'PH') => ('p', 'T', 'co.Sigma_2P', 'PH')
('p', 'AA', 'co.Sigma_2P', 'PH') => ('p', 'EA', 'co.Sigma_2P', 'PH')
('p', 'EA', 'co.Sigma_2P', 'PH') => ('-d', 'EA', 'co.Sigma_2P', 'PH')
('p', 'EA', 'Sigma_2P', 'PH') => ('-d', 'EA', 'Sigma_2P', 'PH')
('p', 'T', 'co.Sigma_2P', 'PH') => ('-d', 'T', 'co.Sigma_2P', 'PH')
('p', 'T', 'Sigma_2P', 'PH') => ('-d', 'T', 'Sigma_2P', 'PH')
('p', 'R', 'Sigma_2P', 'PH') => ('-d', 'R', 'Sigma_2P', 'PH')
('p', 'R', 'co.Sigma_2P', 'PH') => ('-d', 'R', 'co.Sigma_2P', 'PH')
('d', 'R', 'PH', 'P') => ('-p', 'R', 'PH', 'P')
('-p', 'R', 'SPP', 'P') => ('-p', 'A', 'SPP', 'P')
('d', 'R', 'SPP', 'P') => ('d', 'A', 'SPP', 'P')
('d', 'R', 'PH', 'co.NP') => ('-p', 'R', 'PH', 'co.NP')
('d', 'R', 'PH', 'NP') => ('-p', 'R', 'PH', 'NP')
('-p', 'R', 'SPP', 'co.RP') => ('-p', 'A', 'SPP', 'co.RP')
('-p', 'R', 'SPP', 'RP') => ('-p', 'A', 'SPP', 'RP')
('-p', 'R', 'SPP', 'ZPP') => ('-p', 'A', 'SPP', 'ZPP')
('d', 'R', 'SPP', 'co.RP') => ('d', 'A', 'SPP', 'co.RP')
('d', 'R', 'SPP', 'RP') => ('d', 'A', 'SPP', 'RP')
('d', 'R', 'SPP', 'ZPP') => ('d', 'A', 'SPP', 'ZPP')
('-p', 'R', 'SPP', 'NP') => ('-p', 'A', 'SPP', 'NP')
('-p', 'R', 'SPP', 'co.NP') => ('-p', 'A', 'SPP', 'co.NP')
('-p', 'R', 'SPP', 'cocap.NP') => ('-p', 'A', 'SPP', 'cocap.NP')
('d', 'R', 'SPP', 'NP') => ('d', 'A', 'SPP', 'NP')
('d', 'R', 'SPP', 'co.NP') => ('d', 'A', 'SPP', 'co.NP')
('d', 'R', 'SPP', 'cocap.NP') => ('d', 'A', 'SPP', 'cocap.NP')
('-d', 'A', 'Delta_3P', 'MP') => ('-d', 'R', 'Delta_3P', 'MP')
('-d', 'A', 'Delta_3P', 'MP') => ('-d', 'AA', 'Delta_3P', 'MP')
('-d', 'A', 'Delta_3P', 'co.MP') => ('-d', 'R', 'Delta_3P', 'co.MP')
('-d', 'A', 'Delta_3P', 'co.MP') => ('-d', 'AA', 'Delta_3P', 'co.MP')
('-d', 'A', 'Delta_3P', 'cocap.MP') => ('-d', 'R', 'Delta_3P', 'cocap.MP')
('-d', 'A', 'Delta_3P', 'cocap.MP') => ('-d', 'AA', 'Delta_3P', 'cocap.MP')
('-d', 'AA', 'Delta_3P', 'cocap.MP') => ('-d', 'T', 'Delta_3P', 'cocap.MP')
('-d', 'AA', 'Delta_3P', 'cocap.MP') => ('-d', 'EA', 'Delta_3P', 'cocap.MP')
('-d', 'AA', 'Delta_3P', 'MP') => ('-d', 'T', 'Delta_3P', 'MP')
('-d', 'AA', 'Delta_3P', 'MP') => ('-d', 'EA', 'Delta_3P', 'MP')
('-d', 'AA', 'Delta_3P', 'co.MP') => ('-d', 'T', 'Delta_3P', 'co.MP')
('-d', 'AA', 'Delta_3P', 'co.MP') => ('-d', 'EA', 'Delta_3P', 'co.MP')
('p', 'A', 'Delta_3P', 'MP') => ('p', 'R', 'Delta_3P', 'MP')
('p', 'A', 'Delta_3P', 'MP') => ('p', 'AA', 'Delta_3P', 'MP')
('p', 'A', 'Delta_3P', 'co.MP') => ('p', 'R', 'Delta_3P', 'co.MP')
('p', 'A', 'Delta_3P', 'co.MP') => ('p', 'AA', 'Delta_3P', 'co.MP')
('p', 'A', 'Delta_3P', 'cocap.MP') => ('p', 'R', 'Delta_3P', 'cocap.MP')
('p', 'A', 'Delta_3P', 'cocap.MP') => ('p', 'AA', 'Delta_3P', 'cocap.MP')
('p', 'AA', 'Delta_3P', 'cocap.MP') => ('p', 'T', 'Delta_3P', 'cocap.MP')
('p', 'AA', 'Delta_3P', 'cocap.MP') => ('p', 'EA', 'Delta_3P', 'cocap.MP')
('p', 'AA', 'Delta_3P', 'MP') => ('p', 'T', 'Delta_3P', 'MP')
('p', 'AA', 'Delta_3P', 'MP') => ('p', 'EA', 'Delta_3P', 'MP')
('p', 'AA', 'Delta_3P', 'co.MP') => ('p', 'T', 'Delta_3P', 'co.MP')
('p', 'AA', 'Delta_3P', 'co.MP') => ('p', 'EA', 'Delta_3P', 'co.MP')
('p', 'AA', 'Delta_3P', 'PH') => ('-d', 'AA', 'Delta_3P', 'PH')
('p', 'AA', 'Delta_3P', 'PH') => ('p', 'T', 'Delta_3P', 'PH')
('p', 'AA', 'Delta_3P', 'PH') => ('p', 'EA', 'Delta_3P', 'PH')
('p', 'EA', 'Delta_3P', 'PH') => ('-d', 'EA', 'Delta_3P', 'PH')
('p', 'EA', 'Delta_3P', 'PH') => ('p', 'E', 'Delta_3P', 'PH')
('p', 'E', 'Delta_3P', 'PH') => ('-d', 'E', 'Delta_3P', 'PH')
('p', 'T', 'Delta_3P', 'PH') => ('-d', 'T', 'Delta_3P', 'PH')
('p', 'R', 'Delta_3P', 'PH') => ('-d', 'R', 'Delta_3P', 'PH')
('p', 'A', 'BPP', 'NISZK') => ('-d', 'A', 'BPP', 'NISZK')
('p', 'A', 'BPP', 'NISZK') => ('p', 'R', 'BPP', 'NISZK')
('p', 'A', 'BPP', 'NISZK') => ('p', 'AA', 'BPP', 'NISZK')
('p', 'A', 'BPP', 'co.NISZK') => ('-d', 'A', 'BPP', 'co.NISZK')
('p', 'A', 'BPP', 'co.NISZK') => ('p', 'R', 'BPP', 'co.NISZK')
('p', 'A', 'BPP', 'co.NISZK') => ('p', 'AA', 'BPP', 'co.NISZK')
('p', 'A', 'BPP', 'cocap.NISZK') => ('-d', 'A', 'BPP', 'cocap.NISZK')
('p', 'A', 'BPP', 'cocap.NISZK') => ('p', 'R', 'BPP', 'cocap.NISZK')
('p', 'A', 'BPP', 'cocap.NISZK') => ('p', 'AA', 'BPP', 'cocap.NISZK')
('d', 'A', 'cocap.NISZK', 'RP') => ('-p', 'A', 'cocap.NISZK', 'RP')
('d', 'A', 'cocap.NISZK', 'co.RP') => ('-p', 'A', 'cocap.NISZK', 'co.RP')
('p', 'A', 'P', 'cocap.NISZK') => ('-d', 'A', 'P', 'cocap.NISZK')
('p', 'A', 'P', 'cocap.NISZK') => ('p', 'R', 'P', 'cocap.NISZK')
('p', 'A', 'P', 'cocap.NISZK') => ('p', 'AA', 'P', 'cocap.NISZK')
('p', 'E', 'EXP_plo', 'cocap.NISZK') => ('-d', 'E', 'EXP_plo', 'cocap.NISZK')
('p', 'E', 'cocap.NEXP_plo', 'cocap.NISZK') => ('-d', 'E', 'cocap.NEXP_plo', 'cocap.NISZK')
('p', 'E', 'cocap.MIP', 'cocap.NISZK') => ('-d', 'E', 'cocap.MIP', 'cocap.NISZK')
('-d', 'A', 'P', 'co.NIQSZK') => ('-d', 'R', 'P', 'co.NIQSZK')
('-d', 'A', 'P', 'co.NIQSZK') => ('-d', 'AA', 'P', 'co.NIQSZK')
('-d', 'A', 'P', 'NIQSZK') => ('-d', 'R', 'P', 'NIQSZK')
('-d', 'A', 'P', 'NIQSZK') => ('-d', 'AA', 'P', 'NIQSZK')
('-d', 'A', 'P', 'cocap.NIQSZK') => ('-d', 'R', 'P', 'cocap.NIQSZK')
('-d', 'A', 'P', 'cocap.NIQSZK') => ('-d', 'AA', 'P', 'cocap.NIQSZK')
('-d', 'AA', 'P', 'cocap.NIQSZK') => ('-d', 'T', 'P', 'cocap.NIQSZK')
('-d', 'AA', 'P', 'cocap.NIQSZK') => ('-d', 'EA', 'P', 'cocap.NIQSZK')
('-d', 'AA', 'P', 'co.NIQSZK') => ('-d', 'T', 'P', 'co.NIQSZK')
('-d', 'AA', 'P', 'co.NIQSZK') => ('-d', 'EA', 'P', 'co.NIQSZK')
('-d', 'AA', 'P', 'NIQSZK') => ('-d', 'T', 'P', 'NIQSZK')
('-d', 'AA', 'P', 'NIQSZK') => ('-d', 'EA', 'P', 'NIQSZK')
('p', 'A', 'P', 'co.NIQSZK') => ('p', 'R', 'P', 'co.NIQSZK')
('p', 'A', 'P', 'co.NIQSZK') => ('p', 'AA', 'P', 'co.NIQSZK')
('p', 'A', 'P', 'NIQSZK') => ('p', 'R', 'P', 'NIQSZK')
('p', 'A', 'P', 'NIQSZK') => ('p', 'AA', 'P', 'NIQSZK')
('p', 'A', 'P', 'cocap.NIQSZK') => ('p', 'R', 'P', 'cocap.NIQSZK')
('p', 'A', 'P', 'cocap.NIQSZK') => ('p', 'AA', 'P', 'cocap.NIQSZK')
('p', 'AA', 'P', 'cocap.NIQSZK') => ('p', 'T', 'P', 'cocap.NIQSZK')
('p', 'AA', 'P', 'cocap.NIQSZK') => ('p', 'EA', 'P', 'cocap.NIQSZK')
('p', 'AA', 'P', 'co.NIQSZK') => ('p', 'T', 'P', 'co.NIQSZK')
('p', 'AA', 'P', 'co.NIQSZK') => ('p', 'EA', 'P', 'co.NIQSZK')
('p', 'AA', 'P', 'NIQSZK') => ('p', 'T', 'P', 'NIQSZK')
('p', 'AA', 'P', 'NIQSZK') => ('p', 'EA', 'P', 'NIQSZK')
('p', 'E', 'co.NEXP_plo', 'cocap.NISZK') => ('-d', 'E', 'co.NEXP_plo', 'cocap.NISZK')
('p', 'E', 'NEXP_plo', 'cocap.NISZK') => ('-d', 'E', 'NEXP_plo', 'cocap.NISZK')
('p', 'E', 'AM', 'cocap.NISZK') => ('-d', 'E', 'AM', 'cocap.NISZK')
('p', 'E', 'co.AM', 'cocap.NISZK') => ('-d', 'E', 'co.AM', 'cocap.NISZK')
('p', 'E', 'MIP', 'cocap.NISZK') => ('-d', 'E', 'MIP', 'cocap.NISZK')
('p', 'E', 'co.MIP', 'cocap.NISZK') => ('-d', 'E', 'co.MIP', 'cocap.NISZK')
('p', 'E', 'co.IP', 'cocap.NISZK') => ('-d', 'E', 'co.IP', 'cocap.NISZK')
('p', 'E', 'IP', 'cocap.NISZK') => ('-d', 'E', 'IP', 'cocap.NISZK')
('-d', 'A', 'P', 'co.NISZK') => ('-d', 'R', 'P', 'co.NISZK')
('-d', 'A', 'P', 'co.NISZK') => ('-d', 'AA', 'P', 'co.NISZK')
('-d', 'A', 'P', 'NISZK') => ('-d', 'R', 'P', 'NISZK')
('-d', 'A', 'P', 'NISZK') => ('-d', 'AA', 'P', 'NISZK')
('-d', 'A', 'P', 'cocap.NISZK') => ('-d', 'R', 'P', 'cocap.NISZK')
('-d', 'A', 'P', 'cocap.NISZK') => ('-d', 'AA', 'P', 'cocap.NISZK')
('-d', 'AA', 'P', 'cocap.NISZK') => ('-d', 'T', 'P', 'cocap.NISZK')
('-d', 'AA', 'P', 'cocap.NISZK') => ('-d', 'EA', 'P', 'cocap.NISZK')
('-d', 'AA', 'P', 'co.NISZK') => ('-d', 'T', 'P', 'co.NISZK')
('-d', 'AA', 'P', 'co.NISZK') => ('-d', 'EA', 'P', 'co.NISZK')
('-d', 'AA', 'P', 'NISZK') => ('-d', 'T', 'P', 'NISZK')
('-d', 'AA', 'P', 'NISZK') => ('-d', 'EA', 'P', 'NISZK')
('p', 'A', 'P', 'co.NISZK') => ('p', 'R', 'P', 'co.NISZK')
('p', 'A', 'P', 'co.NISZK') => ('p', 'AA', 'P', 'co.NISZK')
('p', 'A', 'P', 'NISZK') => ('p', 'R', 'P', 'NISZK')
('p', 'A', 'P', 'NISZK') => ('p', 'AA', 'P', 'NISZK')
('p', 'AA', 'P', 'NISZK') => ('p', 'T', 'P', 'NISZK')
('p', 'AA', 'P', 'NISZK') => ('p', 'EA', 'P', 'NISZK')
('p', 'AA', 'P', 'co.NISZK') => ('p', 'T', 'P', 'co.NISZK')
('p', 'AA', 'P', 'co.NISZK') => ('p', 'EA', 'P', 'co.NISZK')
('p', 'AA', 'P', 'cocap.NISZK') => ('p', 'T', 'P', 'cocap.NISZK')
('p', 'AA', 'P', 'cocap.NISZK') => ('p', 'EA', 'P', 'cocap.NISZK')
('d', 'A', 'cocap.NISZK', 'NP') => ('-p', 'A', 'cocap.NISZK', 'NP')
('d', 'A', 'cocap.NISZK', 'co.NP') => ('-p', 'A', 'cocap.NISZK', 'co.NP')
('d', 'A', 'cocap.NISZK', 'Delta_2P') => ('-p', 'A', 'cocap.NISZK', 'Delta_2P')
('d', 'A', 'NISZK', 'Delta_2P') => ('-p', 'A', 'NISZK', 'Delta_2P')
('d', 'A', 'co.NISZK', 'Delta_2P') => ('-p', 'A', 'co.NISZK', 'Delta_2P')
('-d', 'A', 'BPP', 'co.NIQSZK') => ('-d', 'R', 'BPP', 'co.NIQSZK')
('-d', 'A', 'BPP', 'co.NIQSZK') => ('-d', 'AA', 'BPP', 'co.NIQSZK')
('-d', 'A', 'BPP', 'NIQSZK') => ('-d', 'R', 'BPP', 'NIQSZK')
('-d', 'A', 'BPP', 'NIQSZK') => ('-d', 'AA', 'BPP', 'NIQSZK')
('-d', 'A', 'BPP', 'cocap.NIQSZK') => ('-d', 'R', 'BPP', 'cocap.NIQSZK')
('-d', 'A', 'BPP', 'cocap.NIQSZK') => ('-d', 'AA', 'BPP', 'cocap.NIQSZK')
('-d', 'AA', 'BPP', 'cocap.NIQSZK') => ('-d', 'T', 'BPP', 'cocap.NIQSZK')
('-d', 'AA', 'BPP', 'cocap.NIQSZK') => ('-d', 'EA', 'BPP', 'cocap.NIQSZK')
('-d', 'AA', 'BPP', 'co.NIQSZK') => ('-d', 'T', 'BPP', 'co.NIQSZK')
('-d', 'AA', 'BPP', 'co.NIQSZK') => ('-d', 'EA', 'BPP', 'co.NIQSZK')
('-d', 'AA', 'BPP', 'NIQSZK') => ('-d', 'T', 'BPP', 'NIQSZK')
('-d', 'AA', 'BPP', 'NIQSZK') => ('-d', 'EA', 'BPP', 'NIQSZK')
('p', 'A', 'BPP', 'co.NIQSZK') => ('p', 'R', 'BPP', 'co.NIQSZK')
('p', 'A', 'BPP', 'co.NIQSZK') => ('p', 'AA', 'BPP', 'co.NIQSZK')
('p', 'A', 'BPP', 'NIQSZK') => ('p', 'R', 'BPP', 'NIQSZK')
('p', 'A', 'BPP', 'NIQSZK') => ('p', 'AA', 'BPP', 'NIQSZK')
('p', 'A', 'BPP', 'cocap.NIQSZK') => ('p', 'R', 'BPP', 'cocap.NIQSZK')
('p', 'A', 'BPP', 'cocap.NIQSZK') => ('p', 'AA', 'BPP', 'cocap.NIQSZK')
('p', 'AA', 'BPP', 'cocap.NIQSZK') => ('p', 'T', 'BPP', 'cocap.NIQSZK')
('p', 'AA', 'BPP', 'cocap.NIQSZK') => ('p', 'EA', 'BPP', 'cocap.NIQSZK')
('p', 'AA', 'BPP', 'co.NIQSZK') => ('p', 'T', 'BPP', 'co.NIQSZK')
('p', 'AA', 'BPP', 'co.NIQSZK') => ('p', 'EA', 'BPP', 'co.NIQSZK')
('p', 'AA', 'BPP', 'NIQSZK') => ('p', 'T', 'BPP', 'NIQSZK')
('p', 'AA', 'BPP', 'NIQSZK') => ('p', 'EA', 'BPP', 'NIQSZK')
('-d', 'A', 'BPP', 'co.NISZK') => ('-d', 'R', 'BPP', 'co.NISZK')
('-d', 'A', 'BPP', 'co.NISZK') => ('-d', 'AA', 'BPP', 'co.NISZK')
('-d', 'A', 'BPP', 'cocap.NISZK') => ('-d', 'R', 'BPP', 'cocap.NISZK')
('-d', 'A', 'BPP', 'cocap.NISZK') => ('-d', 'AA', 'BPP', 'cocap.NISZK')
('-d', 'A', 'BPP', 'NISZK') => ('-d', 'R', 'BPP', 'NISZK')
('-d', 'A', 'BPP', 'NISZK') => ('-d', 'AA', 'BPP', 'NISZK')
('-d', 'AA', 'BPP', 'NISZK') => ('-d', 'T', 'BPP', 'NISZK')
('-d', 'AA', 'BPP', 'NISZK') => ('-d', 'EA', 'BPP', 'NISZK')
('-d', 'AA', 'BPP', 'co.NISZK') => ('-d', 'T', 'BPP', 'co.NISZK')
('-d', 'AA', 'BPP', 'co.NISZK') => ('-d', 'EA', 'BPP', 'co.NISZK')
('-d', 'AA', 'BPP', 'cocap.NISZK') => ('-d', 'T', 'BPP', 'cocap.NISZK')
('-d', 'AA', 'BPP', 'cocap.NISZK') => ('-d', 'EA', 'BPP', 'cocap.NISZK')
('p', 'AA', 'BPP', 'cocap.NISZK') => ('p', 'T', 'BPP', 'cocap.NISZK')
('p', 'AA', 'BPP', 'cocap.NISZK') => ('p', 'EA', 'BPP', 'cocap.NISZK')
('p', 'AA', 'BPP', 'co.NISZK') => ('p', 'T', 'BPP', 'co.NISZK')
('p', 'AA', 'BPP', 'co.NISZK') => ('p', 'EA', 'BPP', 'co.NISZK')
('p', 'AA', 'BPP', 'NISZK') => ('p', 'T', 'BPP', 'NISZK')
('p', 'AA', 'BPP', 'NISZK') => ('p', 'EA', 'BPP', 'NISZK')
('p', 'A', 'EXP', 'NEXP') => ('-d', 'A', 'EXP', 'NEXP')
('p', 'A', 'EXP', 'NEXP') => ('p', 'R', 'EXP', 'NEXP')
('p', 'A', 'EXP', 'NEXP') => ('p', 'AA', 'EXP', 'NEXP')
('p', 'A', 'EXP', 'co.NEXP') => ('-d', 'A', 'EXP', 'co.NEXP')
('p', 'A', 'EXP', 'co.NEXP') => ('p', 'R', 'EXP', 'co.NEXP')
('p', 'A', 'EXP', 'co.NEXP') => ('p', 'AA', 'EXP', 'co.NEXP')
('p', 'A', 'EXP', 'cocap.NEXP') => ('-d', 'A', 'EXP', 'cocap.NEXP')
('p', 'A', 'EXP', 'cocap.NEXP') => ('p', 'R', 'EXP', 'cocap.NEXP')
('p', 'A', 'EXP', 'cocap.NEXP') => ('p', 'AA', 'EXP', 'cocap.NEXP')
('d', 'E', 'cocap.NEXP', 'P') => ('-p', 'E', 'cocap.NEXP', 'P')
('d', 'E', 'cocap.NEXP', 'P') => ('d', 'R', 'cocap.NEXP', 'P')
('d', 'E', 'cocap.NEXP', 'P') => ('d', 'T', 'cocap.NEXP', 'P')
('d', 'E', 'cocap.NEXP', 'P') => ('d', 'EA', 'cocap.NEXP', 'P')
('d', 'E', 'co.NEXP', 'P') => ('-p', 'E', 'co.NEXP', 'P')
('d', 'E', 'co.NEXP', 'P') => ('d', 'R', 'co.NEXP', 'P')
('d', 'E', 'co.NEXP', 'P') => ('d', 'T', 'co.NEXP', 'P')
('d', 'E', 'co.NEXP', 'P') => ('d', 'EA', 'co.NEXP', 'P')
('d', 'E', 'NEXP', 'P') => ('-p', 'E', 'NEXP', 'P')
('d', 'E', 'NEXP', 'P') => ('d', 'R', 'NEXP', 'P')
('d', 'E', 'NEXP', 'P') => ('d', 'T', 'NEXP', 'P')
('d', 'E', 'NEXP', 'P') => ('d', 'EA', 'NEXP', 'P')
('-p', 'E', 'ALL', 'P') => ('-p', 'R', 'ALL', 'P')
('-p', 'E', 'ALL', 'P') => ('-p', 'T', 'ALL', 'P')
('-p', 'E', 'ALL', 'P') => ('-p', 'EA', 'ALL', 'P')
('-p', 'EA', 'ALL', 'P') => ('-p', 'AA', 'ALL', 'P')
('d', 'E', 'ALL', 'P') => ('d', 'R', 'ALL', 'P')
('d', 'E', 'ALL', 'P') => ('d', 'T', 'ALL', 'P')
('d', 'E', 'ALL', 'P') => ('d', 'EA', 'ALL', 'P')
('d', 'EA', 'ALL', 'P') => ('d', 'AA', 'ALL', 'P')
('-p', 'E', 'R', 'P') => ('-p', 'R', 'R', 'P')
('-p', 'E', 'R', 'P') => ('-p', 'T', 'R', 'P')
('-p', 'E', 'R', 'P') => ('-p', 'EA', 'R', 'P')
('-p', 'E', 'RE', 'P') => ('-p', 'R', 'RE', 'P')
('-p', 'E', 'RE', 'P') => ('-p', 'T', 'RE', 'P')
('-p', 'E', 'RE', 'P') => ('-p', 'EA', 'RE', 'P')
('-p', 'E', 'co.RE', 'P') => ('-p', 'R', 'co.RE', 'P')
('-p', 'E', 'co.RE', 'P') => ('-p', 'T', 'co.RE', 'P')
('-p', 'E', 'co.RE', 'P') => ('-p', 'EA', 'co.RE', 'P')
('-p', 'EA', 'co.RE', 'P') => ('-p', 'AA', 'co.RE', 'P')
('-p', 'EA', 'RE', 'P') => ('-p', 'AA', 'RE', 'P')
('-p', 'AA', 'RE', 'P') => ('-p', 'A', 'RE', 'P')
('-p', 'AA', 'co.RE', 'P') => ('-p', 'A', 'co.RE', 'P')
('-p', 'EA', 'R', 'P') => ('-p', 'AA', 'R', 'P')
('-p', 'AA', 'R', 'P') => ('-p', 'A', 'R', 'P')
('d', 'E', 'R', 'P') => ('d', 'R', 'R', 'P')
('d', 'E', 'R', 'P') => ('d', 'T', 'R', 'P')
('d', 'E', 'R', 'P') => ('d', 'EA', 'R', 'P')
('d', 'E', 'RE', 'P') => ('d', 'R', 'RE', 'P')
('d', 'E', 'RE', 'P') => ('d', 'T', 'RE', 'P')
('d', 'E', 'RE', 'P') => ('d', 'EA', 'RE', 'P')
('d', 'E', 'co.RE', 'P') => ('d', 'R', 'co.RE', 'P')
('d', 'E', 'co.RE', 'P') => ('d', 'T', 'co.RE', 'P')
('d', 'E', 'co.RE', 'P') => ('d', 'EA', 'co.RE', 'P')
('d', 'EA', 'co.RE', 'P') => ('d', 'AA', 'co.RE', 'P')
('d', 'EA', 'RE', 'P') => ('d', 'AA', 'RE', 'P')
('d', 'AA', 'RE', 'P') => ('d', 'A', 'RE', 'P')
('d', 'AA', 'co.RE', 'P') => ('d', 'A', 'co.RE', 'P')
('d', 'EA', 'R', 'P') => ('d', 'AA', 'R', 'P')
('d', 'AA', 'R', 'P') => ('d', 'A', 'R', 'P')
('-p', 'E', 'NEXP/poly', 'P') => ('-p', 'R', 'NEXP/poly', 'P')
('-p', 'E', 'NEXP/poly', 'P') => ('-p', 'T', 'NEXP/poly', 'P')
('-p', 'E', 'NEXP/poly', 'P') => ('-p', 'EA', 'NEXP/poly', 'P')
('-p', 'EA', 'NEXP/poly', 'P') => ('-p', 'AA', 'NEXP/poly', 'P')
('d', 'E', 'NEXP/poly', 'P') => ('d', 'R', 'NEXP/poly', 'P')
('d', 'E', 'NEXP/poly', 'P') => ('d', 'T', 'NEXP/poly', 'P')
('d', 'E', 'NEXP/poly', 'P') => ('d', 'EA', 'NEXP/poly', 'P')
('d', 'EA', 'NEXP/poly', 'P') => ('d', 'AA', 'NEXP/poly', 'P')
('d', 'EA', 'NEXP', 'P') => ('-p', 'EA', 'NEXP', 'P')
('d', 'EA', 'NEXP', 'P') => ('d', 'AA', 'NEXP', 'P')
('d', 'EA', 'co.NEXP', 'P') => ('-p', 'EA', 'co.NEXP', 'P')
('d', 'EA', 'co.NEXP', 'P') => ('d', 'AA', 'co.NEXP', 'P')
('d', 'AA', 'co.NEXP', 'P') => ('-p', 'AA', 'co.NEXP', 'P')
('d', 'AA', 'co.NEXP', 'P') => ('d', 'A', 'co.NEXP', 'P')
('d', 'AA', 'NEXP', 'P') => ('-p', 'AA', 'NEXP', 'P')
('d', 'AA', 'NEXP', 'P') => ('d', 'A', 'NEXP', 'P')
('d', 'A', 'NEXP', 'P') => ('-p', 'A', 'NEXP', 'P')
('d', 'A', 'co.NEXP', 'P') => ('-p', 'A', 'co.NEXP', 'P')
('d', 'T', 'NEXP', 'P') => ('-p', 'T', 'NEXP', 'P')
('d', 'T', 'co.NEXP', 'P') => ('-p', 'T', 'co.NEXP', 'P')
('d', 'R', 'NEXP', 'P') => ('-p', 'R', 'NEXP', 'P')
('d', 'R', 'co.NEXP', 'P') => ('-p', 'R', 'co.NEXP', 'P')
('d', 'EA', 'cocap.NEXP', 'P') => ('-p', 'EA', 'cocap.NEXP', 'P')
('d', 'EA', 'cocap.NEXP', 'P') => ('d', 'AA', 'cocap.NEXP', 'P')
('d', 'AA', 'cocap.NEXP', 'P') => ('-p', 'AA', 'cocap.NEXP', 'P')
('d', 'AA', 'cocap.NEXP', 'P') => ('d', 'A', 'cocap.NEXP', 'P')
('d', 'A', 'cocap.NEXP', 'P') => ('-p', 'A', 'cocap.NEXP', 'P')
('d', 'T', 'cocap.NEXP', 'P') => ('-p', 'T', 'cocap.NEXP', 'P')
('d', 'R', 'cocap.NEXP', 'P') => ('-p', 'R', 'cocap.NEXP', 'P')
('-d', 'A', 'EXP', 'ALL') => ('-d', 'R', 'EXP', 'ALL')
('-d', 'A', 'EXP', 'ALL') => ('-d', 'AA', 'EXP', 'ALL')
('-d', 'AA', 'EXP', 'ALL') => ('-d', 'T', 'EXP', 'ALL')
('-d', 'AA', 'EXP', 'ALL') => ('-d', 'EA', 'EXP', 'ALL')
('p', 'A', 'EXP', 'ALL') => ('p', 'R', 'EXP', 'ALL')
('p', 'A', 'EXP', 'ALL') => ('p', 'AA', 'EXP', 'ALL')
('p', 'AA', 'EXP', 'ALL') => ('p', 'T', 'EXP', 'ALL')
('p', 'AA', 'EXP', 'ALL') => ('p', 'EA', 'EXP', 'ALL')
('-d', 'A', 'EXP', 'co.NEXP') => ('-d', 'R', 'EXP', 'co.NEXP')
('-d', 'A', 'EXP', 'co.NEXP') => ('-d', 'AA', 'EXP', 'co.NEXP')
('-d', 'A', 'EXP', 'cocap.NEXP') => ('-d', 'R', 'EXP', 'cocap.NEXP')
('-d', 'A', 'EXP', 'cocap.NEXP') => ('-d', 'AA', 'EXP', 'cocap.NEXP')
('-d', 'A', 'EXP', 'NEXP') => ('-d', 'R', 'EXP', 'NEXP')
('-d', 'A', 'EXP', 'NEXP') => ('-d', 'AA', 'EXP', 'NEXP')
('-d', 'A', 'EXP', 'R') => ('-d', 'R', 'EXP', 'R')
('-d', 'A', 'EXP', 'R') => ('-d', 'AA', 'EXP', 'R')
('-d', 'A', 'EXP', 'RE') => ('-d', 'R', 'EXP', 'RE')
('-d', 'A', 'EXP', 'RE') => ('-d', 'AA', 'EXP', 'RE')
('-d', 'A', 'EXP', 'co.RE') => ('-d', 'R', 'EXP', 'co.RE')
('-d', 'A', 'EXP', 'co.RE') => ('-d', 'AA', 'EXP', 'co.RE')
('-d', 'AA', 'EXP', 'co.RE') => ('-d', 'T', 'EXP', 'co.RE')
('-d', 'AA', 'EXP', 'co.RE') => ('-d', 'EA', 'EXP', 'co.RE')
('-d', 'AA', 'EXP', 'RE') => ('-d', 'T', 'EXP', 'RE')
('-d', 'AA', 'EXP', 'RE') => ('-d', 'EA', 'EXP', 'RE')
('-d', 'AA', 'EXP', 'R') => ('-d', 'T', 'EXP', 'R')
('-d', 'AA', 'EXP', 'R') => ('-d', 'EA', 'EXP', 'R')
('-d', 'A', 'EXP', 'NEXP/poly') => ('-d', 'R', 'EXP', 'NEXP/poly')
('-d', 'A', 'EXP', 'NEXP/poly') => ('-d', 'AA', 'EXP', 'NEXP/poly')
('-d', 'AA', 'EXP', 'NEXP/poly') => ('-d', 'T', 'EXP', 'NEXP/poly')
('-d', 'AA', 'EXP', 'NEXP/poly') => ('-d', 'EA', 'EXP', 'NEXP/poly')
('-d', 'AA', 'EXP', 'NEXP') => ('-d', 'T', 'EXP', 'NEXP')
('-d', 'AA', 'EXP', 'NEXP') => ('-d', 'EA', 'EXP', 'NEXP')
('-d', 'AA', 'EXP', 'co.NEXP') => ('-d', 'T', 'EXP', 'co.NEXP')
('-d', 'AA', 'EXP', 'co.NEXP') => ('-d', 'EA', 'EXP', 'co.NEXP')
('-d', 'AA', 'EXP', 'cocap.NEXP') => ('-d', 'T', 'EXP', 'cocap.NEXP')
('-d', 'AA', 'EXP', 'cocap.NEXP') => ('-d', 'EA', 'EXP', 'cocap.NEXP')
('p', 'A', 'EXP', 'R') => ('p', 'R', 'EXP', 'R')
('p', 'A', 'EXP', 'R') => ('p', 'AA', 'EXP', 'R')
('p', 'A', 'EXP', 'RE') => ('p', 'R', 'EXP', 'RE')
('p', 'A', 'EXP', 'RE') => ('p', 'AA', 'EXP', 'RE')
('p', 'A', 'EXP', 'co.RE') => ('p', 'R', 'EXP', 'co.RE')
('p', 'A', 'EXP', 'co.RE') => ('p', 'AA', 'EXP', 'co.RE')
('p', 'AA', 'EXP', 'co.RE') => ('p', 'T', 'EXP', 'co.RE')
('p', 'AA', 'EXP', 'co.RE') => ('p', 'EA', 'EXP', 'co.RE')
('p', 'AA', 'EXP', 'RE') => ('p', 'T', 'EXP', 'RE')
('p', 'AA', 'EXP', 'RE') => ('p', 'EA', 'EXP', 'RE')
('p', 'AA', 'EXP', 'R') => ('p', 'T', 'EXP', 'R')
('p', 'AA', 'EXP', 'R') => ('p', 'EA', 'EXP', 'R')
('p', 'A', 'EXP', 'NEXP/poly') => ('p', 'R', 'EXP', 'NEXP/poly')
('p', 'A', 'EXP', 'NEXP/poly') => ('p', 'AA', 'EXP', 'NEXP/poly')
('p', 'AA', 'EXP', 'NEXP/poly') => ('p', 'T', 'EXP', 'NEXP/poly')
('p', 'AA', 'EXP', 'NEXP/poly') => ('p', 'EA', 'EXP', 'NEXP/poly')
('p', 'AA', 'EXP', 'cocap.NEXP') => ('p', 'T', 'EXP', 'cocap.NEXP')
('p', 'AA', 'EXP', 'cocap.NEXP') => ('p', 'EA', 'EXP', 'cocap.NEXP')
('p', 'AA', 'EXP', 'co.NEXP') => ('p', 'T', 'EXP', 'co.NEXP')
('p', 'AA', 'EXP', 'co.NEXP') => ('p', 'EA', 'EXP', 'co.NEXP')
('p', 'AA', 'EXP', 'NEXP') => ('p', 'T', 'EXP', 'NEXP')
('p', 'AA', 'EXP', 'NEXP') => ('p', 'EA', 'EXP', 'NEXP')
('p', 'A', 'BPP', 'QMIP_le') => ('-d', 'A', 'BPP', 'QMIP_le')
('p', 'A', 'BPP', 'QMIP_le') => ('p', 'R', 'BPP', 'QMIP_le')
('p', 'A', 'BPP', 'QMIP_le') => ('p', 'AA', 'BPP', 'QMIP_le')
('p', 'A', 'BPP', 'co.QMIP_le') => ('-d', 'A', 'BPP', 'co.QMIP_le')
('p', 'A', 'BPP', 'co.QMIP_le') => ('p', 'R', 'BPP', 'co.QMIP_le')
('p', 'A', 'BPP', 'co.QMIP_le') => ('p', 'AA', 'BPP', 'co.QMIP_le')
('p', 'A', 'BPP', 'cocap.QMIP_le') => ('-d', 'A', 'BPP', 'cocap.QMIP_le')
('p', 'A', 'BPP', 'cocap.QMIP_le') => ('p', 'R', 'BPP', 'cocap.QMIP_le')
('p', 'A', 'BPP', 'cocap.QMIP_le') => ('p', 'AA', 'BPP', 'cocap.QMIP_le')
('d', 'A', 'cocap.QMIP_le', 'RP') => ('-p', 'A', 'cocap.QMIP_le', 'RP')
('d', 'A', 'cocap.QMIP_le', 'co.RP') => ('-p', 'A', 'cocap.QMIP_le', 'co.RP')
('p', 'A', 'P', 'cocap.QMIP_le') => ('-d', 'A', 'P', 'cocap.QMIP_le')
('p', 'A', 'P', 'cocap.QMIP_le') => ('p', 'R', 'P', 'cocap.QMIP_le')
('p', 'A', 'P', 'cocap.QMIP_le') => ('p', 'AA', 'P', 'cocap.QMIP_le')
('p', 'E', 'EXP_plo', 'cocap.QMIP_le') => ('-d', 'E', 'EXP_plo', 'cocap.QMIP_le')
('p', 'E', 'cocap.NEXP_plo', 'cocap.QMIP_le') => ('-d', 'E', 'cocap.NEXP_plo', 'cocap.QMIP_le')
('-d', 'A', 'P', 'co.QMIP_le') => ('-d', 'R', 'P', 'co.QMIP_le')
('-d', 'A', 'P', 'co.QMIP_le') => ('-d', 'AA', 'P', 'co.QMIP_le')
('-d', 'A', 'P', 'QMIP_le') => ('-d', 'R', 'P', 'QMIP_le')
('-d', 'A', 'P', 'QMIP_le') => ('-d', 'AA', 'P', 'QMIP_le')
('-d', 'A', 'P', 'cocap.QMIP_le') => ('-d', 'R', 'P', 'cocap.QMIP_le')
('-d', 'A', 'P', 'cocap.QMIP_le') => ('-d', 'AA', 'P', 'cocap.QMIP_le')
('-d', 'AA', 'P', 'cocap.QMIP_le') => ('-d', 'T', 'P', 'cocap.QMIP_le')
('-d', 'AA', 'P', 'cocap.QMIP_le') => ('-d', 'EA', 'P', 'cocap.QMIP_le')
('-d', 'AA', 'P', 'co.QMIP_le') => ('-d', 'T', 'P', 'co.QMIP_le')
('-d', 'AA', 'P', 'co.QMIP_le') => ('-d', 'EA', 'P', 'co.QMIP_le')
('-d', 'AA', 'P', 'QMIP_le') => ('-d', 'T', 'P', 'QMIP_le')
('-d', 'AA', 'P', 'QMIP_le') => ('-d', 'EA', 'P', 'QMIP_le')
('p', 'A', 'P', 'co.QMIP_le') => ('p', 'R', 'P', 'co.QMIP_le')
('p', 'A', 'P', 'co.QMIP_le') => ('p', 'AA', 'P', 'co.QMIP_le')
('p', 'A', 'P', 'QMIP_le') => ('p', 'R', 'P', 'QMIP_le')
('p', 'A', 'P', 'QMIP_le') => ('p', 'AA', 'P', 'QMIP_le')
('p', 'AA', 'P', 'QMIP_le') => ('p', 'T', 'P', 'QMIP_le')
('p', 'AA', 'P', 'QMIP_le') => ('p', 'EA', 'P', 'QMIP_le')
('p', 'AA', 'P', 'co.QMIP_le') => ('p', 'T', 'P', 'co.QMIP_le')
('p', 'AA', 'P', 'co.QMIP_le') => ('p', 'EA', 'P', 'co.QMIP_le')
('p', 'AA', 'P', 'cocap.QMIP_le') => ('p', 'T', 'P', 'cocap.QMIP_le')
('p', 'AA', 'P', 'cocap.QMIP_le') => ('p', 'EA', 'P', 'cocap.QMIP_le')
('d', 'A', 'cocap.QMIP_le', 'NP') => ('-p', 'A', 'cocap.QMIP_le', 'NP')
('d', 'A', 'cocap.QMIP_le', 'co.NP') => ('-p', 'A', 'cocap.QMIP_le', 'co.NP')
('d', 'A', 'cocap.QMIP_le', 'Delta_2P') => ('-p', 'A', 'cocap.QMIP_le', 'Delta_2P')
('d', 'A', 'co.QMIP_le', 'Delta_2P') => ('-p', 'A', 'co.QMIP_le', 'Delta_2P')
('d', 'A', 'QMIP_le', 'Delta_2P') => ('-p', 'A', 'QMIP_le', 'Delta_2P')
('-d', 'A', 'BPP', 'co.QMIP_le') => ('-d', 'R', 'BPP', 'co.QMIP_le')
('-d', 'A', 'BPP', 'co.QMIP_le') => ('-d', 'AA', 'BPP', 'co.QMIP_le')
('-d', 'A', 'BPP', 'cocap.QMIP_le') => ('-d', 'R', 'BPP', 'cocap.QMIP_le')
('-d', 'A', 'BPP', 'cocap.QMIP_le') => ('-d', 'AA', 'BPP', 'cocap.QMIP_le')
('-d', 'A', 'BPP', 'QMIP_le') => ('-d', 'R', 'BPP', 'QMIP_le')
('-d', 'A', 'BPP', 'QMIP_le') => ('-d', 'AA', 'BPP', 'QMIP_le')
('-d', 'AA', 'BPP', 'QMIP_le') => ('-d', 'T', 'BPP', 'QMIP_le')
('-d', 'AA', 'BPP', 'QMIP_le') => ('-d', 'EA', 'BPP', 'QMIP_le')
('-d', 'AA', 'BPP', 'co.QMIP_le') => ('-d', 'T', 'BPP', 'co.QMIP_le')
('-d', 'AA', 'BPP', 'co.QMIP_le') => ('-d', 'EA', 'BPP', 'co.QMIP_le')
('-d', 'AA', 'BPP', 'cocap.QMIP_le') => ('-d', 'T', 'BPP', 'cocap.QMIP_le')
('-d', 'AA', 'BPP', 'cocap.QMIP_le') => ('-d', 'EA', 'BPP', 'cocap.QMIP_le')
('p', 'AA', 'BPP', 'cocap.QMIP_le') => ('p', 'T', 'BPP', 'cocap.QMIP_le')
('p', 'AA', 'BPP', 'cocap.QMIP_le') => ('p', 'EA', 'BPP', 'cocap.QMIP_le')
('p', 'AA', 'BPP', 'co.QMIP_le') => ('p', 'T', 'BPP', 'co.QMIP_le')
('p', 'AA', 'BPP', 'co.QMIP_le') => ('p', 'EA', 'BPP', 'co.QMIP_le')
('p', 'AA', 'BPP', 'QMIP_le') => ('p', 'T', 'BPP', 'QMIP_le')
('p', 'AA', 'BPP', 'QMIP_le') => ('p', 'EA', 'BPP', 'QMIP_le')
('d', 'R', 'NP', 'P') => ('-p', 'R', 'NP', 'P')
('d', 'R', 'NP', 'P') => ('d', 'A', 'NP', 'P')
('d', 'R', 'co.NP', 'P') => ('-p', 'R', 'co.NP', 'P')
('d', 'R', 'co.NP', 'P') => ('d', 'A', 'co.NP', 'P')
('-p', 'R', 'co.MA', 'P') => ('-p', 'A', 'co.MA', 'P')
('-p', 'R', 'MA', 'P') => ('-p', 'A', 'MA', 'P')
('-p', 'R', 'SBP', 'P') => ('-p', 'A', 'SBP', 'P')
('-p', 'R', 'co.SBP', 'P') => ('-p', 'A', 'co.SBP', 'P')
('d', 'R', 'co.MA', 'P') => ('d', 'A', 'co.MA', 'P')
('d', 'R', 'MA', 'P') => ('d', 'A', 'MA', 'P')
('d', 'R', 'SBP', 'P') => ('d', 'A', 'SBP', 'P')
('d', 'R', 'co.SBP', 'P') => ('d', 'A', 'co.SBP', 'P')
('d', 'A', 'co.NP', 'P') => ('-p', 'A', 'co.NP', 'P')
('d', 'A', 'NP', 'P') => ('-p', 'A', 'NP', 'P')
('p', 'A', 'QCMA/qpoly', 'QMA/qpoly') => ('-d', 'A', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'A', 'QCMA/qpoly', 'QMA/qpoly') => ('p', 'R', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'A', 'QCMA/qpoly', 'QMA/qpoly') => ('p', 'AA', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'A', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'A', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'A', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('p', 'R', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'A', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('p', 'AA', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly') => ('-d', 'A', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly') => ('p', 'R', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly') => ('p', 'AA', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly')
('d', 'A', 'cocap.QMA/qpoly', 'P') => ('-p', 'A', 'cocap.QMA/qpoly', 'P')
('d', 'A', 'co.QMA/qpoly', 'P') => ('-p', 'A', 'co.QMA/qpoly', 'P')
('d', 'A', 'QMA/qpoly', 'P') => ('-p', 'A', 'QMA/qpoly', 'P')
('d', 'A', 'ALL', 'cocap.QCMA/qpoly') => ('-p', 'A', 'ALL', 'cocap.QCMA/qpoly')
('d', 'A', 'ALL', 'QCMA/qpoly') => ('-p', 'A', 'ALL', 'QCMA/qpoly')
('d', 'A', 'ALL', 'co.QCMA/qpoly') => ('-p', 'A', 'ALL', 'co.QCMA/qpoly')
('-d', 'A', 'cocap.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'R', 'cocap.QCMA/qpoly', 'co.QMA/qpoly')
('-d', 'A', 'cocap.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'AA', 'cocap.QCMA/qpoly', 'co.QMA/qpoly')
('-d', 'A', 'cocap.QCMA/qpoly', 'QMA/qpoly') => ('-d', 'R', 'cocap.QCMA/qpoly', 'QMA/qpoly')
('-d', 'A', 'cocap.QCMA/qpoly', 'QMA/qpoly') => ('-d', 'AA', 'cocap.QCMA/qpoly', 'QMA/qpoly')
('-d', 'A', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly') => ('-d', 'R', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly')
('-d', 'A', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly') => ('-d', 'AA', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly')
('-d', 'A', 'BQP', 'cocap.QMA/qpoly') => ('-d', 'R', 'BQP', 'cocap.QMA/qpoly')
('-d', 'A', 'BQP', 'cocap.QMA/qpoly') => ('-d', 'AA', 'BQP', 'cocap.QMA/qpoly')
('-d', 'A', 'BQP', 'co.QMA/qpoly') => ('-d', 'R', 'BQP', 'co.QMA/qpoly')
('-d', 'A', 'BQP', 'co.QMA/qpoly') => ('-d', 'AA', 'BQP', 'co.QMA/qpoly')
('-d', 'A', 'BQP', 'QMA/qpoly') => ('-d', 'R', 'BQP', 'QMA/qpoly')
('-d', 'A', 'BQP', 'QMA/qpoly') => ('-d', 'AA', 'BQP', 'QMA/qpoly')
('-d', 'AA', 'BQP', 'QMA/qpoly') => ('-d', 'T', 'BQP', 'QMA/qpoly')
('-d', 'AA', 'BQP', 'QMA/qpoly') => ('-d', 'EA', 'BQP', 'QMA/qpoly')
('-d', 'AA', 'BQP', 'co.QMA/qpoly') => ('-d', 'T', 'BQP', 'co.QMA/qpoly')
('-d', 'AA', 'BQP', 'co.QMA/qpoly') => ('-d', 'EA', 'BQP', 'co.QMA/qpoly')
('-d', 'AA', 'BQP', 'cocap.QMA/qpoly') => ('-d', 'T', 'BQP', 'cocap.QMA/qpoly')
('-d', 'AA', 'BQP', 'cocap.QMA/qpoly') => ('-d', 'EA', 'BQP', 'cocap.QMA/qpoly')
('-d', 'A', 'cocap.QCMA/qpoly', 'PSPACE/poly') => ('-d', 'R', 'cocap.QCMA/qpoly', 'PSPACE/poly')
('-d', 'A', 'cocap.QCMA/qpoly', 'PSPACE/poly') => ('-d', 'AA', 'cocap.QCMA/qpoly', 'PSPACE/poly')
('-d', 'A', 'BQP/mpoly', 'PSPACE/poly') => ('-d', 'R', 'BQP/mpoly', 'PSPACE/poly')
('-d', 'A', 'BQP/mpoly', 'PSPACE/poly') => ('-d', 'AA', 'BQP/mpoly', 'PSPACE/poly')
('-d', 'AA', 'BQP/mpoly', 'PSPACE/poly') => ('-d', 'T', 'BQP/mpoly', 'PSPACE/poly')
('-d', 'AA', 'BQP/mpoly', 'PSPACE/poly') => ('-d', 'EA', 'BQP/mpoly', 'PSPACE/poly')
('-d', 'A', 'BQP/qpoly', 'PSPACE/poly') => ('-d', 'R', 'BQP/qpoly', 'PSPACE/poly')
('-d', 'A', 'BQP/qpoly', 'PSPACE/poly') => ('-d', 'AA', 'BQP/qpoly', 'PSPACE/poly')
('-d', 'AA', 'BQP/qpoly', 'PSPACE/poly') => ('-d', 'T', 'BQP/qpoly', 'PSPACE/poly')
('-d', 'AA', 'BQP/qpoly', 'PSPACE/poly') => ('-d', 'EA', 'BQP/qpoly', 'PSPACE/poly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'PSPACE/poly') => ('-d', 'T', 'cocap.QCMA/qpoly', 'PSPACE/poly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'PSPACE/poly') => ('-d', 'EA', 'cocap.QCMA/qpoly', 'PSPACE/poly')
('-d', 'A', 'BQP/mpoly', 'cocap.QMA/qpoly') => ('-d', 'R', 'BQP/mpoly', 'cocap.QMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'cocap.QMA/qpoly') => ('-d', 'AA', 'BQP/mpoly', 'cocap.QMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'co.QMA/qpoly') => ('-d', 'R', 'BQP/mpoly', 'co.QMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'co.QMA/qpoly') => ('-d', 'AA', 'BQP/mpoly', 'co.QMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'QMA/qpoly') => ('-d', 'R', 'BQP/mpoly', 'QMA/qpoly')
('-d', 'A', 'BQP/mpoly', 'QMA/qpoly') => ('-d', 'AA', 'BQP/mpoly', 'QMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'QMA/qpoly') => ('-d', 'T', 'BQP/mpoly', 'QMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'QMA/qpoly') => ('-d', 'EA', 'BQP/mpoly', 'QMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'co.QMA/qpoly') => ('-d', 'T', 'BQP/mpoly', 'co.QMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'co.QMA/qpoly') => ('-d', 'EA', 'BQP/mpoly', 'co.QMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'cocap.QMA/qpoly') => ('-d', 'T', 'BQP/mpoly', 'cocap.QMA/qpoly')
('-d', 'AA', 'BQP/mpoly', 'cocap.QMA/qpoly') => ('-d', 'EA', 'BQP/mpoly', 'cocap.QMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'cocap.QMA/qpoly') => ('-d', 'R', 'BQP/qpoly', 'cocap.QMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'cocap.QMA/qpoly') => ('-d', 'AA', 'BQP/qpoly', 'cocap.QMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'co.QMA/qpoly') => ('-d', 'R', 'BQP/qpoly', 'co.QMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'co.QMA/qpoly') => ('-d', 'AA', 'BQP/qpoly', 'co.QMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'QMA/qpoly') => ('-d', 'R', 'BQP/qpoly', 'QMA/qpoly')
('-d', 'A', 'BQP/qpoly', 'QMA/qpoly') => ('-d', 'AA', 'BQP/qpoly', 'QMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'QMA/qpoly') => ('-d', 'T', 'BQP/qpoly', 'QMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'QMA/qpoly') => ('-d', 'EA', 'BQP/qpoly', 'QMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'co.QMA/qpoly') => ('-d', 'T', 'BQP/qpoly', 'co.QMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'co.QMA/qpoly') => ('-d', 'EA', 'BQP/qpoly', 'co.QMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'cocap.QMA/qpoly') => ('-d', 'T', 'BQP/qpoly', 'cocap.QMA/qpoly')
('-d', 'AA', 'BQP/qpoly', 'cocap.QMA/qpoly') => ('-d', 'EA', 'BQP/qpoly', 'cocap.QMA/qpoly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly') => ('-d', 'T', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly') => ('-d', 'EA', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'T', 'cocap.QCMA/qpoly', 'co.QMA/qpoly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'EA', 'cocap.QCMA/qpoly', 'co.QMA/qpoly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'QMA/qpoly') => ('-d', 'T', 'cocap.QCMA/qpoly', 'QMA/qpoly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'QMA/qpoly') => ('-d', 'EA', 'cocap.QCMA/qpoly', 'QMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'co.QMA/qpoly') => ('p', 'R', 'cocap.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'co.QMA/qpoly') => ('p', 'AA', 'cocap.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'QMA/qpoly') => ('p', 'R', 'cocap.QCMA/qpoly', 'QMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'QMA/qpoly') => ('p', 'AA', 'cocap.QCMA/qpoly', 'QMA/qpoly')
('p', 'A', 'BQP', 'QMA/qpoly') => ('p', 'R', 'BQP', 'QMA/qpoly')
('p', 'A', 'BQP', 'QMA/qpoly') => ('p', 'AA', 'BQP', 'QMA/qpoly')
('p', 'A', 'BQP', 'co.QMA/qpoly') => ('p', 'R', 'BQP', 'co.QMA/qpoly')
('p', 'A', 'BQP', 'co.QMA/qpoly') => ('p', 'AA', 'BQP', 'co.QMA/qpoly')
('p', 'A', 'BQP', 'cocap.QMA/qpoly') => ('p', 'R', 'BQP', 'cocap.QMA/qpoly')
('p', 'A', 'BQP', 'cocap.QMA/qpoly') => ('p', 'AA', 'BQP', 'cocap.QMA/qpoly')
('p', 'AA', 'BQP', 'cocap.QMA/qpoly') => ('p', 'T', 'BQP', 'cocap.QMA/qpoly')
('p', 'AA', 'BQP', 'cocap.QMA/qpoly') => ('p', 'EA', 'BQP', 'cocap.QMA/qpoly')
('p', 'AA', 'BQP', 'co.QMA/qpoly') => ('p', 'T', 'BQP', 'co.QMA/qpoly')
('p', 'AA', 'BQP', 'co.QMA/qpoly') => ('p', 'EA', 'BQP', 'co.QMA/qpoly')
('p', 'AA', 'BQP', 'QMA/qpoly') => ('p', 'T', 'BQP', 'QMA/qpoly')
('p', 'AA', 'BQP', 'QMA/qpoly') => ('p', 'EA', 'BQP', 'QMA/qpoly')
('p', 'A', 'cocap.QCMA/qpoly', 'PSPACE/poly') => ('p', 'R', 'cocap.QCMA/qpoly', 'PSPACE/poly')
('p', 'A', 'cocap.QCMA/qpoly', 'PSPACE/poly') => ('p', 'AA', 'cocap.QCMA/qpoly', 'PSPACE/poly')
('p', 'A', 'BQP/mpoly', 'PSPACE/poly') => ('p', 'R', 'BQP/mpoly', 'PSPACE/poly')
('p', 'A', 'BQP/mpoly', 'PSPACE/poly') => ('p', 'AA', 'BQP/mpoly', 'PSPACE/poly')
('p', 'AA', 'BQP/mpoly', 'PSPACE/poly') => ('p', 'T', 'BQP/mpoly', 'PSPACE/poly')
('p', 'AA', 'BQP/mpoly', 'PSPACE/poly') => ('p', 'EA', 'BQP/mpoly', 'PSPACE/poly')
('p', 'A', 'BQP/qpoly', 'PSPACE/poly') => ('p', 'R', 'BQP/qpoly', 'PSPACE/poly')
('p', 'A', 'BQP/qpoly', 'PSPACE/poly') => ('p', 'AA', 'BQP/qpoly', 'PSPACE/poly')
('p', 'AA', 'BQP/qpoly', 'PSPACE/poly') => ('p', 'T', 'BQP/qpoly', 'PSPACE/poly')
('p', 'AA', 'BQP/qpoly', 'PSPACE/poly') => ('p', 'EA', 'BQP/qpoly', 'PSPACE/poly')
('p', 'AA', 'cocap.QCMA/qpoly', 'PSPACE/poly') => ('p', 'T', 'cocap.QCMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'cocap.QCMA/qpoly', 'PSPACE/poly') => ('p', 'EA', 'cocap.QCMA/qpoly', 'PSPACE/poly')
('p', 'A', 'BQP/mpoly', 'QMA/qpoly') => ('p', 'R', 'BQP/mpoly', 'QMA/qpoly')
('p', 'A', 'BQP/mpoly', 'QMA/qpoly') => ('p', 'AA', 'BQP/mpoly', 'QMA/qpoly')
('p', 'A', 'BQP/mpoly', 'co.QMA/qpoly') => ('p', 'R', 'BQP/mpoly', 'co.QMA/qpoly')
('p', 'A', 'BQP/mpoly', 'co.QMA/qpoly') => ('p', 'AA', 'BQP/mpoly', 'co.QMA/qpoly')
('p', 'A', 'BQP/mpoly', 'cocap.QMA/qpoly') => ('p', 'R', 'BQP/mpoly', 'cocap.QMA/qpoly')
('p', 'A', 'BQP/mpoly', 'cocap.QMA/qpoly') => ('p', 'AA', 'BQP/mpoly', 'cocap.QMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'cocap.QMA/qpoly') => ('p', 'T', 'BQP/mpoly', 'cocap.QMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'cocap.QMA/qpoly') => ('p', 'EA', 'BQP/mpoly', 'cocap.QMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'co.QMA/qpoly') => ('p', 'T', 'BQP/mpoly', 'co.QMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'co.QMA/qpoly') => ('p', 'EA', 'BQP/mpoly', 'co.QMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'QMA/qpoly') => ('p', 'T', 'BQP/mpoly', 'QMA/qpoly')
('p', 'AA', 'BQP/mpoly', 'QMA/qpoly') => ('p', 'EA', 'BQP/mpoly', 'QMA/qpoly')
('p', 'A', 'BQP/qpoly', 'QMA/qpoly') => ('p', 'R', 'BQP/qpoly', 'QMA/qpoly')
('p', 'A', 'BQP/qpoly', 'QMA/qpoly') => ('p', 'AA', 'BQP/qpoly', 'QMA/qpoly')
('p', 'A', 'BQP/qpoly', 'co.QMA/qpoly') => ('p', 'R', 'BQP/qpoly', 'co.QMA/qpoly')
('p', 'A', 'BQP/qpoly', 'co.QMA/qpoly') => ('p', 'AA', 'BQP/qpoly', 'co.QMA/qpoly')
('p', 'A', 'BQP/qpoly', 'cocap.QMA/qpoly') => ('p', 'R', 'BQP/qpoly', 'cocap.QMA/qpoly')
('p', 'A', 'BQP/qpoly', 'cocap.QMA/qpoly') => ('p', 'AA', 'BQP/qpoly', 'cocap.QMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'cocap.QMA/qpoly') => ('p', 'T', 'BQP/qpoly', 'cocap.QMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'cocap.QMA/qpoly') => ('p', 'EA', 'BQP/qpoly', 'cocap.QMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'co.QMA/qpoly') => ('p', 'T', 'BQP/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'co.QMA/qpoly') => ('p', 'EA', 'BQP/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'QMA/qpoly') => ('p', 'T', 'BQP/qpoly', 'QMA/qpoly')
('p', 'AA', 'BQP/qpoly', 'QMA/qpoly') => ('p', 'EA', 'BQP/qpoly', 'QMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'QMA/qpoly') => ('p', 'T', 'cocap.QCMA/qpoly', 'QMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'QMA/qpoly') => ('p', 'EA', 'cocap.QCMA/qpoly', 'QMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'co.QMA/qpoly') => ('p', 'T', 'cocap.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'co.QMA/qpoly') => ('p', 'EA', 'cocap.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly') => ('p', 'T', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly')
('p', 'AA', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly') => ('p', 'EA', 'cocap.QCMA/qpoly', 'cocap.QMA/qpoly')
('-d', 'A', 'co.QCMA/qpoly', 'PSPACE/poly') => ('-d', 'R', 'co.QCMA/qpoly', 'PSPACE/poly')
('-d', 'A', 'co.QCMA/qpoly', 'PSPACE/poly') => ('-d', 'AA', 'co.QCMA/qpoly', 'PSPACE/poly')
('-d', 'A', 'QCMA/qpoly', 'PSPACE/poly') => ('-d', 'R', 'QCMA/qpoly', 'PSPACE/poly')
('-d', 'A', 'QCMA/qpoly', 'PSPACE/poly') => ('-d', 'AA', 'QCMA/qpoly', 'PSPACE/poly')
('-d', 'AA', 'QCMA/qpoly', 'PSPACE/poly') => ('-d', 'T', 'QCMA/qpoly', 'PSPACE/poly')
('-d', 'AA', 'QCMA/qpoly', 'PSPACE/poly') => ('-d', 'EA', 'QCMA/qpoly', 'PSPACE/poly')
('-d', 'AA', 'co.QCMA/qpoly', 'PSPACE/poly') => ('-d', 'T', 'co.QCMA/qpoly', 'PSPACE/poly')
('-d', 'AA', 'co.QCMA/qpoly', 'PSPACE/poly') => ('-d', 'EA', 'co.QCMA/qpoly', 'PSPACE/poly')
('p', 'A', 'co.QCMA/qpoly', 'PSPACE/poly') => ('p', 'R', 'co.QCMA/qpoly', 'PSPACE/poly')
('p', 'A', 'co.QCMA/qpoly', 'PSPACE/poly') => ('p', 'AA', 'co.QCMA/qpoly', 'PSPACE/poly')
('p', 'A', 'QCMA/qpoly', 'PSPACE/poly') => ('p', 'R', 'QCMA/qpoly', 'PSPACE/poly')
('p', 'A', 'QCMA/qpoly', 'PSPACE/poly') => ('p', 'AA', 'QCMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'QCMA/qpoly', 'PSPACE/poly') => ('p', 'T', 'QCMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'QCMA/qpoly', 'PSPACE/poly') => ('p', 'EA', 'QCMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'co.QCMA/qpoly', 'PSPACE/poly') => ('p', 'T', 'co.QCMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'co.QCMA/qpoly', 'PSPACE/poly') => ('p', 'EA', 'co.QCMA/qpoly', 'PSPACE/poly')
('p', 'AA', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'AA', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('p', 'T', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('p', 'EA', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'AA', 'QCMA/qpoly', 'QMA/qpoly') => ('-d', 'AA', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'AA', 'QCMA/qpoly', 'QMA/qpoly') => ('p', 'T', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'AA', 'QCMA/qpoly', 'QMA/qpoly') => ('p', 'EA', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'EA', 'QCMA/qpoly', 'QMA/qpoly') => ('-d', 'EA', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'EA', 'QCMA/qpoly', 'QMA/qpoly') => ('p', 'E', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'EA', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'EA', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'EA', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('p', 'E', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'E', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'E', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'E', 'QCMA/qpoly', 'QMA/qpoly') => ('-d', 'E', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'T', 'QCMA/qpoly', 'QMA/qpoly') => ('-d', 'T', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'T', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'T', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'R', 'co.QCMA/qpoly', 'co.QMA/qpoly') => ('-d', 'R', 'co.QCMA/qpoly', 'co.QMA/qpoly')
('p', 'R', 'QCMA/qpoly', 'QMA/qpoly') => ('-d', 'R', 'QCMA/qpoly', 'QMA/qpoly')
('p', 'A', 'QMIP_le', 'NEXP') => ('-d', 'A', 'QMIP_le', 'NEXP')
('p', 'A', 'QMIP_le', 'NEXP') => ('p', 'R', 'QMIP_le', 'NEXP')
('p', 'A', 'QMIP_le', 'NEXP') => ('p', 'AA', 'QMIP_le', 'NEXP')
('p', 'A', 'co.QMIP_le', 'co.NEXP') => ('-d', 'A', 'co.QMIP_le', 'co.NEXP')
('p', 'A', 'co.QMIP_le', 'co.NEXP') => ('p', 'R', 'co.QMIP_le', 'co.NEXP')
('p', 'A', 'co.QMIP_le', 'co.NEXP') => ('p', 'AA', 'co.QMIP_le', 'co.NEXP')
('p', 'A', 'cocap.QMIP_le', 'cocap.NEXP') => ('-d', 'A', 'cocap.QMIP_le', 'cocap.NEXP')
('p', 'A', 'cocap.QMIP_le', 'cocap.NEXP') => ('p', 'R', 'cocap.QMIP_le', 'cocap.NEXP')
('p', 'A', 'cocap.QMIP_le', 'cocap.NEXP') => ('p', 'AA', 'cocap.QMIP_le', 'cocap.NEXP')
('d', 'A', 'cocap.NEXP', 'RP') => ('-p', 'A', 'cocap.NEXP', 'RP')
('d', 'A', 'cocap.NEXP', 'co.RP') => ('-p', 'A', 'cocap.NEXP', 'co.RP')
('p', 'A', 'P', 'cocap.NEXP') => ('-d', 'A', 'P', 'cocap.NEXP')
('p', 'A', 'P', 'cocap.NEXP') => ('p', 'R', 'P', 'cocap.NEXP')
('p', 'A', 'P', 'cocap.NEXP') => ('p', 'AA', 'P', 'cocap.NEXP')
('-d', 'A', 'P', 'co.NEXP') => ('-d', 'R', 'P', 'co.NEXP')
('-d', 'A', 'P', 'co.NEXP') => ('-d', 'AA', 'P', 'co.NEXP')
('-d', 'A', 'P', 'NEXP') => ('-d', 'R', 'P', 'NEXP')
('-d', 'A', 'P', 'NEXP') => ('-d', 'AA', 'P', 'NEXP')
('-d', 'A', 'P', 'cocap.NEXP') => ('-d', 'R', 'P', 'cocap.NEXP')
('-d', 'A', 'P', 'cocap.NEXP') => ('-d', 'AA', 'P', 'cocap.NEXP')
('-d', 'A', 'P', 'R') => ('-d', 'R', 'P', 'R')
('-d', 'A', 'P', 'R') => ('-d', 'AA', 'P', 'R')
('-d', 'A', 'P', 'RE') => ('-d', 'R', 'P', 'RE')
('-d', 'A', 'P', 'RE') => ('-d', 'AA', 'P', 'RE')
('-d', 'A', 'P', 'co.RE') => ('-d', 'R', 'P', 'co.RE')
('-d', 'A', 'P', 'co.RE') => ('-d', 'AA', 'P', 'co.RE')
('-d', 'AA', 'P', 'co.RE') => ('-d', 'T', 'P', 'co.RE')
('-d', 'AA', 'P', 'co.RE') => ('-d', 'EA', 'P', 'co.RE')
('-d', 'AA', 'P', 'RE') => ('-d', 'T', 'P', 'RE')
('-d', 'AA', 'P', 'RE') => ('-d', 'EA', 'P', 'RE')
('-d', 'AA', 'P', 'R') => ('-d', 'T', 'P', 'R')
('-d', 'AA', 'P', 'R') => ('-d', 'EA', 'P', 'R')
('-d', 'AA', 'P', 'cocap.NEXP') => ('-d', 'T', 'P', 'cocap.NEXP')
('-d', 'AA', 'P', 'cocap.NEXP') => ('-d', 'EA', 'P', 'cocap.NEXP')
('-d', 'AA', 'P', 'co.NEXP') => ('-d', 'T', 'P', 'co.NEXP')
('-d', 'AA', 'P', 'co.NEXP') => ('-d', 'EA', 'P', 'co.NEXP')
('-d', 'AA', 'P', 'NEXP') => ('-d', 'T', 'P', 'NEXP')
('-d', 'AA', 'P', 'NEXP') => ('-d', 'EA', 'P', 'NEXP')
('p', 'A', 'P', 'co.NEXP') => ('p', 'R', 'P', 'co.NEXP')
('p', 'A', 'P', 'co.NEXP') => ('p', 'AA', 'P', 'co.NEXP')
('p', 'A', 'P', 'NEXP') => ('p', 'R', 'P', 'NEXP')
('p', 'A', 'P', 'NEXP') => ('p', 'AA', 'P', 'NEXP')
('p', 'A', 'P', 'R') => ('p', 'R', 'P', 'R')
('p', 'A', 'P', 'R') => ('p', 'AA', 'P', 'R')
('p', 'A', 'P', 'RE') => ('p', 'R', 'P', 'RE')
('p', 'A', 'P', 'RE') => ('p', 'AA', 'P', 'RE')
('p', 'A', 'P', 'co.RE') => ('p', 'R', 'P', 'co.RE')
('p', 'A', 'P', 'co.RE') => ('p', 'AA', 'P', 'co.RE')
('p', 'AA', 'P', 'co.RE') => ('p', 'T', 'P', 'co.RE')
('p', 'AA', 'P', 'co.RE') => ('p', 'EA', 'P', 'co.RE')
('p', 'AA', 'P', 'RE') => ('p', 'T', 'P', 'RE')
('p', 'AA', 'P', 'RE') => ('p', 'EA', 'P', 'RE')
('p', 'AA', 'P', 'R') => ('p', 'T', 'P', 'R')
('p', 'AA', 'P', 'R') => ('p', 'EA', 'P', 'R')
('p', 'AA', 'P', 'NEXP') => ('p', 'T', 'P', 'NEXP')
('p', 'AA', 'P', 'NEXP') => ('p', 'EA', 'P', 'NEXP')
('p', 'AA', 'P', 'co.NEXP') => ('p', 'T', 'P', 'co.NEXP')
('p', 'AA', 'P', 'co.NEXP') => ('p', 'EA', 'P', 'co.NEXP')
('p', 'AA', 'P', 'cocap.NEXP') => ('p', 'T', 'P', 'cocap.NEXP')
('p', 'AA', 'P', 'cocap.NEXP') => ('p', 'EA', 'P', 'cocap.NEXP')
('-d', 'A', 'cocap.QMIP_le', 'ALL') => ('-d', 'R', 'cocap.QMIP_le', 'ALL')
('-d', 'A', 'cocap.QMIP_le', 'ALL') => ('-d', 'AA', 'cocap.QMIP_le', 'ALL')
('-d', 'AA', 'cocap.QMIP_le', 'ALL') => ('-d', 'T', 'cocap.QMIP_le', 'ALL')
('-d', 'AA', 'cocap.QMIP_le', 'ALL') => ('-d', 'EA', 'cocap.QMIP_le', 'ALL')
('p', 'A', 'cocap.QMIP_le', 'ALL') => ('p', 'R', 'cocap.QMIP_le', 'ALL')
('p', 'A', 'cocap.QMIP_le', 'ALL') => ('p', 'AA', 'cocap.QMIP_le', 'ALL')
('p', 'AA', 'cocap.QMIP_le', 'ALL') => ('p', 'T', 'cocap.QMIP_le', 'ALL')
('p', 'AA', 'cocap.QMIP_le', 'ALL') => ('p', 'EA', 'cocap.QMIP_le', 'ALL')
('d', 'A', 'cocap.NEXP', 'NP') => ('-p', 'A', 'cocap.NEXP', 'NP')
('d', 'A', 'cocap.NEXP', 'co.NP') => ('-p', 'A', 'cocap.NEXP', 'co.NP')
('-d', 'A', 'cocap.QMIP_le', 'co.NEXP') => ('-d', 'R', 'cocap.QMIP_le', 'co.NEXP')
('-d', 'A', 'cocap.QMIP_le', 'co.NEXP') => ('-d', 'AA', 'cocap.QMIP_le', 'co.NEXP')
('-d', 'A', 'cocap.QMIP_le', 'NEXP') => ('-d', 'R', 'cocap.QMIP_le', 'NEXP')
('-d', 'A', 'cocap.QMIP_le', 'NEXP') => ('-d', 'AA', 'cocap.QMIP_le', 'NEXP')
('-d', 'A', 'cocap.QMIP_le', 'cocap.NEXP') => ('-d', 'R', 'cocap.QMIP_le', 'cocap.NEXP')
('-d', 'A', 'cocap.QMIP_le', 'cocap.NEXP') => ('-d', 'AA', 'cocap.QMIP_le', 'cocap.NEXP')
('-d', 'A', 'cocap.QMIP_le', 'R') => ('-d', 'R', 'cocap.QMIP_le', 'R')
('-d', 'A', 'cocap.QMIP_le', 'R') => ('-d', 'AA', 'cocap.QMIP_le', 'R')
('-d', 'A', 'cocap.QMIP_le', 'RE') => ('-d', 'R', 'cocap.QMIP_le', 'RE')
('-d', 'A', 'cocap.QMIP_le', 'RE') => ('-d', 'AA', 'cocap.QMIP_le', 'RE')
('-d', 'A', 'cocap.QMIP_le', 'co.RE') => ('-d', 'R', 'cocap.QMIP_le', 'co.RE')
('-d', 'A', 'cocap.QMIP_le', 'co.RE') => ('-d', 'AA', 'cocap.QMIP_le', 'co.RE')
('-d', 'A', 'BPP', 'co.RE') => ('-d', 'R', 'BPP', 'co.RE')
('-d', 'A', 'BPP', 'co.RE') => ('-d', 'AA', 'BPP', 'co.RE')
('-d', 'A', 'BPP', 'RE') => ('-d', 'R', 'BPP', 'RE')
('-d', 'A', 'BPP', 'RE') => ('-d', 'AA', 'BPP', 'RE')
('-d', 'A', 'BPP', 'R') => ('-d', 'R', 'BPP', 'R')
('-d', 'A', 'BPP', 'R') => ('-d', 'AA', 'BPP', 'R')
('-d', 'AA', 'BPP', 'R') => ('-d', 'T', 'BPP', 'R')
('-d', 'AA', 'BPP', 'R') => ('-d', 'EA', 'BPP', 'R')
('-d', 'AA', 'BPP', 'RE') => ('-d', 'T', 'BPP', 'RE')
('-d', 'AA', 'BPP', 'RE') => ('-d', 'EA', 'BPP', 'RE')
('-d', 'AA', 'BPP', 'co.RE') => ('-d', 'T', 'BPP', 'co.RE')
('-d', 'AA', 'BPP', 'co.RE') => ('-d', 'EA', 'BPP', 'co.RE')
('-d', 'AA', 'cocap.QMIP_le', 'co.RE') => ('-d', 'T', 'cocap.QMIP_le', 'co.RE')
('-d', 'AA', 'cocap.QMIP_le', 'co.RE') => ('-d', 'EA', 'cocap.QMIP_le', 'co.RE')
('-d', 'AA', 'cocap.QMIP_le', 'RE') => ('-d', 'T', 'cocap.QMIP_le', 'RE')
('-d', 'AA', 'cocap.QMIP_le', 'RE') => ('-d', 'EA', 'cocap.QMIP_le', 'RE')
('-d', 'AA', 'cocap.QMIP_le', 'R') => ('-d', 'T', 'cocap.QMIP_le', 'R')
('-d', 'AA', 'cocap.QMIP_le', 'R') => ('-d', 'EA', 'cocap.QMIP_le', 'R')
('-d', 'A', 'cocap.QMIP_le', 'NEXP/poly') => ('-d', 'R', 'cocap.QMIP_le', 'NEXP/poly')
('-d', 'A', 'cocap.QMIP_le', 'NEXP/poly') => ('-d', 'AA', 'cocap.QMIP_le', 'NEXP/poly')
('-d', 'AA', 'cocap.QMIP_le', 'NEXP/poly') => ('-d', 'T', 'cocap.QMIP_le', 'NEXP/poly')
('-d', 'AA', 'cocap.QMIP_le', 'NEXP/poly') => ('-d', 'EA', 'cocap.QMIP_le', 'NEXP/poly')
('-d', 'A', 'BPP', 'cocap.NEXP') => ('-d', 'R', 'BPP', 'cocap.NEXP')
('-d', 'A', 'BPP', 'cocap.NEXP') => ('-d', 'AA', 'BPP', 'cocap.NEXP')
('-d', 'A', 'BPP', 'co.NEXP') => ('-d', 'R', 'BPP', 'co.NEXP')
('-d', 'A', 'BPP', 'co.NEXP') => ('-d', 'AA', 'BPP', 'co.NEXP')
('-d', 'A', 'BPP', 'NEXP') => ('-d', 'R', 'BPP', 'NEXP')
('-d', 'A', 'BPP', 'NEXP') => ('-d', 'AA', 'BPP', 'NEXP')
('-d', 'AA', 'BPP', 'NEXP') => ('-d', 'T', 'BPP', 'NEXP')
('-d', 'AA', 'BPP', 'NEXP') => ('-d', 'EA', 'BPP', 'NEXP')
('-d', 'AA', 'BPP', 'co.NEXP') => ('-d', 'T', 'BPP', 'co.NEXP')
('-d', 'AA', 'BPP', 'co.NEXP') => ('-d', 'EA', 'BPP', 'co.NEXP')
('-d', 'AA', 'BPP', 'cocap.NEXP') => ('-d', 'T', 'BPP', 'cocap.NEXP')
('-d', 'AA', 'BPP', 'cocap.NEXP') => ('-d', 'EA', 'BPP', 'cocap.NEXP')
('-d', 'AA', 'cocap.QMIP_le', 'cocap.NEXP') => ('-d', 'T', 'cocap.QMIP_le', 'cocap.NEXP')
('-d', 'AA', 'cocap.QMIP_le', 'cocap.NEXP') => ('-d', 'EA', 'cocap.QMIP_le', 'cocap.NEXP')
('-d', 'AA', 'cocap.QMIP_le', 'co.NEXP') => ('-d', 'T', 'cocap.QMIP_le', 'co.NEXP')
('-d', 'AA', 'cocap.QMIP_le', 'co.NEXP') => ('-d', 'EA', 'cocap.QMIP_le', 'co.NEXP')
('-d', 'AA', 'cocap.QMIP_le', 'NEXP') => ('-d', 'T', 'cocap.QMIP_le', 'NEXP')
('-d', 'AA', 'cocap.QMIP_le', 'NEXP') => ('-d', 'EA', 'cocap.QMIP_le', 'NEXP')
('p', 'A', 'cocap.QMIP_le', 'co.NEXP') => ('p', 'R', 'cocap.QMIP_le', 'co.NEXP')
('p', 'A', 'cocap.QMIP_le', 'co.NEXP') => ('p', 'AA', 'cocap.QMIP_le', 'co.NEXP')
('p', 'A', 'cocap.QMIP_le', 'NEXP') => ('p', 'R', 'cocap.QMIP_le', 'NEXP')
('p', 'A', 'cocap.QMIP_le', 'NEXP') => ('p', 'AA', 'cocap.QMIP_le', 'NEXP')
('p', 'A', 'cocap.QMIP_le', 'R') => ('p', 'R', 'cocap.QMIP_le', 'R')
('p', 'A', 'cocap.QMIP_le', 'R') => ('p', 'AA', 'cocap.QMIP_le', 'R')
('p', 'A', 'cocap.QMIP_le', 'RE') => ('p', 'R', 'cocap.QMIP_le', 'RE')
('p', 'A', 'cocap.QMIP_le', 'RE') => ('p', 'AA', 'cocap.QMIP_le', 'RE')
('p', 'A', 'cocap.QMIP_le', 'co.RE') => ('p', 'R', 'cocap.QMIP_le', 'co.RE')
('p', 'A', 'cocap.QMIP_le', 'co.RE') => ('p', 'AA', 'cocap.QMIP_le', 'co.RE')
('p', 'A', 'BPP', 'co.RE') => ('p', 'R', 'BPP', 'co.RE')
('p', 'A', 'BPP', 'co.RE') => ('p', 'AA', 'BPP', 'co.RE')
('p', 'A', 'BPP', 'RE') => ('p', 'R', 'BPP', 'RE')
('p', 'A', 'BPP', 'RE') => ('p', 'AA', 'BPP', 'RE')
('p', 'A', 'BPP', 'R') => ('p', 'R', 'BPP', 'R')
('p', 'A', 'BPP', 'R') => ('p', 'AA', 'BPP', 'R')
('p', 'AA', 'BPP', 'R') => ('p', 'T', 'BPP', 'R')
('p', 'AA', 'BPP', 'R') => ('p', 'EA', 'BPP', 'R')
('p', 'AA', 'BPP', 'RE') => ('p', 'T', 'BPP', 'RE')
('p', 'AA', 'BPP', 'RE') => ('p', 'EA', 'BPP', 'RE')
('p', 'AA', 'BPP', 'co.RE') => ('p', 'T', 'BPP', 'co.RE')
('p', 'AA', 'BPP', 'co.RE') => ('p', 'EA', 'BPP', 'co.RE')
('p', 'AA', 'cocap.QMIP_le', 'co.RE') => ('p', 'T', 'cocap.QMIP_le', 'co.RE')
('p', 'AA', 'cocap.QMIP_le', 'co.RE') => ('p', 'EA', 'cocap.QMIP_le', 'co.RE')
('p', 'AA', 'cocap.QMIP_le', 'RE') => ('p', 'T', 'cocap.QMIP_le', 'RE')
('p', 'AA', 'cocap.QMIP_le', 'RE') => ('p', 'EA', 'cocap.QMIP_le', 'RE')
('p', 'AA', 'cocap.QMIP_le', 'R') => ('p', 'T', 'cocap.QMIP_le', 'R')
('p', 'AA', 'cocap.QMIP_le', 'R') => ('p', 'EA', 'cocap.QMIP_le', 'R')
('p', 'A', 'cocap.QMIP_le', 'NEXP/poly') => ('p', 'R', 'cocap.QMIP_le', 'NEXP/poly')
('p', 'A', 'cocap.QMIP_le', 'NEXP/poly') => ('p', 'AA', 'cocap.QMIP_le', 'NEXP/poly')
('p', 'AA', 'cocap.QMIP_le', 'NEXP/poly') => ('p', 'T', 'cocap.QMIP_le', 'NEXP/poly')
('p', 'AA', 'cocap.QMIP_le', 'NEXP/poly') => ('p', 'EA', 'cocap.QMIP_le', 'NEXP/poly')
('p', 'A', 'BPP', 'NEXP') => ('p', 'R', 'BPP', 'NEXP')
('p', 'A', 'BPP', 'NEXP') => ('p', 'AA', 'BPP', 'NEXP')
('p', 'A', 'BPP', 'co.NEXP') => ('p', 'R', 'BPP', 'co.NEXP')
('p', 'A', 'BPP', 'co.NEXP') => ('p', 'AA', 'BPP', 'co.NEXP')
('p', 'A', 'BPP', 'cocap.NEXP') => ('p', 'R', 'BPP', 'cocap.NEXP')
('p', 'A', 'BPP', 'cocap.NEXP') => ('p', 'AA', 'BPP', 'cocap.NEXP')
('p', 'AA', 'BPP', 'cocap.NEXP') => ('p', 'T', 'BPP', 'cocap.NEXP')
('p', 'AA', 'BPP', 'cocap.NEXP') => ('p', 'EA', 'BPP', 'cocap.NEXP')
('p', 'AA', 'BPP', 'co.NEXP') => ('p', 'T', 'BPP', 'co.NEXP')
('p', 'AA', 'BPP', 'co.NEXP') => ('p', 'EA', 'BPP', 'co.NEXP')
('p', 'AA', 'BPP', 'NEXP') => ('p', 'T', 'BPP', 'NEXP')
('p', 'AA', 'BPP', 'NEXP') => ('p', 'EA', 'BPP', 'NEXP')
('p', 'AA', 'cocap.QMIP_le', 'NEXP') => ('p', 'T', 'cocap.QMIP_le', 'NEXP')
('p', 'AA', 'cocap.QMIP_le', 'NEXP') => ('p', 'EA', 'cocap.QMIP_le', 'NEXP')
('p', 'AA', 'cocap.QMIP_le', 'co.NEXP') => ('p', 'T', 'cocap.QMIP_le', 'co.NEXP')
('p', 'AA', 'cocap.QMIP_le', 'co.NEXP') => ('p', 'EA', 'cocap.QMIP_le', 'co.NEXP')
('p', 'AA', 'cocap.QMIP_le', 'cocap.NEXP') => ('p', 'T', 'cocap.QMIP_le', 'cocap.NEXP')
('p', 'AA', 'cocap.QMIP_le', 'cocap.NEXP') => ('p', 'EA', 'cocap.QMIP_le', 'cocap.NEXP')
('-d', 'A', 'co.QMIP_le', 'ALL') => ('-d', 'R', 'co.QMIP_le', 'ALL')
('-d', 'A', 'co.QMIP_le', 'ALL') => ('-d', 'AA', 'co.QMIP_le', 'ALL')
('-d', 'A', 'QMIP_le', 'ALL') => ('-d', 'R', 'QMIP_le', 'ALL')
('-d', 'A', 'QMIP_le', 'ALL') => ('-d', 'AA', 'QMIP_le', 'ALL')
('-d', 'AA', 'QMIP_le', 'ALL') => ('-d', 'T', 'QMIP_le', 'ALL')
('-d', 'AA', 'QMIP_le', 'ALL') => ('-d', 'EA', 'QMIP_le', 'ALL')
('-d', 'AA', 'co.QMIP_le', 'ALL') => ('-d', 'T', 'co.QMIP_le', 'ALL')
('-d', 'AA', 'co.QMIP_le', 'ALL') => ('-d', 'EA', 'co.QMIP_le', 'ALL')
('p', 'A', 'co.QMIP_le', 'ALL') => ('p', 'R', 'co.QMIP_le', 'ALL')
('p', 'A', 'co.QMIP_le', 'ALL') => ('p', 'AA', 'co.QMIP_le', 'ALL')
('p', 'A', 'QMIP_le', 'ALL') => ('p', 'R', 'QMIP_le', 'ALL')
('p', 'A', 'QMIP_le', 'ALL') => ('p', 'AA', 'QMIP_le', 'ALL')
('p', 'AA', 'QMIP_le', 'ALL') => ('p', 'T', 'QMIP_le', 'ALL')
('p', 'AA', 'QMIP_le', 'ALL') => ('p', 'EA', 'QMIP_le', 'ALL')
('p', 'AA', 'co.QMIP_le', 'ALL') => ('p', 'T', 'co.QMIP_le', 'ALL')
('p', 'AA', 'co.QMIP_le', 'ALL') => ('p', 'EA', 'co.QMIP_le', 'ALL')
('-d', 'A', 'co.QMIP_le', 'R') => ('-d', 'R', 'co.QMIP_le', 'R')
('-d', 'A', 'co.QMIP_le', 'R') => ('-d', 'AA', 'co.QMIP_le', 'R')
('-d', 'A', 'QMIP_le', 'R') => ('-d', 'R', 'QMIP_le', 'R')
('-d', 'A', 'QMIP_le', 'R') => ('-d', 'AA', 'QMIP_le', 'R')
('-d', 'A', 'QMIP_le', 'RE') => ('-d', 'R', 'QMIP_le', 'RE')
('-d', 'A', 'QMIP_le', 'RE') => ('-d', 'AA', 'QMIP_le', 'RE')
('-d', 'A', 'co.QMIP_le', 'co.RE') => ('-d', 'R', 'co.QMIP_le', 'co.RE')
('-d', 'A', 'co.QMIP_le', 'co.RE') => ('-d', 'AA', 'co.QMIP_le', 'co.RE')
('-d', 'AA', 'co.QMIP_le', 'co.RE') => ('-d', 'T', 'co.QMIP_le', 'co.RE')
('-d', 'AA', 'co.QMIP_le', 'co.RE') => ('-d', 'EA', 'co.QMIP_le', 'co.RE')
('-d', 'AA', 'QMIP_le', 'RE') => ('-d', 'T', 'QMIP_le', 'RE')
('-d', 'AA', 'QMIP_le', 'RE') => ('-d', 'EA', 'QMIP_le', 'RE')
('-d', 'A', 'QMIP_le', 'co.RE') => ('-d', 'R', 'QMIP_le', 'co.RE')
('-d', 'A', 'QMIP_le', 'co.RE') => ('-d', 'AA', 'QMIP_le', 'co.RE')
('-d', 'A', 'co.QMIP_le', 'RE') => ('-d', 'R', 'co.QMIP_le', 'RE')
('-d', 'A', 'co.QMIP_le', 'RE') => ('-d', 'AA', 'co.QMIP_le', 'RE')
('-d', 'AA', 'co.QMIP_le', 'RE') => ('-d', 'T', 'co.QMIP_le', 'RE')
('-d', 'AA', 'co.QMIP_le', 'RE') => ('-d', 'EA', 'co.QMIP_le', 'RE')
('-d', 'AA', 'QMIP_le', 'co.RE') => ('-d', 'T', 'QMIP_le', 'co.RE')
('-d', 'AA', 'QMIP_le', 'co.RE') => ('-d', 'EA', 'QMIP_le', 'co.RE')
('-d', 'AA', 'QMIP_le', 'R') => ('-d', 'T', 'QMIP_le', 'R')
('-d', 'AA', 'QMIP_le', 'R') => ('-d', 'EA', 'QMIP_le', 'R')
('-d', 'AA', 'co.QMIP_le', 'R') => ('-d', 'T', 'co.QMIP_le', 'R')
('-d', 'AA', 'co.QMIP_le', 'R') => ('-d', 'EA', 'co.QMIP_le', 'R')
('p', 'A', 'co.QMIP_le', 'R') => ('p', 'R', 'co.QMIP_le', 'R')
('p', 'A', 'co.QMIP_le', 'R') => ('p', 'AA', 'co.QMIP_le', 'R')
('p', 'A', 'QMIP_le', 'R') => ('p', 'R', 'QMIP_le', 'R')
('p', 'A', 'QMIP_le', 'R') => ('p', 'AA', 'QMIP_le', 'R')
('p', 'A', 'QMIP_le', 'RE') => ('p', 'R', 'QMIP_le', 'RE')
('p', 'A', 'QMIP_le', 'RE') => ('p', 'AA', 'QMIP_le', 'RE')
('p', 'A', 'co.QMIP_le', 'co.RE') => ('p', 'R', 'co.QMIP_le', 'co.RE')
('p', 'A', 'co.QMIP_le', 'co.RE') => ('p', 'AA', 'co.QMIP_le', 'co.RE')
('p', 'AA', 'co.QMIP_le', 'co.RE') => ('p', 'T', 'co.QMIP_le', 'co.RE')
('p', 'AA', 'co.QMIP_le', 'co.RE') => ('p', 'EA', 'co.QMIP_le', 'co.RE')
('p', 'AA', 'QMIP_le', 'RE') => ('p', 'T', 'QMIP_le', 'RE')
('p', 'AA', 'QMIP_le', 'RE') => ('p', 'EA', 'QMIP_le', 'RE')
('p', 'A', 'QMIP_le', 'co.RE') => ('p', 'R', 'QMIP_le', 'co.RE')
('p', 'A', 'QMIP_le', 'co.RE') => ('p', 'AA', 'QMIP_le', 'co.RE')
('p', 'A', 'co.QMIP_le', 'RE') => ('p', 'R', 'co.QMIP_le', 'RE')
('p', 'A', 'co.QMIP_le', 'RE') => ('p', 'AA', 'co.QMIP_le', 'RE')
('p', 'AA', 'co.QMIP_le', 'RE') => ('p', 'T', 'co.QMIP_le', 'RE')
('p', 'AA', 'co.QMIP_le', 'RE') => ('p', 'EA', 'co.QMIP_le', 'RE')
('p', 'AA', 'co.QMIP_le', 'R') => ('p', 'T', 'co.QMIP_le', 'R')
('p', 'AA', 'co.QMIP_le', 'R') => ('p', 'EA', 'co.QMIP_le', 'R')
('p', 'AA', 'QMIP_le', 'R') => ('p', 'T', 'QMIP_le', 'R')
('p', 'AA', 'QMIP_le', 'R') => ('p', 'EA', 'QMIP_le', 'R')
('p', 'AA', 'QMIP_le', 'co.RE') => ('p', 'T', 'QMIP_le', 'co.RE')
('p', 'AA', 'QMIP_le', 'co.RE') => ('p', 'EA', 'QMIP_le', 'co.RE')
('-d', 'A', 'co.QMIP_le', 'NEXP/poly') => ('-d', 'R', 'co.QMIP_le', 'NEXP/poly')
('-d', 'A', 'co.QMIP_le', 'NEXP/poly') => ('-d', 'AA', 'co.QMIP_le', 'NEXP/poly')
('-d', 'A', 'QMIP_le', 'NEXP/poly') => ('-d', 'R', 'QMIP_le', 'NEXP/poly')
('-d', 'A', 'QMIP_le', 'NEXP/poly') => ('-d', 'AA', 'QMIP_le', 'NEXP/poly')
('-d', 'AA', 'QMIP_le', 'NEXP/poly') => ('-d', 'T', 'QMIP_le', 'NEXP/poly')
('-d', 'AA', 'QMIP_le', 'NEXP/poly') => ('-d', 'EA', 'QMIP_le', 'NEXP/poly')
('-d', 'AA', 'co.QMIP_le', 'NEXP/poly') => ('-d', 'T', 'co.QMIP_le', 'NEXP/poly')
('-d', 'AA', 'co.QMIP_le', 'NEXP/poly') => ('-d', 'EA', 'co.QMIP_le', 'NEXP/poly')
('p', 'A', 'co.QMIP_le', 'NEXP/poly') => ('p', 'R', 'co.QMIP_le', 'NEXP/poly')
('p', 'A', 'co.QMIP_le', 'NEXP/poly') => ('p', 'AA', 'co.QMIP_le', 'NEXP/poly')
('p', 'A', 'QMIP_le', 'NEXP/poly') => ('p', 'R', 'QMIP_le', 'NEXP/poly')
('p', 'A', 'QMIP_le', 'NEXP/poly') => ('p', 'AA', 'QMIP_le', 'NEXP/poly')
('p', 'AA', 'QMIP_le', 'NEXP/poly') => ('p', 'T', 'QMIP_le', 'NEXP/poly')
('p', 'AA', 'QMIP_le', 'NEXP/poly') => ('p', 'EA', 'QMIP_le', 'NEXP/poly')
('p', 'AA', 'co.QMIP_le', 'NEXP/poly') => ('p', 'T', 'co.QMIP_le', 'NEXP/poly')
('p', 'AA', 'co.QMIP_le', 'NEXP/poly') => ('p', 'EA', 'co.QMIP_le', 'NEXP/poly')
('p', 'AA', 'co.QMIP_le', 'co.NEXP') => ('-d', 'AA', 'co.QMIP_le', 'co.NEXP')
('p', 'AA', 'co.QMIP_le', 'co.NEXP') => ('p', 'T', 'co.QMIP_le', 'co.NEXP')
('p', 'AA', 'co.QMIP_le', 'co.NEXP') => ('p', 'EA', 'co.QMIP_le', 'co.NEXP')
('p', 'AA', 'QMIP_le', 'NEXP') => ('-d', 'AA', 'QMIP_le', 'NEXP')
('p', 'AA', 'QMIP_le', 'NEXP') => ('p', 'T', 'QMIP_le', 'NEXP')
('p', 'AA', 'QMIP_le', 'NEXP') => ('p', 'EA', 'QMIP_le', 'NEXP')
('p', 'EA', 'QMIP_le', 'NEXP') => ('-d', 'EA', 'QMIP_le', 'NEXP')
('p', 'EA', 'QMIP_le', 'NEXP') => ('p', 'E', 'QMIP_le', 'NEXP')
('p', 'EA', 'co.QMIP_le', 'co.NEXP') => ('-d', 'EA', 'co.QMIP_le', 'co.NEXP')
('p', 'EA', 'co.QMIP_le', 'co.NEXP') => ('p', 'E', 'co.QMIP_le', 'co.NEXP')
('p', 'E', 'co.QMIP_le', 'co.NEXP') => ('-d', 'E', 'co.QMIP_le', 'co.NEXP')
('p', 'E', 'QMIP_le', 'NEXP') => ('-d', 'E', 'QMIP_le', 'NEXP')
('p', 'T', 'QMIP_le', 'NEXP') => ('-d', 'T', 'QMIP_le', 'NEXP')
('p', 'T', 'co.QMIP_le', 'co.NEXP') => ('-d', 'T', 'co.QMIP_le', 'co.NEXP')
('p', 'R', 'co.QMIP_le', 'co.NEXP') => ('-d', 'R', 'co.QMIP_le', 'co.NEXP')
('p', 'R', 'QMIP_le', 'NEXP') => ('-d', 'R', 'QMIP_le', 'NEXP')
('p', 'A', 'SBP', 'AM') => ('-d', 'A', 'SBP', 'AM')
('p', 'A', 'SBP', 'AM') => ('p', 'R', 'SBP', 'AM')
('p', 'A', 'SBP', 'AM') => ('p', 'AA', 'SBP', 'AM')
('p', 'A', 'co.SBP', 'co.AM') => ('-d', 'A', 'co.SBP', 'co.AM')
('p', 'A', 'co.SBP', 'co.AM') => ('p', 'R', 'co.SBP', 'co.AM')
('p', 'A', 'co.SBP', 'co.AM') => ('p', 'AA', 'co.SBP', 'co.AM')
('p', 'A', 'cocap.SBP', 'cocap.AM') => ('-d', 'A', 'cocap.SBP', 'cocap.AM')
('p', 'A', 'cocap.SBP', 'cocap.AM') => ('p', 'R', 'cocap.SBP', 'cocap.AM')
('p', 'A', 'cocap.SBP', 'cocap.AM') => ('p', 'AA', 'cocap.SBP', 'cocap.AM')
('p', 'A', 'P', 'cocap.AM') => ('-d', 'A', 'P', 'cocap.AM')
('p', 'A', 'P', 'cocap.AM') => ('p', 'R', 'P', 'cocap.AM')
('p', 'A', 'P', 'cocap.AM') => ('p', 'AA', 'P', 'cocap.AM')
('p', 'E', 'EXP_plo', 'cocap.AM') => ('-d', 'E', 'EXP_plo', 'cocap.AM')
('p', 'E', 'cocap.NEXP_plo', 'cocap.AM') => ('-d', 'E', 'cocap.NEXP_plo', 'cocap.AM')
('p', 'E', 'cocap.MIP', 'cocap.AM') => ('-d', 'E', 'cocap.MIP', 'cocap.AM')
('-d', 'A', 'P', 'cocap.NEXP_plo') => ('-d', 'R', 'P', 'cocap.NEXP_plo')
('-d', 'A', 'P', 'cocap.NEXP_plo') => ('-d', 'AA', 'P', 'cocap.NEXP_plo')
('-d', 'A', 'P', 'co.NEXP_plo') => ('-d', 'R', 'P', 'co.NEXP_plo')
('-d', 'A', 'P', 'co.NEXP_plo') => ('-d', 'AA', 'P', 'co.NEXP_plo')
('-d', 'A', 'P', 'NEXP_plo') => ('-d', 'R', 'P', 'NEXP_plo')
('-d', 'A', 'P', 'NEXP_plo') => ('-d', 'AA', 'P', 'NEXP_plo')
('-d', 'A', 'P', 'AH_plo') => ('-d', 'R', 'P', 'AH_plo')
('-d', 'A', 'P', 'AH_plo') => ('-d', 'AA', 'P', 'AH_plo')
('-d', 'A', 'P', 'co.AH_plo') => ('-d', 'R', 'P', 'co.AH_plo')
('-d', 'A', 'P', 'co.AH_plo') => ('-d', 'AA', 'P', 'co.AH_plo')
('-d', 'A', 'P', 'cocap.AH_plo') => ('-d', 'R', 'P', 'cocap.AH_plo')
('-d', 'A', 'P', 'cocap.AH_plo') => ('-d', 'AA', 'P', 'cocap.AH_plo')
('-d', 'AA', 'P', 'cocap.AH_plo') => ('-d', 'T', 'P', 'cocap.AH_plo')
('-d', 'AA', 'P', 'cocap.AH_plo') => ('-d', 'EA', 'P', 'cocap.AH_plo')
('-d', 'AA', 'P', 'co.AH_plo') => ('-d', 'T', 'P', 'co.AH_plo')
('-d', 'AA', 'P', 'co.AH_plo') => ('-d', 'EA', 'P', 'co.AH_plo')
('-d', 'AA', 'P', 'AH_plo') => ('-d', 'T', 'P', 'AH_plo')
('-d', 'AA', 'P', 'AH_plo') => ('-d', 'EA', 'P', 'AH_plo')
('-d', 'AA', 'P', 'NEXP_plo') => ('-d', 'T', 'P', 'NEXP_plo')
('-d', 'AA', 'P', 'NEXP_plo') => ('-d', 'EA', 'P', 'NEXP_plo')
('-d', 'AA', 'P', 'co.NEXP_plo') => ('-d', 'T', 'P', 'co.NEXP_plo')
('-d', 'AA', 'P', 'co.NEXP_plo') => ('-d', 'EA', 'P', 'co.NEXP_plo')
('-d', 'AA', 'P', 'cocap.NEXP_plo') => ('-d', 'T', 'P', 'cocap.NEXP_plo')
('-d', 'AA', 'P', 'cocap.NEXP_plo') => ('-d', 'EA', 'P', 'cocap.NEXP_plo')
('p', 'A', 'P', 'cocap.NEXP_plo') => ('p', 'R', 'P', 'cocap.NEXP_plo')
('p', 'A', 'P', 'cocap.NEXP_plo') => ('p', 'AA', 'P', 'cocap.NEXP_plo')
('p', 'A', 'P', 'co.NEXP_plo') => ('p', 'R', 'P', 'co.NEXP_plo')
('p', 'A', 'P', 'co.NEXP_plo') => ('p', 'AA', 'P', 'co.NEXP_plo')
('p', 'A', 'P', 'NEXP_plo') => ('p', 'R', 'P', 'NEXP_plo')
('p', 'A', 'P', 'NEXP_plo') => ('p', 'AA', 'P', 'NEXP_plo')
('p', 'A', 'P', 'AH_plo') => ('p', 'R', 'P', 'AH_plo')
('p', 'A', 'P', 'AH_plo') => ('p', 'AA', 'P', 'AH_plo')
('p', 'A', 'P', 'co.AH_plo') => ('p', 'R', 'P', 'co.AH_plo')
('p', 'A', 'P', 'co.AH_plo') => ('p', 'AA', 'P', 'co.AH_plo')
('p', 'A', 'P', 'cocap.AH_plo') => ('p', 'R', 'P', 'cocap.AH_plo')
('p', 'A', 'P', 'cocap.AH_plo') => ('p', 'AA', 'P', 'cocap.AH_plo')
('p', 'AA', 'P', 'cocap.AH_plo') => ('p', 'T', 'P', 'cocap.AH_plo')
('p', 'AA', 'P', 'cocap.AH_plo') => ('p', 'EA', 'P', 'cocap.AH_plo')
('p', 'AA', 'P', 'co.AH_plo') => ('p', 'T', 'P', 'co.AH_plo')
('p', 'AA', 'P', 'co.AH_plo') => ('p', 'EA', 'P', 'co.AH_plo')
('p', 'AA', 'P', 'AH_plo') => ('p', 'T', 'P', 'AH_plo')
('p', 'AA', 'P', 'AH_plo') => ('p', 'EA', 'P', 'AH_plo')
('p', 'AA', 'P', 'NEXP_plo') => ('p', 'T', 'P', 'NEXP_plo')
('p', 'AA', 'P', 'NEXP_plo') => ('p', 'EA', 'P', 'NEXP_plo')
('p', 'AA', 'P', 'co.NEXP_plo') => ('p', 'T', 'P', 'co.NEXP_plo')
('p', 'AA', 'P', 'co.NEXP_plo') => ('p', 'EA', 'P', 'co.NEXP_plo')
('p', 'AA', 'P', 'cocap.NEXP_plo') => ('p', 'T', 'P', 'cocap.NEXP_plo')
('p', 'AA', 'P', 'cocap.NEXP_plo') => ('p', 'EA', 'P', 'cocap.NEXP_plo')
('-d', 'A', 'P', 'QMIP_cme') => ('-d', 'R', 'P', 'QMIP_cme')
('-d', 'A', 'P', 'QMIP_cme') => ('-d', 'AA', 'P', 'QMIP_cme')
('-d', 'A', 'P', 'co.QMIP_cme') => ('-d', 'R', 'P', 'co.QMIP_cme')
('-d', 'A', 'P', 'co.QMIP_cme') => ('-d', 'AA', 'P', 'co.QMIP_cme')
('-d', 'A', 'P', 'cocap.QMIP_cme') => ('-d', 'R', 'P', 'cocap.QMIP_cme')
('-d', 'A', 'P', 'cocap.QMIP_cme') => ('-d', 'AA', 'P', 'cocap.QMIP_cme')
('-d', 'AA', 'P', 'cocap.QMIP_cme') => ('-d', 'T', 'P', 'cocap.QMIP_cme')
('-d', 'AA', 'P', 'cocap.QMIP_cme') => ('-d', 'EA', 'P', 'cocap.QMIP_cme')
('-d', 'AA', 'P', 'QMIP_cme') => ('-d', 'T', 'P', 'QMIP_cme')
('-d', 'AA', 'P', 'QMIP_cme') => ('-d', 'EA', 'P', 'QMIP_cme')
('-d', 'AA', 'P', 'co.QMIP_cme') => ('-d', 'T', 'P', 'co.QMIP_cme')
('-d', 'AA', 'P', 'co.QMIP_cme') => ('-d', 'EA', 'P', 'co.QMIP_cme')
('p', 'A', 'P', 'QMIP_cme') => ('p', 'R', 'P', 'QMIP_cme')
('p', 'A', 'P', 'QMIP_cme') => ('p', 'AA', 'P', 'QMIP_cme')
('p', 'A', 'P', 'co.QMIP_cme') => ('p', 'R', 'P', 'co.QMIP_cme')
('p', 'A', 'P', 'co.QMIP_cme') => ('p', 'AA', 'P', 'co.QMIP_cme')
('p', 'A', 'P', 'cocap.QMIP_cme') => ('p', 'R', 'P', 'cocap.QMIP_cme')
('p', 'A', 'P', 'cocap.QMIP_cme') => ('p', 'AA', 'P', 'cocap.QMIP_cme')
('p', 'AA', 'P', 'cocap.QMIP_cme') => ('p', 'T', 'P', 'cocap.QMIP_cme')
('p', 'AA', 'P', 'cocap.QMIP_cme') => ('p', 'EA', 'P', 'cocap.QMIP_cme')
('p', 'AA', 'P', 'QMIP_cme') => ('p', 'T', 'P', 'QMIP_cme')
('p', 'AA', 'P', 'QMIP_cme') => ('p', 'EA', 'P', 'QMIP_cme')
('p', 'AA', 'P', 'co.QMIP_cme') => ('p', 'T', 'P', 'co.QMIP_cme')
('p', 'AA', 'P', 'co.QMIP_cme') => ('p', 'EA', 'P', 'co.QMIP_cme')
('-d', 'A', 'P', 'cocap.MIP*_cme') => ('-d', 'R', 'P', 'cocap.MIP*_cme')
('-d', 'A', 'P', 'cocap.MIP*_cme') => ('-d', 'AA', 'P', 'cocap.MIP*_cme')
('-d', 'A', 'P', 'MIP*_cme') => ('-d', 'R', 'P', 'MIP*_cme')
('-d', 'A', 'P', 'MIP*_cme') => ('-d', 'AA', 'P', 'MIP*_cme')
('-d', 'A', 'P', 'co.MIP*_cme') => ('-d', 'R', 'P', 'co.MIP*_cme')
('-d', 'A', 'P', 'co.MIP*_cme') => ('-d', 'AA', 'P', 'co.MIP*_cme')
('-d', 'AA', 'P', 'co.MIP*_cme') => ('-d', 'T', 'P', 'co.MIP*_cme')
('-d', 'AA', 'P', 'co.MIP*_cme') => ('-d', 'EA', 'P', 'co.MIP*_cme')
('-d', 'AA', 'P', 'MIP*_cme') => ('-d', 'T', 'P', 'MIP*_cme')
('-d', 'AA', 'P', 'MIP*_cme') => ('-d', 'EA', 'P', 'MIP*_cme')
('-d', 'AA', 'P', 'cocap.MIP*_cme') => ('-d', 'T', 'P', 'cocap.MIP*_cme')
('-d', 'AA', 'P', 'cocap.MIP*_cme') => ('-d', 'EA', 'P', 'cocap.MIP*_cme')
('p', 'A', 'P', 'cocap.MIP*_cme') => ('p', 'R', 'P', 'cocap.MIP*_cme')
('p', 'A', 'P', 'cocap.MIP*_cme') => ('p', 'AA', 'P', 'cocap.MIP*_cme')
('p', 'A', 'P', 'MIP*_cme') => ('p', 'R', 'P', 'MIP*_cme')
('p', 'A', 'P', 'MIP*_cme') => ('p', 'AA', 'P', 'MIP*_cme')
('p', 'A', 'P', 'co.MIP*_cme') => ('p', 'R', 'P', 'co.MIP*_cme')
('p', 'A', 'P', 'co.MIP*_cme') => ('p', 'AA', 'P', 'co.MIP*_cme')
('p', 'AA', 'P', 'co.MIP*_cme') => ('p', 'T', 'P', 'co.MIP*_cme')
('p', 'AA', 'P', 'co.MIP*_cme') => ('p', 'EA', 'P', 'co.MIP*_cme')
('p', 'AA', 'P', 'MIP*_cme') => ('p', 'T', 'P', 'MIP*_cme')
('p', 'AA', 'P', 'MIP*_cme') => ('p', 'EA', 'P', 'MIP*_cme')
('p', 'AA', 'P', 'cocap.MIP*_cme') => ('p', 'T', 'P', 'cocap.MIP*_cme')
('p', 'AA', 'P', 'cocap.MIP*_cme') => ('p', 'EA', 'P', 'cocap.MIP*_cme')
('-d', 'A', 'P', 'QIP') => ('-d', 'R', 'P', 'QIP')
('-d', 'A', 'P', 'QIP') => ('-d', 'AA', 'P', 'QIP')
('-d', 'A', 'P', 'co.QIP') => ('-d', 'R', 'P', 'co.QIP')
('-d', 'A', 'P', 'co.QIP') => ('-d', 'AA', 'P', 'co.QIP')
('-d', 'A', 'P', 'cocap.QIP') => ('-d', 'R', 'P', 'cocap.QIP')
('-d', 'A', 'P', 'cocap.QIP') => ('-d', 'AA', 'P', 'cocap.QIP')
('-d', 'A', 'P', 'cocap.QMIP_ne') => ('-d', 'R', 'P', 'cocap.QMIP_ne')
('-d', 'A', 'P', 'cocap.QMIP_ne') => ('-d', 'AA', 'P', 'cocap.QMIP_ne')
('-d', 'A', 'P', 'QMIP_ne') => ('-d', 'R', 'P', 'QMIP_ne')
('-d', 'A', 'P', 'QMIP_ne') => ('-d', 'AA', 'P', 'QMIP_ne')
('-d', 'A', 'P', 'co.QMIP_ne') => ('-d', 'R', 'P', 'co.QMIP_ne')
('-d', 'A', 'P', 'co.QMIP_ne') => ('-d', 'AA', 'P', 'co.QMIP_ne')
('-d', 'AA', 'P', 'co.QMIP_ne') => ('-d', 'T', 'P', 'co.QMIP_ne')
('-d', 'AA', 'P', 'co.QMIP_ne') => ('-d', 'EA', 'P', 'co.QMIP_ne')
('-d', 'AA', 'P', 'QMIP_ne') => ('-d', 'T', 'P', 'QMIP_ne')
('-d', 'AA', 'P', 'QMIP_ne') => ('-d', 'EA', 'P', 'QMIP_ne')
('-d', 'AA', 'P', 'cocap.QMIP_ne') => ('-d', 'T', 'P', 'cocap.QMIP_ne')
('-d', 'AA', 'P', 'cocap.QMIP_ne') => ('-d', 'EA', 'P', 'cocap.QMIP_ne')
('-d', 'AA', 'P', 'cocap.QIP') => ('-d', 'T', 'P', 'cocap.QIP')
('-d', 'AA', 'P', 'cocap.QIP') => ('-d', 'EA', 'P', 'cocap.QIP')
('-d', 'AA', 'P', 'QIP') => ('-d', 'T', 'P', 'QIP')
('-d', 'AA', 'P', 'QIP') => ('-d', 'EA', 'P', 'QIP')
('-d', 'AA', 'P', 'co.QIP') => ('-d', 'T', 'P', 'co.QIP')
('-d', 'AA', 'P', 'co.QIP') => ('-d', 'EA', 'P', 'co.QIP')
('p', 'A', 'P', 'QIP') => ('p', 'R', 'P', 'QIP')
('p', 'A', 'P', 'QIP') => ('p', 'AA', 'P', 'QIP')
('p', 'A', 'P', 'co.QIP') => ('p', 'R', 'P', 'co.QIP')
('p', 'A', 'P', 'co.QIP') => ('p', 'AA', 'P', 'co.QIP')
('p', 'A', 'P', 'cocap.QIP') => ('p', 'R', 'P', 'cocap.QIP')
('p', 'A', 'P', 'cocap.QIP') => ('p', 'AA', 'P', 'cocap.QIP')
('p', 'A', 'P', 'cocap.QMIP_ne') => ('p', 'R', 'P', 'cocap.QMIP_ne')
('p', 'A', 'P', 'cocap.QMIP_ne') => ('p', 'AA', 'P', 'cocap.QMIP_ne')
('p', 'A', 'P', 'QMIP_ne') => ('p', 'R', 'P', 'QMIP_ne')
('p', 'A', 'P', 'QMIP_ne') => ('p', 'AA', 'P', 'QMIP_ne')
('p', 'A', 'P', 'co.QMIP_ne') => ('p', 'R', 'P', 'co.QMIP_ne')
('p', 'A', 'P', 'co.QMIP_ne') => ('p', 'AA', 'P', 'co.QMIP_ne')
('p', 'AA', 'P', 'co.QMIP_ne') => ('p', 'T', 'P', 'co.QMIP_ne')
('p', 'AA', 'P', 'co.QMIP_ne') => ('p', 'EA', 'P', 'co.QMIP_ne')
('p', 'AA', 'P', 'QMIP_ne') => ('p', 'T', 'P', 'QMIP_ne')
('p', 'AA', 'P', 'QMIP_ne') => ('p', 'EA', 'P', 'QMIP_ne')
('p', 'AA', 'P', 'cocap.QMIP_ne') => ('p', 'T', 'P', 'cocap.QMIP_ne')
('p', 'AA', 'P', 'cocap.QMIP_ne') => ('p', 'EA', 'P', 'cocap.QMIP_ne')
('p', 'AA', 'P', 'cocap.QIP') => ('p', 'T', 'P', 'cocap.QIP')
('p', 'AA', 'P', 'cocap.QIP') => ('p', 'EA', 'P', 'cocap.QIP')
('p', 'AA', 'P', 'QIP') => ('p', 'T', 'P', 'QIP')
('p', 'AA', 'P', 'QIP') => ('p', 'EA', 'P', 'QIP')
('p', 'AA', 'P', 'co.QIP') => ('p', 'T', 'P', 'co.QIP')
('p', 'AA', 'P', 'co.QIP') => ('p', 'EA', 'P', 'co.QIP')
('p', 'E', 'co.NEXP_plo', 'cocap.AM') => ('-d', 'E', 'co.NEXP_plo', 'cocap.AM')
('p', 'E', 'NEXP_plo', 'cocap.AM') => ('-d', 'E', 'NEXP_plo', 'cocap.AM')
('p', 'E', 'AM', 'cocap.AM') => ('-d', 'E', 'AM', 'cocap.AM')
('p', 'E', 'co.AM', 'cocap.AM') => ('-d', 'E', 'co.AM', 'cocap.AM')
('p', 'E', 'co.SBP', 'cocap.AM') => ('-d', 'E', 'co.SBP', 'cocap.AM')
('p', 'E', 'SBP', 'cocap.AM') => ('-d', 'E', 'SBP', 'cocap.AM')
('p', 'E', 'MA', 'cocap.AM') => ('-d', 'E', 'MA', 'cocap.AM')
('p', 'E', 'co.MA', 'cocap.AM') => ('-d', 'E', 'co.MA', 'cocap.AM')
('p', 'E', 'MIP', 'cocap.AM') => ('-d', 'E', 'MIP', 'cocap.AM')
('p', 'E', 'co.MIP', 'cocap.AM') => ('-d', 'E', 'co.MIP', 'cocap.AM')
('p', 'E', 'co.IP', 'cocap.AM') => ('-d', 'E', 'co.IP', 'cocap.AM')
('p', 'E', 'IP', 'cocap.AM') => ('-d', 'E', 'IP', 'cocap.AM')
('-d', 'A', 'P', 'cocap.MIP') => ('-d', 'R', 'P', 'cocap.MIP')
('-d', 'A', 'P', 'cocap.MIP') => ('-d', 'AA', 'P', 'cocap.MIP')
('-d', 'A', 'P', 'MIP') => ('-d', 'R', 'P', 'MIP')
('-d', 'A', 'P', 'MIP') => ('-d', 'AA', 'P', 'MIP')
('-d', 'A', 'P', 'co.MIP') => ('-d', 'R', 'P', 'co.MIP')
('-d', 'A', 'P', 'co.MIP') => ('-d', 'AA', 'P', 'co.MIP')
('-d', 'AA', 'P', 'co.MIP') => ('-d', 'T', 'P', 'co.MIP')
('-d', 'AA', 'P', 'co.MIP') => ('-d', 'EA', 'P', 'co.MIP')
('-d', 'AA', 'P', 'MIP') => ('-d', 'T', 'P', 'MIP')
('-d', 'AA', 'P', 'MIP') => ('-d', 'EA', 'P', 'MIP')
('-d', 'AA', 'P', 'cocap.MIP') => ('-d', 'T', 'P', 'cocap.MIP')
('-d', 'AA', 'P', 'cocap.MIP') => ('-d', 'EA', 'P', 'cocap.MIP')
('p', 'A', 'P', 'cocap.MIP') => ('p', 'R', 'P', 'cocap.MIP')
('p', 'A', 'P', 'cocap.MIP') => ('p', 'AA', 'P', 'cocap.MIP')
('p', 'A', 'P', 'MIP') => ('p', 'R', 'P', 'MIP')
('p', 'A', 'P', 'MIP') => ('p', 'AA', 'P', 'MIP')
('p', 'A', 'P', 'co.MIP') => ('p', 'R', 'P', 'co.MIP')
('p', 'A', 'P', 'co.MIP') => ('p', 'AA', 'P', 'co.MIP')
('p', 'AA', 'P', 'co.MIP') => ('p', 'T', 'P', 'co.MIP')
('p', 'AA', 'P', 'co.MIP') => ('p', 'EA', 'P', 'co.MIP')
('p', 'AA', 'P', 'MIP') => ('p', 'T', 'P', 'MIP')
('p', 'AA', 'P', 'MIP') => ('p', 'EA', 'P', 'MIP')
('p', 'AA', 'P', 'cocap.MIP') => ('p', 'T', 'P', 'cocap.MIP')
('p', 'AA', 'P', 'cocap.MIP') => ('p', 'EA', 'P', 'cocap.MIP')
('-d', 'A', 'P', 'AM') => ('-d', 'R', 'P', 'AM')
('-d', 'A', 'P', 'AM') => ('-d', 'AA', 'P', 'AM')
('-d', 'A', 'P', 'co.AM') => ('-d', 'R', 'P', 'co.AM')
('-d', 'A', 'P', 'co.AM') => ('-d', 'AA', 'P', 'co.AM')
('-d', 'A', 'P', 'cocap.AM') => ('-d', 'R', 'P', 'cocap.AM')
('-d', 'A', 'P', 'cocap.AM') => ('-d', 'AA', 'P', 'cocap.AM')
('-d', 'A', 'P', 'IP') => ('-d', 'R', 'P', 'IP')
('-d', 'A', 'P', 'IP') => ('-d', 'AA', 'P', 'IP')
('-d', 'A', 'P', 'co.IP') => ('-d', 'R', 'P', 'co.IP')
('-d', 'A', 'P', 'co.IP') => ('-d', 'AA', 'P', 'co.IP')
('-d', 'A', 'P', 'cocap.IP') => ('-d', 'R', 'P', 'cocap.IP')
('-d', 'A', 'P', 'cocap.IP') => ('-d', 'AA', 'P', 'cocap.IP')
('-d', 'AA', 'P', 'cocap.IP') => ('-d', 'T', 'P', 'cocap.IP')
('-d', 'AA', 'P', 'cocap.IP') => ('-d', 'EA', 'P', 'cocap.IP')
('-d', 'AA', 'P', 'IP') => ('-d', 'T', 'P', 'IP')
('-d', 'AA', 'P', 'IP') => ('-d', 'EA', 'P', 'IP')
('-d', 'AA', 'P', 'co.IP') => ('-d', 'T', 'P', 'co.IP')
('-d', 'AA', 'P', 'co.IP') => ('-d', 'EA', 'P', 'co.IP')
('-d', 'AA', 'P', 'cocap.AM') => ('-d', 'T', 'P', 'cocap.AM')
('-d', 'AA', 'P', 'cocap.AM') => ('-d', 'EA', 'P', 'cocap.AM')
('-d', 'AA', 'P', 'AM') => ('-d', 'T', 'P', 'AM')
('-d', 'AA', 'P', 'AM') => ('-d', 'EA', 'P', 'AM')
('-d', 'AA', 'P', 'co.AM') => ('-d', 'T', 'P', 'co.AM')
('-d', 'AA', 'P', 'co.AM') => ('-d', 'EA', 'P', 'co.AM')
('p', 'A', 'P', 'AM') => ('p', 'R', 'P', 'AM')
('p', 'A', 'P', 'AM') => ('p', 'AA', 'P', 'AM')
('p', 'A', 'P', 'co.AM') => ('p', 'R', 'P', 'co.AM')
('p', 'A', 'P', 'co.AM') => ('p', 'AA', 'P', 'co.AM')
('p', 'A', 'P', 'co.IP') => ('p', 'R', 'P', 'co.IP')
('p', 'A', 'P', 'co.IP') => ('p', 'AA', 'P', 'co.IP')
('p', 'A', 'P', 'IP') => ('p', 'R', 'P', 'IP')
('p', 'A', 'P', 'IP') => ('p', 'AA', 'P', 'IP')
('p', 'A', 'P', 'cocap.IP') => ('p', 'R', 'P', 'cocap.IP')
('p', 'A', 'P', 'cocap.IP') => ('p', 'AA', 'P', 'cocap.IP')
('p', 'AA', 'P', 'cocap.IP') => ('p', 'T', 'P', 'cocap.IP')
('p', 'AA', 'P', 'cocap.IP') => ('p', 'EA', 'P', 'cocap.IP')
('p', 'AA', 'P', 'IP') => ('p', 'T', 'P', 'IP')
('p', 'AA', 'P', 'IP') => ('p', 'EA', 'P', 'IP')
('p', 'AA', 'P', 'co.IP') => ('p', 'T', 'P', 'co.IP')
('p', 'AA', 'P', 'co.IP') => ('p', 'EA', 'P', 'co.IP')
('p', 'AA', 'P', 'co.AM') => ('p', 'T', 'P', 'co.AM')
('p', 'AA', 'P', 'co.AM') => ('p', 'EA', 'P', 'co.AM')
('p', 'AA', 'P', 'AM') => ('p', 'T', 'P', 'AM')
('p', 'AA', 'P', 'AM') => ('p', 'EA', 'P', 'AM')
('p', 'AA', 'P', 'cocap.AM') => ('p', 'T', 'P', 'cocap.AM')
('p', 'AA', 'P', 'cocap.AM') => ('p', 'EA', 'P', 'cocap.AM')
('-d', 'A', 'cocap.SBP', 'ALL') => ('-d', 'R', 'cocap.SBP', 'ALL')
('-d', 'A', 'cocap.SBP', 'ALL') => ('-d', 'AA', 'cocap.SBP', 'ALL')
('-d', 'A', 'cocap.MA', 'ALL') => ('-d', 'R', 'cocap.MA', 'ALL')
('-d', 'A', 'cocap.MA', 'ALL') => ('-d', 'AA', 'cocap.MA', 'ALL')
('-d', 'AA', 'cocap.MA', 'ALL') => ('-d', 'T', 'cocap.MA', 'ALL')
('-d', 'AA', 'cocap.MA', 'ALL') => ('-d', 'EA', 'cocap.MA', 'ALL')
('-d', 'AA', 'cocap.SBP', 'ALL') => ('-d', 'T', 'cocap.SBP', 'ALL')
('-d', 'AA', 'cocap.SBP', 'ALL') => ('-d', 'EA', 'cocap.SBP', 'ALL')
('p', 'A', 'cocap.SBP', 'ALL') => ('p', 'R', 'cocap.SBP', 'ALL')
('p', 'A', 'cocap.SBP', 'ALL') => ('p', 'AA', 'cocap.SBP', 'ALL')
('p', 'A', 'cocap.MA', 'ALL') => ('p', 'R', 'cocap.MA', 'ALL')
('p', 'A', 'cocap.MA', 'ALL') => ('p', 'AA', 'cocap.MA', 'ALL')
('p', 'AA', 'cocap.MA', 'ALL') => ('p', 'T', 'cocap.MA', 'ALL')
('p', 'AA', 'cocap.MA', 'ALL') => ('p', 'EA', 'cocap.MA', 'ALL')
('p', 'AA', 'cocap.SBP', 'ALL') => ('p', 'T', 'cocap.SBP', 'ALL')
('p', 'AA', 'cocap.SBP', 'ALL') => ('p', 'EA', 'cocap.SBP', 'ALL')
('-d', 'A', 'cocap.SBP', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.SBP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.SBP', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.SBP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.SBP', 'co.NEXP') => ('-d', 'R', 'cocap.SBP', 'co.NEXP')
('-d', 'A', 'cocap.SBP', 'co.NEXP') => ('-d', 'AA', 'cocap.SBP', 'co.NEXP')
('-d', 'A', 'cocap.SBP', 'NEXP') => ('-d', 'R', 'cocap.SBP', 'NEXP')
('-d', 'A', 'cocap.SBP', 'NEXP') => ('-d', 'AA', 'cocap.SBP', 'NEXP')
('-d', 'A', 'cocap.SBP', 'cocap.NEXP') => ('-d', 'R', 'cocap.SBP', 'cocap.NEXP')
('-d', 'A', 'cocap.SBP', 'cocap.NEXP') => ('-d', 'AA', 'cocap.SBP', 'cocap.NEXP')
('-d', 'A', 'cocap.NP', 'cocap.NEXP') => ('-d', 'R', 'cocap.NP', 'cocap.NEXP')
('-d', 'A', 'cocap.NP', 'cocap.NEXP') => ('-d', 'AA', 'cocap.NP', 'cocap.NEXP')
('-d', 'A', 'cocap.NP', 'co.NEXP') => ('-d', 'R', 'cocap.NP', 'co.NEXP')
('-d', 'A', 'cocap.NP', 'co.NEXP') => ('-d', 'AA', 'cocap.NP', 'co.NEXP')
('-d', 'A', 'cocap.NP', 'NEXP') => ('-d', 'R', 'cocap.NP', 'NEXP')
('-d', 'A', 'cocap.NP', 'NEXP') => ('-d', 'AA', 'cocap.NP', 'NEXP')
('-d', 'A', 'ZPP', 'NEXP') => ('-d', 'R', 'ZPP', 'NEXP')
('-d', 'A', 'ZPP', 'NEXP') => ('-d', 'AA', 'ZPP', 'NEXP')
('-d', 'A', 'ZPP', 'co.NEXP') => ('-d', 'R', 'ZPP', 'co.NEXP')
('-d', 'A', 'ZPP', 'co.NEXP') => ('-d', 'AA', 'ZPP', 'co.NEXP')
('-d', 'A', 'ZPP', 'cocap.NEXP') => ('-d', 'R', 'ZPP', 'cocap.NEXP')
('-d', 'A', 'ZPP', 'cocap.NEXP') => ('-d', 'AA', 'ZPP', 'cocap.NEXP')
('-d', 'A', 'ZPP', 'R') => ('-d', 'R', 'ZPP', 'R')
('-d', 'A', 'ZPP', 'R') => ('-d', 'AA', 'ZPP', 'R')
('-d', 'A', 'ZPP', 'RE') => ('-d', 'R', 'ZPP', 'RE')
('-d', 'A', 'ZPP', 'RE') => ('-d', 'AA', 'ZPP', 'RE')
('-d', 'A', 'ZPP', 'co.RE') => ('-d', 'R', 'ZPP', 'co.RE')
('-d', 'A', 'ZPP', 'co.RE') => ('-d', 'AA', 'ZPP', 'co.RE')
('-d', 'AA', 'ZPP', 'co.RE') => ('-d', 'T', 'ZPP', 'co.RE')
('-d', 'AA', 'ZPP', 'co.RE') => ('-d', 'EA', 'ZPP', 'co.RE')
('-d', 'AA', 'ZPP', 'RE') => ('-d', 'T', 'ZPP', 'RE')
('-d', 'AA', 'ZPP', 'RE') => ('-d', 'EA', 'ZPP', 'RE')
('-d', 'AA', 'ZPP', 'R') => ('-d', 'T', 'ZPP', 'R')
('-d', 'AA', 'ZPP', 'R') => ('-d', 'EA', 'ZPP', 'R')
('-d', 'AA', 'ZPP', 'cocap.NEXP') => ('-d', 'T', 'ZPP', 'cocap.NEXP')
('-d', 'AA', 'ZPP', 'cocap.NEXP') => ('-d', 'EA', 'ZPP', 'cocap.NEXP')
('-d', 'AA', 'ZPP', 'co.NEXP') => ('-d', 'T', 'ZPP', 'co.NEXP')
('-d', 'AA', 'ZPP', 'co.NEXP') => ('-d', 'EA', 'ZPP', 'co.NEXP')
('-d', 'AA', 'ZPP', 'NEXP') => ('-d', 'T', 'ZPP', 'NEXP')
('-d', 'AA', 'ZPP', 'NEXP') => ('-d', 'EA', 'ZPP', 'NEXP')
('-d', 'A', 'cocap.NP', 'R') => ('-d', 'R', 'cocap.NP', 'R')
('-d', 'A', 'cocap.NP', 'R') => ('-d', 'AA', 'cocap.NP', 'R')
('-d', 'A', 'cocap.NP', 'RE') => ('-d', 'R', 'cocap.NP', 'RE')
('-d', 'A', 'cocap.NP', 'RE') => ('-d', 'AA', 'cocap.NP', 'RE')
('-d', 'A', 'cocap.NP', 'co.RE') => ('-d', 'R', 'cocap.NP', 'co.RE')
('-d', 'A', 'cocap.NP', 'co.RE') => ('-d', 'AA', 'cocap.NP', 'co.RE')
('-d', 'AA', 'cocap.NP', 'co.RE') => ('-d', 'T', 'cocap.NP', 'co.RE')
('-d', 'AA', 'cocap.NP', 'co.RE') => ('-d', 'EA', 'cocap.NP', 'co.RE')
('-d', 'AA', 'cocap.NP', 'RE') => ('-d', 'T', 'cocap.NP', 'RE')
('-d', 'AA', 'cocap.NP', 'RE') => ('-d', 'EA', 'cocap.NP', 'RE')
('-d', 'AA', 'cocap.NP', 'R') => ('-d', 'T', 'cocap.NP', 'R')
('-d', 'AA', 'cocap.NP', 'R') => ('-d', 'EA', 'cocap.NP', 'R')
('-d', 'AA', 'cocap.NP', 'NEXP') => ('-d', 'T', 'cocap.NP', 'NEXP')
('-d', 'AA', 'cocap.NP', 'NEXP') => ('-d', 'EA', 'cocap.NP', 'NEXP')
('-d', 'AA', 'cocap.NP', 'co.NEXP') => ('-d', 'T', 'cocap.NP', 'co.NEXP')
('-d', 'AA', 'cocap.NP', 'co.NEXP') => ('-d', 'EA', 'cocap.NP', 'co.NEXP')
('-d', 'AA', 'cocap.NP', 'cocap.NEXP') => ('-d', 'T', 'cocap.NP', 'cocap.NEXP')
('-d', 'AA', 'cocap.NP', 'cocap.NEXP') => ('-d', 'EA', 'cocap.NP', 'cocap.NEXP')
('-d', 'A', 'cocap.SBP', 'R') => ('-d', 'R', 'cocap.SBP', 'R')
('-d', 'A', 'cocap.SBP', 'R') => ('-d', 'AA', 'cocap.SBP', 'R')
('-d', 'A', 'cocap.SBP', 'RE') => ('-d', 'R', 'cocap.SBP', 'RE')
('-d', 'A', 'cocap.SBP', 'RE') => ('-d', 'AA', 'cocap.SBP', 'RE')
('-d', 'A', 'cocap.SBP', 'co.RE') => ('-d', 'R', 'cocap.SBP', 'co.RE')
('-d', 'A', 'cocap.SBP', 'co.RE') => ('-d', 'AA', 'cocap.SBP', 'co.RE')
('-d', 'A', 'cocap.MA', 'co.RE') => ('-d', 'R', 'cocap.MA', 'co.RE')
('-d', 'A', 'cocap.MA', 'co.RE') => ('-d', 'AA', 'cocap.MA', 'co.RE')
('-d', 'A', 'cocap.MA', 'RE') => ('-d', 'R', 'cocap.MA', 'RE')
('-d', 'A', 'cocap.MA', 'RE') => ('-d', 'AA', 'cocap.MA', 'RE')
('-d', 'A', 'cocap.MA', 'R') => ('-d', 'R', 'cocap.MA', 'R')
('-d', 'A', 'cocap.MA', 'R') => ('-d', 'AA', 'cocap.MA', 'R')
('-d', 'AA', 'cocap.MA', 'R') => ('-d', 'T', 'cocap.MA', 'R')
('-d', 'AA', 'cocap.MA', 'R') => ('-d', 'EA', 'cocap.MA', 'R')
('-d', 'AA', 'cocap.MA', 'RE') => ('-d', 'T', 'cocap.MA', 'RE')
('-d', 'AA', 'cocap.MA', 'RE') => ('-d', 'EA', 'cocap.MA', 'RE')
('-d', 'AA', 'cocap.MA', 'co.RE') => ('-d', 'T', 'cocap.MA', 'co.RE')
('-d', 'AA', 'cocap.MA', 'co.RE') => ('-d', 'EA', 'cocap.MA', 'co.RE')
('-d', 'AA', 'cocap.SBP', 'co.RE') => ('-d', 'T', 'cocap.SBP', 'co.RE')
('-d', 'AA', 'cocap.SBP', 'co.RE') => ('-d', 'EA', 'cocap.SBP', 'co.RE')
('-d', 'AA', 'cocap.SBP', 'RE') => ('-d', 'T', 'cocap.SBP', 'RE')
('-d', 'AA', 'cocap.SBP', 'RE') => ('-d', 'EA', 'cocap.SBP', 'RE')
('-d', 'AA', 'cocap.SBP', 'R') => ('-d', 'T', 'cocap.SBP', 'R')
('-d', 'AA', 'cocap.SBP', 'R') => ('-d', 'EA', 'cocap.SBP', 'R')
('-d', 'A', 'cocap.SBP', 'NEXP/poly') => ('-d', 'R', 'cocap.SBP', 'NEXP/poly')
('-d', 'A', 'cocap.SBP', 'NEXP/poly') => ('-d', 'AA', 'cocap.SBP', 'NEXP/poly')
('-d', 'A', 'cocap.MA', 'NEXP/poly') => ('-d', 'R', 'cocap.MA', 'NEXP/poly')
('-d', 'A', 'cocap.MA', 'NEXP/poly') => ('-d', 'AA', 'cocap.MA', 'NEXP/poly')
('-d', 'AA', 'cocap.MA', 'NEXP/poly') => ('-d', 'T', 'cocap.MA', 'NEXP/poly')
('-d', 'AA', 'cocap.MA', 'NEXP/poly') => ('-d', 'EA', 'cocap.MA', 'NEXP/poly')
('-d', 'AA', 'cocap.SBP', 'NEXP/poly') => ('-d', 'T', 'cocap.SBP', 'NEXP/poly')
('-d', 'AA', 'cocap.SBP', 'NEXP/poly') => ('-d', 'EA', 'cocap.SBP', 'NEXP/poly')
('-d', 'A', 'cocap.MA', 'cocap.NEXP') => ('-d', 'R', 'cocap.MA', 'cocap.NEXP')
('-d', 'A', 'cocap.MA', 'cocap.NEXP') => ('-d', 'AA', 'cocap.MA', 'cocap.NEXP')
('-d', 'A', 'cocap.MA', 'co.NEXP') => ('-d', 'R', 'cocap.MA', 'co.NEXP')
('-d', 'A', 'cocap.MA', 'co.NEXP') => ('-d', 'AA', 'cocap.MA', 'co.NEXP')
('-d', 'A', 'cocap.MA', 'NEXP') => ('-d', 'R', 'cocap.MA', 'NEXP')
('-d', 'A', 'cocap.MA', 'NEXP') => ('-d', 'AA', 'cocap.MA', 'NEXP')
('-d', 'AA', 'cocap.MA', 'NEXP') => ('-d', 'T', 'cocap.MA', 'NEXP')
('-d', 'AA', 'cocap.MA', 'NEXP') => ('-d', 'EA', 'cocap.MA', 'NEXP')
('-d', 'AA', 'cocap.MA', 'co.NEXP') => ('-d', 'T', 'cocap.MA', 'co.NEXP')
('-d', 'AA', 'cocap.MA', 'co.NEXP') => ('-d', 'EA', 'cocap.MA', 'co.NEXP')
('-d', 'AA', 'cocap.MA', 'cocap.NEXP') => ('-d', 'T', 'cocap.MA', 'cocap.NEXP')
('-d', 'AA', 'cocap.MA', 'cocap.NEXP') => ('-d', 'EA', 'cocap.MA', 'cocap.NEXP')
('-d', 'AA', 'cocap.SBP', 'cocap.NEXP') => ('-d', 'T', 'cocap.SBP', 'cocap.NEXP')
('-d', 'AA', 'cocap.SBP', 'cocap.NEXP') => ('-d', 'EA', 'cocap.SBP', 'cocap.NEXP')
('-d', 'AA', 'cocap.SBP', 'co.NEXP') => ('-d', 'T', 'cocap.SBP', 'co.NEXP')
('-d', 'AA', 'cocap.SBP', 'co.NEXP') => ('-d', 'EA', 'cocap.SBP', 'co.NEXP')
('-d', 'AA', 'cocap.SBP', 'NEXP') => ('-d', 'T', 'cocap.SBP', 'NEXP')
('-d', 'AA', 'cocap.SBP', 'NEXP') => ('-d', 'EA', 'cocap.SBP', 'NEXP')
('-d', 'A', 'cocap.SBP', 'co.NEXP_plo') => ('-d', 'R', 'cocap.SBP', 'co.NEXP_plo')
('-d', 'A', 'cocap.SBP', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.SBP', 'co.NEXP_plo')
('-d', 'A', 'cocap.SBP', 'NEXP_plo') => ('-d', 'R', 'cocap.SBP', 'NEXP_plo')
('-d', 'A', 'cocap.SBP', 'NEXP_plo') => ('-d', 'AA', 'cocap.SBP', 'NEXP_plo')
('-d', 'A', 'cocap.NP', 'NEXP_plo') => ('-d', 'R', 'cocap.NP', 'NEXP_plo')
('-d', 'A', 'cocap.NP', 'NEXP_plo') => ('-d', 'AA', 'cocap.NP', 'NEXP_plo')
('-d', 'A', 'cocap.NP', 'co.NEXP_plo') => ('-d', 'R', 'cocap.NP', 'co.NEXP_plo')
('-d', 'A', 'cocap.NP', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.NP', 'co.NEXP_plo')
('-d', 'A', 'cocap.NP', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.NP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.NP', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.NP', 'cocap.NEXP_plo')
('-d', 'A', 'ZPP', 'cocap.NEXP_plo') => ('-d', 'R', 'ZPP', 'cocap.NEXP_plo')
('-d', 'A', 'ZPP', 'cocap.NEXP_plo') => ('-d', 'AA', 'ZPP', 'cocap.NEXP_plo')
('-d', 'A', 'ZPP', 'co.NEXP_plo') => ('-d', 'R', 'ZPP', 'co.NEXP_plo')
('-d', 'A', 'ZPP', 'co.NEXP_plo') => ('-d', 'AA', 'ZPP', 'co.NEXP_plo')
('-d', 'A', 'ZPP', 'NEXP_plo') => ('-d', 'R', 'ZPP', 'NEXP_plo')
('-d', 'A', 'ZPP', 'NEXP_plo') => ('-d', 'AA', 'ZPP', 'NEXP_plo')
('-d', 'A', 'ZPP', 'AH_plo') => ('-d', 'R', 'ZPP', 'AH_plo')
('-d', 'A', 'ZPP', 'AH_plo') => ('-d', 'AA', 'ZPP', 'AH_plo')
('-d', 'A', 'ZPP', 'co.AH_plo') => ('-d', 'R', 'ZPP', 'co.AH_plo')
('-d', 'A', 'ZPP', 'co.AH_plo') => ('-d', 'AA', 'ZPP', 'co.AH_plo')
('-d', 'A', 'ZPP', 'cocap.AH_plo') => ('-d', 'R', 'ZPP', 'cocap.AH_plo')
('-d', 'A', 'ZPP', 'cocap.AH_plo') => ('-d', 'AA', 'ZPP', 'cocap.AH_plo')
('-d', 'AA', 'ZPP', 'cocap.AH_plo') => ('-d', 'T', 'ZPP', 'cocap.AH_plo')
('-d', 'AA', 'ZPP', 'cocap.AH_plo') => ('-d', 'EA', 'ZPP', 'cocap.AH_plo')
('-d', 'AA', 'ZPP', 'co.AH_plo') => ('-d', 'T', 'ZPP', 'co.AH_plo')
('-d', 'AA', 'ZPP', 'co.AH_plo') => ('-d', 'EA', 'ZPP', 'co.AH_plo')
('-d', 'AA', 'ZPP', 'AH_plo') => ('-d', 'T', 'ZPP', 'AH_plo')
('-d', 'AA', 'ZPP', 'AH_plo') => ('-d', 'EA', 'ZPP', 'AH_plo')
('-d', 'AA', 'ZPP', 'NEXP_plo') => ('-d', 'T', 'ZPP', 'NEXP_plo')
('-d', 'AA', 'ZPP', 'NEXP_plo') => ('-d', 'EA', 'ZPP', 'NEXP_plo')
('-d', 'AA', 'ZPP', 'co.NEXP_plo') => ('-d', 'T', 'ZPP', 'co.NEXP_plo')
('-d', 'AA', 'ZPP', 'co.NEXP_plo') => ('-d', 'EA', 'ZPP', 'co.NEXP_plo')
('-d', 'AA', 'ZPP', 'cocap.NEXP_plo') => ('-d', 'T', 'ZPP', 'cocap.NEXP_plo')
('-d', 'AA', 'ZPP', 'cocap.NEXP_plo') => ('-d', 'EA', 'ZPP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.NP', 'cocap.AH_plo') => ('-d', 'R', 'cocap.NP', 'cocap.AH_plo')
('-d', 'A', 'cocap.NP', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.NP', 'cocap.AH_plo')
('-d', 'A', 'cocap.NP', 'co.AH_plo') => ('-d', 'R', 'cocap.NP', 'co.AH_plo')
('-d', 'A', 'cocap.NP', 'co.AH_plo') => ('-d', 'AA', 'cocap.NP', 'co.AH_plo')
('-d', 'A', 'cocap.NP', 'AH_plo') => ('-d', 'R', 'cocap.NP', 'AH_plo')
('-d', 'A', 'cocap.NP', 'AH_plo') => ('-d', 'AA', 'cocap.NP', 'AH_plo')
('-d', 'AA', 'cocap.NP', 'AH_plo') => ('-d', 'T', 'cocap.NP', 'AH_plo')
('-d', 'AA', 'cocap.NP', 'AH_plo') => ('-d', 'EA', 'cocap.NP', 'AH_plo')
('-d', 'AA', 'cocap.NP', 'co.AH_plo') => ('-d', 'T', 'cocap.NP', 'co.AH_plo')
('-d', 'AA', 'cocap.NP', 'co.AH_plo') => ('-d', 'EA', 'cocap.NP', 'co.AH_plo')
('-d', 'AA', 'cocap.NP', 'cocap.AH_plo') => ('-d', 'T', 'cocap.NP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NP', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.NP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NP', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.NP', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.NP', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.NP', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.NP', 'co.NEXP_plo') => ('-d', 'T', 'cocap.NP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.NP', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.NP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.NP', 'NEXP_plo') => ('-d', 'T', 'cocap.NP', 'NEXP_plo')
('-d', 'AA', 'cocap.NP', 'NEXP_plo') => ('-d', 'EA', 'cocap.NP', 'NEXP_plo')
('-d', 'A', 'cocap.MA', 'NEXP_plo') => ('-d', 'R', 'cocap.MA', 'NEXP_plo')
('-d', 'A', 'cocap.MA', 'NEXP_plo') => ('-d', 'AA', 'cocap.MA', 'NEXP_plo')
('-d', 'A', 'cocap.MA', 'co.NEXP_plo') => ('-d', 'R', 'cocap.MA', 'co.NEXP_plo')
('-d', 'A', 'cocap.MA', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.MA', 'co.NEXP_plo')
('-d', 'A', 'cocap.MA', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.MA', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.MA', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.MA', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.MA', 'cocap.AH_plo') => ('-d', 'R', 'cocap.MA', 'cocap.AH_plo')
('-d', 'A', 'cocap.MA', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.MA', 'cocap.AH_plo')
('-d', 'A', 'cocap.MA', 'co.AH_plo') => ('-d', 'R', 'cocap.MA', 'co.AH_plo')
('-d', 'A', 'cocap.MA', 'co.AH_plo') => ('-d', 'AA', 'cocap.MA', 'co.AH_plo')
('-d', 'A', 'cocap.MA', 'AH_plo') => ('-d', 'R', 'cocap.MA', 'AH_plo')
('-d', 'A', 'cocap.MA', 'AH_plo') => ('-d', 'AA', 'cocap.MA', 'AH_plo')
('-d', 'AA', 'cocap.MA', 'AH_plo') => ('-d', 'T', 'cocap.MA', 'AH_plo')
('-d', 'AA', 'cocap.MA', 'AH_plo') => ('-d', 'EA', 'cocap.MA', 'AH_plo')
('-d', 'AA', 'cocap.MA', 'co.AH_plo') => ('-d', 'T', 'cocap.MA', 'co.AH_plo')
('-d', 'AA', 'cocap.MA', 'co.AH_plo') => ('-d', 'EA', 'cocap.MA', 'co.AH_plo')
('-d', 'AA', 'cocap.MA', 'cocap.AH_plo') => ('-d', 'T', 'cocap.MA', 'cocap.AH_plo')
('-d', 'AA', 'cocap.MA', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.MA', 'cocap.AH_plo')
('-d', 'AA', 'cocap.MA', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.MA', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.MA', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.MA', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.MA', 'co.NEXP_plo') => ('-d', 'T', 'cocap.MA', 'co.NEXP_plo')
('-d', 'AA', 'cocap.MA', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.MA', 'co.NEXP_plo')
('-d', 'AA', 'cocap.MA', 'NEXP_plo') => ('-d', 'T', 'cocap.MA', 'NEXP_plo')
('-d', 'AA', 'cocap.MA', 'NEXP_plo') => ('-d', 'EA', 'cocap.MA', 'NEXP_plo')
('-d', 'A', 'cocap.SBP', 'AH_plo') => ('-d', 'R', 'cocap.SBP', 'AH_plo')
('-d', 'A', 'cocap.SBP', 'AH_plo') => ('-d', 'AA', 'cocap.SBP', 'AH_plo')
('-d', 'A', 'cocap.SBP', 'co.AH_plo') => ('-d', 'R', 'cocap.SBP', 'co.AH_plo')
('-d', 'A', 'cocap.SBP', 'co.AH_plo') => ('-d', 'AA', 'cocap.SBP', 'co.AH_plo')
('-d', 'A', 'cocap.SBP', 'cocap.AH_plo') => ('-d', 'R', 'cocap.SBP', 'cocap.AH_plo')
('-d', 'A', 'cocap.SBP', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.SBP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.SBP', 'cocap.AH_plo') => ('-d', 'T', 'cocap.SBP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.SBP', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.SBP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.SBP', 'co.AH_plo') => ('-d', 'T', 'cocap.SBP', 'co.AH_plo')
('-d', 'AA', 'cocap.SBP', 'co.AH_plo') => ('-d', 'EA', 'cocap.SBP', 'co.AH_plo')
('-d', 'AA', 'cocap.SBP', 'AH_plo') => ('-d', 'T', 'cocap.SBP', 'AH_plo')
('-d', 'AA', 'cocap.SBP', 'AH_plo') => ('-d', 'EA', 'cocap.SBP', 'AH_plo')
('-d', 'AA', 'cocap.SBP', 'NEXP_plo') => ('-d', 'T', 'cocap.SBP', 'NEXP_plo')
('-d', 'AA', 'cocap.SBP', 'NEXP_plo') => ('-d', 'EA', 'cocap.SBP', 'NEXP_plo')
('-d', 'AA', 'cocap.SBP', 'co.NEXP_plo') => ('-d', 'T', 'cocap.SBP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.SBP', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.SBP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.SBP', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.SBP', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.SBP', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.SBP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.SBP', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.SBP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.SBP', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.SBP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.SBP', 'co.NEXP') => ('p', 'R', 'cocap.SBP', 'co.NEXP')
('p', 'A', 'cocap.SBP', 'co.NEXP') => ('p', 'AA', 'cocap.SBP', 'co.NEXP')
('p', 'A', 'cocap.SBP', 'NEXP') => ('p', 'R', 'cocap.SBP', 'NEXP')
('p', 'A', 'cocap.SBP', 'NEXP') => ('p', 'AA', 'cocap.SBP', 'NEXP')
('p', 'A', 'cocap.SBP', 'cocap.NEXP') => ('p', 'R', 'cocap.SBP', 'cocap.NEXP')
('p', 'A', 'cocap.SBP', 'cocap.NEXP') => ('p', 'AA', 'cocap.SBP', 'cocap.NEXP')
('p', 'A', 'cocap.NP', 'cocap.NEXP') => ('p', 'R', 'cocap.NP', 'cocap.NEXP')
('p', 'A', 'cocap.NP', 'cocap.NEXP') => ('p', 'AA', 'cocap.NP', 'cocap.NEXP')
('p', 'A', 'cocap.NP', 'co.NEXP') => ('p', 'R', 'cocap.NP', 'co.NEXP')
('p', 'A', 'cocap.NP', 'co.NEXP') => ('p', 'AA', 'cocap.NP', 'co.NEXP')
('p', 'A', 'cocap.NP', 'NEXP') => ('p', 'R', 'cocap.NP', 'NEXP')
('p', 'A', 'cocap.NP', 'NEXP') => ('p', 'AA', 'cocap.NP', 'NEXP')
('p', 'A', 'ZPP', 'NEXP') => ('p', 'R', 'ZPP', 'NEXP')
('p', 'A', 'ZPP', 'NEXP') => ('p', 'AA', 'ZPP', 'NEXP')
('p', 'A', 'ZPP', 'co.NEXP') => ('p', 'R', 'ZPP', 'co.NEXP')
('p', 'A', 'ZPP', 'co.NEXP') => ('p', 'AA', 'ZPP', 'co.NEXP')
('p', 'A', 'ZPP', 'cocap.NEXP') => ('p', 'R', 'ZPP', 'cocap.NEXP')
('p', 'A', 'ZPP', 'cocap.NEXP') => ('p', 'AA', 'ZPP', 'cocap.NEXP')
('p', 'A', 'ZPP', 'R') => ('p', 'R', 'ZPP', 'R')
('p', 'A', 'ZPP', 'R') => ('p', 'AA', 'ZPP', 'R')
('p', 'A', 'ZPP', 'RE') => ('p', 'R', 'ZPP', 'RE')
('p', 'A', 'ZPP', 'RE') => ('p', 'AA', 'ZPP', 'RE')
('p', 'A', 'ZPP', 'co.RE') => ('p', 'R', 'ZPP', 'co.RE')
('p', 'A', 'ZPP', 'co.RE') => ('p', 'AA', 'ZPP', 'co.RE')
('p', 'AA', 'ZPP', 'co.RE') => ('p', 'T', 'ZPP', 'co.RE')
('p', 'AA', 'ZPP', 'co.RE') => ('p', 'EA', 'ZPP', 'co.RE')
('p', 'AA', 'ZPP', 'RE') => ('p', 'T', 'ZPP', 'RE')
('p', 'AA', 'ZPP', 'RE') => ('p', 'EA', 'ZPP', 'RE')
('p', 'AA', 'ZPP', 'R') => ('p', 'T', 'ZPP', 'R')
('p', 'AA', 'ZPP', 'R') => ('p', 'EA', 'ZPP', 'R')
('p', 'AA', 'ZPP', 'cocap.NEXP') => ('p', 'T', 'ZPP', 'cocap.NEXP')
('p', 'AA', 'ZPP', 'cocap.NEXP') => ('p', 'EA', 'ZPP', 'cocap.NEXP')
('p', 'AA', 'ZPP', 'co.NEXP') => ('p', 'T', 'ZPP', 'co.NEXP')
('p', 'AA', 'ZPP', 'co.NEXP') => ('p', 'EA', 'ZPP', 'co.NEXP')
('p', 'AA', 'ZPP', 'NEXP') => ('p', 'T', 'ZPP', 'NEXP')
('p', 'AA', 'ZPP', 'NEXP') => ('p', 'EA', 'ZPP', 'NEXP')
('p', 'A', 'cocap.NP', 'R') => ('p', 'R', 'cocap.NP', 'R')
('p', 'A', 'cocap.NP', 'R') => ('p', 'AA', 'cocap.NP', 'R')
('p', 'A', 'cocap.NP', 'RE') => ('p', 'R', 'cocap.NP', 'RE')
('p', 'A', 'cocap.NP', 'RE') => ('p', 'AA', 'cocap.NP', 'RE')
('p', 'A', 'cocap.NP', 'co.RE') => ('p', 'R', 'cocap.NP', 'co.RE')
('p', 'A', 'cocap.NP', 'co.RE') => ('p', 'AA', 'cocap.NP', 'co.RE')
('p', 'AA', 'cocap.NP', 'co.RE') => ('p', 'T', 'cocap.NP', 'co.RE')
('p', 'AA', 'cocap.NP', 'co.RE') => ('p', 'EA', 'cocap.NP', 'co.RE')
('p', 'AA', 'cocap.NP', 'RE') => ('p', 'T', 'cocap.NP', 'RE')
('p', 'AA', 'cocap.NP', 'RE') => ('p', 'EA', 'cocap.NP', 'RE')
('p', 'AA', 'cocap.NP', 'R') => ('p', 'T', 'cocap.NP', 'R')
('p', 'AA', 'cocap.NP', 'R') => ('p', 'EA', 'cocap.NP', 'R')
('p', 'AA', 'cocap.NP', 'NEXP') => ('p', 'T', 'cocap.NP', 'NEXP')
('p', 'AA', 'cocap.NP', 'NEXP') => ('p', 'EA', 'cocap.NP', 'NEXP')
('p', 'AA', 'cocap.NP', 'co.NEXP') => ('p', 'T', 'cocap.NP', 'co.NEXP')
('p', 'AA', 'cocap.NP', 'co.NEXP') => ('p', 'EA', 'cocap.NP', 'co.NEXP')
('p', 'AA', 'cocap.NP', 'cocap.NEXP') => ('p', 'T', 'cocap.NP', 'cocap.NEXP')
('p', 'AA', 'cocap.NP', 'cocap.NEXP') => ('p', 'EA', 'cocap.NP', 'cocap.NEXP')
('p', 'A', 'cocap.SBP', 'R') => ('p', 'R', 'cocap.SBP', 'R')
('p', 'A', 'cocap.SBP', 'R') => ('p', 'AA', 'cocap.SBP', 'R')
('p', 'A', 'cocap.SBP', 'RE') => ('p', 'R', 'cocap.SBP', 'RE')
('p', 'A', 'cocap.SBP', 'RE') => ('p', 'AA', 'cocap.SBP', 'RE')
('p', 'A', 'cocap.SBP', 'co.RE') => ('p', 'R', 'cocap.SBP', 'co.RE')
('p', 'A', 'cocap.SBP', 'co.RE') => ('p', 'AA', 'cocap.SBP', 'co.RE')
('p', 'A', 'cocap.MA', 'co.RE') => ('p', 'R', 'cocap.MA', 'co.RE')
('p', 'A', 'cocap.MA', 'co.RE') => ('p', 'AA', 'cocap.MA', 'co.RE')
('p', 'A', 'cocap.MA', 'RE') => ('p', 'R', 'cocap.MA', 'RE')
('p', 'A', 'cocap.MA', 'RE') => ('p', 'AA', 'cocap.MA', 'RE')
('p', 'A', 'cocap.MA', 'R') => ('p', 'R', 'cocap.MA', 'R')
('p', 'A', 'cocap.MA', 'R') => ('p', 'AA', 'cocap.MA', 'R')
('p', 'AA', 'cocap.MA', 'R') => ('p', 'T', 'cocap.MA', 'R')
('p', 'AA', 'cocap.MA', 'R') => ('p', 'EA', 'cocap.MA', 'R')
('p', 'AA', 'cocap.MA', 'RE') => ('p', 'T', 'cocap.MA', 'RE')
('p', 'AA', 'cocap.MA', 'RE') => ('p', 'EA', 'cocap.MA', 'RE')
('p', 'AA', 'cocap.MA', 'co.RE') => ('p', 'T', 'cocap.MA', 'co.RE')
('p', 'AA', 'cocap.MA', 'co.RE') => ('p', 'EA', 'cocap.MA', 'co.RE')
('p', 'AA', 'cocap.SBP', 'co.RE') => ('p', 'T', 'cocap.SBP', 'co.RE')
('p', 'AA', 'cocap.SBP', 'co.RE') => ('p', 'EA', 'cocap.SBP', 'co.RE')
('p', 'AA', 'cocap.SBP', 'RE') => ('p', 'T', 'cocap.SBP', 'RE')
('p', 'AA', 'cocap.SBP', 'RE') => ('p', 'EA', 'cocap.SBP', 'RE')
('p', 'AA', 'cocap.SBP', 'R') => ('p', 'T', 'cocap.SBP', 'R')
('p', 'AA', 'cocap.SBP', 'R') => ('p', 'EA', 'cocap.SBP', 'R')
('p', 'A', 'cocap.SBP', 'NEXP/poly') => ('p', 'R', 'cocap.SBP', 'NEXP/poly')
('p', 'A', 'cocap.SBP', 'NEXP/poly') => ('p', 'AA', 'cocap.SBP', 'NEXP/poly')
('p', 'A', 'cocap.MA', 'NEXP/poly') => ('p', 'R', 'cocap.MA', 'NEXP/poly')
('p', 'A', 'cocap.MA', 'NEXP/poly') => ('p', 'AA', 'cocap.MA', 'NEXP/poly')
('p', 'AA', 'cocap.MA', 'NEXP/poly') => ('p', 'T', 'cocap.MA', 'NEXP/poly')
('p', 'AA', 'cocap.MA', 'NEXP/poly') => ('p', 'EA', 'cocap.MA', 'NEXP/poly')
('p', 'AA', 'cocap.SBP', 'NEXP/poly') => ('p', 'T', 'cocap.SBP', 'NEXP/poly')
('p', 'AA', 'cocap.SBP', 'NEXP/poly') => ('p', 'EA', 'cocap.SBP', 'NEXP/poly')
('p', 'A', 'cocap.MA', 'cocap.NEXP') => ('p', 'R', 'cocap.MA', 'cocap.NEXP')
('p', 'A', 'cocap.MA', 'cocap.NEXP') => ('p', 'AA', 'cocap.MA', 'cocap.NEXP')
('p', 'A', 'cocap.MA', 'co.NEXP') => ('p', 'R', 'cocap.MA', 'co.NEXP')
('p', 'A', 'cocap.MA', 'co.NEXP') => ('p', 'AA', 'cocap.MA', 'co.NEXP')
('p', 'A', 'cocap.MA', 'NEXP') => ('p', 'R', 'cocap.MA', 'NEXP')
('p', 'A', 'cocap.MA', 'NEXP') => ('p', 'AA', 'cocap.MA', 'NEXP')
('p', 'AA', 'cocap.MA', 'NEXP') => ('p', 'T', 'cocap.MA', 'NEXP')
('p', 'AA', 'cocap.MA', 'NEXP') => ('p', 'EA', 'cocap.MA', 'NEXP')
('p', 'AA', 'cocap.MA', 'co.NEXP') => ('p', 'T', 'cocap.MA', 'co.NEXP')
('p', 'AA', 'cocap.MA', 'co.NEXP') => ('p', 'EA', 'cocap.MA', 'co.NEXP')
('p', 'AA', 'cocap.MA', 'cocap.NEXP') => ('p', 'T', 'cocap.MA', 'cocap.NEXP')
('p', 'AA', 'cocap.MA', 'cocap.NEXP') => ('p', 'EA', 'cocap.MA', 'cocap.NEXP')
('p', 'AA', 'cocap.SBP', 'cocap.NEXP') => ('p', 'T', 'cocap.SBP', 'cocap.NEXP')
('p', 'AA', 'cocap.SBP', 'cocap.NEXP') => ('p', 'EA', 'cocap.SBP', 'cocap.NEXP')
('p', 'AA', 'cocap.SBP', 'co.NEXP') => ('p', 'T', 'cocap.SBP', 'co.NEXP')
('p', 'AA', 'cocap.SBP', 'co.NEXP') => ('p', 'EA', 'cocap.SBP', 'co.NEXP')
('p', 'AA', 'cocap.SBP', 'NEXP') => ('p', 'T', 'cocap.SBP', 'NEXP')
('p', 'AA', 'cocap.SBP', 'NEXP') => ('p', 'EA', 'cocap.SBP', 'NEXP')
('p', 'A', 'cocap.SBP', 'co.NEXP_plo') => ('p', 'R', 'cocap.SBP', 'co.NEXP_plo')
('p', 'A', 'cocap.SBP', 'co.NEXP_plo') => ('p', 'AA', 'cocap.SBP', 'co.NEXP_plo')
('p', 'A', 'cocap.SBP', 'NEXP_plo') => ('p', 'R', 'cocap.SBP', 'NEXP_plo')
('p', 'A', 'cocap.SBP', 'NEXP_plo') => ('p', 'AA', 'cocap.SBP', 'NEXP_plo')
('p', 'A', 'cocap.NP', 'NEXP_plo') => ('p', 'R', 'cocap.NP', 'NEXP_plo')
('p', 'A', 'cocap.NP', 'NEXP_plo') => ('p', 'AA', 'cocap.NP', 'NEXP_plo')
('p', 'A', 'cocap.NP', 'co.NEXP_plo') => ('p', 'R', 'cocap.NP', 'co.NEXP_plo')
('p', 'A', 'cocap.NP', 'co.NEXP_plo') => ('p', 'AA', 'cocap.NP', 'co.NEXP_plo')
('p', 'A', 'cocap.NP', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.NP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.NP', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.NP', 'cocap.NEXP_plo')
('p', 'A', 'ZPP', 'cocap.NEXP_plo') => ('p', 'R', 'ZPP', 'cocap.NEXP_plo')
('p', 'A', 'ZPP', 'cocap.NEXP_plo') => ('p', 'AA', 'ZPP', 'cocap.NEXP_plo')
('p', 'A', 'ZPP', 'co.NEXP_plo') => ('p', 'R', 'ZPP', 'co.NEXP_plo')
('p', 'A', 'ZPP', 'co.NEXP_plo') => ('p', 'AA', 'ZPP', 'co.NEXP_plo')
('p', 'A', 'ZPP', 'NEXP_plo') => ('p', 'R', 'ZPP', 'NEXP_plo')
('p', 'A', 'ZPP', 'NEXP_plo') => ('p', 'AA', 'ZPP', 'NEXP_plo')
('p', 'A', 'ZPP', 'AH_plo') => ('p', 'R', 'ZPP', 'AH_plo')
('p', 'A', 'ZPP', 'AH_plo') => ('p', 'AA', 'ZPP', 'AH_plo')
('p', 'A', 'ZPP', 'co.AH_plo') => ('p', 'R', 'ZPP', 'co.AH_plo')
('p', 'A', 'ZPP', 'co.AH_plo') => ('p', 'AA', 'ZPP', 'co.AH_plo')
('p', 'A', 'ZPP', 'cocap.AH_plo') => ('p', 'R', 'ZPP', 'cocap.AH_plo')
('p', 'A', 'ZPP', 'cocap.AH_plo') => ('p', 'AA', 'ZPP', 'cocap.AH_plo')
('p', 'AA', 'ZPP', 'cocap.AH_plo') => ('p', 'T', 'ZPP', 'cocap.AH_plo')
('p', 'AA', 'ZPP', 'cocap.AH_plo') => ('p', 'EA', 'ZPP', 'cocap.AH_plo')
('p', 'AA', 'ZPP', 'co.AH_plo') => ('p', 'T', 'ZPP', 'co.AH_plo')
('p', 'AA', 'ZPP', 'co.AH_plo') => ('p', 'EA', 'ZPP', 'co.AH_plo')
('p', 'AA', 'ZPP', 'AH_plo') => ('p', 'T', 'ZPP', 'AH_plo')
('p', 'AA', 'ZPP', 'AH_plo') => ('p', 'EA', 'ZPP', 'AH_plo')
('p', 'AA', 'ZPP', 'NEXP_plo') => ('p', 'T', 'ZPP', 'NEXP_plo')
('p', 'AA', 'ZPP', 'NEXP_plo') => ('p', 'EA', 'ZPP', 'NEXP_plo')
('p', 'AA', 'ZPP', 'co.NEXP_plo') => ('p', 'T', 'ZPP', 'co.NEXP_plo')
('p', 'AA', 'ZPP', 'co.NEXP_plo') => ('p', 'EA', 'ZPP', 'co.NEXP_plo')
('p', 'AA', 'ZPP', 'cocap.NEXP_plo') => ('p', 'T', 'ZPP', 'cocap.NEXP_plo')
('p', 'AA', 'ZPP', 'cocap.NEXP_plo') => ('p', 'EA', 'ZPP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.NP', 'cocap.AH_plo') => ('p', 'R', 'cocap.NP', 'cocap.AH_plo')
('p', 'A', 'cocap.NP', 'cocap.AH_plo') => ('p', 'AA', 'cocap.NP', 'cocap.AH_plo')
('p', 'A', 'cocap.NP', 'co.AH_plo') => ('p', 'R', 'cocap.NP', 'co.AH_plo')
('p', 'A', 'cocap.NP', 'co.AH_plo') => ('p', 'AA', 'cocap.NP', 'co.AH_plo')
('p', 'A', 'cocap.NP', 'AH_plo') => ('p', 'R', 'cocap.NP', 'AH_plo')
('p', 'A', 'cocap.NP', 'AH_plo') => ('p', 'AA', 'cocap.NP', 'AH_plo')
('p', 'AA', 'cocap.NP', 'AH_plo') => ('p', 'T', 'cocap.NP', 'AH_plo')
('p', 'AA', 'cocap.NP', 'AH_plo') => ('p', 'EA', 'cocap.NP', 'AH_plo')
('p', 'AA', 'cocap.NP', 'co.AH_plo') => ('p', 'T', 'cocap.NP', 'co.AH_plo')
('p', 'AA', 'cocap.NP', 'co.AH_plo') => ('p', 'EA', 'cocap.NP', 'co.AH_plo')
('p', 'AA', 'cocap.NP', 'cocap.AH_plo') => ('p', 'T', 'cocap.NP', 'cocap.AH_plo')
('p', 'AA', 'cocap.NP', 'cocap.AH_plo') => ('p', 'EA', 'cocap.NP', 'cocap.AH_plo')
('p', 'AA', 'cocap.NP', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.NP', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.NP', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.NP', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.NP', 'co.NEXP_plo') => ('p', 'T', 'cocap.NP', 'co.NEXP_plo')
('p', 'AA', 'cocap.NP', 'co.NEXP_plo') => ('p', 'EA', 'cocap.NP', 'co.NEXP_plo')
('p', 'AA', 'cocap.NP', 'NEXP_plo') => ('p', 'T', 'cocap.NP', 'NEXP_plo')
('p', 'AA', 'cocap.NP', 'NEXP_plo') => ('p', 'EA', 'cocap.NP', 'NEXP_plo')
('p', 'A', 'cocap.MA', 'NEXP_plo') => ('p', 'R', 'cocap.MA', 'NEXP_plo')
('p', 'A', 'cocap.MA', 'NEXP_plo') => ('p', 'AA', 'cocap.MA', 'NEXP_plo')
('p', 'A', 'cocap.MA', 'co.NEXP_plo') => ('p', 'R', 'cocap.MA', 'co.NEXP_plo')
('p', 'A', 'cocap.MA', 'co.NEXP_plo') => ('p', 'AA', 'cocap.MA', 'co.NEXP_plo')
('p', 'A', 'cocap.MA', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.MA', 'cocap.NEXP_plo')
('p', 'A', 'cocap.MA', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.MA', 'cocap.NEXP_plo')
('p', 'A', 'cocap.MA', 'cocap.AH_plo') => ('p', 'R', 'cocap.MA', 'cocap.AH_plo')
('p', 'A', 'cocap.MA', 'cocap.AH_plo') => ('p', 'AA', 'cocap.MA', 'cocap.AH_plo')
('p', 'A', 'cocap.MA', 'co.AH_plo') => ('p', 'R', 'cocap.MA', 'co.AH_plo')
('p', 'A', 'cocap.MA', 'co.AH_plo') => ('p', 'AA', 'cocap.MA', 'co.AH_plo')
('p', 'A', 'cocap.MA', 'AH_plo') => ('p', 'R', 'cocap.MA', 'AH_plo')
('p', 'A', 'cocap.MA', 'AH_plo') => ('p', 'AA', 'cocap.MA', 'AH_plo')
('p', 'AA', 'cocap.MA', 'AH_plo') => ('p', 'T', 'cocap.MA', 'AH_plo')
('p', 'AA', 'cocap.MA', 'AH_plo') => ('p', 'EA', 'cocap.MA', 'AH_plo')
('p', 'AA', 'cocap.MA', 'co.AH_plo') => ('p', 'T', 'cocap.MA', 'co.AH_plo')
('p', 'AA', 'cocap.MA', 'co.AH_plo') => ('p', 'EA', 'cocap.MA', 'co.AH_plo')
('p', 'AA', 'cocap.MA', 'cocap.AH_plo') => ('p', 'T', 'cocap.MA', 'cocap.AH_plo')
('p', 'AA', 'cocap.MA', 'cocap.AH_plo') => ('p', 'EA', 'cocap.MA', 'cocap.AH_plo')
('p', 'AA', 'cocap.MA', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.MA', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.MA', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.MA', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.MA', 'co.NEXP_plo') => ('p', 'T', 'cocap.MA', 'co.NEXP_plo')
('p', 'AA', 'cocap.MA', 'co.NEXP_plo') => ('p', 'EA', 'cocap.MA', 'co.NEXP_plo')
('p', 'AA', 'cocap.MA', 'NEXP_plo') => ('p', 'T', 'cocap.MA', 'NEXP_plo')
('p', 'AA', 'cocap.MA', 'NEXP_plo') => ('p', 'EA', 'cocap.MA', 'NEXP_plo')
('p', 'A', 'cocap.SBP', 'AH_plo') => ('p', 'R', 'cocap.SBP', 'AH_plo')
('p', 'A', 'cocap.SBP', 'AH_plo') => ('p', 'AA', 'cocap.SBP', 'AH_plo')
('p', 'A', 'cocap.SBP', 'co.AH_plo') => ('p', 'R', 'cocap.SBP', 'co.AH_plo')
('p', 'A', 'cocap.SBP', 'co.AH_plo') => ('p', 'AA', 'cocap.SBP', 'co.AH_plo')
('p', 'A', 'cocap.SBP', 'cocap.AH_plo') => ('p', 'R', 'cocap.SBP', 'cocap.AH_plo')
('p', 'A', 'cocap.SBP', 'cocap.AH_plo') => ('p', 'AA', 'cocap.SBP', 'cocap.AH_plo')
('p', 'AA', 'cocap.SBP', 'cocap.AH_plo') => ('p', 'T', 'cocap.SBP', 'cocap.AH_plo')
('p', 'AA', 'cocap.SBP', 'cocap.AH_plo') => ('p', 'EA', 'cocap.SBP', 'cocap.AH_plo')
('p', 'AA', 'cocap.SBP', 'co.AH_plo') => ('p', 'T', 'cocap.SBP', 'co.AH_plo')
('p', 'AA', 'cocap.SBP', 'co.AH_plo') => ('p', 'EA', 'cocap.SBP', 'co.AH_plo')
('p', 'AA', 'cocap.SBP', 'AH_plo') => ('p', 'T', 'cocap.SBP', 'AH_plo')
('p', 'AA', 'cocap.SBP', 'AH_plo') => ('p', 'EA', 'cocap.SBP', 'AH_plo')
('p', 'AA', 'cocap.SBP', 'NEXP_plo') => ('p', 'T', 'cocap.SBP', 'NEXP_plo')
('p', 'AA', 'cocap.SBP', 'NEXP_plo') => ('p', 'EA', 'cocap.SBP', 'NEXP_plo')
('p', 'AA', 'cocap.SBP', 'co.NEXP_plo') => ('p', 'T', 'cocap.SBP', 'co.NEXP_plo')
('p', 'AA', 'cocap.SBP', 'co.NEXP_plo') => ('p', 'EA', 'cocap.SBP', 'co.NEXP_plo')
('p', 'AA', 'cocap.SBP', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.SBP', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.SBP', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.SBP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.SBP', 'QMIP_cme') => ('-d', 'R', 'cocap.SBP', 'QMIP_cme')
('-d', 'A', 'cocap.SBP', 'QMIP_cme') => ('-d', 'AA', 'cocap.SBP', 'QMIP_cme')
('-d', 'A', 'cocap.SBP', 'co.QMIP_cme') => ('-d', 'R', 'cocap.SBP', 'co.QMIP_cme')
('-d', 'A', 'cocap.SBP', 'co.QMIP_cme') => ('-d', 'AA', 'cocap.SBP', 'co.QMIP_cme')
('-d', 'A', 'cocap.SBP', 'cocap.QMIP_cme') => ('-d', 'R', 'cocap.SBP', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.SBP', 'cocap.QMIP_cme') => ('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.NP', 'cocap.QMIP_cme') => ('-d', 'R', 'cocap.NP', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.NP', 'cocap.QMIP_cme') => ('-d', 'AA', 'cocap.NP', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.NP', 'QMIP_cme') => ('-d', 'R', 'cocap.NP', 'QMIP_cme')
('-d', 'A', 'cocap.NP', 'QMIP_cme') => ('-d', 'AA', 'cocap.NP', 'QMIP_cme')
('-d', 'A', 'cocap.NP', 'co.QMIP_cme') => ('-d', 'R', 'cocap.NP', 'co.QMIP_cme')
('-d', 'A', 'cocap.NP', 'co.QMIP_cme') => ('-d', 'AA', 'cocap.NP', 'co.QMIP_cme')
('-d', 'A', 'ZPP', 'co.QMIP_cme') => ('-d', 'R', 'ZPP', 'co.QMIP_cme')
('-d', 'A', 'ZPP', 'co.QMIP_cme') => ('-d', 'AA', 'ZPP', 'co.QMIP_cme')
('-d', 'A', 'ZPP', 'QMIP_cme') => ('-d', 'R', 'ZPP', 'QMIP_cme')
('-d', 'A', 'ZPP', 'QMIP_cme') => ('-d', 'AA', 'ZPP', 'QMIP_cme')
('-d', 'A', 'ZPP', 'cocap.QMIP_cme') => ('-d', 'R', 'ZPP', 'cocap.QMIP_cme')
('-d', 'A', 'ZPP', 'cocap.QMIP_cme') => ('-d', 'AA', 'ZPP', 'cocap.QMIP_cme')
('-d', 'AA', 'ZPP', 'cocap.QMIP_cme') => ('-d', 'T', 'ZPP', 'cocap.QMIP_cme')
('-d', 'AA', 'ZPP', 'cocap.QMIP_cme') => ('-d', 'EA', 'ZPP', 'cocap.QMIP_cme')
('-d', 'AA', 'ZPP', 'QMIP_cme') => ('-d', 'T', 'ZPP', 'QMIP_cme')
('-d', 'AA', 'ZPP', 'QMIP_cme') => ('-d', 'EA', 'ZPP', 'QMIP_cme')
('-d', 'AA', 'ZPP', 'co.QMIP_cme') => ('-d', 'T', 'ZPP', 'co.QMIP_cme')
('-d', 'AA', 'ZPP', 'co.QMIP_cme') => ('-d', 'EA', 'ZPP', 'co.QMIP_cme')
('-d', 'AA', 'cocap.NP', 'co.QMIP_cme') => ('-d', 'T', 'cocap.NP', 'co.QMIP_cme')
('-d', 'AA', 'cocap.NP', 'co.QMIP_cme') => ('-d', 'EA', 'cocap.NP', 'co.QMIP_cme')
('-d', 'AA', 'cocap.NP', 'QMIP_cme') => ('-d', 'T', 'cocap.NP', 'QMIP_cme')
('-d', 'AA', 'cocap.NP', 'QMIP_cme') => ('-d', 'EA', 'cocap.NP', 'QMIP_cme')
('-d', 'AA', 'cocap.NP', 'cocap.QMIP_cme') => ('-d', 'T', 'cocap.NP', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.NP', 'cocap.QMIP_cme') => ('-d', 'EA', 'cocap.NP', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.MA', 'cocap.QMIP_cme') => ('-d', 'R', 'cocap.MA', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.MA', 'cocap.QMIP_cme') => ('-d', 'AA', 'cocap.MA', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.MA', 'QMIP_cme') => ('-d', 'R', 'cocap.MA', 'QMIP_cme')
('-d', 'A', 'cocap.MA', 'QMIP_cme') => ('-d', 'AA', 'cocap.MA', 'QMIP_cme')
('-d', 'A', 'cocap.MA', 'co.QMIP_cme') => ('-d', 'R', 'cocap.MA', 'co.QMIP_cme')
('-d', 'A', 'cocap.MA', 'co.QMIP_cme') => ('-d', 'AA', 'cocap.MA', 'co.QMIP_cme')
('-d', 'AA', 'cocap.MA', 'co.QMIP_cme') => ('-d', 'T', 'cocap.MA', 'co.QMIP_cme')
('-d', 'AA', 'cocap.MA', 'co.QMIP_cme') => ('-d', 'EA', 'cocap.MA', 'co.QMIP_cme')
('-d', 'AA', 'cocap.MA', 'QMIP_cme') => ('-d', 'T', 'cocap.MA', 'QMIP_cme')
('-d', 'AA', 'cocap.MA', 'QMIP_cme') => ('-d', 'EA', 'cocap.MA', 'QMIP_cme')
('-d', 'AA', 'cocap.MA', 'cocap.QMIP_cme') => ('-d', 'T', 'cocap.MA', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.MA', 'cocap.QMIP_cme') => ('-d', 'EA', 'cocap.MA', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_cme') => ('-d', 'T', 'cocap.SBP', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_cme') => ('-d', 'EA', 'cocap.SBP', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.SBP', 'QMIP_cme') => ('-d', 'T', 'cocap.SBP', 'QMIP_cme')
('-d', 'AA', 'cocap.SBP', 'QMIP_cme') => ('-d', 'EA', 'cocap.SBP', 'QMIP_cme')
('-d', 'AA', 'cocap.SBP', 'co.QMIP_cme') => ('-d', 'T', 'cocap.SBP', 'co.QMIP_cme')
('-d', 'AA', 'cocap.SBP', 'co.QMIP_cme') => ('-d', 'EA', 'cocap.SBP', 'co.QMIP_cme')
('p', 'A', 'cocap.SBP', 'QMIP_cme') => ('p', 'R', 'cocap.SBP', 'QMIP_cme')
('p', 'A', 'cocap.SBP', 'QMIP_cme') => ('p', 'AA', 'cocap.SBP', 'QMIP_cme')
('p', 'A', 'cocap.SBP', 'co.QMIP_cme') => ('p', 'R', 'cocap.SBP', 'co.QMIP_cme')
('p', 'A', 'cocap.SBP', 'co.QMIP_cme') => ('p', 'AA', 'cocap.SBP', 'co.QMIP_cme')
('p', 'A', 'cocap.SBP', 'cocap.QMIP_cme') => ('p', 'R', 'cocap.SBP', 'cocap.QMIP_cme')
('p', 'A', 'cocap.SBP', 'cocap.QMIP_cme') => ('p', 'AA', 'cocap.SBP', 'cocap.QMIP_cme')
('p', 'A', 'cocap.NP', 'cocap.QMIP_cme') => ('p', 'R', 'cocap.NP', 'cocap.QMIP_cme')
('p', 'A', 'cocap.NP', 'cocap.QMIP_cme') => ('p', 'AA', 'cocap.NP', 'cocap.QMIP_cme')
('p', 'A', 'cocap.NP', 'QMIP_cme') => ('p', 'R', 'cocap.NP', 'QMIP_cme')
('p', 'A', 'cocap.NP', 'QMIP_cme') => ('p', 'AA', 'cocap.NP', 'QMIP_cme')
('p', 'A', 'cocap.NP', 'co.QMIP_cme') => ('p', 'R', 'cocap.NP', 'co.QMIP_cme')
('p', 'A', 'cocap.NP', 'co.QMIP_cme') => ('p', 'AA', 'cocap.NP', 'co.QMIP_cme')
('p', 'A', 'ZPP', 'co.QMIP_cme') => ('p', 'R', 'ZPP', 'co.QMIP_cme')
('p', 'A', 'ZPP', 'co.QMIP_cme') => ('p', 'AA', 'ZPP', 'co.QMIP_cme')
('p', 'A', 'ZPP', 'QMIP_cme') => ('p', 'R', 'ZPP', 'QMIP_cme')
('p', 'A', 'ZPP', 'QMIP_cme') => ('p', 'AA', 'ZPP', 'QMIP_cme')
('p', 'A', 'ZPP', 'cocap.QMIP_cme') => ('p', 'R', 'ZPP', 'cocap.QMIP_cme')
('p', 'A', 'ZPP', 'cocap.QMIP_cme') => ('p', 'AA', 'ZPP', 'cocap.QMIP_cme')
('p', 'AA', 'ZPP', 'cocap.QMIP_cme') => ('p', 'T', 'ZPP', 'cocap.QMIP_cme')
('p', 'AA', 'ZPP', 'cocap.QMIP_cme') => ('p', 'EA', 'ZPP', 'cocap.QMIP_cme')
('p', 'AA', 'ZPP', 'QMIP_cme') => ('p', 'T', 'ZPP', 'QMIP_cme')
('p', 'AA', 'ZPP', 'QMIP_cme') => ('p', 'EA', 'ZPP', 'QMIP_cme')
('p', 'AA', 'ZPP', 'co.QMIP_cme') => ('p', 'T', 'ZPP', 'co.QMIP_cme')
('p', 'AA', 'ZPP', 'co.QMIP_cme') => ('p', 'EA', 'ZPP', 'co.QMIP_cme')
('p', 'AA', 'cocap.NP', 'co.QMIP_cme') => ('p', 'T', 'cocap.NP', 'co.QMIP_cme')
('p', 'AA', 'cocap.NP', 'co.QMIP_cme') => ('p', 'EA', 'cocap.NP', 'co.QMIP_cme')
('p', 'AA', 'cocap.NP', 'QMIP_cme') => ('p', 'T', 'cocap.NP', 'QMIP_cme')
('p', 'AA', 'cocap.NP', 'QMIP_cme') => ('p', 'EA', 'cocap.NP', 'QMIP_cme')
('p', 'AA', 'cocap.NP', 'cocap.QMIP_cme') => ('p', 'T', 'cocap.NP', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.NP', 'cocap.QMIP_cme') => ('p', 'EA', 'cocap.NP', 'cocap.QMIP_cme')
('p', 'A', 'cocap.MA', 'cocap.QMIP_cme') => ('p', 'R', 'cocap.MA', 'cocap.QMIP_cme')
('p', 'A', 'cocap.MA', 'cocap.QMIP_cme') => ('p', 'AA', 'cocap.MA', 'cocap.QMIP_cme')
('p', 'A', 'cocap.MA', 'QMIP_cme') => ('p', 'R', 'cocap.MA', 'QMIP_cme')
('p', 'A', 'cocap.MA', 'QMIP_cme') => ('p', 'AA', 'cocap.MA', 'QMIP_cme')
('p', 'A', 'cocap.MA', 'co.QMIP_cme') => ('p', 'R', 'cocap.MA', 'co.QMIP_cme')
('p', 'A', 'cocap.MA', 'co.QMIP_cme') => ('p', 'AA', 'cocap.MA', 'co.QMIP_cme')
('p', 'AA', 'cocap.MA', 'co.QMIP_cme') => ('p', 'T', 'cocap.MA', 'co.QMIP_cme')
('p', 'AA', 'cocap.MA', 'co.QMIP_cme') => ('p', 'EA', 'cocap.MA', 'co.QMIP_cme')
('p', 'AA', 'cocap.MA', 'QMIP_cme') => ('p', 'T', 'cocap.MA', 'QMIP_cme')
('p', 'AA', 'cocap.MA', 'QMIP_cme') => ('p', 'EA', 'cocap.MA', 'QMIP_cme')
('p', 'AA', 'cocap.MA', 'cocap.QMIP_cme') => ('p', 'T', 'cocap.MA', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.MA', 'cocap.QMIP_cme') => ('p', 'EA', 'cocap.MA', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.SBP', 'cocap.QMIP_cme') => ('p', 'T', 'cocap.SBP', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.SBP', 'cocap.QMIP_cme') => ('p', 'EA', 'cocap.SBP', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.SBP', 'QMIP_cme') => ('p', 'T', 'cocap.SBP', 'QMIP_cme')
('p', 'AA', 'cocap.SBP', 'QMIP_cme') => ('p', 'EA', 'cocap.SBP', 'QMIP_cme')
('p', 'AA', 'cocap.SBP', 'co.QMIP_cme') => ('p', 'T', 'cocap.SBP', 'co.QMIP_cme')
('p', 'AA', 'cocap.SBP', 'co.QMIP_cme') => ('p', 'EA', 'cocap.SBP', 'co.QMIP_cme')
('-d', 'A', 'cocap.SBP', 'cocap.MIP*_cme') => ('-d', 'R', 'cocap.SBP', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.SBP', 'cocap.MIP*_cme') => ('-d', 'AA', 'cocap.SBP', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.NP', 'cocap.MIP*_cme') => ('-d', 'R', 'cocap.NP', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.NP', 'cocap.MIP*_cme') => ('-d', 'AA', 'cocap.NP', 'cocap.MIP*_cme')
('-d', 'A', 'ZPP', 'cocap.MIP*_cme') => ('-d', 'R', 'ZPP', 'cocap.MIP*_cme')
('-d', 'A', 'ZPP', 'cocap.MIP*_cme') => ('-d', 'AA', 'ZPP', 'cocap.MIP*_cme')
('-d', 'A', 'ZPP', 'MIP*_cme') => ('-d', 'R', 'ZPP', 'MIP*_cme')
('-d', 'A', 'ZPP', 'MIP*_cme') => ('-d', 'AA', 'ZPP', 'MIP*_cme')
('-d', 'A', 'ZPP', 'co.MIP*_cme') => ('-d', 'R', 'ZPP', 'co.MIP*_cme')
('-d', 'A', 'ZPP', 'co.MIP*_cme') => ('-d', 'AA', 'ZPP', 'co.MIP*_cme')
('-d', 'AA', 'ZPP', 'co.MIP*_cme') => ('-d', 'T', 'ZPP', 'co.MIP*_cme')
('-d', 'AA', 'ZPP', 'co.MIP*_cme') => ('-d', 'EA', 'ZPP', 'co.MIP*_cme')
('-d', 'AA', 'ZPP', 'MIP*_cme') => ('-d', 'T', 'ZPP', 'MIP*_cme')
('-d', 'AA', 'ZPP', 'MIP*_cme') => ('-d', 'EA', 'ZPP', 'MIP*_cme')
('-d', 'AA', 'ZPP', 'cocap.MIP*_cme') => ('-d', 'T', 'ZPP', 'cocap.MIP*_cme')
('-d', 'AA', 'ZPP', 'cocap.MIP*_cme') => ('-d', 'EA', 'ZPP', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.NP', 'MIP*_cme') => ('-d', 'R', 'cocap.NP', 'MIP*_cme')
('-d', 'A', 'cocap.NP', 'MIP*_cme') => ('-d', 'AA', 'cocap.NP', 'MIP*_cme')
('-d', 'A', 'cocap.NP', 'co.MIP*_cme') => ('-d', 'R', 'cocap.NP', 'co.MIP*_cme')
('-d', 'A', 'cocap.NP', 'co.MIP*_cme') => ('-d', 'AA', 'cocap.NP', 'co.MIP*_cme')
('-d', 'AA', 'cocap.NP', 'co.MIP*_cme') => ('-d', 'T', 'cocap.NP', 'co.MIP*_cme')
('-d', 'AA', 'cocap.NP', 'co.MIP*_cme') => ('-d', 'EA', 'cocap.NP', 'co.MIP*_cme')
('-d', 'AA', 'cocap.NP', 'MIP*_cme') => ('-d', 'T', 'cocap.NP', 'MIP*_cme')
('-d', 'AA', 'cocap.NP', 'MIP*_cme') => ('-d', 'EA', 'cocap.NP', 'MIP*_cme')
('-d', 'AA', 'cocap.NP', 'cocap.MIP*_cme') => ('-d', 'T', 'cocap.NP', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.NP', 'cocap.MIP*_cme') => ('-d', 'EA', 'cocap.NP', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.SBP', 'MIP*_cme') => ('-d', 'R', 'cocap.SBP', 'MIP*_cme')
('-d', 'A', 'cocap.SBP', 'MIP*_cme') => ('-d', 'AA', 'cocap.SBP', 'MIP*_cme')
('-d', 'A', 'cocap.SBP', 'co.MIP*_cme') => ('-d', 'R', 'cocap.SBP', 'co.MIP*_cme')
('-d', 'A', 'cocap.SBP', 'co.MIP*_cme') => ('-d', 'AA', 'cocap.SBP', 'co.MIP*_cme')
('-d', 'A', 'cocap.MA', 'co.MIP*_cme') => ('-d', 'R', 'cocap.MA', 'co.MIP*_cme')
('-d', 'A', 'cocap.MA', 'co.MIP*_cme') => ('-d', 'AA', 'cocap.MA', 'co.MIP*_cme')
('-d', 'A', 'cocap.MA', 'MIP*_cme') => ('-d', 'R', 'cocap.MA', 'MIP*_cme')
('-d', 'A', 'cocap.MA', 'MIP*_cme') => ('-d', 'AA', 'cocap.MA', 'MIP*_cme')
('-d', 'A', 'cocap.MA', 'cocap.MIP*_cme') => ('-d', 'R', 'cocap.MA', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.MA', 'cocap.MIP*_cme') => ('-d', 'AA', 'cocap.MA', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.MA', 'cocap.MIP*_cme') => ('-d', 'T', 'cocap.MA', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.MA', 'cocap.MIP*_cme') => ('-d', 'EA', 'cocap.MA', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.MA', 'MIP*_cme') => ('-d', 'T', 'cocap.MA', 'MIP*_cme')
('-d', 'AA', 'cocap.MA', 'MIP*_cme') => ('-d', 'EA', 'cocap.MA', 'MIP*_cme')
('-d', 'AA', 'cocap.MA', 'co.MIP*_cme') => ('-d', 'T', 'cocap.MA', 'co.MIP*_cme')
('-d', 'AA', 'cocap.MA', 'co.MIP*_cme') => ('-d', 'EA', 'cocap.MA', 'co.MIP*_cme')
('-d', 'AA', 'cocap.SBP', 'co.MIP*_cme') => ('-d', 'T', 'cocap.SBP', 'co.MIP*_cme')
('-d', 'AA', 'cocap.SBP', 'co.MIP*_cme') => ('-d', 'EA', 'cocap.SBP', 'co.MIP*_cme')
('-d', 'AA', 'cocap.SBP', 'MIP*_cme') => ('-d', 'T', 'cocap.SBP', 'MIP*_cme')
('-d', 'AA', 'cocap.SBP', 'MIP*_cme') => ('-d', 'EA', 'cocap.SBP', 'MIP*_cme')
('-d', 'AA', 'cocap.SBP', 'cocap.MIP*_cme') => ('-d', 'T', 'cocap.SBP', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.SBP', 'cocap.MIP*_cme') => ('-d', 'EA', 'cocap.SBP', 'cocap.MIP*_cme')
('p', 'A', 'cocap.SBP', 'cocap.MIP*_cme') => ('p', 'R', 'cocap.SBP', 'cocap.MIP*_cme')
('p', 'A', 'cocap.SBP', 'cocap.MIP*_cme') => ('p', 'AA', 'cocap.SBP', 'cocap.MIP*_cme')
('p', 'A', 'cocap.NP', 'cocap.MIP*_cme') => ('p', 'R', 'cocap.NP', 'cocap.MIP*_cme')
('p', 'A', 'cocap.NP', 'cocap.MIP*_cme') => ('p', 'AA', 'cocap.NP', 'cocap.MIP*_cme')
('p', 'A', 'ZPP', 'cocap.MIP*_cme') => ('p', 'R', 'ZPP', 'cocap.MIP*_cme')
('p', 'A', 'ZPP', 'cocap.MIP*_cme') => ('p', 'AA', 'ZPP', 'cocap.MIP*_cme')
('p', 'A', 'ZPP', 'MIP*_cme') => ('p', 'R', 'ZPP', 'MIP*_cme')
('p', 'A', 'ZPP', 'MIP*_cme') => ('p', 'AA', 'ZPP', 'MIP*_cme')
('p', 'A', 'ZPP', 'co.MIP*_cme') => ('p', 'R', 'ZPP', 'co.MIP*_cme')
('p', 'A', 'ZPP', 'co.MIP*_cme') => ('p', 'AA', 'ZPP', 'co.MIP*_cme')
('p', 'AA', 'ZPP', 'co.MIP*_cme') => ('p', 'T', 'ZPP', 'co.MIP*_cme')
('p', 'AA', 'ZPP', 'co.MIP*_cme') => ('p', 'EA', 'ZPP', 'co.MIP*_cme')
('p', 'AA', 'ZPP', 'MIP*_cme') => ('p', 'T', 'ZPP', 'MIP*_cme')
('p', 'AA', 'ZPP', 'MIP*_cme') => ('p', 'EA', 'ZPP', 'MIP*_cme')
('p', 'AA', 'ZPP', 'cocap.MIP*_cme') => ('p', 'T', 'ZPP', 'cocap.MIP*_cme')
('p', 'AA', 'ZPP', 'cocap.MIP*_cme') => ('p', 'EA', 'ZPP', 'cocap.MIP*_cme')
('p', 'A', 'cocap.NP', 'MIP*_cme') => ('p', 'R', 'cocap.NP', 'MIP*_cme')
('p', 'A', 'cocap.NP', 'MIP*_cme') => ('p', 'AA', 'cocap.NP', 'MIP*_cme')
('p', 'A', 'cocap.NP', 'co.MIP*_cme') => ('p', 'R', 'cocap.NP', 'co.MIP*_cme')
('p', 'A', 'cocap.NP', 'co.MIP*_cme') => ('p', 'AA', 'cocap.NP', 'co.MIP*_cme')
('p', 'AA', 'cocap.NP', 'co.MIP*_cme') => ('p', 'T', 'cocap.NP', 'co.MIP*_cme')
('p', 'AA', 'cocap.NP', 'co.MIP*_cme') => ('p', 'EA', 'cocap.NP', 'co.MIP*_cme')
('p', 'AA', 'cocap.NP', 'MIP*_cme') => ('p', 'T', 'cocap.NP', 'MIP*_cme')
('p', 'AA', 'cocap.NP', 'MIP*_cme') => ('p', 'EA', 'cocap.NP', 'MIP*_cme')
('p', 'AA', 'cocap.NP', 'cocap.MIP*_cme') => ('p', 'T', 'cocap.NP', 'cocap.MIP*_cme')
('p', 'AA', 'cocap.NP', 'cocap.MIP*_cme') => ('p', 'EA', 'cocap.NP', 'cocap.MIP*_cme')
('p', 'A', 'cocap.SBP', 'MIP*_cme') => ('p', 'R', 'cocap.SBP', 'MIP*_cme')
('p', 'A', 'cocap.SBP', 'MIP*_cme') => ('p', 'AA', 'cocap.SBP', 'MIP*_cme')
('p', 'A', 'cocap.SBP', 'co.MIP*_cme') => ('p', 'R', 'cocap.SBP', 'co.MIP*_cme')
('p', 'A', 'cocap.SBP', 'co.MIP*_cme') => ('p', 'AA', 'cocap.SBP', 'co.MIP*_cme')
('p', 'A', 'cocap.MA', 'co.MIP*_cme') => ('p', 'R', 'cocap.MA', 'co.MIP*_cme')
('p', 'A', 'cocap.MA', 'co.MIP*_cme') => ('p', 'AA', 'cocap.MA', 'co.MIP*_cme')
('p', 'A', 'cocap.MA', 'MIP*_cme') => ('p', 'R', 'cocap.MA', 'MIP*_cme')
('p', 'A', 'cocap.MA', 'MIP*_cme') => ('p', 'AA', 'cocap.MA', 'MIP*_cme')
('p', 'A', 'cocap.MA', 'cocap.MIP*_cme') => ('p', 'R', 'cocap.MA', 'cocap.MIP*_cme')
('p', 'A', 'cocap.MA', 'cocap.MIP*_cme') => ('p', 'AA', 'cocap.MA', 'cocap.MIP*_cme')
('p', 'AA', 'cocap.MA', 'cocap.MIP*_cme') => ('p', 'T', 'cocap.MA', 'cocap.MIP*_cme')
('p', 'AA', 'cocap.MA', 'cocap.MIP*_cme') => ('p', 'EA', 'cocap.MA', 'cocap.MIP*_cme')
('p', 'AA', 'cocap.MA', 'MIP*_cme') => ('p', 'T', 'cocap.MA', 'MIP*_cme')
('p', 'AA', 'cocap.MA', 'MIP*_cme') => ('p', 'EA', 'cocap.MA', 'MIP*_cme')
('p', 'AA', 'cocap.MA', 'co.MIP*_cme') => ('p', 'T', 'cocap.MA', 'co.MIP*_cme')
('p', 'AA', 'cocap.MA', 'co.MIP*_cme') => ('p', 'EA', 'cocap.MA', 'co.MIP*_cme')
('p', 'AA', 'cocap.SBP', 'co.MIP*_cme') => ('p', 'T', 'cocap.SBP', 'co.MIP*_cme')
('p', 'AA', 'cocap.SBP', 'co.MIP*_cme') => ('p', 'EA', 'cocap.SBP', 'co.MIP*_cme')
('p', 'AA', 'cocap.SBP', 'MIP*_cme') => ('p', 'T', 'cocap.SBP', 'MIP*_cme')
('p', 'AA', 'cocap.SBP', 'MIP*_cme') => ('p', 'EA', 'cocap.SBP', 'MIP*_cme')
('p', 'AA', 'cocap.SBP', 'cocap.MIP*_cme') => ('p', 'T', 'cocap.SBP', 'cocap.MIP*_cme')
('p', 'AA', 'cocap.SBP', 'cocap.MIP*_cme') => ('p', 'EA', 'cocap.SBP', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.SBP', 'QIP') => ('-d', 'R', 'cocap.SBP', 'QIP')
('-d', 'A', 'cocap.SBP', 'QIP') => ('-d', 'AA', 'cocap.SBP', 'QIP')
('-d', 'A', 'cocap.SBP', 'co.QIP') => ('-d', 'R', 'cocap.SBP', 'co.QIP')
('-d', 'A', 'cocap.SBP', 'co.QIP') => ('-d', 'AA', 'cocap.SBP', 'co.QIP')
('-d', 'A', 'cocap.SBP', 'cocap.QIP') => ('-d', 'R', 'cocap.SBP', 'cocap.QIP')
('-d', 'A', 'cocap.SBP', 'cocap.QIP') => ('-d', 'AA', 'cocap.SBP', 'cocap.QIP')
('-d', 'A', 'cocap.SBP', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.SBP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.SBP', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NP', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.NP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NP', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.NP', 'cocap.QMIP_ne')
('-d', 'A', 'ZPP', 'cocap.QMIP_ne') => ('-d', 'R', 'ZPP', 'cocap.QMIP_ne')
('-d', 'A', 'ZPP', 'cocap.QMIP_ne') => ('-d', 'AA', 'ZPP', 'cocap.QMIP_ne')
('-d', 'A', 'ZPP', 'QMIP_ne') => ('-d', 'R', 'ZPP', 'QMIP_ne')
('-d', 'A', 'ZPP', 'QMIP_ne') => ('-d', 'AA', 'ZPP', 'QMIP_ne')
('-d', 'A', 'ZPP', 'co.QMIP_ne') => ('-d', 'R', 'ZPP', 'co.QMIP_ne')
('-d', 'A', 'ZPP', 'co.QMIP_ne') => ('-d', 'AA', 'ZPP', 'co.QMIP_ne')
('-d', 'AA', 'ZPP', 'co.QMIP_ne') => ('-d', 'T', 'ZPP', 'co.QMIP_ne')
('-d', 'AA', 'ZPP', 'co.QMIP_ne') => ('-d', 'EA', 'ZPP', 'co.QMIP_ne')
('-d', 'AA', 'ZPP', 'QMIP_ne') => ('-d', 'T', 'ZPP', 'QMIP_ne')
('-d', 'AA', 'ZPP', 'QMIP_ne') => ('-d', 'EA', 'ZPP', 'QMIP_ne')
('-d', 'AA', 'ZPP', 'cocap.QMIP_ne') => ('-d', 'T', 'ZPP', 'cocap.QMIP_ne')
('-d', 'AA', 'ZPP', 'cocap.QMIP_ne') => ('-d', 'EA', 'ZPP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NP', 'QMIP_ne') => ('-d', 'R', 'cocap.NP', 'QMIP_ne')
('-d', 'A', 'cocap.NP', 'QMIP_ne') => ('-d', 'AA', 'cocap.NP', 'QMIP_ne')
('-d', 'A', 'cocap.NP', 'co.QMIP_ne') => ('-d', 'R', 'cocap.NP', 'co.QMIP_ne')
('-d', 'A', 'cocap.NP', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.NP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.NP', 'co.QMIP_ne') => ('-d', 'T', 'cocap.NP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.NP', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.NP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.NP', 'QMIP_ne') => ('-d', 'T', 'cocap.NP', 'QMIP_ne')
('-d', 'AA', 'cocap.NP', 'QMIP_ne') => ('-d', 'EA', 'cocap.NP', 'QMIP_ne')
('-d', 'AA', 'cocap.NP', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.NP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.NP', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.NP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.SBP', 'QMIP_ne') => ('-d', 'R', 'cocap.SBP', 'QMIP_ne')
('-d', 'A', 'cocap.SBP', 'QMIP_ne') => ('-d', 'AA', 'cocap.SBP', 'QMIP_ne')
('-d', 'A', 'cocap.SBP', 'co.QMIP_ne') => ('-d', 'R', 'cocap.SBP', 'co.QMIP_ne')
('-d', 'A', 'cocap.SBP', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.SBP', 'co.QMIP_ne')
('-d', 'A', 'cocap.MA', 'co.QMIP_ne') => ('-d', 'R', 'cocap.MA', 'co.QMIP_ne')
('-d', 'A', 'cocap.MA', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.MA', 'co.QMIP_ne')
('-d', 'A', 'cocap.MA', 'QMIP_ne') => ('-d', 'R', 'cocap.MA', 'QMIP_ne')
('-d', 'A', 'cocap.MA', 'QMIP_ne') => ('-d', 'AA', 'cocap.MA', 'QMIP_ne')
('-d', 'A', 'cocap.MA', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.MA', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.MA', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.MA', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.MA', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.MA', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.MA', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.MA', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.MA', 'QMIP_ne') => ('-d', 'T', 'cocap.MA', 'QMIP_ne')
('-d', 'AA', 'cocap.MA', 'QMIP_ne') => ('-d', 'EA', 'cocap.MA', 'QMIP_ne')
('-d', 'AA', 'cocap.MA', 'co.QMIP_ne') => ('-d', 'T', 'cocap.MA', 'co.QMIP_ne')
('-d', 'AA', 'cocap.MA', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.MA', 'co.QMIP_ne')
('-d', 'AA', 'cocap.SBP', 'co.QMIP_ne') => ('-d', 'T', 'cocap.SBP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.SBP', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.SBP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.SBP', 'QMIP_ne') => ('-d', 'T', 'cocap.SBP', 'QMIP_ne')
('-d', 'AA', 'cocap.SBP', 'QMIP_ne') => ('-d', 'EA', 'cocap.SBP', 'QMIP_ne')
('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.SBP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.SBP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NP', 'cocap.QIP') => ('-d', 'R', 'cocap.NP', 'cocap.QIP')
('-d', 'A', 'cocap.NP', 'cocap.QIP') => ('-d', 'AA', 'cocap.NP', 'cocap.QIP')
('-d', 'A', 'cocap.NP', 'QIP') => ('-d', 'R', 'cocap.NP', 'QIP')
('-d', 'A', 'cocap.NP', 'QIP') => ('-d', 'AA', 'cocap.NP', 'QIP')
('-d', 'A', 'cocap.NP', 'co.QIP') => ('-d', 'R', 'cocap.NP', 'co.QIP')
('-d', 'A', 'cocap.NP', 'co.QIP') => ('-d', 'AA', 'cocap.NP', 'co.QIP')
('-d', 'A', 'ZPP', 'co.QIP') => ('-d', 'R', 'ZPP', 'co.QIP')
('-d', 'A', 'ZPP', 'co.QIP') => ('-d', 'AA', 'ZPP', 'co.QIP')
('-d', 'A', 'ZPP', 'QIP') => ('-d', 'R', 'ZPP', 'QIP')
('-d', 'A', 'ZPP', 'QIP') => ('-d', 'AA', 'ZPP', 'QIP')
('-d', 'A', 'ZPP', 'cocap.QIP') => ('-d', 'R', 'ZPP', 'cocap.QIP')
('-d', 'A', 'ZPP', 'cocap.QIP') => ('-d', 'AA', 'ZPP', 'cocap.QIP')
('-d', 'AA', 'ZPP', 'cocap.QIP') => ('-d', 'T', 'ZPP', 'cocap.QIP')
('-d', 'AA', 'ZPP', 'cocap.QIP') => ('-d', 'EA', 'ZPP', 'cocap.QIP')
('-d', 'AA', 'ZPP', 'QIP') => ('-d', 'T', 'ZPP', 'QIP')
('-d', 'AA', 'ZPP', 'QIP') => ('-d', 'EA', 'ZPP', 'QIP')
('-d', 'AA', 'ZPP', 'co.QIP') => ('-d', 'T', 'ZPP', 'co.QIP')
('-d', 'AA', 'ZPP', 'co.QIP') => ('-d', 'EA', 'ZPP', 'co.QIP')
('-d', 'AA', 'cocap.NP', 'co.QIP') => ('-d', 'T', 'cocap.NP', 'co.QIP')
('-d', 'AA', 'cocap.NP', 'co.QIP') => ('-d', 'EA', 'cocap.NP', 'co.QIP')
('-d', 'AA', 'cocap.NP', 'QIP') => ('-d', 'T', 'cocap.NP', 'QIP')
('-d', 'AA', 'cocap.NP', 'QIP') => ('-d', 'EA', 'cocap.NP', 'QIP')
('-d', 'AA', 'cocap.NP', 'cocap.QIP') => ('-d', 'T', 'cocap.NP', 'cocap.QIP')
('-d', 'AA', 'cocap.NP', 'cocap.QIP') => ('-d', 'EA', 'cocap.NP', 'cocap.QIP')
('-d', 'A', 'cocap.MA', 'cocap.QIP') => ('-d', 'R', 'cocap.MA', 'cocap.QIP')
('-d', 'A', 'cocap.MA', 'cocap.QIP') => ('-d', 'AA', 'cocap.MA', 'cocap.QIP')
('-d', 'A', 'cocap.MA', 'QIP') => ('-d', 'R', 'cocap.MA', 'QIP')
('-d', 'A', 'cocap.MA', 'QIP') => ('-d', 'AA', 'cocap.MA', 'QIP')
('-d', 'A', 'cocap.MA', 'co.QIP') => ('-d', 'R', 'cocap.MA', 'co.QIP')
('-d', 'A', 'cocap.MA', 'co.QIP') => ('-d', 'AA', 'cocap.MA', 'co.QIP')
('-d', 'AA', 'cocap.MA', 'co.QIP') => ('-d', 'T', 'cocap.MA', 'co.QIP')
('-d', 'AA', 'cocap.MA', 'co.QIP') => ('-d', 'EA', 'cocap.MA', 'co.QIP')
('-d', 'AA', 'cocap.MA', 'QIP') => ('-d', 'T', 'cocap.MA', 'QIP')
('-d', 'AA', 'cocap.MA', 'QIP') => ('-d', 'EA', 'cocap.MA', 'QIP')
('-d', 'AA', 'cocap.MA', 'cocap.QIP') => ('-d', 'T', 'cocap.MA', 'cocap.QIP')
('-d', 'AA', 'cocap.MA', 'cocap.QIP') => ('-d', 'EA', 'cocap.MA', 'cocap.QIP')
('-d', 'AA', 'cocap.SBP', 'cocap.QIP') => ('-d', 'T', 'cocap.SBP', 'cocap.QIP')
('-d', 'AA', 'cocap.SBP', 'cocap.QIP') => ('-d', 'EA', 'cocap.SBP', 'cocap.QIP')
('-d', 'AA', 'cocap.SBP', 'QIP') => ('-d', 'T', 'cocap.SBP', 'QIP')
('-d', 'AA', 'cocap.SBP', 'QIP') => ('-d', 'EA', 'cocap.SBP', 'QIP')
('-d', 'AA', 'cocap.SBP', 'co.QIP') => ('-d', 'T', 'cocap.SBP', 'co.QIP')
('-d', 'AA', 'cocap.SBP', 'co.QIP') => ('-d', 'EA', 'cocap.SBP', 'co.QIP')
('p', 'A', 'cocap.SBP', 'QIP') => ('p', 'R', 'cocap.SBP', 'QIP')
('p', 'A', 'cocap.SBP', 'QIP') => ('p', 'AA', 'cocap.SBP', 'QIP')
('p', 'A', 'cocap.SBP', 'co.QIP') => ('p', 'R', 'cocap.SBP', 'co.QIP')
('p', 'A', 'cocap.SBP', 'co.QIP') => ('p', 'AA', 'cocap.SBP', 'co.QIP')
('p', 'A', 'cocap.SBP', 'cocap.QIP') => ('p', 'R', 'cocap.SBP', 'cocap.QIP')
('p', 'A', 'cocap.SBP', 'cocap.QIP') => ('p', 'AA', 'cocap.SBP', 'cocap.QIP')
('p', 'A', 'cocap.SBP', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.SBP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.SBP', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.SBP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NP', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.NP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NP', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.NP', 'cocap.QMIP_ne')
('p', 'A', 'ZPP', 'cocap.QMIP_ne') => ('p', 'R', 'ZPP', 'cocap.QMIP_ne')
('p', 'A', 'ZPP', 'cocap.QMIP_ne') => ('p', 'AA', 'ZPP', 'cocap.QMIP_ne')
('p', 'A', 'ZPP', 'QMIP_ne') => ('p', 'R', 'ZPP', 'QMIP_ne')
('p', 'A', 'ZPP', 'QMIP_ne') => ('p', 'AA', 'ZPP', 'QMIP_ne')
('p', 'A', 'ZPP', 'co.QMIP_ne') => ('p', 'R', 'ZPP', 'co.QMIP_ne')
('p', 'A', 'ZPP', 'co.QMIP_ne') => ('p', 'AA', 'ZPP', 'co.QMIP_ne')
('p', 'AA', 'ZPP', 'co.QMIP_ne') => ('p', 'T', 'ZPP', 'co.QMIP_ne')
('p', 'AA', 'ZPP', 'co.QMIP_ne') => ('p', 'EA', 'ZPP', 'co.QMIP_ne')
('p', 'AA', 'ZPP', 'QMIP_ne') => ('p', 'T', 'ZPP', 'QMIP_ne')
('p', 'AA', 'ZPP', 'QMIP_ne') => ('p', 'EA', 'ZPP', 'QMIP_ne')
('p', 'AA', 'ZPP', 'cocap.QMIP_ne') => ('p', 'T', 'ZPP', 'cocap.QMIP_ne')
('p', 'AA', 'ZPP', 'cocap.QMIP_ne') => ('p', 'EA', 'ZPP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NP', 'QMIP_ne') => ('p', 'R', 'cocap.NP', 'QMIP_ne')
('p', 'A', 'cocap.NP', 'QMIP_ne') => ('p', 'AA', 'cocap.NP', 'QMIP_ne')
('p', 'A', 'cocap.NP', 'co.QMIP_ne') => ('p', 'R', 'cocap.NP', 'co.QMIP_ne')
('p', 'A', 'cocap.NP', 'co.QMIP_ne') => ('p', 'AA', 'cocap.NP', 'co.QMIP_ne')
('p', 'AA', 'cocap.NP', 'co.QMIP_ne') => ('p', 'T', 'cocap.NP', 'co.QMIP_ne')
('p', 'AA', 'cocap.NP', 'co.QMIP_ne') => ('p', 'EA', 'cocap.NP', 'co.QMIP_ne')
('p', 'AA', 'cocap.NP', 'QMIP_ne') => ('p', 'T', 'cocap.NP', 'QMIP_ne')
('p', 'AA', 'cocap.NP', 'QMIP_ne') => ('p', 'EA', 'cocap.NP', 'QMIP_ne')
('p', 'AA', 'cocap.NP', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.NP', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.NP', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.NP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.SBP', 'QMIP_ne') => ('p', 'R', 'cocap.SBP', 'QMIP_ne')
('p', 'A', 'cocap.SBP', 'QMIP_ne') => ('p', 'AA', 'cocap.SBP', 'QMIP_ne')
('p', 'A', 'cocap.SBP', 'co.QMIP_ne') => ('p', 'R', 'cocap.SBP', 'co.QMIP_ne')
('p', 'A', 'cocap.SBP', 'co.QMIP_ne') => ('p', 'AA', 'cocap.SBP', 'co.QMIP_ne')
('p', 'A', 'cocap.MA', 'co.QMIP_ne') => ('p', 'R', 'cocap.MA', 'co.QMIP_ne')
('p', 'A', 'cocap.MA', 'co.QMIP_ne') => ('p', 'AA', 'cocap.MA', 'co.QMIP_ne')
('p', 'A', 'cocap.MA', 'QMIP_ne') => ('p', 'R', 'cocap.MA', 'QMIP_ne')
('p', 'A', 'cocap.MA', 'QMIP_ne') => ('p', 'AA', 'cocap.MA', 'QMIP_ne')
('p', 'A', 'cocap.MA', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.MA', 'cocap.QMIP_ne')
('p', 'A', 'cocap.MA', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.MA', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.MA', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.MA', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.MA', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.MA', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.MA', 'QMIP_ne') => ('p', 'T', 'cocap.MA', 'QMIP_ne')
('p', 'AA', 'cocap.MA', 'QMIP_ne') => ('p', 'EA', 'cocap.MA', 'QMIP_ne')
('p', 'AA', 'cocap.MA', 'co.QMIP_ne') => ('p', 'T', 'cocap.MA', 'co.QMIP_ne')
('p', 'AA', 'cocap.MA', 'co.QMIP_ne') => ('p', 'EA', 'cocap.MA', 'co.QMIP_ne')
('p', 'AA', 'cocap.SBP', 'co.QMIP_ne') => ('p', 'T', 'cocap.SBP', 'co.QMIP_ne')
('p', 'AA', 'cocap.SBP', 'co.QMIP_ne') => ('p', 'EA', 'cocap.SBP', 'co.QMIP_ne')
('p', 'AA', 'cocap.SBP', 'QMIP_ne') => ('p', 'T', 'cocap.SBP', 'QMIP_ne')
('p', 'AA', 'cocap.SBP', 'QMIP_ne') => ('p', 'EA', 'cocap.SBP', 'QMIP_ne')
('p', 'AA', 'cocap.SBP', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.SBP', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.SBP', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.SBP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NP', 'cocap.QIP') => ('p', 'R', 'cocap.NP', 'cocap.QIP')
('p', 'A', 'cocap.NP', 'cocap.QIP') => ('p', 'AA', 'cocap.NP', 'cocap.QIP')
('p', 'A', 'cocap.NP', 'QIP') => ('p', 'R', 'cocap.NP', 'QIP')
('p', 'A', 'cocap.NP', 'QIP') => ('p', 'AA', 'cocap.NP', 'QIP')
('p', 'A', 'cocap.NP', 'co.QIP') => ('p', 'R', 'cocap.NP', 'co.QIP')
('p', 'A', 'cocap.NP', 'co.QIP') => ('p', 'AA', 'cocap.NP', 'co.QIP')
('p', 'A', 'ZPP', 'co.QIP') => ('p', 'R', 'ZPP', 'co.QIP')
('p', 'A', 'ZPP', 'co.QIP') => ('p', 'AA', 'ZPP', 'co.QIP')
('p', 'A', 'ZPP', 'QIP') => ('p', 'R', 'ZPP', 'QIP')
('p', 'A', 'ZPP', 'QIP') => ('p', 'AA', 'ZPP', 'QIP')
('p', 'A', 'ZPP', 'cocap.QIP') => ('p', 'R', 'ZPP', 'cocap.QIP')
('p', 'A', 'ZPP', 'cocap.QIP') => ('p', 'AA', 'ZPP', 'cocap.QIP')
('p', 'AA', 'ZPP', 'cocap.QIP') => ('p', 'T', 'ZPP', 'cocap.QIP')
('p', 'AA', 'ZPP', 'cocap.QIP') => ('p', 'EA', 'ZPP', 'cocap.QIP')
('p', 'AA', 'ZPP', 'QIP') => ('p', 'T', 'ZPP', 'QIP')
('p', 'AA', 'ZPP', 'QIP') => ('p', 'EA', 'ZPP', 'QIP')
('p', 'AA', 'ZPP', 'co.QIP') => ('p', 'T', 'ZPP', 'co.QIP')
('p', 'AA', 'ZPP', 'co.QIP') => ('p', 'EA', 'ZPP', 'co.QIP')
('p', 'AA', 'cocap.NP', 'co.QIP') => ('p', 'T', 'cocap.NP', 'co.QIP')
('p', 'AA', 'cocap.NP', 'co.QIP') => ('p', 'EA', 'cocap.NP', 'co.QIP')
('p', 'AA', 'cocap.NP', 'QIP') => ('p', 'T', 'cocap.NP', 'QIP')
('p', 'AA', 'cocap.NP', 'QIP') => ('p', 'EA', 'cocap.NP', 'QIP')
('p', 'AA', 'cocap.NP', 'cocap.QIP') => ('p', 'T', 'cocap.NP', 'cocap.QIP')
('p', 'AA', 'cocap.NP', 'cocap.QIP') => ('p', 'EA', 'cocap.NP', 'cocap.QIP')
('p', 'A', 'cocap.MA', 'cocap.QIP') => ('p', 'R', 'cocap.MA', 'cocap.QIP')
('p', 'A', 'cocap.MA', 'cocap.QIP') => ('p', 'AA', 'cocap.MA', 'cocap.QIP')
('p', 'A', 'cocap.MA', 'QIP') => ('p', 'R', 'cocap.MA', 'QIP')
('p', 'A', 'cocap.MA', 'QIP') => ('p', 'AA', 'cocap.MA', 'QIP')
('p', 'A', 'cocap.MA', 'co.QIP') => ('p', 'R', 'cocap.MA', 'co.QIP')
('p', 'A', 'cocap.MA', 'co.QIP') => ('p', 'AA', 'cocap.MA', 'co.QIP')
('p', 'AA', 'cocap.MA', 'co.QIP') => ('p', 'T', 'cocap.MA', 'co.QIP')
('p', 'AA', 'cocap.MA', 'co.QIP') => ('p', 'EA', 'cocap.MA', 'co.QIP')
('p', 'AA', 'cocap.MA', 'QIP') => ('p', 'T', 'cocap.MA', 'QIP')
('p', 'AA', 'cocap.MA', 'QIP') => ('p', 'EA', 'cocap.MA', 'QIP')
('p', 'AA', 'cocap.MA', 'cocap.QIP') => ('p', 'T', 'cocap.MA', 'cocap.QIP')
('p', 'AA', 'cocap.MA', 'cocap.QIP') => ('p', 'EA', 'cocap.MA', 'cocap.QIP')
('p', 'AA', 'cocap.SBP', 'cocap.QIP') => ('p', 'T', 'cocap.SBP', 'cocap.QIP')
('p', 'AA', 'cocap.SBP', 'cocap.QIP') => ('p', 'EA', 'cocap.SBP', 'cocap.QIP')
('p', 'AA', 'cocap.SBP', 'QIP') => ('p', 'T', 'cocap.SBP', 'QIP')
('p', 'AA', 'cocap.SBP', 'QIP') => ('p', 'EA', 'cocap.SBP', 'QIP')
('p', 'AA', 'cocap.SBP', 'co.QIP') => ('p', 'T', 'cocap.SBP', 'co.QIP')
('p', 'AA', 'cocap.SBP', 'co.QIP') => ('p', 'EA', 'cocap.SBP', 'co.QIP')
('d', 'A', 'PSPACE/poly', 'cocap.SBP') => ('-p', 'A', 'PSPACE/poly', 'cocap.SBP')
('d', 'A', 'PSPACE/poly', 'SBP') => ('-p', 'A', 'PSPACE/poly', 'SBP')
('d', 'A', 'PSPACE/poly', 'co.SBP') => ('-p', 'A', 'PSPACE/poly', 'co.SBP')
('-d', 'A', 'cocap.SBP', 'PSPACE/poly') => ('-d', 'R', 'cocap.SBP', 'PSPACE/poly')
('-d', 'A', 'cocap.SBP', 'PSPACE/poly') => ('-d', 'AA', 'cocap.SBP', 'PSPACE/poly')
('-d', 'A', 'cocap.MA', 'PSPACE/poly') => ('-d', 'R', 'cocap.MA', 'PSPACE/poly')
('-d', 'A', 'cocap.MA', 'PSPACE/poly') => ('-d', 'AA', 'cocap.MA', 'PSPACE/poly')
('-d', 'AA', 'cocap.MA', 'PSPACE/poly') => ('-d', 'T', 'cocap.MA', 'PSPACE/poly')
('-d', 'AA', 'cocap.MA', 'PSPACE/poly') => ('-d', 'EA', 'cocap.MA', 'PSPACE/poly')
('-d', 'AA', 'cocap.SBP', 'PSPACE/poly') => ('-d', 'T', 'cocap.SBP', 'PSPACE/poly')
('-d', 'AA', 'cocap.SBP', 'PSPACE/poly') => ('-d', 'EA', 'cocap.SBP', 'PSPACE/poly')
('p', 'A', 'cocap.SBP', 'PSPACE/poly') => ('p', 'R', 'cocap.SBP', 'PSPACE/poly')
('p', 'A', 'cocap.SBP', 'PSPACE/poly') => ('p', 'AA', 'cocap.SBP', 'PSPACE/poly')
('p', 'A', 'cocap.MA', 'PSPACE/poly') => ('p', 'R', 'cocap.MA', 'PSPACE/poly')
('p', 'A', 'cocap.MA', 'PSPACE/poly') => ('p', 'AA', 'cocap.MA', 'PSPACE/poly')
('p', 'AA', 'cocap.MA', 'PSPACE/poly') => ('p', 'T', 'cocap.MA', 'PSPACE/poly')
('p', 'AA', 'cocap.MA', 'PSPACE/poly') => ('p', 'EA', 'cocap.MA', 'PSPACE/poly')
('p', 'AA', 'cocap.SBP', 'PSPACE/poly') => ('p', 'T', 'cocap.SBP', 'PSPACE/poly')
('p', 'AA', 'cocap.SBP', 'PSPACE/poly') => ('p', 'EA', 'cocap.SBP', 'PSPACE/poly')
('p', 'A', 'cocap.NP', 'cocap.AM') => ('-d', 'A', 'cocap.NP', 'cocap.AM')
('p', 'A', 'cocap.NP', 'cocap.AM') => ('p', 'R', 'cocap.NP', 'cocap.AM')
('p', 'A', 'cocap.NP', 'cocap.AM') => ('p', 'AA', 'cocap.NP', 'cocap.AM')
('-d', 'A', 'cocap.NP', 'cocap.MIP') => ('-d', 'R', 'cocap.NP', 'cocap.MIP')
('-d', 'A', 'cocap.NP', 'cocap.MIP') => ('-d', 'AA', 'cocap.NP', 'cocap.MIP')
('-d', 'A', 'ZPP', 'cocap.MIP') => ('-d', 'R', 'ZPP', 'cocap.MIP')
('-d', 'A', 'ZPP', 'cocap.MIP') => ('-d', 'AA', 'ZPP', 'cocap.MIP')
('-d', 'A', 'ZPP', 'MIP') => ('-d', 'R', 'ZPP', 'MIP')
('-d', 'A', 'ZPP', 'MIP') => ('-d', 'AA', 'ZPP', 'MIP')
('-d', 'A', 'ZPP', 'co.MIP') => ('-d', 'R', 'ZPP', 'co.MIP')
('-d', 'A', 'ZPP', 'co.MIP') => ('-d', 'AA', 'ZPP', 'co.MIP')
('-d', 'AA', 'ZPP', 'co.MIP') => ('-d', 'T', 'ZPP', 'co.MIP')
('-d', 'AA', 'ZPP', 'co.MIP') => ('-d', 'EA', 'ZPP', 'co.MIP')
('-d', 'AA', 'ZPP', 'MIP') => ('-d', 'T', 'ZPP', 'MIP')
('-d', 'AA', 'ZPP', 'MIP') => ('-d', 'EA', 'ZPP', 'MIP')
('-d', 'AA', 'ZPP', 'cocap.MIP') => ('-d', 'T', 'ZPP', 'cocap.MIP')
('-d', 'AA', 'ZPP', 'cocap.MIP') => ('-d', 'EA', 'ZPP', 'cocap.MIP')
('-d', 'A', 'cocap.NP', 'MIP') => ('-d', 'R', 'cocap.NP', 'MIP')
('-d', 'A', 'cocap.NP', 'MIP') => ('-d', 'AA', 'cocap.NP', 'MIP')
('-d', 'A', 'cocap.NP', 'co.MIP') => ('-d', 'R', 'cocap.NP', 'co.MIP')
('-d', 'A', 'cocap.NP', 'co.MIP') => ('-d', 'AA', 'cocap.NP', 'co.MIP')
('-d', 'AA', 'cocap.NP', 'co.MIP') => ('-d', 'T', 'cocap.NP', 'co.MIP')
('-d', 'AA', 'cocap.NP', 'co.MIP') => ('-d', 'EA', 'cocap.NP', 'co.MIP')
('-d', 'AA', 'cocap.NP', 'MIP') => ('-d', 'T', 'cocap.NP', 'MIP')
('-d', 'AA', 'cocap.NP', 'MIP') => ('-d', 'EA', 'cocap.NP', 'MIP')
('-d', 'AA', 'cocap.NP', 'cocap.MIP') => ('-d', 'T', 'cocap.NP', 'cocap.MIP')
('-d', 'AA', 'cocap.NP', 'cocap.MIP') => ('-d', 'EA', 'cocap.NP', 'cocap.MIP')
('p', 'A', 'cocap.NP', 'cocap.MIP') => ('p', 'R', 'cocap.NP', 'cocap.MIP')
('p', 'A', 'cocap.NP', 'cocap.MIP') => ('p', 'AA', 'cocap.NP', 'cocap.MIP')
('p', 'A', 'ZPP', 'cocap.MIP') => ('p', 'R', 'ZPP', 'cocap.MIP')
('p', 'A', 'ZPP', 'cocap.MIP') => ('p', 'AA', 'ZPP', 'cocap.MIP')
('p', 'A', 'ZPP', 'MIP') => ('p', 'R', 'ZPP', 'MIP')
('p', 'A', 'ZPP', 'MIP') => ('p', 'AA', 'ZPP', 'MIP')
('p', 'A', 'ZPP', 'co.MIP') => ('p', 'R', 'ZPP', 'co.MIP')
('p', 'A', 'ZPP', 'co.MIP') => ('p', 'AA', 'ZPP', 'co.MIP')
('p', 'AA', 'ZPP', 'co.MIP') => ('p', 'T', 'ZPP', 'co.MIP')
('p', 'AA', 'ZPP', 'co.MIP') => ('p', 'EA', 'ZPP', 'co.MIP')
('p', 'AA', 'ZPP', 'MIP') => ('p', 'T', 'ZPP', 'MIP')
('p', 'AA', 'ZPP', 'MIP') => ('p', 'EA', 'ZPP', 'MIP')
('p', 'AA', 'ZPP', 'cocap.MIP') => ('p', 'T', 'ZPP', 'cocap.MIP')
('p', 'AA', 'ZPP', 'cocap.MIP') => ('p', 'EA', 'ZPP', 'cocap.MIP')
('p', 'A', 'cocap.NP', 'MIP') => ('p', 'R', 'cocap.NP', 'MIP')
('p', 'A', 'cocap.NP', 'MIP') => ('p', 'AA', 'cocap.NP', 'MIP')
('p', 'A', 'cocap.NP', 'co.MIP') => ('p', 'R', 'cocap.NP', 'co.MIP')
('p', 'A', 'cocap.NP', 'co.MIP') => ('p', 'AA', 'cocap.NP', 'co.MIP')
('p', 'AA', 'cocap.NP', 'co.MIP') => ('p', 'T', 'cocap.NP', 'co.MIP')
('p', 'AA', 'cocap.NP', 'co.MIP') => ('p', 'EA', 'cocap.NP', 'co.MIP')
('p', 'AA', 'cocap.NP', 'MIP') => ('p', 'T', 'cocap.NP', 'MIP')
('p', 'AA', 'cocap.NP', 'MIP') => ('p', 'EA', 'cocap.NP', 'MIP')
('p', 'AA', 'cocap.NP', 'cocap.MIP') => ('p', 'T', 'cocap.NP', 'cocap.MIP')
('p', 'AA', 'cocap.NP', 'cocap.MIP') => ('p', 'EA', 'cocap.NP', 'cocap.MIP')
('p', 'A', 'ZPP', 'cocap.AM') => ('-d', 'A', 'ZPP', 'cocap.AM')
('p', 'A', 'ZPP', 'cocap.AM') => ('p', 'R', 'ZPP', 'cocap.AM')
('p', 'A', 'ZPP', 'cocap.AM') => ('p', 'AA', 'ZPP', 'cocap.AM')
('-d', 'A', 'ZPP', 'PSPACE') => ('-d', 'R', 'ZPP', 'PSPACE')
('-d', 'A', 'ZPP', 'PSPACE') => ('-d', 'AA', 'ZPP', 'PSPACE')
('-d', 'AA', 'ZPP', 'PSPACE') => ('-d', 'T', 'ZPP', 'PSPACE')
('-d', 'AA', 'ZPP', 'PSPACE') => ('-d', 'EA', 'ZPP', 'PSPACE')
('p', 'A', 'ZPP', 'PSPACE') => ('p', 'R', 'ZPP', 'PSPACE')
('p', 'A', 'ZPP', 'PSPACE') => ('p', 'AA', 'ZPP', 'PSPACE')
('p', 'AA', 'ZPP', 'PSPACE') => ('p', 'T', 'ZPP', 'PSPACE')
('p', 'AA', 'ZPP', 'PSPACE') => ('p', 'EA', 'ZPP', 'PSPACE')
('-d', 'A', 'ZPP', 'AM') => ('-d', 'R', 'ZPP', 'AM')
('-d', 'A', 'ZPP', 'AM') => ('-d', 'AA', 'ZPP', 'AM')
('-d', 'A', 'ZPP', 'co.AM') => ('-d', 'R', 'ZPP', 'co.AM')
('-d', 'A', 'ZPP', 'co.AM') => ('-d', 'AA', 'ZPP', 'co.AM')
('-d', 'A', 'ZPP', 'cocap.AM') => ('-d', 'R', 'ZPP', 'cocap.AM')
('-d', 'A', 'ZPP', 'cocap.AM') => ('-d', 'AA', 'ZPP', 'cocap.AM')
('-d', 'A', 'ZPP', 'IP') => ('-d', 'R', 'ZPP', 'IP')
('-d', 'A', 'ZPP', 'IP') => ('-d', 'AA', 'ZPP', 'IP')
('-d', 'A', 'ZPP', 'co.IP') => ('-d', 'R', 'ZPP', 'co.IP')
('-d', 'A', 'ZPP', 'co.IP') => ('-d', 'AA', 'ZPP', 'co.IP')
('-d', 'A', 'ZPP', 'cocap.IP') => ('-d', 'R', 'ZPP', 'cocap.IP')
('-d', 'A', 'ZPP', 'cocap.IP') => ('-d', 'AA', 'ZPP', 'cocap.IP')
('-d', 'AA', 'ZPP', 'cocap.IP') => ('-d', 'T', 'ZPP', 'cocap.IP')
('-d', 'AA', 'ZPP', 'cocap.IP') => ('-d', 'EA', 'ZPP', 'cocap.IP')
('-d', 'AA', 'ZPP', 'IP') => ('-d', 'T', 'ZPP', 'IP')
('-d', 'AA', 'ZPP', 'IP') => ('-d', 'EA', 'ZPP', 'IP')
('-d', 'AA', 'ZPP', 'co.IP') => ('-d', 'T', 'ZPP', 'co.IP')
('-d', 'AA', 'ZPP', 'co.IP') => ('-d', 'EA', 'ZPP', 'co.IP')
('-d', 'AA', 'ZPP', 'cocap.AM') => ('-d', 'T', 'ZPP', 'cocap.AM')
('-d', 'AA', 'ZPP', 'cocap.AM') => ('-d', 'EA', 'ZPP', 'cocap.AM')
('-d', 'AA', 'ZPP', 'AM') => ('-d', 'T', 'ZPP', 'AM')
('-d', 'AA', 'ZPP', 'AM') => ('-d', 'EA', 'ZPP', 'AM')
('-d', 'AA', 'ZPP', 'co.AM') => ('-d', 'T', 'ZPP', 'co.AM')
('-d', 'AA', 'ZPP', 'co.AM') => ('-d', 'EA', 'ZPP', 'co.AM')
('p', 'A', 'ZPP', 'AM') => ('p', 'R', 'ZPP', 'AM')
('p', 'A', 'ZPP', 'AM') => ('p', 'AA', 'ZPP', 'AM')
('p', 'A', 'ZPP', 'co.AM') => ('p', 'R', 'ZPP', 'co.AM')
('p', 'A', 'ZPP', 'co.AM') => ('p', 'AA', 'ZPP', 'co.AM')
('p', 'A', 'ZPP', 'co.IP') => ('p', 'R', 'ZPP', 'co.IP')
('p', 'A', 'ZPP', 'co.IP') => ('p', 'AA', 'ZPP', 'co.IP')
('p', 'A', 'ZPP', 'IP') => ('p', 'R', 'ZPP', 'IP')
('p', 'A', 'ZPP', 'IP') => ('p', 'AA', 'ZPP', 'IP')
('p', 'A', 'ZPP', 'cocap.IP') => ('p', 'R', 'ZPP', 'cocap.IP')
('p', 'A', 'ZPP', 'cocap.IP') => ('p', 'AA', 'ZPP', 'cocap.IP')
('p', 'AA', 'ZPP', 'cocap.IP') => ('p', 'T', 'ZPP', 'cocap.IP')
('p', 'AA', 'ZPP', 'cocap.IP') => ('p', 'EA', 'ZPP', 'cocap.IP')
('p', 'AA', 'ZPP', 'IP') => ('p', 'T', 'ZPP', 'IP')
('p', 'AA', 'ZPP', 'IP') => ('p', 'EA', 'ZPP', 'IP')
('p', 'AA', 'ZPP', 'co.IP') => ('p', 'T', 'ZPP', 'co.IP')
('p', 'AA', 'ZPP', 'co.IP') => ('p', 'EA', 'ZPP', 'co.IP')
('p', 'AA', 'ZPP', 'co.AM') => ('p', 'T', 'ZPP', 'co.AM')
('p', 'AA', 'ZPP', 'co.AM') => ('p', 'EA', 'ZPP', 'co.AM')
('p', 'AA', 'ZPP', 'AM') => ('p', 'T', 'ZPP', 'AM')
('p', 'AA', 'ZPP', 'AM') => ('p', 'EA', 'ZPP', 'AM')
('p', 'AA', 'ZPP', 'cocap.AM') => ('p', 'T', 'ZPP', 'cocap.AM')
('p', 'AA', 'ZPP', 'cocap.AM') => ('p', 'EA', 'ZPP', 'cocap.AM')
('-d', 'A', 'cocap.NP', 'PSPACE') => ('-d', 'R', 'cocap.NP', 'PSPACE')
('-d', 'A', 'cocap.NP', 'PSPACE') => ('-d', 'AA', 'cocap.NP', 'PSPACE')
('-d', 'AA', 'cocap.NP', 'PSPACE') => ('-d', 'T', 'cocap.NP', 'PSPACE')
('-d', 'AA', 'cocap.NP', 'PSPACE') => ('-d', 'EA', 'cocap.NP', 'PSPACE')
('p', 'A', 'cocap.NP', 'PSPACE') => ('p', 'R', 'cocap.NP', 'PSPACE')
('p', 'A', 'cocap.NP', 'PSPACE') => ('p', 'AA', 'cocap.NP', 'PSPACE')
('p', 'AA', 'cocap.NP', 'PSPACE') => ('p', 'T', 'cocap.NP', 'PSPACE')
('p', 'AA', 'cocap.NP', 'PSPACE') => ('p', 'EA', 'cocap.NP', 'PSPACE')
('-d', 'A', 'cocap.NP', 'AM') => ('-d', 'R', 'cocap.NP', 'AM')
('-d', 'A', 'cocap.NP', 'AM') => ('-d', 'AA', 'cocap.NP', 'AM')
('-d', 'A', 'cocap.NP', 'co.AM') => ('-d', 'R', 'cocap.NP', 'co.AM')
('-d', 'A', 'cocap.NP', 'co.AM') => ('-d', 'AA', 'cocap.NP', 'co.AM')
('-d', 'A', 'cocap.NP', 'cocap.AM') => ('-d', 'R', 'cocap.NP', 'cocap.AM')
('-d', 'A', 'cocap.NP', 'cocap.AM') => ('-d', 'AA', 'cocap.NP', 'cocap.AM')
('-d', 'A', 'cocap.NP', 'IP') => ('-d', 'R', 'cocap.NP', 'IP')
('-d', 'A', 'cocap.NP', 'IP') => ('-d', 'AA', 'cocap.NP', 'IP')
('-d', 'A', 'cocap.NP', 'co.IP') => ('-d', 'R', 'cocap.NP', 'co.IP')
('-d', 'A', 'cocap.NP', 'co.IP') => ('-d', 'AA', 'cocap.NP', 'co.IP')
('-d', 'A', 'cocap.NP', 'cocap.IP') => ('-d', 'R', 'cocap.NP', 'cocap.IP')
('-d', 'A', 'cocap.NP', 'cocap.IP') => ('-d', 'AA', 'cocap.NP', 'cocap.IP')
('-d', 'AA', 'cocap.NP', 'cocap.IP') => ('-d', 'T', 'cocap.NP', 'cocap.IP')
('-d', 'AA', 'cocap.NP', 'cocap.IP') => ('-d', 'EA', 'cocap.NP', 'cocap.IP')
('-d', 'AA', 'cocap.NP', 'IP') => ('-d', 'T', 'cocap.NP', 'IP')
('-d', 'AA', 'cocap.NP', 'IP') => ('-d', 'EA', 'cocap.NP', 'IP')
('-d', 'AA', 'cocap.NP', 'co.IP') => ('-d', 'T', 'cocap.NP', 'co.IP')
('-d', 'AA', 'cocap.NP', 'co.IP') => ('-d', 'EA', 'cocap.NP', 'co.IP')
('-d', 'AA', 'cocap.NP', 'cocap.AM') => ('-d', 'T', 'cocap.NP', 'cocap.AM')
('-d', 'AA', 'cocap.NP', 'cocap.AM') => ('-d', 'EA', 'cocap.NP', 'cocap.AM')
('-d', 'AA', 'cocap.NP', 'AM') => ('-d', 'T', 'cocap.NP', 'AM')
('-d', 'AA', 'cocap.NP', 'AM') => ('-d', 'EA', 'cocap.NP', 'AM')
('-d', 'AA', 'cocap.NP', 'co.AM') => ('-d', 'T', 'cocap.NP', 'co.AM')
('-d', 'AA', 'cocap.NP', 'co.AM') => ('-d', 'EA', 'cocap.NP', 'co.AM')
('p', 'A', 'cocap.NP', 'AM') => ('p', 'R', 'cocap.NP', 'AM')
('p', 'A', 'cocap.NP', 'AM') => ('p', 'AA', 'cocap.NP', 'AM')
('p', 'A', 'cocap.NP', 'co.AM') => ('p', 'R', 'cocap.NP', 'co.AM')
('p', 'A', 'cocap.NP', 'co.AM') => ('p', 'AA', 'cocap.NP', 'co.AM')
('p', 'A', 'cocap.NP', 'co.IP') => ('p', 'R', 'cocap.NP', 'co.IP')
('p', 'A', 'cocap.NP', 'co.IP') => ('p', 'AA', 'cocap.NP', 'co.IP')
('p', 'A', 'cocap.NP', 'IP') => ('p', 'R', 'cocap.NP', 'IP')
('p', 'A', 'cocap.NP', 'IP') => ('p', 'AA', 'cocap.NP', 'IP')
('p', 'A', 'cocap.NP', 'cocap.IP') => ('p', 'R', 'cocap.NP', 'cocap.IP')
('p', 'A', 'cocap.NP', 'cocap.IP') => ('p', 'AA', 'cocap.NP', 'cocap.IP')
('p', 'AA', 'cocap.NP', 'cocap.IP') => ('p', 'T', 'cocap.NP', 'cocap.IP')
('p', 'AA', 'cocap.NP', 'cocap.IP') => ('p', 'EA', 'cocap.NP', 'cocap.IP')
('p', 'AA', 'cocap.NP', 'IP') => ('p', 'T', 'cocap.NP', 'IP')
('p', 'AA', 'cocap.NP', 'IP') => ('p', 'EA', 'cocap.NP', 'IP')
('p', 'AA', 'cocap.NP', 'co.IP') => ('p', 'T', 'cocap.NP', 'co.IP')
('p', 'AA', 'cocap.NP', 'co.IP') => ('p', 'EA', 'cocap.NP', 'co.IP')
('p', 'AA', 'cocap.NP', 'co.AM') => ('p', 'T', 'cocap.NP', 'co.AM')
('p', 'AA', 'cocap.NP', 'co.AM') => ('p', 'EA', 'cocap.NP', 'co.AM')
('p', 'AA', 'cocap.NP', 'AM') => ('p', 'T', 'cocap.NP', 'AM')
('p', 'AA', 'cocap.NP', 'AM') => ('p', 'EA', 'cocap.NP', 'AM')
('p', 'AA', 'cocap.NP', 'cocap.AM') => ('p', 'T', 'cocap.NP', 'cocap.AM')
('p', 'AA', 'cocap.NP', 'cocap.AM') => ('p', 'EA', 'cocap.NP', 'cocap.AM')
('-d', 'A', 'cocap.SBP', 'cocap.MIP') => ('-d', 'R', 'cocap.SBP', 'cocap.MIP')
('-d', 'A', 'cocap.SBP', 'cocap.MIP') => ('-d', 'AA', 'cocap.SBP', 'cocap.MIP')
('-d', 'A', 'cocap.SBP', 'MIP') => ('-d', 'R', 'cocap.SBP', 'MIP')
('-d', 'A', 'cocap.SBP', 'MIP') => ('-d', 'AA', 'cocap.SBP', 'MIP')
('-d', 'A', 'cocap.SBP', 'co.MIP') => ('-d', 'R', 'cocap.SBP', 'co.MIP')
('-d', 'A', 'cocap.SBP', 'co.MIP') => ('-d', 'AA', 'cocap.SBP', 'co.MIP')
('-d', 'A', 'cocap.MA', 'co.MIP') => ('-d', 'R', 'cocap.MA', 'co.MIP')
('-d', 'A', 'cocap.MA', 'co.MIP') => ('-d', 'AA', 'cocap.MA', 'co.MIP')
('-d', 'A', 'cocap.MA', 'MIP') => ('-d', 'R', 'cocap.MA', 'MIP')
('-d', 'A', 'cocap.MA', 'MIP') => ('-d', 'AA', 'cocap.MA', 'MIP')
('-d', 'A', 'cocap.MA', 'cocap.MIP') => ('-d', 'R', 'cocap.MA', 'cocap.MIP')
('-d', 'A', 'cocap.MA', 'cocap.MIP') => ('-d', 'AA', 'cocap.MA', 'cocap.MIP')
('-d', 'AA', 'cocap.MA', 'cocap.MIP') => ('-d', 'T', 'cocap.MA', 'cocap.MIP')
('-d', 'AA', 'cocap.MA', 'cocap.MIP') => ('-d', 'EA', 'cocap.MA', 'cocap.MIP')
('-d', 'AA', 'cocap.MA', 'MIP') => ('-d', 'T', 'cocap.MA', 'MIP')
('-d', 'AA', 'cocap.MA', 'MIP') => ('-d', 'EA', 'cocap.MA', 'MIP')
('-d', 'AA', 'cocap.MA', 'co.MIP') => ('-d', 'T', 'cocap.MA', 'co.MIP')
('-d', 'AA', 'cocap.MA', 'co.MIP') => ('-d', 'EA', 'cocap.MA', 'co.MIP')
('-d', 'AA', 'cocap.SBP', 'co.MIP') => ('-d', 'T', 'cocap.SBP', 'co.MIP')
('-d', 'AA', 'cocap.SBP', 'co.MIP') => ('-d', 'EA', 'cocap.SBP', 'co.MIP')
('-d', 'AA', 'cocap.SBP', 'MIP') => ('-d', 'T', 'cocap.SBP', 'MIP')
('-d', 'AA', 'cocap.SBP', 'MIP') => ('-d', 'EA', 'cocap.SBP', 'MIP')
('-d', 'AA', 'cocap.SBP', 'cocap.MIP') => ('-d', 'T', 'cocap.SBP', 'cocap.MIP')
('-d', 'AA', 'cocap.SBP', 'cocap.MIP') => ('-d', 'EA', 'cocap.SBP', 'cocap.MIP')
('p', 'A', 'cocap.SBP', 'cocap.MIP') => ('p', 'R', 'cocap.SBP', 'cocap.MIP')
('p', 'A', 'cocap.SBP', 'cocap.MIP') => ('p', 'AA', 'cocap.SBP', 'cocap.MIP')
('p', 'A', 'cocap.SBP', 'MIP') => ('p', 'R', 'cocap.SBP', 'MIP')
('p', 'A', 'cocap.SBP', 'MIP') => ('p', 'AA', 'cocap.SBP', 'MIP')
('p', 'A', 'cocap.SBP', 'co.MIP') => ('p', 'R', 'cocap.SBP', 'co.MIP')
('p', 'A', 'cocap.SBP', 'co.MIP') => ('p', 'AA', 'cocap.SBP', 'co.MIP')
('p', 'A', 'cocap.MA', 'co.MIP') => ('p', 'R', 'cocap.MA', 'co.MIP')
('p', 'A', 'cocap.MA', 'co.MIP') => ('p', 'AA', 'cocap.MA', 'co.MIP')
('p', 'A', 'cocap.MA', 'MIP') => ('p', 'R', 'cocap.MA', 'MIP')
('p', 'A', 'cocap.MA', 'MIP') => ('p', 'AA', 'cocap.MA', 'MIP')
('p', 'A', 'cocap.MA', 'cocap.MIP') => ('p', 'R', 'cocap.MA', 'cocap.MIP')
('p', 'A', 'cocap.MA', 'cocap.MIP') => ('p', 'AA', 'cocap.MA', 'cocap.MIP')
('p', 'AA', 'cocap.MA', 'cocap.MIP') => ('p', 'T', 'cocap.MA', 'cocap.MIP')
('p', 'AA', 'cocap.MA', 'cocap.MIP') => ('p', 'EA', 'cocap.MA', 'cocap.MIP')
('p', 'AA', 'cocap.MA', 'MIP') => ('p', 'T', 'cocap.MA', 'MIP')
('p', 'AA', 'cocap.MA', 'MIP') => ('p', 'EA', 'cocap.MA', 'MIP')
('p', 'AA', 'cocap.MA', 'co.MIP') => ('p', 'T', 'cocap.MA', 'co.MIP')
('p', 'AA', 'cocap.MA', 'co.MIP') => ('p', 'EA', 'cocap.MA', 'co.MIP')
('p', 'AA', 'cocap.SBP', 'co.MIP') => ('p', 'T', 'cocap.SBP', 'co.MIP')
('p', 'AA', 'cocap.SBP', 'co.MIP') => ('p', 'EA', 'cocap.SBP', 'co.MIP')
('p', 'AA', 'cocap.SBP', 'MIP') => ('p', 'T', 'cocap.SBP', 'MIP')
('p', 'AA', 'cocap.SBP', 'MIP') => ('p', 'EA', 'cocap.SBP', 'MIP')
('p', 'AA', 'cocap.SBP', 'cocap.MIP') => ('p', 'T', 'cocap.SBP', 'cocap.MIP')
('p', 'AA', 'cocap.SBP', 'cocap.MIP') => ('p', 'EA', 'cocap.SBP', 'cocap.MIP')
('d', 'A', 'PSPACE', 'cocap.SBP') => ('-p', 'A', 'PSPACE', 'cocap.SBP')
('d', 'A', 'PSPACE', 'SBP') => ('-p', 'A', 'PSPACE', 'SBP')
('d', 'A', 'PSPACE', 'co.SBP') => ('-p', 'A', 'PSPACE', 'co.SBP')
('-d', 'A', 'cocap.SBP', 'PSPACE') => ('-d', 'R', 'cocap.SBP', 'PSPACE')
('-d', 'A', 'cocap.SBP', 'PSPACE') => ('-d', 'AA', 'cocap.SBP', 'PSPACE')
('-d', 'A', 'cocap.MA', 'PSPACE') => ('-d', 'R', 'cocap.MA', 'PSPACE')
('-d', 'A', 'cocap.MA', 'PSPACE') => ('-d', 'AA', 'cocap.MA', 'PSPACE')
('-d', 'AA', 'cocap.MA', 'PSPACE') => ('-d', 'T', 'cocap.MA', 'PSPACE')
('-d', 'AA', 'cocap.MA', 'PSPACE') => ('-d', 'EA', 'cocap.MA', 'PSPACE')
('-d', 'AA', 'cocap.SBP', 'PSPACE') => ('-d', 'T', 'cocap.SBP', 'PSPACE')
('-d', 'AA', 'cocap.SBP', 'PSPACE') => ('-d', 'EA', 'cocap.SBP', 'PSPACE')
('p', 'A', 'cocap.SBP', 'PSPACE') => ('p', 'R', 'cocap.SBP', 'PSPACE')
('p', 'A', 'cocap.SBP', 'PSPACE') => ('p', 'AA', 'cocap.SBP', 'PSPACE')
('p', 'A', 'cocap.MA', 'PSPACE') => ('p', 'R', 'cocap.MA', 'PSPACE')
('p', 'A', 'cocap.MA', 'PSPACE') => ('p', 'AA', 'cocap.MA', 'PSPACE')
('p', 'AA', 'cocap.MA', 'PSPACE') => ('p', 'T', 'cocap.MA', 'PSPACE')
('p', 'AA', 'cocap.MA', 'PSPACE') => ('p', 'EA', 'cocap.MA', 'PSPACE')
('p', 'AA', 'cocap.SBP', 'PSPACE') => ('p', 'T', 'cocap.SBP', 'PSPACE')
('p', 'AA', 'cocap.SBP', 'PSPACE') => ('p', 'EA', 'cocap.SBP', 'PSPACE')
('-d', 'A', 'cocap.SBP', 'AM') => ('-d', 'R', 'cocap.SBP', 'AM')
('-d', 'A', 'cocap.SBP', 'AM') => ('-d', 'AA', 'cocap.SBP', 'AM')
('-d', 'A', 'cocap.SBP', 'co.AM') => ('-d', 'R', 'cocap.SBP', 'co.AM')
('-d', 'A', 'cocap.SBP', 'co.AM') => ('-d', 'AA', 'cocap.SBP', 'co.AM')
('-d', 'A', 'cocap.SBP', 'cocap.AM') => ('-d', 'R', 'cocap.SBP', 'cocap.AM')
('-d', 'A', 'cocap.SBP', 'cocap.AM') => ('-d', 'AA', 'cocap.SBP', 'cocap.AM')
('-d', 'A', 'cocap.MA', 'cocap.AM') => ('-d', 'R', 'cocap.MA', 'cocap.AM')
('-d', 'A', 'cocap.MA', 'cocap.AM') => ('-d', 'AA', 'cocap.MA', 'cocap.AM')
('-d', 'A', 'cocap.MA', 'AM') => ('-d', 'R', 'cocap.MA', 'AM')
('-d', 'A', 'cocap.MA', 'AM') => ('-d', 'AA', 'cocap.MA', 'AM')
('-d', 'A', 'cocap.MA', 'co.AM') => ('-d', 'R', 'cocap.MA', 'co.AM')
('-d', 'A', 'cocap.MA', 'co.AM') => ('-d', 'AA', 'cocap.MA', 'co.AM')
('-d', 'A', 'cocap.MA', 'co.NP/poly') => ('-d', 'R', 'cocap.MA', 'co.NP/poly')
('-d', 'A', 'cocap.MA', 'co.NP/poly') => ('-d', 'AA', 'cocap.MA', 'co.NP/poly')
('-d', 'A', 'cocap.MA', 'NP/poly') => ('-d', 'R', 'cocap.MA', 'NP/poly')
('-d', 'A', 'cocap.MA', 'NP/poly') => ('-d', 'AA', 'cocap.MA', 'NP/poly')
('-d', 'A', 'cocap.MA', 'cocap.NP/poly') => ('-d', 'R', 'cocap.MA', 'cocap.NP/poly')
('-d', 'A', 'cocap.MA', 'cocap.NP/poly') => ('-d', 'AA', 'cocap.MA', 'cocap.NP/poly')
('-d', 'AA', 'cocap.MA', 'cocap.NP/poly') => ('-d', 'T', 'cocap.MA', 'cocap.NP/poly')
('-d', 'AA', 'cocap.MA', 'cocap.NP/poly') => ('-d', 'EA', 'cocap.MA', 'cocap.NP/poly')
('-d', 'AA', 'cocap.MA', 'co.NP/poly') => ('-d', 'T', 'cocap.MA', 'co.NP/poly')
('-d', 'AA', 'cocap.MA', 'co.NP/poly') => ('-d', 'EA', 'cocap.MA', 'co.NP/poly')
('-d', 'AA', 'cocap.MA', 'NP/poly') => ('-d', 'T', 'cocap.MA', 'NP/poly')
('-d', 'AA', 'cocap.MA', 'NP/poly') => ('-d', 'EA', 'cocap.MA', 'NP/poly')
('-d', 'A', 'cocap.MA', 'co.IP') => ('-d', 'R', 'cocap.MA', 'co.IP')
('-d', 'A', 'cocap.MA', 'co.IP') => ('-d', 'AA', 'cocap.MA', 'co.IP')
('-d', 'A', 'cocap.MA', 'IP') => ('-d', 'R', 'cocap.MA', 'IP')
('-d', 'A', 'cocap.MA', 'IP') => ('-d', 'AA', 'cocap.MA', 'IP')
('-d', 'A', 'cocap.MA', 'cocap.IP') => ('-d', 'R', 'cocap.MA', 'cocap.IP')
('-d', 'A', 'cocap.MA', 'cocap.IP') => ('-d', 'AA', 'cocap.MA', 'cocap.IP')
('-d', 'AA', 'cocap.MA', 'cocap.IP') => ('-d', 'T', 'cocap.MA', 'cocap.IP')
('-d', 'AA', 'cocap.MA', 'cocap.IP') => ('-d', 'EA', 'cocap.MA', 'cocap.IP')
('-d', 'AA', 'cocap.MA', 'IP') => ('-d', 'T', 'cocap.MA', 'IP')
('-d', 'AA', 'cocap.MA', 'IP') => ('-d', 'EA', 'cocap.MA', 'IP')
('-d', 'AA', 'cocap.MA', 'co.IP') => ('-d', 'T', 'cocap.MA', 'co.IP')
('-d', 'AA', 'cocap.MA', 'co.IP') => ('-d', 'EA', 'cocap.MA', 'co.IP')
('-d', 'AA', 'cocap.MA', 'co.AM') => ('-d', 'T', 'cocap.MA', 'co.AM')
('-d', 'AA', 'cocap.MA', 'co.AM') => ('-d', 'EA', 'cocap.MA', 'co.AM')
('-d', 'AA', 'cocap.MA', 'AM') => ('-d', 'T', 'cocap.MA', 'AM')
('-d', 'AA', 'cocap.MA', 'AM') => ('-d', 'EA', 'cocap.MA', 'AM')
('-d', 'AA', 'cocap.MA', 'cocap.AM') => ('-d', 'T', 'cocap.MA', 'cocap.AM')
('-d', 'AA', 'cocap.MA', 'cocap.AM') => ('-d', 'EA', 'cocap.MA', 'cocap.AM')
('-d', 'A', 'cocap.SBP', 'co.NP/poly') => ('-d', 'R', 'cocap.SBP', 'co.NP/poly')
('-d', 'A', 'cocap.SBP', 'co.NP/poly') => ('-d', 'AA', 'cocap.SBP', 'co.NP/poly')
('-d', 'A', 'cocap.SBP', 'NP/poly') => ('-d', 'R', 'cocap.SBP', 'NP/poly')
('-d', 'A', 'cocap.SBP', 'NP/poly') => ('-d', 'AA', 'cocap.SBP', 'NP/poly')
('-d', 'A', 'cocap.SBP', 'cocap.NP/poly') => ('-d', 'R', 'cocap.SBP', 'cocap.NP/poly')
('-d', 'A', 'cocap.SBP', 'cocap.NP/poly') => ('-d', 'AA', 'cocap.SBP', 'cocap.NP/poly')
('-d', 'AA', 'cocap.SBP', 'cocap.NP/poly') => ('-d', 'T', 'cocap.SBP', 'cocap.NP/poly')
('-d', 'AA', 'cocap.SBP', 'cocap.NP/poly') => ('-d', 'EA', 'cocap.SBP', 'cocap.NP/poly')
('-d', 'AA', 'cocap.SBP', 'co.NP/poly') => ('-d', 'T', 'cocap.SBP', 'co.NP/poly')
('-d', 'AA', 'cocap.SBP', 'co.NP/poly') => ('-d', 'EA', 'cocap.SBP', 'co.NP/poly')
('-d', 'AA', 'cocap.SBP', 'NP/poly') => ('-d', 'T', 'cocap.SBP', 'NP/poly')
('-d', 'AA', 'cocap.SBP', 'NP/poly') => ('-d', 'EA', 'cocap.SBP', 'NP/poly')
('-d', 'A', 'cocap.SBP', 'IP') => ('-d', 'R', 'cocap.SBP', 'IP')
('-d', 'A', 'cocap.SBP', 'IP') => ('-d', 'AA', 'cocap.SBP', 'IP')
('-d', 'A', 'cocap.SBP', 'co.IP') => ('-d', 'R', 'cocap.SBP', 'co.IP')
('-d', 'A', 'cocap.SBP', 'co.IP') => ('-d', 'AA', 'cocap.SBP', 'co.IP')
('-d', 'A', 'cocap.SBP', 'cocap.IP') => ('-d', 'R', 'cocap.SBP', 'cocap.IP')
('-d', 'A', 'cocap.SBP', 'cocap.IP') => ('-d', 'AA', 'cocap.SBP', 'cocap.IP')
('-d', 'AA', 'cocap.SBP', 'cocap.IP') => ('-d', 'T', 'cocap.SBP', 'cocap.IP')
('-d', 'AA', 'cocap.SBP', 'cocap.IP') => ('-d', 'EA', 'cocap.SBP', 'cocap.IP')
('-d', 'AA', 'cocap.SBP', 'IP') => ('-d', 'T', 'cocap.SBP', 'IP')
('-d', 'AA', 'cocap.SBP', 'IP') => ('-d', 'EA', 'cocap.SBP', 'IP')
('-d', 'AA', 'cocap.SBP', 'co.IP') => ('-d', 'T', 'cocap.SBP', 'co.IP')
('-d', 'AA', 'cocap.SBP', 'co.IP') => ('-d', 'EA', 'cocap.SBP', 'co.IP')
('-d', 'AA', 'cocap.SBP', 'cocap.AM') => ('-d', 'T', 'cocap.SBP', 'cocap.AM')
('-d', 'AA', 'cocap.SBP', 'cocap.AM') => ('-d', 'EA', 'cocap.SBP', 'cocap.AM')
('-d', 'AA', 'cocap.SBP', 'AM') => ('-d', 'T', 'cocap.SBP', 'AM')
('-d', 'AA', 'cocap.SBP', 'AM') => ('-d', 'EA', 'cocap.SBP', 'AM')
('-d', 'AA', 'cocap.SBP', 'co.AM') => ('-d', 'T', 'cocap.SBP', 'co.AM')
('-d', 'AA', 'cocap.SBP', 'co.AM') => ('-d', 'EA', 'cocap.SBP', 'co.AM')
('p', 'A', 'cocap.SBP', 'AM') => ('p', 'R', 'cocap.SBP', 'AM')
('p', 'A', 'cocap.SBP', 'AM') => ('p', 'AA', 'cocap.SBP', 'AM')
('p', 'A', 'cocap.SBP', 'co.AM') => ('p', 'R', 'cocap.SBP', 'co.AM')
('p', 'A', 'cocap.SBP', 'co.AM') => ('p', 'AA', 'cocap.SBP', 'co.AM')
('p', 'A', 'cocap.MA', 'co.AM') => ('p', 'R', 'cocap.MA', 'co.AM')
('p', 'A', 'cocap.MA', 'co.AM') => ('p', 'AA', 'cocap.MA', 'co.AM')
('p', 'A', 'cocap.MA', 'AM') => ('p', 'R', 'cocap.MA', 'AM')
('p', 'A', 'cocap.MA', 'AM') => ('p', 'AA', 'cocap.MA', 'AM')
('p', 'A', 'cocap.MA', 'cocap.AM') => ('p', 'R', 'cocap.MA', 'cocap.AM')
('p', 'A', 'cocap.MA', 'cocap.AM') => ('p', 'AA', 'cocap.MA', 'cocap.AM')
('p', 'A', 'cocap.MA', 'co.NP/poly') => ('p', 'R', 'cocap.MA', 'co.NP/poly')
('p', 'A', 'cocap.MA', 'co.NP/poly') => ('p', 'AA', 'cocap.MA', 'co.NP/poly')
('p', 'A', 'cocap.MA', 'NP/poly') => ('p', 'R', 'cocap.MA', 'NP/poly')
('p', 'A', 'cocap.MA', 'NP/poly') => ('p', 'AA', 'cocap.MA', 'NP/poly')
('p', 'A', 'cocap.MA', 'cocap.NP/poly') => ('p', 'R', 'cocap.MA', 'cocap.NP/poly')
('p', 'A', 'cocap.MA', 'cocap.NP/poly') => ('p', 'AA', 'cocap.MA', 'cocap.NP/poly')
('p', 'AA', 'cocap.MA', 'cocap.NP/poly') => ('p', 'T', 'cocap.MA', 'cocap.NP/poly')
('p', 'AA', 'cocap.MA', 'cocap.NP/poly') => ('p', 'EA', 'cocap.MA', 'cocap.NP/poly')
('p', 'AA', 'cocap.MA', 'co.NP/poly') => ('p', 'T', 'cocap.MA', 'co.NP/poly')
('p', 'AA', 'cocap.MA', 'co.NP/poly') => ('p', 'EA', 'cocap.MA', 'co.NP/poly')
('p', 'AA', 'cocap.MA', 'NP/poly') => ('p', 'T', 'cocap.MA', 'NP/poly')
('p', 'AA', 'cocap.MA', 'NP/poly') => ('p', 'EA', 'cocap.MA', 'NP/poly')
('p', 'A', 'cocap.MA', 'IP') => ('p', 'R', 'cocap.MA', 'IP')
('p', 'A', 'cocap.MA', 'IP') => ('p', 'AA', 'cocap.MA', 'IP')
('p', 'A', 'cocap.MA', 'co.IP') => ('p', 'R', 'cocap.MA', 'co.IP')
('p', 'A', 'cocap.MA', 'co.IP') => ('p', 'AA', 'cocap.MA', 'co.IP')
('p', 'A', 'cocap.MA', 'cocap.IP') => ('p', 'R', 'cocap.MA', 'cocap.IP')
('p', 'A', 'cocap.MA', 'cocap.IP') => ('p', 'AA', 'cocap.MA', 'cocap.IP')
('p', 'AA', 'cocap.MA', 'cocap.IP') => ('p', 'T', 'cocap.MA', 'cocap.IP')
('p', 'AA', 'cocap.MA', 'cocap.IP') => ('p', 'EA', 'cocap.MA', 'cocap.IP')
('p', 'AA', 'cocap.MA', 'IP') => ('p', 'T', 'cocap.MA', 'IP')
('p', 'AA', 'cocap.MA', 'IP') => ('p', 'EA', 'cocap.MA', 'IP')
('p', 'AA', 'cocap.MA', 'co.IP') => ('p', 'T', 'cocap.MA', 'co.IP')
('p', 'AA', 'cocap.MA', 'co.IP') => ('p', 'EA', 'cocap.MA', 'co.IP')
('p', 'AA', 'cocap.MA', 'cocap.AM') => ('p', 'T', 'cocap.MA', 'cocap.AM')
('p', 'AA', 'cocap.MA', 'cocap.AM') => ('p', 'EA', 'cocap.MA', 'cocap.AM')
('p', 'AA', 'cocap.MA', 'AM') => ('p', 'T', 'cocap.MA', 'AM')
('p', 'AA', 'cocap.MA', 'AM') => ('p', 'EA', 'cocap.MA', 'AM')
('p', 'AA', 'cocap.MA', 'co.AM') => ('p', 'T', 'cocap.MA', 'co.AM')
('p', 'AA', 'cocap.MA', 'co.AM') => ('p', 'EA', 'cocap.MA', 'co.AM')
('p', 'A', 'cocap.SBP', 'co.NP/poly') => ('p', 'R', 'cocap.SBP', 'co.NP/poly')
('p', 'A', 'cocap.SBP', 'co.NP/poly') => ('p', 'AA', 'cocap.SBP', 'co.NP/poly')
('p', 'A', 'cocap.SBP', 'NP/poly') => ('p', 'R', 'cocap.SBP', 'NP/poly')
('p', 'A', 'cocap.SBP', 'NP/poly') => ('p', 'AA', 'cocap.SBP', 'NP/poly')
('p', 'A', 'cocap.SBP', 'cocap.NP/poly') => ('p', 'R', 'cocap.SBP', 'cocap.NP/poly')
('p', 'A', 'cocap.SBP', 'cocap.NP/poly') => ('p', 'AA', 'cocap.SBP', 'cocap.NP/poly')
('p', 'AA', 'cocap.SBP', 'cocap.NP/poly') => ('p', 'T', 'cocap.SBP', 'cocap.NP/poly')
('p', 'AA', 'cocap.SBP', 'cocap.NP/poly') => ('p', 'EA', 'cocap.SBP', 'cocap.NP/poly')
('p', 'AA', 'cocap.SBP', 'co.NP/poly') => ('p', 'T', 'cocap.SBP', 'co.NP/poly')
('p', 'AA', 'cocap.SBP', 'co.NP/poly') => ('p', 'EA', 'cocap.SBP', 'co.NP/poly')
('p', 'AA', 'cocap.SBP', 'NP/poly') => ('p', 'T', 'cocap.SBP', 'NP/poly')
('p', 'AA', 'cocap.SBP', 'NP/poly') => ('p', 'EA', 'cocap.SBP', 'NP/poly')
('p', 'A', 'cocap.SBP', 'co.IP') => ('p', 'R', 'cocap.SBP', 'co.IP')
('p', 'A', 'cocap.SBP', 'co.IP') => ('p', 'AA', 'cocap.SBP', 'co.IP')
('p', 'A', 'cocap.SBP', 'IP') => ('p', 'R', 'cocap.SBP', 'IP')
('p', 'A', 'cocap.SBP', 'IP') => ('p', 'AA', 'cocap.SBP', 'IP')
('p', 'A', 'cocap.SBP', 'cocap.IP') => ('p', 'R', 'cocap.SBP', 'cocap.IP')
('p', 'A', 'cocap.SBP', 'cocap.IP') => ('p', 'AA', 'cocap.SBP', 'cocap.IP')
('p', 'AA', 'cocap.SBP', 'cocap.IP') => ('p', 'T', 'cocap.SBP', 'cocap.IP')
('p', 'AA', 'cocap.SBP', 'cocap.IP') => ('p', 'EA', 'cocap.SBP', 'cocap.IP')
('p', 'AA', 'cocap.SBP', 'IP') => ('p', 'T', 'cocap.SBP', 'IP')
('p', 'AA', 'cocap.SBP', 'IP') => ('p', 'EA', 'cocap.SBP', 'IP')
('p', 'AA', 'cocap.SBP', 'co.IP') => ('p', 'T', 'cocap.SBP', 'co.IP')
('p', 'AA', 'cocap.SBP', 'co.IP') => ('p', 'EA', 'cocap.SBP', 'co.IP')
('p', 'AA', 'cocap.SBP', 'co.AM') => ('p', 'T', 'cocap.SBP', 'co.AM')
('p', 'AA', 'cocap.SBP', 'co.AM') => ('p', 'EA', 'cocap.SBP', 'co.AM')
('p', 'AA', 'cocap.SBP', 'AM') => ('p', 'T', 'cocap.SBP', 'AM')
('p', 'AA', 'cocap.SBP', 'AM') => ('p', 'EA', 'cocap.SBP', 'AM')
('p', 'AA', 'cocap.SBP', 'cocap.AM') => ('p', 'T', 'cocap.SBP', 'cocap.AM')
('p', 'AA', 'cocap.SBP', 'cocap.AM') => ('p', 'EA', 'cocap.SBP', 'cocap.AM')
('d', 'A', 'co.AM', 'P') => ('-p', 'A', 'co.AM', 'P')
('d', 'A', 'AM', 'P') => ('-p', 'A', 'AM', 'P')
('-d', 'A', 'co.SBP', 'ALL') => ('-d', 'R', 'co.SBP', 'ALL')
('-d', 'A', 'co.SBP', 'ALL') => ('-d', 'AA', 'co.SBP', 'ALL')
('-d', 'A', 'SBP', 'ALL') => ('-d', 'R', 'SBP', 'ALL')
('-d', 'A', 'SBP', 'ALL') => ('-d', 'AA', 'SBP', 'ALL')
('-d', 'A', 'MA', 'ALL') => ('-d', 'R', 'MA', 'ALL')
('-d', 'A', 'MA', 'ALL') => ('-d', 'AA', 'MA', 'ALL')
('-d', 'A', 'co.MA', 'ALL') => ('-d', 'R', 'co.MA', 'ALL')
('-d', 'A', 'co.MA', 'ALL') => ('-d', 'AA', 'co.MA', 'ALL')
('-d', 'AA', 'co.MA', 'ALL') => ('-d', 'T', 'co.MA', 'ALL')
('-d', 'AA', 'co.MA', 'ALL') => ('-d', 'EA', 'co.MA', 'ALL')
('-d', 'AA', 'MA', 'ALL') => ('-d', 'T', 'MA', 'ALL')
('-d', 'AA', 'MA', 'ALL') => ('-d', 'EA', 'MA', 'ALL')
('-d', 'AA', 'SBP', 'ALL') => ('-d', 'T', 'SBP', 'ALL')
('-d', 'AA', 'SBP', 'ALL') => ('-d', 'EA', 'SBP', 'ALL')
('-d', 'AA', 'co.SBP', 'ALL') => ('-d', 'T', 'co.SBP', 'ALL')
('-d', 'AA', 'co.SBP', 'ALL') => ('-d', 'EA', 'co.SBP', 'ALL')
('p', 'A', 'co.SBP', 'ALL') => ('p', 'R', 'co.SBP', 'ALL')
('p', 'A', 'co.SBP', 'ALL') => ('p', 'AA', 'co.SBP', 'ALL')
('p', 'A', 'SBP', 'ALL') => ('p', 'R', 'SBP', 'ALL')
('p', 'A', 'SBP', 'ALL') => ('p', 'AA', 'SBP', 'ALL')
('p', 'A', 'MA', 'ALL') => ('p', 'R', 'MA', 'ALL')
('p', 'A', 'MA', 'ALL') => ('p', 'AA', 'MA', 'ALL')
('p', 'A', 'co.MA', 'ALL') => ('p', 'R', 'co.MA', 'ALL')
('p', 'A', 'co.MA', 'ALL') => ('p', 'AA', 'co.MA', 'ALL')
('p', 'AA', 'co.MA', 'ALL') => ('p', 'T', 'co.MA', 'ALL')
('p', 'AA', 'co.MA', 'ALL') => ('p', 'EA', 'co.MA', 'ALL')
('p', 'AA', 'MA', 'ALL') => ('p', 'T', 'MA', 'ALL')
('p', 'AA', 'MA', 'ALL') => ('p', 'EA', 'MA', 'ALL')
('p', 'AA', 'SBP', 'ALL') => ('p', 'T', 'SBP', 'ALL')
('p', 'AA', 'SBP', 'ALL') => ('p', 'EA', 'SBP', 'ALL')
('p', 'AA', 'co.SBP', 'ALL') => ('p', 'T', 'co.SBP', 'ALL')
('p', 'AA', 'co.SBP', 'ALL') => ('p', 'EA', 'co.SBP', 'ALL')
('d', 'A', 'co.AM', 'BQP') => ('-p', 'A', 'co.AM', 'BQP')
('d', 'A', 'AM', 'BQP') => ('-p', 'A', 'AM', 'BQP')
('-d', 'A', 'co.SBP', 'co.NEXP') => ('-d', 'R', 'co.SBP', 'co.NEXP')
('-d', 'A', 'co.SBP', 'co.NEXP') => ('-d', 'AA', 'co.SBP', 'co.NEXP')
('-d', 'A', 'SBP', 'NEXP') => ('-d', 'R', 'SBP', 'NEXP')
('-d', 'A', 'SBP', 'NEXP') => ('-d', 'AA', 'SBP', 'NEXP')
('-d', 'A', 'RP', 'NEXP') => ('-d', 'R', 'RP', 'NEXP')
('-d', 'A', 'RP', 'NEXP') => ('-d', 'AA', 'RP', 'NEXP')
('-d', 'A', 'co.RP', 'co.NEXP') => ('-d', 'R', 'co.RP', 'co.NEXP')
('-d', 'A', 'co.RP', 'co.NEXP') => ('-d', 'AA', 'co.RP', 'co.NEXP')
('-d', 'A', 'co.RP', 'R') => ('-d', 'R', 'co.RP', 'R')
('-d', 'A', 'co.RP', 'R') => ('-d', 'AA', 'co.RP', 'R')
('-d', 'A', 'RP', 'R') => ('-d', 'R', 'RP', 'R')
('-d', 'A', 'RP', 'R') => ('-d', 'AA', 'RP', 'R')
('-d', 'A', 'RP', 'RE') => ('-d', 'R', 'RP', 'RE')
('-d', 'A', 'RP', 'RE') => ('-d', 'AA', 'RP', 'RE')
('-d', 'A', 'co.RP', 'co.RE') => ('-d', 'R', 'co.RP', 'co.RE')
('-d', 'A', 'co.RP', 'co.RE') => ('-d', 'AA', 'co.RP', 'co.RE')
('-d', 'AA', 'co.RP', 'co.RE') => ('-d', 'T', 'co.RP', 'co.RE')
('-d', 'AA', 'co.RP', 'co.RE') => ('-d', 'EA', 'co.RP', 'co.RE')
('-d', 'AA', 'RP', 'RE') => ('-d', 'T', 'RP', 'RE')
('-d', 'AA', 'RP', 'RE') => ('-d', 'EA', 'RP', 'RE')
('-d', 'A', 'RP', 'co.RE') => ('-d', 'R', 'RP', 'co.RE')
('-d', 'A', 'RP', 'co.RE') => ('-d', 'AA', 'RP', 'co.RE')
('-d', 'A', 'co.RP', 'RE') => ('-d', 'R', 'co.RP', 'RE')
('-d', 'A', 'co.RP', 'RE') => ('-d', 'AA', 'co.RP', 'RE')
('-d', 'AA', 'co.RP', 'RE') => ('-d', 'T', 'co.RP', 'RE')
('-d', 'AA', 'co.RP', 'RE') => ('-d', 'EA', 'co.RP', 'RE')
('-d', 'AA', 'RP', 'co.RE') => ('-d', 'T', 'RP', 'co.RE')
('-d', 'AA', 'RP', 'co.RE') => ('-d', 'EA', 'RP', 'co.RE')
('-d', 'AA', 'RP', 'R') => ('-d', 'T', 'RP', 'R')
('-d', 'AA', 'RP', 'R') => ('-d', 'EA', 'RP', 'R')
('-d', 'AA', 'co.RP', 'R') => ('-d', 'T', 'co.RP', 'R')
('-d', 'AA', 'co.RP', 'R') => ('-d', 'EA', 'co.RP', 'R')
('-d', 'AA', 'co.RP', 'co.NEXP') => ('-d', 'T', 'co.RP', 'co.NEXP')
('-d', 'AA', 'co.RP', 'co.NEXP') => ('-d', 'EA', 'co.RP', 'co.NEXP')
('-d', 'AA', 'RP', 'NEXP') => ('-d', 'T', 'RP', 'NEXP')
('-d', 'AA', 'RP', 'NEXP') => ('-d', 'EA', 'RP', 'NEXP')
('-d', 'A', 'NP', 'NEXP') => ('-d', 'R', 'NP', 'NEXP')
('-d', 'A', 'NP', 'NEXP') => ('-d', 'AA', 'NP', 'NEXP')
('-d', 'A', 'co.NP', 'co.NEXP') => ('-d', 'R', 'co.NP', 'co.NEXP')
('-d', 'A', 'co.NP', 'co.NEXP') => ('-d', 'AA', 'co.NP', 'co.NEXP')
('-d', 'A', 'co.NP', 'R') => ('-d', 'R', 'co.NP', 'R')
('-d', 'A', 'co.NP', 'R') => ('-d', 'AA', 'co.NP', 'R')
('-d', 'A', 'NP', 'R') => ('-d', 'R', 'NP', 'R')
('-d', 'A', 'NP', 'R') => ('-d', 'AA', 'NP', 'R')
('-d', 'A', 'NP', 'RE') => ('-d', 'R', 'NP', 'RE')
('-d', 'A', 'NP', 'RE') => ('-d', 'AA', 'NP', 'RE')
('-d', 'A', 'co.NP', 'co.RE') => ('-d', 'R', 'co.NP', 'co.RE')
('-d', 'A', 'co.NP', 'co.RE') => ('-d', 'AA', 'co.NP', 'co.RE')
('-d', 'AA', 'co.NP', 'co.RE') => ('-d', 'T', 'co.NP', 'co.RE')
('-d', 'AA', 'co.NP', 'co.RE') => ('-d', 'EA', 'co.NP', 'co.RE')
('-d', 'AA', 'NP', 'RE') => ('-d', 'T', 'NP', 'RE')
('-d', 'AA', 'NP', 'RE') => ('-d', 'EA', 'NP', 'RE')
('-d', 'A', 'NP', 'co.RE') => ('-d', 'R', 'NP', 'co.RE')
('-d', 'A', 'NP', 'co.RE') => ('-d', 'AA', 'NP', 'co.RE')
('-d', 'A', 'co.NP', 'RE') => ('-d', 'R', 'co.NP', 'RE')
('-d', 'A', 'co.NP', 'RE') => ('-d', 'AA', 'co.NP', 'RE')
('-d', 'AA', 'co.NP', 'RE') => ('-d', 'T', 'co.NP', 'RE')
('-d', 'AA', 'co.NP', 'RE') => ('-d', 'EA', 'co.NP', 'RE')
('-d', 'AA', 'NP', 'co.RE') => ('-d', 'T', 'NP', 'co.RE')
('-d', 'AA', 'NP', 'co.RE') => ('-d', 'EA', 'NP', 'co.RE')
('-d', 'AA', 'NP', 'R') => ('-d', 'T', 'NP', 'R')
('-d', 'AA', 'NP', 'R') => ('-d', 'EA', 'NP', 'R')
('-d', 'AA', 'co.NP', 'R') => ('-d', 'T', 'co.NP', 'R')
('-d', 'AA', 'co.NP', 'R') => ('-d', 'EA', 'co.NP', 'R')
('-d', 'AA', 'co.NP', 'co.NEXP') => ('-d', 'T', 'co.NP', 'co.NEXP')
('-d', 'AA', 'co.NP', 'co.NEXP') => ('-d', 'EA', 'co.NP', 'co.NEXP')
('-d', 'AA', 'NP', 'NEXP') => ('-d', 'T', 'NP', 'NEXP')
('-d', 'AA', 'NP', 'NEXP') => ('-d', 'EA', 'NP', 'NEXP')
('-d', 'A', 'SBP', 'R') => ('-d', 'R', 'SBP', 'R')
('-d', 'A', 'SBP', 'R') => ('-d', 'AA', 'SBP', 'R')
('-d', 'A', 'co.SBP', 'R') => ('-d', 'R', 'co.SBP', 'R')
('-d', 'A', 'co.SBP', 'R') => ('-d', 'AA', 'co.SBP', 'R')
('-d', 'A', 'co.MA', 'R') => ('-d', 'R', 'co.MA', 'R')
('-d', 'A', 'co.MA', 'R') => ('-d', 'AA', 'co.MA', 'R')
('-d', 'A', 'MA', 'R') => ('-d', 'R', 'MA', 'R')
('-d', 'A', 'MA', 'R') => ('-d', 'AA', 'MA', 'R')
('-d', 'A', 'MA', 'RE') => ('-d', 'R', 'MA', 'RE')
('-d', 'A', 'MA', 'RE') => ('-d', 'AA', 'MA', 'RE')
('-d', 'A', 'co.MA', 'co.RE') => ('-d', 'R', 'co.MA', 'co.RE')
('-d', 'A', 'co.MA', 'co.RE') => ('-d', 'AA', 'co.MA', 'co.RE')
('-d', 'AA', 'co.MA', 'co.RE') => ('-d', 'T', 'co.MA', 'co.RE')
('-d', 'AA', 'co.MA', 'co.RE') => ('-d', 'EA', 'co.MA', 'co.RE')
('-d', 'AA', 'MA', 'RE') => ('-d', 'T', 'MA', 'RE')
('-d', 'AA', 'MA', 'RE') => ('-d', 'EA', 'MA', 'RE')
('-d', 'A', 'MA', 'co.RE') => ('-d', 'R', 'MA', 'co.RE')
('-d', 'A', 'MA', 'co.RE') => ('-d', 'AA', 'MA', 'co.RE')
('-d', 'A', 'co.MA', 'RE') => ('-d', 'R', 'co.MA', 'RE')
('-d', 'A', 'co.MA', 'RE') => ('-d', 'AA', 'co.MA', 'RE')
('-d', 'AA', 'co.MA', 'RE') => ('-d', 'T', 'co.MA', 'RE')
('-d', 'AA', 'co.MA', 'RE') => ('-d', 'EA', 'co.MA', 'RE')
('-d', 'AA', 'MA', 'co.RE') => ('-d', 'T', 'MA', 'co.RE')
('-d', 'AA', 'MA', 'co.RE') => ('-d', 'EA', 'MA', 'co.RE')
('-d', 'AA', 'MA', 'R') => ('-d', 'T', 'MA', 'R')
('-d', 'AA', 'MA', 'R') => ('-d', 'EA', 'MA', 'R')
('-d', 'AA', 'co.MA', 'R') => ('-d', 'T', 'co.MA', 'R')
('-d', 'AA', 'co.MA', 'R') => ('-d', 'EA', 'co.MA', 'R')
('-d', 'A', 'co.SBP', 'RE') => ('-d', 'R', 'co.SBP', 'RE')
('-d', 'A', 'co.SBP', 'RE') => ('-d', 'AA', 'co.SBP', 'RE')
('-d', 'A', 'SBP', 'co.RE') => ('-d', 'R', 'SBP', 'co.RE')
('-d', 'A', 'SBP', 'co.RE') => ('-d', 'AA', 'SBP', 'co.RE')
('-d', 'AA', 'SBP', 'co.RE') => ('-d', 'T', 'SBP', 'co.RE')
('-d', 'AA', 'SBP', 'co.RE') => ('-d', 'EA', 'SBP', 'co.RE')
('-d', 'AA', 'co.SBP', 'RE') => ('-d', 'T', 'co.SBP', 'RE')
('-d', 'AA', 'co.SBP', 'RE') => ('-d', 'EA', 'co.SBP', 'RE')
('-d', 'A', 'co.SBP', 'co.RE') => ('-d', 'R', 'co.SBP', 'co.RE')
('-d', 'A', 'co.SBP', 'co.RE') => ('-d', 'AA', 'co.SBP', 'co.RE')
('-d', 'A', 'SBP', 'RE') => ('-d', 'R', 'SBP', 'RE')
('-d', 'A', 'SBP', 'RE') => ('-d', 'AA', 'SBP', 'RE')
('-d', 'AA', 'SBP', 'RE') => ('-d', 'T', 'SBP', 'RE')
('-d', 'AA', 'SBP', 'RE') => ('-d', 'EA', 'SBP', 'RE')
('-d', 'AA', 'co.SBP', 'co.RE') => ('-d', 'T', 'co.SBP', 'co.RE')
('-d', 'AA', 'co.SBP', 'co.RE') => ('-d', 'EA', 'co.SBP', 'co.RE')
('-d', 'AA', 'co.SBP', 'R') => ('-d', 'T', 'co.SBP', 'R')
('-d', 'AA', 'co.SBP', 'R') => ('-d', 'EA', 'co.SBP', 'R')
('-d', 'AA', 'SBP', 'R') => ('-d', 'T', 'SBP', 'R')
('-d', 'AA', 'SBP', 'R') => ('-d', 'EA', 'SBP', 'R')
('-d', 'A', 'SBP', 'NEXP/poly') => ('-d', 'R', 'SBP', 'NEXP/poly')
('-d', 'A', 'SBP', 'NEXP/poly') => ('-d', 'AA', 'SBP', 'NEXP/poly')
('-d', 'A', 'co.SBP', 'NEXP/poly') => ('-d', 'R', 'co.SBP', 'NEXP/poly')
('-d', 'A', 'co.SBP', 'NEXP/poly') => ('-d', 'AA', 'co.SBP', 'NEXP/poly')
('-d', 'A', 'co.MA', 'NEXP/poly') => ('-d', 'R', 'co.MA', 'NEXP/poly')
('-d', 'A', 'co.MA', 'NEXP/poly') => ('-d', 'AA', 'co.MA', 'NEXP/poly')
('-d', 'A', 'MA', 'NEXP/poly') => ('-d', 'R', 'MA', 'NEXP/poly')
('-d', 'A', 'MA', 'NEXP/poly') => ('-d', 'AA', 'MA', 'NEXP/poly')
('-d', 'AA', 'MA', 'NEXP/poly') => ('-d', 'T', 'MA', 'NEXP/poly')
('-d', 'AA', 'MA', 'NEXP/poly') => ('-d', 'EA', 'MA', 'NEXP/poly')
('-d', 'AA', 'co.MA', 'NEXP/poly') => ('-d', 'T', 'co.MA', 'NEXP/poly')
('-d', 'AA', 'co.MA', 'NEXP/poly') => ('-d', 'EA', 'co.MA', 'NEXP/poly')
('-d', 'AA', 'co.SBP', 'NEXP/poly') => ('-d', 'T', 'co.SBP', 'NEXP/poly')
('-d', 'AA', 'co.SBP', 'NEXP/poly') => ('-d', 'EA', 'co.SBP', 'NEXP/poly')
('-d', 'AA', 'SBP', 'NEXP/poly') => ('-d', 'T', 'SBP', 'NEXP/poly')
('-d', 'AA', 'SBP', 'NEXP/poly') => ('-d', 'EA', 'SBP', 'NEXP/poly')
('-d', 'A', 'MA', 'NEXP') => ('-d', 'R', 'MA', 'NEXP')
('-d', 'A', 'MA', 'NEXP') => ('-d', 'AA', 'MA', 'NEXP')
('-d', 'A', 'co.MA', 'co.NEXP') => ('-d', 'R', 'co.MA', 'co.NEXP')
('-d', 'A', 'co.MA', 'co.NEXP') => ('-d', 'AA', 'co.MA', 'co.NEXP')
('-d', 'AA', 'co.MA', 'co.NEXP') => ('-d', 'T', 'co.MA', 'co.NEXP')
('-d', 'AA', 'co.MA', 'co.NEXP') => ('-d', 'EA', 'co.MA', 'co.NEXP')
('-d', 'AA', 'MA', 'NEXP') => ('-d', 'T', 'MA', 'NEXP')
('-d', 'AA', 'MA', 'NEXP') => ('-d', 'EA', 'MA', 'NEXP')
('-d', 'AA', 'SBP', 'NEXP') => ('-d', 'T', 'SBP', 'NEXP')
('-d', 'AA', 'SBP', 'NEXP') => ('-d', 'EA', 'SBP', 'NEXP')
('-d', 'AA', 'co.SBP', 'co.NEXP') => ('-d', 'T', 'co.SBP', 'co.NEXP')
('-d', 'AA', 'co.SBP', 'co.NEXP') => ('-d', 'EA', 'co.SBP', 'co.NEXP')
('p', 'A', 'co.SBP', 'co.NEXP') => ('p', 'R', 'co.SBP', 'co.NEXP')
('p', 'A', 'co.SBP', 'co.NEXP') => ('p', 'AA', 'co.SBP', 'co.NEXP')
('p', 'A', 'SBP', 'NEXP') => ('p', 'R', 'SBP', 'NEXP')
('p', 'A', 'SBP', 'NEXP') => ('p', 'AA', 'SBP', 'NEXP')
('p', 'A', 'RP', 'NEXP') => ('p', 'R', 'RP', 'NEXP')
('p', 'A', 'RP', 'NEXP') => ('p', 'AA', 'RP', 'NEXP')
('p', 'A', 'co.RP', 'co.NEXP') => ('p', 'R', 'co.RP', 'co.NEXP')
('p', 'A', 'co.RP', 'co.NEXP') => ('p', 'AA', 'co.RP', 'co.NEXP')
('p', 'A', 'co.RP', 'R') => ('p', 'R', 'co.RP', 'R')
('p', 'A', 'co.RP', 'R') => ('p', 'AA', 'co.RP', 'R')
('p', 'A', 'RP', 'R') => ('p', 'R', 'RP', 'R')
('p', 'A', 'RP', 'R') => ('p', 'AA', 'RP', 'R')
('p', 'A', 'RP', 'RE') => ('p', 'R', 'RP', 'RE')
('p', 'A', 'RP', 'RE') => ('p', 'AA', 'RP', 'RE')
('p', 'A', 'co.RP', 'co.RE') => ('p', 'R', 'co.RP', 'co.RE')
('p', 'A', 'co.RP', 'co.RE') => ('p', 'AA', 'co.RP', 'co.RE')
('p', 'AA', 'co.RP', 'co.RE') => ('p', 'T', 'co.RP', 'co.RE')
('p', 'AA', 'co.RP', 'co.RE') => ('p', 'EA', 'co.RP', 'co.RE')
('p', 'AA', 'RP', 'RE') => ('p', 'T', 'RP', 'RE')
('p', 'AA', 'RP', 'RE') => ('p', 'EA', 'RP', 'RE')
('p', 'A', 'RP', 'co.RE') => ('p', 'R', 'RP', 'co.RE')
('p', 'A', 'RP', 'co.RE') => ('p', 'AA', 'RP', 'co.RE')
('p', 'A', 'co.RP', 'RE') => ('p', 'R', 'co.RP', 'RE')
('p', 'A', 'co.RP', 'RE') => ('p', 'AA', 'co.RP', 'RE')
('p', 'AA', 'co.RP', 'RE') => ('p', 'T', 'co.RP', 'RE')
('p', 'AA', 'co.RP', 'RE') => ('p', 'EA', 'co.RP', 'RE')
('p', 'AA', 'co.RP', 'R') => ('p', 'T', 'co.RP', 'R')
('p', 'AA', 'co.RP', 'R') => ('p', 'EA', 'co.RP', 'R')
('p', 'AA', 'RP', 'R') => ('p', 'T', 'RP', 'R')
('p', 'AA', 'RP', 'R') => ('p', 'EA', 'RP', 'R')
('p', 'AA', 'RP', 'co.RE') => ('p', 'T', 'RP', 'co.RE')
('p', 'AA', 'RP', 'co.RE') => ('p', 'EA', 'RP', 'co.RE')
('p', 'AA', 'co.RP', 'co.NEXP') => ('p', 'T', 'co.RP', 'co.NEXP')
('p', 'AA', 'co.RP', 'co.NEXP') => ('p', 'EA', 'co.RP', 'co.NEXP')
('p', 'AA', 'RP', 'NEXP') => ('p', 'T', 'RP', 'NEXP')
('p', 'AA', 'RP', 'NEXP') => ('p', 'EA', 'RP', 'NEXP')
('p', 'A', 'NP', 'NEXP') => ('p', 'R', 'NP', 'NEXP')
('p', 'A', 'NP', 'NEXP') => ('p', 'AA', 'NP', 'NEXP')
('p', 'A', 'co.NP', 'co.NEXP') => ('p', 'R', 'co.NP', 'co.NEXP')
('p', 'A', 'co.NP', 'co.NEXP') => ('p', 'AA', 'co.NP', 'co.NEXP')
('p', 'A', 'co.NP', 'R') => ('p', 'R', 'co.NP', 'R')
('p', 'A', 'co.NP', 'R') => ('p', 'AA', 'co.NP', 'R')
('p', 'A', 'NP', 'R') => ('p', 'R', 'NP', 'R')
('p', 'A', 'NP', 'R') => ('p', 'AA', 'NP', 'R')
('p', 'A', 'NP', 'RE') => ('p', 'R', 'NP', 'RE')
('p', 'A', 'NP', 'RE') => ('p', 'AA', 'NP', 'RE')
('p', 'A', 'co.NP', 'co.RE') => ('p', 'R', 'co.NP', 'co.RE')
('p', 'A', 'co.NP', 'co.RE') => ('p', 'AA', 'co.NP', 'co.RE')
('p', 'AA', 'co.NP', 'co.RE') => ('p', 'T', 'co.NP', 'co.RE')
('p', 'AA', 'co.NP', 'co.RE') => ('p', 'EA', 'co.NP', 'co.RE')
('p', 'AA', 'NP', 'RE') => ('p', 'T', 'NP', 'RE')
('p', 'AA', 'NP', 'RE') => ('p', 'EA', 'NP', 'RE')
('p', 'A', 'NP', 'co.RE') => ('p', 'R', 'NP', 'co.RE')
('p', 'A', 'NP', 'co.RE') => ('p', 'AA', 'NP', 'co.RE')
('p', 'A', 'co.NP', 'RE') => ('p', 'R', 'co.NP', 'RE')
('p', 'A', 'co.NP', 'RE') => ('p', 'AA', 'co.NP', 'RE')
('p', 'AA', 'co.NP', 'RE') => ('p', 'T', 'co.NP', 'RE')
('p', 'AA', 'co.NP', 'RE') => ('p', 'EA', 'co.NP', 'RE')
('p', 'AA', 'co.NP', 'R') => ('p', 'T', 'co.NP', 'R')
('p', 'AA', 'co.NP', 'R') => ('p', 'EA', 'co.NP', 'R')
('p', 'AA', 'NP', 'R') => ('p', 'T', 'NP', 'R')
('p', 'AA', 'NP', 'R') => ('p', 'EA', 'NP', 'R')
('p', 'AA', 'NP', 'co.RE') => ('p', 'T', 'NP', 'co.RE')
('p', 'AA', 'NP', 'co.RE') => ('p', 'EA', 'NP', 'co.RE')
('p', 'AA', 'co.NP', 'co.NEXP') => ('p', 'T', 'co.NP', 'co.NEXP')
('p', 'AA', 'co.NP', 'co.NEXP') => ('p', 'EA', 'co.NP', 'co.NEXP')
('p', 'AA', 'NP', 'NEXP') => ('p', 'T', 'NP', 'NEXP')
('p', 'AA', 'NP', 'NEXP') => ('p', 'EA', 'NP', 'NEXP')
('p', 'A', 'SBP', 'R') => ('p', 'R', 'SBP', 'R')
('p', 'A', 'SBP', 'R') => ('p', 'AA', 'SBP', 'R')
('p', 'A', 'co.SBP', 'R') => ('p', 'R', 'co.SBP', 'R')
('p', 'A', 'co.SBP', 'R') => ('p', 'AA', 'co.SBP', 'R')
('p', 'A', 'co.MA', 'R') => ('p', 'R', 'co.MA', 'R')
('p', 'A', 'co.MA', 'R') => ('p', 'AA', 'co.MA', 'R')
('p', 'A', 'MA', 'R') => ('p', 'R', 'MA', 'R')
('p', 'A', 'MA', 'R') => ('p', 'AA', 'MA', 'R')
('p', 'A', 'MA', 'RE') => ('p', 'R', 'MA', 'RE')
('p', 'A', 'MA', 'RE') => ('p', 'AA', 'MA', 'RE')
('p', 'A', 'co.MA', 'co.RE') => ('p', 'R', 'co.MA', 'co.RE')
('p', 'A', 'co.MA', 'co.RE') => ('p', 'AA', 'co.MA', 'co.RE')
('p', 'AA', 'co.MA', 'co.RE') => ('p', 'T', 'co.MA', 'co.RE')
('p', 'AA', 'co.MA', 'co.RE') => ('p', 'EA', 'co.MA', 'co.RE')
('p', 'AA', 'MA', 'RE') => ('p', 'T', 'MA', 'RE')
('p', 'AA', 'MA', 'RE') => ('p', 'EA', 'MA', 'RE')
('p', 'A', 'MA', 'co.RE') => ('p', 'R', 'MA', 'co.RE')
('p', 'A', 'MA', 'co.RE') => ('p', 'AA', 'MA', 'co.RE')
('p', 'A', 'co.MA', 'RE') => ('p', 'R', 'co.MA', 'RE')
('p', 'A', 'co.MA', 'RE') => ('p', 'AA', 'co.MA', 'RE')
('p', 'AA', 'co.MA', 'RE') => ('p', 'T', 'co.MA', 'RE')
('p', 'AA', 'co.MA', 'RE') => ('p', 'EA', 'co.MA', 'RE')
('p', 'AA', 'co.MA', 'R') => ('p', 'T', 'co.MA', 'R')
('p', 'AA', 'co.MA', 'R') => ('p', 'EA', 'co.MA', 'R')
('p', 'AA', 'MA', 'R') => ('p', 'T', 'MA', 'R')
('p', 'AA', 'MA', 'R') => ('p', 'EA', 'MA', 'R')
('p', 'AA', 'MA', 'co.RE') => ('p', 'T', 'MA', 'co.RE')
('p', 'AA', 'MA', 'co.RE') => ('p', 'EA', 'MA', 'co.RE')
('p', 'A', 'co.SBP', 'RE') => ('p', 'R', 'co.SBP', 'RE')
('p', 'A', 'co.SBP', 'RE') => ('p', 'AA', 'co.SBP', 'RE')
('p', 'A', 'SBP', 'co.RE') => ('p', 'R', 'SBP', 'co.RE')
('p', 'A', 'SBP', 'co.RE') => ('p', 'AA', 'SBP', 'co.RE')
('p', 'AA', 'SBP', 'co.RE') => ('p', 'T', 'SBP', 'co.RE')
('p', 'AA', 'SBP', 'co.RE') => ('p', 'EA', 'SBP', 'co.RE')
('p', 'AA', 'co.SBP', 'RE') => ('p', 'T', 'co.SBP', 'RE')
('p', 'AA', 'co.SBP', 'RE') => ('p', 'EA', 'co.SBP', 'RE')
('p', 'A', 'co.SBP', 'co.RE') => ('p', 'R', 'co.SBP', 'co.RE')
('p', 'A', 'co.SBP', 'co.RE') => ('p', 'AA', 'co.SBP', 'co.RE')
('p', 'A', 'SBP', 'RE') => ('p', 'R', 'SBP', 'RE')
('p', 'A', 'SBP', 'RE') => ('p', 'AA', 'SBP', 'RE')
('p', 'AA', 'SBP', 'RE') => ('p', 'T', 'SBP', 'RE')
('p', 'AA', 'SBP', 'RE') => ('p', 'EA', 'SBP', 'RE')
('p', 'AA', 'SBP', 'R') => ('p', 'T', 'SBP', 'R')
('p', 'AA', 'SBP', 'R') => ('p', 'EA', 'SBP', 'R')
('p', 'AA', 'co.SBP', 'R') => ('p', 'T', 'co.SBP', 'R')
('p', 'AA', 'co.SBP', 'R') => ('p', 'EA', 'co.SBP', 'R')
('p', 'AA', 'co.SBP', 'co.RE') => ('p', 'T', 'co.SBP', 'co.RE')
('p', 'AA', 'co.SBP', 'co.RE') => ('p', 'EA', 'co.SBP', 'co.RE')
('p', 'A', 'SBP', 'NEXP/poly') => ('p', 'R', 'SBP', 'NEXP/poly')
('p', 'A', 'SBP', 'NEXP/poly') => ('p', 'AA', 'SBP', 'NEXP/poly')
('p', 'A', 'co.SBP', 'NEXP/poly') => ('p', 'R', 'co.SBP', 'NEXP/poly')
('p', 'A', 'co.SBP', 'NEXP/poly') => ('p', 'AA', 'co.SBP', 'NEXP/poly')
('p', 'A', 'co.MA', 'NEXP/poly') => ('p', 'R', 'co.MA', 'NEXP/poly')
('p', 'A', 'co.MA', 'NEXP/poly') => ('p', 'AA', 'co.MA', 'NEXP/poly')
('p', 'A', 'MA', 'NEXP/poly') => ('p', 'R', 'MA', 'NEXP/poly')
('p', 'A', 'MA', 'NEXP/poly') => ('p', 'AA', 'MA', 'NEXP/poly')
('p', 'AA', 'MA', 'NEXP/poly') => ('p', 'T', 'MA', 'NEXP/poly')
('p', 'AA', 'MA', 'NEXP/poly') => ('p', 'EA', 'MA', 'NEXP/poly')
('p', 'AA', 'co.MA', 'NEXP/poly') => ('p', 'T', 'co.MA', 'NEXP/poly')
('p', 'AA', 'co.MA', 'NEXP/poly') => ('p', 'EA', 'co.MA', 'NEXP/poly')
('p', 'AA', 'co.SBP', 'NEXP/poly') => ('p', 'T', 'co.SBP', 'NEXP/poly')
('p', 'AA', 'co.SBP', 'NEXP/poly') => ('p', 'EA', 'co.SBP', 'NEXP/poly')
('p', 'AA', 'SBP', 'NEXP/poly') => ('p', 'T', 'SBP', 'NEXP/poly')
('p', 'AA', 'SBP', 'NEXP/poly') => ('p', 'EA', 'SBP', 'NEXP/poly')
('p', 'A', 'MA', 'NEXP') => ('p', 'R', 'MA', 'NEXP')
('p', 'A', 'MA', 'NEXP') => ('p', 'AA', 'MA', 'NEXP')
('p', 'A', 'co.MA', 'co.NEXP') => ('p', 'R', 'co.MA', 'co.NEXP')
('p', 'A', 'co.MA', 'co.NEXP') => ('p', 'AA', 'co.MA', 'co.NEXP')
('p', 'AA', 'co.MA', 'co.NEXP') => ('p', 'T', 'co.MA', 'co.NEXP')
('p', 'AA', 'co.MA', 'co.NEXP') => ('p', 'EA', 'co.MA', 'co.NEXP')
('p', 'AA', 'MA', 'NEXP') => ('p', 'T', 'MA', 'NEXP')
('p', 'AA', 'MA', 'NEXP') => ('p', 'EA', 'MA', 'NEXP')
('p', 'AA', 'SBP', 'NEXP') => ('p', 'T', 'SBP', 'NEXP')
('p', 'AA', 'SBP', 'NEXP') => ('p', 'EA', 'SBP', 'NEXP')
('p', 'AA', 'co.SBP', 'co.NEXP') => ('p', 'T', 'co.SBP', 'co.NEXP')
('p', 'AA', 'co.SBP', 'co.NEXP') => ('p', 'EA', 'co.SBP', 'co.NEXP')
('p', 'A', 'co.MA', 'co.AM') => ('-d', 'A', 'co.MA', 'co.AM')
('p', 'A', 'co.MA', 'co.AM') => ('p', 'R', 'co.MA', 'co.AM')
('p', 'A', 'co.MA', 'co.AM') => ('p', 'AA', 'co.MA', 'co.AM')
('p', 'A', 'MA', 'AM') => ('-d', 'A', 'MA', 'AM')
('p', 'A', 'MA', 'AM') => ('p', 'R', 'MA', 'AM')
('p', 'A', 'MA', 'AM') => ('p', 'AA', 'MA', 'AM')
('p', 'A', 'RP', 'AM') => ('-d', 'A', 'RP', 'AM')
('p', 'A', 'RP', 'AM') => ('p', 'R', 'RP', 'AM')
('p', 'A', 'RP', 'AM') => ('p', 'AA', 'RP', 'AM')
('p', 'A', 'co.RP', 'co.AM') => ('-d', 'A', 'co.RP', 'co.AM')
('p', 'A', 'co.RP', 'co.AM') => ('p', 'R', 'co.RP', 'co.AM')
('p', 'A', 'co.RP', 'co.AM') => ('p', 'AA', 'co.RP', 'co.AM')
('-d', 'A', 'co.RP', 'co.NEXP_plo') => ('-d', 'R', 'co.RP', 'co.NEXP_plo')
('-d', 'A', 'co.RP', 'co.NEXP_plo') => ('-d', 'AA', 'co.RP', 'co.NEXP_plo')
('-d', 'A', 'RP', 'NEXP_plo') => ('-d', 'R', 'RP', 'NEXP_plo')
('-d', 'A', 'RP', 'NEXP_plo') => ('-d', 'AA', 'RP', 'NEXP_plo')
('-d', 'A', 'RP', 'AH_plo') => ('-d', 'R', 'RP', 'AH_plo')
('-d', 'A', 'RP', 'AH_plo') => ('-d', 'AA', 'RP', 'AH_plo')
('-d', 'A', 'co.RP', 'co.AH_plo') => ('-d', 'R', 'co.RP', 'co.AH_plo')
('-d', 'A', 'co.RP', 'co.AH_plo') => ('-d', 'AA', 'co.RP', 'co.AH_plo')
('-d', 'AA', 'co.RP', 'co.AH_plo') => ('-d', 'T', 'co.RP', 'co.AH_plo')
('-d', 'AA', 'co.RP', 'co.AH_plo') => ('-d', 'EA', 'co.RP', 'co.AH_plo')
('-d', 'AA', 'RP', 'AH_plo') => ('-d', 'T', 'RP', 'AH_plo')
('-d', 'AA', 'RP', 'AH_plo') => ('-d', 'EA', 'RP', 'AH_plo')
('-d', 'AA', 'RP', 'NEXP_plo') => ('-d', 'T', 'RP', 'NEXP_plo')
('-d', 'AA', 'RP', 'NEXP_plo') => ('-d', 'EA', 'RP', 'NEXP_plo')
('-d', 'AA', 'co.RP', 'co.NEXP_plo') => ('-d', 'T', 'co.RP', 'co.NEXP_plo')
('-d', 'AA', 'co.RP', 'co.NEXP_plo') => ('-d', 'EA', 'co.RP', 'co.NEXP_plo')
('p', 'A', 'co.RP', 'co.NEXP_plo') => ('p', 'R', 'co.RP', 'co.NEXP_plo')
('p', 'A', 'co.RP', 'co.NEXP_plo') => ('p', 'AA', 'co.RP', 'co.NEXP_plo')
('p', 'A', 'RP', 'NEXP_plo') => ('p', 'R', 'RP', 'NEXP_plo')
('p', 'A', 'RP', 'NEXP_plo') => ('p', 'AA', 'RP', 'NEXP_plo')
('p', 'A', 'RP', 'AH_plo') => ('p', 'R', 'RP', 'AH_plo')
('p', 'A', 'RP', 'AH_plo') => ('p', 'AA', 'RP', 'AH_plo')
('p', 'A', 'co.RP', 'co.AH_plo') => ('p', 'R', 'co.RP', 'co.AH_plo')
('p', 'A', 'co.RP', 'co.AH_plo') => ('p', 'AA', 'co.RP', 'co.AH_plo')
('p', 'AA', 'co.RP', 'co.AH_plo') => ('p', 'T', 'co.RP', 'co.AH_plo')
('p', 'AA', 'co.RP', 'co.AH_plo') => ('p', 'EA', 'co.RP', 'co.AH_plo')
('p', 'AA', 'RP', 'AH_plo') => ('p', 'T', 'RP', 'AH_plo')
('p', 'AA', 'RP', 'AH_plo') => ('p', 'EA', 'RP', 'AH_plo')
('p', 'AA', 'RP', 'NEXP_plo') => ('p', 'T', 'RP', 'NEXP_plo')
('p', 'AA', 'RP', 'NEXP_plo') => ('p', 'EA', 'RP', 'NEXP_plo')
('p', 'AA', 'co.RP', 'co.NEXP_plo') => ('p', 'T', 'co.RP', 'co.NEXP_plo')
('p', 'AA', 'co.RP', 'co.NEXP_plo') => ('p', 'EA', 'co.RP', 'co.NEXP_plo')
('-d', 'A', 'co.RP', 'PSPACE') => ('-d', 'R', 'co.RP', 'PSPACE')
('-d', 'A', 'co.RP', 'PSPACE') => ('-d', 'AA', 'co.RP', 'PSPACE')
('-d', 'A', 'RP', 'PSPACE') => ('-d', 'R', 'RP', 'PSPACE')
('-d', 'A', 'RP', 'PSPACE') => ('-d', 'AA', 'RP', 'PSPACE')
('-d', 'AA', 'RP', 'PSPACE') => ('-d', 'T', 'RP', 'PSPACE')
('-d', 'AA', 'RP', 'PSPACE') => ('-d', 'EA', 'RP', 'PSPACE')
('-d', 'AA', 'co.RP', 'PSPACE') => ('-d', 'T', 'co.RP', 'PSPACE')
('-d', 'AA', 'co.RP', 'PSPACE') => ('-d', 'EA', 'co.RP', 'PSPACE')
('p', 'A', 'co.RP', 'PSPACE') => ('p', 'R', 'co.RP', 'PSPACE')
('p', 'A', 'co.RP', 'PSPACE') => ('p', 'AA', 'co.RP', 'PSPACE')
('p', 'A', 'RP', 'PSPACE') => ('p', 'R', 'RP', 'PSPACE')
('p', 'A', 'RP', 'PSPACE') => ('p', 'AA', 'RP', 'PSPACE')
('p', 'AA', 'RP', 'PSPACE') => ('p', 'T', 'RP', 'PSPACE')
('p', 'AA', 'RP', 'PSPACE') => ('p', 'EA', 'RP', 'PSPACE')
('p', 'AA', 'co.RP', 'PSPACE') => ('p', 'T', 'co.RP', 'PSPACE')
('p', 'AA', 'co.RP', 'PSPACE') => ('p', 'EA', 'co.RP', 'PSPACE')
('-d', 'A', 'co.RP', 'co.QMIP_cme') => ('-d', 'R', 'co.RP', 'co.QMIP_cme')
('-d', 'A', 'co.RP', 'co.QMIP_cme') => ('-d', 'AA', 'co.RP', 'co.QMIP_cme')
('-d', 'A', 'RP', 'QMIP_cme') => ('-d', 'R', 'RP', 'QMIP_cme')
('-d', 'A', 'RP', 'QMIP_cme') => ('-d', 'AA', 'RP', 'QMIP_cme')
('-d', 'AA', 'RP', 'QMIP_cme') => ('-d', 'T', 'RP', 'QMIP_cme')
('-d', 'AA', 'RP', 'QMIP_cme') => ('-d', 'EA', 'RP', 'QMIP_cme')
('-d', 'AA', 'co.RP', 'co.QMIP_cme') => ('-d', 'T', 'co.RP', 'co.QMIP_cme')
('-d', 'AA', 'co.RP', 'co.QMIP_cme') => ('-d', 'EA', 'co.RP', 'co.QMIP_cme')
('p', 'A', 'co.RP', 'co.QMIP_cme') => ('p', 'R', 'co.RP', 'co.QMIP_cme')
('p', 'A', 'co.RP', 'co.QMIP_cme') => ('p', 'AA', 'co.RP', 'co.QMIP_cme')
('p', 'A', 'RP', 'QMIP_cme') => ('p', 'R', 'RP', 'QMIP_cme')
('p', 'A', 'RP', 'QMIP_cme') => ('p', 'AA', 'RP', 'QMIP_cme')
('p', 'AA', 'RP', 'QMIP_cme') => ('p', 'T', 'RP', 'QMIP_cme')
('p', 'AA', 'RP', 'QMIP_cme') => ('p', 'EA', 'RP', 'QMIP_cme')
('p', 'AA', 'co.RP', 'co.QMIP_cme') => ('p', 'T', 'co.RP', 'co.QMIP_cme')
('p', 'AA', 'co.RP', 'co.QMIP_cme') => ('p', 'EA', 'co.RP', 'co.QMIP_cme')
('-d', 'A', 'co.RP', 'co.QIP') => ('-d', 'R', 'co.RP', 'co.QIP')
('-d', 'A', 'co.RP', 'co.QIP') => ('-d', 'AA', 'co.RP', 'co.QIP')
('-d', 'A', 'RP', 'QIP') => ('-d', 'R', 'RP', 'QIP')
('-d', 'A', 'RP', 'QIP') => ('-d', 'AA', 'RP', 'QIP')
('-d', 'A', 'RP', 'QMIP_ne') => ('-d', 'R', 'RP', 'QMIP_ne')
('-d', 'A', 'RP', 'QMIP_ne') => ('-d', 'AA', 'RP', 'QMIP_ne')
('-d', 'A', 'co.RP', 'co.QMIP_ne') => ('-d', 'R', 'co.RP', 'co.QMIP_ne')
('-d', 'A', 'co.RP', 'co.QMIP_ne') => ('-d', 'AA', 'co.RP', 'co.QMIP_ne')
('-d', 'AA', 'co.RP', 'co.QMIP_ne') => ('-d', 'T', 'co.RP', 'co.QMIP_ne')
('-d', 'AA', 'co.RP', 'co.QMIP_ne') => ('-d', 'EA', 'co.RP', 'co.QMIP_ne')
('-d', 'AA', 'RP', 'QMIP_ne') => ('-d', 'T', 'RP', 'QMIP_ne')
('-d', 'AA', 'RP', 'QMIP_ne') => ('-d', 'EA', 'RP', 'QMIP_ne')
('-d', 'AA', 'RP', 'QIP') => ('-d', 'T', 'RP', 'QIP')
('-d', 'AA', 'RP', 'QIP') => ('-d', 'EA', 'RP', 'QIP')
('-d', 'AA', 'co.RP', 'co.QIP') => ('-d', 'T', 'co.RP', 'co.QIP')
('-d', 'AA', 'co.RP', 'co.QIP') => ('-d', 'EA', 'co.RP', 'co.QIP')
('p', 'A', 'co.RP', 'co.QIP') => ('p', 'R', 'co.RP', 'co.QIP')
('p', 'A', 'co.RP', 'co.QIP') => ('p', 'AA', 'co.RP', 'co.QIP')
('p', 'A', 'RP', 'QIP') => ('p', 'R', 'RP', 'QIP')
('p', 'A', 'RP', 'QIP') => ('p', 'AA', 'RP', 'QIP')
('p', 'A', 'RP', 'QMIP_ne') => ('p', 'R', 'RP', 'QMIP_ne')
('p', 'A', 'RP', 'QMIP_ne') => ('p', 'AA', 'RP', 'QMIP_ne')
('p', 'A', 'co.RP', 'co.QMIP_ne') => ('p', 'R', 'co.RP', 'co.QMIP_ne')
('p', 'A', 'co.RP', 'co.QMIP_ne') => ('p', 'AA', 'co.RP', 'co.QMIP_ne')
('p', 'AA', 'co.RP', 'co.QMIP_ne') => ('p', 'T', 'co.RP', 'co.QMIP_ne')
('p', 'AA', 'co.RP', 'co.QMIP_ne') => ('p', 'EA', 'co.RP', 'co.QMIP_ne')
('p', 'AA', 'RP', 'QMIP_ne') => ('p', 'T', 'RP', 'QMIP_ne')
('p', 'AA', 'RP', 'QMIP_ne') => ('p', 'EA', 'RP', 'QMIP_ne')
('p', 'AA', 'RP', 'QIP') => ('p', 'T', 'RP', 'QIP')
('p', 'AA', 'RP', 'QIP') => ('p', 'EA', 'RP', 'QIP')
('p', 'AA', 'co.RP', 'co.QIP') => ('p', 'T', 'co.RP', 'co.QIP')
('p', 'AA', 'co.RP', 'co.QIP') => ('p', 'EA', 'co.RP', 'co.QIP')
('-d', 'A', 'co.RP', 'co.MIP') => ('-d', 'R', 'co.RP', 'co.MIP')
('-d', 'A', 'co.RP', 'co.MIP') => ('-d', 'AA', 'co.RP', 'co.MIP')
('-d', 'A', 'RP', 'MIP') => ('-d', 'R', 'RP', 'MIP')
('-d', 'A', 'RP', 'MIP') => ('-d', 'AA', 'RP', 'MIP')
('-d', 'AA', 'RP', 'MIP') => ('-d', 'T', 'RP', 'MIP')
('-d', 'AA', 'RP', 'MIP') => ('-d', 'EA', 'RP', 'MIP')
('-d', 'AA', 'co.RP', 'co.MIP') => ('-d', 'T', 'co.RP', 'co.MIP')
('-d', 'AA', 'co.RP', 'co.MIP') => ('-d', 'EA', 'co.RP', 'co.MIP')
('p', 'A', 'co.RP', 'co.MIP') => ('p', 'R', 'co.RP', 'co.MIP')
('p', 'A', 'co.RP', 'co.MIP') => ('p', 'AA', 'co.RP', 'co.MIP')
('p', 'A', 'RP', 'MIP') => ('p', 'R', 'RP', 'MIP')
('p', 'A', 'RP', 'MIP') => ('p', 'AA', 'RP', 'MIP')
('p', 'AA', 'RP', 'MIP') => ('p', 'T', 'RP', 'MIP')
('p', 'AA', 'RP', 'MIP') => ('p', 'EA', 'RP', 'MIP')
('p', 'AA', 'co.RP', 'co.MIP') => ('p', 'T', 'co.RP', 'co.MIP')
('p', 'AA', 'co.RP', 'co.MIP') => ('p', 'EA', 'co.RP', 'co.MIP')
('-d', 'A', 'co.RP', 'co.MIP*_cme') => ('-d', 'R', 'co.RP', 'co.MIP*_cme')
('-d', 'A', 'co.RP', 'co.MIP*_cme') => ('-d', 'AA', 'co.RP', 'co.MIP*_cme')
('-d', 'A', 'RP', 'MIP*_cme') => ('-d', 'R', 'RP', 'MIP*_cme')
('-d', 'A', 'RP', 'MIP*_cme') => ('-d', 'AA', 'RP', 'MIP*_cme')
('-d', 'AA', 'RP', 'MIP*_cme') => ('-d', 'T', 'RP', 'MIP*_cme')
('-d', 'AA', 'RP', 'MIP*_cme') => ('-d', 'EA', 'RP', 'MIP*_cme')
('-d', 'AA', 'co.RP', 'co.MIP*_cme') => ('-d', 'T', 'co.RP', 'co.MIP*_cme')
('-d', 'AA', 'co.RP', 'co.MIP*_cme') => ('-d', 'EA', 'co.RP', 'co.MIP*_cme')
('p', 'A', 'co.RP', 'co.MIP*_cme') => ('p', 'R', 'co.RP', 'co.MIP*_cme')
('p', 'A', 'co.RP', 'co.MIP*_cme') => ('p', 'AA', 'co.RP', 'co.MIP*_cme')
('p', 'A', 'RP', 'MIP*_cme') => ('p', 'R', 'RP', 'MIP*_cme')
('p', 'A', 'RP', 'MIP*_cme') => ('p', 'AA', 'RP', 'MIP*_cme')
('p', 'AA', 'RP', 'MIP*_cme') => ('p', 'T', 'RP', 'MIP*_cme')
('p', 'AA', 'RP', 'MIP*_cme') => ('p', 'EA', 'RP', 'MIP*_cme')
('p', 'AA', 'co.RP', 'co.MIP*_cme') => ('p', 'T', 'co.RP', 'co.MIP*_cme')
('p', 'AA', 'co.RP', 'co.MIP*_cme') => ('p', 'EA', 'co.RP', 'co.MIP*_cme')
('-d', 'A', 'co.RP', 'co.IP') => ('-d', 'R', 'co.RP', 'co.IP')
('-d', 'A', 'co.RP', 'co.IP') => ('-d', 'AA', 'co.RP', 'co.IP')
('-d', 'A', 'RP', 'IP') => ('-d', 'R', 'RP', 'IP')
('-d', 'A', 'RP', 'IP') => ('-d', 'AA', 'RP', 'IP')
('-d', 'AA', 'RP', 'IP') => ('-d', 'T', 'RP', 'IP')
('-d', 'AA', 'RP', 'IP') => ('-d', 'EA', 'RP', 'IP')
('-d', 'AA', 'co.RP', 'co.IP') => ('-d', 'T', 'co.RP', 'co.IP')
('-d', 'AA', 'co.RP', 'co.IP') => ('-d', 'EA', 'co.RP', 'co.IP')
('p', 'A', 'co.RP', 'co.IP') => ('p', 'R', 'co.RP', 'co.IP')
('p', 'A', 'co.RP', 'co.IP') => ('p', 'AA', 'co.RP', 'co.IP')
('p', 'A', 'RP', 'IP') => ('p', 'R', 'RP', 'IP')
('p', 'A', 'RP', 'IP') => ('p', 'AA', 'RP', 'IP')
('p', 'AA', 'RP', 'IP') => ('p', 'T', 'RP', 'IP')
('p', 'AA', 'RP', 'IP') => ('p', 'EA', 'RP', 'IP')
('p', 'AA', 'co.RP', 'co.IP') => ('p', 'T', 'co.RP', 'co.IP')
('p', 'AA', 'co.RP', 'co.IP') => ('p', 'EA', 'co.RP', 'co.IP')
('p', 'AA', 'co.RP', 'co.AM') => ('-d', 'AA', 'co.RP', 'co.AM')
('p', 'AA', 'co.RP', 'co.AM') => ('p', 'T', 'co.RP', 'co.AM')
('p', 'AA', 'co.RP', 'co.AM') => ('p', 'EA', 'co.RP', 'co.AM')
('p', 'AA', 'RP', 'AM') => ('-d', 'AA', 'RP', 'AM')
('p', 'AA', 'RP', 'AM') => ('p', 'T', 'RP', 'AM')
('p', 'AA', 'RP', 'AM') => ('p', 'EA', 'RP', 'AM')
('p', 'EA', 'RP', 'AM') => ('-d', 'EA', 'RP', 'AM')
('p', 'EA', 'co.RP', 'co.AM') => ('-d', 'EA', 'co.RP', 'co.AM')
('p', 'T', 'RP', 'AM') => ('-d', 'T', 'RP', 'AM')
('p', 'T', 'co.RP', 'co.AM') => ('-d', 'T', 'co.RP', 'co.AM')
('p', 'R', 'co.RP', 'co.AM') => ('-d', 'R', 'co.RP', 'co.AM')
('p', 'R', 'RP', 'AM') => ('-d', 'R', 'RP', 'AM')
('-d', 'A', 'MA', 'QMIP_cme') => ('-d', 'R', 'MA', 'QMIP_cme')
('-d', 'A', 'MA', 'QMIP_cme') => ('-d', 'AA', 'MA', 'QMIP_cme')
('-d', 'A', 'co.MA', 'co.QMIP_cme') => ('-d', 'R', 'co.MA', 'co.QMIP_cme')
('-d', 'A', 'co.MA', 'co.QMIP_cme') => ('-d', 'AA', 'co.MA', 'co.QMIP_cme')
('-d', 'A', 'co.NP', 'co.QMIP_cme') => ('-d', 'R', 'co.NP', 'co.QMIP_cme')
('-d', 'A', 'co.NP', 'co.QMIP_cme') => ('-d', 'AA', 'co.NP', 'co.QMIP_cme')
('-d', 'A', 'NP', 'QMIP_cme') => ('-d', 'R', 'NP', 'QMIP_cme')
('-d', 'A', 'NP', 'QMIP_cme') => ('-d', 'AA', 'NP', 'QMIP_cme')
('-d', 'AA', 'NP', 'QMIP_cme') => ('-d', 'T', 'NP', 'QMIP_cme')
('-d', 'AA', 'NP', 'QMIP_cme') => ('-d', 'EA', 'NP', 'QMIP_cme')
('-d', 'AA', 'co.NP', 'co.QMIP_cme') => ('-d', 'T', 'co.NP', 'co.QMIP_cme')
('-d', 'AA', 'co.NP', 'co.QMIP_cme') => ('-d', 'EA', 'co.NP', 'co.QMIP_cme')
('-d', 'AA', 'co.MA', 'co.QMIP_cme') => ('-d', 'T', 'co.MA', 'co.QMIP_cme')
('-d', 'AA', 'co.MA', 'co.QMIP_cme') => ('-d', 'EA', 'co.MA', 'co.QMIP_cme')
('-d', 'AA', 'MA', 'QMIP_cme') => ('-d', 'T', 'MA', 'QMIP_cme')
('-d', 'AA', 'MA', 'QMIP_cme') => ('-d', 'EA', 'MA', 'QMIP_cme')
('p', 'A', 'MA', 'QMIP_cme') => ('p', 'R', 'MA', 'QMIP_cme')
('p', 'A', 'MA', 'QMIP_cme') => ('p', 'AA', 'MA', 'QMIP_cme')
('p', 'A', 'co.MA', 'co.QMIP_cme') => ('p', 'R', 'co.MA', 'co.QMIP_cme')
('p', 'A', 'co.MA', 'co.QMIP_cme') => ('p', 'AA', 'co.MA', 'co.QMIP_cme')
('p', 'A', 'co.NP', 'co.QMIP_cme') => ('p', 'R', 'co.NP', 'co.QMIP_cme')
('p', 'A', 'co.NP', 'co.QMIP_cme') => ('p', 'AA', 'co.NP', 'co.QMIP_cme')
('p', 'A', 'NP', 'QMIP_cme') => ('p', 'R', 'NP', 'QMIP_cme')
('p', 'A', 'NP', 'QMIP_cme') => ('p', 'AA', 'NP', 'QMIP_cme')
('p', 'AA', 'NP', 'QMIP_cme') => ('p', 'T', 'NP', 'QMIP_cme')
('p', 'AA', 'NP', 'QMIP_cme') => ('p', 'EA', 'NP', 'QMIP_cme')
('p', 'AA', 'co.NP', 'co.QMIP_cme') => ('p', 'T', 'co.NP', 'co.QMIP_cme')
('p', 'AA', 'co.NP', 'co.QMIP_cme') => ('p', 'EA', 'co.NP', 'co.QMIP_cme')
('p', 'AA', 'co.MA', 'co.QMIP_cme') => ('p', 'T', 'co.MA', 'co.QMIP_cme')
('p', 'AA', 'co.MA', 'co.QMIP_cme') => ('p', 'EA', 'co.MA', 'co.QMIP_cme')
('p', 'AA', 'MA', 'QMIP_cme') => ('p', 'T', 'MA', 'QMIP_cme')
('p', 'AA', 'MA', 'QMIP_cme') => ('p', 'EA', 'MA', 'QMIP_cme')
('p', 'A', 'NP', 'AM') => ('-d', 'A', 'NP', 'AM')
('p', 'A', 'NP', 'AM') => ('p', 'R', 'NP', 'AM')
('p', 'A', 'NP', 'AM') => ('p', 'AA', 'NP', 'AM')
('p', 'A', 'co.NP', 'co.AM') => ('-d', 'A', 'co.NP', 'co.AM')
('p', 'A', 'co.NP', 'co.AM') => ('p', 'R', 'co.NP', 'co.AM')
('p', 'A', 'co.NP', 'co.AM') => ('p', 'AA', 'co.NP', 'co.AM')
('-d', 'A', 'co.NP', 'co.NEXP_plo') => ('-d', 'R', 'co.NP', 'co.NEXP_plo')
('-d', 'A', 'co.NP', 'co.NEXP_plo') => ('-d', 'AA', 'co.NP', 'co.NEXP_plo')
('-d', 'A', 'NP', 'NEXP_plo') => ('-d', 'R', 'NP', 'NEXP_plo')
('-d', 'A', 'NP', 'NEXP_plo') => ('-d', 'AA', 'NP', 'NEXP_plo')
('-d', 'A', 'NP', 'AH_plo') => ('-d', 'R', 'NP', 'AH_plo')
('-d', 'A', 'NP', 'AH_plo') => ('-d', 'AA', 'NP', 'AH_plo')
('-d', 'A', 'co.NP', 'co.AH_plo') => ('-d', 'R', 'co.NP', 'co.AH_plo')
('-d', 'A', 'co.NP', 'co.AH_plo') => ('-d', 'AA', 'co.NP', 'co.AH_plo')
('-d', 'AA', 'co.NP', 'co.AH_plo') => ('-d', 'T', 'co.NP', 'co.AH_plo')
('-d', 'AA', 'co.NP', 'co.AH_plo') => ('-d', 'EA', 'co.NP', 'co.AH_plo')
('-d', 'AA', 'NP', 'AH_plo') => ('-d', 'T', 'NP', 'AH_plo')
('-d', 'AA', 'NP', 'AH_plo') => ('-d', 'EA', 'NP', 'AH_plo')
('-d', 'AA', 'NP', 'NEXP_plo') => ('-d', 'T', 'NP', 'NEXP_plo')
('-d', 'AA', 'NP', 'NEXP_plo') => ('-d', 'EA', 'NP', 'NEXP_plo')
('-d', 'AA', 'co.NP', 'co.NEXP_plo') => ('-d', 'T', 'co.NP', 'co.NEXP_plo')
('-d', 'AA', 'co.NP', 'co.NEXP_plo') => ('-d', 'EA', 'co.NP', 'co.NEXP_plo')
('p', 'A', 'co.NP', 'co.NEXP_plo') => ('p', 'R', 'co.NP', 'co.NEXP_plo')
('p', 'A', 'co.NP', 'co.NEXP_plo') => ('p', 'AA', 'co.NP', 'co.NEXP_plo')
('p', 'A', 'NP', 'NEXP_plo') => ('p', 'R', 'NP', 'NEXP_plo')
('p', 'A', 'NP', 'NEXP_plo') => ('p', 'AA', 'NP', 'NEXP_plo')
('p', 'A', 'NP', 'AH_plo') => ('p', 'R', 'NP', 'AH_plo')
('p', 'A', 'NP', 'AH_plo') => ('p', 'AA', 'NP', 'AH_plo')
('p', 'A', 'co.NP', 'co.AH_plo') => ('p', 'R', 'co.NP', 'co.AH_plo')
('p', 'A', 'co.NP', 'co.AH_plo') => ('p', 'AA', 'co.NP', 'co.AH_plo')
('p', 'AA', 'co.NP', 'co.AH_plo') => ('p', 'T', 'co.NP', 'co.AH_plo')
('p', 'AA', 'co.NP', 'co.AH_plo') => ('p', 'EA', 'co.NP', 'co.AH_plo')
('p', 'AA', 'NP', 'AH_plo') => ('p', 'T', 'NP', 'AH_plo')
('p', 'AA', 'NP', 'AH_plo') => ('p', 'EA', 'NP', 'AH_plo')
('p', 'AA', 'NP', 'NEXP_plo') => ('p', 'T', 'NP', 'NEXP_plo')
('p', 'AA', 'NP', 'NEXP_plo') => ('p', 'EA', 'NP', 'NEXP_plo')
('p', 'AA', 'co.NP', 'co.NEXP_plo') => ('p', 'T', 'co.NP', 'co.NEXP_plo')
('p', 'AA', 'co.NP', 'co.NEXP_plo') => ('p', 'EA', 'co.NP', 'co.NEXP_plo')
('d', 'A', 'co.AM', 'BQP/mpoly') => ('-p', 'A', 'co.AM', 'BQP/mpoly')
('d', 'A', 'AM', 'BQP/mpoly') => ('-p', 'A', 'AM', 'BQP/mpoly')
('-d', 'A', 'co.NP', 'PSPACE') => ('-d', 'R', 'co.NP', 'PSPACE')
('-d', 'A', 'co.NP', 'PSPACE') => ('-d', 'AA', 'co.NP', 'PSPACE')
('-d', 'A', 'NP', 'PSPACE') => ('-d', 'R', 'NP', 'PSPACE')
('-d', 'A', 'NP', 'PSPACE') => ('-d', 'AA', 'NP', 'PSPACE')
('-d', 'AA', 'NP', 'PSPACE') => ('-d', 'T', 'NP', 'PSPACE')
('-d', 'AA', 'NP', 'PSPACE') => ('-d', 'EA', 'NP', 'PSPACE')
('-d', 'AA', 'co.NP', 'PSPACE') => ('-d', 'T', 'co.NP', 'PSPACE')
('-d', 'AA', 'co.NP', 'PSPACE') => ('-d', 'EA', 'co.NP', 'PSPACE')
('p', 'A', 'co.NP', 'PSPACE') => ('p', 'R', 'co.NP', 'PSPACE')
('p', 'A', 'co.NP', 'PSPACE') => ('p', 'AA', 'co.NP', 'PSPACE')
('p', 'A', 'NP', 'PSPACE') => ('p', 'R', 'NP', 'PSPACE')
('p', 'A', 'NP', 'PSPACE') => ('p', 'AA', 'NP', 'PSPACE')
('p', 'AA', 'NP', 'PSPACE') => ('p', 'T', 'NP', 'PSPACE')
('p', 'AA', 'NP', 'PSPACE') => ('p', 'EA', 'NP', 'PSPACE')
('p', 'AA', 'co.NP', 'PSPACE') => ('p', 'T', 'co.NP', 'PSPACE')
('p', 'AA', 'co.NP', 'PSPACE') => ('p', 'EA', 'co.NP', 'PSPACE')
('-d', 'A', 'co.NP', 'co.QIP') => ('-d', 'R', 'co.NP', 'co.QIP')
('-d', 'A', 'co.NP', 'co.QIP') => ('-d', 'AA', 'co.NP', 'co.QIP')
('-d', 'A', 'NP', 'QIP') => ('-d', 'R', 'NP', 'QIP')
('-d', 'A', 'NP', 'QIP') => ('-d', 'AA', 'NP', 'QIP')
('-d', 'A', 'NP', 'QMIP_ne') => ('-d', 'R', 'NP', 'QMIP_ne')
('-d', 'A', 'NP', 'QMIP_ne') => ('-d', 'AA', 'NP', 'QMIP_ne')
('-d', 'A', 'co.NP', 'co.QMIP_ne') => ('-d', 'R', 'co.NP', 'co.QMIP_ne')
('-d', 'A', 'co.NP', 'co.QMIP_ne') => ('-d', 'AA', 'co.NP', 'co.QMIP_ne')
('-d', 'AA', 'co.NP', 'co.QMIP_ne') => ('-d', 'T', 'co.NP', 'co.QMIP_ne')
('-d', 'AA', 'co.NP', 'co.QMIP_ne') => ('-d', 'EA', 'co.NP', 'co.QMIP_ne')
('-d', 'AA', 'NP', 'QMIP_ne') => ('-d', 'T', 'NP', 'QMIP_ne')
('-d', 'AA', 'NP', 'QMIP_ne') => ('-d', 'EA', 'NP', 'QMIP_ne')
('-d', 'AA', 'NP', 'QIP') => ('-d', 'T', 'NP', 'QIP')
('-d', 'AA', 'NP', 'QIP') => ('-d', 'EA', 'NP', 'QIP')
('-d', 'AA', 'co.NP', 'co.QIP') => ('-d', 'T', 'co.NP', 'co.QIP')
('-d', 'AA', 'co.NP', 'co.QIP') => ('-d', 'EA', 'co.NP', 'co.QIP')
('p', 'A', 'co.NP', 'co.QIP') => ('p', 'R', 'co.NP', 'co.QIP')
('p', 'A', 'co.NP', 'co.QIP') => ('p', 'AA', 'co.NP', 'co.QIP')
('p', 'A', 'NP', 'QIP') => ('p', 'R', 'NP', 'QIP')
('p', 'A', 'NP', 'QIP') => ('p', 'AA', 'NP', 'QIP')
('p', 'A', 'NP', 'QMIP_ne') => ('p', 'R', 'NP', 'QMIP_ne')
('p', 'A', 'NP', 'QMIP_ne') => ('p', 'AA', 'NP', 'QMIP_ne')
('p', 'A', 'co.NP', 'co.QMIP_ne') => ('p', 'R', 'co.NP', 'co.QMIP_ne')
('p', 'A', 'co.NP', 'co.QMIP_ne') => ('p', 'AA', 'co.NP', 'co.QMIP_ne')
('p', 'AA', 'co.NP', 'co.QMIP_ne') => ('p', 'T', 'co.NP', 'co.QMIP_ne')
('p', 'AA', 'co.NP', 'co.QMIP_ne') => ('p', 'EA', 'co.NP', 'co.QMIP_ne')
('p', 'AA', 'NP', 'QMIP_ne') => ('p', 'T', 'NP', 'QMIP_ne')
('p', 'AA', 'NP', 'QMIP_ne') => ('p', 'EA', 'NP', 'QMIP_ne')
('p', 'AA', 'NP', 'QIP') => ('p', 'T', 'NP', 'QIP')
('p', 'AA', 'NP', 'QIP') => ('p', 'EA', 'NP', 'QIP')
('p', 'AA', 'co.NP', 'co.QIP') => ('p', 'T', 'co.NP', 'co.QIP')
('p', 'AA', 'co.NP', 'co.QIP') => ('p', 'EA', 'co.NP', 'co.QIP')
('-d', 'A', 'co.NP', 'co.MIP') => ('-d', 'R', 'co.NP', 'co.MIP')
('-d', 'A', 'co.NP', 'co.MIP') => ('-d', 'AA', 'co.NP', 'co.MIP')
('-d', 'A', 'NP', 'MIP') => ('-d', 'R', 'NP', 'MIP')
('-d', 'A', 'NP', 'MIP') => ('-d', 'AA', 'NP', 'MIP')
('-d', 'AA', 'NP', 'MIP') => ('-d', 'T', 'NP', 'MIP')
('-d', 'AA', 'NP', 'MIP') => ('-d', 'EA', 'NP', 'MIP')
('-d', 'AA', 'co.NP', 'co.MIP') => ('-d', 'T', 'co.NP', 'co.MIP')
('-d', 'AA', 'co.NP', 'co.MIP') => ('-d', 'EA', 'co.NP', 'co.MIP')
('p', 'A', 'co.NP', 'co.MIP') => ('p', 'R', 'co.NP', 'co.MIP')
('p', 'A', 'co.NP', 'co.MIP') => ('p', 'AA', 'co.NP', 'co.MIP')
('p', 'A', 'NP', 'MIP') => ('p', 'R', 'NP', 'MIP')
('p', 'A', 'NP', 'MIP') => ('p', 'AA', 'NP', 'MIP')
('p', 'AA', 'NP', 'MIP') => ('p', 'T', 'NP', 'MIP')
('p', 'AA', 'NP', 'MIP') => ('p', 'EA', 'NP', 'MIP')
('p', 'AA', 'co.NP', 'co.MIP') => ('p', 'T', 'co.NP', 'co.MIP')
('p', 'AA', 'co.NP', 'co.MIP') => ('p', 'EA', 'co.NP', 'co.MIP')
('-d', 'A', 'co.NP', 'co.MIP*_cme') => ('-d', 'R', 'co.NP', 'co.MIP*_cme')
('-d', 'A', 'co.NP', 'co.MIP*_cme') => ('-d', 'AA', 'co.NP', 'co.MIP*_cme')
('-d', 'A', 'NP', 'MIP*_cme') => ('-d', 'R', 'NP', 'MIP*_cme')
('-d', 'A', 'NP', 'MIP*_cme') => ('-d', 'AA', 'NP', 'MIP*_cme')
('-d', 'AA', 'NP', 'MIP*_cme') => ('-d', 'T', 'NP', 'MIP*_cme')
('-d', 'AA', 'NP', 'MIP*_cme') => ('-d', 'EA', 'NP', 'MIP*_cme')
('-d', 'AA', 'co.NP', 'co.MIP*_cme') => ('-d', 'T', 'co.NP', 'co.MIP*_cme')
('-d', 'AA', 'co.NP', 'co.MIP*_cme') => ('-d', 'EA', 'co.NP', 'co.MIP*_cme')
('p', 'A', 'co.NP', 'co.MIP*_cme') => ('p', 'R', 'co.NP', 'co.MIP*_cme')
('p', 'A', 'co.NP', 'co.MIP*_cme') => ('p', 'AA', 'co.NP', 'co.MIP*_cme')
('p', 'A', 'NP', 'MIP*_cme') => ('p', 'R', 'NP', 'MIP*_cme')
('p', 'A', 'NP', 'MIP*_cme') => ('p', 'AA', 'NP', 'MIP*_cme')
('p', 'AA', 'NP', 'MIP*_cme') => ('p', 'T', 'NP', 'MIP*_cme')
('p', 'AA', 'NP', 'MIP*_cme') => ('p', 'EA', 'NP', 'MIP*_cme')
('p', 'AA', 'co.NP', 'co.MIP*_cme') => ('p', 'T', 'co.NP', 'co.MIP*_cme')
('p', 'AA', 'co.NP', 'co.MIP*_cme') => ('p', 'EA', 'co.NP', 'co.MIP*_cme')
('d', 'A', 'co.AM', 'BQP/qpoly') => ('-p', 'A', 'co.AM', 'BQP/qpoly')
('d', 'A', 'AM', 'BQP/qpoly') => ('-p', 'A', 'AM', 'BQP/qpoly')
('-d', 'A', 'co.NP', 'co.IP') => ('-d', 'R', 'co.NP', 'co.IP')
('-d', 'A', 'co.NP', 'co.IP') => ('-d', 'AA', 'co.NP', 'co.IP')
('-d', 'A', 'NP', 'IP') => ('-d', 'R', 'NP', 'IP')
('-d', 'A', 'NP', 'IP') => ('-d', 'AA', 'NP', 'IP')
('-d', 'AA', 'NP', 'IP') => ('-d', 'T', 'NP', 'IP')
('-d', 'AA', 'NP', 'IP') => ('-d', 'EA', 'NP', 'IP')
('-d', 'AA', 'co.NP', 'co.IP') => ('-d', 'T', 'co.NP', 'co.IP')
('-d', 'AA', 'co.NP', 'co.IP') => ('-d', 'EA', 'co.NP', 'co.IP')
('p', 'A', 'co.NP', 'co.IP') => ('p', 'R', 'co.NP', 'co.IP')
('p', 'A', 'co.NP', 'co.IP') => ('p', 'AA', 'co.NP', 'co.IP')
('p', 'A', 'NP', 'IP') => ('p', 'R', 'NP', 'IP')
('p', 'A', 'NP', 'IP') => ('p', 'AA', 'NP', 'IP')
('p', 'AA', 'NP', 'IP') => ('p', 'T', 'NP', 'IP')
('p', 'AA', 'NP', 'IP') => ('p', 'EA', 'NP', 'IP')
('p', 'AA', 'co.NP', 'co.IP') => ('p', 'T', 'co.NP', 'co.IP')
('p', 'AA', 'co.NP', 'co.IP') => ('p', 'EA', 'co.NP', 'co.IP')
('p', 'AA', 'co.NP', 'co.AM') => ('-d', 'AA', 'co.NP', 'co.AM')
('p', 'AA', 'co.NP', 'co.AM') => ('p', 'T', 'co.NP', 'co.AM')
('p', 'AA', 'co.NP', 'co.AM') => ('p', 'EA', 'co.NP', 'co.AM')
('p', 'AA', 'NP', 'AM') => ('-d', 'AA', 'NP', 'AM')
('p', 'AA', 'NP', 'AM') => ('p', 'T', 'NP', 'AM')
('p', 'AA', 'NP', 'AM') => ('p', 'EA', 'NP', 'AM')
('p', 'EA', 'NP', 'AM') => ('-d', 'EA', 'NP', 'AM')
('p', 'EA', 'co.NP', 'co.AM') => ('-d', 'EA', 'co.NP', 'co.AM')
('p', 'T', 'NP', 'AM') => ('-d', 'T', 'NP', 'AM')
('p', 'T', 'co.NP', 'co.AM') => ('-d', 'T', 'co.NP', 'co.AM')
('p', 'R', 'co.NP', 'co.AM') => ('-d', 'R', 'co.NP', 'co.AM')
('p', 'R', 'NP', 'AM') => ('-d', 'R', 'NP', 'AM')
('d', 'R', 'AM', 'P') => ('-p', 'R', 'AM', 'P')
('d', 'R', 'co.AM', 'P') => ('-p', 'R', 'co.AM', 'P')
('-d', 'A', 'MA', 'QIP') => ('-d', 'R', 'MA', 'QIP')
('-d', 'A', 'MA', 'QIP') => ('-d', 'AA', 'MA', 'QIP')
('-d', 'A', 'co.MA', 'co.QIP') => ('-d', 'R', 'co.MA', 'co.QIP')
('-d', 'A', 'co.MA', 'co.QIP') => ('-d', 'AA', 'co.MA', 'co.QIP')
('-d', 'A', 'co.MA', 'co.QMIP_ne') => ('-d', 'R', 'co.MA', 'co.QMIP_ne')
('-d', 'A', 'co.MA', 'co.QMIP_ne') => ('-d', 'AA', 'co.MA', 'co.QMIP_ne')
('-d', 'A', 'MA', 'QMIP_ne') => ('-d', 'R', 'MA', 'QMIP_ne')
('-d', 'A', 'MA', 'QMIP_ne') => ('-d', 'AA', 'MA', 'QMIP_ne')
('-d', 'AA', 'MA', 'QMIP_ne') => ('-d', 'T', 'MA', 'QMIP_ne')
('-d', 'AA', 'MA', 'QMIP_ne') => ('-d', 'EA', 'MA', 'QMIP_ne')
('-d', 'AA', 'co.MA', 'co.QMIP_ne') => ('-d', 'T', 'co.MA', 'co.QMIP_ne')
('-d', 'AA', 'co.MA', 'co.QMIP_ne') => ('-d', 'EA', 'co.MA', 'co.QMIP_ne')
('-d', 'AA', 'co.MA', 'co.QIP') => ('-d', 'T', 'co.MA', 'co.QIP')
('-d', 'AA', 'co.MA', 'co.QIP') => ('-d', 'EA', 'co.MA', 'co.QIP')
('-d', 'AA', 'MA', 'QIP') => ('-d', 'T', 'MA', 'QIP')
('-d', 'AA', 'MA', 'QIP') => ('-d', 'EA', 'MA', 'QIP')
('p', 'A', 'MA', 'QIP') => ('p', 'R', 'MA', 'QIP')
('p', 'A', 'MA', 'QIP') => ('p', 'AA', 'MA', 'QIP')
('p', 'A', 'co.MA', 'co.QIP') => ('p', 'R', 'co.MA', 'co.QIP')
('p', 'A', 'co.MA', 'co.QIP') => ('p', 'AA', 'co.MA', 'co.QIP')
('p', 'A', 'co.MA', 'co.QMIP_ne') => ('p', 'R', 'co.MA', 'co.QMIP_ne')
('p', 'A', 'co.MA', 'co.QMIP_ne') => ('p', 'AA', 'co.MA', 'co.QMIP_ne')
('p', 'A', 'MA', 'QMIP_ne') => ('p', 'R', 'MA', 'QMIP_ne')
('p', 'A', 'MA', 'QMIP_ne') => ('p', 'AA', 'MA', 'QMIP_ne')
('p', 'AA', 'MA', 'QMIP_ne') => ('p', 'T', 'MA', 'QMIP_ne')
('p', 'AA', 'MA', 'QMIP_ne') => ('p', 'EA', 'MA', 'QMIP_ne')
('p', 'AA', 'co.MA', 'co.QMIP_ne') => ('p', 'T', 'co.MA', 'co.QMIP_ne')
('p', 'AA', 'co.MA', 'co.QMIP_ne') => ('p', 'EA', 'co.MA', 'co.QMIP_ne')
('p', 'AA', 'co.MA', 'co.QIP') => ('p', 'T', 'co.MA', 'co.QIP')
('p', 'AA', 'co.MA', 'co.QIP') => ('p', 'EA', 'co.MA', 'co.QIP')
('p', 'AA', 'MA', 'QIP') => ('p', 'T', 'MA', 'QIP')
('p', 'AA', 'MA', 'QIP') => ('p', 'EA', 'MA', 'QIP')
('-d', 'A', 'MA', 'PSPACE/poly') => ('-d', 'R', 'MA', 'PSPACE/poly')
('-d', 'A', 'MA', 'PSPACE/poly') => ('-d', 'AA', 'MA', 'PSPACE/poly')
('-d', 'A', 'co.MA', 'PSPACE/poly') => ('-d', 'R', 'co.MA', 'PSPACE/poly')
('-d', 'A', 'co.MA', 'PSPACE/poly') => ('-d', 'AA', 'co.MA', 'PSPACE/poly')
('-d', 'AA', 'co.MA', 'PSPACE/poly') => ('-d', 'T', 'co.MA', 'PSPACE/poly')
('-d', 'AA', 'co.MA', 'PSPACE/poly') => ('-d', 'EA', 'co.MA', 'PSPACE/poly')
('-d', 'AA', 'MA', 'PSPACE/poly') => ('-d', 'T', 'MA', 'PSPACE/poly')
('-d', 'AA', 'MA', 'PSPACE/poly') => ('-d', 'EA', 'MA', 'PSPACE/poly')
('p', 'A', 'MA', 'PSPACE/poly') => ('p', 'R', 'MA', 'PSPACE/poly')
('p', 'A', 'MA', 'PSPACE/poly') => ('p', 'AA', 'MA', 'PSPACE/poly')
('p', 'A', 'co.MA', 'PSPACE/poly') => ('p', 'R', 'co.MA', 'PSPACE/poly')
('p', 'A', 'co.MA', 'PSPACE/poly') => ('p', 'AA', 'co.MA', 'PSPACE/poly')
('p', 'AA', 'co.MA', 'PSPACE/poly') => ('p', 'T', 'co.MA', 'PSPACE/poly')
('p', 'AA', 'co.MA', 'PSPACE/poly') => ('p', 'EA', 'co.MA', 'PSPACE/poly')
('p', 'AA', 'MA', 'PSPACE/poly') => ('p', 'T', 'MA', 'PSPACE/poly')
('p', 'AA', 'MA', 'PSPACE/poly') => ('p', 'EA', 'MA', 'PSPACE/poly')
('-d', 'A', 'MA', 'PSPACE') => ('-d', 'R', 'MA', 'PSPACE')
('-d', 'A', 'MA', 'PSPACE') => ('-d', 'AA', 'MA', 'PSPACE')
('-d', 'A', 'co.MA', 'PSPACE') => ('-d', 'R', 'co.MA', 'PSPACE')
('-d', 'A', 'co.MA', 'PSPACE') => ('-d', 'AA', 'co.MA', 'PSPACE')
('-d', 'AA', 'co.MA', 'PSPACE') => ('-d', 'T', 'co.MA', 'PSPACE')
('-d', 'AA', 'co.MA', 'PSPACE') => ('-d', 'EA', 'co.MA', 'PSPACE')
('-d', 'AA', 'MA', 'PSPACE') => ('-d', 'T', 'MA', 'PSPACE')
('-d', 'AA', 'MA', 'PSPACE') => ('-d', 'EA', 'MA', 'PSPACE')
('p', 'A', 'MA', 'PSPACE') => ('p', 'R', 'MA', 'PSPACE')
('p', 'A', 'MA', 'PSPACE') => ('p', 'AA', 'MA', 'PSPACE')
('p', 'A', 'co.MA', 'PSPACE') => ('p', 'R', 'co.MA', 'PSPACE')
('p', 'A', 'co.MA', 'PSPACE') => ('p', 'AA', 'co.MA', 'PSPACE')
('p', 'AA', 'co.MA', 'PSPACE') => ('p', 'T', 'co.MA', 'PSPACE')
('p', 'AA', 'co.MA', 'PSPACE') => ('p', 'EA', 'co.MA', 'PSPACE')
('p', 'AA', 'MA', 'PSPACE') => ('p', 'T', 'MA', 'PSPACE')
('p', 'AA', 'MA', 'PSPACE') => ('p', 'EA', 'MA', 'PSPACE')
('-d', 'A', 'MA', 'MIP') => ('-d', 'R', 'MA', 'MIP')
('-d', 'A', 'MA', 'MIP') => ('-d', 'AA', 'MA', 'MIP')
('-d', 'A', 'co.MA', 'co.MIP') => ('-d', 'R', 'co.MA', 'co.MIP')
('-d', 'A', 'co.MA', 'co.MIP') => ('-d', 'AA', 'co.MA', 'co.MIP')
('-d', 'A', 'co.MA', 'co.NEXP_plo') => ('-d', 'R', 'co.MA', 'co.NEXP_plo')
('-d', 'A', 'co.MA', 'co.NEXP_plo') => ('-d', 'AA', 'co.MA', 'co.NEXP_plo')
('-d', 'A', 'MA', 'NEXP_plo') => ('-d', 'R', 'MA', 'NEXP_plo')
('-d', 'A', 'MA', 'NEXP_plo') => ('-d', 'AA', 'MA', 'NEXP_plo')
('-d', 'A', 'MA', 'AH_plo') => ('-d', 'R', 'MA', 'AH_plo')
('-d', 'A', 'MA', 'AH_plo') => ('-d', 'AA', 'MA', 'AH_plo')
('-d', 'A', 'co.MA', 'co.AH_plo') => ('-d', 'R', 'co.MA', 'co.AH_plo')
('-d', 'A', 'co.MA', 'co.AH_plo') => ('-d', 'AA', 'co.MA', 'co.AH_plo')
('-d', 'AA', 'co.MA', 'co.AH_plo') => ('-d', 'T', 'co.MA', 'co.AH_plo')
('-d', 'AA', 'co.MA', 'co.AH_plo') => ('-d', 'EA', 'co.MA', 'co.AH_plo')
('-d', 'AA', 'MA', 'AH_plo') => ('-d', 'T', 'MA', 'AH_plo')
('-d', 'AA', 'MA', 'AH_plo') => ('-d', 'EA', 'MA', 'AH_plo')
('-d', 'AA', 'MA', 'NEXP_plo') => ('-d', 'T', 'MA', 'NEXP_plo')
('-d', 'AA', 'MA', 'NEXP_plo') => ('-d', 'EA', 'MA', 'NEXP_plo')
('-d', 'AA', 'co.MA', 'co.NEXP_plo') => ('-d', 'T', 'co.MA', 'co.NEXP_plo')
('-d', 'AA', 'co.MA', 'co.NEXP_plo') => ('-d', 'EA', 'co.MA', 'co.NEXP_plo')
('-d', 'AA', 'co.MA', 'co.MIP') => ('-d', 'T', 'co.MA', 'co.MIP')
('-d', 'AA', 'co.MA', 'co.MIP') => ('-d', 'EA', 'co.MA', 'co.MIP')
('-d', 'AA', 'MA', 'MIP') => ('-d', 'T', 'MA', 'MIP')
('-d', 'AA', 'MA', 'MIP') => ('-d', 'EA', 'MA', 'MIP')
('p', 'A', 'MA', 'MIP') => ('p', 'R', 'MA', 'MIP')
('p', 'A', 'MA', 'MIP') => ('p', 'AA', 'MA', 'MIP')
('p', 'A', 'co.MA', 'co.MIP') => ('p', 'R', 'co.MA', 'co.MIP')
('p', 'A', 'co.MA', 'co.MIP') => ('p', 'AA', 'co.MA', 'co.MIP')
('p', 'A', 'co.MA', 'co.NEXP_plo') => ('p', 'R', 'co.MA', 'co.NEXP_plo')
('p', 'A', 'co.MA', 'co.NEXP_plo') => ('p', 'AA', 'co.MA', 'co.NEXP_plo')
('p', 'A', 'MA', 'NEXP_plo') => ('p', 'R', 'MA', 'NEXP_plo')
('p', 'A', 'MA', 'NEXP_plo') => ('p', 'AA', 'MA', 'NEXP_plo')
('p', 'A', 'MA', 'AH_plo') => ('p', 'R', 'MA', 'AH_plo')
('p', 'A', 'MA', 'AH_plo') => ('p', 'AA', 'MA', 'AH_plo')
('p', 'A', 'co.MA', 'co.AH_plo') => ('p', 'R', 'co.MA', 'co.AH_plo')
('p', 'A', 'co.MA', 'co.AH_plo') => ('p', 'AA', 'co.MA', 'co.AH_plo')
('p', 'AA', 'co.MA', 'co.AH_plo') => ('p', 'T', 'co.MA', 'co.AH_plo')
('p', 'AA', 'co.MA', 'co.AH_plo') => ('p', 'EA', 'co.MA', 'co.AH_plo')
('p', 'AA', 'MA', 'AH_plo') => ('p', 'T', 'MA', 'AH_plo')
('p', 'AA', 'MA', 'AH_plo') => ('p', 'EA', 'MA', 'AH_plo')
('p', 'AA', 'MA', 'NEXP_plo') => ('p', 'T', 'MA', 'NEXP_plo')
('p', 'AA', 'MA', 'NEXP_plo') => ('p', 'EA', 'MA', 'NEXP_plo')
('p', 'AA', 'co.MA', 'co.NEXP_plo') => ('p', 'T', 'co.MA', 'co.NEXP_plo')
('p', 'AA', 'co.MA', 'co.NEXP_plo') => ('p', 'EA', 'co.MA', 'co.NEXP_plo')
('p', 'AA', 'co.MA', 'co.MIP') => ('p', 'T', 'co.MA', 'co.MIP')
('p', 'AA', 'co.MA', 'co.MIP') => ('p', 'EA', 'co.MA', 'co.MIP')
('p', 'AA', 'MA', 'MIP') => ('p', 'T', 'MA', 'MIP')
('p', 'AA', 'MA', 'MIP') => ('p', 'EA', 'MA', 'MIP')
('-d', 'A', 'MA', 'MIP*_cme') => ('-d', 'R', 'MA', 'MIP*_cme')
('-d', 'A', 'MA', 'MIP*_cme') => ('-d', 'AA', 'MA', 'MIP*_cme')
('-d', 'A', 'co.MA', 'co.MIP*_cme') => ('-d', 'R', 'co.MA', 'co.MIP*_cme')
('-d', 'A', 'co.MA', 'co.MIP*_cme') => ('-d', 'AA', 'co.MA', 'co.MIP*_cme')
('-d', 'AA', 'co.MA', 'co.MIP*_cme') => ('-d', 'T', 'co.MA', 'co.MIP*_cme')
('-d', 'AA', 'co.MA', 'co.MIP*_cme') => ('-d', 'EA', 'co.MA', 'co.MIP*_cme')
('-d', 'AA', 'MA', 'MIP*_cme') => ('-d', 'T', 'MA', 'MIP*_cme')
('-d', 'AA', 'MA', 'MIP*_cme') => ('-d', 'EA', 'MA', 'MIP*_cme')
('p', 'A', 'MA', 'MIP*_cme') => ('p', 'R', 'MA', 'MIP*_cme')
('p', 'A', 'MA', 'MIP*_cme') => ('p', 'AA', 'MA', 'MIP*_cme')
('p', 'A', 'co.MA', 'co.MIP*_cme') => ('p', 'R', 'co.MA', 'co.MIP*_cme')
('p', 'A', 'co.MA', 'co.MIP*_cme') => ('p', 'AA', 'co.MA', 'co.MIP*_cme')
('p', 'AA', 'co.MA', 'co.MIP*_cme') => ('p', 'T', 'co.MA', 'co.MIP*_cme')
('p', 'AA', 'co.MA', 'co.MIP*_cme') => ('p', 'EA', 'co.MA', 'co.MIP*_cme')
('p', 'AA', 'MA', 'MIP*_cme') => ('p', 'T', 'MA', 'MIP*_cme')
('p', 'AA', 'MA', 'MIP*_cme') => ('p', 'EA', 'MA', 'MIP*_cme')
('-d', 'A', 'MA', 'IP') => ('-d', 'R', 'MA', 'IP')
('-d', 'A', 'MA', 'IP') => ('-d', 'AA', 'MA', 'IP')
('-d', 'A', 'co.MA', 'co.IP') => ('-d', 'R', 'co.MA', 'co.IP')
('-d', 'A', 'co.MA', 'co.IP') => ('-d', 'AA', 'co.MA', 'co.IP')
('-d', 'AA', 'co.MA', 'co.IP') => ('-d', 'T', 'co.MA', 'co.IP')
('-d', 'AA', 'co.MA', 'co.IP') => ('-d', 'EA', 'co.MA', 'co.IP')
('-d', 'AA', 'MA', 'IP') => ('-d', 'T', 'MA', 'IP')
('-d', 'AA', 'MA', 'IP') => ('-d', 'EA', 'MA', 'IP')
('p', 'A', 'MA', 'IP') => ('p', 'R', 'MA', 'IP')
('p', 'A', 'MA', 'IP') => ('p', 'AA', 'MA', 'IP')
('p', 'A', 'co.MA', 'co.IP') => ('p', 'R', 'co.MA', 'co.IP')
('p', 'A', 'co.MA', 'co.IP') => ('p', 'AA', 'co.MA', 'co.IP')
('p', 'AA', 'co.MA', 'co.IP') => ('p', 'T', 'co.MA', 'co.IP')
('p', 'AA', 'co.MA', 'co.IP') => ('p', 'EA', 'co.MA', 'co.IP')
('p', 'AA', 'MA', 'IP') => ('p', 'T', 'MA', 'IP')
('p', 'AA', 'MA', 'IP') => ('p', 'EA', 'MA', 'IP')
('-d', 'A', 'MA', 'NP/poly') => ('-d', 'R', 'MA', 'NP/poly')
('-d', 'A', 'MA', 'NP/poly') => ('-d', 'AA', 'MA', 'NP/poly')
('-d', 'A', 'co.MA', 'co.NP/poly') => ('-d', 'R', 'co.MA', 'co.NP/poly')
('-d', 'A', 'co.MA', 'co.NP/poly') => ('-d', 'AA', 'co.MA', 'co.NP/poly')
('-d', 'AA', 'co.MA', 'co.NP/poly') => ('-d', 'T', 'co.MA', 'co.NP/poly')
('-d', 'AA', 'co.MA', 'co.NP/poly') => ('-d', 'EA', 'co.MA', 'co.NP/poly')
('-d', 'AA', 'MA', 'NP/poly') => ('-d', 'T', 'MA', 'NP/poly')
('-d', 'AA', 'MA', 'NP/poly') => ('-d', 'EA', 'MA', 'NP/poly')
('p', 'A', 'MA', 'NP/poly') => ('p', 'R', 'MA', 'NP/poly')
('p', 'A', 'MA', 'NP/poly') => ('p', 'AA', 'MA', 'NP/poly')
('p', 'A', 'co.MA', 'co.NP/poly') => ('p', 'R', 'co.MA', 'co.NP/poly')
('p', 'A', 'co.MA', 'co.NP/poly') => ('p', 'AA', 'co.MA', 'co.NP/poly')
('p', 'AA', 'co.MA', 'co.NP/poly') => ('p', 'T', 'co.MA', 'co.NP/poly')
('p', 'AA', 'co.MA', 'co.NP/poly') => ('p', 'EA', 'co.MA', 'co.NP/poly')
('p', 'AA', 'MA', 'NP/poly') => ('p', 'T', 'MA', 'NP/poly')
('p', 'AA', 'MA', 'NP/poly') => ('p', 'EA', 'MA', 'NP/poly')
('p', 'AA', 'MA', 'AM') => ('-d', 'AA', 'MA', 'AM')
('p', 'AA', 'MA', 'AM') => ('p', 'T', 'MA', 'AM')
('p', 'AA', 'MA', 'AM') => ('p', 'EA', 'MA', 'AM')
('p', 'AA', 'co.MA', 'co.AM') => ('-d', 'AA', 'co.MA', 'co.AM')
('p', 'AA', 'co.MA', 'co.AM') => ('p', 'T', 'co.MA', 'co.AM')
('p', 'AA', 'co.MA', 'co.AM') => ('p', 'EA', 'co.MA', 'co.AM')
('p', 'EA', 'co.MA', 'co.AM') => ('-d', 'EA', 'co.MA', 'co.AM')
('p', 'EA', 'MA', 'AM') => ('-d', 'EA', 'MA', 'AM')
('p', 'T', 'co.MA', 'co.AM') => ('-d', 'T', 'co.MA', 'co.AM')
('p', 'T', 'MA', 'AM') => ('-d', 'T', 'MA', 'AM')
('p', 'R', 'MA', 'AM') => ('-d', 'R', 'MA', 'AM')
('p', 'R', 'co.MA', 'co.AM') => ('-d', 'R', 'co.MA', 'co.AM')
('-d', 'A', 'co.SBP', 'co.NEXP_plo') => ('-d', 'R', 'co.SBP', 'co.NEXP_plo')
('-d', 'A', 'co.SBP', 'co.NEXP_plo') => ('-d', 'AA', 'co.SBP', 'co.NEXP_plo')
('-d', 'A', 'SBP', 'NEXP_plo') => ('-d', 'R', 'SBP', 'NEXP_plo')
('-d', 'A', 'SBP', 'NEXP_plo') => ('-d', 'AA', 'SBP', 'NEXP_plo')
('-d', 'A', 'SBP', 'AH_plo') => ('-d', 'R', 'SBP', 'AH_plo')
('-d', 'A', 'SBP', 'AH_plo') => ('-d', 'AA', 'SBP', 'AH_plo')
('-d', 'A', 'co.SBP', 'co.AH_plo') => ('-d', 'R', 'co.SBP', 'co.AH_plo')
('-d', 'A', 'co.SBP', 'co.AH_plo') => ('-d', 'AA', 'co.SBP', 'co.AH_plo')
('-d', 'AA', 'co.SBP', 'co.AH_plo') => ('-d', 'T', 'co.SBP', 'co.AH_plo')
('-d', 'AA', 'co.SBP', 'co.AH_plo') => ('-d', 'EA', 'co.SBP', 'co.AH_plo')
('-d', 'AA', 'SBP', 'AH_plo') => ('-d', 'T', 'SBP', 'AH_plo')
('-d', 'AA', 'SBP', 'AH_plo') => ('-d', 'EA', 'SBP', 'AH_plo')
('-d', 'AA', 'SBP', 'NEXP_plo') => ('-d', 'T', 'SBP', 'NEXP_plo')
('-d', 'AA', 'SBP', 'NEXP_plo') => ('-d', 'EA', 'SBP', 'NEXP_plo')
('-d', 'AA', 'co.SBP', 'co.NEXP_plo') => ('-d', 'T', 'co.SBP', 'co.NEXP_plo')
('-d', 'AA', 'co.SBP', 'co.NEXP_plo') => ('-d', 'EA', 'co.SBP', 'co.NEXP_plo')
('p', 'A', 'co.SBP', 'co.NEXP_plo') => ('p', 'R', 'co.SBP', 'co.NEXP_plo')
('p', 'A', 'co.SBP', 'co.NEXP_plo') => ('p', 'AA', 'co.SBP', 'co.NEXP_plo')
('p', 'A', 'SBP', 'NEXP_plo') => ('p', 'R', 'SBP', 'NEXP_plo')
('p', 'A', 'SBP', 'NEXP_plo') => ('p', 'AA', 'SBP', 'NEXP_plo')
('p', 'A', 'SBP', 'AH_plo') => ('p', 'R', 'SBP', 'AH_plo')
('p', 'A', 'SBP', 'AH_plo') => ('p', 'AA', 'SBP', 'AH_plo')
('p', 'A', 'co.SBP', 'co.AH_plo') => ('p', 'R', 'co.SBP', 'co.AH_plo')
('p', 'A', 'co.SBP', 'co.AH_plo') => ('p', 'AA', 'co.SBP', 'co.AH_plo')
('p', 'AA', 'co.SBP', 'co.AH_plo') => ('p', 'T', 'co.SBP', 'co.AH_plo')
('p', 'AA', 'co.SBP', 'co.AH_plo') => ('p', 'EA', 'co.SBP', 'co.AH_plo')
('p', 'AA', 'SBP', 'AH_plo') => ('p', 'T', 'SBP', 'AH_plo')
('p', 'AA', 'SBP', 'AH_plo') => ('p', 'EA', 'SBP', 'AH_plo')
('p', 'AA', 'SBP', 'NEXP_plo') => ('p', 'T', 'SBP', 'NEXP_plo')
('p', 'AA', 'SBP', 'NEXP_plo') => ('p', 'EA', 'SBP', 'NEXP_plo')
('p', 'AA', 'co.SBP', 'co.NEXP_plo') => ('p', 'T', 'co.SBP', 'co.NEXP_plo')
('p', 'AA', 'co.SBP', 'co.NEXP_plo') => ('p', 'EA', 'co.SBP', 'co.NEXP_plo')
('-d', 'A', 'co.SBP', 'PSPACE/poly') => ('-d', 'R', 'co.SBP', 'PSPACE/poly')
('-d', 'A', 'co.SBP', 'PSPACE/poly') => ('-d', 'AA', 'co.SBP', 'PSPACE/poly')
('-d', 'A', 'SBP', 'PSPACE/poly') => ('-d', 'R', 'SBP', 'PSPACE/poly')
('-d', 'A', 'SBP', 'PSPACE/poly') => ('-d', 'AA', 'SBP', 'PSPACE/poly')
('-d', 'AA', 'SBP', 'PSPACE/poly') => ('-d', 'T', 'SBP', 'PSPACE/poly')
('-d', 'AA', 'SBP', 'PSPACE/poly') => ('-d', 'EA', 'SBP', 'PSPACE/poly')
('-d', 'AA', 'co.SBP', 'PSPACE/poly') => ('-d', 'T', 'co.SBP', 'PSPACE/poly')
('-d', 'AA', 'co.SBP', 'PSPACE/poly') => ('-d', 'EA', 'co.SBP', 'PSPACE/poly')
('p', 'A', 'co.SBP', 'PSPACE/poly') => ('p', 'R', 'co.SBP', 'PSPACE/poly')
('p', 'A', 'co.SBP', 'PSPACE/poly') => ('p', 'AA', 'co.SBP', 'PSPACE/poly')
('p', 'A', 'SBP', 'PSPACE/poly') => ('p', 'R', 'SBP', 'PSPACE/poly')
('p', 'A', 'SBP', 'PSPACE/poly') => ('p', 'AA', 'SBP', 'PSPACE/poly')
('p', 'AA', 'SBP', 'PSPACE/poly') => ('p', 'T', 'SBP', 'PSPACE/poly')
('p', 'AA', 'SBP', 'PSPACE/poly') => ('p', 'EA', 'SBP', 'PSPACE/poly')
('p', 'AA', 'co.SBP', 'PSPACE/poly') => ('p', 'T', 'co.SBP', 'PSPACE/poly')
('p', 'AA', 'co.SBP', 'PSPACE/poly') => ('p', 'EA', 'co.SBP', 'PSPACE/poly')
('-d', 'A', 'co.SBP', 'PSPACE') => ('-d', 'R', 'co.SBP', 'PSPACE')
('-d', 'A', 'co.SBP', 'PSPACE') => ('-d', 'AA', 'co.SBP', 'PSPACE')
('-d', 'A', 'SBP', 'PSPACE') => ('-d', 'R', 'SBP', 'PSPACE')
('-d', 'A', 'SBP', 'PSPACE') => ('-d', 'AA', 'SBP', 'PSPACE')
('-d', 'AA', 'SBP', 'PSPACE') => ('-d', 'T', 'SBP', 'PSPACE')
('-d', 'AA', 'SBP', 'PSPACE') => ('-d', 'EA', 'SBP', 'PSPACE')
('-d', 'AA', 'co.SBP', 'PSPACE') => ('-d', 'T', 'co.SBP', 'PSPACE')
('-d', 'AA', 'co.SBP', 'PSPACE') => ('-d', 'EA', 'co.SBP', 'PSPACE')
('p', 'A', 'co.SBP', 'PSPACE') => ('p', 'R', 'co.SBP', 'PSPACE')
('p', 'A', 'co.SBP', 'PSPACE') => ('p', 'AA', 'co.SBP', 'PSPACE')
('p', 'A', 'SBP', 'PSPACE') => ('p', 'R', 'SBP', 'PSPACE')
('p', 'A', 'SBP', 'PSPACE') => ('p', 'AA', 'SBP', 'PSPACE')
('p', 'AA', 'SBP', 'PSPACE') => ('p', 'T', 'SBP', 'PSPACE')
('p', 'AA', 'SBP', 'PSPACE') => ('p', 'EA', 'SBP', 'PSPACE')
('p', 'AA', 'co.SBP', 'PSPACE') => ('p', 'T', 'co.SBP', 'PSPACE')
('p', 'AA', 'co.SBP', 'PSPACE') => ('p', 'EA', 'co.SBP', 'PSPACE')
('-d', 'A', 'co.SBP', 'co.QMIP_cme') => ('-d', 'R', 'co.SBP', 'co.QMIP_cme')
('-d', 'A', 'co.SBP', 'co.QMIP_cme') => ('-d', 'AA', 'co.SBP', 'co.QMIP_cme')
('-d', 'A', 'SBP', 'QMIP_cme') => ('-d', 'R', 'SBP', 'QMIP_cme')
('-d', 'A', 'SBP', 'QMIP_cme') => ('-d', 'AA', 'SBP', 'QMIP_cme')
('-d', 'AA', 'SBP', 'QMIP_cme') => ('-d', 'T', 'SBP', 'QMIP_cme')
('-d', 'AA', 'SBP', 'QMIP_cme') => ('-d', 'EA', 'SBP', 'QMIP_cme')
('-d', 'AA', 'co.SBP', 'co.QMIP_cme') => ('-d', 'T', 'co.SBP', 'co.QMIP_cme')
('-d', 'AA', 'co.SBP', 'co.QMIP_cme') => ('-d', 'EA', 'co.SBP', 'co.QMIP_cme')
('p', 'A', 'co.SBP', 'co.QMIP_cme') => ('p', 'R', 'co.SBP', 'co.QMIP_cme')
('p', 'A', 'co.SBP', 'co.QMIP_cme') => ('p', 'AA', 'co.SBP', 'co.QMIP_cme')
('p', 'A', 'SBP', 'QMIP_cme') => ('p', 'R', 'SBP', 'QMIP_cme')
('p', 'A', 'SBP', 'QMIP_cme') => ('p', 'AA', 'SBP', 'QMIP_cme')
('p', 'AA', 'SBP', 'QMIP_cme') => ('p', 'T', 'SBP', 'QMIP_cme')
('p', 'AA', 'SBP', 'QMIP_cme') => ('p', 'EA', 'SBP', 'QMIP_cme')
('p', 'AA', 'co.SBP', 'co.QMIP_cme') => ('p', 'T', 'co.SBP', 'co.QMIP_cme')
('p', 'AA', 'co.SBP', 'co.QMIP_cme') => ('p', 'EA', 'co.SBP', 'co.QMIP_cme')
('-d', 'A', 'co.SBP', 'co.QIP') => ('-d', 'R', 'co.SBP', 'co.QIP')
('-d', 'A', 'co.SBP', 'co.QIP') => ('-d', 'AA', 'co.SBP', 'co.QIP')
('-d', 'A', 'SBP', 'QIP') => ('-d', 'R', 'SBP', 'QIP')
('-d', 'A', 'SBP', 'QIP') => ('-d', 'AA', 'SBP', 'QIP')
('-d', 'A', 'SBP', 'QMIP_ne') => ('-d', 'R', 'SBP', 'QMIP_ne')
('-d', 'A', 'SBP', 'QMIP_ne') => ('-d', 'AA', 'SBP', 'QMIP_ne')
('-d', 'A', 'co.SBP', 'co.QMIP_ne') => ('-d', 'R', 'co.SBP', 'co.QMIP_ne')
('-d', 'A', 'co.SBP', 'co.QMIP_ne') => ('-d', 'AA', 'co.SBP', 'co.QMIP_ne')
('-d', 'AA', 'co.SBP', 'co.QMIP_ne') => ('-d', 'T', 'co.SBP', 'co.QMIP_ne')
('-d', 'AA', 'co.SBP', 'co.QMIP_ne') => ('-d', 'EA', 'co.SBP', 'co.QMIP_ne')
('-d', 'AA', 'SBP', 'QMIP_ne') => ('-d', 'T', 'SBP', 'QMIP_ne')
('-d', 'AA', 'SBP', 'QMIP_ne') => ('-d', 'EA', 'SBP', 'QMIP_ne')
('-d', 'AA', 'SBP', 'QIP') => ('-d', 'T', 'SBP', 'QIP')
('-d', 'AA', 'SBP', 'QIP') => ('-d', 'EA', 'SBP', 'QIP')
('-d', 'AA', 'co.SBP', 'co.QIP') => ('-d', 'T', 'co.SBP', 'co.QIP')
('-d', 'AA', 'co.SBP', 'co.QIP') => ('-d', 'EA', 'co.SBP', 'co.QIP')
('p', 'A', 'co.SBP', 'co.QIP') => ('p', 'R', 'co.SBP', 'co.QIP')
('p', 'A', 'co.SBP', 'co.QIP') => ('p', 'AA', 'co.SBP', 'co.QIP')
('p', 'A', 'SBP', 'QIP') => ('p', 'R', 'SBP', 'QIP')
('p', 'A', 'SBP', 'QIP') => ('p', 'AA', 'SBP', 'QIP')
('p', 'A', 'SBP', 'QMIP_ne') => ('p', 'R', 'SBP', 'QMIP_ne')
('p', 'A', 'SBP', 'QMIP_ne') => ('p', 'AA', 'SBP', 'QMIP_ne')
('p', 'A', 'co.SBP', 'co.QMIP_ne') => ('p', 'R', 'co.SBP', 'co.QMIP_ne')
('p', 'A', 'co.SBP', 'co.QMIP_ne') => ('p', 'AA', 'co.SBP', 'co.QMIP_ne')
('p', 'AA', 'co.SBP', 'co.QMIP_ne') => ('p', 'T', 'co.SBP', 'co.QMIP_ne')
('p', 'AA', 'co.SBP', 'co.QMIP_ne') => ('p', 'EA', 'co.SBP', 'co.QMIP_ne')
('p', 'AA', 'SBP', 'QMIP_ne') => ('p', 'T', 'SBP', 'QMIP_ne')
('p', 'AA', 'SBP', 'QMIP_ne') => ('p', 'EA', 'SBP', 'QMIP_ne')
('p', 'AA', 'SBP', 'QIP') => ('p', 'T', 'SBP', 'QIP')
('p', 'AA', 'SBP', 'QIP') => ('p', 'EA', 'SBP', 'QIP')
('p', 'AA', 'co.SBP', 'co.QIP') => ('p', 'T', 'co.SBP', 'co.QIP')
('p', 'AA', 'co.SBP', 'co.QIP') => ('p', 'EA', 'co.SBP', 'co.QIP')
('-d', 'A', 'co.SBP', 'co.MIP') => ('-d', 'R', 'co.SBP', 'co.MIP')
('-d', 'A', 'co.SBP', 'co.MIP') => ('-d', 'AA', 'co.SBP', 'co.MIP')
('-d', 'A', 'SBP', 'MIP') => ('-d', 'R', 'SBP', 'MIP')
('-d', 'A', 'SBP', 'MIP') => ('-d', 'AA', 'SBP', 'MIP')
('-d', 'AA', 'SBP', 'MIP') => ('-d', 'T', 'SBP', 'MIP')
('-d', 'AA', 'SBP', 'MIP') => ('-d', 'EA', 'SBP', 'MIP')
('-d', 'AA', 'co.SBP', 'co.MIP') => ('-d', 'T', 'co.SBP', 'co.MIP')
('-d', 'AA', 'co.SBP', 'co.MIP') => ('-d', 'EA', 'co.SBP', 'co.MIP')
('p', 'A', 'co.SBP', 'co.MIP') => ('p', 'R', 'co.SBP', 'co.MIP')
('p', 'A', 'co.SBP', 'co.MIP') => ('p', 'AA', 'co.SBP', 'co.MIP')
('p', 'A', 'SBP', 'MIP') => ('p', 'R', 'SBP', 'MIP')
('p', 'A', 'SBP', 'MIP') => ('p', 'AA', 'SBP', 'MIP')
('p', 'AA', 'SBP', 'MIP') => ('p', 'T', 'SBP', 'MIP')
('p', 'AA', 'SBP', 'MIP') => ('p', 'EA', 'SBP', 'MIP')
('p', 'AA', 'co.SBP', 'co.MIP') => ('p', 'T', 'co.SBP', 'co.MIP')
('p', 'AA', 'co.SBP', 'co.MIP') => ('p', 'EA', 'co.SBP', 'co.MIP')
('-d', 'A', 'co.SBP', 'co.NP/poly') => ('-d', 'R', 'co.SBP', 'co.NP/poly')
('-d', 'A', 'co.SBP', 'co.NP/poly') => ('-d', 'AA', 'co.SBP', 'co.NP/poly')
('-d', 'A', 'SBP', 'NP/poly') => ('-d', 'R', 'SBP', 'NP/poly')
('-d', 'A', 'SBP', 'NP/poly') => ('-d', 'AA', 'SBP', 'NP/poly')
('-d', 'AA', 'SBP', 'NP/poly') => ('-d', 'T', 'SBP', 'NP/poly')
('-d', 'AA', 'SBP', 'NP/poly') => ('-d', 'EA', 'SBP', 'NP/poly')
('-d', 'AA', 'co.SBP', 'co.NP/poly') => ('-d', 'T', 'co.SBP', 'co.NP/poly')
('-d', 'AA', 'co.SBP', 'co.NP/poly') => ('-d', 'EA', 'co.SBP', 'co.NP/poly')
('p', 'A', 'co.SBP', 'co.NP/poly') => ('p', 'R', 'co.SBP', 'co.NP/poly')
('p', 'A', 'co.SBP', 'co.NP/poly') => ('p', 'AA', 'co.SBP', 'co.NP/poly')
('p', 'A', 'SBP', 'NP/poly') => ('p', 'R', 'SBP', 'NP/poly')
('p', 'A', 'SBP', 'NP/poly') => ('p', 'AA', 'SBP', 'NP/poly')
('p', 'AA', 'SBP', 'NP/poly') => ('p', 'T', 'SBP', 'NP/poly')
('p', 'AA', 'SBP', 'NP/poly') => ('p', 'EA', 'SBP', 'NP/poly')
('p', 'AA', 'co.SBP', 'co.NP/poly') => ('p', 'T', 'co.SBP', 'co.NP/poly')
('p', 'AA', 'co.SBP', 'co.NP/poly') => ('p', 'EA', 'co.SBP', 'co.NP/poly')
('-d', 'A', 'co.SBP', 'co.MIP*_cme') => ('-d', 'R', 'co.SBP', 'co.MIP*_cme')
('-d', 'A', 'co.SBP', 'co.MIP*_cme') => ('-d', 'AA', 'co.SBP', 'co.MIP*_cme')
('-d', 'A', 'SBP', 'MIP*_cme') => ('-d', 'R', 'SBP', 'MIP*_cme')
('-d', 'A', 'SBP', 'MIP*_cme') => ('-d', 'AA', 'SBP', 'MIP*_cme')
('-d', 'AA', 'SBP', 'MIP*_cme') => ('-d', 'T', 'SBP', 'MIP*_cme')
('-d', 'AA', 'SBP', 'MIP*_cme') => ('-d', 'EA', 'SBP', 'MIP*_cme')
('-d', 'AA', 'co.SBP', 'co.MIP*_cme') => ('-d', 'T', 'co.SBP', 'co.MIP*_cme')
('-d', 'AA', 'co.SBP', 'co.MIP*_cme') => ('-d', 'EA', 'co.SBP', 'co.MIP*_cme')
('p', 'A', 'co.SBP', 'co.MIP*_cme') => ('p', 'R', 'co.SBP', 'co.MIP*_cme')
('p', 'A', 'co.SBP', 'co.MIP*_cme') => ('p', 'AA', 'co.SBP', 'co.MIP*_cme')
('p', 'A', 'SBP', 'MIP*_cme') => ('p', 'R', 'SBP', 'MIP*_cme')
('p', 'A', 'SBP', 'MIP*_cme') => ('p', 'AA', 'SBP', 'MIP*_cme')
('p', 'AA', 'SBP', 'MIP*_cme') => ('p', 'T', 'SBP', 'MIP*_cme')
('p', 'AA', 'SBP', 'MIP*_cme') => ('p', 'EA', 'SBP', 'MIP*_cme')
('p', 'AA', 'co.SBP', 'co.MIP*_cme') => ('p', 'T', 'co.SBP', 'co.MIP*_cme')
('p', 'AA', 'co.SBP', 'co.MIP*_cme') => ('p', 'EA', 'co.SBP', 'co.MIP*_cme')
('-d', 'A', 'co.SBP', 'co.IP') => ('-d', 'R', 'co.SBP', 'co.IP')
('-d', 'A', 'co.SBP', 'co.IP') => ('-d', 'AA', 'co.SBP', 'co.IP')
('-d', 'A', 'SBP', 'IP') => ('-d', 'R', 'SBP', 'IP')
('-d', 'A', 'SBP', 'IP') => ('-d', 'AA', 'SBP', 'IP')
('-d', 'AA', 'SBP', 'IP') => ('-d', 'T', 'SBP', 'IP')
('-d', 'AA', 'SBP', 'IP') => ('-d', 'EA', 'SBP', 'IP')
('-d', 'AA', 'co.SBP', 'co.IP') => ('-d', 'T', 'co.SBP', 'co.IP')
('-d', 'AA', 'co.SBP', 'co.IP') => ('-d', 'EA', 'co.SBP', 'co.IP')
('p', 'A', 'co.SBP', 'co.IP') => ('p', 'R', 'co.SBP', 'co.IP')
('p', 'A', 'co.SBP', 'co.IP') => ('p', 'AA', 'co.SBP', 'co.IP')
('p', 'A', 'SBP', 'IP') => ('p', 'R', 'SBP', 'IP')
('p', 'A', 'SBP', 'IP') => ('p', 'AA', 'SBP', 'IP')
('p', 'AA', 'SBP', 'IP') => ('p', 'T', 'SBP', 'IP')
('p', 'AA', 'SBP', 'IP') => ('p', 'EA', 'SBP', 'IP')
('p', 'AA', 'co.SBP', 'co.IP') => ('p', 'T', 'co.SBP', 'co.IP')
('p', 'AA', 'co.SBP', 'co.IP') => ('p', 'EA', 'co.SBP', 'co.IP')
('p', 'AA', 'co.SBP', 'co.AM') => ('-d', 'AA', 'co.SBP', 'co.AM')
('p', 'AA', 'co.SBP', 'co.AM') => ('p', 'T', 'co.SBP', 'co.AM')
('p', 'AA', 'co.SBP', 'co.AM') => ('p', 'EA', 'co.SBP', 'co.AM')
('p', 'AA', 'SBP', 'AM') => ('-d', 'AA', 'SBP', 'AM')
('p', 'AA', 'SBP', 'AM') => ('p', 'T', 'SBP', 'AM')
('p', 'AA', 'SBP', 'AM') => ('p', 'EA', 'SBP', 'AM')
('p', 'EA', 'SBP', 'AM') => ('-d', 'EA', 'SBP', 'AM')
('p', 'EA', 'co.SBP', 'co.AM') => ('-d', 'EA', 'co.SBP', 'co.AM')
('p', 'T', 'SBP', 'AM') => ('-d', 'T', 'SBP', 'AM')
('p', 'T', 'co.SBP', 'co.AM') => ('-d', 'T', 'co.SBP', 'co.AM')
('p', 'R', 'co.SBP', 'co.AM') => ('-d', 'R', 'co.SBP', 'co.AM')
('p', 'R', 'SBP', 'AM') => ('-d', 'R', 'SBP', 'AM')
('p', 'A', 'QIP(2)', 'QIP(3)') => ('-d', 'A', 'QIP(2)', 'QIP(3)')
('p', 'A', 'QIP(2)', 'QIP(3)') => ('p', 'R', 'QIP(2)', 'QIP(3)')
('p', 'A', 'QIP(2)', 'QIP(3)') => ('p', 'AA', 'QIP(2)', 'QIP(3)')
('p', 'A', 'co.QIP(2)', 'co.QIP(3)') => ('-d', 'A', 'co.QIP(2)', 'co.QIP(3)')
('p', 'A', 'co.QIP(2)', 'co.QIP(3)') => ('p', 'R', 'co.QIP(2)', 'co.QIP(3)')
('p', 'A', 'co.QIP(2)', 'co.QIP(3)') => ('p', 'AA', 'co.QIP(2)', 'co.QIP(3)')
('p', 'A', 'cocap.QIP(2)', 'cocap.QIP(3)') => ('-d', 'A', 'cocap.QIP(2)', 'cocap.QIP(3)')
('p', 'A', 'cocap.QIP(2)', 'cocap.QIP(3)') => ('p', 'R', 'cocap.QIP(2)', 'cocap.QIP(3)')
('p', 'A', 'cocap.QIP(2)', 'cocap.QIP(3)') => ('p', 'AA', 'cocap.QIP(2)', 'cocap.QIP(3)')
('-d', 'A', 'cocap.QIP(2)', 'co.QIP(3)') => ('-d', 'R', 'cocap.QIP(2)', 'co.QIP(3)')
('-d', 'A', 'cocap.QIP(2)', 'co.QIP(3)') => ('-d', 'AA', 'cocap.QIP(2)', 'co.QIP(3)')
('-d', 'A', 'cocap.QIP(2)', 'QIP(3)') => ('-d', 'R', 'cocap.QIP(2)', 'QIP(3)')
('-d', 'A', 'cocap.QIP(2)', 'QIP(3)') => ('-d', 'AA', 'cocap.QIP(2)', 'QIP(3)')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QIP(3)') => ('-d', 'R', 'cocap.QIP(2)', 'cocap.QIP(3)')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QIP(3)') => ('-d', 'AA', 'cocap.QIP(2)', 'cocap.QIP(3)')
('-d', 'A', 'cocap.QAM', 'cocap.QIP(3)') => ('-d', 'R', 'cocap.QAM', 'cocap.QIP(3)')
('-d', 'A', 'cocap.QAM', 'cocap.QIP(3)') => ('-d', 'AA', 'cocap.QAM', 'cocap.QIP(3)')
('-d', 'A', 'cocap.QAM', 'co.QIP(3)') => ('-d', 'R', 'cocap.QAM', 'co.QIP(3)')
('-d', 'A', 'cocap.QAM', 'co.QIP(3)') => ('-d', 'AA', 'cocap.QAM', 'co.QIP(3)')
('-d', 'A', 'cocap.QAM', 'QIP(3)') => ('-d', 'R', 'cocap.QAM', 'QIP(3)')
('-d', 'A', 'cocap.QAM', 'QIP(3)') => ('-d', 'AA', 'cocap.QAM', 'QIP(3)')
('-d', 'AA', 'cocap.QAM', 'QIP(3)') => ('-d', 'T', 'cocap.QAM', 'QIP(3)')
('-d', 'AA', 'cocap.QAM', 'QIP(3)') => ('-d', 'EA', 'cocap.QAM', 'QIP(3)')
('-d', 'AA', 'cocap.QAM', 'co.QIP(3)') => ('-d', 'T', 'cocap.QAM', 'co.QIP(3)')
('-d', 'AA', 'cocap.QAM', 'co.QIP(3)') => ('-d', 'EA', 'cocap.QAM', 'co.QIP(3)')
('-d', 'AA', 'cocap.QAM', 'cocap.QIP(3)') => ('-d', 'T', 'cocap.QAM', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.QAM', 'cocap.QIP(3)') => ('-d', 'EA', 'cocap.QAM', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QIP(3)') => ('-d', 'T', 'cocap.QIP(2)', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QIP(3)') => ('-d', 'EA', 'cocap.QIP(2)', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.QIP(2)', 'co.QIP(3)') => ('-d', 'T', 'cocap.QIP(2)', 'co.QIP(3)')
('-d', 'AA', 'cocap.QIP(2)', 'co.QIP(3)') => ('-d', 'EA', 'cocap.QIP(2)', 'co.QIP(3)')
('-d', 'AA', 'cocap.QIP(2)', 'QIP(3)') => ('-d', 'T', 'cocap.QIP(2)', 'QIP(3)')
('-d', 'AA', 'cocap.QIP(2)', 'QIP(3)') => ('-d', 'EA', 'cocap.QIP(2)', 'QIP(3)')
('p', 'A', 'cocap.QIP(2)', 'co.QIP(3)') => ('p', 'R', 'cocap.QIP(2)', 'co.QIP(3)')
('p', 'A', 'cocap.QIP(2)', 'co.QIP(3)') => ('p', 'AA', 'cocap.QIP(2)', 'co.QIP(3)')
('p', 'A', 'cocap.QIP(2)', 'QIP(3)') => ('p', 'R', 'cocap.QIP(2)', 'QIP(3)')
('p', 'A', 'cocap.QIP(2)', 'QIP(3)') => ('p', 'AA', 'cocap.QIP(2)', 'QIP(3)')
('p', 'A', 'cocap.QAM', 'QIP(3)') => ('p', 'R', 'cocap.QAM', 'QIP(3)')
('p', 'A', 'cocap.QAM', 'QIP(3)') => ('p', 'AA', 'cocap.QAM', 'QIP(3)')
('p', 'A', 'cocap.QAM', 'co.QIP(3)') => ('p', 'R', 'cocap.QAM', 'co.QIP(3)')
('p', 'A', 'cocap.QAM', 'co.QIP(3)') => ('p', 'AA', 'cocap.QAM', 'co.QIP(3)')
('p', 'A', 'cocap.QAM', 'cocap.QIP(3)') => ('p', 'R', 'cocap.QAM', 'cocap.QIP(3)')
('p', 'A', 'cocap.QAM', 'cocap.QIP(3)') => ('p', 'AA', 'cocap.QAM', 'cocap.QIP(3)')
('p', 'AA', 'cocap.QAM', 'cocap.QIP(3)') => ('p', 'T', 'cocap.QAM', 'cocap.QIP(3)')
('p', 'AA', 'cocap.QAM', 'cocap.QIP(3)') => ('p', 'EA', 'cocap.QAM', 'cocap.QIP(3)')
('p', 'AA', 'cocap.QAM', 'co.QIP(3)') => ('p', 'T', 'cocap.QAM', 'co.QIP(3)')
('p', 'AA', 'cocap.QAM', 'co.QIP(3)') => ('p', 'EA', 'cocap.QAM', 'co.QIP(3)')
('p', 'AA', 'cocap.QAM', 'QIP(3)') => ('p', 'T', 'cocap.QAM', 'QIP(3)')
('p', 'AA', 'cocap.QAM', 'QIP(3)') => ('p', 'EA', 'cocap.QAM', 'QIP(3)')
('p', 'AA', 'cocap.QIP(2)', 'QIP(3)') => ('p', 'T', 'cocap.QIP(2)', 'QIP(3)')
('p', 'AA', 'cocap.QIP(2)', 'QIP(3)') => ('p', 'EA', 'cocap.QIP(2)', 'QIP(3)')
('p', 'AA', 'cocap.QIP(2)', 'co.QIP(3)') => ('p', 'T', 'cocap.QIP(2)', 'co.QIP(3)')
('p', 'AA', 'cocap.QIP(2)', 'co.QIP(3)') => ('p', 'EA', 'cocap.QIP(2)', 'co.QIP(3)')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QIP(3)') => ('p', 'T', 'cocap.QIP(2)', 'cocap.QIP(3)')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QIP(3)') => ('p', 'EA', 'cocap.QIP(2)', 'cocap.QIP(3)')
('p', 'E', 'co.QAM', 'co.QIP(3)') => ('-d', 'E', 'co.QAM', 'co.QIP(3)')
('p', 'E', 'QAM', 'QIP(3)') => ('-d', 'E', 'QAM', 'QIP(3)')
('p', 'A', 'co.QAM', 'co.QIP(3)') => ('-d', 'A', 'co.QAM', 'co.QIP(3)')
('p', 'A', 'co.QAM', 'co.QIP(3)') => ('p', 'R', 'co.QAM', 'co.QIP(3)')
('p', 'A', 'co.QAM', 'co.QIP(3)') => ('p', 'AA', 'co.QAM', 'co.QIP(3)')
('p', 'A', 'QAM', 'QIP(3)') => ('-d', 'A', 'QAM', 'QIP(3)')
('p', 'A', 'QAM', 'QIP(3)') => ('p', 'R', 'QAM', 'QIP(3)')
('p', 'A', 'QAM', 'QIP(3)') => ('p', 'AA', 'QAM', 'QIP(3)')
('p', 'AA', 'QAM', 'QIP(3)') => ('-d', 'AA', 'QAM', 'QIP(3)')
('p', 'AA', 'QAM', 'QIP(3)') => ('p', 'T', 'QAM', 'QIP(3)')
('p', 'AA', 'QAM', 'QIP(3)') => ('p', 'EA', 'QAM', 'QIP(3)')
('p', 'AA', 'co.QAM', 'co.QIP(3)') => ('-d', 'AA', 'co.QAM', 'co.QIP(3)')
('p', 'AA', 'co.QAM', 'co.QIP(3)') => ('p', 'T', 'co.QAM', 'co.QIP(3)')
('p', 'AA', 'co.QAM', 'co.QIP(3)') => ('p', 'EA', 'co.QAM', 'co.QIP(3)')
('p', 'EA', 'co.QAM', 'co.QIP(3)') => ('-d', 'EA', 'co.QAM', 'co.QIP(3)')
('p', 'EA', 'QAM', 'QIP(3)') => ('-d', 'EA', 'QAM', 'QIP(3)')
('p', 'T', 'co.QAM', 'co.QIP(3)') => ('-d', 'T', 'co.QAM', 'co.QIP(3)')
('p', 'T', 'QAM', 'QIP(3)') => ('-d', 'T', 'QAM', 'QIP(3)')
('p', 'R', 'QAM', 'QIP(3)') => ('-d', 'R', 'QAM', 'QIP(3)')
('p', 'R', 'co.QAM', 'co.QIP(3)') => ('-d', 'R', 'co.QAM', 'co.QIP(3)')
('p', 'AA', 'co.QIP(2)', 'co.QIP(3)') => ('-d', 'AA', 'co.QIP(2)', 'co.QIP(3)')
('p', 'AA', 'co.QIP(2)', 'co.QIP(3)') => ('p', 'T', 'co.QIP(2)', 'co.QIP(3)')
('p', 'AA', 'co.QIP(2)', 'co.QIP(3)') => ('p', 'EA', 'co.QIP(2)', 'co.QIP(3)')
('p', 'AA', 'QIP(2)', 'QIP(3)') => ('-d', 'AA', 'QIP(2)', 'QIP(3)')
('p', 'AA', 'QIP(2)', 'QIP(3)') => ('p', 'T', 'QIP(2)', 'QIP(3)')
('p', 'AA', 'QIP(2)', 'QIP(3)') => ('p', 'EA', 'QIP(2)', 'QIP(3)')
('p', 'EA', 'QIP(2)', 'QIP(3)') => ('-d', 'EA', 'QIP(2)', 'QIP(3)')
('p', 'EA', 'QIP(2)', 'QIP(3)') => ('p', 'E', 'QIP(2)', 'QIP(3)')
('p', 'EA', 'co.QIP(2)', 'co.QIP(3)') => ('-d', 'EA', 'co.QIP(2)', 'co.QIP(3)')
('p', 'EA', 'co.QIP(2)', 'co.QIP(3)') => ('p', 'E', 'co.QIP(2)', 'co.QIP(3)')
('p', 'E', 'co.QIP(2)', 'co.QIP(3)') => ('-d', 'E', 'co.QIP(2)', 'co.QIP(3)')
('p', 'E', 'QIP(2)', 'QIP(3)') => ('-d', 'E', 'QIP(2)', 'QIP(3)')
('p', 'T', 'QIP(2)', 'QIP(3)') => ('-d', 'T', 'QIP(2)', 'QIP(3)')
('p', 'T', 'co.QIP(2)', 'co.QIP(3)') => ('-d', 'T', 'co.QIP(2)', 'co.QIP(3)')
('p', 'R', 'co.QIP(2)', 'co.QIP(3)') => ('-d', 'R', 'co.QIP(2)', 'co.QIP(3)')
('p', 'R', 'QIP(2)', 'QIP(3)') => ('-d', 'R', 'QIP(2)', 'QIP(3)')
('p', 'A', 'AWPP', 'PP') => ('-d', 'A', 'AWPP', 'PP')
('p', 'A', 'AWPP', 'PP') => ('p', 'R', 'AWPP', 'PP')
('p', 'A', 'AWPP', 'PP') => ('p', 'AA', 'AWPP', 'PP')
('p', 'A', 'co.AWPP', 'PP') => ('-d', 'A', 'co.AWPP', 'PP')
('p', 'A', 'co.AWPP', 'PP') => ('p', 'R', 'co.AWPP', 'PP')
('p', 'A', 'co.AWPP', 'PP') => ('p', 'AA', 'co.AWPP', 'PP')
('p', 'A', 'cocap.AWPP', 'PP') => ('-d', 'A', 'cocap.AWPP', 'PP')
('p', 'A', 'cocap.AWPP', 'PP') => ('p', 'R', 'cocap.AWPP', 'PP')
('p', 'A', 'cocap.AWPP', 'PP') => ('p', 'AA', 'cocap.AWPP', 'PP')
('d', 'A', 'ALL', 'cocap.AWPP') => ('-p', 'A', 'ALL', 'cocap.AWPP')
('d', 'A', 'ALL', 'co.AWPP') => ('-p', 'A', 'ALL', 'co.AWPP')
('d', 'A', 'ALL', 'AWPP') => ('-p', 'A', 'ALL', 'AWPP')
('d', 'A', 'co.Sigma_2P', 'cocap.AWPP') => ('-p', 'A', 'co.Sigma_2P', 'cocap.AWPP')
('d', 'A', 'Sigma_2P', 'cocap.AWPP') => ('-p', 'A', 'Sigma_2P', 'cocap.AWPP')
('-d', 'A', 'cocap.AWPP', 'P^Sharp-P') => ('-d', 'R', 'cocap.AWPP', 'P^Sharp-P')
('-d', 'A', 'cocap.AWPP', 'P^Sharp-P') => ('-d', 'AA', 'cocap.AWPP', 'P^Sharp-P')
('-d', 'A', 'BQP', 'P^Sharp-P') => ('-d', 'AA', 'BQP', 'P^Sharp-P')
('-d', 'AA', 'BQP', 'P^Sharp-P') => ('-d', 'T', 'BQP', 'P^Sharp-P')
('-d', 'AA', 'BQP', 'P^Sharp-P') => ('-d', 'EA', 'BQP', 'P^Sharp-P')
('-d', 'AA', 'cocap.AWPP', 'P^Sharp-P') => ('-d', 'T', 'cocap.AWPP', 'P^Sharp-P')
('-d', 'AA', 'cocap.AWPP', 'P^Sharp-P') => ('-d', 'EA', 'cocap.AWPP', 'P^Sharp-P')
('p', 'A', 'cocap.AWPP', 'P^Sharp-P') => ('p', 'R', 'cocap.AWPP', 'P^Sharp-P')
('p', 'A', 'cocap.AWPP', 'P^Sharp-P') => ('p', 'AA', 'cocap.AWPP', 'P^Sharp-P')
('p', 'A', 'BQP', 'P^Sharp-P') => ('p', 'R', 'BQP', 'P^Sharp-P')
('p', 'A', 'BQP', 'P^Sharp-P') => ('p', 'AA', 'BQP', 'P^Sharp-P')
('p', 'AA', 'BQP', 'P^Sharp-P') => ('p', 'T', 'BQP', 'P^Sharp-P')
('p', 'AA', 'BQP', 'P^Sharp-P') => ('p', 'EA', 'BQP', 'P^Sharp-P')
('p', 'AA', 'cocap.AWPP', 'P^Sharp-P') => ('p', 'T', 'cocap.AWPP', 'P^Sharp-P')
('p', 'AA', 'cocap.AWPP', 'P^Sharp-P') => ('p', 'EA', 'cocap.AWPP', 'P^Sharp-P')
('d', 'A', 'PP', 'SZK') => ('-p', 'A', 'PP', 'SZK')
('p', 'A', 'BQP', 'PP') => ('-d', 'A', 'BQP', 'PP')
('p', 'A', 'BQP', 'PP') => ('p', 'R', 'BQP', 'PP')
('p', 'A', 'BQP', 'PP') => ('p', 'AA', 'BQP', 'PP')
('-d', 'A', 'BQP', 'PP/poly') => ('-d', 'AA', 'BQP', 'PP/poly')
('-d', 'AA', 'BQP', 'PP/poly') => ('-d', 'T', 'BQP', 'PP/poly')
('-d', 'AA', 'BQP', 'PP/poly') => ('-d', 'EA', 'BQP', 'PP/poly')
('p', 'A', 'BQP', 'PP/poly') => ('p', 'R', 'BQP', 'PP/poly')
('p', 'A', 'BQP', 'PP/poly') => ('p', 'AA', 'BQP', 'PP/poly')
('p', 'AA', 'BQP', 'PP/poly') => ('p', 'T', 'BQP', 'PP/poly')
('p', 'AA', 'BQP', 'PP/poly') => ('p', 'EA', 'BQP', 'PP/poly')
('d', 'A', 'PP', 'PostBPP') => ('-p', 'A', 'PP', 'PostBPP')
('p', 'AA', 'BQP', 'PP') => ('-d', 'AA', 'BQP', 'PP')
('p', 'AA', 'BQP', 'PP') => ('p', 'T', 'BQP', 'PP')
('p', 'AA', 'BQP', 'PP') => ('p', 'EA', 'BQP', 'PP')
('p', 'EA', 'BQP', 'PP') => ('-d', 'EA', 'BQP', 'PP')
('p', 'T', 'BQP', 'PP') => ('-d', 'T', 'BQP', 'PP')
('d', 'A', 'Delta_2P', 'cocap.AWPP') => ('-p', 'A', 'Delta_2P', 'cocap.AWPP')
('d', 'A', 'Delta_2P', 'co.AWPP') => ('-p', 'A', 'Delta_2P', 'co.AWPP')
('d', 'A', 'Delta_2P', 'AWPP') => ('-p', 'A', 'Delta_2P', 'AWPP')
('-d', 'A', 'cocap.AWPP', 'PSPACE/poly') => ('-d', 'R', 'cocap.AWPP', 'PSPACE/poly')
('-d', 'A', 'cocap.AWPP', 'PSPACE/poly') => ('-d', 'AA', 'cocap.AWPP', 'PSPACE/poly')
('-d', 'AA', 'cocap.AWPP', 'PSPACE/poly') => ('-d', 'T', 'cocap.AWPP', 'PSPACE/poly')
('-d', 'AA', 'cocap.AWPP', 'PSPACE/poly') => ('-d', 'EA', 'cocap.AWPP', 'PSPACE/poly')
('p', 'A', 'cocap.AWPP', 'PSPACE/poly') => ('p', 'R', 'cocap.AWPP', 'PSPACE/poly')
('p', 'A', 'cocap.AWPP', 'PSPACE/poly') => ('p', 'AA', 'cocap.AWPP', 'PSPACE/poly')
('p', 'AA', 'cocap.AWPP', 'PSPACE/poly') => ('p', 'T', 'cocap.AWPP', 'PSPACE/poly')
('p', 'AA', 'cocap.AWPP', 'PSPACE/poly') => ('p', 'EA', 'cocap.AWPP', 'PSPACE/poly')
('-d', 'A', 'cocap.AWPP', 'PSPACE') => ('-d', 'R', 'cocap.AWPP', 'PSPACE')
('-d', 'A', 'cocap.AWPP', 'PSPACE') => ('-d', 'AA', 'cocap.AWPP', 'PSPACE')
('-d', 'AA', 'cocap.AWPP', 'PSPACE') => ('-d', 'T', 'cocap.AWPP', 'PSPACE')
('-d', 'AA', 'cocap.AWPP', 'PSPACE') => ('-d', 'EA', 'cocap.AWPP', 'PSPACE')
('p', 'A', 'cocap.AWPP', 'PSPACE') => ('p', 'R', 'cocap.AWPP', 'PSPACE')
('p', 'A', 'cocap.AWPP', 'PSPACE') => ('p', 'AA', 'cocap.AWPP', 'PSPACE')
('p', 'AA', 'cocap.AWPP', 'PSPACE') => ('p', 'T', 'cocap.AWPP', 'PSPACE')
('p', 'AA', 'cocap.AWPP', 'PSPACE') => ('p', 'EA', 'cocap.AWPP', 'PSPACE')
('-d', 'A', 'cocap.AWPP', 'PP/poly') => ('-d', 'R', 'cocap.AWPP', 'PP/poly')
('-d', 'A', 'cocap.AWPP', 'PP/poly') => ('-d', 'AA', 'cocap.AWPP', 'PP/poly')
('-d', 'AA', 'cocap.AWPP', 'PP/poly') => ('-d', 'T', 'cocap.AWPP', 'PP/poly')
('-d', 'AA', 'cocap.AWPP', 'PP/poly') => ('-d', 'EA', 'cocap.AWPP', 'PP/poly')
('p', 'A', 'cocap.AWPP', 'PP/poly') => ('p', 'R', 'cocap.AWPP', 'PP/poly')
('p', 'A', 'cocap.AWPP', 'PP/poly') => ('p', 'AA', 'cocap.AWPP', 'PP/poly')
('p', 'AA', 'cocap.AWPP', 'PP/poly') => ('p', 'T', 'cocap.AWPP', 'PP/poly')
('p', 'AA', 'cocap.AWPP', 'PP/poly') => ('p', 'EA', 'cocap.AWPP', 'PP/poly')
('p', 'AA', 'cocap.AWPP', 'PP') => ('-d', 'AA', 'cocap.AWPP', 'PP')
('p', 'AA', 'cocap.AWPP', 'PP') => ('p', 'T', 'cocap.AWPP', 'PP')
('p', 'AA', 'cocap.AWPP', 'PP') => ('p', 'EA', 'cocap.AWPP', 'PP')
('p', 'EA', 'cocap.AWPP', 'PP') => ('-d', 'EA', 'cocap.AWPP', 'PP')
('p', 'EA', 'cocap.AWPP', 'PP') => ('p', 'E', 'cocap.AWPP', 'PP')
('p', 'E', 'cocap.AWPP', 'PP') => ('-d', 'E', 'cocap.AWPP', 'PP')
('p', 'T', 'cocap.AWPP', 'PP') => ('-d', 'T', 'cocap.AWPP', 'PP')
('p', 'R', 'cocap.AWPP', 'PP') => ('-d', 'R', 'cocap.AWPP', 'PP')
('-d', 'A', 'co.AWPP', 'P^Sharp-P') => ('-d', 'R', 'co.AWPP', 'P^Sharp-P')
('-d', 'A', 'co.AWPP', 'P^Sharp-P') => ('-d', 'AA', 'co.AWPP', 'P^Sharp-P')
('-d', 'A', 'AWPP', 'P^Sharp-P') => ('-d', 'R', 'AWPP', 'P^Sharp-P')
('-d', 'A', 'AWPP', 'P^Sharp-P') => ('-d', 'AA', 'AWPP', 'P^Sharp-P')
('-d', 'AA', 'AWPP', 'P^Sharp-P') => ('-d', 'T', 'AWPP', 'P^Sharp-P')
('-d', 'AA', 'AWPP', 'P^Sharp-P') => ('-d', 'EA', 'AWPP', 'P^Sharp-P')
('-d', 'AA', 'co.AWPP', 'P^Sharp-P') => ('-d', 'T', 'co.AWPP', 'P^Sharp-P')
('-d', 'AA', 'co.AWPP', 'P^Sharp-P') => ('-d', 'EA', 'co.AWPP', 'P^Sharp-P')
('p', 'A', 'co.AWPP', 'P^Sharp-P') => ('p', 'R', 'co.AWPP', 'P^Sharp-P')
('p', 'A', 'co.AWPP', 'P^Sharp-P') => ('p', 'AA', 'co.AWPP', 'P^Sharp-P')
('p', 'A', 'AWPP', 'P^Sharp-P') => ('p', 'R', 'AWPP', 'P^Sharp-P')
('p', 'A', 'AWPP', 'P^Sharp-P') => ('p', 'AA', 'AWPP', 'P^Sharp-P')
('p', 'AA', 'AWPP', 'P^Sharp-P') => ('p', 'T', 'AWPP', 'P^Sharp-P')
('p', 'AA', 'AWPP', 'P^Sharp-P') => ('p', 'EA', 'AWPP', 'P^Sharp-P')
('p', 'AA', 'co.AWPP', 'P^Sharp-P') => ('p', 'T', 'co.AWPP', 'P^Sharp-P')
('p', 'AA', 'co.AWPP', 'P^Sharp-P') => ('p', 'EA', 'co.AWPP', 'P^Sharp-P')
('-d', 'A', 'co.AWPP', 'PSPACE/poly') => ('-d', 'R', 'co.AWPP', 'PSPACE/poly')
('-d', 'A', 'co.AWPP', 'PSPACE/poly') => ('-d', 'AA', 'co.AWPP', 'PSPACE/poly')
('-d', 'A', 'AWPP', 'PSPACE/poly') => ('-d', 'R', 'AWPP', 'PSPACE/poly')
('-d', 'A', 'AWPP', 'PSPACE/poly') => ('-d', 'AA', 'AWPP', 'PSPACE/poly')
('-d', 'AA', 'AWPP', 'PSPACE/poly') => ('-d', 'T', 'AWPP', 'PSPACE/poly')
('-d', 'AA', 'AWPP', 'PSPACE/poly') => ('-d', 'EA', 'AWPP', 'PSPACE/poly')
('-d', 'AA', 'co.AWPP', 'PSPACE/poly') => ('-d', 'T', 'co.AWPP', 'PSPACE/poly')
('-d', 'AA', 'co.AWPP', 'PSPACE/poly') => ('-d', 'EA', 'co.AWPP', 'PSPACE/poly')
('p', 'A', 'co.AWPP', 'PSPACE/poly') => ('p', 'R', 'co.AWPP', 'PSPACE/poly')
('p', 'A', 'co.AWPP', 'PSPACE/poly') => ('p', 'AA', 'co.AWPP', 'PSPACE/poly')
('p', 'A', 'AWPP', 'PSPACE/poly') => ('p', 'R', 'AWPP', 'PSPACE/poly')
('p', 'A', 'AWPP', 'PSPACE/poly') => ('p', 'AA', 'AWPP', 'PSPACE/poly')
('p', 'AA', 'AWPP', 'PSPACE/poly') => ('p', 'T', 'AWPP', 'PSPACE/poly')
('p', 'AA', 'AWPP', 'PSPACE/poly') => ('p', 'EA', 'AWPP', 'PSPACE/poly')
('p', 'AA', 'co.AWPP', 'PSPACE/poly') => ('p', 'T', 'co.AWPP', 'PSPACE/poly')
('p', 'AA', 'co.AWPP', 'PSPACE/poly') => ('p', 'EA', 'co.AWPP', 'PSPACE/poly')
('-d', 'A', 'co.AWPP', 'PSPACE') => ('-d', 'R', 'co.AWPP', 'PSPACE')
('-d', 'A', 'co.AWPP', 'PSPACE') => ('-d', 'AA', 'co.AWPP', 'PSPACE')
('-d', 'A', 'AWPP', 'PSPACE') => ('-d', 'R', 'AWPP', 'PSPACE')
('-d', 'A', 'AWPP', 'PSPACE') => ('-d', 'AA', 'AWPP', 'PSPACE')
('-d', 'AA', 'AWPP', 'PSPACE') => ('-d', 'T', 'AWPP', 'PSPACE')
('-d', 'AA', 'AWPP', 'PSPACE') => ('-d', 'EA', 'AWPP', 'PSPACE')
('-d', 'AA', 'co.AWPP', 'PSPACE') => ('-d', 'T', 'co.AWPP', 'PSPACE')
('-d', 'AA', 'co.AWPP', 'PSPACE') => ('-d', 'EA', 'co.AWPP', 'PSPACE')
('p', 'A', 'co.AWPP', 'PSPACE') => ('p', 'R', 'co.AWPP', 'PSPACE')
('p', 'A', 'co.AWPP', 'PSPACE') => ('p', 'AA', 'co.AWPP', 'PSPACE')
('p', 'A', 'AWPP', 'PSPACE') => ('p', 'R', 'AWPP', 'PSPACE')
('p', 'A', 'AWPP', 'PSPACE') => ('p', 'AA', 'AWPP', 'PSPACE')
('p', 'AA', 'AWPP', 'PSPACE') => ('p', 'T', 'AWPP', 'PSPACE')
('p', 'AA', 'AWPP', 'PSPACE') => ('p', 'EA', 'AWPP', 'PSPACE')
('p', 'AA', 'co.AWPP', 'PSPACE') => ('p', 'T', 'co.AWPP', 'PSPACE')
('p', 'AA', 'co.AWPP', 'PSPACE') => ('p', 'EA', 'co.AWPP', 'PSPACE')
('-d', 'A', 'co.AWPP', 'PP/poly') => ('-d', 'R', 'co.AWPP', 'PP/poly')
('-d', 'A', 'co.AWPP', 'PP/poly') => ('-d', 'AA', 'co.AWPP', 'PP/poly')
('-d', 'A', 'AWPP', 'PP/poly') => ('-d', 'R', 'AWPP', 'PP/poly')
('-d', 'A', 'AWPP', 'PP/poly') => ('-d', 'AA', 'AWPP', 'PP/poly')
('-d', 'AA', 'AWPP', 'PP/poly') => ('-d', 'T', 'AWPP', 'PP/poly')
('-d', 'AA', 'AWPP', 'PP/poly') => ('-d', 'EA', 'AWPP', 'PP/poly')
('-d', 'AA', 'co.AWPP', 'PP/poly') => ('-d', 'T', 'co.AWPP', 'PP/poly')
('-d', 'AA', 'co.AWPP', 'PP/poly') => ('-d', 'EA', 'co.AWPP', 'PP/poly')
('p', 'A', 'co.AWPP', 'PP/poly') => ('p', 'R', 'co.AWPP', 'PP/poly')
('p', 'A', 'co.AWPP', 'PP/poly') => ('p', 'AA', 'co.AWPP', 'PP/poly')
('p', 'A', 'AWPP', 'PP/poly') => ('p', 'R', 'AWPP', 'PP/poly')
('p', 'A', 'AWPP', 'PP/poly') => ('p', 'AA', 'AWPP', 'PP/poly')
('p', 'AA', 'AWPP', 'PP/poly') => ('p', 'T', 'AWPP', 'PP/poly')
('p', 'AA', 'AWPP', 'PP/poly') => ('p', 'EA', 'AWPP', 'PP/poly')
('p', 'AA', 'co.AWPP', 'PP/poly') => ('p', 'T', 'co.AWPP', 'PP/poly')
('p', 'AA', 'co.AWPP', 'PP/poly') => ('p', 'EA', 'co.AWPP', 'PP/poly')
('p', 'AA', 'co.AWPP', 'PP') => ('-d', 'AA', 'co.AWPP', 'PP')
('p', 'AA', 'co.AWPP', 'PP') => ('p', 'T', 'co.AWPP', 'PP')
('p', 'AA', 'co.AWPP', 'PP') => ('p', 'EA', 'co.AWPP', 'PP')
('p', 'AA', 'AWPP', 'PP') => ('-d', 'AA', 'AWPP', 'PP')
('p', 'AA', 'AWPP', 'PP') => ('p', 'T', 'AWPP', 'PP')
('p', 'AA', 'AWPP', 'PP') => ('p', 'EA', 'AWPP', 'PP')
('p', 'EA', 'AWPP', 'PP') => ('-d', 'EA', 'AWPP', 'PP')
('p', 'EA', 'AWPP', 'PP') => ('p', 'E', 'AWPP', 'PP')
('p', 'EA', 'co.AWPP', 'PP') => ('-d', 'EA', 'co.AWPP', 'PP')
('p', 'EA', 'co.AWPP', 'PP') => ('p', 'E', 'co.AWPP', 'PP')
('p', 'E', 'co.AWPP', 'PP') => ('-d', 'E', 'co.AWPP', 'PP')
('p', 'E', 'AWPP', 'PP') => ('-d', 'E', 'AWPP', 'PP')
('p', 'T', 'AWPP', 'PP') => ('-d', 'T', 'AWPP', 'PP')
('p', 'T', 'co.AWPP', 'PP') => ('-d', 'T', 'co.AWPP', 'PP')
('p', 'R', 'co.AWPP', 'PP') => ('-d', 'R', 'co.AWPP', 'PP')
('p', 'R', 'AWPP', 'PP') => ('-d', 'R', 'AWPP', 'PP')
('p', 'A', 'QMA', 'QAM') => ('-d', 'A', 'QMA', 'QAM')
('p', 'A', 'QMA', 'QAM') => ('p', 'R', 'QMA', 'QAM')
('p', 'A', 'QMA', 'QAM') => ('p', 'AA', 'QMA', 'QAM')
('p', 'A', 'co.QMA', 'co.QAM') => ('-d', 'A', 'co.QMA', 'co.QAM')
('p', 'A', 'co.QMA', 'co.QAM') => ('p', 'R', 'co.QMA', 'co.QAM')
('p', 'A', 'co.QMA', 'co.QAM') => ('p', 'AA', 'co.QMA', 'co.QAM')
('p', 'A', 'cocap.QMA', 'cocap.QAM') => ('-d', 'A', 'cocap.QMA', 'cocap.QAM')
('p', 'A', 'cocap.QMA', 'cocap.QAM') => ('p', 'R', 'cocap.QMA', 'cocap.QAM')
('p', 'A', 'cocap.QMA', 'cocap.QAM') => ('p', 'AA', 'cocap.QMA', 'cocap.QAM')
('p', 'A', 'P', 'cocap.QAM') => ('-d', 'A', 'P', 'cocap.QAM')
('p', 'A', 'P', 'cocap.QAM') => ('p', 'R', 'P', 'cocap.QAM')
('p', 'A', 'P', 'cocap.QAM') => ('p', 'AA', 'P', 'cocap.QAM')
('p', 'E', 'EXP_plo', 'cocap.QAM') => ('-d', 'E', 'EXP_plo', 'cocap.QAM')
('-d', 'A', 'P', 'QIP(2)') => ('-d', 'R', 'P', 'QIP(2)')
('-d', 'A', 'P', 'QIP(2)') => ('-d', 'AA', 'P', 'QIP(2)')
('-d', 'A', 'P', 'co.QIP(2)') => ('-d', 'R', 'P', 'co.QIP(2)')
('-d', 'A', 'P', 'co.QIP(2)') => ('-d', 'AA', 'P', 'co.QIP(2)')
('-d', 'A', 'P', 'cocap.QIP(2)') => ('-d', 'R', 'P', 'cocap.QIP(2)')
('-d', 'A', 'P', 'cocap.QIP(2)') => ('-d', 'AA', 'P', 'cocap.QIP(2)')
('-d', 'A', 'P', 'cocap.QIP(3)') => ('-d', 'R', 'P', 'cocap.QIP(3)')
('-d', 'A', 'P', 'cocap.QIP(3)') => ('-d', 'AA', 'P', 'cocap.QIP(3)')
('-d', 'A', 'P', 'co.QIP(3)') => ('-d', 'R', 'P', 'co.QIP(3)')
('-d', 'A', 'P', 'co.QIP(3)') => ('-d', 'AA', 'P', 'co.QIP(3)')
('-d', 'A', 'P', 'QIP(3)') => ('-d', 'R', 'P', 'QIP(3)')
('-d', 'A', 'P', 'QIP(3)') => ('-d', 'AA', 'P', 'QIP(3)')
('-d', 'AA', 'P', 'QIP(3)') => ('-d', 'T', 'P', 'QIP(3)')
('-d', 'AA', 'P', 'QIP(3)') => ('-d', 'EA', 'P', 'QIP(3)')
('-d', 'AA', 'P', 'co.QIP(3)') => ('-d', 'T', 'P', 'co.QIP(3)')
('-d', 'AA', 'P', 'co.QIP(3)') => ('-d', 'EA', 'P', 'co.QIP(3)')
('-d', 'AA', 'P', 'cocap.QIP(3)') => ('-d', 'T', 'P', 'cocap.QIP(3)')
('-d', 'AA', 'P', 'cocap.QIP(3)') => ('-d', 'EA', 'P', 'cocap.QIP(3)')
('-d', 'AA', 'P', 'cocap.QIP(2)') => ('-d', 'T', 'P', 'cocap.QIP(2)')
('-d', 'AA', 'P', 'cocap.QIP(2)') => ('-d', 'EA', 'P', 'cocap.QIP(2)')
('-d', 'AA', 'P', 'QIP(2)') => ('-d', 'T', 'P', 'QIP(2)')
('-d', 'AA', 'P', 'QIP(2)') => ('-d', 'EA', 'P', 'QIP(2)')
('-d', 'AA', 'P', 'co.QIP(2)') => ('-d', 'T', 'P', 'co.QIP(2)')
('-d', 'AA', 'P', 'co.QIP(2)') => ('-d', 'EA', 'P', 'co.QIP(2)')
('p', 'A', 'P', 'QIP(2)') => ('p', 'R', 'P', 'QIP(2)')
('p', 'A', 'P', 'QIP(2)') => ('p', 'AA', 'P', 'QIP(2)')
('p', 'A', 'P', 'co.QIP(2)') => ('p', 'R', 'P', 'co.QIP(2)')
('p', 'A', 'P', 'co.QIP(2)') => ('p', 'AA', 'P', 'co.QIP(2)')
('p', 'A', 'P', 'cocap.QIP(2)') => ('p', 'R', 'P', 'cocap.QIP(2)')
('p', 'A', 'P', 'cocap.QIP(2)') => ('p', 'AA', 'P', 'cocap.QIP(2)')
('p', 'A', 'P', 'cocap.QIP(3)') => ('p', 'R', 'P', 'cocap.QIP(3)')
('p', 'A', 'P', 'cocap.QIP(3)') => ('p', 'AA', 'P', 'cocap.QIP(3)')
('p', 'A', 'P', 'co.QIP(3)') => ('p', 'R', 'P', 'co.QIP(3)')
('p', 'A', 'P', 'co.QIP(3)') => ('p', 'AA', 'P', 'co.QIP(3)')
('p', 'A', 'P', 'QIP(3)') => ('p', 'R', 'P', 'QIP(3)')
('p', 'A', 'P', 'QIP(3)') => ('p', 'AA', 'P', 'QIP(3)')
('p', 'AA', 'P', 'QIP(3)') => ('p', 'T', 'P', 'QIP(3)')
('p', 'AA', 'P', 'QIP(3)') => ('p', 'EA', 'P', 'QIP(3)')
('p', 'AA', 'P', 'co.QIP(3)') => ('p', 'T', 'P', 'co.QIP(3)')
('p', 'AA', 'P', 'co.QIP(3)') => ('p', 'EA', 'P', 'co.QIP(3)')
('p', 'AA', 'P', 'cocap.QIP(3)') => ('p', 'T', 'P', 'cocap.QIP(3)')
('p', 'AA', 'P', 'cocap.QIP(3)') => ('p', 'EA', 'P', 'cocap.QIP(3)')
('p', 'AA', 'P', 'cocap.QIP(2)') => ('p', 'T', 'P', 'cocap.QIP(2)')
('p', 'AA', 'P', 'cocap.QIP(2)') => ('p', 'EA', 'P', 'cocap.QIP(2)')
('p', 'AA', 'P', 'QIP(2)') => ('p', 'T', 'P', 'QIP(2)')
('p', 'AA', 'P', 'QIP(2)') => ('p', 'EA', 'P', 'QIP(2)')
('p', 'AA', 'P', 'co.QIP(2)') => ('p', 'T', 'P', 'co.QIP(2)')
('p', 'AA', 'P', 'co.QIP(2)') => ('p', 'EA', 'P', 'co.QIP(2)')
('-d', 'A', 'P', 'CH') => ('-d', 'R', 'P', 'CH')
('-d', 'A', 'P', 'CH') => ('-d', 'AA', 'P', 'CH')
('-d', 'AA', 'P', 'CH') => ('-d', 'T', 'P', 'CH')
('-d', 'AA', 'P', 'CH') => ('-d', 'EA', 'P', 'CH')
('p', 'A', 'P', 'CH') => ('p', 'R', 'P', 'CH')
('p', 'A', 'P', 'CH') => ('p', 'AA', 'P', 'CH')
('p', 'AA', 'P', 'CH') => ('p', 'T', 'P', 'CH')
('p', 'AA', 'P', 'CH') => ('p', 'EA', 'P', 'CH')
('-d', 'A', 'P', 'QAM') => ('-d', 'R', 'P', 'QAM')
('-d', 'A', 'P', 'QAM') => ('-d', 'AA', 'P', 'QAM')
('-d', 'A', 'P', 'co.QAM') => ('-d', 'R', 'P', 'co.QAM')
('-d', 'A', 'P', 'co.QAM') => ('-d', 'AA', 'P', 'co.QAM')
('-d', 'A', 'P', 'cocap.QAM') => ('-d', 'R', 'P', 'cocap.QAM')
('-d', 'A', 'P', 'cocap.QAM') => ('-d', 'AA', 'P', 'cocap.QAM')
('-d', 'AA', 'P', 'cocap.QAM') => ('-d', 'T', 'P', 'cocap.QAM')
('-d', 'AA', 'P', 'cocap.QAM') => ('-d', 'EA', 'P', 'cocap.QAM')
('-d', 'AA', 'P', 'QAM') => ('-d', 'T', 'P', 'QAM')
('-d', 'AA', 'P', 'QAM') => ('-d', 'EA', 'P', 'QAM')
('-d', 'AA', 'P', 'co.QAM') => ('-d', 'T', 'P', 'co.QAM')
('-d', 'AA', 'P', 'co.QAM') => ('-d', 'EA', 'P', 'co.QAM')
('p', 'A', 'P', 'QAM') => ('p', 'R', 'P', 'QAM')
('p', 'A', 'P', 'QAM') => ('p', 'AA', 'P', 'QAM')
('p', 'A', 'P', 'co.QAM') => ('p', 'R', 'P', 'co.QAM')
('p', 'A', 'P', 'co.QAM') => ('p', 'AA', 'P', 'co.QAM')
('p', 'AA', 'P', 'co.QAM') => ('p', 'T', 'P', 'co.QAM')
('p', 'AA', 'P', 'co.QAM') => ('p', 'EA', 'P', 'co.QAM')
('p', 'AA', 'P', 'QAM') => ('p', 'T', 'P', 'QAM')
('p', 'AA', 'P', 'QAM') => ('p', 'EA', 'P', 'QAM')
('p', 'AA', 'P', 'cocap.QAM') => ('p', 'T', 'P', 'cocap.QAM')
('p', 'AA', 'P', 'cocap.QAM') => ('p', 'EA', 'P', 'cocap.QAM')
('d', 'A', 'cocap.QAM', 'P') => ('-p', 'A', 'cocap.QAM', 'P')
('d', 'A', 'QAM', 'P') => ('-p', 'A', 'QAM', 'P')
('d', 'A', 'co.QAM', 'P') => ('-p', 'A', 'co.QAM', 'P')
('d', 'A', 'cocap.QAM', 'SZK') => ('-p', 'A', 'cocap.QAM', 'SZK')
('d', 'A', 'QAM', 'SZK') => ('-p', 'A', 'QAM', 'SZK')
('d', 'A', 'co.QAM', 'SZK') => ('-p', 'A', 'co.QAM', 'SZK')
('-d', 'A', 'cocap.QMA', 'QIP(2)') => ('-d', 'R', 'cocap.QMA', 'QIP(2)')
('-d', 'A', 'cocap.QMA', 'QIP(2)') => ('-d', 'AA', 'cocap.QMA', 'QIP(2)')
('-d', 'A', 'cocap.QMA', 'co.QIP(2)') => ('-d', 'R', 'cocap.QMA', 'co.QIP(2)')
('-d', 'A', 'cocap.QMA', 'co.QIP(2)') => ('-d', 'AA', 'cocap.QMA', 'co.QIP(2)')
('-d', 'A', 'cocap.QMA', 'cocap.QIP(2)') => ('-d', 'R', 'cocap.QMA', 'cocap.QIP(2)')
('-d', 'A', 'cocap.QMA', 'cocap.QIP(2)') => ('-d', 'AA', 'cocap.QMA', 'cocap.QIP(2)')
('-d', 'A', 'BQP', 'cocap.QIP(2)') => ('-d', 'R', 'BQP', 'cocap.QIP(2)')
('-d', 'A', 'BQP', 'cocap.QIP(2)') => ('-d', 'AA', 'BQP', 'cocap.QIP(2)')
('-d', 'A', 'BQP', 'QIP(2)') => ('-d', 'R', 'BQP', 'QIP(2)')
('-d', 'A', 'BQP', 'QIP(2)') => ('-d', 'AA', 'BQP', 'QIP(2)')
('-d', 'A', 'BQP', 'co.QIP(2)') => ('-d', 'R', 'BQP', 'co.QIP(2)')
('-d', 'A', 'BQP', 'co.QIP(2)') => ('-d', 'AA', 'BQP', 'co.QIP(2)')
('-d', 'A', 'BQP', 'co.QIP(3)') => ('-d', 'R', 'BQP', 'co.QIP(3)')
('-d', 'A', 'BQP', 'co.QIP(3)') => ('-d', 'AA', 'BQP', 'co.QIP(3)')
('-d', 'A', 'BQP', 'QIP(3)') => ('-d', 'R', 'BQP', 'QIP(3)')
('-d', 'A', 'BQP', 'QIP(3)') => ('-d', 'AA', 'BQP', 'QIP(3)')
('-d', 'A', 'BQP', 'cocap.QIP(3)') => ('-d', 'R', 'BQP', 'cocap.QIP(3)')
('-d', 'A', 'BQP', 'cocap.QIP(3)') => ('-d', 'AA', 'BQP', 'cocap.QIP(3)')
('-d', 'AA', 'BQP', 'cocap.QIP(3)') => ('-d', 'T', 'BQP', 'cocap.QIP(3)')
('-d', 'AA', 'BQP', 'cocap.QIP(3)') => ('-d', 'EA', 'BQP', 'cocap.QIP(3)')
('-d', 'AA', 'BQP', 'co.QIP(3)') => ('-d', 'T', 'BQP', 'co.QIP(3)')
('-d', 'AA', 'BQP', 'co.QIP(3)') => ('-d', 'EA', 'BQP', 'co.QIP(3)')
('-d', 'AA', 'BQP', 'QIP(3)') => ('-d', 'T', 'BQP', 'QIP(3)')
('-d', 'AA', 'BQP', 'QIP(3)') => ('-d', 'EA', 'BQP', 'QIP(3)')
('-d', 'AA', 'BQP', 'co.QIP(2)') => ('-d', 'T', 'BQP', 'co.QIP(2)')
('-d', 'AA', 'BQP', 'co.QIP(2)') => ('-d', 'EA', 'BQP', 'co.QIP(2)')
('-d', 'AA', 'BQP', 'QIP(2)') => ('-d', 'T', 'BQP', 'QIP(2)')
('-d', 'AA', 'BQP', 'QIP(2)') => ('-d', 'EA', 'BQP', 'QIP(2)')
('-d', 'AA', 'BQP', 'cocap.QIP(2)') => ('-d', 'T', 'BQP', 'cocap.QIP(2)')
('-d', 'AA', 'BQP', 'cocap.QIP(2)') => ('-d', 'EA', 'BQP', 'cocap.QIP(2)')
('-d', 'A', 'cocap.QCMA', 'cocap.QIP(2)') => ('-d', 'R', 'cocap.QCMA', 'cocap.QIP(2)')
('-d', 'A', 'cocap.QCMA', 'cocap.QIP(2)') => ('-d', 'AA', 'cocap.QCMA', 'cocap.QIP(2)')
('-d', 'A', 'cocap.QCMA', 'QIP(2)') => ('-d', 'R', 'cocap.QCMA', 'QIP(2)')
('-d', 'A', 'cocap.QCMA', 'QIP(2)') => ('-d', 'AA', 'cocap.QCMA', 'QIP(2)')
('-d', 'A', 'cocap.QCMA', 'co.QIP(2)') => ('-d', 'R', 'cocap.QCMA', 'co.QIP(2)')
('-d', 'A', 'cocap.QCMA', 'co.QIP(2)') => ('-d', 'AA', 'cocap.QCMA', 'co.QIP(2)')
('-d', 'A', 'cocap.NP', 'co.QIP(2)') => ('-d', 'R', 'cocap.NP', 'co.QIP(2)')
('-d', 'A', 'cocap.NP', 'co.QIP(2)') => ('-d', 'AA', 'cocap.NP', 'co.QIP(2)')
('-d', 'A', 'cocap.NP', 'QIP(2)') => ('-d', 'R', 'cocap.NP', 'QIP(2)')
('-d', 'A', 'cocap.NP', 'QIP(2)') => ('-d', 'AA', 'cocap.NP', 'QIP(2)')
('-d', 'A', 'cocap.NP', 'cocap.QIP(2)') => ('-d', 'R', 'cocap.NP', 'cocap.QIP(2)')
('-d', 'A', 'cocap.NP', 'cocap.QIP(2)') => ('-d', 'AA', 'cocap.NP', 'cocap.QIP(2)')
('-d', 'A', 'ZPP', 'cocap.QIP(2)') => ('-d', 'R', 'ZPP', 'cocap.QIP(2)')
('-d', 'A', 'ZPP', 'cocap.QIP(2)') => ('-d', 'AA', 'ZPP', 'cocap.QIP(2)')
('-d', 'A', 'ZPP', 'QIP(2)') => ('-d', 'R', 'ZPP', 'QIP(2)')
('-d', 'A', 'ZPP', 'QIP(2)') => ('-d', 'AA', 'ZPP', 'QIP(2)')
('-d', 'A', 'ZPP', 'co.QIP(2)') => ('-d', 'R', 'ZPP', 'co.QIP(2)')
('-d', 'A', 'ZPP', 'co.QIP(2)') => ('-d', 'AA', 'ZPP', 'co.QIP(2)')
('-d', 'A', 'ZPP', 'co.QIP(3)') => ('-d', 'R', 'ZPP', 'co.QIP(3)')
('-d', 'A', 'ZPP', 'co.QIP(3)') => ('-d', 'AA', 'ZPP', 'co.QIP(3)')
('-d', 'A', 'ZPP', 'QIP(3)') => ('-d', 'R', 'ZPP', 'QIP(3)')
('-d', 'A', 'ZPP', 'QIP(3)') => ('-d', 'AA', 'ZPP', 'QIP(3)')
('-d', 'A', 'ZPP', 'cocap.QIP(3)') => ('-d', 'R', 'ZPP', 'cocap.QIP(3)')
('-d', 'A', 'ZPP', 'cocap.QIP(3)') => ('-d', 'AA', 'ZPP', 'cocap.QIP(3)')
('-d', 'AA', 'ZPP', 'cocap.QIP(3)') => ('-d', 'T', 'ZPP', 'cocap.QIP(3)')
('-d', 'AA', 'ZPP', 'cocap.QIP(3)') => ('-d', 'EA', 'ZPP', 'cocap.QIP(3)')
('-d', 'AA', 'ZPP', 'co.QIP(3)') => ('-d', 'T', 'ZPP', 'co.QIP(3)')
('-d', 'AA', 'ZPP', 'co.QIP(3)') => ('-d', 'EA', 'ZPP', 'co.QIP(3)')
('-d', 'AA', 'ZPP', 'QIP(3)') => ('-d', 'T', 'ZPP', 'QIP(3)')
('-d', 'AA', 'ZPP', 'QIP(3)') => ('-d', 'EA', 'ZPP', 'QIP(3)')
('-d', 'AA', 'ZPP', 'co.QIP(2)') => ('-d', 'T', 'ZPP', 'co.QIP(2)')
('-d', 'AA', 'ZPP', 'co.QIP(2)') => ('-d', 'EA', 'ZPP', 'co.QIP(2)')
('-d', 'AA', 'ZPP', 'QIP(2)') => ('-d', 'T', 'ZPP', 'QIP(2)')
('-d', 'AA', 'ZPP', 'QIP(2)') => ('-d', 'EA', 'ZPP', 'QIP(2)')
('-d', 'AA', 'ZPP', 'cocap.QIP(2)') => ('-d', 'T', 'ZPP', 'cocap.QIP(2)')
('-d', 'AA', 'ZPP', 'cocap.QIP(2)') => ('-d', 'EA', 'ZPP', 'cocap.QIP(2)')
('-d', 'A', 'cocap.NP', 'cocap.QIP(3)') => ('-d', 'R', 'cocap.NP', 'cocap.QIP(3)')
('-d', 'A', 'cocap.NP', 'cocap.QIP(3)') => ('-d', 'AA', 'cocap.NP', 'cocap.QIP(3)')
('-d', 'A', 'cocap.NP', 'co.QIP(3)') => ('-d', 'R', 'cocap.NP', 'co.QIP(3)')
('-d', 'A', 'cocap.NP', 'co.QIP(3)') => ('-d', 'AA', 'cocap.NP', 'co.QIP(3)')
('-d', 'A', 'cocap.NP', 'QIP(3)') => ('-d', 'R', 'cocap.NP', 'QIP(3)')
('-d', 'A', 'cocap.NP', 'QIP(3)') => ('-d', 'AA', 'cocap.NP', 'QIP(3)')
('-d', 'AA', 'cocap.NP', 'QIP(3)') => ('-d', 'T', 'cocap.NP', 'QIP(3)')
('-d', 'AA', 'cocap.NP', 'QIP(3)') => ('-d', 'EA', 'cocap.NP', 'QIP(3)')
('-d', 'AA', 'cocap.NP', 'co.QIP(3)') => ('-d', 'T', 'cocap.NP', 'co.QIP(3)')
('-d', 'AA', 'cocap.NP', 'co.QIP(3)') => ('-d', 'EA', 'cocap.NP', 'co.QIP(3)')
('-d', 'AA', 'cocap.NP', 'cocap.QIP(3)') => ('-d', 'T', 'cocap.NP', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.NP', 'cocap.QIP(3)') => ('-d', 'EA', 'cocap.NP', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.NP', 'cocap.QIP(2)') => ('-d', 'T', 'cocap.NP', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.NP', 'cocap.QIP(2)') => ('-d', 'EA', 'cocap.NP', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.NP', 'QIP(2)') => ('-d', 'T', 'cocap.NP', 'QIP(2)')
('-d', 'AA', 'cocap.NP', 'QIP(2)') => ('-d', 'EA', 'cocap.NP', 'QIP(2)')
('-d', 'AA', 'cocap.NP', 'co.QIP(2)') => ('-d', 'T', 'cocap.NP', 'co.QIP(2)')
('-d', 'AA', 'cocap.NP', 'co.QIP(2)') => ('-d', 'EA', 'cocap.NP', 'co.QIP(2)')
('-d', 'A', 'cocap.QCMA', 'co.QIP(3)') => ('-d', 'R', 'cocap.QCMA', 'co.QIP(3)')
('-d', 'A', 'cocap.QCMA', 'co.QIP(3)') => ('-d', 'AA', 'cocap.QCMA', 'co.QIP(3)')
('-d', 'A', 'cocap.QCMA', 'QIP(3)') => ('-d', 'R', 'cocap.QCMA', 'QIP(3)')
('-d', 'A', 'cocap.QCMA', 'QIP(3)') => ('-d', 'AA', 'cocap.QCMA', 'QIP(3)')
('-d', 'A', 'cocap.QCMA', 'cocap.QIP(3)') => ('-d', 'R', 'cocap.QCMA', 'cocap.QIP(3)')
('-d', 'A', 'cocap.QCMA', 'cocap.QIP(3)') => ('-d', 'AA', 'cocap.QCMA', 'cocap.QIP(3)')
('-d', 'A', 'cocap.MA', 'cocap.QIP(3)') => ('-d', 'R', 'cocap.MA', 'cocap.QIP(3)')
('-d', 'A', 'cocap.MA', 'cocap.QIP(3)') => ('-d', 'AA', 'cocap.MA', 'cocap.QIP(3)')
('-d', 'A', 'cocap.MA', 'co.QIP(3)') => ('-d', 'R', 'cocap.MA', 'co.QIP(3)')
('-d', 'A', 'cocap.MA', 'co.QIP(3)') => ('-d', 'AA', 'cocap.MA', 'co.QIP(3)')
('-d', 'A', 'cocap.MA', 'QIP(3)') => ('-d', 'R', 'cocap.MA', 'QIP(3)')
('-d', 'A', 'cocap.MA', 'QIP(3)') => ('-d', 'AA', 'cocap.MA', 'QIP(3)')
('-d', 'AA', 'cocap.MA', 'QIP(3)') => ('-d', 'T', 'cocap.MA', 'QIP(3)')
('-d', 'AA', 'cocap.MA', 'QIP(3)') => ('-d', 'EA', 'cocap.MA', 'QIP(3)')
('-d', 'AA', 'cocap.MA', 'co.QIP(3)') => ('-d', 'T', 'cocap.MA', 'co.QIP(3)')
('-d', 'AA', 'cocap.MA', 'co.QIP(3)') => ('-d', 'EA', 'cocap.MA', 'co.QIP(3)')
('-d', 'AA', 'cocap.MA', 'cocap.QIP(3)') => ('-d', 'T', 'cocap.MA', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.MA', 'cocap.QIP(3)') => ('-d', 'EA', 'cocap.MA', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.QCMA', 'cocap.QIP(3)') => ('-d', 'T', 'cocap.QCMA', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.QCMA', 'cocap.QIP(3)') => ('-d', 'EA', 'cocap.QCMA', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.QCMA', 'co.QIP(3)') => ('-d', 'T', 'cocap.QCMA', 'co.QIP(3)')
('-d', 'AA', 'cocap.QCMA', 'co.QIP(3)') => ('-d', 'EA', 'cocap.QCMA', 'co.QIP(3)')
('-d', 'AA', 'cocap.QCMA', 'QIP(3)') => ('-d', 'T', 'cocap.QCMA', 'QIP(3)')
('-d', 'AA', 'cocap.QCMA', 'QIP(3)') => ('-d', 'EA', 'cocap.QCMA', 'QIP(3)')
('-d', 'A', 'cocap.MA', 'co.QIP(2)') => ('-d', 'R', 'cocap.MA', 'co.QIP(2)')
('-d', 'A', 'cocap.MA', 'co.QIP(2)') => ('-d', 'AA', 'cocap.MA', 'co.QIP(2)')
('-d', 'A', 'cocap.MA', 'QIP(2)') => ('-d', 'R', 'cocap.MA', 'QIP(2)')
('-d', 'A', 'cocap.MA', 'QIP(2)') => ('-d', 'AA', 'cocap.MA', 'QIP(2)')
('-d', 'A', 'cocap.MA', 'cocap.QIP(2)') => ('-d', 'R', 'cocap.MA', 'cocap.QIP(2)')
('-d', 'A', 'cocap.MA', 'cocap.QIP(2)') => ('-d', 'AA', 'cocap.MA', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.MA', 'cocap.QIP(2)') => ('-d', 'T', 'cocap.MA', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.MA', 'cocap.QIP(2)') => ('-d', 'EA', 'cocap.MA', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.MA', 'QIP(2)') => ('-d', 'T', 'cocap.MA', 'QIP(2)')
('-d', 'AA', 'cocap.MA', 'QIP(2)') => ('-d', 'EA', 'cocap.MA', 'QIP(2)')
('-d', 'AA', 'cocap.MA', 'co.QIP(2)') => ('-d', 'T', 'cocap.MA', 'co.QIP(2)')
('-d', 'AA', 'cocap.MA', 'co.QIP(2)') => ('-d', 'EA', 'cocap.MA', 'co.QIP(2)')
('-d', 'AA', 'cocap.QCMA', 'co.QIP(2)') => ('-d', 'T', 'cocap.QCMA', 'co.QIP(2)')
('-d', 'AA', 'cocap.QCMA', 'co.QIP(2)') => ('-d', 'EA', 'cocap.QCMA', 'co.QIP(2)')
('-d', 'AA', 'cocap.QCMA', 'QIP(2)') => ('-d', 'T', 'cocap.QCMA', 'QIP(2)')
('-d', 'AA', 'cocap.QCMA', 'QIP(2)') => ('-d', 'EA', 'cocap.QCMA', 'QIP(2)')
('-d', 'AA', 'cocap.QCMA', 'cocap.QIP(2)') => ('-d', 'T', 'cocap.QCMA', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.QCMA', 'cocap.QIP(2)') => ('-d', 'EA', 'cocap.QCMA', 'cocap.QIP(2)')
('-d', 'A', 'cocap.QMA', 'cocap.QIP(3)') => ('-d', 'R', 'cocap.QMA', 'cocap.QIP(3)')
('-d', 'A', 'cocap.QMA', 'cocap.QIP(3)') => ('-d', 'AA', 'cocap.QMA', 'cocap.QIP(3)')
('-d', 'A', 'cocap.QMA', 'co.QIP(3)') => ('-d', 'R', 'cocap.QMA', 'co.QIP(3)')
('-d', 'A', 'cocap.QMA', 'co.QIP(3)') => ('-d', 'AA', 'cocap.QMA', 'co.QIP(3)')
('-d', 'A', 'cocap.QMA', 'QIP(3)') => ('-d', 'R', 'cocap.QMA', 'QIP(3)')
('-d', 'A', 'cocap.QMA', 'QIP(3)') => ('-d', 'AA', 'cocap.QMA', 'QIP(3)')
('-d', 'AA', 'cocap.QMA', 'QIP(3)') => ('-d', 'T', 'cocap.QMA', 'QIP(3)')
('-d', 'AA', 'cocap.QMA', 'QIP(3)') => ('-d', 'EA', 'cocap.QMA', 'QIP(3)')
('-d', 'AA', 'cocap.QMA', 'co.QIP(3)') => ('-d', 'T', 'cocap.QMA', 'co.QIP(3)')
('-d', 'AA', 'cocap.QMA', 'co.QIP(3)') => ('-d', 'EA', 'cocap.QMA', 'co.QIP(3)')
('-d', 'AA', 'cocap.QMA', 'cocap.QIP(3)') => ('-d', 'T', 'cocap.QMA', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.QMA', 'cocap.QIP(3)') => ('-d', 'EA', 'cocap.QMA', 'cocap.QIP(3)')
('-d', 'AA', 'cocap.QMA', 'cocap.QIP(2)') => ('-d', 'T', 'cocap.QMA', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.QMA', 'cocap.QIP(2)') => ('-d', 'EA', 'cocap.QMA', 'cocap.QIP(2)')
('-d', 'AA', 'cocap.QMA', 'QIP(2)') => ('-d', 'T', 'cocap.QMA', 'QIP(2)')
('-d', 'AA', 'cocap.QMA', 'QIP(2)') => ('-d', 'EA', 'cocap.QMA', 'QIP(2)')
('-d', 'AA', 'cocap.QMA', 'co.QIP(2)') => ('-d', 'T', 'cocap.QMA', 'co.QIP(2)')
('-d', 'AA', 'cocap.QMA', 'co.QIP(2)') => ('-d', 'EA', 'cocap.QMA', 'co.QIP(2)')
('p', 'A', 'cocap.QMA', 'QIP(2)') => ('p', 'R', 'cocap.QMA', 'QIP(2)')
('p', 'A', 'cocap.QMA', 'QIP(2)') => ('p', 'AA', 'cocap.QMA', 'QIP(2)')
('p', 'A', 'cocap.QMA', 'co.QIP(2)') => ('p', 'R', 'cocap.QMA', 'co.QIP(2)')
('p', 'A', 'cocap.QMA', 'co.QIP(2)') => ('p', 'AA', 'cocap.QMA', 'co.QIP(2)')
('p', 'A', 'cocap.QMA', 'cocap.QIP(2)') => ('p', 'R', 'cocap.QMA', 'cocap.QIP(2)')
('p', 'A', 'cocap.QMA', 'cocap.QIP(2)') => ('p', 'AA', 'cocap.QMA', 'cocap.QIP(2)')
('p', 'A', 'BQP', 'cocap.QIP(2)') => ('p', 'R', 'BQP', 'cocap.QIP(2)')
('p', 'A', 'BQP', 'cocap.QIP(2)') => ('p', 'AA', 'BQP', 'cocap.QIP(2)')
('p', 'A', 'BQP', 'QIP(2)') => ('p', 'R', 'BQP', 'QIP(2)')
('p', 'A', 'BQP', 'QIP(2)') => ('p', 'AA', 'BQP', 'QIP(2)')
('p', 'A', 'BQP', 'co.QIP(2)') => ('p', 'R', 'BQP', 'co.QIP(2)')
('p', 'A', 'BQP', 'co.QIP(2)') => ('p', 'AA', 'BQP', 'co.QIP(2)')
('p', 'A', 'BQP', 'co.QIP(3)') => ('p', 'R', 'BQP', 'co.QIP(3)')
('p', 'A', 'BQP', 'co.QIP(3)') => ('p', 'AA', 'BQP', 'co.QIP(3)')
('p', 'A', 'BQP', 'QIP(3)') => ('p', 'R', 'BQP', 'QIP(3)')
('p', 'A', 'BQP', 'QIP(3)') => ('p', 'AA', 'BQP', 'QIP(3)')
('p', 'A', 'BQP', 'cocap.QIP(3)') => ('p', 'R', 'BQP', 'cocap.QIP(3)')
('p', 'A', 'BQP', 'cocap.QIP(3)') => ('p', 'AA', 'BQP', 'cocap.QIP(3)')
('p', 'AA', 'BQP', 'cocap.QIP(3)') => ('p', 'T', 'BQP', 'cocap.QIP(3)')
('p', 'AA', 'BQP', 'cocap.QIP(3)') => ('p', 'EA', 'BQP', 'cocap.QIP(3)')
('p', 'AA', 'BQP', 'co.QIP(3)') => ('p', 'T', 'BQP', 'co.QIP(3)')
('p', 'AA', 'BQP', 'co.QIP(3)') => ('p', 'EA', 'BQP', 'co.QIP(3)')
('p', 'AA', 'BQP', 'QIP(3)') => ('p', 'T', 'BQP', 'QIP(3)')
('p', 'AA', 'BQP', 'QIP(3)') => ('p', 'EA', 'BQP', 'QIP(3)')
('p', 'AA', 'BQP', 'co.QIP(2)') => ('p', 'T', 'BQP', 'co.QIP(2)')
('p', 'AA', 'BQP', 'co.QIP(2)') => ('p', 'EA', 'BQP', 'co.QIP(2)')
('p', 'AA', 'BQP', 'QIP(2)') => ('p', 'T', 'BQP', 'QIP(2)')
('p', 'AA', 'BQP', 'QIP(2)') => ('p', 'EA', 'BQP', 'QIP(2)')
('p', 'AA', 'BQP', 'cocap.QIP(2)') => ('p', 'T', 'BQP', 'cocap.QIP(2)')
('p', 'AA', 'BQP', 'cocap.QIP(2)') => ('p', 'EA', 'BQP', 'cocap.QIP(2)')
('p', 'A', 'cocap.QCMA', 'cocap.QIP(2)') => ('p', 'R', 'cocap.QCMA', 'cocap.QIP(2)')
('p', 'A', 'cocap.QCMA', 'cocap.QIP(2)') => ('p', 'AA', 'cocap.QCMA', 'cocap.QIP(2)')
('p', 'A', 'cocap.QCMA', 'QIP(2)') => ('p', 'R', 'cocap.QCMA', 'QIP(2)')
('p', 'A', 'cocap.QCMA', 'QIP(2)') => ('p', 'AA', 'cocap.QCMA', 'QIP(2)')
('p', 'A', 'cocap.QCMA', 'co.QIP(2)') => ('p', 'R', 'cocap.QCMA', 'co.QIP(2)')
('p', 'A', 'cocap.QCMA', 'co.QIP(2)') => ('p', 'AA', 'cocap.QCMA', 'co.QIP(2)')
('p', 'A', 'cocap.NP', 'co.QIP(2)') => ('p', 'R', 'cocap.NP', 'co.QIP(2)')
('p', 'A', 'cocap.NP', 'co.QIP(2)') => ('p', 'AA', 'cocap.NP', 'co.QIP(2)')
('p', 'A', 'cocap.NP', 'QIP(2)') => ('p', 'R', 'cocap.NP', 'QIP(2)')
('p', 'A', 'cocap.NP', 'QIP(2)') => ('p', 'AA', 'cocap.NP', 'QIP(2)')
('p', 'A', 'cocap.NP', 'cocap.QIP(2)') => ('p', 'R', 'cocap.NP', 'cocap.QIP(2)')
('p', 'A', 'cocap.NP', 'cocap.QIP(2)') => ('p', 'AA', 'cocap.NP', 'cocap.QIP(2)')
('p', 'A', 'ZPP', 'cocap.QIP(2)') => ('p', 'R', 'ZPP', 'cocap.QIP(2)')
('p', 'A', 'ZPP', 'cocap.QIP(2)') => ('p', 'AA', 'ZPP', 'cocap.QIP(2)')
('p', 'A', 'ZPP', 'QIP(2)') => ('p', 'R', 'ZPP', 'QIP(2)')
('p', 'A', 'ZPP', 'QIP(2)') => ('p', 'AA', 'ZPP', 'QIP(2)')
('p', 'A', 'ZPP', 'co.QIP(2)') => ('p', 'R', 'ZPP', 'co.QIP(2)')
('p', 'A', 'ZPP', 'co.QIP(2)') => ('p', 'AA', 'ZPP', 'co.QIP(2)')
('p', 'A', 'ZPP', 'co.QIP(3)') => ('p', 'R', 'ZPP', 'co.QIP(3)')
('p', 'A', 'ZPP', 'co.QIP(3)') => ('p', 'AA', 'ZPP', 'co.QIP(3)')
('p', 'A', 'ZPP', 'QIP(3)') => ('p', 'R', 'ZPP', 'QIP(3)')
('p', 'A', 'ZPP', 'QIP(3)') => ('p', 'AA', 'ZPP', 'QIP(3)')
('p', 'A', 'ZPP', 'cocap.QIP(3)') => ('p', 'R', 'ZPP', 'cocap.QIP(3)')
('p', 'A', 'ZPP', 'cocap.QIP(3)') => ('p', 'AA', 'ZPP', 'cocap.QIP(3)')
('p', 'AA', 'ZPP', 'cocap.QIP(3)') => ('p', 'T', 'ZPP', 'cocap.QIP(3)')
('p', 'AA', 'ZPP', 'cocap.QIP(3)') => ('p', 'EA', 'ZPP', 'cocap.QIP(3)')
('p', 'AA', 'ZPP', 'co.QIP(3)') => ('p', 'T', 'ZPP', 'co.QIP(3)')
('p', 'AA', 'ZPP', 'co.QIP(3)') => ('p', 'EA', 'ZPP', 'co.QIP(3)')
('p', 'AA', 'ZPP', 'QIP(3)') => ('p', 'T', 'ZPP', 'QIP(3)')
('p', 'AA', 'ZPP', 'QIP(3)') => ('p', 'EA', 'ZPP', 'QIP(3)')
('p', 'AA', 'ZPP', 'co.QIP(2)') => ('p', 'T', 'ZPP', 'co.QIP(2)')
('p', 'AA', 'ZPP', 'co.QIP(2)') => ('p', 'EA', 'ZPP', 'co.QIP(2)')
('p', 'AA', 'ZPP', 'QIP(2)') => ('p', 'T', 'ZPP', 'QIP(2)')
('p', 'AA', 'ZPP', 'QIP(2)') => ('p', 'EA', 'ZPP', 'QIP(2)')
('p', 'AA', 'ZPP', 'cocap.QIP(2)') => ('p', 'T', 'ZPP', 'cocap.QIP(2)')
('p', 'AA', 'ZPP', 'cocap.QIP(2)') => ('p', 'EA', 'ZPP', 'cocap.QIP(2)')
('p', 'A', 'cocap.NP', 'cocap.QIP(3)') => ('p', 'R', 'cocap.NP', 'cocap.QIP(3)')
('p', 'A', 'cocap.NP', 'cocap.QIP(3)') => ('p', 'AA', 'cocap.NP', 'cocap.QIP(3)')
('p', 'A', 'cocap.NP', 'co.QIP(3)') => ('p', 'R', 'cocap.NP', 'co.QIP(3)')
('p', 'A', 'cocap.NP', 'co.QIP(3)') => ('p', 'AA', 'cocap.NP', 'co.QIP(3)')
('p', 'A', 'cocap.NP', 'QIP(3)') => ('p', 'R', 'cocap.NP', 'QIP(3)')
('p', 'A', 'cocap.NP', 'QIP(3)') => ('p', 'AA', 'cocap.NP', 'QIP(3)')
('p', 'AA', 'cocap.NP', 'QIP(3)') => ('p', 'T', 'cocap.NP', 'QIP(3)')
('p', 'AA', 'cocap.NP', 'QIP(3)') => ('p', 'EA', 'cocap.NP', 'QIP(3)')
('p', 'AA', 'cocap.NP', 'co.QIP(3)') => ('p', 'T', 'cocap.NP', 'co.QIP(3)')
('p', 'AA', 'cocap.NP', 'co.QIP(3)') => ('p', 'EA', 'cocap.NP', 'co.QIP(3)')
('p', 'AA', 'cocap.NP', 'cocap.QIP(3)') => ('p', 'T', 'cocap.NP', 'cocap.QIP(3)')
('p', 'AA', 'cocap.NP', 'cocap.QIP(3)') => ('p', 'EA', 'cocap.NP', 'cocap.QIP(3)')
('p', 'AA', 'cocap.NP', 'cocap.QIP(2)') => ('p', 'T', 'cocap.NP', 'cocap.QIP(2)')
('p', 'AA', 'cocap.NP', 'cocap.QIP(2)') => ('p', 'EA', 'cocap.NP', 'cocap.QIP(2)')
('p', 'AA', 'cocap.NP', 'QIP(2)') => ('p', 'T', 'cocap.NP', 'QIP(2)')
('p', 'AA', 'cocap.NP', 'QIP(2)') => ('p', 'EA', 'cocap.NP', 'QIP(2)')
('p', 'AA', 'cocap.NP', 'co.QIP(2)') => ('p', 'T', 'cocap.NP', 'co.QIP(2)')
('p', 'AA', 'cocap.NP', 'co.QIP(2)') => ('p', 'EA', 'cocap.NP', 'co.QIP(2)')
('p', 'A', 'cocap.QCMA', 'co.QIP(3)') => ('p', 'R', 'cocap.QCMA', 'co.QIP(3)')
('p', 'A', 'cocap.QCMA', 'co.QIP(3)') => ('p', 'AA', 'cocap.QCMA', 'co.QIP(3)')
('p', 'A', 'cocap.QCMA', 'QIP(3)') => ('p', 'R', 'cocap.QCMA', 'QIP(3)')
('p', 'A', 'cocap.QCMA', 'QIP(3)') => ('p', 'AA', 'cocap.QCMA', 'QIP(3)')
('p', 'A', 'cocap.QCMA', 'cocap.QIP(3)') => ('p', 'R', 'cocap.QCMA', 'cocap.QIP(3)')
('p', 'A', 'cocap.QCMA', 'cocap.QIP(3)') => ('p', 'AA', 'cocap.QCMA', 'cocap.QIP(3)')
('p', 'A', 'cocap.MA', 'cocap.QIP(3)') => ('p', 'R', 'cocap.MA', 'cocap.QIP(3)')
('p', 'A', 'cocap.MA', 'cocap.QIP(3)') => ('p', 'AA', 'cocap.MA', 'cocap.QIP(3)')
('p', 'A', 'cocap.MA', 'co.QIP(3)') => ('p', 'R', 'cocap.MA', 'co.QIP(3)')
('p', 'A', 'cocap.MA', 'co.QIP(3)') => ('p', 'AA', 'cocap.MA', 'co.QIP(3)')
('p', 'A', 'cocap.MA', 'QIP(3)') => ('p', 'R', 'cocap.MA', 'QIP(3)')
('p', 'A', 'cocap.MA', 'QIP(3)') => ('p', 'AA', 'cocap.MA', 'QIP(3)')
('p', 'AA', 'cocap.MA', 'QIP(3)') => ('p', 'T', 'cocap.MA', 'QIP(3)')
('p', 'AA', 'cocap.MA', 'QIP(3)') => ('p', 'EA', 'cocap.MA', 'QIP(3)')
('p', 'AA', 'cocap.MA', 'co.QIP(3)') => ('p', 'T', 'cocap.MA', 'co.QIP(3)')
('p', 'AA', 'cocap.MA', 'co.QIP(3)') => ('p', 'EA', 'cocap.MA', 'co.QIP(3)')
('p', 'AA', 'cocap.MA', 'cocap.QIP(3)') => ('p', 'T', 'cocap.MA', 'cocap.QIP(3)')
('p', 'AA', 'cocap.MA', 'cocap.QIP(3)') => ('p', 'EA', 'cocap.MA', 'cocap.QIP(3)')
('p', 'AA', 'cocap.QCMA', 'cocap.QIP(3)') => ('p', 'T', 'cocap.QCMA', 'cocap.QIP(3)')
('p', 'AA', 'cocap.QCMA', 'cocap.QIP(3)') => ('p', 'EA', 'cocap.QCMA', 'cocap.QIP(3)')
('p', 'AA', 'cocap.QCMA', 'co.QIP(3)') => ('p', 'T', 'cocap.QCMA', 'co.QIP(3)')
('p', 'AA', 'cocap.QCMA', 'co.QIP(3)') => ('p', 'EA', 'cocap.QCMA', 'co.QIP(3)')
('p', 'AA', 'cocap.QCMA', 'QIP(3)') => ('p', 'T', 'cocap.QCMA', 'QIP(3)')
('p', 'AA', 'cocap.QCMA', 'QIP(3)') => ('p', 'EA', 'cocap.QCMA', 'QIP(3)')
('p', 'A', 'cocap.MA', 'co.QIP(2)') => ('p', 'R', 'cocap.MA', 'co.QIP(2)')
('p', 'A', 'cocap.MA', 'co.QIP(2)') => ('p', 'AA', 'cocap.MA', 'co.QIP(2)')
('p', 'A', 'cocap.MA', 'QIP(2)') => ('p', 'R', 'cocap.MA', 'QIP(2)')
('p', 'A', 'cocap.MA', 'QIP(2)') => ('p', 'AA', 'cocap.MA', 'QIP(2)')
('p', 'A', 'cocap.MA', 'cocap.QIP(2)') => ('p', 'R', 'cocap.MA', 'cocap.QIP(2)')
('p', 'A', 'cocap.MA', 'cocap.QIP(2)') => ('p', 'AA', 'cocap.MA', 'cocap.QIP(2)')
('p', 'AA', 'cocap.MA', 'cocap.QIP(2)') => ('p', 'T', 'cocap.MA', 'cocap.QIP(2)')
('p', 'AA', 'cocap.MA', 'cocap.QIP(2)') => ('p', 'EA', 'cocap.MA', 'cocap.QIP(2)')
('p', 'AA', 'cocap.MA', 'QIP(2)') => ('p', 'T', 'cocap.MA', 'QIP(2)')
('p', 'AA', 'cocap.MA', 'QIP(2)') => ('p', 'EA', 'cocap.MA', 'QIP(2)')
('p', 'AA', 'cocap.MA', 'co.QIP(2)') => ('p', 'T', 'cocap.MA', 'co.QIP(2)')
('p', 'AA', 'cocap.MA', 'co.QIP(2)') => ('p', 'EA', 'cocap.MA', 'co.QIP(2)')
('p', 'AA', 'cocap.QCMA', 'co.QIP(2)') => ('p', 'T', 'cocap.QCMA', 'co.QIP(2)')
('p', 'AA', 'cocap.QCMA', 'co.QIP(2)') => ('p', 'EA', 'cocap.QCMA', 'co.QIP(2)')
('p', 'AA', 'cocap.QCMA', 'QIP(2)') => ('p', 'T', 'cocap.QCMA', 'QIP(2)')
('p', 'AA', 'cocap.QCMA', 'QIP(2)') => ('p', 'EA', 'cocap.QCMA', 'QIP(2)')
('p', 'AA', 'cocap.QCMA', 'cocap.QIP(2)') => ('p', 'T', 'cocap.QCMA', 'cocap.QIP(2)')
('p', 'AA', 'cocap.QCMA', 'cocap.QIP(2)') => ('p', 'EA', 'cocap.QCMA', 'cocap.QIP(2)')
('p', 'A', 'cocap.QMA', 'cocap.QIP(3)') => ('p', 'R', 'cocap.QMA', 'cocap.QIP(3)')
('p', 'A', 'cocap.QMA', 'cocap.QIP(3)') => ('p', 'AA', 'cocap.QMA', 'cocap.QIP(3)')
('p', 'A', 'cocap.QMA', 'co.QIP(3)') => ('p', 'R', 'cocap.QMA', 'co.QIP(3)')
('p', 'A', 'cocap.QMA', 'co.QIP(3)') => ('p', 'AA', 'cocap.QMA', 'co.QIP(3)')
('p', 'A', 'cocap.QMA', 'QIP(3)') => ('p', 'R', 'cocap.QMA', 'QIP(3)')
('p', 'A', 'cocap.QMA', 'QIP(3)') => ('p', 'AA', 'cocap.QMA', 'QIP(3)')
('p', 'AA', 'cocap.QMA', 'QIP(3)') => ('p', 'T', 'cocap.QMA', 'QIP(3)')
('p', 'AA', 'cocap.QMA', 'QIP(3)') => ('p', 'EA', 'cocap.QMA', 'QIP(3)')
('p', 'AA', 'cocap.QMA', 'co.QIP(3)') => ('p', 'T', 'cocap.QMA', 'co.QIP(3)')
('p', 'AA', 'cocap.QMA', 'co.QIP(3)') => ('p', 'EA', 'cocap.QMA', 'co.QIP(3)')
('p', 'AA', 'cocap.QMA', 'cocap.QIP(3)') => ('p', 'T', 'cocap.QMA', 'cocap.QIP(3)')
('p', 'AA', 'cocap.QMA', 'cocap.QIP(3)') => ('p', 'EA', 'cocap.QMA', 'cocap.QIP(3)')
('p', 'AA', 'cocap.QMA', 'cocap.QIP(2)') => ('p', 'T', 'cocap.QMA', 'cocap.QIP(2)')
('p', 'AA', 'cocap.QMA', 'cocap.QIP(2)') => ('p', 'EA', 'cocap.QMA', 'cocap.QIP(2)')
('p', 'AA', 'cocap.QMA', 'QIP(2)') => ('p', 'T', 'cocap.QMA', 'QIP(2)')
('p', 'AA', 'cocap.QMA', 'QIP(2)') => ('p', 'EA', 'cocap.QMA', 'QIP(2)')
('p', 'AA', 'cocap.QMA', 'co.QIP(2)') => ('p', 'T', 'cocap.QMA', 'co.QIP(2)')
('p', 'AA', 'cocap.QMA', 'co.QIP(2)') => ('p', 'EA', 'cocap.QMA', 'co.QIP(2)')
('p', 'E', 'BQP', 'cocap.QAM') => ('-d', 'E', 'BQP', 'cocap.QAM')
('p', 'A', 'BQP', 'cocap.QAM') => ('-d', 'A', 'BQP', 'cocap.QAM')
('p', 'A', 'BQP', 'cocap.QAM') => ('p', 'R', 'BQP', 'cocap.QAM')
('p', 'A', 'BQP', 'cocap.QAM') => ('p', 'AA', 'BQP', 'cocap.QAM')
('-d', 'A', 'BQP', 'CH') => ('-d', 'R', 'BQP', 'CH')
('-d', 'A', 'BQP', 'CH') => ('-d', 'AA', 'BQP', 'CH')
('-d', 'AA', 'BQP', 'CH') => ('-d', 'T', 'BQP', 'CH')
('-d', 'AA', 'BQP', 'CH') => ('-d', 'EA', 'BQP', 'CH')
('p', 'A', 'BQP', 'CH') => ('p', 'R', 'BQP', 'CH')
('p', 'A', 'BQP', 'CH') => ('p', 'AA', 'BQP', 'CH')
('p', 'AA', 'BQP', 'CH') => ('p', 'T', 'BQP', 'CH')
('p', 'AA', 'BQP', 'CH') => ('p', 'EA', 'BQP', 'CH')
('-d', 'A', 'BQP', 'QAM') => ('-d', 'R', 'BQP', 'QAM')
('-d', 'A', 'BQP', 'QAM') => ('-d', 'AA', 'BQP', 'QAM')
('-d', 'A', 'BQP', 'co.QAM') => ('-d', 'R', 'BQP', 'co.QAM')
('-d', 'A', 'BQP', 'co.QAM') => ('-d', 'AA', 'BQP', 'co.QAM')
('-d', 'A', 'BQP', 'cocap.QAM') => ('-d', 'R', 'BQP', 'cocap.QAM')
('-d', 'A', 'BQP', 'cocap.QAM') => ('-d', 'AA', 'BQP', 'cocap.QAM')
('-d', 'AA', 'BQP', 'cocap.QAM') => ('-d', 'T', 'BQP', 'cocap.QAM')
('-d', 'AA', 'BQP', 'cocap.QAM') => ('-d', 'EA', 'BQP', 'cocap.QAM')
('-d', 'AA', 'BQP', 'QAM') => ('-d', 'T', 'BQP', 'QAM')
('-d', 'AA', 'BQP', 'QAM') => ('-d', 'EA', 'BQP', 'QAM')
('-d', 'AA', 'BQP', 'co.QAM') => ('-d', 'T', 'BQP', 'co.QAM')
('-d', 'AA', 'BQP', 'co.QAM') => ('-d', 'EA', 'BQP', 'co.QAM')
('p', 'A', 'BQP', 'QAM') => ('p', 'R', 'BQP', 'QAM')
('p', 'A', 'BQP', 'QAM') => ('p', 'AA', 'BQP', 'QAM')
('p', 'A', 'BQP', 'co.QAM') => ('p', 'R', 'BQP', 'co.QAM')
('p', 'A', 'BQP', 'co.QAM') => ('p', 'AA', 'BQP', 'co.QAM')
('p', 'AA', 'BQP', 'co.QAM') => ('p', 'T', 'BQP', 'co.QAM')
('p', 'AA', 'BQP', 'co.QAM') => ('p', 'EA', 'BQP', 'co.QAM')
('p', 'AA', 'BQP', 'QAM') => ('p', 'T', 'BQP', 'QAM')
('p', 'AA', 'BQP', 'QAM') => ('p', 'EA', 'BQP', 'QAM')
('p', 'AA', 'BQP', 'cocap.QAM') => ('p', 'T', 'BQP', 'cocap.QAM')
('p', 'AA', 'BQP', 'cocap.QAM') => ('p', 'EA', 'BQP', 'cocap.QAM')
('p', 'E', 'cocap.QCMA', 'cocap.QAM') => ('-d', 'E', 'cocap.QCMA', 'cocap.QAM')
('p', 'A', 'cocap.QCMA', 'cocap.QAM') => ('-d', 'A', 'cocap.QCMA', 'cocap.QAM')
('p', 'A', 'cocap.QCMA', 'cocap.QAM') => ('p', 'R', 'cocap.QCMA', 'cocap.QAM')
('p', 'A', 'cocap.QCMA', 'cocap.QAM') => ('p', 'AA', 'cocap.QCMA', 'cocap.QAM')
('p', 'A', 'cocap.NP', 'cocap.QAM') => ('-d', 'A', 'cocap.NP', 'cocap.QAM')
('p', 'A', 'cocap.NP', 'cocap.QAM') => ('p', 'R', 'cocap.NP', 'cocap.QAM')
('p', 'A', 'cocap.NP', 'cocap.QAM') => ('p', 'AA', 'cocap.NP', 'cocap.QAM')
('p', 'A', 'ZPP', 'cocap.QAM') => ('-d', 'A', 'ZPP', 'cocap.QAM')
('p', 'A', 'ZPP', 'cocap.QAM') => ('p', 'R', 'ZPP', 'cocap.QAM')
('p', 'A', 'ZPP', 'cocap.QAM') => ('p', 'AA', 'ZPP', 'cocap.QAM')
('-d', 'A', 'ZPP', 'CH') => ('-d', 'R', 'ZPP', 'CH')
('-d', 'A', 'ZPP', 'CH') => ('-d', 'AA', 'ZPP', 'CH')
('-d', 'AA', 'ZPP', 'CH') => ('-d', 'T', 'ZPP', 'CH')
('-d', 'AA', 'ZPP', 'CH') => ('-d', 'EA', 'ZPP', 'CH')
('p', 'A', 'ZPP', 'CH') => ('p', 'R', 'ZPP', 'CH')
('p', 'A', 'ZPP', 'CH') => ('p', 'AA', 'ZPP', 'CH')
('p', 'AA', 'ZPP', 'CH') => ('p', 'T', 'ZPP', 'CH')
('p', 'AA', 'ZPP', 'CH') => ('p', 'EA', 'ZPP', 'CH')
('-d', 'A', 'ZPP', 'QAM') => ('-d', 'R', 'ZPP', 'QAM')
('-d', 'A', 'ZPP', 'QAM') => ('-d', 'AA', 'ZPP', 'QAM')
('-d', 'A', 'ZPP', 'co.QAM') => ('-d', 'R', 'ZPP', 'co.QAM')
('-d', 'A', 'ZPP', 'co.QAM') => ('-d', 'AA', 'ZPP', 'co.QAM')
('-d', 'A', 'ZPP', 'cocap.QAM') => ('-d', 'R', 'ZPP', 'cocap.QAM')
('-d', 'A', 'ZPP', 'cocap.QAM') => ('-d', 'AA', 'ZPP', 'cocap.QAM')
('-d', 'AA', 'ZPP', 'cocap.QAM') => ('-d', 'T', 'ZPP', 'cocap.QAM')
('-d', 'AA', 'ZPP', 'cocap.QAM') => ('-d', 'EA', 'ZPP', 'cocap.QAM')
('-d', 'AA', 'ZPP', 'QAM') => ('-d', 'T', 'ZPP', 'QAM')
('-d', 'AA', 'ZPP', 'QAM') => ('-d', 'EA', 'ZPP', 'QAM')
('-d', 'AA', 'ZPP', 'co.QAM') => ('-d', 'T', 'ZPP', 'co.QAM')
('-d', 'AA', 'ZPP', 'co.QAM') => ('-d', 'EA', 'ZPP', 'co.QAM')
('p', 'A', 'ZPP', 'QAM') => ('p', 'R', 'ZPP', 'QAM')
('p', 'A', 'ZPP', 'QAM') => ('p', 'AA', 'ZPP', 'QAM')
('p', 'A', 'ZPP', 'co.QAM') => ('p', 'R', 'ZPP', 'co.QAM')
('p', 'A', 'ZPP', 'co.QAM') => ('p', 'AA', 'ZPP', 'co.QAM')
('p', 'AA', 'ZPP', 'co.QAM') => ('p', 'T', 'ZPP', 'co.QAM')
('p', 'AA', 'ZPP', 'co.QAM') => ('p', 'EA', 'ZPP', 'co.QAM')
('p', 'AA', 'ZPP', 'QAM') => ('p', 'T', 'ZPP', 'QAM')
('p', 'AA', 'ZPP', 'QAM') => ('p', 'EA', 'ZPP', 'QAM')
('p', 'AA', 'ZPP', 'cocap.QAM') => ('p', 'T', 'ZPP', 'cocap.QAM')
('p', 'AA', 'ZPP', 'cocap.QAM') => ('p', 'EA', 'ZPP', 'cocap.QAM')
('-d', 'A', 'cocap.NP', 'CH') => ('-d', 'R', 'cocap.NP', 'CH')
('-d', 'A', 'cocap.NP', 'CH') => ('-d', 'AA', 'cocap.NP', 'CH')
('-d', 'AA', 'cocap.NP', 'CH') => ('-d', 'T', 'cocap.NP', 'CH')
('-d', 'AA', 'cocap.NP', 'CH') => ('-d', 'EA', 'cocap.NP', 'CH')
('p', 'A', 'cocap.NP', 'CH') => ('p', 'R', 'cocap.NP', 'CH')
('p', 'A', 'cocap.NP', 'CH') => ('p', 'AA', 'cocap.NP', 'CH')
('p', 'AA', 'cocap.NP', 'CH') => ('p', 'T', 'cocap.NP', 'CH')
('p', 'AA', 'cocap.NP', 'CH') => ('p', 'EA', 'cocap.NP', 'CH')
('-d', 'A', 'cocap.NP', 'QAM') => ('-d', 'R', 'cocap.NP', 'QAM')
('-d', 'A', 'cocap.NP', 'QAM') => ('-d', 'AA', 'cocap.NP', 'QAM')
('-d', 'A', 'cocap.NP', 'co.QAM') => ('-d', 'R', 'cocap.NP', 'co.QAM')
('-d', 'A', 'cocap.NP', 'co.QAM') => ('-d', 'AA', 'cocap.NP', 'co.QAM')
('-d', 'A', 'cocap.NP', 'cocap.QAM') => ('-d', 'R', 'cocap.NP', 'cocap.QAM')
('-d', 'A', 'cocap.NP', 'cocap.QAM') => ('-d', 'AA', 'cocap.NP', 'cocap.QAM')
('-d', 'AA', 'cocap.NP', 'cocap.QAM') => ('-d', 'T', 'cocap.NP', 'cocap.QAM')
('-d', 'AA', 'cocap.NP', 'cocap.QAM') => ('-d', 'EA', 'cocap.NP', 'cocap.QAM')
('-d', 'AA', 'cocap.NP', 'QAM') => ('-d', 'T', 'cocap.NP', 'QAM')
('-d', 'AA', 'cocap.NP', 'QAM') => ('-d', 'EA', 'cocap.NP', 'QAM')
('-d', 'AA', 'cocap.NP', 'co.QAM') => ('-d', 'T', 'cocap.NP', 'co.QAM')
('-d', 'AA', 'cocap.NP', 'co.QAM') => ('-d', 'EA', 'cocap.NP', 'co.QAM')
('p', 'A', 'cocap.NP', 'QAM') => ('p', 'R', 'cocap.NP', 'QAM')
('p', 'A', 'cocap.NP', 'QAM') => ('p', 'AA', 'cocap.NP', 'QAM')
('p', 'A', 'cocap.NP', 'co.QAM') => ('p', 'R', 'cocap.NP', 'co.QAM')
('p', 'A', 'cocap.NP', 'co.QAM') => ('p', 'AA', 'cocap.NP', 'co.QAM')
('p', 'AA', 'cocap.NP', 'co.QAM') => ('p', 'T', 'cocap.NP', 'co.QAM')
('p', 'AA', 'cocap.NP', 'co.QAM') => ('p', 'EA', 'cocap.NP', 'co.QAM')
('p', 'AA', 'cocap.NP', 'QAM') => ('p', 'T', 'cocap.NP', 'QAM')
('p', 'AA', 'cocap.NP', 'QAM') => ('p', 'EA', 'cocap.NP', 'QAM')
('p', 'AA', 'cocap.NP', 'cocap.QAM') => ('p', 'T', 'cocap.NP', 'cocap.QAM')
('p', 'AA', 'cocap.NP', 'cocap.QAM') => ('p', 'EA', 'cocap.NP', 'cocap.QAM')
('-d', 'A', 'cocap.QCMA', 'CH') => ('-d', 'R', 'cocap.QCMA', 'CH')
('-d', 'A', 'cocap.QCMA', 'CH') => ('-d', 'AA', 'cocap.QCMA', 'CH')
('-d', 'A', 'cocap.MA', 'CH') => ('-d', 'R', 'cocap.MA', 'CH')
('-d', 'A', 'cocap.MA', 'CH') => ('-d', 'AA', 'cocap.MA', 'CH')
('-d', 'AA', 'cocap.MA', 'CH') => ('-d', 'T', 'cocap.MA', 'CH')
('-d', 'AA', 'cocap.MA', 'CH') => ('-d', 'EA', 'cocap.MA', 'CH')
('-d', 'AA', 'cocap.QCMA', 'CH') => ('-d', 'T', 'cocap.QCMA', 'CH')
('-d', 'AA', 'cocap.QCMA', 'CH') => ('-d', 'EA', 'cocap.QCMA', 'CH')
('p', 'A', 'cocap.QCMA', 'CH') => ('p', 'R', 'cocap.QCMA', 'CH')
('p', 'A', 'cocap.QCMA', 'CH') => ('p', 'AA', 'cocap.QCMA', 'CH')
('p', 'A', 'cocap.MA', 'CH') => ('p', 'R', 'cocap.MA', 'CH')
('p', 'A', 'cocap.MA', 'CH') => ('p', 'AA', 'cocap.MA', 'CH')
('p', 'AA', 'cocap.MA', 'CH') => ('p', 'T', 'cocap.MA', 'CH')
('p', 'AA', 'cocap.MA', 'CH') => ('p', 'EA', 'cocap.MA', 'CH')
('p', 'AA', 'cocap.QCMA', 'CH') => ('p', 'T', 'cocap.QCMA', 'CH')
('p', 'AA', 'cocap.QCMA', 'CH') => ('p', 'EA', 'cocap.QCMA', 'CH')
('p', 'A', 'cocap.MA', 'cocap.QAM') => ('-d', 'A', 'cocap.MA', 'cocap.QAM')
('p', 'A', 'cocap.MA', 'cocap.QAM') => ('p', 'R', 'cocap.MA', 'cocap.QAM')
('p', 'A', 'cocap.MA', 'cocap.QAM') => ('p', 'AA', 'cocap.MA', 'cocap.QAM')
('-d', 'A', 'cocap.MA', 'QAM') => ('-d', 'R', 'cocap.MA', 'QAM')
('-d', 'A', 'cocap.MA', 'QAM') => ('-d', 'AA', 'cocap.MA', 'QAM')
('-d', 'A', 'cocap.MA', 'co.QAM') => ('-d', 'R', 'cocap.MA', 'co.QAM')
('-d', 'A', 'cocap.MA', 'co.QAM') => ('-d', 'AA', 'cocap.MA', 'co.QAM')
('-d', 'A', 'cocap.MA', 'cocap.QAM') => ('-d', 'R', 'cocap.MA', 'cocap.QAM')
('-d', 'A', 'cocap.MA', 'cocap.QAM') => ('-d', 'AA', 'cocap.MA', 'cocap.QAM')
('-d', 'AA', 'cocap.MA', 'cocap.QAM') => ('-d', 'T', 'cocap.MA', 'cocap.QAM')
('-d', 'AA', 'cocap.MA', 'cocap.QAM') => ('-d', 'EA', 'cocap.MA', 'cocap.QAM')
('-d', 'AA', 'cocap.MA', 'QAM') => ('-d', 'T', 'cocap.MA', 'QAM')
('-d', 'AA', 'cocap.MA', 'QAM') => ('-d', 'EA', 'cocap.MA', 'QAM')
('-d', 'AA', 'cocap.MA', 'co.QAM') => ('-d', 'T', 'cocap.MA', 'co.QAM')
('-d', 'AA', 'cocap.MA', 'co.QAM') => ('-d', 'EA', 'cocap.MA', 'co.QAM')
('p', 'A', 'cocap.MA', 'QAM') => ('p', 'R', 'cocap.MA', 'QAM')
('p', 'A', 'cocap.MA', 'QAM') => ('p', 'AA', 'cocap.MA', 'QAM')
('p', 'A', 'cocap.MA', 'co.QAM') => ('p', 'R', 'cocap.MA', 'co.QAM')
('p', 'A', 'cocap.MA', 'co.QAM') => ('p', 'AA', 'cocap.MA', 'co.QAM')
('p', 'AA', 'cocap.MA', 'co.QAM') => ('p', 'T', 'cocap.MA', 'co.QAM')
('p', 'AA', 'cocap.MA', 'co.QAM') => ('p', 'EA', 'cocap.MA', 'co.QAM')
('p', 'AA', 'cocap.MA', 'QAM') => ('p', 'T', 'cocap.MA', 'QAM')
('p', 'AA', 'cocap.MA', 'QAM') => ('p', 'EA', 'cocap.MA', 'QAM')
('p', 'AA', 'cocap.MA', 'cocap.QAM') => ('p', 'T', 'cocap.MA', 'cocap.QAM')
('p', 'AA', 'cocap.MA', 'cocap.QAM') => ('p', 'EA', 'cocap.MA', 'cocap.QAM')
('-d', 'A', 'cocap.QCMA', 'QAM') => ('-d', 'R', 'cocap.QCMA', 'QAM')
('-d', 'A', 'cocap.QCMA', 'QAM') => ('-d', 'AA', 'cocap.QCMA', 'QAM')
('-d', 'A', 'cocap.QCMA', 'co.QAM') => ('-d', 'R', 'cocap.QCMA', 'co.QAM')
('-d', 'A', 'cocap.QCMA', 'co.QAM') => ('-d', 'AA', 'cocap.QCMA', 'co.QAM')
('-d', 'A', 'cocap.QCMA', 'cocap.QAM') => ('-d', 'R', 'cocap.QCMA', 'cocap.QAM')
('-d', 'A', 'cocap.QCMA', 'cocap.QAM') => ('-d', 'AA', 'cocap.QCMA', 'cocap.QAM')
('-d', 'AA', 'cocap.QCMA', 'cocap.QAM') => ('-d', 'T', 'cocap.QCMA', 'cocap.QAM')
('-d', 'AA', 'cocap.QCMA', 'cocap.QAM') => ('-d', 'EA', 'cocap.QCMA', 'cocap.QAM')
('-d', 'AA', 'cocap.QCMA', 'QAM') => ('-d', 'T', 'cocap.QCMA', 'QAM')
('-d', 'AA', 'cocap.QCMA', 'QAM') => ('-d', 'EA', 'cocap.QCMA', 'QAM')
('-d', 'AA', 'cocap.QCMA', 'co.QAM') => ('-d', 'T', 'cocap.QCMA', 'co.QAM')
('-d', 'AA', 'cocap.QCMA', 'co.QAM') => ('-d', 'EA', 'cocap.QCMA', 'co.QAM')
('p', 'A', 'cocap.QCMA', 'QAM') => ('p', 'R', 'cocap.QCMA', 'QAM')
('p', 'A', 'cocap.QCMA', 'QAM') => ('p', 'AA', 'cocap.QCMA', 'QAM')
('p', 'A', 'cocap.QCMA', 'co.QAM') => ('p', 'R', 'cocap.QCMA', 'co.QAM')
('p', 'A', 'cocap.QCMA', 'co.QAM') => ('p', 'AA', 'cocap.QCMA', 'co.QAM')
('p', 'AA', 'cocap.QCMA', 'co.QAM') => ('p', 'T', 'cocap.QCMA', 'co.QAM')
('p', 'AA', 'cocap.QCMA', 'co.QAM') => ('p', 'EA', 'cocap.QCMA', 'co.QAM')
('p', 'AA', 'cocap.QCMA', 'QAM') => ('p', 'T', 'cocap.QCMA', 'QAM')
('p', 'AA', 'cocap.QCMA', 'QAM') => ('p', 'EA', 'cocap.QCMA', 'QAM')
('p', 'AA', 'cocap.QCMA', 'cocap.QAM') => ('p', 'T', 'cocap.QCMA', 'cocap.QAM')
('p', 'AA', 'cocap.QCMA', 'cocap.QAM') => ('p', 'EA', 'cocap.QCMA', 'cocap.QAM')
('-d', 'A', 'cocap.QMA', 'CH') => ('-d', 'R', 'cocap.QMA', 'CH')
('-d', 'A', 'cocap.QMA', 'CH') => ('-d', 'AA', 'cocap.QMA', 'CH')
('-d', 'AA', 'cocap.QMA', 'CH') => ('-d', 'T', 'cocap.QMA', 'CH')
('-d', 'AA', 'cocap.QMA', 'CH') => ('-d', 'EA', 'cocap.QMA', 'CH')
('p', 'A', 'cocap.QMA', 'CH') => ('p', 'R', 'cocap.QMA', 'CH')
('p', 'A', 'cocap.QMA', 'CH') => ('p', 'AA', 'cocap.QMA', 'CH')
('p', 'AA', 'cocap.QMA', 'CH') => ('p', 'T', 'cocap.QMA', 'CH')
('p', 'AA', 'cocap.QMA', 'CH') => ('p', 'EA', 'cocap.QMA', 'CH')
('-d', 'A', 'cocap.QMA', 'QAM') => ('-d', 'R', 'cocap.QMA', 'QAM')
('-d', 'A', 'cocap.QMA', 'QAM') => ('-d', 'AA', 'cocap.QMA', 'QAM')
('-d', 'A', 'cocap.QMA', 'co.QAM') => ('-d', 'R', 'cocap.QMA', 'co.QAM')
('-d', 'A', 'cocap.QMA', 'co.QAM') => ('-d', 'AA', 'cocap.QMA', 'co.QAM')
('-d', 'A', 'cocap.QMA', 'cocap.QAM') => ('-d', 'R', 'cocap.QMA', 'cocap.QAM')
('-d', 'A', 'cocap.QMA', 'cocap.QAM') => ('-d', 'AA', 'cocap.QMA', 'cocap.QAM')
('-d', 'AA', 'cocap.QMA', 'cocap.QAM') => ('-d', 'T', 'cocap.QMA', 'cocap.QAM')
('-d', 'AA', 'cocap.QMA', 'cocap.QAM') => ('-d', 'EA', 'cocap.QMA', 'cocap.QAM')
('-d', 'AA', 'cocap.QMA', 'QAM') => ('-d', 'T', 'cocap.QMA', 'QAM')
('-d', 'AA', 'cocap.QMA', 'QAM') => ('-d', 'EA', 'cocap.QMA', 'QAM')
('-d', 'AA', 'cocap.QMA', 'co.QAM') => ('-d', 'T', 'cocap.QMA', 'co.QAM')
('-d', 'AA', 'cocap.QMA', 'co.QAM') => ('-d', 'EA', 'cocap.QMA', 'co.QAM')
('p', 'A', 'cocap.QMA', 'QAM') => ('p', 'R', 'cocap.QMA', 'QAM')
('p', 'A', 'cocap.QMA', 'QAM') => ('p', 'AA', 'cocap.QMA', 'QAM')
('p', 'A', 'cocap.QMA', 'co.QAM') => ('p', 'R', 'cocap.QMA', 'co.QAM')
('p', 'A', 'cocap.QMA', 'co.QAM') => ('p', 'AA', 'cocap.QMA', 'co.QAM')
('p', 'AA', 'cocap.QMA', 'co.QAM') => ('p', 'T', 'cocap.QMA', 'co.QAM')
('p', 'AA', 'cocap.QMA', 'co.QAM') => ('p', 'EA', 'cocap.QMA', 'co.QAM')
('p', 'AA', 'cocap.QMA', 'QAM') => ('p', 'T', 'cocap.QMA', 'QAM')
('p', 'AA', 'cocap.QMA', 'QAM') => ('p', 'EA', 'cocap.QMA', 'QAM')
('p', 'AA', 'cocap.QMA', 'cocap.QAM') => ('p', 'T', 'cocap.QMA', 'cocap.QAM')
('p', 'AA', 'cocap.QMA', 'cocap.QAM') => ('p', 'EA', 'cocap.QMA', 'cocap.QAM')
('d', 'A', 'co.QAM', 'BQP') => ('-p', 'A', 'co.QAM', 'BQP')
('d', 'A', 'QAM', 'BQP') => ('-p', 'A', 'QAM', 'BQP')
('p', 'A', 'co.MA', 'co.QAM') => ('-d', 'A', 'co.MA', 'co.QAM')
('p', 'A', 'co.MA', 'co.QAM') => ('p', 'R', 'co.MA', 'co.QAM')
('p', 'A', 'co.MA', 'co.QAM') => ('p', 'AA', 'co.MA', 'co.QAM')
('p', 'A', 'MA', 'QAM') => ('-d', 'A', 'MA', 'QAM')
('p', 'A', 'MA', 'QAM') => ('p', 'R', 'MA', 'QAM')
('p', 'A', 'MA', 'QAM') => ('p', 'AA', 'MA', 'QAM')
('p', 'A', 'RP', 'QAM') => ('-d', 'A', 'RP', 'QAM')
('p', 'A', 'RP', 'QAM') => ('p', 'R', 'RP', 'QAM')
('p', 'A', 'RP', 'QAM') => ('p', 'AA', 'RP', 'QAM')
('p', 'A', 'co.RP', 'co.QAM') => ('-d', 'A', 'co.RP', 'co.QAM')
('p', 'A', 'co.RP', 'co.QAM') => ('p', 'R', 'co.RP', 'co.QAM')
('p', 'A', 'co.RP', 'co.QAM') => ('p', 'AA', 'co.RP', 'co.QAM')
('-d', 'A', 'co.RP', 'co.QIP(3)') => ('-d', 'R', 'co.RP', 'co.QIP(3)')
('-d', 'A', 'co.RP', 'co.QIP(3)') => ('-d', 'AA', 'co.RP', 'co.QIP(3)')
('-d', 'A', 'RP', 'QIP(3)') => ('-d', 'R', 'RP', 'QIP(3)')
('-d', 'A', 'RP', 'QIP(3)') => ('-d', 'AA', 'RP', 'QIP(3)')
('-d', 'AA', 'RP', 'QIP(3)') => ('-d', 'T', 'RP', 'QIP(3)')
('-d', 'AA', 'RP', 'QIP(3)') => ('-d', 'EA', 'RP', 'QIP(3)')
('-d', 'AA', 'co.RP', 'co.QIP(3)') => ('-d', 'T', 'co.RP', 'co.QIP(3)')
('-d', 'AA', 'co.RP', 'co.QIP(3)') => ('-d', 'EA', 'co.RP', 'co.QIP(3)')
('p', 'A', 'co.RP', 'co.QIP(3)') => ('p', 'R', 'co.RP', 'co.QIP(3)')
('p', 'A', 'co.RP', 'co.QIP(3)') => ('p', 'AA', 'co.RP', 'co.QIP(3)')
('p', 'A', 'RP', 'QIP(3)') => ('p', 'R', 'RP', 'QIP(3)')
('p', 'A', 'RP', 'QIP(3)') => ('p', 'AA', 'RP', 'QIP(3)')
('p', 'AA', 'RP', 'QIP(3)') => ('p', 'T', 'RP', 'QIP(3)')
('p', 'AA', 'RP', 'QIP(3)') => ('p', 'EA', 'RP', 'QIP(3)')
('p', 'AA', 'co.RP', 'co.QIP(3)') => ('p', 'T', 'co.RP', 'co.QIP(3)')
('p', 'AA', 'co.RP', 'co.QIP(3)') => ('p', 'EA', 'co.RP', 'co.QIP(3)')
('-d', 'A', 'co.RP', 'co.QIP(2)') => ('-d', 'R', 'co.RP', 'co.QIP(2)')
('-d', 'A', 'co.RP', 'co.QIP(2)') => ('-d', 'AA', 'co.RP', 'co.QIP(2)')
('-d', 'A', 'RP', 'QIP(2)') => ('-d', 'R', 'RP', 'QIP(2)')
('-d', 'A', 'RP', 'QIP(2)') => ('-d', 'AA', 'RP', 'QIP(2)')
('-d', 'AA', 'RP', 'QIP(2)') => ('-d', 'T', 'RP', 'QIP(2)')
('-d', 'AA', 'RP', 'QIP(2)') => ('-d', 'EA', 'RP', 'QIP(2)')
('-d', 'AA', 'co.RP', 'co.QIP(2)') => ('-d', 'T', 'co.RP', 'co.QIP(2)')
('-d', 'AA', 'co.RP', 'co.QIP(2)') => ('-d', 'EA', 'co.RP', 'co.QIP(2)')
('p', 'A', 'co.RP', 'co.QIP(2)') => ('p', 'R', 'co.RP', 'co.QIP(2)')
('p', 'A', 'co.RP', 'co.QIP(2)') => ('p', 'AA', 'co.RP', 'co.QIP(2)')
('p', 'A', 'RP', 'QIP(2)') => ('p', 'R', 'RP', 'QIP(2)')
('p', 'A', 'RP', 'QIP(2)') => ('p', 'AA', 'RP', 'QIP(2)')
('p', 'AA', 'RP', 'QIP(2)') => ('p', 'T', 'RP', 'QIP(2)')
('p', 'AA', 'RP', 'QIP(2)') => ('p', 'EA', 'RP', 'QIP(2)')
('p', 'AA', 'co.RP', 'co.QIP(2)') => ('p', 'T', 'co.RP', 'co.QIP(2)')
('p', 'AA', 'co.RP', 'co.QIP(2)') => ('p', 'EA', 'co.RP', 'co.QIP(2)')
('-d', 'A', 'co.RP', 'CH') => ('-d', 'R', 'co.RP', 'CH')
('-d', 'A', 'co.RP', 'CH') => ('-d', 'AA', 'co.RP', 'CH')
('-d', 'A', 'RP', 'CH') => ('-d', 'R', 'RP', 'CH')
('-d', 'A', 'RP', 'CH') => ('-d', 'AA', 'RP', 'CH')
('-d', 'AA', 'RP', 'CH') => ('-d', 'T', 'RP', 'CH')
('-d', 'AA', 'RP', 'CH') => ('-d', 'EA', 'RP', 'CH')
('-d', 'AA', 'co.RP', 'CH') => ('-d', 'T', 'co.RP', 'CH')
('-d', 'AA', 'co.RP', 'CH') => ('-d', 'EA', 'co.RP', 'CH')
('p', 'A', 'co.RP', 'CH') => ('p', 'R', 'co.RP', 'CH')
('p', 'A', 'co.RP', 'CH') => ('p', 'AA', 'co.RP', 'CH')
('p', 'A', 'RP', 'CH') => ('p', 'R', 'RP', 'CH')
('p', 'A', 'RP', 'CH') => ('p', 'AA', 'RP', 'CH')
('p', 'AA', 'RP', 'CH') => ('p', 'T', 'RP', 'CH')
('p', 'AA', 'RP', 'CH') => ('p', 'EA', 'RP', 'CH')
('p', 'AA', 'co.RP', 'CH') => ('p', 'T', 'co.RP', 'CH')
('p', 'AA', 'co.RP', 'CH') => ('p', 'EA', 'co.RP', 'CH')
('p', 'AA', 'co.RP', 'co.QAM') => ('-d', 'AA', 'co.RP', 'co.QAM')
('p', 'AA', 'co.RP', 'co.QAM') => ('p', 'T', 'co.RP', 'co.QAM')
('p', 'AA', 'co.RP', 'co.QAM') => ('p', 'EA', 'co.RP', 'co.QAM')
('p', 'AA', 'RP', 'QAM') => ('-d', 'AA', 'RP', 'QAM')
('p', 'AA', 'RP', 'QAM') => ('p', 'T', 'RP', 'QAM')
('p', 'AA', 'RP', 'QAM') => ('p', 'EA', 'RP', 'QAM')
('p', 'EA', 'RP', 'QAM') => ('-d', 'EA', 'RP', 'QAM')
('p', 'EA', 'co.RP', 'co.QAM') => ('-d', 'EA', 'co.RP', 'co.QAM')
('p', 'T', 'RP', 'QAM') => ('-d', 'T', 'RP', 'QAM')
('p', 'T', 'co.RP', 'co.QAM') => ('-d', 'T', 'co.RP', 'co.QAM')
('p', 'R', 'co.RP', 'co.QAM') => ('-d', 'R', 'co.RP', 'co.QAM')
('p', 'R', 'RP', 'QAM') => ('-d', 'R', 'RP', 'QAM')
('-d', 'A', 'MA', 'QIP(2)') => ('-d', 'R', 'MA', 'QIP(2)')
('-d', 'A', 'MA', 'QIP(2)') => ('-d', 'AA', 'MA', 'QIP(2)')
('-d', 'A', 'co.MA', 'co.QIP(2)') => ('-d', 'R', 'co.MA', 'co.QIP(2)')
('-d', 'A', 'co.MA', 'co.QIP(2)') => ('-d', 'AA', 'co.MA', 'co.QIP(2)')
('-d', 'A', 'co.NP', 'co.QIP(2)') => ('-d', 'R', 'co.NP', 'co.QIP(2)')
('-d', 'A', 'co.NP', 'co.QIP(2)') => ('-d', 'AA', 'co.NP', 'co.QIP(2)')
('-d', 'A', 'NP', 'QIP(2)') => ('-d', 'R', 'NP', 'QIP(2)')
('-d', 'A', 'NP', 'QIP(2)') => ('-d', 'AA', 'NP', 'QIP(2)')
('-d', 'A', 'NP', 'QIP(3)') => ('-d', 'R', 'NP', 'QIP(3)')
('-d', 'A', 'NP', 'QIP(3)') => ('-d', 'AA', 'NP', 'QIP(3)')
('-d', 'A', 'co.NP', 'co.QIP(3)') => ('-d', 'R', 'co.NP', 'co.QIP(3)')
('-d', 'A', 'co.NP', 'co.QIP(3)') => ('-d', 'AA', 'co.NP', 'co.QIP(3)')
('-d', 'AA', 'co.NP', 'co.QIP(3)') => ('-d', 'T', 'co.NP', 'co.QIP(3)')
('-d', 'AA', 'co.NP', 'co.QIP(3)') => ('-d', 'EA', 'co.NP', 'co.QIP(3)')
('-d', 'AA', 'NP', 'QIP(3)') => ('-d', 'T', 'NP', 'QIP(3)')
('-d', 'AA', 'NP', 'QIP(3)') => ('-d', 'EA', 'NP', 'QIP(3)')
('-d', 'AA', 'NP', 'QIP(2)') => ('-d', 'T', 'NP', 'QIP(2)')
('-d', 'AA', 'NP', 'QIP(2)') => ('-d', 'EA', 'NP', 'QIP(2)')
('-d', 'AA', 'co.NP', 'co.QIP(2)') => ('-d', 'T', 'co.NP', 'co.QIP(2)')
('-d', 'AA', 'co.NP', 'co.QIP(2)') => ('-d', 'EA', 'co.NP', 'co.QIP(2)')
('-d', 'A', 'co.MA', 'co.QIP(3)') => ('-d', 'R', 'co.MA', 'co.QIP(3)')
('-d', 'A', 'co.MA', 'co.QIP(3)') => ('-d', 'AA', 'co.MA', 'co.QIP(3)')
('-d', 'A', 'MA', 'QIP(3)') => ('-d', 'R', 'MA', 'QIP(3)')
('-d', 'A', 'MA', 'QIP(3)') => ('-d', 'AA', 'MA', 'QIP(3)')
('-d', 'AA', 'MA', 'QIP(3)') => ('-d', 'T', 'MA', 'QIP(3)')
('-d', 'AA', 'MA', 'QIP(3)') => ('-d', 'EA', 'MA', 'QIP(3)')
('-d', 'AA', 'co.MA', 'co.QIP(3)') => ('-d', 'T', 'co.MA', 'co.QIP(3)')
('-d', 'AA', 'co.MA', 'co.QIP(3)') => ('-d', 'EA', 'co.MA', 'co.QIP(3)')
('-d', 'AA', 'co.MA', 'co.QIP(2)') => ('-d', 'T', 'co.MA', 'co.QIP(2)')
('-d', 'AA', 'co.MA', 'co.QIP(2)') => ('-d', 'EA', 'co.MA', 'co.QIP(2)')
('-d', 'AA', 'MA', 'QIP(2)') => ('-d', 'T', 'MA', 'QIP(2)')
('-d', 'AA', 'MA', 'QIP(2)') => ('-d', 'EA', 'MA', 'QIP(2)')
('p', 'A', 'MA', 'QIP(2)') => ('p', 'R', 'MA', 'QIP(2)')
('p', 'A', 'MA', 'QIP(2)') => ('p', 'AA', 'MA', 'QIP(2)')
('p', 'A', 'co.MA', 'co.QIP(2)') => ('p', 'R', 'co.MA', 'co.QIP(2)')
('p', 'A', 'co.MA', 'co.QIP(2)') => ('p', 'AA', 'co.MA', 'co.QIP(2)')
('p', 'A', 'co.NP', 'co.QIP(2)') => ('p', 'R', 'co.NP', 'co.QIP(2)')
('p', 'A', 'co.NP', 'co.QIP(2)') => ('p', 'AA', 'co.NP', 'co.QIP(2)')
('p', 'A', 'NP', 'QIP(2)') => ('p', 'R', 'NP', 'QIP(2)')
('p', 'A', 'NP', 'QIP(2)') => ('p', 'AA', 'NP', 'QIP(2)')
('p', 'A', 'NP', 'QIP(3)') => ('p', 'R', 'NP', 'QIP(3)')
('p', 'A', 'NP', 'QIP(3)') => ('p', 'AA', 'NP', 'QIP(3)')
('p', 'A', 'co.NP', 'co.QIP(3)') => ('p', 'R', 'co.NP', 'co.QIP(3)')
('p', 'A', 'co.NP', 'co.QIP(3)') => ('p', 'AA', 'co.NP', 'co.QIP(3)')
('p', 'AA', 'co.NP', 'co.QIP(3)') => ('p', 'T', 'co.NP', 'co.QIP(3)')
('p', 'AA', 'co.NP', 'co.QIP(3)') => ('p', 'EA', 'co.NP', 'co.QIP(3)')
('p', 'AA', 'NP', 'QIP(3)') => ('p', 'T', 'NP', 'QIP(3)')
('p', 'AA', 'NP', 'QIP(3)') => ('p', 'EA', 'NP', 'QIP(3)')
('p', 'AA', 'NP', 'QIP(2)') => ('p', 'T', 'NP', 'QIP(2)')
('p', 'AA', 'NP', 'QIP(2)') => ('p', 'EA', 'NP', 'QIP(2)')
('p', 'AA', 'co.NP', 'co.QIP(2)') => ('p', 'T', 'co.NP', 'co.QIP(2)')
('p', 'AA', 'co.NP', 'co.QIP(2)') => ('p', 'EA', 'co.NP', 'co.QIP(2)')
('p', 'A', 'co.MA', 'co.QIP(3)') => ('p', 'R', 'co.MA', 'co.QIP(3)')
('p', 'A', 'co.MA', 'co.QIP(3)') => ('p', 'AA', 'co.MA', 'co.QIP(3)')
('p', 'A', 'MA', 'QIP(3)') => ('p', 'R', 'MA', 'QIP(3)')
('p', 'A', 'MA', 'QIP(3)') => ('p', 'AA', 'MA', 'QIP(3)')
('p', 'AA', 'MA', 'QIP(3)') => ('p', 'T', 'MA', 'QIP(3)')
('p', 'AA', 'MA', 'QIP(3)') => ('p', 'EA', 'MA', 'QIP(3)')
('p', 'AA', 'co.MA', 'co.QIP(3)') => ('p', 'T', 'co.MA', 'co.QIP(3)')
('p', 'AA', 'co.MA', 'co.QIP(3)') => ('p', 'EA', 'co.MA', 'co.QIP(3)')
('p', 'AA', 'co.MA', 'co.QIP(2)') => ('p', 'T', 'co.MA', 'co.QIP(2)')
('p', 'AA', 'co.MA', 'co.QIP(2)') => ('p', 'EA', 'co.MA', 'co.QIP(2)')
('p', 'AA', 'MA', 'QIP(2)') => ('p', 'T', 'MA', 'QIP(2)')
('p', 'AA', 'MA', 'QIP(2)') => ('p', 'EA', 'MA', 'QIP(2)')
('p', 'A', 'NP', 'QAM') => ('-d', 'A', 'NP', 'QAM')
('p', 'A', 'NP', 'QAM') => ('p', 'R', 'NP', 'QAM')
('p', 'A', 'NP', 'QAM') => ('p', 'AA', 'NP', 'QAM')
('p', 'A', 'co.NP', 'co.QAM') => ('-d', 'A', 'co.NP', 'co.QAM')
('p', 'A', 'co.NP', 'co.QAM') => ('p', 'R', 'co.NP', 'co.QAM')
('p', 'A', 'co.NP', 'co.QAM') => ('p', 'AA', 'co.NP', 'co.QAM')
('d', 'A', 'co.QAM', 'BQP/mpoly') => ('-p', 'A', 'co.QAM', 'BQP/mpoly')
('d', 'A', 'QAM', 'BQP/mpoly') => ('-p', 'A', 'QAM', 'BQP/mpoly')
('-d', 'A', 'co.NP', 'CH') => ('-d', 'R', 'co.NP', 'CH')
('-d', 'A', 'co.NP', 'CH') => ('-d', 'AA', 'co.NP', 'CH')
('-d', 'A', 'NP', 'CH') => ('-d', 'R', 'NP', 'CH')
('-d', 'A', 'NP', 'CH') => ('-d', 'AA', 'NP', 'CH')
('-d', 'A', 'Delta_2P', 'CH') => ('-d', 'R', 'Delta_2P', 'CH')
('-d', 'A', 'Delta_2P', 'CH') => ('-d', 'AA', 'Delta_2P', 'CH')
('-d', 'AA', 'Delta_2P', 'CH') => ('-d', 'T', 'Delta_2P', 'CH')
('-d', 'AA', 'Delta_2P', 'CH') => ('-d', 'EA', 'Delta_2P', 'CH')
('-d', 'AA', 'NP', 'CH') => ('-d', 'T', 'NP', 'CH')
('-d', 'AA', 'NP', 'CH') => ('-d', 'EA', 'NP', 'CH')
('-d', 'AA', 'co.NP', 'CH') => ('-d', 'T', 'co.NP', 'CH')
('-d', 'AA', 'co.NP', 'CH') => ('-d', 'EA', 'co.NP', 'CH')
('p', 'A', 'co.NP', 'CH') => ('p', 'R', 'co.NP', 'CH')
('p', 'A', 'co.NP', 'CH') => ('p', 'AA', 'co.NP', 'CH')
('p', 'A', 'NP', 'CH') => ('p', 'R', 'NP', 'CH')
('p', 'A', 'NP', 'CH') => ('p', 'AA', 'NP', 'CH')
('p', 'A', 'Delta_2P', 'CH') => ('p', 'R', 'Delta_2P', 'CH')
('p', 'A', 'Delta_2P', 'CH') => ('p', 'AA', 'Delta_2P', 'CH')
('p', 'AA', 'Delta_2P', 'CH') => ('p', 'T', 'Delta_2P', 'CH')
('p', 'AA', 'Delta_2P', 'CH') => ('p', 'EA', 'Delta_2P', 'CH')
('p', 'AA', 'NP', 'CH') => ('p', 'T', 'NP', 'CH')
('p', 'AA', 'NP', 'CH') => ('p', 'EA', 'NP', 'CH')
('p', 'AA', 'co.NP', 'CH') => ('p', 'T', 'co.NP', 'CH')
('p', 'AA', 'co.NP', 'CH') => ('p', 'EA', 'co.NP', 'CH')
('d', 'A', 'co.QAM', 'BQP/qpoly') => ('-p', 'A', 'co.QAM', 'BQP/qpoly')
('d', 'A', 'QAM', 'BQP/qpoly') => ('-p', 'A', 'QAM', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'co.QAM') => ('-d', 'AA', 'co.NP', 'co.QAM')
('p', 'AA', 'co.NP', 'co.QAM') => ('p', 'T', 'co.NP', 'co.QAM')
('p', 'AA', 'co.NP', 'co.QAM') => ('p', 'EA', 'co.NP', 'co.QAM')
('p', 'AA', 'NP', 'QAM') => ('-d', 'AA', 'NP', 'QAM')
('p', 'AA', 'NP', 'QAM') => ('p', 'T', 'NP', 'QAM')
('p', 'AA', 'NP', 'QAM') => ('p', 'EA', 'NP', 'QAM')
('p', 'EA', 'NP', 'QAM') => ('-d', 'EA', 'NP', 'QAM')
('p', 'EA', 'co.NP', 'co.QAM') => ('-d', 'EA', 'co.NP', 'co.QAM')
('p', 'T', 'NP', 'QAM') => ('-d', 'T', 'NP', 'QAM')
('p', 'T', 'co.NP', 'co.QAM') => ('-d', 'T', 'co.NP', 'co.QAM')
('p', 'R', 'co.NP', 'co.QAM') => ('-d', 'R', 'co.NP', 'co.QAM')
('p', 'R', 'NP', 'QAM') => ('-d', 'R', 'NP', 'QAM')
('d', 'R', 'QAM', 'P') => ('-p', 'R', 'QAM', 'P')
('d', 'R', 'co.QAM', 'P') => ('-p', 'R', 'co.QAM', 'P')
('-d', 'A', 'MA', 'CH') => ('-d', 'R', 'MA', 'CH')
('-d', 'A', 'MA', 'CH') => ('-d', 'AA', 'MA', 'CH')
('-d', 'A', 'co.MA', 'CH') => ('-d', 'R', 'co.MA', 'CH')
('-d', 'A', 'co.MA', 'CH') => ('-d', 'AA', 'co.MA', 'CH')
('-d', 'AA', 'co.MA', 'CH') => ('-d', 'T', 'co.MA', 'CH')
('-d', 'AA', 'co.MA', 'CH') => ('-d', 'EA', 'co.MA', 'CH')
('-d', 'AA', 'MA', 'CH') => ('-d', 'T', 'MA', 'CH')
('-d', 'AA', 'MA', 'CH') => ('-d', 'EA', 'MA', 'CH')
('p', 'A', 'MA', 'CH') => ('p', 'R', 'MA', 'CH')
('p', 'A', 'MA', 'CH') => ('p', 'AA', 'MA', 'CH')
('p', 'A', 'co.MA', 'CH') => ('p', 'R', 'co.MA', 'CH')
('p', 'A', 'co.MA', 'CH') => ('p', 'AA', 'co.MA', 'CH')
('p', 'AA', 'co.MA', 'CH') => ('p', 'T', 'co.MA', 'CH')
('p', 'AA', 'co.MA', 'CH') => ('p', 'EA', 'co.MA', 'CH')
('p', 'AA', 'MA', 'CH') => ('p', 'T', 'MA', 'CH')
('p', 'AA', 'MA', 'CH') => ('p', 'EA', 'MA', 'CH')
('p', 'AA', 'MA', 'QAM') => ('-d', 'AA', 'MA', 'QAM')
('p', 'AA', 'MA', 'QAM') => ('p', 'T', 'MA', 'QAM')
('p', 'AA', 'MA', 'QAM') => ('p', 'EA', 'MA', 'QAM')
('p', 'AA', 'co.MA', 'co.QAM') => ('-d', 'AA', 'co.MA', 'co.QAM')
('p', 'AA', 'co.MA', 'co.QAM') => ('p', 'T', 'co.MA', 'co.QAM')
('p', 'AA', 'co.MA', 'co.QAM') => ('p', 'EA', 'co.MA', 'co.QAM')
('p', 'EA', 'co.MA', 'co.QAM') => ('-d', 'EA', 'co.MA', 'co.QAM')
('p', 'EA', 'MA', 'QAM') => ('-d', 'EA', 'MA', 'QAM')
('p', 'T', 'co.MA', 'co.QAM') => ('-d', 'T', 'co.MA', 'co.QAM')
('p', 'T', 'MA', 'QAM') => ('-d', 'T', 'MA', 'QAM')
('p', 'R', 'MA', 'QAM') => ('-d', 'R', 'MA', 'QAM')
('p', 'R', 'co.MA', 'co.QAM') => ('-d', 'R', 'co.MA', 'co.QAM')
('-d', 'A', 'co.QMA', 'co.QIP(3)') => ('-d', 'R', 'co.QMA', 'co.QIP(3)')
('-d', 'A', 'co.QMA', 'co.QIP(3)') => ('-d', 'AA', 'co.QMA', 'co.QIP(3)')
('-d', 'A', 'QMA', 'QIP(3)') => ('-d', 'R', 'QMA', 'QIP(3)')
('-d', 'A', 'QMA', 'QIP(3)') => ('-d', 'AA', 'QMA', 'QIP(3)')
('-d', 'A', 'QCMA', 'QIP(3)') => ('-d', 'R', 'QCMA', 'QIP(3)')
('-d', 'A', 'QCMA', 'QIP(3)') => ('-d', 'AA', 'QCMA', 'QIP(3)')
('-d', 'A', 'co.QCMA', 'co.QIP(3)') => ('-d', 'R', 'co.QCMA', 'co.QIP(3)')
('-d', 'A', 'co.QCMA', 'co.QIP(3)') => ('-d', 'AA', 'co.QCMA', 'co.QIP(3)')
('-d', 'AA', 'co.QCMA', 'co.QIP(3)') => ('-d', 'T', 'co.QCMA', 'co.QIP(3)')
('-d', 'AA', 'co.QCMA', 'co.QIP(3)') => ('-d', 'EA', 'co.QCMA', 'co.QIP(3)')
('-d', 'AA', 'QCMA', 'QIP(3)') => ('-d', 'T', 'QCMA', 'QIP(3)')
('-d', 'AA', 'QCMA', 'QIP(3)') => ('-d', 'EA', 'QCMA', 'QIP(3)')
('-d', 'AA', 'QMA', 'QIP(3)') => ('-d', 'T', 'QMA', 'QIP(3)')
('-d', 'AA', 'QMA', 'QIP(3)') => ('-d', 'EA', 'QMA', 'QIP(3)')
('-d', 'AA', 'co.QMA', 'co.QIP(3)') => ('-d', 'T', 'co.QMA', 'co.QIP(3)')
('-d', 'AA', 'co.QMA', 'co.QIP(3)') => ('-d', 'EA', 'co.QMA', 'co.QIP(3)')
('p', 'A', 'co.QMA', 'co.QIP(3)') => ('p', 'R', 'co.QMA', 'co.QIP(3)')
('p', 'A', 'co.QMA', 'co.QIP(3)') => ('p', 'AA', 'co.QMA', 'co.QIP(3)')
('p', 'A', 'QMA', 'QIP(3)') => ('p', 'R', 'QMA', 'QIP(3)')
('p', 'A', 'QMA', 'QIP(3)') => ('p', 'AA', 'QMA', 'QIP(3)')
('p', 'A', 'QCMA', 'QIP(3)') => ('p', 'R', 'QCMA', 'QIP(3)')
('p', 'A', 'QCMA', 'QIP(3)') => ('p', 'AA', 'QCMA', 'QIP(3)')
('p', 'A', 'co.QCMA', 'co.QIP(3)') => ('p', 'R', 'co.QCMA', 'co.QIP(3)')
('p', 'A', 'co.QCMA', 'co.QIP(3)') => ('p', 'AA', 'co.QCMA', 'co.QIP(3)')
('p', 'AA', 'co.QCMA', 'co.QIP(3)') => ('p', 'T', 'co.QCMA', 'co.QIP(3)')
('p', 'AA', 'co.QCMA', 'co.QIP(3)') => ('p', 'EA', 'co.QCMA', 'co.QIP(3)')
('p', 'AA', 'QCMA', 'QIP(3)') => ('p', 'T', 'QCMA', 'QIP(3)')
('p', 'AA', 'QCMA', 'QIP(3)') => ('p', 'EA', 'QCMA', 'QIP(3)')
('p', 'AA', 'QMA', 'QIP(3)') => ('p', 'T', 'QMA', 'QIP(3)')
('p', 'AA', 'QMA', 'QIP(3)') => ('p', 'EA', 'QMA', 'QIP(3)')
('p', 'AA', 'co.QMA', 'co.QIP(3)') => ('p', 'T', 'co.QMA', 'co.QIP(3)')
('p', 'AA', 'co.QMA', 'co.QIP(3)') => ('p', 'EA', 'co.QMA', 'co.QIP(3)')
('-d', 'A', 'co.QMA', 'co.QIP(2)') => ('-d', 'R', 'co.QMA', 'co.QIP(2)')
('-d', 'A', 'co.QMA', 'co.QIP(2)') => ('-d', 'AA', 'co.QMA', 'co.QIP(2)')
('-d', 'A', 'QMA', 'QIP(2)') => ('-d', 'R', 'QMA', 'QIP(2)')
('-d', 'A', 'QMA', 'QIP(2)') => ('-d', 'AA', 'QMA', 'QIP(2)')
('-d', 'A', 'QCMA', 'QIP(2)') => ('-d', 'R', 'QCMA', 'QIP(2)')
('-d', 'A', 'QCMA', 'QIP(2)') => ('-d', 'AA', 'QCMA', 'QIP(2)')
('-d', 'A', 'co.QCMA', 'co.QIP(2)') => ('-d', 'R', 'co.QCMA', 'co.QIP(2)')
('-d', 'A', 'co.QCMA', 'co.QIP(2)') => ('-d', 'AA', 'co.QCMA', 'co.QIP(2)')
('-d', 'AA', 'co.QCMA', 'co.QIP(2)') => ('-d', 'T', 'co.QCMA', 'co.QIP(2)')
('-d', 'AA', 'co.QCMA', 'co.QIP(2)') => ('-d', 'EA', 'co.QCMA', 'co.QIP(2)')
('-d', 'AA', 'QCMA', 'QIP(2)') => ('-d', 'T', 'QCMA', 'QIP(2)')
('-d', 'AA', 'QCMA', 'QIP(2)') => ('-d', 'EA', 'QCMA', 'QIP(2)')
('-d', 'AA', 'QMA', 'QIP(2)') => ('-d', 'T', 'QMA', 'QIP(2)')
('-d', 'AA', 'QMA', 'QIP(2)') => ('-d', 'EA', 'QMA', 'QIP(2)')
('-d', 'AA', 'co.QMA', 'co.QIP(2)') => ('-d', 'T', 'co.QMA', 'co.QIP(2)')
('-d', 'AA', 'co.QMA', 'co.QIP(2)') => ('-d', 'EA', 'co.QMA', 'co.QIP(2)')
('p', 'A', 'co.QMA', 'co.QIP(2)') => ('p', 'R', 'co.QMA', 'co.QIP(2)')
('p', 'A', 'co.QMA', 'co.QIP(2)') => ('p', 'AA', 'co.QMA', 'co.QIP(2)')
('p', 'A', 'QMA', 'QIP(2)') => ('p', 'R', 'QMA', 'QIP(2)')
('p', 'A', 'QMA', 'QIP(2)') => ('p', 'AA', 'QMA', 'QIP(2)')
('p', 'A', 'QCMA', 'QIP(2)') => ('p', 'R', 'QCMA', 'QIP(2)')
('p', 'A', 'QCMA', 'QIP(2)') => ('p', 'AA', 'QCMA', 'QIP(2)')
('p', 'A', 'co.QCMA', 'co.QIP(2)') => ('p', 'R', 'co.QCMA', 'co.QIP(2)')
('p', 'A', 'co.QCMA', 'co.QIP(2)') => ('p', 'AA', 'co.QCMA', 'co.QIP(2)')
('p', 'AA', 'co.QCMA', 'co.QIP(2)') => ('p', 'T', 'co.QCMA', 'co.QIP(2)')
('p', 'AA', 'co.QCMA', 'co.QIP(2)') => ('p', 'EA', 'co.QCMA', 'co.QIP(2)')
('p', 'AA', 'QCMA', 'QIP(2)') => ('p', 'T', 'QCMA', 'QIP(2)')
('p', 'AA', 'QCMA', 'QIP(2)') => ('p', 'EA', 'QCMA', 'QIP(2)')
('p', 'AA', 'QMA', 'QIP(2)') => ('p', 'T', 'QMA', 'QIP(2)')
('p', 'AA', 'QMA', 'QIP(2)') => ('p', 'EA', 'QMA', 'QIP(2)')
('p', 'AA', 'co.QMA', 'co.QIP(2)') => ('p', 'T', 'co.QMA', 'co.QIP(2)')
('p', 'AA', 'co.QMA', 'co.QIP(2)') => ('p', 'EA', 'co.QMA', 'co.QIP(2)')
('-d', 'A', 'co.QMA', 'CH') => ('-d', 'R', 'co.QMA', 'CH')
('-d', 'A', 'co.QMA', 'CH') => ('-d', 'AA', 'co.QMA', 'CH')
('-d', 'A', 'QMA', 'CH') => ('-d', 'R', 'QMA', 'CH')
('-d', 'A', 'QMA', 'CH') => ('-d', 'AA', 'QMA', 'CH')
('-d', 'A', 'QCMA', 'CH') => ('-d', 'R', 'QCMA', 'CH')
('-d', 'A', 'QCMA', 'CH') => ('-d', 'AA', 'QCMA', 'CH')
('-d', 'A', 'co.QCMA', 'CH') => ('-d', 'R', 'co.QCMA', 'CH')
('-d', 'A', 'co.QCMA', 'CH') => ('-d', 'AA', 'co.QCMA', 'CH')
('-d', 'AA', 'co.QCMA', 'CH') => ('-d', 'T', 'co.QCMA', 'CH')
('-d', 'AA', 'co.QCMA', 'CH') => ('-d', 'EA', 'co.QCMA', 'CH')
('-d', 'AA', 'QCMA', 'CH') => ('-d', 'T', 'QCMA', 'CH')
('-d', 'AA', 'QCMA', 'CH') => ('-d', 'EA', 'QCMA', 'CH')
('-d', 'AA', 'QMA', 'CH') => ('-d', 'T', 'QMA', 'CH')
('-d', 'AA', 'QMA', 'CH') => ('-d', 'EA', 'QMA', 'CH')
('-d', 'AA', 'co.QMA', 'CH') => ('-d', 'T', 'co.QMA', 'CH')
('-d', 'AA', 'co.QMA', 'CH') => ('-d', 'EA', 'co.QMA', 'CH')
('p', 'A', 'co.QMA', 'CH') => ('p', 'R', 'co.QMA', 'CH')
('p', 'A', 'co.QMA', 'CH') => ('p', 'AA', 'co.QMA', 'CH')
('p', 'A', 'QMA', 'CH') => ('p', 'R', 'QMA', 'CH')
('p', 'A', 'QMA', 'CH') => ('p', 'AA', 'QMA', 'CH')
('p', 'A', 'QCMA', 'CH') => ('p', 'R', 'QCMA', 'CH')
('p', 'A', 'QCMA', 'CH') => ('p', 'AA', 'QCMA', 'CH')
('p', 'A', 'co.QCMA', 'CH') => ('p', 'R', 'co.QCMA', 'CH')
('p', 'A', 'co.QCMA', 'CH') => ('p', 'AA', 'co.QCMA', 'CH')
('p', 'AA', 'co.QCMA', 'CH') => ('p', 'T', 'co.QCMA', 'CH')
('p', 'AA', 'co.QCMA', 'CH') => ('p', 'EA', 'co.QCMA', 'CH')
('p', 'AA', 'QCMA', 'CH') => ('p', 'T', 'QCMA', 'CH')
('p', 'AA', 'QCMA', 'CH') => ('p', 'EA', 'QCMA', 'CH')
('p', 'AA', 'QMA', 'CH') => ('p', 'T', 'QMA', 'CH')
('p', 'AA', 'QMA', 'CH') => ('p', 'EA', 'QMA', 'CH')
('p', 'AA', 'co.QMA', 'CH') => ('p', 'T', 'co.QMA', 'CH')
('p', 'AA', 'co.QMA', 'CH') => ('p', 'EA', 'co.QMA', 'CH')
('p', 'E', 'co.QCMA', 'co.QAM') => ('-d', 'E', 'co.QCMA', 'co.QAM')
('p', 'E', 'QCMA', 'QAM') => ('-d', 'E', 'QCMA', 'QAM')
('p', 'A', 'co.QCMA', 'co.QAM') => ('-d', 'A', 'co.QCMA', 'co.QAM')
('p', 'A', 'co.QCMA', 'co.QAM') => ('p', 'R', 'co.QCMA', 'co.QAM')
('p', 'A', 'co.QCMA', 'co.QAM') => ('p', 'AA', 'co.QCMA', 'co.QAM')
('p', 'A', 'QCMA', 'QAM') => ('-d', 'A', 'QCMA', 'QAM')
('p', 'A', 'QCMA', 'QAM') => ('p', 'R', 'QCMA', 'QAM')
('p', 'A', 'QCMA', 'QAM') => ('p', 'AA', 'QCMA', 'QAM')
('p', 'AA', 'QCMA', 'QAM') => ('-d', 'AA', 'QCMA', 'QAM')
('p', 'AA', 'QCMA', 'QAM') => ('p', 'T', 'QCMA', 'QAM')
('p', 'AA', 'QCMA', 'QAM') => ('p', 'EA', 'QCMA', 'QAM')
('p', 'AA', 'co.QCMA', 'co.QAM') => ('-d', 'AA', 'co.QCMA', 'co.QAM')
('p', 'AA', 'co.QCMA', 'co.QAM') => ('p', 'T', 'co.QCMA', 'co.QAM')
('p', 'AA', 'co.QCMA', 'co.QAM') => ('p', 'EA', 'co.QCMA', 'co.QAM')
('p', 'EA', 'co.QCMA', 'co.QAM') => ('-d', 'EA', 'co.QCMA', 'co.QAM')
('p', 'EA', 'QCMA', 'QAM') => ('-d', 'EA', 'QCMA', 'QAM')
('p', 'T', 'co.QCMA', 'co.QAM') => ('-d', 'T', 'co.QCMA', 'co.QAM')
('p', 'T', 'QCMA', 'QAM') => ('-d', 'T', 'QCMA', 'QAM')
('p', 'R', 'QCMA', 'QAM') => ('-d', 'R', 'QCMA', 'QAM')
('p', 'R', 'co.QCMA', 'co.QAM') => ('-d', 'R', 'co.QCMA', 'co.QAM')
('p', 'AA', 'co.QMA', 'co.QAM') => ('-d', 'AA', 'co.QMA', 'co.QAM')
('p', 'AA', 'co.QMA', 'co.QAM') => ('p', 'T', 'co.QMA', 'co.QAM')
('p', 'AA', 'co.QMA', 'co.QAM') => ('p', 'EA', 'co.QMA', 'co.QAM')
('p', 'AA', 'QMA', 'QAM') => ('-d', 'AA', 'QMA', 'QAM')
('p', 'AA', 'QMA', 'QAM') => ('p', 'T', 'QMA', 'QAM')
('p', 'AA', 'QMA', 'QAM') => ('p', 'EA', 'QMA', 'QAM')
('p', 'EA', 'QMA', 'QAM') => ('-d', 'EA', 'QMA', 'QAM')
('p', 'EA', 'QMA', 'QAM') => ('p', 'E', 'QMA', 'QAM')
('p', 'EA', 'co.QMA', 'co.QAM') => ('-d', 'EA', 'co.QMA', 'co.QAM')
('p', 'EA', 'co.QMA', 'co.QAM') => ('p', 'E', 'co.QMA', 'co.QAM')
('p', 'E', 'co.QMA', 'co.QAM') => ('-d', 'E', 'co.QMA', 'co.QAM')
('p', 'E', 'QMA', 'QAM') => ('-d', 'E', 'QMA', 'QAM')
('p', 'T', 'QMA', 'QAM') => ('-d', 'T', 'QMA', 'QAM')
('p', 'T', 'co.QMA', 'co.QAM') => ('-d', 'T', 'co.QMA', 'co.QAM')
('p', 'R', 'co.QMA', 'co.QAM') => ('-d', 'R', 'co.QMA', 'co.QAM')
('p', 'R', 'QMA', 'QAM') => ('-d', 'R', 'QMA', 'QAM')
('d', 'A', 'BQP', 'PH') => ('-p', 'A', 'BQP', 'PH')
('p', 'A', 'RG(1)', 'RG(2)') => ('-d', 'A', 'RG(1)', 'RG(2)')
('p', 'A', 'RG(1)', 'RG(2)') => ('p', 'R', 'RG(1)', 'RG(2)')
('p', 'A', 'RG(1)', 'RG(2)') => ('p', 'AA', 'RG(1)', 'RG(2)')
('p', 'AA', 'RG(1)', 'RG(2)') => ('-d', 'AA', 'RG(1)', 'RG(2)')
('p', 'AA', 'RG(1)', 'RG(2)') => ('p', 'T', 'RG(1)', 'RG(2)')
('p', 'AA', 'RG(1)', 'RG(2)') => ('p', 'EA', 'RG(1)', 'RG(2)')
('p', 'EA', 'RG(1)', 'RG(2)') => ('-d', 'EA', 'RG(1)', 'RG(2)')
('p', 'EA', 'RG(1)', 'RG(2)') => ('p', 'E', 'RG(1)', 'RG(2)')
('p', 'E', 'RG(1)', 'RG(2)') => ('-d', 'E', 'RG(1)', 'RG(2)')
('p', 'T', 'RG(1)', 'RG(2)') => ('-d', 'T', 'RG(1)', 'RG(2)')
('p', 'R', 'RG(1)', 'RG(2)') => ('-d', 'R', 'RG(1)', 'RG(2)')
('d', 'A', 'cocap.NP', 'BQP') => ('-p', 'A', 'cocap.NP', 'BQP')
('p', 'A', 'QMA', 'SBQP') => ('-d', 'A', 'QMA', 'SBQP')
('p', 'A', 'QMA', 'SBQP') => ('p', 'R', 'QMA', 'SBQP')
('p', 'A', 'QMA', 'SBQP') => ('p', 'AA', 'QMA', 'SBQP')
('p', 'A', 'co.QMA', 'co.SBQP') => ('-d', 'A', 'co.QMA', 'co.SBQP')
('p', 'A', 'co.QMA', 'co.SBQP') => ('p', 'R', 'co.QMA', 'co.SBQP')
('p', 'A', 'co.QMA', 'co.SBQP') => ('p', 'AA', 'co.QMA', 'co.SBQP')
('p', 'A', 'cocap.QMA', 'cocap.SBQP') => ('-d', 'A', 'cocap.QMA', 'cocap.SBQP')
('p', 'A', 'cocap.QMA', 'cocap.SBQP') => ('p', 'R', 'cocap.QMA', 'cocap.SBQP')
('p', 'A', 'cocap.QMA', 'cocap.SBQP') => ('p', 'AA', 'cocap.QMA', 'cocap.SBQP')
('d', 'A', 'cocap.SBQP', 'RP') => ('-p', 'A', 'cocap.SBQP', 'RP')
('d', 'A', 'cocap.SBQP', 'co.RP') => ('-p', 'A', 'cocap.SBQP', 'co.RP')
('p', 'A', 'P', 'cocap.SBQP') => ('-d', 'A', 'P', 'cocap.SBQP')
('p', 'A', 'P', 'cocap.SBQP') => ('p', 'R', 'P', 'cocap.SBQP')
('p', 'A', 'P', 'cocap.SBQP') => ('p', 'AA', 'P', 'cocap.SBQP')
('-d', 'A', 'P', 'co.SBQP') => ('-d', 'R', 'P', 'co.SBQP')
('-d', 'A', 'P', 'co.SBQP') => ('-d', 'AA', 'P', 'co.SBQP')
('-d', 'A', 'P', 'SBQP') => ('-d', 'R', 'P', 'SBQP')
('-d', 'A', 'P', 'SBQP') => ('-d', 'AA', 'P', 'SBQP')
('-d', 'A', 'P', 'cocap.SBQP') => ('-d', 'R', 'P', 'cocap.SBQP')
('-d', 'A', 'P', 'cocap.SBQP') => ('-d', 'AA', 'P', 'cocap.SBQP')
('-d', 'AA', 'P', 'cocap.SBQP') => ('-d', 'T', 'P', 'cocap.SBQP')
('-d', 'AA', 'P', 'cocap.SBQP') => ('-d', 'EA', 'P', 'cocap.SBQP')
('-d', 'AA', 'P', 'co.SBQP') => ('-d', 'T', 'P', 'co.SBQP')
('-d', 'AA', 'P', 'co.SBQP') => ('-d', 'EA', 'P', 'co.SBQP')
('-d', 'AA', 'P', 'SBQP') => ('-d', 'T', 'P', 'SBQP')
('-d', 'AA', 'P', 'SBQP') => ('-d', 'EA', 'P', 'SBQP')
('p', 'A', 'P', 'co.SBQP') => ('p', 'R', 'P', 'co.SBQP')
('p', 'A', 'P', 'co.SBQP') => ('p', 'AA', 'P', 'co.SBQP')
('p', 'A', 'P', 'SBQP') => ('p', 'R', 'P', 'SBQP')
('p', 'A', 'P', 'SBQP') => ('p', 'AA', 'P', 'SBQP')
('p', 'AA', 'P', 'SBQP') => ('p', 'T', 'P', 'SBQP')
('p', 'AA', 'P', 'SBQP') => ('p', 'EA', 'P', 'SBQP')
('p', 'AA', 'P', 'co.SBQP') => ('p', 'T', 'P', 'co.SBQP')
('p', 'AA', 'P', 'co.SBQP') => ('p', 'EA', 'P', 'co.SBQP')
('p', 'AA', 'P', 'cocap.SBQP') => ('p', 'T', 'P', 'cocap.SBQP')
('p', 'AA', 'P', 'cocap.SBQP') => ('p', 'EA', 'P', 'cocap.SBQP')
('-d', 'A', 'cocap.QMA', 'co.SBQP') => ('-d', 'R', 'cocap.QMA', 'co.SBQP')
('-d', 'A', 'cocap.QMA', 'co.SBQP') => ('-d', 'AA', 'cocap.QMA', 'co.SBQP')
('-d', 'A', 'cocap.QMA', 'SBQP') => ('-d', 'R', 'cocap.QMA', 'SBQP')
('-d', 'A', 'cocap.QMA', 'SBQP') => ('-d', 'AA', 'cocap.QMA', 'SBQP')
('-d', 'A', 'cocap.QMA', 'cocap.SBQP') => ('-d', 'R', 'cocap.QMA', 'cocap.SBQP')
('-d', 'A', 'cocap.QMA', 'cocap.SBQP') => ('-d', 'AA', 'cocap.QMA', 'cocap.SBQP')
('-d', 'A', 'BQP', 'cocap.SBQP') => ('-d', 'R', 'BQP', 'cocap.SBQP')
('-d', 'A', 'BQP', 'cocap.SBQP') => ('-d', 'AA', 'BQP', 'cocap.SBQP')
('-d', 'A', 'BQP', 'co.SBQP') => ('-d', 'R', 'BQP', 'co.SBQP')
('-d', 'A', 'BQP', 'co.SBQP') => ('-d', 'AA', 'BQP', 'co.SBQP')
('-d', 'A', 'BQP', 'SBQP') => ('-d', 'R', 'BQP', 'SBQP')
('-d', 'A', 'BQP', 'SBQP') => ('-d', 'AA', 'BQP', 'SBQP')
('-d', 'AA', 'BQP', 'SBQP') => ('-d', 'T', 'BQP', 'SBQP')
('-d', 'AA', 'BQP', 'SBQP') => ('-d', 'EA', 'BQP', 'SBQP')
('-d', 'AA', 'BQP', 'co.SBQP') => ('-d', 'T', 'BQP', 'co.SBQP')
('-d', 'AA', 'BQP', 'co.SBQP') => ('-d', 'EA', 'BQP', 'co.SBQP')
('-d', 'AA', 'BQP', 'cocap.SBQP') => ('-d', 'T', 'BQP', 'cocap.SBQP')
('-d', 'AA', 'BQP', 'cocap.SBQP') => ('-d', 'EA', 'BQP', 'cocap.SBQP')
('-d', 'A', 'cocap.QCMA', 'cocap.SBQP') => ('-d', 'R', 'cocap.QCMA', 'cocap.SBQP')
('-d', 'A', 'cocap.QCMA', 'cocap.SBQP') => ('-d', 'AA', 'cocap.QCMA', 'cocap.SBQP')
('-d', 'A', 'cocap.QCMA', 'co.SBQP') => ('-d', 'R', 'cocap.QCMA', 'co.SBQP')
('-d', 'A', 'cocap.QCMA', 'co.SBQP') => ('-d', 'AA', 'cocap.QCMA', 'co.SBQP')
('-d', 'A', 'cocap.QCMA', 'SBQP') => ('-d', 'R', 'cocap.QCMA', 'SBQP')
('-d', 'A', 'cocap.QCMA', 'SBQP') => ('-d', 'AA', 'cocap.QCMA', 'SBQP')
('-d', 'A', 'cocap.NP', 'SBQP') => ('-d', 'R', 'cocap.NP', 'SBQP')
('-d', 'A', 'cocap.NP', 'SBQP') => ('-d', 'AA', 'cocap.NP', 'SBQP')
('-d', 'A', 'cocap.NP', 'co.SBQP') => ('-d', 'R', 'cocap.NP', 'co.SBQP')
('-d', 'A', 'cocap.NP', 'co.SBQP') => ('-d', 'AA', 'cocap.NP', 'co.SBQP')
('-d', 'A', 'cocap.NP', 'cocap.SBQP') => ('-d', 'R', 'cocap.NP', 'cocap.SBQP')
('-d', 'A', 'cocap.NP', 'cocap.SBQP') => ('-d', 'AA', 'cocap.NP', 'cocap.SBQP')
('-d', 'A', 'ZPP', 'cocap.SBQP') => ('-d', 'R', 'ZPP', 'cocap.SBQP')
('-d', 'A', 'ZPP', 'cocap.SBQP') => ('-d', 'AA', 'ZPP', 'cocap.SBQP')
('-d', 'A', 'ZPP', 'co.SBQP') => ('-d', 'R', 'ZPP', 'co.SBQP')
('-d', 'A', 'ZPP', 'co.SBQP') => ('-d', 'AA', 'ZPP', 'co.SBQP')
('-d', 'A', 'ZPP', 'SBQP') => ('-d', 'R', 'ZPP', 'SBQP')
('-d', 'A', 'ZPP', 'SBQP') => ('-d', 'AA', 'ZPP', 'SBQP')
('-d', 'AA', 'ZPP', 'SBQP') => ('-d', 'T', 'ZPP', 'SBQP')
('-d', 'AA', 'ZPP', 'SBQP') => ('-d', 'EA', 'ZPP', 'SBQP')
('-d', 'AA', 'ZPP', 'co.SBQP') => ('-d', 'T', 'ZPP', 'co.SBQP')
('-d', 'AA', 'ZPP', 'co.SBQP') => ('-d', 'EA', 'ZPP', 'co.SBQP')
('-d', 'AA', 'ZPP', 'cocap.SBQP') => ('-d', 'T', 'ZPP', 'cocap.SBQP')
('-d', 'AA', 'ZPP', 'cocap.SBQP') => ('-d', 'EA', 'ZPP', 'cocap.SBQP')
('-d', 'AA', 'cocap.NP', 'cocap.SBQP') => ('-d', 'T', 'cocap.NP', 'cocap.SBQP')
('-d', 'AA', 'cocap.NP', 'cocap.SBQP') => ('-d', 'EA', 'cocap.NP', 'cocap.SBQP')
('-d', 'AA', 'cocap.NP', 'co.SBQP') => ('-d', 'T', 'cocap.NP', 'co.SBQP')
('-d', 'AA', 'cocap.NP', 'co.SBQP') => ('-d', 'EA', 'cocap.NP', 'co.SBQP')
('-d', 'AA', 'cocap.NP', 'SBQP') => ('-d', 'T', 'cocap.NP', 'SBQP')
('-d', 'AA', 'cocap.NP', 'SBQP') => ('-d', 'EA', 'cocap.NP', 'SBQP')
('-d', 'A', 'cocap.MA', 'SBQP') => ('-d', 'R', 'cocap.MA', 'SBQP')
('-d', 'A', 'cocap.MA', 'SBQP') => ('-d', 'AA', 'cocap.MA', 'SBQP')
('-d', 'A', 'cocap.MA', 'co.SBQP') => ('-d', 'R', 'cocap.MA', 'co.SBQP')
('-d', 'A', 'cocap.MA', 'co.SBQP') => ('-d', 'AA', 'cocap.MA', 'co.SBQP')
('-d', 'A', 'cocap.MA', 'cocap.SBQP') => ('-d', 'R', 'cocap.MA', 'cocap.SBQP')
('-d', 'A', 'cocap.MA', 'cocap.SBQP') => ('-d', 'AA', 'cocap.MA', 'cocap.SBQP')
('-d', 'AA', 'cocap.MA', 'cocap.SBQP') => ('-d', 'T', 'cocap.MA', 'cocap.SBQP')
('-d', 'AA', 'cocap.MA', 'cocap.SBQP') => ('-d', 'EA', 'cocap.MA', 'cocap.SBQP')
('-d', 'AA', 'cocap.MA', 'co.SBQP') => ('-d', 'T', 'cocap.MA', 'co.SBQP')
('-d', 'AA', 'cocap.MA', 'co.SBQP') => ('-d', 'EA', 'cocap.MA', 'co.SBQP')
('-d', 'AA', 'cocap.MA', 'SBQP') => ('-d', 'T', 'cocap.MA', 'SBQP')
('-d', 'AA', 'cocap.MA', 'SBQP') => ('-d', 'EA', 'cocap.MA', 'SBQP')
('-d', 'AA', 'cocap.QCMA', 'SBQP') => ('-d', 'T', 'cocap.QCMA', 'SBQP')
('-d', 'AA', 'cocap.QCMA', 'SBQP') => ('-d', 'EA', 'cocap.QCMA', 'SBQP')
('-d', 'AA', 'cocap.QCMA', 'co.SBQP') => ('-d', 'T', 'cocap.QCMA', 'co.SBQP')
('-d', 'AA', 'cocap.QCMA', 'co.SBQP') => ('-d', 'EA', 'cocap.QCMA', 'co.SBQP')
('-d', 'AA', 'cocap.QCMA', 'cocap.SBQP') => ('-d', 'T', 'cocap.QCMA', 'cocap.SBQP')
('-d', 'AA', 'cocap.QCMA', 'cocap.SBQP') => ('-d', 'EA', 'cocap.QCMA', 'cocap.SBQP')
('-d', 'AA', 'cocap.QMA', 'cocap.SBQP') => ('-d', 'T', 'cocap.QMA', 'cocap.SBQP')
('-d', 'AA', 'cocap.QMA', 'cocap.SBQP') => ('-d', 'EA', 'cocap.QMA', 'cocap.SBQP')
('-d', 'AA', 'cocap.QMA', 'co.SBQP') => ('-d', 'T', 'cocap.QMA', 'co.SBQP')
('-d', 'AA', 'cocap.QMA', 'co.SBQP') => ('-d', 'EA', 'cocap.QMA', 'co.SBQP')
('-d', 'AA', 'cocap.QMA', 'SBQP') => ('-d', 'T', 'cocap.QMA', 'SBQP')
('-d', 'AA', 'cocap.QMA', 'SBQP') => ('-d', 'EA', 'cocap.QMA', 'SBQP')
('p', 'A', 'cocap.QMA', 'co.SBQP') => ('p', 'R', 'cocap.QMA', 'co.SBQP')
('p', 'A', 'cocap.QMA', 'co.SBQP') => ('p', 'AA', 'cocap.QMA', 'co.SBQP')
('p', 'A', 'cocap.QMA', 'SBQP') => ('p', 'R', 'cocap.QMA', 'SBQP')
('p', 'A', 'cocap.QMA', 'SBQP') => ('p', 'AA', 'cocap.QMA', 'SBQP')
('p', 'A', 'BQP', 'SBQP') => ('p', 'R', 'BQP', 'SBQP')
('p', 'A', 'BQP', 'SBQP') => ('p', 'AA', 'BQP', 'SBQP')
('p', 'A', 'BQP', 'co.SBQP') => ('p', 'R', 'BQP', 'co.SBQP')
('p', 'A', 'BQP', 'co.SBQP') => ('p', 'AA', 'BQP', 'co.SBQP')
('p', 'A', 'BQP', 'cocap.SBQP') => ('p', 'R', 'BQP', 'cocap.SBQP')
('p', 'A', 'BQP', 'cocap.SBQP') => ('p', 'AA', 'BQP', 'cocap.SBQP')
('p', 'AA', 'BQP', 'cocap.SBQP') => ('p', 'T', 'BQP', 'cocap.SBQP')
('p', 'AA', 'BQP', 'cocap.SBQP') => ('p', 'EA', 'BQP', 'cocap.SBQP')
('p', 'AA', 'BQP', 'co.SBQP') => ('p', 'T', 'BQP', 'co.SBQP')
('p', 'AA', 'BQP', 'co.SBQP') => ('p', 'EA', 'BQP', 'co.SBQP')
('p', 'AA', 'BQP', 'SBQP') => ('p', 'T', 'BQP', 'SBQP')
('p', 'AA', 'BQP', 'SBQP') => ('p', 'EA', 'BQP', 'SBQP')
('p', 'A', 'cocap.QCMA', 'SBQP') => ('p', 'R', 'cocap.QCMA', 'SBQP')
('p', 'A', 'cocap.QCMA', 'SBQP') => ('p', 'AA', 'cocap.QCMA', 'SBQP')
('p', 'A', 'cocap.QCMA', 'co.SBQP') => ('p', 'R', 'cocap.QCMA', 'co.SBQP')
('p', 'A', 'cocap.QCMA', 'co.SBQP') => ('p', 'AA', 'cocap.QCMA', 'co.SBQP')
('p', 'A', 'cocap.QCMA', 'cocap.SBQP') => ('p', 'R', 'cocap.QCMA', 'cocap.SBQP')
('p', 'A', 'cocap.QCMA', 'cocap.SBQP') => ('p', 'AA', 'cocap.QCMA', 'cocap.SBQP')
('p', 'A', 'cocap.NP', 'cocap.SBQP') => ('p', 'R', 'cocap.NP', 'cocap.SBQP')
('p', 'A', 'cocap.NP', 'cocap.SBQP') => ('p', 'AA', 'cocap.NP', 'cocap.SBQP')
('p', 'A', 'cocap.NP', 'co.SBQP') => ('p', 'R', 'cocap.NP', 'co.SBQP')
('p', 'A', 'cocap.NP', 'co.SBQP') => ('p', 'AA', 'cocap.NP', 'co.SBQP')
('p', 'A', 'cocap.NP', 'SBQP') => ('p', 'R', 'cocap.NP', 'SBQP')
('p', 'A', 'cocap.NP', 'SBQP') => ('p', 'AA', 'cocap.NP', 'SBQP')
('p', 'A', 'ZPP', 'SBQP') => ('p', 'R', 'ZPP', 'SBQP')
('p', 'A', 'ZPP', 'SBQP') => ('p', 'AA', 'ZPP', 'SBQP')
('p', 'A', 'ZPP', 'co.SBQP') => ('p', 'R', 'ZPP', 'co.SBQP')
('p', 'A', 'ZPP', 'co.SBQP') => ('p', 'AA', 'ZPP', 'co.SBQP')
('p', 'A', 'ZPP', 'cocap.SBQP') => ('p', 'R', 'ZPP', 'cocap.SBQP')
('p', 'A', 'ZPP', 'cocap.SBQP') => ('p', 'AA', 'ZPP', 'cocap.SBQP')
('p', 'AA', 'ZPP', 'cocap.SBQP') => ('p', 'T', 'ZPP', 'cocap.SBQP')
('p', 'AA', 'ZPP', 'cocap.SBQP') => ('p', 'EA', 'ZPP', 'cocap.SBQP')
('p', 'AA', 'ZPP', 'co.SBQP') => ('p', 'T', 'ZPP', 'co.SBQP')
('p', 'AA', 'ZPP', 'co.SBQP') => ('p', 'EA', 'ZPP', 'co.SBQP')
('p', 'AA', 'ZPP', 'SBQP') => ('p', 'T', 'ZPP', 'SBQP')
('p', 'AA', 'ZPP', 'SBQP') => ('p', 'EA', 'ZPP', 'SBQP')
('p', 'AA', 'cocap.NP', 'SBQP') => ('p', 'T', 'cocap.NP', 'SBQP')
('p', 'AA', 'cocap.NP', 'SBQP') => ('p', 'EA', 'cocap.NP', 'SBQP')
('p', 'AA', 'cocap.NP', 'co.SBQP') => ('p', 'T', 'cocap.NP', 'co.SBQP')
('p', 'AA', 'cocap.NP', 'co.SBQP') => ('p', 'EA', 'cocap.NP', 'co.SBQP')
('p', 'AA', 'cocap.NP', 'cocap.SBQP') => ('p', 'T', 'cocap.NP', 'cocap.SBQP')
('p', 'AA', 'cocap.NP', 'cocap.SBQP') => ('p', 'EA', 'cocap.NP', 'cocap.SBQP')
('p', 'A', 'cocap.MA', 'cocap.SBQP') => ('p', 'R', 'cocap.MA', 'cocap.SBQP')
('p', 'A', 'cocap.MA', 'cocap.SBQP') => ('p', 'AA', 'cocap.MA', 'cocap.SBQP')
('p', 'A', 'cocap.MA', 'co.SBQP') => ('p', 'R', 'cocap.MA', 'co.SBQP')
('p', 'A', 'cocap.MA', 'co.SBQP') => ('p', 'AA', 'cocap.MA', 'co.SBQP')
('p', 'A', 'cocap.MA', 'SBQP') => ('p', 'R', 'cocap.MA', 'SBQP')
('p', 'A', 'cocap.MA', 'SBQP') => ('p', 'AA', 'cocap.MA', 'SBQP')
('p', 'AA', 'cocap.MA', 'SBQP') => ('p', 'T', 'cocap.MA', 'SBQP')
('p', 'AA', 'cocap.MA', 'SBQP') => ('p', 'EA', 'cocap.MA', 'SBQP')
('p', 'AA', 'cocap.MA', 'co.SBQP') => ('p', 'T', 'cocap.MA', 'co.SBQP')
('p', 'AA', 'cocap.MA', 'co.SBQP') => ('p', 'EA', 'cocap.MA', 'co.SBQP')
('p', 'AA', 'cocap.MA', 'cocap.SBQP') => ('p', 'T', 'cocap.MA', 'cocap.SBQP')
('p', 'AA', 'cocap.MA', 'cocap.SBQP') => ('p', 'EA', 'cocap.MA', 'cocap.SBQP')
('p', 'AA', 'cocap.QCMA', 'cocap.SBQP') => ('p', 'T', 'cocap.QCMA', 'cocap.SBQP')
('p', 'AA', 'cocap.QCMA', 'cocap.SBQP') => ('p', 'EA', 'cocap.QCMA', 'cocap.SBQP')
('p', 'AA', 'cocap.QCMA', 'co.SBQP') => ('p', 'T', 'cocap.QCMA', 'co.SBQP')
('p', 'AA', 'cocap.QCMA', 'co.SBQP') => ('p', 'EA', 'cocap.QCMA', 'co.SBQP')
('p', 'AA', 'cocap.QCMA', 'SBQP') => ('p', 'T', 'cocap.QCMA', 'SBQP')
('p', 'AA', 'cocap.QCMA', 'SBQP') => ('p', 'EA', 'cocap.QCMA', 'SBQP')
('p', 'AA', 'cocap.QMA', 'SBQP') => ('p', 'T', 'cocap.QMA', 'SBQP')
('p', 'AA', 'cocap.QMA', 'SBQP') => ('p', 'EA', 'cocap.QMA', 'SBQP')
('p', 'AA', 'cocap.QMA', 'co.SBQP') => ('p', 'T', 'cocap.QMA', 'co.SBQP')
('p', 'AA', 'cocap.QMA', 'co.SBQP') => ('p', 'EA', 'cocap.QMA', 'co.SBQP')
('p', 'AA', 'cocap.QMA', 'cocap.SBQP') => ('p', 'T', 'cocap.QMA', 'cocap.SBQP')
('p', 'AA', 'cocap.QMA', 'cocap.SBQP') => ('p', 'EA', 'cocap.QMA', 'cocap.SBQP')
('p', 'A', 'co.MA', 'co.SBQP') => ('-d', 'A', 'co.MA', 'co.SBQP')
('p', 'A', 'co.MA', 'co.SBQP') => ('p', 'R', 'co.MA', 'co.SBQP')
('p', 'A', 'co.MA', 'co.SBQP') => ('p', 'AA', 'co.MA', 'co.SBQP')
('p', 'A', 'MA', 'SBQP') => ('-d', 'A', 'MA', 'SBQP')
('p', 'A', 'MA', 'SBQP') => ('p', 'R', 'MA', 'SBQP')
('p', 'A', 'MA', 'SBQP') => ('p', 'AA', 'MA', 'SBQP')
('p', 'A', 'RP', 'SBQP') => ('-d', 'A', 'RP', 'SBQP')
('p', 'A', 'RP', 'SBQP') => ('p', 'R', 'RP', 'SBQP')
('p', 'A', 'RP', 'SBQP') => ('p', 'AA', 'RP', 'SBQP')
('p', 'A', 'co.RP', 'co.SBQP') => ('-d', 'A', 'co.RP', 'co.SBQP')
('p', 'A', 'co.RP', 'co.SBQP') => ('p', 'R', 'co.RP', 'co.SBQP')
('p', 'A', 'co.RP', 'co.SBQP') => ('p', 'AA', 'co.RP', 'co.SBQP')
('p', 'AA', 'co.RP', 'co.SBQP') => ('-d', 'AA', 'co.RP', 'co.SBQP')
('p', 'AA', 'co.RP', 'co.SBQP') => ('p', 'T', 'co.RP', 'co.SBQP')
('p', 'AA', 'co.RP', 'co.SBQP') => ('p', 'EA', 'co.RP', 'co.SBQP')
('p', 'AA', 'RP', 'SBQP') => ('-d', 'AA', 'RP', 'SBQP')
('p', 'AA', 'RP', 'SBQP') => ('p', 'T', 'RP', 'SBQP')
('p', 'AA', 'RP', 'SBQP') => ('p', 'EA', 'RP', 'SBQP')
('p', 'EA', 'RP', 'SBQP') => ('-d', 'EA', 'RP', 'SBQP')
('p', 'EA', 'co.RP', 'co.SBQP') => ('-d', 'EA', 'co.RP', 'co.SBQP')
('p', 'T', 'RP', 'SBQP') => ('-d', 'T', 'RP', 'SBQP')
('p', 'T', 'co.RP', 'co.SBQP') => ('-d', 'T', 'co.RP', 'co.SBQP')
('p', 'R', 'co.RP', 'co.SBQP') => ('-d', 'R', 'co.RP', 'co.SBQP')
('p', 'R', 'RP', 'SBQP') => ('-d', 'R', 'RP', 'SBQP')
('p', 'A', 'NP', 'SBQP') => ('-d', 'A', 'NP', 'SBQP')
('p', 'A', 'NP', 'SBQP') => ('p', 'R', 'NP', 'SBQP')
('p', 'A', 'NP', 'SBQP') => ('p', 'AA', 'NP', 'SBQP')
('p', 'A', 'co.NP', 'co.SBQP') => ('-d', 'A', 'co.NP', 'co.SBQP')
('p', 'A', 'co.NP', 'co.SBQP') => ('p', 'R', 'co.NP', 'co.SBQP')
('p', 'A', 'co.NP', 'co.SBQP') => ('p', 'AA', 'co.NP', 'co.SBQP')
('d', 'A', 'co.SBQP', 'BQP/mpoly') => ('-p', 'A', 'co.SBQP', 'BQP/mpoly')
('d', 'A', 'SBQP', 'BQP/mpoly') => ('-p', 'A', 'SBQP', 'BQP/mpoly')
('d', 'A', 'co.SBQP', 'BQP/qpoly') => ('-p', 'A', 'co.SBQP', 'BQP/qpoly')
('d', 'A', 'SBQP', 'BQP/qpoly') => ('-p', 'A', 'SBQP', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'co.SBQP') => ('-d', 'AA', 'co.NP', 'co.SBQP')
('p', 'AA', 'co.NP', 'co.SBQP') => ('p', 'T', 'co.NP', 'co.SBQP')
('p', 'AA', 'co.NP', 'co.SBQP') => ('p', 'EA', 'co.NP', 'co.SBQP')
('p', 'AA', 'NP', 'SBQP') => ('-d', 'AA', 'NP', 'SBQP')
('p', 'AA', 'NP', 'SBQP') => ('p', 'T', 'NP', 'SBQP')
('p', 'AA', 'NP', 'SBQP') => ('p', 'EA', 'NP', 'SBQP')
('p', 'EA', 'NP', 'SBQP') => ('-d', 'EA', 'NP', 'SBQP')
('p', 'EA', 'co.NP', 'co.SBQP') => ('-d', 'EA', 'co.NP', 'co.SBQP')
('p', 'T', 'NP', 'SBQP') => ('-d', 'T', 'NP', 'SBQP')
('p', 'T', 'co.NP', 'co.SBQP') => ('-d', 'T', 'co.NP', 'co.SBQP')
('p', 'R', 'co.NP', 'co.SBQP') => ('-d', 'R', 'co.NP', 'co.SBQP')
('p', 'R', 'NP', 'SBQP') => ('-d', 'R', 'NP', 'SBQP')
('d', 'R', 'SBQP', 'P') => ('-p', 'R', 'SBQP', 'P')
('d', 'R', 'co.SBQP', 'P') => ('-p', 'R', 'co.SBQP', 'P')
('p', 'AA', 'MA', 'SBQP') => ('-d', 'AA', 'MA', 'SBQP')
('p', 'AA', 'MA', 'SBQP') => ('p', 'T', 'MA', 'SBQP')
('p', 'AA', 'MA', 'SBQP') => ('p', 'EA', 'MA', 'SBQP')
('p', 'AA', 'co.MA', 'co.SBQP') => ('-d', 'AA', 'co.MA', 'co.SBQP')
('p', 'AA', 'co.MA', 'co.SBQP') => ('p', 'T', 'co.MA', 'co.SBQP')
('p', 'AA', 'co.MA', 'co.SBQP') => ('p', 'EA', 'co.MA', 'co.SBQP')
('p', 'EA', 'co.MA', 'co.SBQP') => ('-d', 'EA', 'co.MA', 'co.SBQP')
('p', 'EA', 'MA', 'SBQP') => ('-d', 'EA', 'MA', 'SBQP')
('p', 'T', 'co.MA', 'co.SBQP') => ('-d', 'T', 'co.MA', 'co.SBQP')
('p', 'T', 'MA', 'SBQP') => ('-d', 'T', 'MA', 'SBQP')
('p', 'R', 'MA', 'SBQP') => ('-d', 'R', 'MA', 'SBQP')
('p', 'R', 'co.MA', 'co.SBQP') => ('-d', 'R', 'co.MA', 'co.SBQP')
('p', 'E', 'co.QCMA', 'co.SBQP') => ('-d', 'E', 'co.QCMA', 'co.SBQP')
('p', 'E', 'QCMA', 'SBQP') => ('-d', 'E', 'QCMA', 'SBQP')
('p', 'A', 'co.QCMA', 'co.SBQP') => ('-d', 'A', 'co.QCMA', 'co.SBQP')
('p', 'A', 'co.QCMA', 'co.SBQP') => ('p', 'R', 'co.QCMA', 'co.SBQP')
('p', 'A', 'co.QCMA', 'co.SBQP') => ('p', 'AA', 'co.QCMA', 'co.SBQP')
('p', 'A', 'QCMA', 'SBQP') => ('-d', 'A', 'QCMA', 'SBQP')
('p', 'A', 'QCMA', 'SBQP') => ('p', 'R', 'QCMA', 'SBQP')
('p', 'A', 'QCMA', 'SBQP') => ('p', 'AA', 'QCMA', 'SBQP')
('p', 'AA', 'QCMA', 'SBQP') => ('-d', 'AA', 'QCMA', 'SBQP')
('p', 'AA', 'QCMA', 'SBQP') => ('p', 'T', 'QCMA', 'SBQP')
('p', 'AA', 'QCMA', 'SBQP') => ('p', 'EA', 'QCMA', 'SBQP')
('p', 'AA', 'co.QCMA', 'co.SBQP') => ('-d', 'AA', 'co.QCMA', 'co.SBQP')
('p', 'AA', 'co.QCMA', 'co.SBQP') => ('p', 'T', 'co.QCMA', 'co.SBQP')
('p', 'AA', 'co.QCMA', 'co.SBQP') => ('p', 'EA', 'co.QCMA', 'co.SBQP')
('p', 'EA', 'co.QCMA', 'co.SBQP') => ('-d', 'EA', 'co.QCMA', 'co.SBQP')
('p', 'EA', 'QCMA', 'SBQP') => ('-d', 'EA', 'QCMA', 'SBQP')
('p', 'T', 'co.QCMA', 'co.SBQP') => ('-d', 'T', 'co.QCMA', 'co.SBQP')
('p', 'T', 'QCMA', 'SBQP') => ('-d', 'T', 'QCMA', 'SBQP')
('p', 'R', 'QCMA', 'SBQP') => ('-d', 'R', 'QCMA', 'SBQP')
('p', 'R', 'co.QCMA', 'co.SBQP') => ('-d', 'R', 'co.QCMA', 'co.SBQP')
('p', 'AA', 'co.QMA', 'co.SBQP') => ('-d', 'AA', 'co.QMA', 'co.SBQP')
('p', 'AA', 'co.QMA', 'co.SBQP') => ('p', 'T', 'co.QMA', 'co.SBQP')
('p', 'AA', 'co.QMA', 'co.SBQP') => ('p', 'EA', 'co.QMA', 'co.SBQP')
('p', 'AA', 'QMA', 'SBQP') => ('-d', 'AA', 'QMA', 'SBQP')
('p', 'AA', 'QMA', 'SBQP') => ('p', 'T', 'QMA', 'SBQP')
('p', 'AA', 'QMA', 'SBQP') => ('p', 'EA', 'QMA', 'SBQP')
('p', 'EA', 'QMA', 'SBQP') => ('-d', 'EA', 'QMA', 'SBQP')
('p', 'EA', 'QMA', 'SBQP') => ('p', 'E', 'QMA', 'SBQP')
('p', 'EA', 'co.QMA', 'co.SBQP') => ('-d', 'EA', 'co.QMA', 'co.SBQP')
('p', 'EA', 'co.QMA', 'co.SBQP') => ('p', 'E', 'co.QMA', 'co.SBQP')
('p', 'E', 'co.QMA', 'co.SBQP') => ('-d', 'E', 'co.QMA', 'co.SBQP')
('p', 'E', 'QMA', 'SBQP') => ('-d', 'E', 'QMA', 'SBQP')
('p', 'T', 'QMA', 'SBQP') => ('-d', 'T', 'QMA', 'SBQP')
('p', 'T', 'co.QMA', 'co.SBQP') => ('-d', 'T', 'co.QMA', 'co.SBQP')
('p', 'R', 'co.QMA', 'co.SBQP') => ('-d', 'R', 'co.QMA', 'co.SBQP')
('p', 'R', 'QMA', 'SBQP') => ('-d', 'R', 'QMA', 'SBQP')
('p', 'R', 'AM', 'NP') => ('-d', 'R', 'AM', 'NP')
('p', 'R', 'co.AM', 'co.NP') => ('-d', 'R', 'co.AM', 'co.NP')
('p', 'R', 'cocap.AM', 'cocap.NP') => ('-d', 'R', 'cocap.AM', 'cocap.NP')
('d', 'R', 'co.Sigma_2P', 'cocap.AM') => ('-p', 'R', 'co.Sigma_2P', 'cocap.AM')
('d', 'R', 'co.Sigma_2P', 'cocap.AM') => ('d', 'A', 'co.Sigma_2P', 'cocap.AM')
('d', 'R', 'Sigma_2P', 'cocap.AM') => ('-p', 'R', 'Sigma_2P', 'cocap.AM')
('d', 'R', 'Sigma_2P', 'cocap.AM') => ('d', 'A', 'Sigma_2P', 'cocap.AM')
('-p', 'R', 'MP', 'cocap.AM') => ('-p', 'A', 'MP', 'cocap.AM')
('-p', 'R', 'co.MP', 'cocap.AM') => ('-p', 'A', 'co.MP', 'cocap.AM')
('-p', 'R', 'co.MP', 'cocap.SBP') => ('-p', 'A', 'co.MP', 'cocap.SBP')
('-p', 'R', 'MP', 'cocap.SBP') => ('-p', 'A', 'MP', 'cocap.SBP')
('-p', 'R', 'MP', 'cocap.MA') => ('-p', 'A', 'MP', 'cocap.MA')
('-p', 'R', 'co.MP', 'cocap.MA') => ('-p', 'A', 'co.MP', 'cocap.MA')
('d', 'R', 'MP', 'cocap.AM') => ('d', 'A', 'MP', 'cocap.AM')
('d', 'R', 'co.MP', 'cocap.AM') => ('d', 'A', 'co.MP', 'cocap.AM')
('d', 'R', 'co.MP', 'cocap.SBP') => ('d', 'A', 'co.MP', 'cocap.SBP')
('d', 'R', 'MP', 'cocap.SBP') => ('d', 'A', 'MP', 'cocap.SBP')
('d', 'R', 'MP', 'cocap.MA') => ('d', 'A', 'MP', 'cocap.MA')
('d', 'R', 'co.MP', 'cocap.MA') => ('d', 'A', 'co.MP', 'cocap.MA')
('-p', 'R', 'PH', 'cocap.AM') => ('-p', 'A', 'PH', 'cocap.AM')
('-p', 'R', 'PH', 'AM') => ('-p', 'A', 'PH', 'AM')
('-p', 'R', 'PH', 'co.AM') => ('-p', 'A', 'PH', 'co.AM')
('-p', 'R', 'MP', 'co.AM') => ('-p', 'A', 'MP', 'co.AM')
('-p', 'R', 'co.MP', 'AM') => ('-p', 'A', 'co.MP', 'AM')
('-p', 'R', 'co.MP', 'SBP') => ('-p', 'A', 'co.MP', 'SBP')
('-p', 'R', 'MP', 'co.SBP') => ('-p', 'A', 'MP', 'co.SBP')
('-p', 'R', 'MP', 'co.MA') => ('-p', 'A', 'MP', 'co.MA')
('-p', 'R', 'co.MP', 'MA') => ('-p', 'A', 'co.MP', 'MA')
('-p', 'R', 'PH', 'co.MA') => ('-p', 'A', 'PH', 'co.MA')
('-p', 'R', 'PH', 'MA') => ('-p', 'A', 'PH', 'MA')
('-p', 'R', 'MP', 'MA') => ('-p', 'A', 'MP', 'MA')
('-p', 'R', 'co.MP', 'co.MA') => ('-p', 'A', 'co.MP', 'co.MA')
('-p', 'R', 'SPP', 'MA') => ('-p', 'A', 'SPP', 'MA')
('-p', 'R', 'SPP', 'co.MA') => ('-p', 'A', 'SPP', 'co.MA')
('-p', 'R', 'SPP', 'cocap.MA') => ('-p', 'A', 'SPP', 'cocap.MA')
('-p', 'R', 'cocap.MP', 'MA') => ('-p', 'A', 'cocap.MP', 'MA')
('-p', 'R', 'cocap.MP', 'co.MA') => ('-p', 'A', 'cocap.MP', 'co.MA')
('-p', 'R', 'cocap.MP', 'cocap.MA') => ('-p', 'A', 'cocap.MP', 'cocap.MA')
('-p', 'R', 'PH', 'cocap.MA') => ('-p', 'A', 'PH', 'cocap.MA')
('-p', 'R', 'SPP', 'co.AM') => ('-p', 'A', 'SPP', 'co.AM')
('-p', 'R', 'SPP', 'AM') => ('-p', 'A', 'SPP', 'AM')
('-p', 'R', 'SPP', 'SBP') => ('-p', 'A', 'SPP', 'SBP')
('-p', 'R', 'SPP', 'co.SBP') => ('-p', 'A', 'SPP', 'co.SBP')
('-p', 'R', 'SPP', 'cocap.SBP') => ('-p', 'A', 'SPP', 'cocap.SBP')
('-p', 'R', 'SPP', 'cocap.AM') => ('-p', 'A', 'SPP', 'cocap.AM')
('-p', 'R', 'PH', 'cocap.SBP') => ('-p', 'A', 'PH', 'cocap.SBP')
('-p', 'R', 'PH', 'SBP') => ('-p', 'A', 'PH', 'SBP')
('-p', 'R', 'PH', 'co.SBP') => ('-p', 'A', 'PH', 'co.SBP')
('-p', 'R', 'cocap.MP', 'co.SBP') => ('-p', 'A', 'cocap.MP', 'co.SBP')
('-p', 'R', 'cocap.MP', 'SBP') => ('-p', 'A', 'cocap.MP', 'SBP')
('-p', 'R', 'MP', 'SBP') => ('-p', 'A', 'MP', 'SBP')
('-p', 'R', 'co.MP', 'co.SBP') => ('-p', 'A', 'co.MP', 'co.SBP')
('-p', 'R', 'cocap.MP', 'cocap.SBP') => ('-p', 'A', 'cocap.MP', 'cocap.SBP')
('-p', 'R', 'cocap.MP', 'co.AM') => ('-p', 'A', 'cocap.MP', 'co.AM')
('-p', 'R', 'cocap.MP', 'AM') => ('-p', 'A', 'cocap.MP', 'AM')
('-p', 'R', 'MP', 'AM') => ('-p', 'A', 'MP', 'AM')
('-p', 'R', 'co.MP', 'co.AM') => ('-p', 'A', 'co.MP', 'co.AM')
('-p', 'R', 'cocap.MP', 'cocap.AM') => ('-p', 'A', 'cocap.MP', 'cocap.AM')
('d', 'R', 'PH', 'cocap.AM') => ('d', 'A', 'PH', 'cocap.AM')
('d', 'R', 'PH', 'AM') => ('d', 'A', 'PH', 'AM')
('d', 'R', 'PH', 'co.AM') => ('d', 'A', 'PH', 'co.AM')
('d', 'R', 'MP', 'co.AM') => ('d', 'A', 'MP', 'co.AM')
('d', 'R', 'co.MP', 'AM') => ('d', 'A', 'co.MP', 'AM')
('d', 'R', 'co.MP', 'SBP') => ('d', 'A', 'co.MP', 'SBP')
('d', 'R', 'MP', 'co.SBP') => ('d', 'A', 'MP', 'co.SBP')
('d', 'R', 'MP', 'co.MA') => ('d', 'A', 'MP', 'co.MA')
('d', 'R', 'co.MP', 'MA') => ('d', 'A', 'co.MP', 'MA')
('d', 'R', 'PH', 'co.MA') => ('d', 'A', 'PH', 'co.MA')
('d', 'R', 'PH', 'MA') => ('d', 'A', 'PH', 'MA')
('d', 'R', 'MP', 'MA') => ('d', 'A', 'MP', 'MA')
('d', 'R', 'co.MP', 'co.MA') => ('d', 'A', 'co.MP', 'co.MA')
('d', 'R', 'SPP', 'MA') => ('d', 'A', 'SPP', 'MA')
('d', 'R', 'SPP', 'co.MA') => ('d', 'A', 'SPP', 'co.MA')
('d', 'R', 'SPP', 'cocap.MA') => ('d', 'A', 'SPP', 'cocap.MA')
('d', 'R', 'cocap.MP', 'MA') => ('d', 'A', 'cocap.MP', 'MA')
('d', 'R', 'cocap.MP', 'co.MA') => ('d', 'A', 'cocap.MP', 'co.MA')
('d', 'R', 'cocap.MP', 'cocap.MA') => ('d', 'A', 'cocap.MP', 'cocap.MA')
('d', 'R', 'PH', 'cocap.MA') => ('d', 'A', 'PH', 'cocap.MA')
('d', 'R', 'SPP', 'co.AM') => ('d', 'A', 'SPP', 'co.AM')
('d', 'R', 'SPP', 'AM') => ('d', 'A', 'SPP', 'AM')
('d', 'R', 'SPP', 'SBP') => ('d', 'A', 'SPP', 'SBP')
('d', 'R', 'SPP', 'co.SBP') => ('d', 'A', 'SPP', 'co.SBP')
('d', 'R', 'SPP', 'cocap.SBP') => ('d', 'A', 'SPP', 'cocap.SBP')
('d', 'R', 'SPP', 'cocap.AM') => ('d', 'A', 'SPP', 'cocap.AM')
('d', 'R', 'PH', 'cocap.SBP') => ('d', 'A', 'PH', 'cocap.SBP')
('d', 'R', 'PH', 'SBP') => ('d', 'A', 'PH', 'SBP')
('d', 'R', 'PH', 'co.SBP') => ('d', 'A', 'PH', 'co.SBP')
('d', 'R', 'cocap.MP', 'co.SBP') => ('d', 'A', 'cocap.MP', 'co.SBP')
('d', 'R', 'cocap.MP', 'SBP') => ('d', 'A', 'cocap.MP', 'SBP')
('d', 'R', 'MP', 'SBP') => ('d', 'A', 'MP', 'SBP')
('d', 'R', 'co.MP', 'co.SBP') => ('d', 'A', 'co.MP', 'co.SBP')
('d', 'R', 'cocap.MP', 'cocap.SBP') => ('d', 'A', 'cocap.MP', 'cocap.SBP')
('d', 'R', 'cocap.MP', 'co.AM') => ('d', 'A', 'cocap.MP', 'co.AM')
('d', 'R', 'cocap.MP', 'AM') => ('d', 'A', 'cocap.MP', 'AM')
('d', 'R', 'MP', 'AM') => ('d', 'A', 'MP', 'AM')
('d', 'R', 'co.MP', 'co.AM') => ('d', 'A', 'co.MP', 'co.AM')
('d', 'R', 'cocap.MP', 'cocap.AM') => ('d', 'A', 'cocap.MP', 'cocap.AM')
('-p', 'R', 'Sigma_2P', 'cocap.SBP') => ('-p', 'A', 'Sigma_2P', 'cocap.SBP')
('-p', 'R', 'co.Sigma_2P', 'cocap.SBP') => ('-p', 'A', 'co.Sigma_2P', 'cocap.SBP')
('-p', 'R', 'co.Sigma_2P', 'cocap.MA') => ('-p', 'A', 'co.Sigma_2P', 'cocap.MA')
('-p', 'R', 'Sigma_2P', 'cocap.MA') => ('-p', 'A', 'Sigma_2P', 'cocap.MA')
('-p', 'R', 'Delta_3P', 'cocap.MA') => ('-p', 'A', 'Delta_3P', 'cocap.MA')
('-p', 'R', 'Delta_3P', 'MA') => ('-p', 'A', 'Delta_3P', 'MA')
('-p', 'R', 'Delta_3P', 'co.MA') => ('-p', 'A', 'Delta_3P', 'co.MA')
('-p', 'R', 'Delta_3P', 'cocap.SBP') => ('-p', 'A', 'Delta_3P', 'cocap.SBP')
('-p', 'R', 'Delta_3P', 'SBP') => ('-p', 'A', 'Delta_3P', 'SBP')
('-p', 'R', 'Delta_3P', 'co.SBP') => ('-p', 'A', 'Delta_3P', 'co.SBP')
('d', 'R', 'Sigma_2P', 'cocap.SBP') => ('d', 'A', 'Sigma_2P', 'cocap.SBP')
('d', 'R', 'co.Sigma_2P', 'cocap.SBP') => ('d', 'A', 'co.Sigma_2P', 'cocap.SBP')
('d', 'R', 'co.Sigma_2P', 'cocap.MA') => ('d', 'A', 'co.Sigma_2P', 'cocap.MA')
('d', 'R', 'Sigma_2P', 'cocap.MA') => ('d', 'A', 'Sigma_2P', 'cocap.MA')
('d', 'R', 'Delta_3P', 'cocap.MA') => ('d', 'A', 'Delta_3P', 'cocap.MA')
('d', 'R', 'Delta_3P', 'MA') => ('d', 'A', 'Delta_3P', 'MA')
('d', 'R', 'Delta_3P', 'co.MA') => ('d', 'A', 'Delta_3P', 'co.MA')
('d', 'R', 'Delta_3P', 'cocap.SBP') => ('d', 'A', 'Delta_3P', 'cocap.SBP')
('d', 'R', 'Delta_3P', 'SBP') => ('d', 'A', 'Delta_3P', 'SBP')
('d', 'R', 'Delta_3P', 'co.SBP') => ('d', 'A', 'Delta_3P', 'co.SBP')
('-p', 'R', 'Delta_3P', 'cocap.AM') => ('-p', 'A', 'Delta_3P', 'cocap.AM')
('-p', 'R', 'Delta_3P', 'AM') => ('-p', 'A', 'Delta_3P', 'AM')
('-p', 'R', 'Delta_3P', 'co.AM') => ('-p', 'A', 'Delta_3P', 'co.AM')
('d', 'R', 'Delta_3P', 'cocap.AM') => ('d', 'A', 'Delta_3P', 'cocap.AM')
('d', 'R', 'Delta_3P', 'AM') => ('d', 'A', 'Delta_3P', 'AM')
('d', 'R', 'Delta_3P', 'co.AM') => ('d', 'A', 'Delta_3P', 'co.AM')
('d', 'A', 'Sigma_2P', 'cocap.AM') => ('-p', 'A', 'Sigma_2P', 'cocap.AM')
('d', 'A', 'co.Sigma_2P', 'cocap.AM') => ('-p', 'A', 'co.Sigma_2P', 'cocap.AM')
('-d', 'R', 'cocap.AM', 'SPP') => ('-d', 'E', 'cocap.AM', 'SPP')
('-d', 'R', 'cocap.SBP', 'SPP') => ('-d', 'E', 'cocap.SBP', 'SPP')
('-d', 'R', 'cocap.MA', 'SPP') => ('-d', 'E', 'cocap.MA', 'SPP')
('p', 'R', 'cocap.AM', 'SPP') => ('p', 'E', 'cocap.AM', 'SPP')
('p', 'R', 'cocap.SBP', 'SPP') => ('p', 'E', 'cocap.SBP', 'SPP')
('p', 'R', 'cocap.MA', 'SPP') => ('p', 'E', 'cocap.MA', 'SPP')
('d', 'R', 'co.Sigma_2P', 'co.AM') => ('-p', 'R', 'co.Sigma_2P', 'co.AM')
('d', 'R', 'co.Sigma_2P', 'co.AM') => ('d', 'A', 'co.Sigma_2P', 'co.AM')
('d', 'R', 'Sigma_2P', 'AM') => ('-p', 'R', 'Sigma_2P', 'AM')
('d', 'R', 'Sigma_2P', 'AM') => ('d', 'A', 'Sigma_2P', 'AM')
('-p', 'R', 'Sigma_2P', 'SBP') => ('-p', 'A', 'Sigma_2P', 'SBP')
('-p', 'R', 'co.Sigma_2P', 'co.SBP') => ('-p', 'A', 'co.Sigma_2P', 'co.SBP')
('-p', 'R', 'co.Sigma_2P', 'co.MA') => ('-p', 'A', 'co.Sigma_2P', 'co.MA')
('-p', 'R', 'Sigma_2P', 'MA') => ('-p', 'A', 'Sigma_2P', 'MA')
('d', 'R', 'Sigma_2P', 'SBP') => ('d', 'A', 'Sigma_2P', 'SBP')
('d', 'R', 'co.Sigma_2P', 'co.SBP') => ('d', 'A', 'co.Sigma_2P', 'co.SBP')
('d', 'R', 'co.Sigma_2P', 'co.MA') => ('d', 'A', 'co.Sigma_2P', 'co.MA')
('d', 'R', 'Sigma_2P', 'MA') => ('d', 'A', 'Sigma_2P', 'MA')
('d', 'A', 'Sigma_2P', 'AM') => ('-p', 'A', 'Sigma_2P', 'AM')
('d', 'A', 'co.Sigma_2P', 'co.AM') => ('-p', 'A', 'co.Sigma_2P', 'co.AM')
('-d', 'R', 'MA', 'SPP') => ('-d', 'E', 'MA', 'SPP')
('-d', 'R', 'co.MA', 'SPP') => ('-d', 'E', 'co.MA', 'SPP')
('-d', 'R', 'co.AM', 'SPP') => ('-d', 'E', 'co.AM', 'SPP')
('-d', 'R', 'AM', 'SPP') => ('-d', 'E', 'AM', 'SPP')
('-d', 'R', 'SBP', 'SPP') => ('-d', 'E', 'SBP', 'SPP')
('-d', 'R', 'co.SBP', 'SPP') => ('-d', 'E', 'co.SBP', 'SPP')
('p', 'R', 'MA', 'SPP') => ('p', 'E', 'MA', 'SPP')
('p', 'R', 'co.MA', 'SPP') => ('p', 'E', 'co.MA', 'SPP')
('p', 'R', 'co.AM', 'SPP') => ('p', 'E', 'co.AM', 'SPP')
('p', 'R', 'AM', 'SPP') => ('p', 'E', 'AM', 'SPP')
('p', 'R', 'SBP', 'SPP') => ('p', 'E', 'SBP', 'SPP')
('p', 'R', 'co.SBP', 'SPP') => ('p', 'E', 'co.SBP', 'SPP')
('p', 'R', 'co.MA', 'co.NP') => ('-d', 'R', 'co.MA', 'co.NP')
('p', 'R', 'MA', 'NP') => ('-d', 'R', 'MA', 'NP')
('p', 'R', 'NP', 'NP') => ('-d', 'R', 'NP', 'NP')
('-p', 'R', 'cocap.MA', 'P') => ('-p', 'A', 'cocap.MA', 'P')
('-p', 'R', 'cocap.NEXP_plo', 'P') => ('-p', 'A', 'cocap.NEXP_plo', 'P')
('-p', 'R', 'cocap.AH_plo', 'P') => ('-p', 'A', 'cocap.AH_plo', 'P')
('-p', 'R', 'cocap.MIP*_cme', 'P') => ('-p', 'A', 'cocap.MIP*_cme', 'P')
('-p', 'R', 'cocap.QMIP_cme', 'P') => ('-p', 'A', 'cocap.QMIP_cme', 'P')
('-p', 'R', 'cocap.QMIP_ne', 'P') => ('-p', 'A', 'cocap.QMIP_ne', 'P')
('-p', 'R', 'cocap.NP', 'P') => ('-p', 'A', 'cocap.NP', 'P')
('-p', 'R', 'cocap.MIP', 'P') => ('-p', 'A', 'cocap.MIP', 'P')
('-p', 'R', 'cocap.SBP', 'P') => ('-p', 'A', 'cocap.SBP', 'P')
('-p', 'R', 'cocap.QIP', 'P') => ('-p', 'A', 'cocap.QIP', 'P')
('-p', 'R', 'cocap.AM', 'P') => ('-p', 'A', 'cocap.AM', 'P')
('-p', 'R', 'cocap.IP', 'P') => ('-p', 'A', 'cocap.IP', 'P')
('-p', 'R', 'co.Sigma_2P', 'RP') => ('-p', 'A', 'co.Sigma_2P', 'RP')
('-p', 'R', 'Sigma_2P', 'co.RP') => ('-p', 'A', 'Sigma_2P', 'co.RP')
('-p', 'R', 'co.Sigma_2P', 'MA') => ('-p', 'A', 'co.Sigma_2P', 'MA')
('-p', 'R', 'Sigma_2P', 'co.MA') => ('-p', 'A', 'Sigma_2P', 'co.MA')
('-p', 'R', 'Sigma_2P', 'co.NP') => ('-p', 'A', 'Sigma_2P', 'co.NP')
('-p', 'R', 'co.Sigma_2P', 'NP') => ('-p', 'A', 'co.Sigma_2P', 'NP')
('-p', 'R', 'co.Sigma_2P', 'AM') => ('-p', 'A', 'co.Sigma_2P', 'AM')
('-p', 'R', 'Sigma_2P', 'co.AM') => ('-p', 'A', 'Sigma_2P', 'co.AM')
('-p', 'R', 'Sigma_2P', 'co.SBP') => ('-p', 'A', 'Sigma_2P', 'co.SBP')
('-p', 'R', 'co.Sigma_2P', 'SBP') => ('-p', 'A', 'co.Sigma_2P', 'SBP')
('-p', 'R', 'co.Sigma_2P', '(NP-cap-coNP)/poly') => ('-p', 'A', 'co.Sigma_2P', '(NP-cap-coNP)/poly')
('-p', 'R', 'Sigma_2P', '(NP-cap-coNP)/poly') => ('-p', 'A', 'Sigma_2P', '(NP-cap-coNP)/poly')
('-p', 'R', 'MP', '(NP-cap-coNP)/poly') => ('-p', 'A', 'MP', '(NP-cap-coNP)/poly')
('-p', 'R', 'co.MP', '(NP-cap-coNP)/poly') => ('-p', 'A', 'co.MP', '(NP-cap-coNP)/poly')
('-p', 'R', 'co.MP', 'P/poly') => ('-p', 'A', 'co.MP', 'P/poly')
('-p', 'R', 'MP', 'P/poly') => ('-p', 'A', 'MP', 'P/poly')
('-p', 'R', 'PH', '(NP-cap-coNP)/poly') => ('-p', 'A', 'PH', '(NP-cap-coNP)/poly')
('-p', 'R', 'PH', 'P/poly') => ('-p', 'A', 'PH', 'P/poly')
('-p', 'R', 'SPP', 'P/poly') => ('-p', 'A', 'SPP', 'P/poly')
('-p', 'R', 'SPP', 'BPP') => ('-p', 'A', 'SPP', 'BPP')
('-p', 'R', 'cocap.MP', 'P/poly') => ('-p', 'A', 'cocap.MP', 'P/poly')
('-p', 'R', 'SPP', '(NP-cap-coNP)/poly') => ('-p', 'A', 'SPP', '(NP-cap-coNP)/poly')
('-p', 'R', 'cocap.MP', '(NP-cap-coNP)/poly') => ('-p', 'A', 'cocap.MP', '(NP-cap-coNP)/poly')
('-p', 'R', 'Sigma_2P', 'P/poly') => ('-p', 'A', 'Sigma_2P', 'P/poly')
('-p', 'R', 'co.Sigma_2P', 'P/poly') => ('-p', 'A', 'co.Sigma_2P', 'P/poly')
('-p', 'R', 'Delta_3P', 'P/poly') => ('-p', 'A', 'Delta_3P', 'P/poly')
('-p', 'R', 'Delta_3P', '(NP-cap-coNP)/poly') => ('-p', 'A', 'Delta_3P', '(NP-cap-coNP)/poly')
('-d', 'R', 'P/poly', 'SPP') => ('-d', 'E', 'P/poly', 'SPP')
('-d', 'R', 'BPP', 'SPP') => ('-d', 'E', 'BPP', 'SPP')
('-d', 'R', '(NP-cap-coNP)/poly', 'SPP') => ('-d', 'E', '(NP-cap-coNP)/poly', 'SPP')
('-p', 'R', 'PSPACE/poly', 'P/poly') => ('-p', 'A', 'PSPACE/poly', 'P/poly')
('-p', 'R', 'PSPACE', 'P/poly') => ('-p', 'A', 'PSPACE', 'P/poly')
('-p', 'R', 'PSPACE/poly', '(NP-cap-coNP)/poly') => ('-p', 'A', 'PSPACE/poly', '(NP-cap-coNP)/poly')
('-p', 'R', 'PSPACE', '(NP-cap-coNP)/poly') => ('-p', 'A', 'PSPACE', '(NP-cap-coNP)/poly')
('-p', 'R', 'co.Sigma_2P', 'cocap.NP/poly') => ('-p', 'A', 'co.Sigma_2P', 'cocap.NP/poly')
('-p', 'R', 'Sigma_2P', 'cocap.NP/poly') => ('-p', 'A', 'Sigma_2P', 'cocap.NP/poly')
('-p', 'R', 'MP', 'cocap.NP/poly') => ('-p', 'A', 'MP', 'cocap.NP/poly')
('-p', 'R', 'co.MP', 'cocap.NP/poly') => ('-p', 'A', 'co.MP', 'cocap.NP/poly')
('-p', 'R', 'PH', 'cocap.NP/poly') => ('-p', 'A', 'PH', 'cocap.NP/poly')
('-p', 'R', 'PH', 'co.NP/poly') => ('-p', 'A', 'PH', 'co.NP/poly')
('-p', 'R', 'PH', 'NP/poly') => ('-p', 'A', 'PH', 'NP/poly')
('-p', 'R', 'MP', 'NP/poly') => ('-p', 'A', 'MP', 'NP/poly')
('-p', 'R', 'co.MP', 'co.NP/poly') => ('-p', 'A', 'co.MP', 'co.NP/poly')
('-p', 'R', 'SPP', 'NP/poly') => ('-p', 'A', 'SPP', 'NP/poly')
('-p', 'R', 'SPP', 'co.NP/poly') => ('-p', 'A', 'SPP', 'co.NP/poly')
('-p', 'R', 'SPP', 'cocap.NP/poly') => ('-p', 'A', 'SPP', 'cocap.NP/poly')
('-p', 'R', 'cocap.MP', 'NP/poly') => ('-p', 'A', 'cocap.MP', 'NP/poly')
('-p', 'R', 'cocap.MP', 'co.NP/poly') => ('-p', 'A', 'cocap.MP', 'co.NP/poly')
('-p', 'R', 'MP', 'co.NP/poly') => ('-p', 'A', 'MP', 'co.NP/poly')
('-p', 'R', 'co.MP', 'NP/poly') => ('-p', 'A', 'co.MP', 'NP/poly')
('-p', 'R', 'cocap.MP', 'cocap.NP/poly') => ('-p', 'A', 'cocap.MP', 'cocap.NP/poly')
('-p', 'R', 'Delta_3P', 'cocap.NP/poly') => ('-p', 'A', 'Delta_3P', 'cocap.NP/poly')
('-p', 'R', 'Delta_3P', 'co.NP/poly') => ('-p', 'A', 'Delta_3P', 'co.NP/poly')
('-p', 'R', 'Delta_3P', 'NP/poly') => ('-p', 'A', 'Delta_3P', 'NP/poly')
('-d', 'R', 'cocap.NP/poly', 'SPP') => ('-d', 'E', 'cocap.NP/poly', 'SPP')
('-p', 'R', 'PSPACE/poly', 'cocap.NP/poly') => ('-p', 'A', 'PSPACE/poly', 'cocap.NP/poly')
('-p', 'R', 'PSPACE/poly', 'co.NP/poly') => ('-p', 'A', 'PSPACE/poly', 'co.NP/poly')
('-p', 'R', 'PSPACE/poly', 'NP/poly') => ('-p', 'A', 'PSPACE/poly', 'NP/poly')
('-p', 'R', 'PSPACE', 'NP/poly') => ('-p', 'A', 'PSPACE', 'NP/poly')
('-p', 'R', 'PSPACE', 'co.NP/poly') => ('-p', 'A', 'PSPACE', 'co.NP/poly')
('-p', 'R', 'PSPACE', 'cocap.NP/poly') => ('-p', 'A', 'PSPACE', 'cocap.NP/poly')
('-d', 'R', 'NP/poly', 'SPP') => ('-d', 'E', 'NP/poly', 'SPP')
('-d', 'R', 'co.NP/poly', 'SPP') => ('-d', 'E', 'co.NP/poly', 'SPP')
('-p', 'R', 'co.Sigma_2P', 'co.NP/poly') => ('-p', 'A', 'co.Sigma_2P', 'co.NP/poly')
('-p', 'R', 'Sigma_2P', 'NP/poly') => ('-p', 'A', 'Sigma_2P', 'NP/poly')
('-p', 'R', 'co.Sigma_2P', 'NP/poly') => ('-p', 'A', 'co.Sigma_2P', 'NP/poly')
('-p', 'R', 'Sigma_2P', 'co.NP/poly') => ('-p', 'A', 'Sigma_2P', 'co.NP/poly')
('p', 'A', 'BPP', 'BQP') => ('-d', 'A', 'BPP', 'BQP')
('p', 'A', 'BPP', 'BQP') => ('p', 'R', 'BPP', 'BQP')
('p', 'A', 'BPP', 'BQP') => ('p', 'AA', 'BPP', 'BQP')
('-d', 'A', 'BPP', 'cocap.QMA/qpoly') => ('-d', 'R', 'BPP', 'cocap.QMA/qpoly')
('-d', 'A', 'BPP', 'cocap.QMA/qpoly') => ('-d', 'AA', 'BPP', 'cocap.QMA/qpoly')
('-d', 'A', 'P', 'cocap.QMA/qpoly') => ('-d', 'R', 'P', 'cocap.QMA/qpoly')
('-d', 'A', 'P', 'cocap.QMA/qpoly') => ('-d', 'AA', 'P', 'cocap.QMA/qpoly')
('-d', 'A', 'P', 'co.QMA/qpoly') => ('-d', 'R', 'P', 'co.QMA/qpoly')
('-d', 'A', 'P', 'co.QMA/qpoly') => ('-d', 'AA', 'P', 'co.QMA/qpoly')
('-d', 'A', 'P', 'QMA/qpoly') => ('-d', 'R', 'P', 'QMA/qpoly')
('-d', 'A', 'P', 'QMA/qpoly') => ('-d', 'AA', 'P', 'QMA/qpoly')
('-d', 'AA', 'P', 'QMA/qpoly') => ('-d', 'T', 'P', 'QMA/qpoly')
('-d', 'AA', 'P', 'QMA/qpoly') => ('-d', 'EA', 'P', 'QMA/qpoly')
('-d', 'AA', 'P', 'co.QMA/qpoly') => ('-d', 'T', 'P', 'co.QMA/qpoly')
('-d', 'AA', 'P', 'co.QMA/qpoly') => ('-d', 'EA', 'P', 'co.QMA/qpoly')
('-d', 'AA', 'P', 'cocap.QMA/qpoly') => ('-d', 'T', 'P', 'cocap.QMA/qpoly')
('-d', 'AA', 'P', 'cocap.QMA/qpoly') => ('-d', 'EA', 'P', 'cocap.QMA/qpoly')
('-d', 'A', 'BPP', 'co.QMA/qpoly') => ('-d', 'R', 'BPP', 'co.QMA/qpoly')
('-d', 'A', 'BPP', 'co.QMA/qpoly') => ('-d', 'AA', 'BPP', 'co.QMA/qpoly')
('-d', 'A', 'BPP', 'QMA/qpoly') => ('-d', 'R', 'BPP', 'QMA/qpoly')
('-d', 'A', 'BPP', 'QMA/qpoly') => ('-d', 'AA', 'BPP', 'QMA/qpoly')
('-d', 'AA', 'BPP', 'QMA/qpoly') => ('-d', 'T', 'BPP', 'QMA/qpoly')
('-d', 'AA', 'BPP', 'QMA/qpoly') => ('-d', 'EA', 'BPP', 'QMA/qpoly')
('-d', 'AA', 'BPP', 'co.QMA/qpoly') => ('-d', 'T', 'BPP', 'co.QMA/qpoly')
('-d', 'AA', 'BPP', 'co.QMA/qpoly') => ('-d', 'EA', 'BPP', 'co.QMA/qpoly')
('-d', 'AA', 'BPP', 'cocap.QMA/qpoly') => ('-d', 'T', 'BPP', 'cocap.QMA/qpoly')
('-d', 'AA', 'BPP', 'cocap.QMA/qpoly') => ('-d', 'EA', 'BPP', 'cocap.QMA/qpoly')
('p', 'A', 'BPP', 'cocap.QMA/qpoly') => ('p', 'R', 'BPP', 'cocap.QMA/qpoly')
('p', 'A', 'BPP', 'cocap.QMA/qpoly') => ('p', 'AA', 'BPP', 'cocap.QMA/qpoly')
('p', 'A', 'P', 'cocap.QMA/qpoly') => ('p', 'R', 'P', 'cocap.QMA/qpoly')
('p', 'A', 'P', 'cocap.QMA/qpoly') => ('p', 'AA', 'P', 'cocap.QMA/qpoly')
('p', 'A', 'P', 'co.QMA/qpoly') => ('p', 'R', 'P', 'co.QMA/qpoly')
('p', 'A', 'P', 'co.QMA/qpoly') => ('p', 'AA', 'P', 'co.QMA/qpoly')
('p', 'A', 'P', 'QMA/qpoly') => ('p', 'R', 'P', 'QMA/qpoly')
('p', 'A', 'P', 'QMA/qpoly') => ('p', 'AA', 'P', 'QMA/qpoly')
('p', 'AA', 'P', 'QMA/qpoly') => ('p', 'T', 'P', 'QMA/qpoly')
('p', 'AA', 'P', 'QMA/qpoly') => ('p', 'EA', 'P', 'QMA/qpoly')
('p', 'AA', 'P', 'co.QMA/qpoly') => ('p', 'T', 'P', 'co.QMA/qpoly')
('p', 'AA', 'P', 'co.QMA/qpoly') => ('p', 'EA', 'P', 'co.QMA/qpoly')
('p', 'AA', 'P', 'cocap.QMA/qpoly') => ('p', 'T', 'P', 'cocap.QMA/qpoly')
('p', 'AA', 'P', 'cocap.QMA/qpoly') => ('p', 'EA', 'P', 'cocap.QMA/qpoly')
('p', 'A', 'BPP', 'co.QMA/qpoly') => ('p', 'R', 'BPP', 'co.QMA/qpoly')
('p', 'A', 'BPP', 'co.QMA/qpoly') => ('p', 'AA', 'BPP', 'co.QMA/qpoly')
('p', 'A', 'BPP', 'QMA/qpoly') => ('p', 'R', 'BPP', 'QMA/qpoly')
('p', 'A', 'BPP', 'QMA/qpoly') => ('p', 'AA', 'BPP', 'QMA/qpoly')
('p', 'AA', 'BPP', 'QMA/qpoly') => ('p', 'T', 'BPP', 'QMA/qpoly')
('p', 'AA', 'BPP', 'QMA/qpoly') => ('p', 'EA', 'BPP', 'QMA/qpoly')
('p', 'AA', 'BPP', 'co.QMA/qpoly') => ('p', 'T', 'BPP', 'co.QMA/qpoly')
('p', 'AA', 'BPP', 'co.QMA/qpoly') => ('p', 'EA', 'BPP', 'co.QMA/qpoly')
('p', 'AA', 'BPP', 'cocap.QMA/qpoly') => ('p', 'T', 'BPP', 'cocap.QMA/qpoly')
('p', 'AA', 'BPP', 'cocap.QMA/qpoly') => ('p', 'EA', 'BPP', 'cocap.QMA/qpoly')
('p', 'A', 'P', 'BQP') => ('-d', 'A', 'P', 'BQP')
('p', 'A', 'P', 'BQP') => ('p', 'R', 'P', 'BQP')
('p', 'A', 'P', 'BQP') => ('p', 'AA', 'P', 'BQP')
('-d', 'A', 'P', 'co.AWPP') => ('-d', 'R', 'P', 'co.AWPP')
('-d', 'A', 'P', 'co.AWPP') => ('-d', 'AA', 'P', 'co.AWPP')
('-d', 'A', 'P', 'AWPP') => ('-d', 'R', 'P', 'AWPP')
('-d', 'A', 'P', 'AWPP') => ('-d', 'AA', 'P', 'AWPP')
('-d', 'A', 'P', 'cocap.AWPP') => ('-d', 'R', 'P', 'cocap.AWPP')
('-d', 'A', 'P', 'cocap.AWPP') => ('-d', 'AA', 'P', 'cocap.AWPP')
('-d', 'AA', 'P', 'cocap.AWPP') => ('-d', 'T', 'P', 'cocap.AWPP')
('-d', 'AA', 'P', 'cocap.AWPP') => ('-d', 'EA', 'P', 'cocap.AWPP')
('-d', 'AA', 'P', 'co.AWPP') => ('-d', 'T', 'P', 'co.AWPP')
('-d', 'AA', 'P', 'co.AWPP') => ('-d', 'EA', 'P', 'co.AWPP')
('-d', 'AA', 'P', 'AWPP') => ('-d', 'T', 'P', 'AWPP')
('-d', 'AA', 'P', 'AWPP') => ('-d', 'EA', 'P', 'AWPP')
('p', 'A', 'P', 'co.AWPP') => ('p', 'R', 'P', 'co.AWPP')
('p', 'A', 'P', 'co.AWPP') => ('p', 'AA', 'P', 'co.AWPP')
('p', 'A', 'P', 'AWPP') => ('p', 'R', 'P', 'AWPP')
('p', 'A', 'P', 'AWPP') => ('p', 'AA', 'P', 'AWPP')
('p', 'A', 'P', 'cocap.AWPP') => ('p', 'R', 'P', 'cocap.AWPP')
('p', 'A', 'P', 'cocap.AWPP') => ('p', 'AA', 'P', 'cocap.AWPP')
('p', 'AA', 'P', 'cocap.AWPP') => ('p', 'T', 'P', 'cocap.AWPP')
('p', 'AA', 'P', 'cocap.AWPP') => ('p', 'EA', 'P', 'cocap.AWPP')
('p', 'AA', 'P', 'co.AWPP') => ('p', 'T', 'P', 'co.AWPP')
('p', 'AA', 'P', 'co.AWPP') => ('p', 'EA', 'P', 'co.AWPP')
('p', 'AA', 'P', 'AWPP') => ('p', 'T', 'P', 'AWPP')
('p', 'AA', 'P', 'AWPP') => ('p', 'EA', 'P', 'AWPP')
('p', 'E', 'EXP_plo', 'BQP') => ('-d', 'E', 'EXP_plo', 'BQP')
('-d', 'A', 'P', 'co.QCMA/qpoly') => ('-d', 'R', 'P', 'co.QCMA/qpoly')
('-d', 'A', 'P', 'co.QCMA/qpoly') => ('-d', 'AA', 'P', 'co.QCMA/qpoly')
('-d', 'A', 'P', 'QCMA/qpoly') => ('-d', 'R', 'P', 'QCMA/qpoly')
('-d', 'A', 'P', 'QCMA/qpoly') => ('-d', 'AA', 'P', 'QCMA/qpoly')
('-d', 'A', 'P', 'cocap.QCMA/qpoly') => ('-d', 'R', 'P', 'cocap.QCMA/qpoly')
('-d', 'A', 'P', 'cocap.QCMA/qpoly') => ('-d', 'AA', 'P', 'cocap.QCMA/qpoly')
('-d', 'AA', 'P', 'cocap.QCMA/qpoly') => ('-d', 'T', 'P', 'cocap.QCMA/qpoly')
('-d', 'AA', 'P', 'cocap.QCMA/qpoly') => ('-d', 'EA', 'P', 'cocap.QCMA/qpoly')
('-d', 'AA', 'P', 'co.QCMA/qpoly') => ('-d', 'T', 'P', 'co.QCMA/qpoly')
('-d', 'AA', 'P', 'co.QCMA/qpoly') => ('-d', 'EA', 'P', 'co.QCMA/qpoly')
('-d', 'AA', 'P', 'QCMA/qpoly') => ('-d', 'T', 'P', 'QCMA/qpoly')
('-d', 'AA', 'P', 'QCMA/qpoly') => ('-d', 'EA', 'P', 'QCMA/qpoly')
('p', 'A', 'P', 'co.QCMA/qpoly') => ('p', 'R', 'P', 'co.QCMA/qpoly')
('p', 'A', 'P', 'co.QCMA/qpoly') => ('p', 'AA', 'P', 'co.QCMA/qpoly')
('p', 'A', 'P', 'QCMA/qpoly') => ('p', 'R', 'P', 'QCMA/qpoly')
('p', 'A', 'P', 'QCMA/qpoly') => ('p', 'AA', 'P', 'QCMA/qpoly')
('p', 'A', 'P', 'cocap.QCMA/qpoly') => ('p', 'R', 'P', 'cocap.QCMA/qpoly')
('p', 'A', 'P', 'cocap.QCMA/qpoly') => ('p', 'AA', 'P', 'cocap.QCMA/qpoly')
('p', 'AA', 'P', 'cocap.QCMA/qpoly') => ('p', 'T', 'P', 'cocap.QCMA/qpoly')
('p', 'AA', 'P', 'cocap.QCMA/qpoly') => ('p', 'EA', 'P', 'cocap.QCMA/qpoly')
('p', 'AA', 'P', 'co.QCMA/qpoly') => ('p', 'T', 'P', 'co.QCMA/qpoly')
('p', 'AA', 'P', 'co.QCMA/qpoly') => ('p', 'EA', 'P', 'co.QCMA/qpoly')
('p', 'AA', 'P', 'QCMA/qpoly') => ('p', 'T', 'P', 'QCMA/qpoly')
('p', 'AA', 'P', 'QCMA/qpoly') => ('p', 'EA', 'P', 'QCMA/qpoly')
('-d', 'A', 'P', 'BQP/mpoly') => ('-d', 'R', 'P', 'BQP/mpoly')
('-d', 'A', 'P', 'BQP/mpoly') => ('-d', 'AA', 'P', 'BQP/mpoly')
('-d', 'A', 'P', 'BQP/qpoly') => ('-d', 'R', 'P', 'BQP/qpoly')
('-d', 'A', 'P', 'BQP/qpoly') => ('-d', 'AA', 'P', 'BQP/qpoly')
('-d', 'AA', 'P', 'BQP/qpoly') => ('-d', 'T', 'P', 'BQP/qpoly')
('-d', 'AA', 'P', 'BQP/qpoly') => ('-d', 'EA', 'P', 'BQP/qpoly')
('-d', 'AA', 'P', 'BQP/mpoly') => ('-d', 'T', 'P', 'BQP/mpoly')
('-d', 'AA', 'P', 'BQP/mpoly') => ('-d', 'EA', 'P', 'BQP/mpoly')
('p', 'A', 'P', 'BQP/mpoly') => ('p', 'R', 'P', 'BQP/mpoly')
('p', 'A', 'P', 'BQP/mpoly') => ('p', 'AA', 'P', 'BQP/mpoly')
('p', 'A', 'P', 'BQP/qpoly') => ('p', 'R', 'P', 'BQP/qpoly')
('p', 'A', 'P', 'BQP/qpoly') => ('p', 'AA', 'P', 'BQP/qpoly')
('p', 'AA', 'P', 'BQP/qpoly') => ('p', 'T', 'P', 'BQP/qpoly')
('p', 'AA', 'P', 'BQP/qpoly') => ('p', 'EA', 'P', 'BQP/qpoly')
('p', 'AA', 'P', 'BQP/mpoly') => ('p', 'T', 'P', 'BQP/mpoly')
('p', 'AA', 'P', 'BQP/mpoly') => ('p', 'EA', 'P', 'BQP/mpoly')
('p', 'AA', 'P', 'BQP') => ('-d', 'AA', 'P', 'BQP')
('p', 'AA', 'P', 'BQP') => ('p', 'T', 'P', 'BQP')
('p', 'AA', 'P', 'BQP') => ('p', 'EA', 'P', 'BQP')
('p', 'EA', 'P', 'BQP') => ('-d', 'EA', 'P', 'BQP')
('p', 'T', 'P', 'BQP') => ('-d', 'T', 'P', 'BQP')
('p', 'R', 'P', 'BQP') => ('-d', 'R', 'P', 'BQP')
('-d', 'A', 'BPP', 'co.SBQP') => ('-d', 'AA', 'BPP', 'co.SBQP')
('-d', 'A', 'BPP', 'SBQP') => ('-d', 'AA', 'BPP', 'SBQP')
('-d', 'A', 'BPP', 'cocap.SBQP') => ('-d', 'AA', 'BPP', 'cocap.SBQP')
('-d', 'AA', 'BPP', 'cocap.SBQP') => ('-d', 'T', 'BPP', 'cocap.SBQP')
('-d', 'AA', 'BPP', 'cocap.SBQP') => ('-d', 'EA', 'BPP', 'cocap.SBQP')
('-d', 'AA', 'BPP', 'co.SBQP') => ('-d', 'T', 'BPP', 'co.SBQP')
('-d', 'AA', 'BPP', 'co.SBQP') => ('-d', 'EA', 'BPP', 'co.SBQP')
('-d', 'AA', 'BPP', 'SBQP') => ('-d', 'T', 'BPP', 'SBQP')
('-d', 'AA', 'BPP', 'SBQP') => ('-d', 'EA', 'BPP', 'SBQP')
('p', 'A', 'BPP', 'co.SBQP') => ('p', 'R', 'BPP', 'co.SBQP')
('p', 'A', 'BPP', 'co.SBQP') => ('p', 'AA', 'BPP', 'co.SBQP')
('p', 'A', 'BPP', 'SBQP') => ('p', 'R', 'BPP', 'SBQP')
('p', 'A', 'BPP', 'SBQP') => ('p', 'AA', 'BPP', 'SBQP')
('p', 'A', 'BPP', 'cocap.SBQP') => ('p', 'R', 'BPP', 'cocap.SBQP')
('p', 'A', 'BPP', 'cocap.SBQP') => ('p', 'AA', 'BPP', 'cocap.SBQP')
('p', 'AA', 'BPP', 'cocap.SBQP') => ('p', 'T', 'BPP', 'cocap.SBQP')
('p', 'AA', 'BPP', 'cocap.SBQP') => ('p', 'EA', 'BPP', 'cocap.SBQP')
('p', 'AA', 'BPP', 'co.SBQP') => ('p', 'T', 'BPP', 'co.SBQP')
('p', 'AA', 'BPP', 'co.SBQP') => ('p', 'EA', 'BPP', 'co.SBQP')
('p', 'AA', 'BPP', 'SBQP') => ('p', 'T', 'BPP', 'SBQP')
('p', 'AA', 'BPP', 'SBQP') => ('p', 'EA', 'BPP', 'SBQP')
('-d', 'A', 'BPP', 'co.AWPP') => ('-d', 'AA', 'BPP', 'co.AWPP')
('-d', 'A', 'BPP', 'AWPP') => ('-d', 'AA', 'BPP', 'AWPP')
('-d', 'A', 'BPP', 'cocap.AWPP') => ('-d', 'AA', 'BPP', 'cocap.AWPP')
('-d', 'AA', 'BPP', 'cocap.AWPP') => ('-d', 'T', 'BPP', 'cocap.AWPP')
('-d', 'AA', 'BPP', 'cocap.AWPP') => ('-d', 'EA', 'BPP', 'cocap.AWPP')
('-d', 'AA', 'BPP', 'co.AWPP') => ('-d', 'T', 'BPP', 'co.AWPP')
('-d', 'AA', 'BPP', 'co.AWPP') => ('-d', 'EA', 'BPP', 'co.AWPP')
('-d', 'AA', 'BPP', 'AWPP') => ('-d', 'T', 'BPP', 'AWPP')
('-d', 'AA', 'BPP', 'AWPP') => ('-d', 'EA', 'BPP', 'AWPP')
('p', 'A', 'BPP', 'co.AWPP') => ('p', 'R', 'BPP', 'co.AWPP')
('p', 'A', 'BPP', 'co.AWPP') => ('p', 'AA', 'BPP', 'co.AWPP')
('p', 'A', 'BPP', 'AWPP') => ('p', 'R', 'BPP', 'AWPP')
('p', 'A', 'BPP', 'AWPP') => ('p', 'AA', 'BPP', 'AWPP')
('p', 'A', 'BPP', 'cocap.AWPP') => ('p', 'R', 'BPP', 'cocap.AWPP')
('p', 'A', 'BPP', 'cocap.AWPP') => ('p', 'AA', 'BPP', 'cocap.AWPP')
('p', 'AA', 'BPP', 'cocap.AWPP') => ('p', 'T', 'BPP', 'cocap.AWPP')
('p', 'AA', 'BPP', 'cocap.AWPP') => ('p', 'EA', 'BPP', 'cocap.AWPP')
('p', 'AA', 'BPP', 'co.AWPP') => ('p', 'T', 'BPP', 'co.AWPP')
('p', 'AA', 'BPP', 'co.AWPP') => ('p', 'EA', 'BPP', 'co.AWPP')
('p', 'AA', 'BPP', 'AWPP') => ('p', 'T', 'BPP', 'AWPP')
('p', 'AA', 'BPP', 'AWPP') => ('p', 'EA', 'BPP', 'AWPP')
('-d', 'A', 'BPP', 'co.QCMA/qpoly') => ('-d', 'AA', 'BPP', 'co.QCMA/qpoly')
('-d', 'A', 'BPP', 'QCMA/qpoly') => ('-d', 'AA', 'BPP', 'QCMA/qpoly')
('-d', 'A', 'BPP', 'cocap.QCMA/qpoly') => ('-d', 'AA', 'BPP', 'cocap.QCMA/qpoly')
('-d', 'AA', 'BPP', 'cocap.QCMA/qpoly') => ('-d', 'T', 'BPP', 'cocap.QCMA/qpoly')
('-d', 'AA', 'BPP', 'cocap.QCMA/qpoly') => ('-d', 'EA', 'BPP', 'cocap.QCMA/qpoly')
('-d', 'AA', 'BPP', 'co.QCMA/qpoly') => ('-d', 'T', 'BPP', 'co.QCMA/qpoly')
('-d', 'AA', 'BPP', 'co.QCMA/qpoly') => ('-d', 'EA', 'BPP', 'co.QCMA/qpoly')
('-d', 'AA', 'BPP', 'QCMA/qpoly') => ('-d', 'T', 'BPP', 'QCMA/qpoly')
('-d', 'AA', 'BPP', 'QCMA/qpoly') => ('-d', 'EA', 'BPP', 'QCMA/qpoly')
('p', 'A', 'BPP', 'co.QCMA/qpoly') => ('p', 'R', 'BPP', 'co.QCMA/qpoly')
('p', 'A', 'BPP', 'co.QCMA/qpoly') => ('p', 'AA', 'BPP', 'co.QCMA/qpoly')
('p', 'A', 'BPP', 'QCMA/qpoly') => ('p', 'R', 'BPP', 'QCMA/qpoly')
('p', 'A', 'BPP', 'QCMA/qpoly') => ('p', 'AA', 'BPP', 'QCMA/qpoly')
('p', 'A', 'BPP', 'cocap.QCMA/qpoly') => ('p', 'R', 'BPP', 'cocap.QCMA/qpoly')
('p', 'A', 'BPP', 'cocap.QCMA/qpoly') => ('p', 'AA', 'BPP', 'cocap.QCMA/qpoly')
('p', 'AA', 'BPP', 'cocap.QCMA/qpoly') => ('p', 'T', 'BPP', 'cocap.QCMA/qpoly')
('p', 'AA', 'BPP', 'cocap.QCMA/qpoly') => ('p', 'EA', 'BPP', 'cocap.QCMA/qpoly')
('p', 'AA', 'BPP', 'co.QCMA/qpoly') => ('p', 'T', 'BPP', 'co.QCMA/qpoly')
('p', 'AA', 'BPP', 'co.QCMA/qpoly') => ('p', 'EA', 'BPP', 'co.QCMA/qpoly')
('p', 'AA', 'BPP', 'QCMA/qpoly') => ('p', 'T', 'BPP', 'QCMA/qpoly')
('p', 'AA', 'BPP', 'QCMA/qpoly') => ('p', 'EA', 'BPP', 'QCMA/qpoly')
('d', 'A', 'cocap.NEXP_plo', 'BPP') => ('-p', 'A', 'cocap.NEXP_plo', 'BPP')
('d', 'A', 'co.NEXP_plo', 'BPP') => ('-p', 'A', 'co.NEXP_plo', 'BPP')
('d', 'A', 'NEXP_plo', 'BPP') => ('-p', 'A', 'NEXP_plo', 'BPP')
('d', 'A', 'QMIP_cme', 'BPP') => ('-p', 'A', 'QMIP_cme', 'BPP')
('d', 'A', 'co.QMIP_cme', 'BPP') => ('-p', 'A', 'co.QMIP_cme', 'BPP')
('-d', 'A', 'BPP', 'QIP(2)') => ('-d', 'AA', 'BPP', 'QIP(2)')
('-d', 'A', 'BPP', 'co.QIP(2)') => ('-d', 'AA', 'BPP', 'co.QIP(2)')
('-d', 'A', 'BPP', 'cocap.QIP(2)') => ('-d', 'AA', 'BPP', 'cocap.QIP(2)')
('-d', 'A', 'BPP', 'cocap.QIP(3)') => ('-d', 'AA', 'BPP', 'cocap.QIP(3)')
('-d', 'A', 'BPP', 'co.QIP(3)') => ('-d', 'AA', 'BPP', 'co.QIP(3)')
('-d', 'A', 'BPP', 'QIP(3)') => ('-d', 'AA', 'BPP', 'QIP(3)')
('-d', 'AA', 'BPP', 'QIP(3)') => ('-d', 'T', 'BPP', 'QIP(3)')
('-d', 'AA', 'BPP', 'QIP(3)') => ('-d', 'EA', 'BPP', 'QIP(3)')
('-d', 'AA', 'BPP', 'co.QIP(3)') => ('-d', 'T', 'BPP', 'co.QIP(3)')
('-d', 'AA', 'BPP', 'co.QIP(3)') => ('-d', 'EA', 'BPP', 'co.QIP(3)')
('-d', 'AA', 'BPP', 'cocap.QIP(3)') => ('-d', 'T', 'BPP', 'cocap.QIP(3)')
('-d', 'AA', 'BPP', 'cocap.QIP(3)') => ('-d', 'EA', 'BPP', 'cocap.QIP(3)')
('-d', 'AA', 'BPP', 'cocap.QIP(2)') => ('-d', 'T', 'BPP', 'cocap.QIP(2)')
('-d', 'AA', 'BPP', 'cocap.QIP(2)') => ('-d', 'EA', 'BPP', 'cocap.QIP(2)')
('-d', 'AA', 'BPP', 'QIP(2)') => ('-d', 'T', 'BPP', 'QIP(2)')
('-d', 'AA', 'BPP', 'QIP(2)') => ('-d', 'EA', 'BPP', 'QIP(2)')
('-d', 'AA', 'BPP', 'co.QIP(2)') => ('-d', 'T', 'BPP', 'co.QIP(2)')
('-d', 'AA', 'BPP', 'co.QIP(2)') => ('-d', 'EA', 'BPP', 'co.QIP(2)')
('p', 'A', 'BPP', 'QIP(2)') => ('p', 'R', 'BPP', 'QIP(2)')
('p', 'A', 'BPP', 'QIP(2)') => ('p', 'AA', 'BPP', 'QIP(2)')
('p', 'A', 'BPP', 'co.QIP(2)') => ('p', 'R', 'BPP', 'co.QIP(2)')
('p', 'A', 'BPP', 'co.QIP(2)') => ('p', 'AA', 'BPP', 'co.QIP(2)')
('p', 'A', 'BPP', 'cocap.QIP(2)') => ('p', 'R', 'BPP', 'cocap.QIP(2)')
('p', 'A', 'BPP', 'cocap.QIP(2)') => ('p', 'AA', 'BPP', 'cocap.QIP(2)')
('p', 'A', 'BPP', 'cocap.QIP(3)') => ('p', 'R', 'BPP', 'cocap.QIP(3)')
('p', 'A', 'BPP', 'cocap.QIP(3)') => ('p', 'AA', 'BPP', 'cocap.QIP(3)')
('p', 'A', 'BPP', 'co.QIP(3)') => ('p', 'R', 'BPP', 'co.QIP(3)')
('p', 'A', 'BPP', 'co.QIP(3)') => ('p', 'AA', 'BPP', 'co.QIP(3)')
('p', 'A', 'BPP', 'QIP(3)') => ('p', 'R', 'BPP', 'QIP(3)')
('p', 'A', 'BPP', 'QIP(3)') => ('p', 'AA', 'BPP', 'QIP(3)')
('p', 'AA', 'BPP', 'QIP(3)') => ('p', 'T', 'BPP', 'QIP(3)')
('p', 'AA', 'BPP', 'QIP(3)') => ('p', 'EA', 'BPP', 'QIP(3)')
('p', 'AA', 'BPP', 'co.QIP(3)') => ('p', 'T', 'BPP', 'co.QIP(3)')
('p', 'AA', 'BPP', 'co.QIP(3)') => ('p', 'EA', 'BPP', 'co.QIP(3)')
('p', 'AA', 'BPP', 'cocap.QIP(3)') => ('p', 'T', 'BPP', 'cocap.QIP(3)')
('p', 'AA', 'BPP', 'cocap.QIP(3)') => ('p', 'EA', 'BPP', 'cocap.QIP(3)')
('p', 'AA', 'BPP', 'cocap.QIP(2)') => ('p', 'T', 'BPP', 'cocap.QIP(2)')
('p', 'AA', 'BPP', 'cocap.QIP(2)') => ('p', 'EA', 'BPP', 'cocap.QIP(2)')
('p', 'AA', 'BPP', 'QIP(2)') => ('p', 'T', 'BPP', 'QIP(2)')
('p', 'AA', 'BPP', 'QIP(2)') => ('p', 'EA', 'BPP', 'QIP(2)')
('p', 'AA', 'BPP', 'co.QIP(2)') => ('p', 'T', 'BPP', 'co.QIP(2)')
('p', 'AA', 'BPP', 'co.QIP(2)') => ('p', 'EA', 'BPP', 'co.QIP(2)')
('d', 'A', 'cocap.MIP*_cme', 'BPP') => ('-p', 'A', 'cocap.MIP*_cme', 'BPP')
('d', 'A', 'MIP*_cme', 'BPP') => ('-p', 'A', 'MIP*_cme', 'BPP')
('d', 'A', 'co.MIP*_cme', 'BPP') => ('-p', 'A', 'co.MIP*_cme', 'BPP')
('d', 'A', 'NP', 'BPP') => ('-p', 'A', 'NP', 'BPP')
('d', 'A', 'co.NP', 'BPP') => ('-p', 'A', 'co.NP', 'BPP')
('-d', 'A', 'BPP', 'QMA') => ('-d', 'AA', 'BPP', 'QMA')
('-d', 'A', 'BPP', 'co.QMA') => ('-d', 'AA', 'BPP', 'co.QMA')
('-d', 'A', 'BPP', 'cocap.QMA') => ('-d', 'AA', 'BPP', 'cocap.QMA')
('-d', 'A', 'BPP', 'CH') => ('-d', 'AA', 'BPP', 'CH')
('-d', 'AA', 'BPP', 'CH') => ('-d', 'T', 'BPP', 'CH')
('-d', 'AA', 'BPP', 'CH') => ('-d', 'EA', 'BPP', 'CH')
('-d', 'A', 'BPP', 'cocap.QAM') => ('-d', 'AA', 'BPP', 'cocap.QAM')
('-d', 'A', 'BPP', 'QAM') => ('-d', 'AA', 'BPP', 'QAM')
('-d', 'A', 'BPP', 'co.QAM') => ('-d', 'AA', 'BPP', 'co.QAM')
('-d', 'AA', 'BPP', 'co.QAM') => ('-d', 'T', 'BPP', 'co.QAM')
('-d', 'AA', 'BPP', 'co.QAM') => ('-d', 'EA', 'BPP', 'co.QAM')
('-d', 'AA', 'BPP', 'QAM') => ('-d', 'T', 'BPP', 'QAM')
('-d', 'AA', 'BPP', 'QAM') => ('-d', 'EA', 'BPP', 'QAM')
('-d', 'AA', 'BPP', 'cocap.QAM') => ('-d', 'T', 'BPP', 'cocap.QAM')
('-d', 'AA', 'BPP', 'cocap.QAM') => ('-d', 'EA', 'BPP', 'cocap.QAM')
('-d', 'AA', 'BPP', 'cocap.QMA') => ('-d', 'T', 'BPP', 'cocap.QMA')
('-d', 'AA', 'BPP', 'cocap.QMA') => ('-d', 'EA', 'BPP', 'cocap.QMA')
('-d', 'AA', 'BPP', 'QMA') => ('-d', 'T', 'BPP', 'QMA')
('-d', 'AA', 'BPP', 'QMA') => ('-d', 'EA', 'BPP', 'QMA')
('-d', 'AA', 'BPP', 'co.QMA') => ('-d', 'T', 'BPP', 'co.QMA')
('-d', 'AA', 'BPP', 'co.QMA') => ('-d', 'EA', 'BPP', 'co.QMA')
('p', 'A', 'BPP', 'QMA') => ('p', 'R', 'BPP', 'QMA')
('p', 'A', 'BPP', 'QMA') => ('p', 'AA', 'BPP', 'QMA')
('p', 'A', 'BPP', 'co.QMA') => ('p', 'R', 'BPP', 'co.QMA')
('p', 'A', 'BPP', 'co.QMA') => ('p', 'AA', 'BPP', 'co.QMA')
('p', 'A', 'BPP', 'cocap.QMA') => ('p', 'R', 'BPP', 'cocap.QMA')
('p', 'A', 'BPP', 'cocap.QMA') => ('p', 'AA', 'BPP', 'cocap.QMA')
('p', 'A', 'BPP', 'CH') => ('p', 'R', 'BPP', 'CH')
('p', 'A', 'BPP', 'CH') => ('p', 'AA', 'BPP', 'CH')
('p', 'AA', 'BPP', 'CH') => ('p', 'T', 'BPP', 'CH')
('p', 'AA', 'BPP', 'CH') => ('p', 'EA', 'BPP', 'CH')
('p', 'A', 'BPP', 'cocap.QAM') => ('p', 'R', 'BPP', 'cocap.QAM')
('p', 'A', 'BPP', 'cocap.QAM') => ('p', 'AA', 'BPP', 'cocap.QAM')
('p', 'A', 'BPP', 'QAM') => ('p', 'R', 'BPP', 'QAM')
('p', 'A', 'BPP', 'QAM') => ('p', 'AA', 'BPP', 'QAM')
('p', 'A', 'BPP', 'co.QAM') => ('p', 'R', 'BPP', 'co.QAM')
('p', 'A', 'BPP', 'co.QAM') => ('p', 'AA', 'BPP', 'co.QAM')
('p', 'AA', 'BPP', 'co.QAM') => ('p', 'T', 'BPP', 'co.QAM')
('p', 'AA', 'BPP', 'co.QAM') => ('p', 'EA', 'BPP', 'co.QAM')
('p', 'AA', 'BPP', 'QAM') => ('p', 'T', 'BPP', 'QAM')
('p', 'AA', 'BPP', 'QAM') => ('p', 'EA', 'BPP', 'QAM')
('p', 'AA', 'BPP', 'cocap.QAM') => ('p', 'T', 'BPP', 'cocap.QAM')
('p', 'AA', 'BPP', 'cocap.QAM') => ('p', 'EA', 'BPP', 'cocap.QAM')
('p', 'AA', 'BPP', 'cocap.QMA') => ('p', 'T', 'BPP', 'cocap.QMA')
('p', 'AA', 'BPP', 'cocap.QMA') => ('p', 'EA', 'BPP', 'cocap.QMA')
('p', 'AA', 'BPP', 'QMA') => ('p', 'T', 'BPP', 'QMA')
('p', 'AA', 'BPP', 'QMA') => ('p', 'EA', 'BPP', 'QMA')
('p', 'AA', 'BPP', 'co.QMA') => ('p', 'T', 'BPP', 'co.QMA')
('p', 'AA', 'BPP', 'co.QMA') => ('p', 'EA', 'BPP', 'co.QMA')
('-d', 'A', 'BPP', 'QCMA') => ('-d', 'AA', 'BPP', 'QCMA')
('-d', 'A', 'BPP', 'co.QCMA') => ('-d', 'AA', 'BPP', 'co.QCMA')
('-d', 'A', 'BPP', 'cocap.QCMA') => ('-d', 'AA', 'BPP', 'cocap.QCMA')
('-d', 'AA', 'BPP', 'cocap.QCMA') => ('-d', 'T', 'BPP', 'cocap.QCMA')
('-d', 'AA', 'BPP', 'cocap.QCMA') => ('-d', 'EA', 'BPP', 'cocap.QCMA')
('-d', 'AA', 'BPP', 'QCMA') => ('-d', 'T', 'BPP', 'QCMA')
('-d', 'AA', 'BPP', 'QCMA') => ('-d', 'EA', 'BPP', 'QCMA')
('-d', 'AA', 'BPP', 'co.QCMA') => ('-d', 'T', 'BPP', 'co.QCMA')
('-d', 'AA', 'BPP', 'co.QCMA') => ('-d', 'EA', 'BPP', 'co.QCMA')
('p', 'A', 'BPP', 'QCMA') => ('p', 'R', 'BPP', 'QCMA')
('p', 'A', 'BPP', 'QCMA') => ('p', 'AA', 'BPP', 'QCMA')
('p', 'A', 'BPP', 'co.QCMA') => ('p', 'R', 'BPP', 'co.QCMA')
('p', 'A', 'BPP', 'co.QCMA') => ('p', 'AA', 'BPP', 'co.QCMA')
('p', 'A', 'BPP', 'cocap.QCMA') => ('p', 'R', 'BPP', 'cocap.QCMA')
('p', 'A', 'BPP', 'cocap.QCMA') => ('p', 'AA', 'BPP', 'cocap.QCMA')
('p', 'AA', 'BPP', 'cocap.QCMA') => ('p', 'T', 'BPP', 'cocap.QCMA')
('p', 'AA', 'BPP', 'cocap.QCMA') => ('p', 'EA', 'BPP', 'cocap.QCMA')
('p', 'AA', 'BPP', 'QCMA') => ('p', 'T', 'BPP', 'QCMA')
('p', 'AA', 'BPP', 'QCMA') => ('p', 'EA', 'BPP', 'QCMA')
('p', 'AA', 'BPP', 'co.QCMA') => ('p', 'T', 'BPP', 'co.QCMA')
('p', 'AA', 'BPP', 'co.QCMA') => ('p', 'EA', 'BPP', 'co.QCMA')
('d', 'A', 'cocap.QMIP_ne', 'BPP') => ('-p', 'A', 'cocap.QMIP_ne', 'BPP')
('d', 'A', 'cocap.NP', 'BPP') => ('-p', 'A', 'cocap.NP', 'BPP')
('-d', 'A', 'BPP', 'BQP/mpoly') => ('-d', 'AA', 'BPP', 'BQP/mpoly')
('-d', 'A', 'BPP', 'BQP/qpoly') => ('-d', 'AA', 'BPP', 'BQP/qpoly')
('-d', 'AA', 'BPP', 'BQP/qpoly') => ('-d', 'T', 'BPP', 'BQP/qpoly')
('-d', 'AA', 'BPP', 'BQP/qpoly') => ('-d', 'EA', 'BPP', 'BQP/qpoly')
('-d', 'AA', 'BPP', 'BQP/mpoly') => ('-d', 'T', 'BPP', 'BQP/mpoly')
('-d', 'AA', 'BPP', 'BQP/mpoly') => ('-d', 'EA', 'BPP', 'BQP/mpoly')
('p', 'A', 'BPP', 'BQP/mpoly') => ('p', 'R', 'BPP', 'BQP/mpoly')
('p', 'A', 'BPP', 'BQP/mpoly') => ('p', 'AA', 'BPP', 'BQP/mpoly')
('p', 'A', 'BPP', 'BQP/qpoly') => ('p', 'R', 'BPP', 'BQP/qpoly')
('p', 'A', 'BPP', 'BQP/qpoly') => ('p', 'AA', 'BPP', 'BQP/qpoly')
('p', 'AA', 'BPP', 'BQP/qpoly') => ('p', 'T', 'BPP', 'BQP/qpoly')
('p', 'AA', 'BPP', 'BQP/qpoly') => ('p', 'EA', 'BPP', 'BQP/qpoly')
('p', 'AA', 'BPP', 'BQP/mpoly') => ('p', 'T', 'BPP', 'BQP/mpoly')
('p', 'AA', 'BPP', 'BQP/mpoly') => ('p', 'EA', 'BPP', 'BQP/mpoly')
('p', 'AA', 'BPP', 'BQP') => ('-d', 'AA', 'BPP', 'BQP')
('p', 'AA', 'BPP', 'BQP') => ('p', 'T', 'BPP', 'BQP')
('p', 'AA', 'BPP', 'BQP') => ('p', 'EA', 'BPP', 'BQP')
('p', 'EA', 'BPP', 'BQP') => ('-d', 'EA', 'BPP', 'BQP')
('p', 'EA', 'BPP', 'BQP') => ('p', 'E', 'BPP', 'BQP')
('p', 'T', 'BPP', 'BQP') => ('-d', 'T', 'BPP', 'BQP')
('p', 'A', 'RG(2)', 'RG(3)') => ('-d', 'A', 'RG(2)', 'RG(3)')
('p', 'A', 'RG(2)', 'RG(3)') => ('p', 'R', 'RG(2)', 'RG(3)')
('p', 'A', 'RG(2)', 'RG(3)') => ('p', 'AA', 'RG(2)', 'RG(3)')
('p', 'E', 'RG(1)', 'RG(3)') => ('-d', 'E', 'RG(1)', 'RG(3)')
('p', 'A', 'RG(1)', 'RG(3)') => ('-d', 'A', 'RG(1)', 'RG(3)')
('p', 'A', 'RG(1)', 'RG(3)') => ('p', 'R', 'RG(1)', 'RG(3)')
('p', 'A', 'RG(1)', 'RG(3)') => ('p', 'AA', 'RG(1)', 'RG(3)')
('p', 'AA', 'RG(1)', 'RG(3)') => ('-d', 'AA', 'RG(1)', 'RG(3)')
('p', 'AA', 'RG(1)', 'RG(3)') => ('p', 'T', 'RG(1)', 'RG(3)')
('p', 'AA', 'RG(1)', 'RG(3)') => ('p', 'EA', 'RG(1)', 'RG(3)')
('p', 'EA', 'RG(1)', 'RG(3)') => ('-d', 'EA', 'RG(1)', 'RG(3)')
('p', 'T', 'RG(1)', 'RG(3)') => ('-d', 'T', 'RG(1)', 'RG(3)')
('p', 'R', 'RG(1)', 'RG(3)') => ('-d', 'R', 'RG(1)', 'RG(3)')
('-p', 'R', 'RG(3)', 'P') => ('-p', 'A', 'RG(3)', 'P')
('p', 'AA', 'RG(2)', 'RG(3)') => ('-d', 'AA', 'RG(2)', 'RG(3)')
('p', 'AA', 'RG(2)', 'RG(3)') => ('p', 'T', 'RG(2)', 'RG(3)')
('p', 'AA', 'RG(2)', 'RG(3)') => ('p', 'EA', 'RG(2)', 'RG(3)')
('p', 'EA', 'RG(2)', 'RG(3)') => ('-d', 'EA', 'RG(2)', 'RG(3)')
('p', 'EA', 'RG(2)', 'RG(3)') => ('p', 'E', 'RG(2)', 'RG(3)')
('p', 'E', 'RG(2)', 'RG(3)') => ('-d', 'E', 'RG(2)', 'RG(3)')
('p', 'T', 'RG(2)', 'RG(3)') => ('-d', 'T', 'RG(2)', 'RG(3)')
('p', 'R', 'RG(2)', 'RG(3)') => ('-d', 'R', 'RG(2)', 'RG(3)')
('p', 'A', 'UP', 'SPP') => ('-d', 'A', 'UP', 'SPP')
('p', 'A', 'UP', 'SPP') => ('p', 'R', 'UP', 'SPP')
('p', 'A', 'UP', 'SPP') => ('p', 'AA', 'UP', 'SPP')
('p', 'A', 'co.UP', 'SPP') => ('-d', 'A', 'co.UP', 'SPP')
('p', 'A', 'co.UP', 'SPP') => ('p', 'R', 'co.UP', 'SPP')
('p', 'A', 'co.UP', 'SPP') => ('p', 'AA', 'co.UP', 'SPP')
('p', 'A', 'cocap.UP', 'SPP') => ('-d', 'A', 'cocap.UP', 'SPP')
('p', 'A', 'cocap.UP', 'SPP') => ('p', 'R', 'cocap.UP', 'SPP')
('p', 'A', 'cocap.UP', 'SPP') => ('p', 'AA', 'cocap.UP', 'SPP')
('p', 'AA', 'cocap.UP', 'SPP') => ('-d', 'AA', 'cocap.UP', 'SPP')
('p', 'AA', 'cocap.UP', 'SPP') => ('p', 'T', 'cocap.UP', 'SPP')
('p', 'AA', 'cocap.UP', 'SPP') => ('p', 'EA', 'cocap.UP', 'SPP')
('p', 'EA', 'cocap.UP', 'SPP') => ('-d', 'EA', 'cocap.UP', 'SPP')
('p', 'EA', 'cocap.UP', 'SPP') => ('p', 'E', 'cocap.UP', 'SPP')
('p', 'E', 'cocap.UP', 'SPP') => ('-d', 'E', 'cocap.UP', 'SPP')
('p', 'T', 'cocap.UP', 'SPP') => ('-d', 'T', 'cocap.UP', 'SPP')
('p', 'R', 'cocap.UP', 'SPP') => ('-d', 'R', 'cocap.UP', 'SPP')
('p', 'AA', 'co.UP', 'SPP') => ('-d', 'AA', 'co.UP', 'SPP')
('p', 'AA', 'co.UP', 'SPP') => ('p', 'T', 'co.UP', 'SPP')
('p', 'AA', 'co.UP', 'SPP') => ('p', 'EA', 'co.UP', 'SPP')
('p', 'AA', 'UP', 'SPP') => ('-d', 'AA', 'UP', 'SPP')
('p', 'AA', 'UP', 'SPP') => ('p', 'T', 'UP', 'SPP')
('p', 'AA', 'UP', 'SPP') => ('p', 'EA', 'UP', 'SPP')
('p', 'EA', 'UP', 'SPP') => ('-d', 'EA', 'UP', 'SPP')
('p', 'EA', 'UP', 'SPP') => ('p', 'E', 'UP', 'SPP')
('p', 'EA', 'co.UP', 'SPP') => ('-d', 'EA', 'co.UP', 'SPP')
('p', 'EA', 'co.UP', 'SPP') => ('p', 'E', 'co.UP', 'SPP')
('p', 'E', 'co.UP', 'SPP') => ('-d', 'E', 'co.UP', 'SPP')
('p', 'E', 'UP', 'SPP') => ('-d', 'E', 'UP', 'SPP')
('p', 'T', 'UP', 'SPP') => ('-d', 'T', 'UP', 'SPP')
('p', 'T', 'co.UP', 'SPP') => ('-d', 'T', 'co.UP', 'SPP')
('p', 'R', 'co.UP', 'SPP') => ('-d', 'R', 'co.UP', 'SPP')
('p', 'R', 'UP', 'SPP') => ('-d', 'R', 'UP', 'SPP')
('p', 'A', 'AH_plo', 'AH') => ('-d', 'A', 'AH_plo', 'AH')
('p', 'A', 'AH_plo', 'AH') => ('p', 'R', 'AH_plo', 'AH')
('p', 'A', 'AH_plo', 'AH') => ('p', 'AA', 'AH_plo', 'AH')
('p', 'A', 'co.AH_plo', 'AH') => ('-d', 'A', 'co.AH_plo', 'AH')
('p', 'A', 'co.AH_plo', 'AH') => ('p', 'R', 'co.AH_plo', 'AH')
('p', 'A', 'co.AH_plo', 'AH') => ('p', 'AA', 'co.AH_plo', 'AH')
('p', 'A', 'cocap.AH_plo', 'AH') => ('-d', 'A', 'cocap.AH_plo', 'AH')
('p', 'A', 'cocap.AH_plo', 'AH') => ('p', 'R', 'cocap.AH_plo', 'AH')
('p', 'A', 'cocap.AH_plo', 'AH') => ('p', 'AA', 'cocap.AH_plo', 'AH')
('p', 'A', 'P', 'AH') => ('-d', 'A', 'P', 'AH')
('p', 'A', 'P', 'AH') => ('p', 'R', 'P', 'AH')
('p', 'A', 'P', 'AH') => ('p', 'AA', 'P', 'AH')
('p', 'E', 'EXP_plo', 'AH') => ('-d', 'E', 'EXP_plo', 'AH')
('p', 'AA', 'P', 'AH') => ('-d', 'AA', 'P', 'AH')
('p', 'AA', 'P', 'AH') => ('p', 'T', 'P', 'AH')
('p', 'AA', 'P', 'AH') => ('p', 'EA', 'P', 'AH')
('p', 'EA', 'P', 'AH') => ('-d', 'EA', 'P', 'AH')
('p', 'T', 'P', 'AH') => ('-d', 'T', 'P', 'AH')
('p', 'R', 'P', 'AH') => ('-d', 'R', 'P', 'AH')
('p', 'A', 'EXP_plo', 'AH') => ('-d', 'A', 'EXP_plo', 'AH')
('p', 'A', 'EXP_plo', 'AH') => ('p', 'R', 'EXP_plo', 'AH')
('p', 'A', 'EXP_plo', 'AH') => ('p', 'AA', 'EXP_plo', 'AH')
('p', 'AA', 'EXP_plo', 'AH') => ('-d', 'AA', 'EXP_plo', 'AH')
('p', 'AA', 'EXP_plo', 'AH') => ('p', 'T', 'EXP_plo', 'AH')
('p', 'AA', 'EXP_plo', 'AH') => ('p', 'EA', 'EXP_plo', 'AH')
('p', 'EA', 'EXP_plo', 'AH') => ('-d', 'EA', 'EXP_plo', 'AH')
('p', 'T', 'EXP_plo', 'AH') => ('-d', 'T', 'EXP_plo', 'AH')
('p', 'R', 'EXP_plo', 'AH') => ('-d', 'R', 'EXP_plo', 'AH')
('p', 'A', 'cocap.NEXP_plo', 'AH') => ('-d', 'A', 'cocap.NEXP_plo', 'AH')
('p', 'A', 'cocap.NEXP_plo', 'AH') => ('p', 'R', 'cocap.NEXP_plo', 'AH')
('p', 'A', 'cocap.NEXP_plo', 'AH') => ('p', 'AA', 'cocap.NEXP_plo', 'AH')
('p', 'A', 'cocap.NP', 'AH') => ('-d', 'A', 'cocap.NP', 'AH')
('p', 'A', 'cocap.NP', 'AH') => ('p', 'R', 'cocap.NP', 'AH')
('p', 'A', 'cocap.NP', 'AH') => ('p', 'AA', 'cocap.NP', 'AH')
('p', 'A', 'ZPP', 'AH') => ('-d', 'A', 'ZPP', 'AH')
('p', 'A', 'ZPP', 'AH') => ('p', 'R', 'ZPP', 'AH')
('p', 'A', 'ZPP', 'AH') => ('p', 'AA', 'ZPP', 'AH')
('p', 'AA', 'ZPP', 'AH') => ('-d', 'AA', 'ZPP', 'AH')
('p', 'AA', 'ZPP', 'AH') => ('p', 'T', 'ZPP', 'AH')
('p', 'AA', 'ZPP', 'AH') => ('p', 'EA', 'ZPP', 'AH')
('p', 'EA', 'ZPP', 'AH') => ('-d', 'EA', 'ZPP', 'AH')
('p', 'T', 'ZPP', 'AH') => ('-d', 'T', 'ZPP', 'AH')
('p', 'AA', 'cocap.NP', 'AH') => ('-d', 'AA', 'cocap.NP', 'AH')
('p', 'AA', 'cocap.NP', 'AH') => ('p', 'T', 'cocap.NP', 'AH')
('p', 'AA', 'cocap.NP', 'AH') => ('p', 'EA', 'cocap.NP', 'AH')
('p', 'EA', 'cocap.NP', 'AH') => ('-d', 'EA', 'cocap.NP', 'AH')
('p', 'T', 'cocap.NP', 'AH') => ('-d', 'T', 'cocap.NP', 'AH')
('p', 'A', 'cocap.MIP', 'AH') => ('-d', 'A', 'cocap.MIP', 'AH')
('p', 'A', 'cocap.MIP', 'AH') => ('p', 'R', 'cocap.MIP', 'AH')
('p', 'A', 'cocap.MIP', 'AH') => ('p', 'AA', 'cocap.MIP', 'AH')
('p', 'A', 'cocap.SBP', 'AH') => ('-d', 'A', 'cocap.SBP', 'AH')
('p', 'A', 'cocap.SBP', 'AH') => ('p', 'AA', 'cocap.SBP', 'AH')
('p', 'A', 'cocap.MA', 'AH') => ('-d', 'A', 'cocap.MA', 'AH')
('p', 'A', 'cocap.MA', 'AH') => ('p', 'AA', 'cocap.MA', 'AH')
('p', 'AA', 'cocap.MA', 'AH') => ('-d', 'AA', 'cocap.MA', 'AH')
('p', 'AA', 'cocap.MA', 'AH') => ('p', 'T', 'cocap.MA', 'AH')
('p', 'AA', 'cocap.MA', 'AH') => ('p', 'EA', 'cocap.MA', 'AH')
('p', 'EA', 'cocap.MA', 'AH') => ('-d', 'EA', 'cocap.MA', 'AH')
('p', 'T', 'cocap.MA', 'AH') => ('-d', 'T', 'cocap.MA', 'AH')
('p', 'AA', 'cocap.SBP', 'AH') => ('-d', 'AA', 'cocap.SBP', 'AH')
('p', 'AA', 'cocap.SBP', 'AH') => ('p', 'T', 'cocap.SBP', 'AH')
('p', 'AA', 'cocap.SBP', 'AH') => ('p', 'EA', 'cocap.SBP', 'AH')
('p', 'EA', 'cocap.SBP', 'AH') => ('-d', 'EA', 'cocap.SBP', 'AH')
('p', 'T', 'cocap.SBP', 'AH') => ('-d', 'T', 'cocap.SBP', 'AH')
('p', 'A', 'cocap.AM', 'AH') => ('-d', 'A', 'cocap.AM', 'AH')
('p', 'A', 'cocap.AM', 'AH') => ('p', 'AA', 'cocap.AM', 'AH')
('p', 'AA', 'cocap.AM', 'AH') => ('-d', 'AA', 'cocap.AM', 'AH')
('p', 'AA', 'cocap.AM', 'AH') => ('p', 'T', 'cocap.AM', 'AH')
('p', 'AA', 'cocap.AM', 'AH') => ('p', 'EA', 'cocap.AM', 'AH')
('p', 'EA', 'cocap.AM', 'AH') => ('-d', 'EA', 'cocap.AM', 'AH')
('p', 'T', 'cocap.AM', 'AH') => ('-d', 'T', 'cocap.AM', 'AH')
('p', 'A', 'cocap.IP', 'AH') => ('-d', 'A', 'cocap.IP', 'AH')
('p', 'A', 'cocap.IP', 'AH') => ('p', 'R', 'cocap.IP', 'AH')
('p', 'A', 'cocap.IP', 'AH') => ('p', 'AA', 'cocap.IP', 'AH')
('p', 'AA', 'cocap.IP', 'AH') => ('-d', 'AA', 'cocap.IP', 'AH')
('p', 'AA', 'cocap.IP', 'AH') => ('p', 'T', 'cocap.IP', 'AH')
('p', 'AA', 'cocap.IP', 'AH') => ('p', 'EA', 'cocap.IP', 'AH')
('p', 'EA', 'cocap.IP', 'AH') => ('-d', 'EA', 'cocap.IP', 'AH')
('p', 'T', 'cocap.IP', 'AH') => ('-d', 'T', 'cocap.IP', 'AH')
('p', 'R', 'cocap.IP', 'AH') => ('-d', 'R', 'cocap.IP', 'AH')
('p', 'AA', 'cocap.MIP', 'AH') => ('-d', 'AA', 'cocap.MIP', 'AH')
('p', 'AA', 'cocap.MIP', 'AH') => ('p', 'T', 'cocap.MIP', 'AH')
('p', 'AA', 'cocap.MIP', 'AH') => ('p', 'EA', 'cocap.MIP', 'AH')
('p', 'EA', 'cocap.MIP', 'AH') => ('-d', 'EA', 'cocap.MIP', 'AH')
('p', 'T', 'cocap.MIP', 'AH') => ('-d', 'T', 'cocap.MIP', 'AH')
('p', 'R', 'cocap.MIP', 'AH') => ('-d', 'R', 'cocap.MIP', 'AH')
('p', 'AA', 'cocap.NEXP_plo', 'AH') => ('-d', 'AA', 'cocap.NEXP_plo', 'AH')
('p', 'AA', 'cocap.NEXP_plo', 'AH') => ('p', 'T', 'cocap.NEXP_plo', 'AH')
('p', 'AA', 'cocap.NEXP_plo', 'AH') => ('p', 'EA', 'cocap.NEXP_plo', 'AH')
('p', 'EA', 'cocap.NEXP_plo', 'AH') => ('-d', 'EA', 'cocap.NEXP_plo', 'AH')
('p', 'T', 'cocap.NEXP_plo', 'AH') => ('-d', 'T', 'cocap.NEXP_plo', 'AH')
('p', 'R', 'cocap.NEXP_plo', 'AH') => ('-d', 'R', 'cocap.NEXP_plo', 'AH')
('p', 'AA', 'cocap.AH_plo', 'AH') => ('-d', 'AA', 'cocap.AH_plo', 'AH')
('p', 'AA', 'cocap.AH_plo', 'AH') => ('p', 'T', 'cocap.AH_plo', 'AH')
('p', 'AA', 'cocap.AH_plo', 'AH') => ('p', 'EA', 'cocap.AH_plo', 'AH')
('p', 'EA', 'cocap.AH_plo', 'AH') => ('-d', 'EA', 'cocap.AH_plo', 'AH')
('p', 'EA', 'cocap.AH_plo', 'AH') => ('p', 'E', 'cocap.AH_plo', 'AH')
('p', 'E', 'cocap.AH_plo', 'AH') => ('-d', 'E', 'cocap.AH_plo', 'AH')
('p', 'T', 'cocap.AH_plo', 'AH') => ('-d', 'T', 'cocap.AH_plo', 'AH')
('p', 'R', 'cocap.AH_plo', 'AH') => ('-d', 'R', 'cocap.AH_plo', 'AH')
('p', 'A', 'co.MA', 'AH') => ('-d', 'A', 'co.MA', 'AH')
('p', 'A', 'co.MA', 'AH') => ('p', 'R', 'co.MA', 'AH')
('p', 'A', 'co.MA', 'AH') => ('p', 'AA', 'co.MA', 'AH')
('p', 'A', 'MA', 'AH') => ('-d', 'A', 'MA', 'AH')
('p', 'A', 'MA', 'AH') => ('p', 'R', 'MA', 'AH')
('p', 'A', 'MA', 'AH') => ('p', 'AA', 'MA', 'AH')
('p', 'A', 'RP', 'AH') => ('-d', 'A', 'RP', 'AH')
('p', 'A', 'RP', 'AH') => ('p', 'R', 'RP', 'AH')
('p', 'A', 'RP', 'AH') => ('p', 'AA', 'RP', 'AH')
('p', 'A', 'co.RP', 'AH') => ('-d', 'A', 'co.RP', 'AH')
('p', 'A', 'co.RP', 'AH') => ('p', 'R', 'co.RP', 'AH')
('p', 'A', 'co.RP', 'AH') => ('p', 'AA', 'co.RP', 'AH')
('p', 'AA', 'co.RP', 'AH') => ('-d', 'AA', 'co.RP', 'AH')
('p', 'AA', 'co.RP', 'AH') => ('p', 'T', 'co.RP', 'AH')
('p', 'AA', 'co.RP', 'AH') => ('p', 'EA', 'co.RP', 'AH')
('p', 'AA', 'RP', 'AH') => ('-d', 'AA', 'RP', 'AH')
('p', 'AA', 'RP', 'AH') => ('p', 'T', 'RP', 'AH')
('p', 'AA', 'RP', 'AH') => ('p', 'EA', 'RP', 'AH')
('p', 'EA', 'RP', 'AH') => ('-d', 'EA', 'RP', 'AH')
('p', 'EA', 'co.RP', 'AH') => ('-d', 'EA', 'co.RP', 'AH')
('p', 'T', 'RP', 'AH') => ('-d', 'T', 'RP', 'AH')
('p', 'T', 'co.RP', 'AH') => ('-d', 'T', 'co.RP', 'AH')
('p', 'A', 'NP', 'AH') => ('-d', 'A', 'NP', 'AH')
('p', 'A', 'NP', 'AH') => ('p', 'R', 'NP', 'AH')
('p', 'A', 'NP', 'AH') => ('p', 'AA', 'NP', 'AH')
('p', 'A', 'co.NP', 'AH') => ('-d', 'A', 'co.NP', 'AH')
('p', 'A', 'co.NP', 'AH') => ('p', 'R', 'co.NP', 'AH')
('p', 'A', 'co.NP', 'AH') => ('p', 'AA', 'co.NP', 'AH')
('d', 'A', 'AH', 'BQP/mpoly') => ('-p', 'A', 'AH', 'BQP/mpoly')
('d', 'A', 'AH', 'BQP/qpoly') => ('-p', 'A', 'AH', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'AH') => ('-d', 'AA', 'co.NP', 'AH')
('p', 'AA', 'co.NP', 'AH') => ('p', 'T', 'co.NP', 'AH')
('p', 'AA', 'co.NP', 'AH') => ('p', 'EA', 'co.NP', 'AH')
('p', 'AA', 'NP', 'AH') => ('-d', 'AA', 'NP', 'AH')
('p', 'AA', 'NP', 'AH') => ('p', 'T', 'NP', 'AH')
('p', 'AA', 'NP', 'AH') => ('p', 'EA', 'NP', 'AH')
('p', 'EA', 'NP', 'AH') => ('-d', 'EA', 'NP', 'AH')
('p', 'EA', 'co.NP', 'AH') => ('-d', 'EA', 'co.NP', 'AH')
('p', 'T', 'NP', 'AH') => ('-d', 'T', 'NP', 'AH')
('p', 'T', 'co.NP', 'AH') => ('-d', 'T', 'co.NP', 'AH')
('p', 'AA', 'MA', 'AH') => ('-d', 'AA', 'MA', 'AH')
('p', 'AA', 'MA', 'AH') => ('p', 'T', 'MA', 'AH')
('p', 'AA', 'MA', 'AH') => ('p', 'EA', 'MA', 'AH')
('p', 'AA', 'co.MA', 'AH') => ('-d', 'AA', 'co.MA', 'AH')
('p', 'AA', 'co.MA', 'AH') => ('p', 'T', 'co.MA', 'AH')
('p', 'AA', 'co.MA', 'AH') => ('p', 'EA', 'co.MA', 'AH')
('p', 'EA', 'co.MA', 'AH') => ('-d', 'EA', 'co.MA', 'AH')
('p', 'EA', 'MA', 'AH') => ('-d', 'EA', 'MA', 'AH')
('p', 'T', 'co.MA', 'AH') => ('-d', 'T', 'co.MA', 'AH')
('p', 'T', 'MA', 'AH') => ('-d', 'T', 'MA', 'AH')
('p', 'A', 'co.NEXP_plo', 'AH') => ('-d', 'A', 'co.NEXP_plo', 'AH')
('p', 'A', 'co.NEXP_plo', 'AH') => ('p', 'R', 'co.NEXP_plo', 'AH')
('p', 'A', 'co.NEXP_plo', 'AH') => ('p', 'AA', 'co.NEXP_plo', 'AH')
('p', 'A', 'NEXP_plo', 'AH') => ('-d', 'A', 'NEXP_plo', 'AH')
('p', 'A', 'NEXP_plo', 'AH') => ('p', 'R', 'NEXP_plo', 'AH')
('p', 'A', 'NEXP_plo', 'AH') => ('p', 'AA', 'NEXP_plo', 'AH')
('p', 'A', 'SBP', 'AH') => ('-d', 'A', 'SBP', 'AH')
('p', 'A', 'SBP', 'AH') => ('p', 'AA', 'SBP', 'AH')
('p', 'A', 'co.SBP', 'AH') => ('-d', 'A', 'co.SBP', 'AH')
('p', 'A', 'co.SBP', 'AH') => ('p', 'AA', 'co.SBP', 'AH')
('p', 'AA', 'co.SBP', 'AH') => ('-d', 'AA', 'co.SBP', 'AH')
('p', 'AA', 'co.SBP', 'AH') => ('p', 'T', 'co.SBP', 'AH')
('p', 'AA', 'co.SBP', 'AH') => ('p', 'EA', 'co.SBP', 'AH')
('p', 'AA', 'SBP', 'AH') => ('-d', 'AA', 'SBP', 'AH')
('p', 'AA', 'SBP', 'AH') => ('p', 'T', 'SBP', 'AH')
('p', 'AA', 'SBP', 'AH') => ('p', 'EA', 'SBP', 'AH')
('p', 'EA', 'SBP', 'AH') => ('-d', 'EA', 'SBP', 'AH')
('p', 'EA', 'co.SBP', 'AH') => ('-d', 'EA', 'co.SBP', 'AH')
('p', 'T', 'SBP', 'AH') => ('-d', 'T', 'SBP', 'AH')
('p', 'T', 'co.SBP', 'AH') => ('-d', 'T', 'co.SBP', 'AH')
('p', 'A', 'AM', 'AH') => ('-d', 'A', 'AM', 'AH')
('p', 'A', 'AM', 'AH') => ('p', 'AA', 'AM', 'AH')
('p', 'A', 'co.AM', 'AH') => ('-d', 'A', 'co.AM', 'AH')
('p', 'A', 'co.AM', 'AH') => ('p', 'AA', 'co.AM', 'AH')
('p', 'AA', 'co.AM', 'AH') => ('-d', 'AA', 'co.AM', 'AH')
('p', 'AA', 'co.AM', 'AH') => ('p', 'T', 'co.AM', 'AH')
('p', 'AA', 'co.AM', 'AH') => ('p', 'EA', 'co.AM', 'AH')
('p', 'AA', 'AM', 'AH') => ('-d', 'AA', 'AM', 'AH')
('p', 'AA', 'AM', 'AH') => ('p', 'T', 'AM', 'AH')
('p', 'AA', 'AM', 'AH') => ('p', 'EA', 'AM', 'AH')
('p', 'EA', 'AM', 'AH') => ('-d', 'EA', 'AM', 'AH')
('p', 'EA', 'co.AM', 'AH') => ('-d', 'EA', 'co.AM', 'AH')
('p', 'T', 'AM', 'AH') => ('-d', 'T', 'AM', 'AH')
('p', 'T', 'co.AM', 'AH') => ('-d', 'T', 'co.AM', 'AH')
('p', 'A', 'MIP', 'AH') => ('-d', 'A', 'MIP', 'AH')
('p', 'A', 'MIP', 'AH') => ('p', 'R', 'MIP', 'AH')
('p', 'A', 'MIP', 'AH') => ('p', 'AA', 'MIP', 'AH')
('p', 'A', 'co.MIP', 'AH') => ('-d', 'A', 'co.MIP', 'AH')
('p', 'A', 'co.MIP', 'AH') => ('p', 'R', 'co.MIP', 'AH')
('p', 'A', 'co.MIP', 'AH') => ('p', 'AA', 'co.MIP', 'AH')
('p', 'A', 'co.IP', 'AH') => ('-d', 'A', 'co.IP', 'AH')
('p', 'A', 'co.IP', 'AH') => ('p', 'R', 'co.IP', 'AH')
('p', 'A', 'co.IP', 'AH') => ('p', 'AA', 'co.IP', 'AH')
('p', 'A', 'IP', 'AH') => ('-d', 'A', 'IP', 'AH')
('p', 'A', 'IP', 'AH') => ('p', 'R', 'IP', 'AH')
('p', 'A', 'IP', 'AH') => ('p', 'AA', 'IP', 'AH')
('p', 'AA', 'IP', 'AH') => ('-d', 'AA', 'IP', 'AH')
('p', 'AA', 'IP', 'AH') => ('p', 'T', 'IP', 'AH')
('p', 'AA', 'IP', 'AH') => ('p', 'EA', 'IP', 'AH')
('p', 'AA', 'co.IP', 'AH') => ('-d', 'AA', 'co.IP', 'AH')
('p', 'AA', 'co.IP', 'AH') => ('p', 'T', 'co.IP', 'AH')
('p', 'AA', 'co.IP', 'AH') => ('p', 'EA', 'co.IP', 'AH')
('p', 'EA', 'co.IP', 'AH') => ('-d', 'EA', 'co.IP', 'AH')
('p', 'EA', 'IP', 'AH') => ('-d', 'EA', 'IP', 'AH')
('p', 'T', 'co.IP', 'AH') => ('-d', 'T', 'co.IP', 'AH')
('p', 'T', 'IP', 'AH') => ('-d', 'T', 'IP', 'AH')
('p', 'R', 'IP', 'AH') => ('-d', 'R', 'IP', 'AH')
('p', 'R', 'co.IP', 'AH') => ('-d', 'R', 'co.IP', 'AH')
('p', 'AA', 'co.MIP', 'AH') => ('-d', 'AA', 'co.MIP', 'AH')
('p', 'AA', 'co.MIP', 'AH') => ('p', 'T', 'co.MIP', 'AH')
('p', 'AA', 'co.MIP', 'AH') => ('p', 'EA', 'co.MIP', 'AH')
('p', 'AA', 'MIP', 'AH') => ('-d', 'AA', 'MIP', 'AH')
('p', 'AA', 'MIP', 'AH') => ('p', 'T', 'MIP', 'AH')
('p', 'AA', 'MIP', 'AH') => ('p', 'EA', 'MIP', 'AH')
('p', 'EA', 'MIP', 'AH') => ('-d', 'EA', 'MIP', 'AH')
('p', 'EA', 'co.MIP', 'AH') => ('-d', 'EA', 'co.MIP', 'AH')
('p', 'T', 'MIP', 'AH') => ('-d', 'T', 'MIP', 'AH')
('p', 'T', 'co.MIP', 'AH') => ('-d', 'T', 'co.MIP', 'AH')
('p', 'R', 'co.MIP', 'AH') => ('-d', 'R', 'co.MIP', 'AH')
('p', 'R', 'MIP', 'AH') => ('-d', 'R', 'MIP', 'AH')
('p', 'AA', 'NEXP_plo', 'AH') => ('-d', 'AA', 'NEXP_plo', 'AH')
('p', 'AA', 'NEXP_plo', 'AH') => ('p', 'T', 'NEXP_plo', 'AH')
('p', 'AA', 'NEXP_plo', 'AH') => ('p', 'EA', 'NEXP_plo', 'AH')
('p', 'AA', 'co.NEXP_plo', 'AH') => ('-d', 'AA', 'co.NEXP_plo', 'AH')
('p', 'AA', 'co.NEXP_plo', 'AH') => ('p', 'T', 'co.NEXP_plo', 'AH')
('p', 'AA', 'co.NEXP_plo', 'AH') => ('p', 'EA', 'co.NEXP_plo', 'AH')
('p', 'EA', 'co.NEXP_plo', 'AH') => ('-d', 'EA', 'co.NEXP_plo', 'AH')
('p', 'EA', 'NEXP_plo', 'AH') => ('-d', 'EA', 'NEXP_plo', 'AH')
('p', 'T', 'co.NEXP_plo', 'AH') => ('-d', 'T', 'co.NEXP_plo', 'AH')
('p', 'T', 'NEXP_plo', 'AH') => ('-d', 'T', 'NEXP_plo', 'AH')
('p', 'R', 'NEXP_plo', 'AH') => ('-d', 'R', 'NEXP_plo', 'AH')
('p', 'R', 'co.NEXP_plo', 'AH') => ('-d', 'R', 'co.NEXP_plo', 'AH')
('p', 'AA', 'co.AH_plo', 'AH') => ('-d', 'AA', 'co.AH_plo', 'AH')
('p', 'AA', 'co.AH_plo', 'AH') => ('p', 'T', 'co.AH_plo', 'AH')
('p', 'AA', 'co.AH_plo', 'AH') => ('p', 'EA', 'co.AH_plo', 'AH')
('p', 'AA', 'AH_plo', 'AH') => ('-d', 'AA', 'AH_plo', 'AH')
('p', 'AA', 'AH_plo', 'AH') => ('p', 'T', 'AH_plo', 'AH')
('p', 'AA', 'AH_plo', 'AH') => ('p', 'EA', 'AH_plo', 'AH')
('p', 'EA', 'AH_plo', 'AH') => ('-d', 'EA', 'AH_plo', 'AH')
('p', 'EA', 'AH_plo', 'AH') => ('p', 'E', 'AH_plo', 'AH')
('p', 'EA', 'co.AH_plo', 'AH') => ('-d', 'EA', 'co.AH_plo', 'AH')
('p', 'EA', 'co.AH_plo', 'AH') => ('p', 'E', 'co.AH_plo', 'AH')
('p', 'E', 'co.AH_plo', 'AH') => ('-d', 'E', 'co.AH_plo', 'AH')
('p', 'E', 'AH_plo', 'AH') => ('-d', 'E', 'AH_plo', 'AH')
('p', 'T', 'AH_plo', 'AH') => ('-d', 'T', 'AH_plo', 'AH')
('p', 'T', 'co.AH_plo', 'AH') => ('-d', 'T', 'co.AH_plo', 'AH')
('p', 'R', 'co.AH_plo', 'AH') => ('-d', 'R', 'co.AH_plo', 'AH')
('p', 'R', 'AH_plo', 'AH') => ('-d', 'R', 'AH_plo', 'AH')
('p', 'A', 'QAM', 'QIP') => ('-d', 'A', 'QAM', 'QIP')
('p', 'A', 'QAM', 'QIP') => ('p', 'R', 'QAM', 'QIP')
('p', 'A', 'QAM', 'QIP') => ('p', 'AA', 'QAM', 'QIP')
('p', 'A', 'co.QAM', 'co.QIP') => ('-d', 'A', 'co.QAM', 'co.QIP')
('p', 'A', 'co.QAM', 'co.QIP') => ('p', 'R', 'co.QAM', 'co.QIP')
('p', 'A', 'co.QAM', 'co.QIP') => ('p', 'AA', 'co.QAM', 'co.QIP')
('p', 'A', 'cocap.QAM', 'cocap.QIP') => ('-d', 'A', 'cocap.QAM', 'cocap.QIP')
('p', 'A', 'cocap.QAM', 'cocap.QIP') => ('p', 'R', 'cocap.QAM', 'cocap.QIP')
('p', 'A', 'cocap.QAM', 'cocap.QIP') => ('p', 'AA', 'cocap.QAM', 'cocap.QIP')
('d', 'A', 'cocap.QIP', 'RP') => ('-p', 'A', 'cocap.QIP', 'RP')
('d', 'A', 'cocap.QIP', 'co.RP') => ('-p', 'A', 'cocap.QIP', 'co.RP')
('-d', 'A', 'cocap.QAM', 'ALL') => ('-d', 'R', 'cocap.QAM', 'ALL')
('-d', 'A', 'cocap.QAM', 'ALL') => ('-d', 'AA', 'cocap.QAM', 'ALL')
('-d', 'A', 'BQP', 'ALL') => ('-d', 'R', 'BQP', 'ALL')
('-d', 'A', 'BQP', 'ALL') => ('-d', 'AA', 'BQP', 'ALL')
('-d', 'AA', 'BQP', 'ALL') => ('-d', 'T', 'BQP', 'ALL')
('-d', 'AA', 'BQP', 'ALL') => ('-d', 'EA', 'BQP', 'ALL')
('-d', 'A', 'cocap.QCMA', 'ALL') => ('-d', 'R', 'cocap.QCMA', 'ALL')
('-d', 'A', 'cocap.QCMA', 'ALL') => ('-d', 'AA', 'cocap.QCMA', 'ALL')
('-d', 'AA', 'cocap.QCMA', 'ALL') => ('-d', 'T', 'cocap.QCMA', 'ALL')
('-d', 'AA', 'cocap.QCMA', 'ALL') => ('-d', 'EA', 'cocap.QCMA', 'ALL')
('-d', 'A', 'cocap.QMA', 'ALL') => ('-d', 'R', 'cocap.QMA', 'ALL')
('-d', 'A', 'cocap.QMA', 'ALL') => ('-d', 'AA', 'cocap.QMA', 'ALL')
('-d', 'AA', 'cocap.QMA', 'ALL') => ('-d', 'T', 'cocap.QMA', 'ALL')
('-d', 'AA', 'cocap.QMA', 'ALL') => ('-d', 'EA', 'cocap.QMA', 'ALL')
('-d', 'AA', 'cocap.QAM', 'ALL') => ('-d', 'T', 'cocap.QAM', 'ALL')
('-d', 'AA', 'cocap.QAM', 'ALL') => ('-d', 'EA', 'cocap.QAM', 'ALL')
('p', 'A', 'cocap.QAM', 'ALL') => ('p', 'R', 'cocap.QAM', 'ALL')
('p', 'A', 'cocap.QAM', 'ALL') => ('p', 'AA', 'cocap.QAM', 'ALL')
('p', 'A', 'BQP', 'ALL') => ('p', 'R', 'BQP', 'ALL')
('p', 'A', 'BQP', 'ALL') => ('p', 'AA', 'BQP', 'ALL')
('p', 'AA', 'BQP', 'ALL') => ('p', 'T', 'BQP', 'ALL')
('p', 'AA', 'BQP', 'ALL') => ('p', 'EA', 'BQP', 'ALL')
('p', 'A', 'cocap.QCMA', 'ALL') => ('p', 'R', 'cocap.QCMA', 'ALL')
('p', 'A', 'cocap.QCMA', 'ALL') => ('p', 'AA', 'cocap.QCMA', 'ALL')
('p', 'AA', 'cocap.QCMA', 'ALL') => ('p', 'T', 'cocap.QCMA', 'ALL')
('p', 'AA', 'cocap.QCMA', 'ALL') => ('p', 'EA', 'cocap.QCMA', 'ALL')
('p', 'A', 'cocap.QMA', 'ALL') => ('p', 'R', 'cocap.QMA', 'ALL')
('p', 'A', 'cocap.QMA', 'ALL') => ('p', 'AA', 'cocap.QMA', 'ALL')
('p', 'AA', 'cocap.QMA', 'ALL') => ('p', 'T', 'cocap.QMA', 'ALL')
('p', 'AA', 'cocap.QMA', 'ALL') => ('p', 'EA', 'cocap.QMA', 'ALL')
('p', 'AA', 'cocap.QAM', 'ALL') => ('p', 'T', 'cocap.QAM', 'ALL')
('p', 'AA', 'cocap.QAM', 'ALL') => ('p', 'EA', 'cocap.QAM', 'ALL')
('d', 'A', 'cocap.QIP', 'co.Sigma_2P') => ('-p', 'A', 'cocap.QIP', 'co.Sigma_2P')
('d', 'A', 'cocap.QIP', 'Sigma_2P') => ('-p', 'A', 'cocap.QIP', 'Sigma_2P')
('d', 'A', 'cocap.QIP', 'PH') => ('-p', 'A', 'cocap.QIP', 'PH')
('d', 'A', 'co.QIP', 'PH') => ('-p', 'A', 'co.QIP', 'PH')
('d', 'A', 'QIP', 'PH') => ('-p', 'A', 'QIP', 'PH')
('d', 'A', 'cocap.QIP', 'SZK') => ('-p', 'A', 'cocap.QIP', 'SZK')
('d', 'A', 'co.QIP', 'SZK') => ('-p', 'A', 'co.QIP', 'SZK')
('d', 'A', 'QIP', 'SZK') => ('-p', 'A', 'QIP', 'SZK')
('p', 'E', 'BQP', 'cocap.QIP') => ('-d', 'E', 'BQP', 'cocap.QIP')
('p', 'A', 'BQP', 'cocap.QIP') => ('-d', 'A', 'BQP', 'cocap.QIP')
('p', 'A', 'BQP', 'cocap.QIP') => ('p', 'R', 'BQP', 'cocap.QIP')
('p', 'A', 'BQP', 'cocap.QIP') => ('p', 'AA', 'BQP', 'cocap.QIP')
('-d', 'A', 'BQP', 'co.NEXP') => ('-d', 'R', 'BQP', 'co.NEXP')
('-d', 'A', 'BQP', 'co.NEXP') => ('-d', 'AA', 'BQP', 'co.NEXP')
('-d', 'A', 'BQP', 'NEXP') => ('-d', 'R', 'BQP', 'NEXP')
('-d', 'A', 'BQP', 'NEXP') => ('-d', 'AA', 'BQP', 'NEXP')
('-d', 'A', 'BQP', 'cocap.NEXP') => ('-d', 'R', 'BQP', 'cocap.NEXP')
('-d', 'A', 'BQP', 'cocap.NEXP') => ('-d', 'AA', 'BQP', 'cocap.NEXP')
('-d', 'A', 'BQP', 'R') => ('-d', 'R', 'BQP', 'R')
('-d', 'A', 'BQP', 'R') => ('-d', 'AA', 'BQP', 'R')
('-d', 'A', 'BQP', 'RE') => ('-d', 'R', 'BQP', 'RE')
('-d', 'A', 'BQP', 'RE') => ('-d', 'AA', 'BQP', 'RE')
('-d', 'A', 'BQP', 'co.RE') => ('-d', 'R', 'BQP', 'co.RE')
('-d', 'A', 'BQP', 'co.RE') => ('-d', 'AA', 'BQP', 'co.RE')
('-d', 'AA', 'BQP', 'co.RE') => ('-d', 'T', 'BQP', 'co.RE')
('-d', 'AA', 'BQP', 'co.RE') => ('-d', 'EA', 'BQP', 'co.RE')
('-d', 'AA', 'BQP', 'RE') => ('-d', 'T', 'BQP', 'RE')
('-d', 'AA', 'BQP', 'RE') => ('-d', 'EA', 'BQP', 'RE')
('-d', 'AA', 'BQP', 'R') => ('-d', 'T', 'BQP', 'R')
('-d', 'AA', 'BQP', 'R') => ('-d', 'EA', 'BQP', 'R')
('-d', 'A', 'BQP', 'NEXP/poly') => ('-d', 'R', 'BQP', 'NEXP/poly')
('-d', 'A', 'BQP', 'NEXP/poly') => ('-d', 'AA', 'BQP', 'NEXP/poly')
('-d', 'AA', 'BQP', 'NEXP/poly') => ('-d', 'T', 'BQP', 'NEXP/poly')
('-d', 'AA', 'BQP', 'NEXP/poly') => ('-d', 'EA', 'BQP', 'NEXP/poly')
('-d', 'AA', 'BQP', 'cocap.NEXP') => ('-d', 'T', 'BQP', 'cocap.NEXP')
('-d', 'AA', 'BQP', 'cocap.NEXP') => ('-d', 'EA', 'BQP', 'cocap.NEXP')
('-d', 'AA', 'BQP', 'co.NEXP') => ('-d', 'T', 'BQP', 'co.NEXP')
('-d', 'AA', 'BQP', 'co.NEXP') => ('-d', 'EA', 'BQP', 'co.NEXP')
('-d', 'AA', 'BQP', 'NEXP') => ('-d', 'T', 'BQP', 'NEXP')
('-d', 'AA', 'BQP', 'NEXP') => ('-d', 'EA', 'BQP', 'NEXP')
('p', 'A', 'BQP', 'co.NEXP') => ('p', 'R', 'BQP', 'co.NEXP')
('p', 'A', 'BQP', 'co.NEXP') => ('p', 'AA', 'BQP', 'co.NEXP')
('p', 'A', 'BQP', 'NEXP') => ('p', 'R', 'BQP', 'NEXP')
('p', 'A', 'BQP', 'NEXP') => ('p', 'AA', 'BQP', 'NEXP')
('p', 'A', 'BQP', 'cocap.NEXP') => ('p', 'R', 'BQP', 'cocap.NEXP')
('p', 'A', 'BQP', 'cocap.NEXP') => ('p', 'AA', 'BQP', 'cocap.NEXP')
('p', 'A', 'BQP', 'R') => ('p', 'R', 'BQP', 'R')
('p', 'A', 'BQP', 'R') => ('p', 'AA', 'BQP', 'R')
('p', 'A', 'BQP', 'RE') => ('p', 'R', 'BQP', 'RE')
('p', 'A', 'BQP', 'RE') => ('p', 'AA', 'BQP', 'RE')
('p', 'A', 'BQP', 'co.RE') => ('p', 'R', 'BQP', 'co.RE')
('p', 'A', 'BQP', 'co.RE') => ('p', 'AA', 'BQP', 'co.RE')
('p', 'AA', 'BQP', 'co.RE') => ('p', 'T', 'BQP', 'co.RE')
('p', 'AA', 'BQP', 'co.RE') => ('p', 'EA', 'BQP', 'co.RE')
('p', 'AA', 'BQP', 'RE') => ('p', 'T', 'BQP', 'RE')
('p', 'AA', 'BQP', 'RE') => ('p', 'EA', 'BQP', 'RE')
('p', 'AA', 'BQP', 'R') => ('p', 'T', 'BQP', 'R')
('p', 'AA', 'BQP', 'R') => ('p', 'EA', 'BQP', 'R')
('p', 'A', 'BQP', 'NEXP/poly') => ('p', 'R', 'BQP', 'NEXP/poly')
('p', 'A', 'BQP', 'NEXP/poly') => ('p', 'AA', 'BQP', 'NEXP/poly')
('p', 'AA', 'BQP', 'NEXP/poly') => ('p', 'T', 'BQP', 'NEXP/poly')
('p', 'AA', 'BQP', 'NEXP/poly') => ('p', 'EA', 'BQP', 'NEXP/poly')
('p', 'AA', 'BQP', 'cocap.NEXP') => ('p', 'T', 'BQP', 'cocap.NEXP')
('p', 'AA', 'BQP', 'cocap.NEXP') => ('p', 'EA', 'BQP', 'cocap.NEXP')
('p', 'AA', 'BQP', 'co.NEXP') => ('p', 'T', 'BQP', 'co.NEXP')
('p', 'AA', 'BQP', 'co.NEXP') => ('p', 'EA', 'BQP', 'co.NEXP')
('p', 'AA', 'BQP', 'NEXP') => ('p', 'T', 'BQP', 'NEXP')
('p', 'AA', 'BQP', 'NEXP') => ('p', 'EA', 'BQP', 'NEXP')
('-d', 'A', 'BQP', 'QIP') => ('-d', 'R', 'BQP', 'QIP')
('-d', 'A', 'BQP', 'QIP') => ('-d', 'AA', 'BQP', 'QIP')
('-d', 'A', 'BQP', 'co.QIP') => ('-d', 'R', 'BQP', 'co.QIP')
('-d', 'A', 'BQP', 'co.QIP') => ('-d', 'AA', 'BQP', 'co.QIP')
('-d', 'A', 'BQP', 'cocap.QIP') => ('-d', 'R', 'BQP', 'cocap.QIP')
('-d', 'A', 'BQP', 'cocap.QIP') => ('-d', 'AA', 'BQP', 'cocap.QIP')
('-d', 'A', 'BQP', 'cocap.QMIP_ne') => ('-d', 'R', 'BQP', 'cocap.QMIP_ne')
('-d', 'A', 'BQP', 'cocap.QMIP_ne') => ('-d', 'AA', 'BQP', 'cocap.QMIP_ne')
('-d', 'A', 'BQP', 'QMIP_ne') => ('-d', 'R', 'BQP', 'QMIP_ne')
('-d', 'A', 'BQP', 'QMIP_ne') => ('-d', 'AA', 'BQP', 'QMIP_ne')
('-d', 'A', 'BQP', 'co.QMIP_ne') => ('-d', 'R', 'BQP', 'co.QMIP_ne')
('-d', 'A', 'BQP', 'co.QMIP_ne') => ('-d', 'AA', 'BQP', 'co.QMIP_ne')
('-d', 'A', 'BPP', 'co.QMIP_ne') => ('-d', 'AA', 'BPP', 'co.QMIP_ne')
('-d', 'A', 'BPP', 'QMIP_ne') => ('-d', 'AA', 'BPP', 'QMIP_ne')
('-d', 'A', 'BPP', 'cocap.QMIP_ne') => ('-d', 'AA', 'BPP', 'cocap.QMIP_ne')
('-d', 'AA', 'BPP', 'cocap.QMIP_ne') => ('-d', 'T', 'BPP', 'cocap.QMIP_ne')
('-d', 'AA', 'BPP', 'cocap.QMIP_ne') => ('-d', 'EA', 'BPP', 'cocap.QMIP_ne')
('-d', 'AA', 'BPP', 'QMIP_ne') => ('-d', 'T', 'BPP', 'QMIP_ne')
('-d', 'AA', 'BPP', 'QMIP_ne') => ('-d', 'EA', 'BPP', 'QMIP_ne')
('-d', 'AA', 'BPP', 'co.QMIP_ne') => ('-d', 'T', 'BPP', 'co.QMIP_ne')
('-d', 'AA', 'BPP', 'co.QMIP_ne') => ('-d', 'EA', 'BPP', 'co.QMIP_ne')
('-d', 'AA', 'BQP', 'co.QMIP_ne') => ('-d', 'T', 'BQP', 'co.QMIP_ne')
('-d', 'AA', 'BQP', 'co.QMIP_ne') => ('-d', 'EA', 'BQP', 'co.QMIP_ne')
('-d', 'AA', 'BQP', 'QMIP_ne') => ('-d', 'T', 'BQP', 'QMIP_ne')
('-d', 'AA', 'BQP', 'QMIP_ne') => ('-d', 'EA', 'BQP', 'QMIP_ne')
('-d', 'AA', 'BQP', 'cocap.QMIP_ne') => ('-d', 'T', 'BQP', 'cocap.QMIP_ne')
('-d', 'AA', 'BQP', 'cocap.QMIP_ne') => ('-d', 'EA', 'BQP', 'cocap.QMIP_ne')
('-d', 'A', 'BPP', 'cocap.QIP') => ('-d', 'AA', 'BPP', 'cocap.QIP')
('-d', 'A', 'BPP', 'QIP') => ('-d', 'AA', 'BPP', 'QIP')
('-d', 'A', 'BPP', 'co.QIP') => ('-d', 'AA', 'BPP', 'co.QIP')
('-d', 'AA', 'BPP', 'co.QIP') => ('-d', 'T', 'BPP', 'co.QIP')
('-d', 'AA', 'BPP', 'co.QIP') => ('-d', 'EA', 'BPP', 'co.QIP')
('-d', 'AA', 'BPP', 'QIP') => ('-d', 'T', 'BPP', 'QIP')
('-d', 'AA', 'BPP', 'QIP') => ('-d', 'EA', 'BPP', 'QIP')
('-d', 'AA', 'BPP', 'cocap.QIP') => ('-d', 'T', 'BPP', 'cocap.QIP')
('-d', 'AA', 'BPP', 'cocap.QIP') => ('-d', 'EA', 'BPP', 'cocap.QIP')
('-d', 'AA', 'BQP', 'cocap.QIP') => ('-d', 'T', 'BQP', 'cocap.QIP')
('-d', 'AA', 'BQP', 'cocap.QIP') => ('-d', 'EA', 'BQP', 'cocap.QIP')
('-d', 'AA', 'BQP', 'QIP') => ('-d', 'T', 'BQP', 'QIP')
('-d', 'AA', 'BQP', 'QIP') => ('-d', 'EA', 'BQP', 'QIP')
('-d', 'AA', 'BQP', 'co.QIP') => ('-d', 'T', 'BQP', 'co.QIP')
('-d', 'AA', 'BQP', 'co.QIP') => ('-d', 'EA', 'BQP', 'co.QIP')
('p', 'A', 'BQP', 'QIP') => ('p', 'R', 'BQP', 'QIP')
('p', 'A', 'BQP', 'QIP') => ('p', 'AA', 'BQP', 'QIP')
('p', 'A', 'BQP', 'co.QIP') => ('p', 'R', 'BQP', 'co.QIP')
('p', 'A', 'BQP', 'co.QIP') => ('p', 'AA', 'BQP', 'co.QIP')
('p', 'A', 'BQP', 'co.QMIP_ne') => ('p', 'R', 'BQP', 'co.QMIP_ne')
('p', 'A', 'BQP', 'co.QMIP_ne') => ('p', 'AA', 'BQP', 'co.QMIP_ne')
('p', 'A', 'BQP', 'QMIP_ne') => ('p', 'R', 'BQP', 'QMIP_ne')
('p', 'A', 'BQP', 'QMIP_ne') => ('p', 'AA', 'BQP', 'QMIP_ne')
('p', 'A', 'BQP', 'cocap.QMIP_ne') => ('p', 'R', 'BQP', 'cocap.QMIP_ne')
('p', 'A', 'BQP', 'cocap.QMIP_ne') => ('p', 'AA', 'BQP', 'cocap.QMIP_ne')
('p', 'A', 'BPP', 'cocap.QMIP_ne') => ('p', 'R', 'BPP', 'cocap.QMIP_ne')
('p', 'A', 'BPP', 'cocap.QMIP_ne') => ('p', 'AA', 'BPP', 'cocap.QMIP_ne')
('p', 'A', 'BPP', 'QMIP_ne') => ('p', 'R', 'BPP', 'QMIP_ne')
('p', 'A', 'BPP', 'QMIP_ne') => ('p', 'AA', 'BPP', 'QMIP_ne')
('p', 'A', 'BPP', 'co.QMIP_ne') => ('p', 'R', 'BPP', 'co.QMIP_ne')
('p', 'A', 'BPP', 'co.QMIP_ne') => ('p', 'AA', 'BPP', 'co.QMIP_ne')
('p', 'AA', 'BPP', 'co.QMIP_ne') => ('p', 'T', 'BPP', 'co.QMIP_ne')
('p', 'AA', 'BPP', 'co.QMIP_ne') => ('p', 'EA', 'BPP', 'co.QMIP_ne')
('p', 'AA', 'BPP', 'QMIP_ne') => ('p', 'T', 'BPP', 'QMIP_ne')
('p', 'AA', 'BPP', 'QMIP_ne') => ('p', 'EA', 'BPP', 'QMIP_ne')
('p', 'AA', 'BPP', 'cocap.QMIP_ne') => ('p', 'T', 'BPP', 'cocap.QMIP_ne')
('p', 'AA', 'BPP', 'cocap.QMIP_ne') => ('p', 'EA', 'BPP', 'cocap.QMIP_ne')
('p', 'AA', 'BQP', 'cocap.QMIP_ne') => ('p', 'T', 'BQP', 'cocap.QMIP_ne')
('p', 'AA', 'BQP', 'cocap.QMIP_ne') => ('p', 'EA', 'BQP', 'cocap.QMIP_ne')
('p', 'AA', 'BQP', 'QMIP_ne') => ('p', 'T', 'BQP', 'QMIP_ne')
('p', 'AA', 'BQP', 'QMIP_ne') => ('p', 'EA', 'BQP', 'QMIP_ne')
('p', 'AA', 'BQP', 'co.QMIP_ne') => ('p', 'T', 'BQP', 'co.QMIP_ne')
('p', 'AA', 'BQP', 'co.QMIP_ne') => ('p', 'EA', 'BQP', 'co.QMIP_ne')
('p', 'A', 'BPP', 'co.QIP') => ('p', 'R', 'BPP', 'co.QIP')
('p', 'A', 'BPP', 'co.QIP') => ('p', 'AA', 'BPP', 'co.QIP')
('p', 'A', 'BPP', 'QIP') => ('p', 'R', 'BPP', 'QIP')
('p', 'A', 'BPP', 'QIP') => ('p', 'AA', 'BPP', 'QIP')
('p', 'A', 'BPP', 'cocap.QIP') => ('p', 'R', 'BPP', 'cocap.QIP')
('p', 'A', 'BPP', 'cocap.QIP') => ('p', 'AA', 'BPP', 'cocap.QIP')
('p', 'AA', 'BPP', 'cocap.QIP') => ('p', 'T', 'BPP', 'cocap.QIP')
('p', 'AA', 'BPP', 'cocap.QIP') => ('p', 'EA', 'BPP', 'cocap.QIP')
('p', 'AA', 'BPP', 'QIP') => ('p', 'T', 'BPP', 'QIP')
('p', 'AA', 'BPP', 'QIP') => ('p', 'EA', 'BPP', 'QIP')
('p', 'AA', 'BPP', 'co.QIP') => ('p', 'T', 'BPP', 'co.QIP')
('p', 'AA', 'BPP', 'co.QIP') => ('p', 'EA', 'BPP', 'co.QIP')
('p', 'AA', 'BQP', 'co.QIP') => ('p', 'T', 'BQP', 'co.QIP')
('p', 'AA', 'BQP', 'co.QIP') => ('p', 'EA', 'BQP', 'co.QIP')
('p', 'AA', 'BQP', 'QIP') => ('p', 'T', 'BQP', 'QIP')
('p', 'AA', 'BQP', 'QIP') => ('p', 'EA', 'BQP', 'QIP')
('p', 'AA', 'BQP', 'cocap.QIP') => ('p', 'T', 'BQP', 'cocap.QIP')
('p', 'AA', 'BQP', 'cocap.QIP') => ('p', 'EA', 'BQP', 'cocap.QIP')
('-d', 'A', 'cocap.QAM', 'co.NEXP') => ('-d', 'R', 'cocap.QAM', 'co.NEXP')
('-d', 'A', 'cocap.QAM', 'co.NEXP') => ('-d', 'AA', 'cocap.QAM', 'co.NEXP')
('-d', 'A', 'cocap.QAM', 'NEXP') => ('-d', 'R', 'cocap.QAM', 'NEXP')
('-d', 'A', 'cocap.QAM', 'NEXP') => ('-d', 'AA', 'cocap.QAM', 'NEXP')
('-d', 'A', 'cocap.QAM', 'cocap.NEXP') => ('-d', 'R', 'cocap.QAM', 'cocap.NEXP')
('-d', 'A', 'cocap.QAM', 'cocap.NEXP') => ('-d', 'AA', 'cocap.QAM', 'cocap.NEXP')
('-d', 'A', 'cocap.QCMA', 'cocap.NEXP') => ('-d', 'R', 'cocap.QCMA', 'cocap.NEXP')
('-d', 'A', 'cocap.QCMA', 'cocap.NEXP') => ('-d', 'AA', 'cocap.QCMA', 'cocap.NEXP')
('-d', 'A', 'cocap.QCMA', 'co.NEXP') => ('-d', 'R', 'cocap.QCMA', 'co.NEXP')
('-d', 'A', 'cocap.QCMA', 'co.NEXP') => ('-d', 'AA', 'cocap.QCMA', 'co.NEXP')
('-d', 'A', 'cocap.QCMA', 'NEXP') => ('-d', 'R', 'cocap.QCMA', 'NEXP')
('-d', 'A', 'cocap.QCMA', 'NEXP') => ('-d', 'AA', 'cocap.QCMA', 'NEXP')
('-d', 'A', 'cocap.QCMA', 'R') => ('-d', 'R', 'cocap.QCMA', 'R')
('-d', 'A', 'cocap.QCMA', 'R') => ('-d', 'AA', 'cocap.QCMA', 'R')
('-d', 'A', 'cocap.QCMA', 'RE') => ('-d', 'R', 'cocap.QCMA', 'RE')
('-d', 'A', 'cocap.QCMA', 'RE') => ('-d', 'AA', 'cocap.QCMA', 'RE')
('-d', 'A', 'cocap.QCMA', 'co.RE') => ('-d', 'R', 'cocap.QCMA', 'co.RE')
('-d', 'A', 'cocap.QCMA', 'co.RE') => ('-d', 'AA', 'cocap.QCMA', 'co.RE')
('-d', 'AA', 'cocap.QCMA', 'co.RE') => ('-d', 'T', 'cocap.QCMA', 'co.RE')
('-d', 'AA', 'cocap.QCMA', 'co.RE') => ('-d', 'EA', 'cocap.QCMA', 'co.RE')
('-d', 'AA', 'cocap.QCMA', 'RE') => ('-d', 'T', 'cocap.QCMA', 'RE')
('-d', 'AA', 'cocap.QCMA', 'RE') => ('-d', 'EA', 'cocap.QCMA', 'RE')
('-d', 'AA', 'cocap.QCMA', 'R') => ('-d', 'T', 'cocap.QCMA', 'R')
('-d', 'AA', 'cocap.QCMA', 'R') => ('-d', 'EA', 'cocap.QCMA', 'R')
('-d', 'A', 'cocap.QCMA', 'NEXP/poly') => ('-d', 'R', 'cocap.QCMA', 'NEXP/poly')
('-d', 'A', 'cocap.QCMA', 'NEXP/poly') => ('-d', 'AA', 'cocap.QCMA', 'NEXP/poly')
('-d', 'AA', 'cocap.QCMA', 'NEXP/poly') => ('-d', 'T', 'cocap.QCMA', 'NEXP/poly')
('-d', 'AA', 'cocap.QCMA', 'NEXP/poly') => ('-d', 'EA', 'cocap.QCMA', 'NEXP/poly')
('-d', 'AA', 'cocap.QCMA', 'NEXP') => ('-d', 'T', 'cocap.QCMA', 'NEXP')
('-d', 'AA', 'cocap.QCMA', 'NEXP') => ('-d', 'EA', 'cocap.QCMA', 'NEXP')
('-d', 'AA', 'cocap.QCMA', 'co.NEXP') => ('-d', 'T', 'cocap.QCMA', 'co.NEXP')
('-d', 'AA', 'cocap.QCMA', 'co.NEXP') => ('-d', 'EA', 'cocap.QCMA', 'co.NEXP')
('-d', 'AA', 'cocap.QCMA', 'cocap.NEXP') => ('-d', 'T', 'cocap.QCMA', 'cocap.NEXP')
('-d', 'AA', 'cocap.QCMA', 'cocap.NEXP') => ('-d', 'EA', 'cocap.QCMA', 'cocap.NEXP')
('-d', 'A', 'cocap.QAM', 'R') => ('-d', 'R', 'cocap.QAM', 'R')
('-d', 'A', 'cocap.QAM', 'R') => ('-d', 'AA', 'cocap.QAM', 'R')
('-d', 'A', 'cocap.QAM', 'RE') => ('-d', 'R', 'cocap.QAM', 'RE')
('-d', 'A', 'cocap.QAM', 'RE') => ('-d', 'AA', 'cocap.QAM', 'RE')
('-d', 'A', 'cocap.QAM', 'co.RE') => ('-d', 'R', 'cocap.QAM', 'co.RE')
('-d', 'A', 'cocap.QAM', 'co.RE') => ('-d', 'AA', 'cocap.QAM', 'co.RE')
('-d', 'A', 'cocap.QMA', 'co.RE') => ('-d', 'R', 'cocap.QMA', 'co.RE')
('-d', 'A', 'cocap.QMA', 'co.RE') => ('-d', 'AA', 'cocap.QMA', 'co.RE')
('-d', 'A', 'cocap.QMA', 'RE') => ('-d', 'R', 'cocap.QMA', 'RE')
('-d', 'A', 'cocap.QMA', 'RE') => ('-d', 'AA', 'cocap.QMA', 'RE')
('-d', 'A', 'cocap.QMA', 'R') => ('-d', 'R', 'cocap.QMA', 'R')
('-d', 'A', 'cocap.QMA', 'R') => ('-d', 'AA', 'cocap.QMA', 'R')
('-d', 'AA', 'cocap.QMA', 'R') => ('-d', 'T', 'cocap.QMA', 'R')
('-d', 'AA', 'cocap.QMA', 'R') => ('-d', 'EA', 'cocap.QMA', 'R')
('-d', 'AA', 'cocap.QMA', 'RE') => ('-d', 'T', 'cocap.QMA', 'RE')
('-d', 'AA', 'cocap.QMA', 'RE') => ('-d', 'EA', 'cocap.QMA', 'RE')
('-d', 'AA', 'cocap.QMA', 'co.RE') => ('-d', 'T', 'cocap.QMA', 'co.RE')
('-d', 'AA', 'cocap.QMA', 'co.RE') => ('-d', 'EA', 'cocap.QMA', 'co.RE')
('-d', 'AA', 'cocap.QAM', 'co.RE') => ('-d', 'T', 'cocap.QAM', 'co.RE')
('-d', 'AA', 'cocap.QAM', 'co.RE') => ('-d', 'EA', 'cocap.QAM', 'co.RE')
('-d', 'AA', 'cocap.QAM', 'RE') => ('-d', 'T', 'cocap.QAM', 'RE')
('-d', 'AA', 'cocap.QAM', 'RE') => ('-d', 'EA', 'cocap.QAM', 'RE')
('-d', 'AA', 'cocap.QAM', 'R') => ('-d', 'T', 'cocap.QAM', 'R')
('-d', 'AA', 'cocap.QAM', 'R') => ('-d', 'EA', 'cocap.QAM', 'R')
('-d', 'A', 'cocap.QAM', 'NEXP/poly') => ('-d', 'R', 'cocap.QAM', 'NEXP/poly')
('-d', 'A', 'cocap.QAM', 'NEXP/poly') => ('-d', 'AA', 'cocap.QAM', 'NEXP/poly')
('-d', 'A', 'cocap.QMA', 'NEXP/poly') => ('-d', 'R', 'cocap.QMA', 'NEXP/poly')
('-d', 'A', 'cocap.QMA', 'NEXP/poly') => ('-d', 'AA', 'cocap.QMA', 'NEXP/poly')
('-d', 'AA', 'cocap.QMA', 'NEXP/poly') => ('-d', 'T', 'cocap.QMA', 'NEXP/poly')
('-d', 'AA', 'cocap.QMA', 'NEXP/poly') => ('-d', 'EA', 'cocap.QMA', 'NEXP/poly')
('-d', 'AA', 'cocap.QAM', 'NEXP/poly') => ('-d', 'T', 'cocap.QAM', 'NEXP/poly')
('-d', 'AA', 'cocap.QAM', 'NEXP/poly') => ('-d', 'EA', 'cocap.QAM', 'NEXP/poly')
('-d', 'A', 'cocap.QMA', 'cocap.NEXP') => ('-d', 'R', 'cocap.QMA', 'cocap.NEXP')
('-d', 'A', 'cocap.QMA', 'cocap.NEXP') => ('-d', 'AA', 'cocap.QMA', 'cocap.NEXP')
('-d', 'A', 'cocap.QMA', 'co.NEXP') => ('-d', 'R', 'cocap.QMA', 'co.NEXP')
('-d', 'A', 'cocap.QMA', 'co.NEXP') => ('-d', 'AA', 'cocap.QMA', 'co.NEXP')
('-d', 'A', 'cocap.QMA', 'NEXP') => ('-d', 'R', 'cocap.QMA', 'NEXP')
('-d', 'A', 'cocap.QMA', 'NEXP') => ('-d', 'AA', 'cocap.QMA', 'NEXP')
('-d', 'AA', 'cocap.QMA', 'NEXP') => ('-d', 'T', 'cocap.QMA', 'NEXP')
('-d', 'AA', 'cocap.QMA', 'NEXP') => ('-d', 'EA', 'cocap.QMA', 'NEXP')
('-d', 'AA', 'cocap.QMA', 'co.NEXP') => ('-d', 'T', 'cocap.QMA', 'co.NEXP')
('-d', 'AA', 'cocap.QMA', 'co.NEXP') => ('-d', 'EA', 'cocap.QMA', 'co.NEXP')
('-d', 'AA', 'cocap.QMA', 'cocap.NEXP') => ('-d', 'T', 'cocap.QMA', 'cocap.NEXP')
('-d', 'AA', 'cocap.QMA', 'cocap.NEXP') => ('-d', 'EA', 'cocap.QMA', 'cocap.NEXP')
('-d', 'AA', 'cocap.QAM', 'cocap.NEXP') => ('-d', 'T', 'cocap.QAM', 'cocap.NEXP')
('-d', 'AA', 'cocap.QAM', 'cocap.NEXP') => ('-d', 'EA', 'cocap.QAM', 'cocap.NEXP')
('-d', 'AA', 'cocap.QAM', 'co.NEXP') => ('-d', 'T', 'cocap.QAM', 'co.NEXP')
('-d', 'AA', 'cocap.QAM', 'co.NEXP') => ('-d', 'EA', 'cocap.QAM', 'co.NEXP')
('-d', 'AA', 'cocap.QAM', 'NEXP') => ('-d', 'T', 'cocap.QAM', 'NEXP')
('-d', 'AA', 'cocap.QAM', 'NEXP') => ('-d', 'EA', 'cocap.QAM', 'NEXP')
('p', 'A', 'cocap.QAM', 'co.NEXP') => ('p', 'R', 'cocap.QAM', 'co.NEXP')
('p', 'A', 'cocap.QAM', 'co.NEXP') => ('p', 'AA', 'cocap.QAM', 'co.NEXP')
('p', 'A', 'cocap.QAM', 'NEXP') => ('p', 'R', 'cocap.QAM', 'NEXP')
('p', 'A', 'cocap.QAM', 'NEXP') => ('p', 'AA', 'cocap.QAM', 'NEXP')
('p', 'A', 'cocap.QAM', 'cocap.NEXP') => ('p', 'R', 'cocap.QAM', 'cocap.NEXP')
('p', 'A', 'cocap.QAM', 'cocap.NEXP') => ('p', 'AA', 'cocap.QAM', 'cocap.NEXP')
('p', 'A', 'cocap.QCMA', 'cocap.NEXP') => ('p', 'R', 'cocap.QCMA', 'cocap.NEXP')
('p', 'A', 'cocap.QCMA', 'cocap.NEXP') => ('p', 'AA', 'cocap.QCMA', 'cocap.NEXP')
('p', 'A', 'cocap.QCMA', 'co.NEXP') => ('p', 'R', 'cocap.QCMA', 'co.NEXP')
('p', 'A', 'cocap.QCMA', 'co.NEXP') => ('p', 'AA', 'cocap.QCMA', 'co.NEXP')
('p', 'A', 'cocap.QCMA', 'NEXP') => ('p', 'R', 'cocap.QCMA', 'NEXP')
('p', 'A', 'cocap.QCMA', 'NEXP') => ('p', 'AA', 'cocap.QCMA', 'NEXP')
('p', 'A', 'cocap.QCMA', 'R') => ('p', 'R', 'cocap.QCMA', 'R')
('p', 'A', 'cocap.QCMA', 'R') => ('p', 'AA', 'cocap.QCMA', 'R')
('p', 'A', 'cocap.QCMA', 'RE') => ('p', 'R', 'cocap.QCMA', 'RE')
('p', 'A', 'cocap.QCMA', 'RE') => ('p', 'AA', 'cocap.QCMA', 'RE')
('p', 'A', 'cocap.QCMA', 'co.RE') => ('p', 'R', 'cocap.QCMA', 'co.RE')
('p', 'A', 'cocap.QCMA', 'co.RE') => ('p', 'AA', 'cocap.QCMA', 'co.RE')
('p', 'AA', 'cocap.QCMA', 'co.RE') => ('p', 'T', 'cocap.QCMA', 'co.RE')
('p', 'AA', 'cocap.QCMA', 'co.RE') => ('p', 'EA', 'cocap.QCMA', 'co.RE')
('p', 'AA', 'cocap.QCMA', 'RE') => ('p', 'T', 'cocap.QCMA', 'RE')
('p', 'AA', 'cocap.QCMA', 'RE') => ('p', 'EA', 'cocap.QCMA', 'RE')
('p', 'AA', 'cocap.QCMA', 'R') => ('p', 'T', 'cocap.QCMA', 'R')
('p', 'AA', 'cocap.QCMA', 'R') => ('p', 'EA', 'cocap.QCMA', 'R')
('p', 'A', 'cocap.QCMA', 'NEXP/poly') => ('p', 'R', 'cocap.QCMA', 'NEXP/poly')
('p', 'A', 'cocap.QCMA', 'NEXP/poly') => ('p', 'AA', 'cocap.QCMA', 'NEXP/poly')
('p', 'AA', 'cocap.QCMA', 'NEXP/poly') => ('p', 'T', 'cocap.QCMA', 'NEXP/poly')
('p', 'AA', 'cocap.QCMA', 'NEXP/poly') => ('p', 'EA', 'cocap.QCMA', 'NEXP/poly')
('p', 'AA', 'cocap.QCMA', 'NEXP') => ('p', 'T', 'cocap.QCMA', 'NEXP')
('p', 'AA', 'cocap.QCMA', 'NEXP') => ('p', 'EA', 'cocap.QCMA', 'NEXP')
('p', 'AA', 'cocap.QCMA', 'co.NEXP') => ('p', 'T', 'cocap.QCMA', 'co.NEXP')
('p', 'AA', 'cocap.QCMA', 'co.NEXP') => ('p', 'EA', 'cocap.QCMA', 'co.NEXP')
('p', 'AA', 'cocap.QCMA', 'cocap.NEXP') => ('p', 'T', 'cocap.QCMA', 'cocap.NEXP')
('p', 'AA', 'cocap.QCMA', 'cocap.NEXP') => ('p', 'EA', 'cocap.QCMA', 'cocap.NEXP')
('p', 'A', 'cocap.QAM', 'R') => ('p', 'R', 'cocap.QAM', 'R')
('p', 'A', 'cocap.QAM', 'R') => ('p', 'AA', 'cocap.QAM', 'R')
('p', 'A', 'cocap.QAM', 'RE') => ('p', 'R', 'cocap.QAM', 'RE')
('p', 'A', 'cocap.QAM', 'RE') => ('p', 'AA', 'cocap.QAM', 'RE')
('p', 'A', 'cocap.QAM', 'co.RE') => ('p', 'R', 'cocap.QAM', 'co.RE')
('p', 'A', 'cocap.QAM', 'co.RE') => ('p', 'AA', 'cocap.QAM', 'co.RE')
('p', 'A', 'cocap.QMA', 'co.RE') => ('p', 'R', 'cocap.QMA', 'co.RE')
('p', 'A', 'cocap.QMA', 'co.RE') => ('p', 'AA', 'cocap.QMA', 'co.RE')
('p', 'A', 'cocap.QMA', 'RE') => ('p', 'R', 'cocap.QMA', 'RE')
('p', 'A', 'cocap.QMA', 'RE') => ('p', 'AA', 'cocap.QMA', 'RE')
('p', 'A', 'cocap.QMA', 'R') => ('p', 'R', 'cocap.QMA', 'R')
('p', 'A', 'cocap.QMA', 'R') => ('p', 'AA', 'cocap.QMA', 'R')
('p', 'AA', 'cocap.QMA', 'R') => ('p', 'T', 'cocap.QMA', 'R')
('p', 'AA', 'cocap.QMA', 'R') => ('p', 'EA', 'cocap.QMA', 'R')
('p', 'AA', 'cocap.QMA', 'RE') => ('p', 'T', 'cocap.QMA', 'RE')
('p', 'AA', 'cocap.QMA', 'RE') => ('p', 'EA', 'cocap.QMA', 'RE')
('p', 'AA', 'cocap.QMA', 'co.RE') => ('p', 'T', 'cocap.QMA', 'co.RE')
('p', 'AA', 'cocap.QMA', 'co.RE') => ('p', 'EA', 'cocap.QMA', 'co.RE')
('p', 'AA', 'cocap.QAM', 'co.RE') => ('p', 'T', 'cocap.QAM', 'co.RE')
('p', 'AA', 'cocap.QAM', 'co.RE') => ('p', 'EA', 'cocap.QAM', 'co.RE')
('p', 'AA', 'cocap.QAM', 'RE') => ('p', 'T', 'cocap.QAM', 'RE')
('p', 'AA', 'cocap.QAM', 'RE') => ('p', 'EA', 'cocap.QAM', 'RE')
('p', 'AA', 'cocap.QAM', 'R') => ('p', 'T', 'cocap.QAM', 'R')
('p', 'AA', 'cocap.QAM', 'R') => ('p', 'EA', 'cocap.QAM', 'R')
('p', 'A', 'cocap.QAM', 'NEXP/poly') => ('p', 'R', 'cocap.QAM', 'NEXP/poly')
('p', 'A', 'cocap.QAM', 'NEXP/poly') => ('p', 'AA', 'cocap.QAM', 'NEXP/poly')
('p', 'A', 'cocap.QMA', 'NEXP/poly') => ('p', 'R', 'cocap.QMA', 'NEXP/poly')
('p', 'A', 'cocap.QMA', 'NEXP/poly') => ('p', 'AA', 'cocap.QMA', 'NEXP/poly')
('p', 'AA', 'cocap.QMA', 'NEXP/poly') => ('p', 'T', 'cocap.QMA', 'NEXP/poly')
('p', 'AA', 'cocap.QMA', 'NEXP/poly') => ('p', 'EA', 'cocap.QMA', 'NEXP/poly')
('p', 'AA', 'cocap.QAM', 'NEXP/poly') => ('p', 'T', 'cocap.QAM', 'NEXP/poly')
('p', 'AA', 'cocap.QAM', 'NEXP/poly') => ('p', 'EA', 'cocap.QAM', 'NEXP/poly')
('p', 'A', 'cocap.QMA', 'cocap.NEXP') => ('p', 'R', 'cocap.QMA', 'cocap.NEXP')
('p', 'A', 'cocap.QMA', 'cocap.NEXP') => ('p', 'AA', 'cocap.QMA', 'cocap.NEXP')
('p', 'A', 'cocap.QMA', 'co.NEXP') => ('p', 'R', 'cocap.QMA', 'co.NEXP')
('p', 'A', 'cocap.QMA', 'co.NEXP') => ('p', 'AA', 'cocap.QMA', 'co.NEXP')
('p', 'A', 'cocap.QMA', 'NEXP') => ('p', 'R', 'cocap.QMA', 'NEXP')
('p', 'A', 'cocap.QMA', 'NEXP') => ('p', 'AA', 'cocap.QMA', 'NEXP')
('p', 'AA', 'cocap.QMA', 'NEXP') => ('p', 'T', 'cocap.QMA', 'NEXP')
('p', 'AA', 'cocap.QMA', 'NEXP') => ('p', 'EA', 'cocap.QMA', 'NEXP')
('p', 'AA', 'cocap.QMA', 'co.NEXP') => ('p', 'T', 'cocap.QMA', 'co.NEXP')
('p', 'AA', 'cocap.QMA', 'co.NEXP') => ('p', 'EA', 'cocap.QMA', 'co.NEXP')
('p', 'AA', 'cocap.QMA', 'cocap.NEXP') => ('p', 'T', 'cocap.QMA', 'cocap.NEXP')
('p', 'AA', 'cocap.QMA', 'cocap.NEXP') => ('p', 'EA', 'cocap.QMA', 'cocap.NEXP')
('p', 'AA', 'cocap.QAM', 'cocap.NEXP') => ('p', 'T', 'cocap.QAM', 'cocap.NEXP')
('p', 'AA', 'cocap.QAM', 'cocap.NEXP') => ('p', 'EA', 'cocap.QAM', 'cocap.NEXP')
('p', 'AA', 'cocap.QAM', 'co.NEXP') => ('p', 'T', 'cocap.QAM', 'co.NEXP')
('p', 'AA', 'cocap.QAM', 'co.NEXP') => ('p', 'EA', 'cocap.QAM', 'co.NEXP')
('p', 'AA', 'cocap.QAM', 'NEXP') => ('p', 'T', 'cocap.QAM', 'NEXP')
('p', 'AA', 'cocap.QAM', 'NEXP') => ('p', 'EA', 'cocap.QAM', 'NEXP')
('-d', 'A', 'cocap.QAM', 'QIP') => ('-d', 'R', 'cocap.QAM', 'QIP')
('-d', 'A', 'cocap.QAM', 'QIP') => ('-d', 'AA', 'cocap.QAM', 'QIP')
('-d', 'A', 'cocap.QAM', 'co.QIP') => ('-d', 'R', 'cocap.QAM', 'co.QIP')
('-d', 'A', 'cocap.QAM', 'co.QIP') => ('-d', 'AA', 'cocap.QAM', 'co.QIP')
('-d', 'A', 'cocap.QAM', 'cocap.QIP') => ('-d', 'R', 'cocap.QAM', 'cocap.QIP')
('-d', 'A', 'cocap.QAM', 'cocap.QIP') => ('-d', 'AA', 'cocap.QAM', 'cocap.QIP')
('-d', 'A', 'cocap.QCMA', 'cocap.QIP') => ('-d', 'R', 'cocap.QCMA', 'cocap.QIP')
('-d', 'A', 'cocap.QCMA', 'cocap.QIP') => ('-d', 'AA', 'cocap.QCMA', 'cocap.QIP')
('-d', 'A', 'cocap.QCMA', 'QIP') => ('-d', 'R', 'cocap.QCMA', 'QIP')
('-d', 'A', 'cocap.QCMA', 'QIP') => ('-d', 'AA', 'cocap.QCMA', 'QIP')
('-d', 'A', 'cocap.QCMA', 'co.QIP') => ('-d', 'R', 'cocap.QCMA', 'co.QIP')
('-d', 'A', 'cocap.QCMA', 'co.QIP') => ('-d', 'AA', 'cocap.QCMA', 'co.QIP')
('-d', 'A', 'cocap.QCMA', 'co.QMIP_ne') => ('-d', 'R', 'cocap.QCMA', 'co.QMIP_ne')
('-d', 'A', 'cocap.QCMA', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.QCMA', 'co.QMIP_ne')
('-d', 'A', 'cocap.QCMA', 'QMIP_ne') => ('-d', 'R', 'cocap.QCMA', 'QMIP_ne')
('-d', 'A', 'cocap.QCMA', 'QMIP_ne') => ('-d', 'AA', 'cocap.QCMA', 'QMIP_ne')
('-d', 'A', 'cocap.QCMA', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.QCMA', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QCMA', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.QCMA', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.QCMA', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.QCMA', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QCMA', 'QMIP_ne') => ('-d', 'T', 'cocap.QCMA', 'QMIP_ne')
('-d', 'AA', 'cocap.QCMA', 'QMIP_ne') => ('-d', 'EA', 'cocap.QCMA', 'QMIP_ne')
('-d', 'AA', 'cocap.QCMA', 'co.QMIP_ne') => ('-d', 'T', 'cocap.QCMA', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QCMA', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.QCMA', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QCMA', 'co.QIP') => ('-d', 'T', 'cocap.QCMA', 'co.QIP')
('-d', 'AA', 'cocap.QCMA', 'co.QIP') => ('-d', 'EA', 'cocap.QCMA', 'co.QIP')
('-d', 'AA', 'cocap.QCMA', 'QIP') => ('-d', 'T', 'cocap.QCMA', 'QIP')
('-d', 'AA', 'cocap.QCMA', 'QIP') => ('-d', 'EA', 'cocap.QCMA', 'QIP')
('-d', 'AA', 'cocap.QCMA', 'cocap.QIP') => ('-d', 'T', 'cocap.QCMA', 'cocap.QIP')
('-d', 'AA', 'cocap.QCMA', 'cocap.QIP') => ('-d', 'EA', 'cocap.QCMA', 'cocap.QIP')
('-d', 'A', 'cocap.QAM', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.QAM', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QAM', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.QAM', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QAM', 'QMIP_ne') => ('-d', 'R', 'cocap.QAM', 'QMIP_ne')
('-d', 'A', 'cocap.QAM', 'QMIP_ne') => ('-d', 'AA', 'cocap.QAM', 'QMIP_ne')
('-d', 'A', 'cocap.QAM', 'co.QMIP_ne') => ('-d', 'R', 'cocap.QAM', 'co.QMIP_ne')
('-d', 'A', 'cocap.QAM', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.QAM', 'co.QMIP_ne')
('-d', 'A', 'cocap.QMA', 'co.QMIP_ne') => ('-d', 'R', 'cocap.QMA', 'co.QMIP_ne')
('-d', 'A', 'cocap.QMA', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.QMA', 'co.QMIP_ne')
('-d', 'A', 'cocap.QMA', 'QMIP_ne') => ('-d', 'R', 'cocap.QMA', 'QMIP_ne')
('-d', 'A', 'cocap.QMA', 'QMIP_ne') => ('-d', 'AA', 'cocap.QMA', 'QMIP_ne')
('-d', 'A', 'cocap.QMA', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.QMA', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QMA', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.QMA', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QMA', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.QMA', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QMA', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.QMA', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QMA', 'QMIP_ne') => ('-d', 'T', 'cocap.QMA', 'QMIP_ne')
('-d', 'AA', 'cocap.QMA', 'QMIP_ne') => ('-d', 'EA', 'cocap.QMA', 'QMIP_ne')
('-d', 'AA', 'cocap.QMA', 'co.QMIP_ne') => ('-d', 'T', 'cocap.QMA', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QMA', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.QMA', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QAM', 'co.QMIP_ne') => ('-d', 'T', 'cocap.QAM', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QAM', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.QAM', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QAM', 'QMIP_ne') => ('-d', 'T', 'cocap.QAM', 'QMIP_ne')
('-d', 'AA', 'cocap.QAM', 'QMIP_ne') => ('-d', 'EA', 'cocap.QAM', 'QMIP_ne')
('-d', 'AA', 'cocap.QAM', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.QAM', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QAM', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.QAM', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QMA', 'cocap.QIP') => ('-d', 'R', 'cocap.QMA', 'cocap.QIP')
('-d', 'A', 'cocap.QMA', 'cocap.QIP') => ('-d', 'AA', 'cocap.QMA', 'cocap.QIP')
('-d', 'A', 'cocap.QMA', 'QIP') => ('-d', 'R', 'cocap.QMA', 'QIP')
('-d', 'A', 'cocap.QMA', 'QIP') => ('-d', 'AA', 'cocap.QMA', 'QIP')
('-d', 'A', 'cocap.QMA', 'co.QIP') => ('-d', 'R', 'cocap.QMA', 'co.QIP')
('-d', 'A', 'cocap.QMA', 'co.QIP') => ('-d', 'AA', 'cocap.QMA', 'co.QIP')
('-d', 'AA', 'cocap.QMA', 'co.QIP') => ('-d', 'T', 'cocap.QMA', 'co.QIP')
('-d', 'AA', 'cocap.QMA', 'co.QIP') => ('-d', 'EA', 'cocap.QMA', 'co.QIP')
('-d', 'AA', 'cocap.QMA', 'QIP') => ('-d', 'T', 'cocap.QMA', 'QIP')
('-d', 'AA', 'cocap.QMA', 'QIP') => ('-d', 'EA', 'cocap.QMA', 'QIP')
('-d', 'AA', 'cocap.QMA', 'cocap.QIP') => ('-d', 'T', 'cocap.QMA', 'cocap.QIP')
('-d', 'AA', 'cocap.QMA', 'cocap.QIP') => ('-d', 'EA', 'cocap.QMA', 'cocap.QIP')
('-d', 'AA', 'cocap.QAM', 'cocap.QIP') => ('-d', 'T', 'cocap.QAM', 'cocap.QIP')
('-d', 'AA', 'cocap.QAM', 'cocap.QIP') => ('-d', 'EA', 'cocap.QAM', 'cocap.QIP')
('-d', 'AA', 'cocap.QAM', 'QIP') => ('-d', 'T', 'cocap.QAM', 'QIP')
('-d', 'AA', 'cocap.QAM', 'QIP') => ('-d', 'EA', 'cocap.QAM', 'QIP')
('-d', 'AA', 'cocap.QAM', 'co.QIP') => ('-d', 'T', 'cocap.QAM', 'co.QIP')
('-d', 'AA', 'cocap.QAM', 'co.QIP') => ('-d', 'EA', 'cocap.QAM', 'co.QIP')
('p', 'A', 'cocap.QAM', 'QIP') => ('p', 'R', 'cocap.QAM', 'QIP')
('p', 'A', 'cocap.QAM', 'QIP') => ('p', 'AA', 'cocap.QAM', 'QIP')
('p', 'A', 'cocap.QAM', 'co.QIP') => ('p', 'R', 'cocap.QAM', 'co.QIP')
('p', 'A', 'cocap.QAM', 'co.QIP') => ('p', 'AA', 'cocap.QAM', 'co.QIP')
('p', 'A', 'cocap.QCMA', 'co.QIP') => ('p', 'R', 'cocap.QCMA', 'co.QIP')
('p', 'A', 'cocap.QCMA', 'co.QIP') => ('p', 'AA', 'cocap.QCMA', 'co.QIP')
('p', 'A', 'cocap.QCMA', 'QIP') => ('p', 'R', 'cocap.QCMA', 'QIP')
('p', 'A', 'cocap.QCMA', 'QIP') => ('p', 'AA', 'cocap.QCMA', 'QIP')
('p', 'A', 'cocap.QCMA', 'cocap.QIP') => ('p', 'R', 'cocap.QCMA', 'cocap.QIP')
('p', 'A', 'cocap.QCMA', 'cocap.QIP') => ('p', 'AA', 'cocap.QCMA', 'cocap.QIP')
('p', 'A', 'cocap.QCMA', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.QCMA', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QCMA', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.QCMA', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QCMA', 'QMIP_ne') => ('p', 'R', 'cocap.QCMA', 'QMIP_ne')
('p', 'A', 'cocap.QCMA', 'QMIP_ne') => ('p', 'AA', 'cocap.QCMA', 'QMIP_ne')
('p', 'A', 'cocap.QCMA', 'co.QMIP_ne') => ('p', 'R', 'cocap.QCMA', 'co.QMIP_ne')
('p', 'A', 'cocap.QCMA', 'co.QMIP_ne') => ('p', 'AA', 'cocap.QCMA', 'co.QMIP_ne')
('p', 'AA', 'cocap.QCMA', 'co.QMIP_ne') => ('p', 'T', 'cocap.QCMA', 'co.QMIP_ne')
('p', 'AA', 'cocap.QCMA', 'co.QMIP_ne') => ('p', 'EA', 'cocap.QCMA', 'co.QMIP_ne')
('p', 'AA', 'cocap.QCMA', 'QMIP_ne') => ('p', 'T', 'cocap.QCMA', 'QMIP_ne')
('p', 'AA', 'cocap.QCMA', 'QMIP_ne') => ('p', 'EA', 'cocap.QCMA', 'QMIP_ne')
('p', 'AA', 'cocap.QCMA', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.QCMA', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QCMA', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.QCMA', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QCMA', 'cocap.QIP') => ('p', 'T', 'cocap.QCMA', 'cocap.QIP')
('p', 'AA', 'cocap.QCMA', 'cocap.QIP') => ('p', 'EA', 'cocap.QCMA', 'cocap.QIP')
('p', 'AA', 'cocap.QCMA', 'QIP') => ('p', 'T', 'cocap.QCMA', 'QIP')
('p', 'AA', 'cocap.QCMA', 'QIP') => ('p', 'EA', 'cocap.QCMA', 'QIP')
('p', 'AA', 'cocap.QCMA', 'co.QIP') => ('p', 'T', 'cocap.QCMA', 'co.QIP')
('p', 'AA', 'cocap.QCMA', 'co.QIP') => ('p', 'EA', 'cocap.QCMA', 'co.QIP')
('p', 'A', 'cocap.QAM', 'co.QMIP_ne') => ('p', 'R', 'cocap.QAM', 'co.QMIP_ne')
('p', 'A', 'cocap.QAM', 'co.QMIP_ne') => ('p', 'AA', 'cocap.QAM', 'co.QMIP_ne')
('p', 'A', 'cocap.QAM', 'QMIP_ne') => ('p', 'R', 'cocap.QAM', 'QMIP_ne')
('p', 'A', 'cocap.QAM', 'QMIP_ne') => ('p', 'AA', 'cocap.QAM', 'QMIP_ne')
('p', 'A', 'cocap.QAM', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.QAM', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QAM', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.QAM', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QMA', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.QMA', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QMA', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.QMA', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QMA', 'QMIP_ne') => ('p', 'R', 'cocap.QMA', 'QMIP_ne')
('p', 'A', 'cocap.QMA', 'QMIP_ne') => ('p', 'AA', 'cocap.QMA', 'QMIP_ne')
('p', 'A', 'cocap.QMA', 'co.QMIP_ne') => ('p', 'R', 'cocap.QMA', 'co.QMIP_ne')
('p', 'A', 'cocap.QMA', 'co.QMIP_ne') => ('p', 'AA', 'cocap.QMA', 'co.QMIP_ne')
('p', 'AA', 'cocap.QMA', 'co.QMIP_ne') => ('p', 'T', 'cocap.QMA', 'co.QMIP_ne')
('p', 'AA', 'cocap.QMA', 'co.QMIP_ne') => ('p', 'EA', 'cocap.QMA', 'co.QMIP_ne')
('p', 'AA', 'cocap.QMA', 'QMIP_ne') => ('p', 'T', 'cocap.QMA', 'QMIP_ne')
('p', 'AA', 'cocap.QMA', 'QMIP_ne') => ('p', 'EA', 'cocap.QMA', 'QMIP_ne')
('p', 'AA', 'cocap.QMA', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.QMA', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QMA', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.QMA', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QAM', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.QAM', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QAM', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.QAM', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QAM', 'QMIP_ne') => ('p', 'T', 'cocap.QAM', 'QMIP_ne')
('p', 'AA', 'cocap.QAM', 'QMIP_ne') => ('p', 'EA', 'cocap.QAM', 'QMIP_ne')
('p', 'AA', 'cocap.QAM', 'co.QMIP_ne') => ('p', 'T', 'cocap.QAM', 'co.QMIP_ne')
('p', 'AA', 'cocap.QAM', 'co.QMIP_ne') => ('p', 'EA', 'cocap.QAM', 'co.QMIP_ne')
('p', 'A', 'cocap.QMA', 'co.QIP') => ('p', 'R', 'cocap.QMA', 'co.QIP')
('p', 'A', 'cocap.QMA', 'co.QIP') => ('p', 'AA', 'cocap.QMA', 'co.QIP')
('p', 'A', 'cocap.QMA', 'QIP') => ('p', 'R', 'cocap.QMA', 'QIP')
('p', 'A', 'cocap.QMA', 'QIP') => ('p', 'AA', 'cocap.QMA', 'QIP')
('p', 'A', 'cocap.QMA', 'cocap.QIP') => ('p', 'R', 'cocap.QMA', 'cocap.QIP')
('p', 'A', 'cocap.QMA', 'cocap.QIP') => ('p', 'AA', 'cocap.QMA', 'cocap.QIP')
('p', 'AA', 'cocap.QMA', 'cocap.QIP') => ('p', 'T', 'cocap.QMA', 'cocap.QIP')
('p', 'AA', 'cocap.QMA', 'cocap.QIP') => ('p', 'EA', 'cocap.QMA', 'cocap.QIP')
('p', 'AA', 'cocap.QMA', 'QIP') => ('p', 'T', 'cocap.QMA', 'QIP')
('p', 'AA', 'cocap.QMA', 'QIP') => ('p', 'EA', 'cocap.QMA', 'QIP')
('p', 'AA', 'cocap.QMA', 'co.QIP') => ('p', 'T', 'cocap.QMA', 'co.QIP')
('p', 'AA', 'cocap.QMA', 'co.QIP') => ('p', 'EA', 'cocap.QMA', 'co.QIP')
('p', 'AA', 'cocap.QAM', 'co.QIP') => ('p', 'T', 'cocap.QAM', 'co.QIP')
('p', 'AA', 'cocap.QAM', 'co.QIP') => ('p', 'EA', 'cocap.QAM', 'co.QIP')
('p', 'AA', 'cocap.QAM', 'QIP') => ('p', 'T', 'cocap.QAM', 'QIP')
('p', 'AA', 'cocap.QAM', 'QIP') => ('p', 'EA', 'cocap.QAM', 'QIP')
('p', 'AA', 'cocap.QAM', 'cocap.QIP') => ('p', 'T', 'cocap.QAM', 'cocap.QIP')
('p', 'AA', 'cocap.QAM', 'cocap.QIP') => ('p', 'EA', 'cocap.QAM', 'cocap.QIP')
('-d', 'A', 'co.QAM', 'ALL') => ('-d', 'R', 'co.QAM', 'ALL')
('-d', 'A', 'co.QAM', 'ALL') => ('-d', 'AA', 'co.QAM', 'ALL')
('-d', 'A', 'QAM', 'ALL') => ('-d', 'R', 'QAM', 'ALL')
('-d', 'A', 'QAM', 'ALL') => ('-d', 'AA', 'QAM', 'ALL')
('-d', 'A', 'QMA', 'ALL') => ('-d', 'R', 'QMA', 'ALL')
('-d', 'A', 'QMA', 'ALL') => ('-d', 'AA', 'QMA', 'ALL')
('-d', 'A', 'co.QMA', 'ALL') => ('-d', 'R', 'co.QMA', 'ALL')
('-d', 'A', 'co.QMA', 'ALL') => ('-d', 'AA', 'co.QMA', 'ALL')
('-d', 'A', 'co.QCMA', 'ALL') => ('-d', 'R', 'co.QCMA', 'ALL')
('-d', 'A', 'co.QCMA', 'ALL') => ('-d', 'AA', 'co.QCMA', 'ALL')
('-d', 'A', 'QCMA', 'ALL') => ('-d', 'R', 'QCMA', 'ALL')
('-d', 'A', 'QCMA', 'ALL') => ('-d', 'AA', 'QCMA', 'ALL')
('-d', 'AA', 'QCMA', 'ALL') => ('-d', 'T', 'QCMA', 'ALL')
('-d', 'AA', 'QCMA', 'ALL') => ('-d', 'EA', 'QCMA', 'ALL')
('-d', 'AA', 'co.QCMA', 'ALL') => ('-d', 'T', 'co.QCMA', 'ALL')
('-d', 'AA', 'co.QCMA', 'ALL') => ('-d', 'EA', 'co.QCMA', 'ALL')
('-d', 'AA', 'co.QMA', 'ALL') => ('-d', 'T', 'co.QMA', 'ALL')
('-d', 'AA', 'co.QMA', 'ALL') => ('-d', 'EA', 'co.QMA', 'ALL')
('-d', 'AA', 'QMA', 'ALL') => ('-d', 'T', 'QMA', 'ALL')
('-d', 'AA', 'QMA', 'ALL') => ('-d', 'EA', 'QMA', 'ALL')
('-d', 'AA', 'QAM', 'ALL') => ('-d', 'T', 'QAM', 'ALL')
('-d', 'AA', 'QAM', 'ALL') => ('-d', 'EA', 'QAM', 'ALL')
('-d', 'AA', 'co.QAM', 'ALL') => ('-d', 'T', 'co.QAM', 'ALL')
('-d', 'AA', 'co.QAM', 'ALL') => ('-d', 'EA', 'co.QAM', 'ALL')
('p', 'A', 'co.QAM', 'ALL') => ('p', 'R', 'co.QAM', 'ALL')
('p', 'A', 'co.QAM', 'ALL') => ('p', 'AA', 'co.QAM', 'ALL')
('p', 'A', 'QAM', 'ALL') => ('p', 'R', 'QAM', 'ALL')
('p', 'A', 'QAM', 'ALL') => ('p', 'AA', 'QAM', 'ALL')
('p', 'A', 'QMA', 'ALL') => ('p', 'R', 'QMA', 'ALL')
('p', 'A', 'QMA', 'ALL') => ('p', 'AA', 'QMA', 'ALL')
('p', 'A', 'co.QMA', 'ALL') => ('p', 'R', 'co.QMA', 'ALL')
('p', 'A', 'co.QMA', 'ALL') => ('p', 'AA', 'co.QMA', 'ALL')
('p', 'A', 'co.QCMA', 'ALL') => ('p', 'R', 'co.QCMA', 'ALL')
('p', 'A', 'co.QCMA', 'ALL') => ('p', 'AA', 'co.QCMA', 'ALL')
('p', 'A', 'QCMA', 'ALL') => ('p', 'R', 'QCMA', 'ALL')
('p', 'A', 'QCMA', 'ALL') => ('p', 'AA', 'QCMA', 'ALL')
('p', 'AA', 'QCMA', 'ALL') => ('p', 'T', 'QCMA', 'ALL')
('p', 'AA', 'QCMA', 'ALL') => ('p', 'EA', 'QCMA', 'ALL')
('p', 'AA', 'co.QCMA', 'ALL') => ('p', 'T', 'co.QCMA', 'ALL')
('p', 'AA', 'co.QCMA', 'ALL') => ('p', 'EA', 'co.QCMA', 'ALL')
('p', 'AA', 'co.QMA', 'ALL') => ('p', 'T', 'co.QMA', 'ALL')
('p', 'AA', 'co.QMA', 'ALL') => ('p', 'EA', 'co.QMA', 'ALL')
('p', 'AA', 'QMA', 'ALL') => ('p', 'T', 'QMA', 'ALL')
('p', 'AA', 'QMA', 'ALL') => ('p', 'EA', 'QMA', 'ALL')
('p', 'AA', 'QAM', 'ALL') => ('p', 'T', 'QAM', 'ALL')
('p', 'AA', 'QAM', 'ALL') => ('p', 'EA', 'QAM', 'ALL')
('p', 'AA', 'co.QAM', 'ALL') => ('p', 'T', 'co.QAM', 'ALL')
('p', 'AA', 'co.QAM', 'ALL') => ('p', 'EA', 'co.QAM', 'ALL')
('-d', 'A', 'co.QAM', 'co.NEXP') => ('-d', 'R', 'co.QAM', 'co.NEXP')
('-d', 'A', 'co.QAM', 'co.NEXP') => ('-d', 'AA', 'co.QAM', 'co.NEXP')
('-d', 'A', 'QAM', 'NEXP') => ('-d', 'R', 'QAM', 'NEXP')
('-d', 'A', 'QAM', 'NEXP') => ('-d', 'AA', 'QAM', 'NEXP')
('-d', 'A', 'QMA', 'NEXP') => ('-d', 'R', 'QMA', 'NEXP')
('-d', 'A', 'QMA', 'NEXP') => ('-d', 'AA', 'QMA', 'NEXP')
('-d', 'A', 'co.QMA', 'co.NEXP') => ('-d', 'R', 'co.QMA', 'co.NEXP')
('-d', 'A', 'co.QMA', 'co.NEXP') => ('-d', 'AA', 'co.QMA', 'co.NEXP')
('-d', 'A', 'co.QMA', 'R') => ('-d', 'R', 'co.QMA', 'R')
('-d', 'A', 'co.QMA', 'R') => ('-d', 'AA', 'co.QMA', 'R')
('-d', 'A', 'QMA', 'R') => ('-d', 'R', 'QMA', 'R')
('-d', 'A', 'QMA', 'R') => ('-d', 'AA', 'QMA', 'R')
('-d', 'A', 'QCMA', 'R') => ('-d', 'R', 'QCMA', 'R')
('-d', 'A', 'QCMA', 'R') => ('-d', 'AA', 'QCMA', 'R')
('-d', 'A', 'co.QCMA', 'R') => ('-d', 'R', 'co.QCMA', 'R')
('-d', 'A', 'co.QCMA', 'R') => ('-d', 'AA', 'co.QCMA', 'R')
('-d', 'A', 'co.QCMA', 'RE') => ('-d', 'R', 'co.QCMA', 'RE')
('-d', 'A', 'co.QCMA', 'RE') => ('-d', 'AA', 'co.QCMA', 'RE')
('-d', 'A', 'QCMA', 'co.RE') => ('-d', 'R', 'QCMA', 'co.RE')
('-d', 'A', 'QCMA', 'co.RE') => ('-d', 'AA', 'QCMA', 'co.RE')
('-d', 'AA', 'QCMA', 'co.RE') => ('-d', 'T', 'QCMA', 'co.RE')
('-d', 'AA', 'QCMA', 'co.RE') => ('-d', 'EA', 'QCMA', 'co.RE')
('-d', 'AA', 'co.QCMA', 'RE') => ('-d', 'T', 'co.QCMA', 'RE')
('-d', 'AA', 'co.QCMA', 'RE') => ('-d', 'EA', 'co.QCMA', 'RE')
('-d', 'A', 'co.QCMA', 'co.RE') => ('-d', 'R', 'co.QCMA', 'co.RE')
('-d', 'A', 'co.QCMA', 'co.RE') => ('-d', 'AA', 'co.QCMA', 'co.RE')
('-d', 'A', 'QCMA', 'RE') => ('-d', 'R', 'QCMA', 'RE')
('-d', 'A', 'QCMA', 'RE') => ('-d', 'AA', 'QCMA', 'RE')
('-d', 'AA', 'QCMA', 'RE') => ('-d', 'T', 'QCMA', 'RE')
('-d', 'AA', 'QCMA', 'RE') => ('-d', 'EA', 'QCMA', 'RE')
('-d', 'AA', 'co.QCMA', 'co.RE') => ('-d', 'T', 'co.QCMA', 'co.RE')
('-d', 'AA', 'co.QCMA', 'co.RE') => ('-d', 'EA', 'co.QCMA', 'co.RE')
('-d', 'AA', 'co.QCMA', 'R') => ('-d', 'T', 'co.QCMA', 'R')
('-d', 'AA', 'co.QCMA', 'R') => ('-d', 'EA', 'co.QCMA', 'R')
('-d', 'AA', 'QCMA', 'R') => ('-d', 'T', 'QCMA', 'R')
('-d', 'AA', 'QCMA', 'R') => ('-d', 'EA', 'QCMA', 'R')
('-d', 'A', 'QMA', 'RE') => ('-d', 'R', 'QMA', 'RE')
('-d', 'A', 'QMA', 'RE') => ('-d', 'AA', 'QMA', 'RE')
('-d', 'A', 'co.QMA', 'co.RE') => ('-d', 'R', 'co.QMA', 'co.RE')
('-d', 'A', 'co.QMA', 'co.RE') => ('-d', 'AA', 'co.QMA', 'co.RE')
('-d', 'AA', 'co.QMA', 'co.RE') => ('-d', 'T', 'co.QMA', 'co.RE')
('-d', 'AA', 'co.QMA', 'co.RE') => ('-d', 'EA', 'co.QMA', 'co.RE')
('-d', 'AA', 'QMA', 'RE') => ('-d', 'T', 'QMA', 'RE')
('-d', 'AA', 'QMA', 'RE') => ('-d', 'EA', 'QMA', 'RE')
('-d', 'A', 'QMA', 'co.RE') => ('-d', 'R', 'QMA', 'co.RE')
('-d', 'A', 'QMA', 'co.RE') => ('-d', 'AA', 'QMA', 'co.RE')
('-d', 'A', 'co.QMA', 'RE') => ('-d', 'R', 'co.QMA', 'RE')
('-d', 'A', 'co.QMA', 'RE') => ('-d', 'AA', 'co.QMA', 'RE')
('-d', 'AA', 'co.QMA', 'RE') => ('-d', 'T', 'co.QMA', 'RE')
('-d', 'AA', 'co.QMA', 'RE') => ('-d', 'EA', 'co.QMA', 'RE')
('-d', 'AA', 'QMA', 'co.RE') => ('-d', 'T', 'QMA', 'co.RE')
('-d', 'AA', 'QMA', 'co.RE') => ('-d', 'EA', 'QMA', 'co.RE')
('-d', 'AA', 'QMA', 'R') => ('-d', 'T', 'QMA', 'R')
('-d', 'AA', 'QMA', 'R') => ('-d', 'EA', 'QMA', 'R')
('-d', 'AA', 'co.QMA', 'R') => ('-d', 'T', 'co.QMA', 'R')
('-d', 'AA', 'co.QMA', 'R') => ('-d', 'EA', 'co.QMA', 'R')
('-d', 'A', 'co.QMA', 'NEXP/poly') => ('-d', 'R', 'co.QMA', 'NEXP/poly')
('-d', 'A', 'co.QMA', 'NEXP/poly') => ('-d', 'AA', 'co.QMA', 'NEXP/poly')
('-d', 'A', 'QMA', 'NEXP/poly') => ('-d', 'R', 'QMA', 'NEXP/poly')
('-d', 'A', 'QMA', 'NEXP/poly') => ('-d', 'AA', 'QMA', 'NEXP/poly')
('-d', 'A', 'QCMA', 'NEXP/poly') => ('-d', 'R', 'QCMA', 'NEXP/poly')
('-d', 'A', 'QCMA', 'NEXP/poly') => ('-d', 'AA', 'QCMA', 'NEXP/poly')
('-d', 'A', 'co.QCMA', 'NEXP/poly') => ('-d', 'R', 'co.QCMA', 'NEXP/poly')
('-d', 'A', 'co.QCMA', 'NEXP/poly') => ('-d', 'AA', 'co.QCMA', 'NEXP/poly')
('-d', 'AA', 'co.QCMA', 'NEXP/poly') => ('-d', 'T', 'co.QCMA', 'NEXP/poly')
('-d', 'AA', 'co.QCMA', 'NEXP/poly') => ('-d', 'EA', 'co.QCMA', 'NEXP/poly')
('-d', 'AA', 'QCMA', 'NEXP/poly') => ('-d', 'T', 'QCMA', 'NEXP/poly')
('-d', 'AA', 'QCMA', 'NEXP/poly') => ('-d', 'EA', 'QCMA', 'NEXP/poly')
('-d', 'AA', 'QMA', 'NEXP/poly') => ('-d', 'T', 'QMA', 'NEXP/poly')
('-d', 'AA', 'QMA', 'NEXP/poly') => ('-d', 'EA', 'QMA', 'NEXP/poly')
('-d', 'AA', 'co.QMA', 'NEXP/poly') => ('-d', 'T', 'co.QMA', 'NEXP/poly')
('-d', 'AA', 'co.QMA', 'NEXP/poly') => ('-d', 'EA', 'co.QMA', 'NEXP/poly')
('-d', 'A', 'co.QCMA', 'co.NEXP') => ('-d', 'R', 'co.QCMA', 'co.NEXP')
('-d', 'A', 'co.QCMA', 'co.NEXP') => ('-d', 'AA', 'co.QCMA', 'co.NEXP')
('-d', 'A', 'QCMA', 'NEXP') => ('-d', 'R', 'QCMA', 'NEXP')
('-d', 'A', 'QCMA', 'NEXP') => ('-d', 'AA', 'QCMA', 'NEXP')
('-d', 'AA', 'QCMA', 'NEXP') => ('-d', 'T', 'QCMA', 'NEXP')
('-d', 'AA', 'QCMA', 'NEXP') => ('-d', 'EA', 'QCMA', 'NEXP')
('-d', 'AA', 'co.QCMA', 'co.NEXP') => ('-d', 'T', 'co.QCMA', 'co.NEXP')
('-d', 'AA', 'co.QCMA', 'co.NEXP') => ('-d', 'EA', 'co.QCMA', 'co.NEXP')
('-d', 'AA', 'co.QMA', 'co.NEXP') => ('-d', 'T', 'co.QMA', 'co.NEXP')
('-d', 'AA', 'co.QMA', 'co.NEXP') => ('-d', 'EA', 'co.QMA', 'co.NEXP')
('-d', 'AA', 'QMA', 'NEXP') => ('-d', 'T', 'QMA', 'NEXP')
('-d', 'AA', 'QMA', 'NEXP') => ('-d', 'EA', 'QMA', 'NEXP')
('-d', 'A', 'QAM', 'R') => ('-d', 'R', 'QAM', 'R')
('-d', 'A', 'QAM', 'R') => ('-d', 'AA', 'QAM', 'R')
('-d', 'A', 'co.QAM', 'R') => ('-d', 'R', 'co.QAM', 'R')
('-d', 'A', 'co.QAM', 'R') => ('-d', 'AA', 'co.QAM', 'R')
('-d', 'A', 'co.QAM', 'RE') => ('-d', 'R', 'co.QAM', 'RE')
('-d', 'A', 'co.QAM', 'RE') => ('-d', 'AA', 'co.QAM', 'RE')
('-d', 'A', 'QAM', 'co.RE') => ('-d', 'R', 'QAM', 'co.RE')
('-d', 'A', 'QAM', 'co.RE') => ('-d', 'AA', 'QAM', 'co.RE')
('-d', 'AA', 'QAM', 'co.RE') => ('-d', 'T', 'QAM', 'co.RE')
('-d', 'AA', 'QAM', 'co.RE') => ('-d', 'EA', 'QAM', 'co.RE')
('-d', 'AA', 'co.QAM', 'RE') => ('-d', 'T', 'co.QAM', 'RE')
('-d', 'AA', 'co.QAM', 'RE') => ('-d', 'EA', 'co.QAM', 'RE')
('-d', 'A', 'co.QAM', 'co.RE') => ('-d', 'R', 'co.QAM', 'co.RE')
('-d', 'A', 'co.QAM', 'co.RE') => ('-d', 'AA', 'co.QAM', 'co.RE')
('-d', 'A', 'QAM', 'RE') => ('-d', 'R', 'QAM', 'RE')
('-d', 'A', 'QAM', 'RE') => ('-d', 'AA', 'QAM', 'RE')
('-d', 'AA', 'QAM', 'RE') => ('-d', 'T', 'QAM', 'RE')
('-d', 'AA', 'QAM', 'RE') => ('-d', 'EA', 'QAM', 'RE')
('-d', 'AA', 'co.QAM', 'co.RE') => ('-d', 'T', 'co.QAM', 'co.RE')
('-d', 'AA', 'co.QAM', 'co.RE') => ('-d', 'EA', 'co.QAM', 'co.RE')
('-d', 'AA', 'co.QAM', 'R') => ('-d', 'T', 'co.QAM', 'R')
('-d', 'AA', 'co.QAM', 'R') => ('-d', 'EA', 'co.QAM', 'R')
('-d', 'AA', 'QAM', 'R') => ('-d', 'T', 'QAM', 'R')
('-d', 'AA', 'QAM', 'R') => ('-d', 'EA', 'QAM', 'R')
('-d', 'A', 'QAM', 'NEXP/poly') => ('-d', 'R', 'QAM', 'NEXP/poly')
('-d', 'A', 'QAM', 'NEXP/poly') => ('-d', 'AA', 'QAM', 'NEXP/poly')
('-d', 'A', 'co.QAM', 'NEXP/poly') => ('-d', 'R', 'co.QAM', 'NEXP/poly')
('-d', 'A', 'co.QAM', 'NEXP/poly') => ('-d', 'AA', 'co.QAM', 'NEXP/poly')
('-d', 'AA', 'co.QAM', 'NEXP/poly') => ('-d', 'T', 'co.QAM', 'NEXP/poly')
('-d', 'AA', 'co.QAM', 'NEXP/poly') => ('-d', 'EA', 'co.QAM', 'NEXP/poly')
('-d', 'AA', 'QAM', 'NEXP/poly') => ('-d', 'T', 'QAM', 'NEXP/poly')
('-d', 'AA', 'QAM', 'NEXP/poly') => ('-d', 'EA', 'QAM', 'NEXP/poly')
('-d', 'AA', 'QAM', 'NEXP') => ('-d', 'T', 'QAM', 'NEXP')
('-d', 'AA', 'QAM', 'NEXP') => ('-d', 'EA', 'QAM', 'NEXP')
('-d', 'AA', 'co.QAM', 'co.NEXP') => ('-d', 'T', 'co.QAM', 'co.NEXP')
('-d', 'AA', 'co.QAM', 'co.NEXP') => ('-d', 'EA', 'co.QAM', 'co.NEXP')
('p', 'A', 'co.QAM', 'co.NEXP') => ('p', 'R', 'co.QAM', 'co.NEXP')
('p', 'A', 'co.QAM', 'co.NEXP') => ('p', 'AA', 'co.QAM', 'co.NEXP')
('p', 'A', 'QAM', 'NEXP') => ('p', 'R', 'QAM', 'NEXP')
('p', 'A', 'QAM', 'NEXP') => ('p', 'AA', 'QAM', 'NEXP')
('p', 'A', 'QMA', 'NEXP') => ('p', 'R', 'QMA', 'NEXP')
('p', 'A', 'QMA', 'NEXP') => ('p', 'AA', 'QMA', 'NEXP')
('p', 'A', 'co.QMA', 'co.NEXP') => ('p', 'R', 'co.QMA', 'co.NEXP')
('p', 'A', 'co.QMA', 'co.NEXP') => ('p', 'AA', 'co.QMA', 'co.NEXP')
('p', 'A', 'co.QMA', 'R') => ('p', 'R', 'co.QMA', 'R')
('p', 'A', 'co.QMA', 'R') => ('p', 'AA', 'co.QMA', 'R')
('p', 'A', 'QMA', 'R') => ('p', 'R', 'QMA', 'R')
('p', 'A', 'QMA', 'R') => ('p', 'AA', 'QMA', 'R')
('p', 'A', 'QCMA', 'R') => ('p', 'R', 'QCMA', 'R')
('p', 'A', 'QCMA', 'R') => ('p', 'AA', 'QCMA', 'R')
('p', 'A', 'co.QCMA', 'R') => ('p', 'R', 'co.QCMA', 'R')
('p', 'A', 'co.QCMA', 'R') => ('p', 'AA', 'co.QCMA', 'R')
('p', 'A', 'co.QCMA', 'RE') => ('p', 'R', 'co.QCMA', 'RE')
('p', 'A', 'co.QCMA', 'RE') => ('p', 'AA', 'co.QCMA', 'RE')
('p', 'A', 'QCMA', 'co.RE') => ('p', 'R', 'QCMA', 'co.RE')
('p', 'A', 'QCMA', 'co.RE') => ('p', 'AA', 'QCMA', 'co.RE')
('p', 'AA', 'QCMA', 'co.RE') => ('p', 'T', 'QCMA', 'co.RE')
('p', 'AA', 'QCMA', 'co.RE') => ('p', 'EA', 'QCMA', 'co.RE')
('p', 'AA', 'co.QCMA', 'RE') => ('p', 'T', 'co.QCMA', 'RE')
('p', 'AA', 'co.QCMA', 'RE') => ('p', 'EA', 'co.QCMA', 'RE')
('p', 'A', 'co.QCMA', 'co.RE') => ('p', 'R', 'co.QCMA', 'co.RE')
('p', 'A', 'co.QCMA', 'co.RE') => ('p', 'AA', 'co.QCMA', 'co.RE')
('p', 'A', 'QCMA', 'RE') => ('p', 'R', 'QCMA', 'RE')
('p', 'A', 'QCMA', 'RE') => ('p', 'AA', 'QCMA', 'RE')
('p', 'AA', 'QCMA', 'RE') => ('p', 'T', 'QCMA', 'RE')
('p', 'AA', 'QCMA', 'RE') => ('p', 'EA', 'QCMA', 'RE')
('p', 'AA', 'QCMA', 'R') => ('p', 'T', 'QCMA', 'R')
('p', 'AA', 'QCMA', 'R') => ('p', 'EA', 'QCMA', 'R')
('p', 'AA', 'co.QCMA', 'R') => ('p', 'T', 'co.QCMA', 'R')
('p', 'AA', 'co.QCMA', 'R') => ('p', 'EA', 'co.QCMA', 'R')
('p', 'AA', 'co.QCMA', 'co.RE') => ('p', 'T', 'co.QCMA', 'co.RE')
('p', 'AA', 'co.QCMA', 'co.RE') => ('p', 'EA', 'co.QCMA', 'co.RE')
('p', 'A', 'QMA', 'RE') => ('p', 'R', 'QMA', 'RE')
('p', 'A', 'QMA', 'RE') => ('p', 'AA', 'QMA', 'RE')
('p', 'A', 'co.QMA', 'co.RE') => ('p', 'R', 'co.QMA', 'co.RE')
('p', 'A', 'co.QMA', 'co.RE') => ('p', 'AA', 'co.QMA', 'co.RE')
('p', 'AA', 'co.QMA', 'co.RE') => ('p', 'T', 'co.QMA', 'co.RE')
('p', 'AA', 'co.QMA', 'co.RE') => ('p', 'EA', 'co.QMA', 'co.RE')
('p', 'AA', 'QMA', 'RE') => ('p', 'T', 'QMA', 'RE')
('p', 'AA', 'QMA', 'RE') => ('p', 'EA', 'QMA', 'RE')
('p', 'A', 'QMA', 'co.RE') => ('p', 'R', 'QMA', 'co.RE')
('p', 'A', 'QMA', 'co.RE') => ('p', 'AA', 'QMA', 'co.RE')
('p', 'A', 'co.QMA', 'RE') => ('p', 'R', 'co.QMA', 'RE')
('p', 'A', 'co.QMA', 'RE') => ('p', 'AA', 'co.QMA', 'RE')
('p', 'AA', 'co.QMA', 'RE') => ('p', 'T', 'co.QMA', 'RE')
('p', 'AA', 'co.QMA', 'RE') => ('p', 'EA', 'co.QMA', 'RE')
('p', 'AA', 'co.QMA', 'R') => ('p', 'T', 'co.QMA', 'R')
('p', 'AA', 'co.QMA', 'R') => ('p', 'EA', 'co.QMA', 'R')
('p', 'AA', 'QMA', 'R') => ('p', 'T', 'QMA', 'R')
('p', 'AA', 'QMA', 'R') => ('p', 'EA', 'QMA', 'R')
('p', 'AA', 'QMA', 'co.RE') => ('p', 'T', 'QMA', 'co.RE')
('p', 'AA', 'QMA', 'co.RE') => ('p', 'EA', 'QMA', 'co.RE')
('p', 'A', 'co.QMA', 'NEXP/poly') => ('p', 'R', 'co.QMA', 'NEXP/poly')
('p', 'A', 'co.QMA', 'NEXP/poly') => ('p', 'AA', 'co.QMA', 'NEXP/poly')
('p', 'A', 'QMA', 'NEXP/poly') => ('p', 'R', 'QMA', 'NEXP/poly')
('p', 'A', 'QMA', 'NEXP/poly') => ('p', 'AA', 'QMA', 'NEXP/poly')
('p', 'A', 'QCMA', 'NEXP/poly') => ('p', 'R', 'QCMA', 'NEXP/poly')
('p', 'A', 'QCMA', 'NEXP/poly') => ('p', 'AA', 'QCMA', 'NEXP/poly')
('p', 'A', 'co.QCMA', 'NEXP/poly') => ('p', 'R', 'co.QCMA', 'NEXP/poly')
('p', 'A', 'co.QCMA', 'NEXP/poly') => ('p', 'AA', 'co.QCMA', 'NEXP/poly')
('p', 'AA', 'co.QCMA', 'NEXP/poly') => ('p', 'T', 'co.QCMA', 'NEXP/poly')
('p', 'AA', 'co.QCMA', 'NEXP/poly') => ('p', 'EA', 'co.QCMA', 'NEXP/poly')
('p', 'AA', 'QCMA', 'NEXP/poly') => ('p', 'T', 'QCMA', 'NEXP/poly')
('p', 'AA', 'QCMA', 'NEXP/poly') => ('p', 'EA', 'QCMA', 'NEXP/poly')
('p', 'AA', 'QMA', 'NEXP/poly') => ('p', 'T', 'QMA', 'NEXP/poly')
('p', 'AA', 'QMA', 'NEXP/poly') => ('p', 'EA', 'QMA', 'NEXP/poly')
('p', 'AA', 'co.QMA', 'NEXP/poly') => ('p', 'T', 'co.QMA', 'NEXP/poly')
('p', 'AA', 'co.QMA', 'NEXP/poly') => ('p', 'EA', 'co.QMA', 'NEXP/poly')
('p', 'A', 'co.QCMA', 'co.NEXP') => ('p', 'R', 'co.QCMA', 'co.NEXP')
('p', 'A', 'co.QCMA', 'co.NEXP') => ('p', 'AA', 'co.QCMA', 'co.NEXP')
('p', 'A', 'QCMA', 'NEXP') => ('p', 'R', 'QCMA', 'NEXP')
('p', 'A', 'QCMA', 'NEXP') => ('p', 'AA', 'QCMA', 'NEXP')
('p', 'AA', 'QCMA', 'NEXP') => ('p', 'T', 'QCMA', 'NEXP')
('p', 'AA', 'QCMA', 'NEXP') => ('p', 'EA', 'QCMA', 'NEXP')
('p', 'AA', 'co.QCMA', 'co.NEXP') => ('p', 'T', 'co.QCMA', 'co.NEXP')
('p', 'AA', 'co.QCMA', 'co.NEXP') => ('p', 'EA', 'co.QCMA', 'co.NEXP')
('p', 'AA', 'co.QMA', 'co.NEXP') => ('p', 'T', 'co.QMA', 'co.NEXP')
('p', 'AA', 'co.QMA', 'co.NEXP') => ('p', 'EA', 'co.QMA', 'co.NEXP')
('p', 'AA', 'QMA', 'NEXP') => ('p', 'T', 'QMA', 'NEXP')
('p', 'AA', 'QMA', 'NEXP') => ('p', 'EA', 'QMA', 'NEXP')
('p', 'A', 'QAM', 'R') => ('p', 'R', 'QAM', 'R')
('p', 'A', 'QAM', 'R') => ('p', 'AA', 'QAM', 'R')
('p', 'A', 'co.QAM', 'R') => ('p', 'R', 'co.QAM', 'R')
('p', 'A', 'co.QAM', 'R') => ('p', 'AA', 'co.QAM', 'R')
('p', 'A', 'co.QAM', 'RE') => ('p', 'R', 'co.QAM', 'RE')
('p', 'A', 'co.QAM', 'RE') => ('p', 'AA', 'co.QAM', 'RE')
('p', 'A', 'QAM', 'co.RE') => ('p', 'R', 'QAM', 'co.RE')
('p', 'A', 'QAM', 'co.RE') => ('p', 'AA', 'QAM', 'co.RE')
('p', 'AA', 'QAM', 'co.RE') => ('p', 'T', 'QAM', 'co.RE')
('p', 'AA', 'QAM', 'co.RE') => ('p', 'EA', 'QAM', 'co.RE')
('p', 'AA', 'co.QAM', 'RE') => ('p', 'T', 'co.QAM', 'RE')
('p', 'AA', 'co.QAM', 'RE') => ('p', 'EA', 'co.QAM', 'RE')
('p', 'A', 'co.QAM', 'co.RE') => ('p', 'R', 'co.QAM', 'co.RE')
('p', 'A', 'co.QAM', 'co.RE') => ('p', 'AA', 'co.QAM', 'co.RE')
('p', 'A', 'QAM', 'RE') => ('p', 'R', 'QAM', 'RE')
('p', 'A', 'QAM', 'RE') => ('p', 'AA', 'QAM', 'RE')
('p', 'AA', 'QAM', 'RE') => ('p', 'T', 'QAM', 'RE')
('p', 'AA', 'QAM', 'RE') => ('p', 'EA', 'QAM', 'RE')
('p', 'AA', 'QAM', 'R') => ('p', 'T', 'QAM', 'R')
('p', 'AA', 'QAM', 'R') => ('p', 'EA', 'QAM', 'R')
('p', 'AA', 'co.QAM', 'R') => ('p', 'T', 'co.QAM', 'R')
('p', 'AA', 'co.QAM', 'R') => ('p', 'EA', 'co.QAM', 'R')
('p', 'AA', 'co.QAM', 'co.RE') => ('p', 'T', 'co.QAM', 'co.RE')
('p', 'AA', 'co.QAM', 'co.RE') => ('p', 'EA', 'co.QAM', 'co.RE')
('p', 'A', 'QAM', 'NEXP/poly') => ('p', 'R', 'QAM', 'NEXP/poly')
('p', 'A', 'QAM', 'NEXP/poly') => ('p', 'AA', 'QAM', 'NEXP/poly')
('p', 'A', 'co.QAM', 'NEXP/poly') => ('p', 'R', 'co.QAM', 'NEXP/poly')
('p', 'A', 'co.QAM', 'NEXP/poly') => ('p', 'AA', 'co.QAM', 'NEXP/poly')
('p', 'AA', 'co.QAM', 'NEXP/poly') => ('p', 'T', 'co.QAM', 'NEXP/poly')
('p', 'AA', 'co.QAM', 'NEXP/poly') => ('p', 'EA', 'co.QAM', 'NEXP/poly')
('p', 'AA', 'QAM', 'NEXP/poly') => ('p', 'T', 'QAM', 'NEXP/poly')
('p', 'AA', 'QAM', 'NEXP/poly') => ('p', 'EA', 'QAM', 'NEXP/poly')
('p', 'AA', 'QAM', 'NEXP') => ('p', 'T', 'QAM', 'NEXP')
('p', 'AA', 'QAM', 'NEXP') => ('p', 'EA', 'QAM', 'NEXP')
('p', 'AA', 'co.QAM', 'co.NEXP') => ('p', 'T', 'co.QAM', 'co.NEXP')
('p', 'AA', 'co.QAM', 'co.NEXP') => ('p', 'EA', 'co.QAM', 'co.NEXP')
('p', 'E', 'co.QMA', 'co.QIP') => ('-d', 'E', 'co.QMA', 'co.QIP')
('p', 'E', 'QMA', 'QIP') => ('-d', 'E', 'QMA', 'QIP')
('p', 'E', 'QCMA', 'QIP') => ('-d', 'E', 'QCMA', 'QIP')
('p', 'E', 'co.QCMA', 'co.QIP') => ('-d', 'E', 'co.QCMA', 'co.QIP')
('p', 'A', 'co.QMA', 'co.QIP') => ('-d', 'A', 'co.QMA', 'co.QIP')
('p', 'A', 'co.QMA', 'co.QIP') => ('p', 'R', 'co.QMA', 'co.QIP')
('p', 'A', 'co.QMA', 'co.QIP') => ('p', 'AA', 'co.QMA', 'co.QIP')
('p', 'A', 'QMA', 'QIP') => ('-d', 'A', 'QMA', 'QIP')
('p', 'A', 'QMA', 'QIP') => ('p', 'R', 'QMA', 'QIP')
('p', 'A', 'QMA', 'QIP') => ('p', 'AA', 'QMA', 'QIP')
('p', 'A', 'QCMA', 'QIP') => ('-d', 'A', 'QCMA', 'QIP')
('p', 'A', 'QCMA', 'QIP') => ('p', 'R', 'QCMA', 'QIP')
('p', 'A', 'QCMA', 'QIP') => ('p', 'AA', 'QCMA', 'QIP')
('p', 'A', 'co.QCMA', 'co.QIP') => ('-d', 'A', 'co.QCMA', 'co.QIP')
('p', 'A', 'co.QCMA', 'co.QIP') => ('p', 'R', 'co.QCMA', 'co.QIP')
('p', 'A', 'co.QCMA', 'co.QIP') => ('p', 'AA', 'co.QCMA', 'co.QIP')
('-d', 'A', 'co.QCMA', 'co.QMIP_ne') => ('-d', 'R', 'co.QCMA', 'co.QMIP_ne')
('-d', 'A', 'co.QCMA', 'co.QMIP_ne') => ('-d', 'AA', 'co.QCMA', 'co.QMIP_ne')
('-d', 'A', 'QCMA', 'QMIP_ne') => ('-d', 'R', 'QCMA', 'QMIP_ne')
('-d', 'A', 'QCMA', 'QMIP_ne') => ('-d', 'AA', 'QCMA', 'QMIP_ne')
('-d', 'AA', 'QCMA', 'QMIP_ne') => ('-d', 'T', 'QCMA', 'QMIP_ne')
('-d', 'AA', 'QCMA', 'QMIP_ne') => ('-d', 'EA', 'QCMA', 'QMIP_ne')
('-d', 'AA', 'co.QCMA', 'co.QMIP_ne') => ('-d', 'T', 'co.QCMA', 'co.QMIP_ne')
('-d', 'AA', 'co.QCMA', 'co.QMIP_ne') => ('-d', 'EA', 'co.QCMA', 'co.QMIP_ne')
('p', 'A', 'co.QCMA', 'co.QMIP_ne') => ('p', 'R', 'co.QCMA', 'co.QMIP_ne')
('p', 'A', 'co.QCMA', 'co.QMIP_ne') => ('p', 'AA', 'co.QCMA', 'co.QMIP_ne')
('p', 'A', 'QCMA', 'QMIP_ne') => ('p', 'R', 'QCMA', 'QMIP_ne')
('p', 'A', 'QCMA', 'QMIP_ne') => ('p', 'AA', 'QCMA', 'QMIP_ne')
('p', 'AA', 'QCMA', 'QMIP_ne') => ('p', 'T', 'QCMA', 'QMIP_ne')
('p', 'AA', 'QCMA', 'QMIP_ne') => ('p', 'EA', 'QCMA', 'QMIP_ne')
('p', 'AA', 'co.QCMA', 'co.QMIP_ne') => ('p', 'T', 'co.QCMA', 'co.QMIP_ne')
('p', 'AA', 'co.QCMA', 'co.QMIP_ne') => ('p', 'EA', 'co.QCMA', 'co.QMIP_ne')
('p', 'AA', 'co.QCMA', 'co.QIP') => ('-d', 'AA', 'co.QCMA', 'co.QIP')
('p', 'AA', 'co.QCMA', 'co.QIP') => ('p', 'T', 'co.QCMA', 'co.QIP')
('p', 'AA', 'co.QCMA', 'co.QIP') => ('p', 'EA', 'co.QCMA', 'co.QIP')
('p', 'AA', 'QCMA', 'QIP') => ('-d', 'AA', 'QCMA', 'QIP')
('p', 'AA', 'QCMA', 'QIP') => ('p', 'T', 'QCMA', 'QIP')
('p', 'AA', 'QCMA', 'QIP') => ('p', 'EA', 'QCMA', 'QIP')
('p', 'EA', 'QCMA', 'QIP') => ('-d', 'EA', 'QCMA', 'QIP')
('p', 'EA', 'co.QCMA', 'co.QIP') => ('-d', 'EA', 'co.QCMA', 'co.QIP')
('p', 'T', 'QCMA', 'QIP') => ('-d', 'T', 'QCMA', 'QIP')
('p', 'T', 'co.QCMA', 'co.QIP') => ('-d', 'T', 'co.QCMA', 'co.QIP')
('p', 'R', 'co.QCMA', 'co.QIP') => ('-d', 'R', 'co.QCMA', 'co.QIP')
('p', 'R', 'QCMA', 'QIP') => ('-d', 'R', 'QCMA', 'QIP')
('-d', 'A', 'QMA', 'QMIP_ne') => ('-d', 'R', 'QMA', 'QMIP_ne')
('-d', 'A', 'QMA', 'QMIP_ne') => ('-d', 'AA', 'QMA', 'QMIP_ne')
('-d', 'A', 'co.QMA', 'co.QMIP_ne') => ('-d', 'R', 'co.QMA', 'co.QMIP_ne')
('-d', 'A', 'co.QMA', 'co.QMIP_ne') => ('-d', 'AA', 'co.QMA', 'co.QMIP_ne')
('-d', 'AA', 'co.QMA', 'co.QMIP_ne') => ('-d', 'T', 'co.QMA', 'co.QMIP_ne')
('-d', 'AA', 'co.QMA', 'co.QMIP_ne') => ('-d', 'EA', 'co.QMA', 'co.QMIP_ne')
('-d', 'AA', 'QMA', 'QMIP_ne') => ('-d', 'T', 'QMA', 'QMIP_ne')
('-d', 'AA', 'QMA', 'QMIP_ne') => ('-d', 'EA', 'QMA', 'QMIP_ne')
('p', 'A', 'QMA', 'QMIP_ne') => ('p', 'R', 'QMA', 'QMIP_ne')
('p', 'A', 'QMA', 'QMIP_ne') => ('p', 'AA', 'QMA', 'QMIP_ne')
('p', 'A', 'co.QMA', 'co.QMIP_ne') => ('p', 'R', 'co.QMA', 'co.QMIP_ne')
('p', 'A', 'co.QMA', 'co.QMIP_ne') => ('p', 'AA', 'co.QMA', 'co.QMIP_ne')
('p', 'AA', 'co.QMA', 'co.QMIP_ne') => ('p', 'T', 'co.QMA', 'co.QMIP_ne')
('p', 'AA', 'co.QMA', 'co.QMIP_ne') => ('p', 'EA', 'co.QMA', 'co.QMIP_ne')
('p', 'AA', 'QMA', 'QMIP_ne') => ('p', 'T', 'QMA', 'QMIP_ne')
('p', 'AA', 'QMA', 'QMIP_ne') => ('p', 'EA', 'QMA', 'QMIP_ne')
('p', 'AA', 'QMA', 'QIP') => ('-d', 'AA', 'QMA', 'QIP')
('p', 'AA', 'QMA', 'QIP') => ('p', 'T', 'QMA', 'QIP')
('p', 'AA', 'QMA', 'QIP') => ('p', 'EA', 'QMA', 'QIP')
('p', 'AA', 'co.QMA', 'co.QIP') => ('-d', 'AA', 'co.QMA', 'co.QIP')
('p', 'AA', 'co.QMA', 'co.QIP') => ('p', 'T', 'co.QMA', 'co.QIP')
('p', 'AA', 'co.QMA', 'co.QIP') => ('p', 'EA', 'co.QMA', 'co.QIP')
('p', 'EA', 'co.QMA', 'co.QIP') => ('-d', 'EA', 'co.QMA', 'co.QIP')
('p', 'EA', 'QMA', 'QIP') => ('-d', 'EA', 'QMA', 'QIP')
('p', 'T', 'co.QMA', 'co.QIP') => ('-d', 'T', 'co.QMA', 'co.QIP')
('p', 'T', 'QMA', 'QIP') => ('-d', 'T', 'QMA', 'QIP')
('p', 'R', 'QMA', 'QIP') => ('-d', 'R', 'QMA', 'QIP')
('p', 'R', 'co.QMA', 'co.QIP') => ('-d', 'R', 'co.QMA', 'co.QIP')
('-d', 'A', 'co.QAM', 'co.QMIP_ne') => ('-d', 'R', 'co.QAM', 'co.QMIP_ne')
('-d', 'A', 'co.QAM', 'co.QMIP_ne') => ('-d', 'AA', 'co.QAM', 'co.QMIP_ne')
('-d', 'A', 'QAM', 'QMIP_ne') => ('-d', 'R', 'QAM', 'QMIP_ne')
('-d', 'A', 'QAM', 'QMIP_ne') => ('-d', 'AA', 'QAM', 'QMIP_ne')
('-d', 'AA', 'QAM', 'QMIP_ne') => ('-d', 'T', 'QAM', 'QMIP_ne')
('-d', 'AA', 'QAM', 'QMIP_ne') => ('-d', 'EA', 'QAM', 'QMIP_ne')
('-d', 'AA', 'co.QAM', 'co.QMIP_ne') => ('-d', 'T', 'co.QAM', 'co.QMIP_ne')
('-d', 'AA', 'co.QAM', 'co.QMIP_ne') => ('-d', 'EA', 'co.QAM', 'co.QMIP_ne')
('p', 'A', 'co.QAM', 'co.QMIP_ne') => ('p', 'R', 'co.QAM', 'co.QMIP_ne')
('p', 'A', 'co.QAM', 'co.QMIP_ne') => ('p', 'AA', 'co.QAM', 'co.QMIP_ne')
('p', 'A', 'QAM', 'QMIP_ne') => ('p', 'R', 'QAM', 'QMIP_ne')
('p', 'A', 'QAM', 'QMIP_ne') => ('p', 'AA', 'QAM', 'QMIP_ne')
('p', 'AA', 'QAM', 'QMIP_ne') => ('p', 'T', 'QAM', 'QMIP_ne')
('p', 'AA', 'QAM', 'QMIP_ne') => ('p', 'EA', 'QAM', 'QMIP_ne')
('p', 'AA', 'co.QAM', 'co.QMIP_ne') => ('p', 'T', 'co.QAM', 'co.QMIP_ne')
('p', 'AA', 'co.QAM', 'co.QMIP_ne') => ('p', 'EA', 'co.QAM', 'co.QMIP_ne')
('p', 'AA', 'co.QAM', 'co.QIP') => ('-d', 'AA', 'co.QAM', 'co.QIP')
('p', 'AA', 'co.QAM', 'co.QIP') => ('p', 'T', 'co.QAM', 'co.QIP')
('p', 'AA', 'co.QAM', 'co.QIP') => ('p', 'EA', 'co.QAM', 'co.QIP')
('p', 'AA', 'QAM', 'QIP') => ('-d', 'AA', 'QAM', 'QIP')
('p', 'AA', 'QAM', 'QIP') => ('p', 'T', 'QAM', 'QIP')
('p', 'AA', 'QAM', 'QIP') => ('p', 'EA', 'QAM', 'QIP')
('p', 'EA', 'QAM', 'QIP') => ('-d', 'EA', 'QAM', 'QIP')
('p', 'EA', 'QAM', 'QIP') => ('p', 'E', 'QAM', 'QIP')
('p', 'EA', 'co.QAM', 'co.QIP') => ('-d', 'EA', 'co.QAM', 'co.QIP')
('p', 'EA', 'co.QAM', 'co.QIP') => ('p', 'E', 'co.QAM', 'co.QIP')
('p', 'E', 'co.QAM', 'co.QIP') => ('-d', 'E', 'co.QAM', 'co.QIP')
('p', 'E', 'QAM', 'QIP') => ('-d', 'E', 'QAM', 'QIP')
('p', 'T', 'QAM', 'QIP') => ('-d', 'T', 'QAM', 'QIP')
('p', 'T', 'co.QAM', 'co.QIP') => ('-d', 'T', 'co.QAM', 'co.QIP')
('p', 'R', 'co.QAM', 'co.QIP') => ('-d', 'R', 'co.QAM', 'co.QIP')
('p', 'R', 'QAM', 'QIP') => ('-d', 'R', 'QAM', 'QIP')
('p', 'A', 'SPP', 'AWPP') => ('-d', 'A', 'SPP', 'AWPP')
('p', 'A', 'SPP', 'AWPP') => ('p', 'R', 'SPP', 'AWPP')
('p', 'A', 'SPP', 'AWPP') => ('p', 'AA', 'SPP', 'AWPP')
('p', 'A', 'SPP', 'co.AWPP') => ('-d', 'A', 'SPP', 'co.AWPP')
('p', 'A', 'SPP', 'co.AWPP') => ('p', 'R', 'SPP', 'co.AWPP')
('p', 'A', 'SPP', 'co.AWPP') => ('p', 'AA', 'SPP', 'co.AWPP')
('p', 'A', 'SPP', 'cocap.AWPP') => ('-d', 'A', 'SPP', 'cocap.AWPP')
('p', 'A', 'SPP', 'cocap.AWPP') => ('p', 'R', 'SPP', 'cocap.AWPP')
('p', 'A', 'SPP', 'cocap.AWPP') => ('p', 'AA', 'SPP', 'cocap.AWPP')
('-d', 'A', 'SPP', 'co.AWPP') => ('-d', 'R', 'SPP', 'co.AWPP')
('-d', 'A', 'SPP', 'co.AWPP') => ('-d', 'AA', 'SPP', 'co.AWPP')
('-d', 'A', 'SPP', 'cocap.AWPP') => ('-d', 'R', 'SPP', 'cocap.AWPP')
('-d', 'A', 'SPP', 'cocap.AWPP') => ('-d', 'AA', 'SPP', 'cocap.AWPP')
('-d', 'A', 'SPP', 'P^Sharp-P') => ('-d', 'R', 'SPP', 'P^Sharp-P')
('-d', 'A', 'SPP', 'P^Sharp-P') => ('-d', 'AA', 'SPP', 'P^Sharp-P')
('-d', 'A', 'cocap.UP', 'P^Sharp-P') => ('-d', 'R', 'cocap.UP', 'P^Sharp-P')
('-d', 'A', 'cocap.UP', 'P^Sharp-P') => ('-d', 'AA', 'cocap.UP', 'P^Sharp-P')
('-d', 'AA', 'cocap.UP', 'P^Sharp-P') => ('-d', 'T', 'cocap.UP', 'P^Sharp-P')
('-d', 'AA', 'cocap.UP', 'P^Sharp-P') => ('-d', 'EA', 'cocap.UP', 'P^Sharp-P')
('-d', 'A', 'co.UP', 'P^Sharp-P') => ('-d', 'R', 'co.UP', 'P^Sharp-P')
('-d', 'A', 'co.UP', 'P^Sharp-P') => ('-d', 'AA', 'co.UP', 'P^Sharp-P')
('-d', 'A', 'UP', 'P^Sharp-P') => ('-d', 'R', 'UP', 'P^Sharp-P')
('-d', 'A', 'UP', 'P^Sharp-P') => ('-d', 'AA', 'UP', 'P^Sharp-P')
('-d', 'AA', 'UP', 'P^Sharp-P') => ('-d', 'T', 'UP', 'P^Sharp-P')
('-d', 'AA', 'UP', 'P^Sharp-P') => ('-d', 'EA', 'UP', 'P^Sharp-P')
('-d', 'AA', 'co.UP', 'P^Sharp-P') => ('-d', 'T', 'co.UP', 'P^Sharp-P')
('-d', 'AA', 'co.UP', 'P^Sharp-P') => ('-d', 'EA', 'co.UP', 'P^Sharp-P')
('-d', 'AA', 'SPP', 'P^Sharp-P') => ('-d', 'T', 'SPP', 'P^Sharp-P')
('-d', 'AA', 'SPP', 'P^Sharp-P') => ('-d', 'EA', 'SPP', 'P^Sharp-P')
('-d', 'A', 'cocap.UP', 'cocap.AWPP') => ('-d', 'R', 'cocap.UP', 'cocap.AWPP')
('-d', 'A', 'cocap.UP', 'cocap.AWPP') => ('-d', 'AA', 'cocap.UP', 'cocap.AWPP')
('-d', 'A', 'cocap.UP', 'co.AWPP') => ('-d', 'R', 'cocap.UP', 'co.AWPP')
('-d', 'A', 'cocap.UP', 'co.AWPP') => ('-d', 'AA', 'cocap.UP', 'co.AWPP')
('-d', 'A', 'cocap.UP', 'AWPP') => ('-d', 'R', 'cocap.UP', 'AWPP')
('-d', 'A', 'cocap.UP', 'AWPP') => ('-d', 'AA', 'cocap.UP', 'AWPP')
('-d', 'A', 'cocap.UP', 'PSPACE/poly') => ('-d', 'R', 'cocap.UP', 'PSPACE/poly')
('-d', 'A', 'cocap.UP', 'PSPACE/poly') => ('-d', 'AA', 'cocap.UP', 'PSPACE/poly')
('-d', 'AA', 'cocap.UP', 'PSPACE/poly') => ('-d', 'T', 'cocap.UP', 'PSPACE/poly')
('-d', 'AA', 'cocap.UP', 'PSPACE/poly') => ('-d', 'EA', 'cocap.UP', 'PSPACE/poly')
('-d', 'A', 'cocap.UP', 'PSPACE') => ('-d', 'R', 'cocap.UP', 'PSPACE')
('-d', 'A', 'cocap.UP', 'PSPACE') => ('-d', 'AA', 'cocap.UP', 'PSPACE')
('-d', 'AA', 'cocap.UP', 'PSPACE') => ('-d', 'T', 'cocap.UP', 'PSPACE')
('-d', 'AA', 'cocap.UP', 'PSPACE') => ('-d', 'EA', 'cocap.UP', 'PSPACE')
('-d', 'A', 'cocap.UP', 'PP/poly') => ('-d', 'R', 'cocap.UP', 'PP/poly')
('-d', 'A', 'cocap.UP', 'PP/poly') => ('-d', 'AA', 'cocap.UP', 'PP/poly')
('-d', 'AA', 'cocap.UP', 'PP/poly') => ('-d', 'T', 'cocap.UP', 'PP/poly')
('-d', 'AA', 'cocap.UP', 'PP/poly') => ('-d', 'EA', 'cocap.UP', 'PP/poly')
('-d', 'A', 'cocap.UP', 'PP') => ('-d', 'R', 'cocap.UP', 'PP')
('-d', 'A', 'cocap.UP', 'PP') => ('-d', 'AA', 'cocap.UP', 'PP')
('-d', 'AA', 'cocap.UP', 'PP') => ('-d', 'T', 'cocap.UP', 'PP')
('-d', 'AA', 'cocap.UP', 'PP') => ('-d', 'EA', 'cocap.UP', 'PP')
('-d', 'AA', 'cocap.UP', 'AWPP') => ('-d', 'T', 'cocap.UP', 'AWPP')
('-d', 'AA', 'cocap.UP', 'AWPP') => ('-d', 'EA', 'cocap.UP', 'AWPP')
('-d', 'AA', 'cocap.UP', 'co.AWPP') => ('-d', 'T', 'cocap.UP', 'co.AWPP')
('-d', 'AA', 'cocap.UP', 'co.AWPP') => ('-d', 'EA', 'cocap.UP', 'co.AWPP')
('-d', 'AA', 'cocap.UP', 'cocap.AWPP') => ('-d', 'T', 'cocap.UP', 'cocap.AWPP')
('-d', 'AA', 'cocap.UP', 'cocap.AWPP') => ('-d', 'EA', 'cocap.UP', 'cocap.AWPP')
('-d', 'A', 'SPP', 'PSPACE/poly') => ('-d', 'R', 'SPP', 'PSPACE/poly')
('-d', 'A', 'SPP', 'PSPACE/poly') => ('-d', 'AA', 'SPP', 'PSPACE/poly')
('-d', 'A', 'co.UP', 'PSPACE/poly') => ('-d', 'R', 'co.UP', 'PSPACE/poly')
('-d', 'A', 'co.UP', 'PSPACE/poly') => ('-d', 'AA', 'co.UP', 'PSPACE/poly')
('-d', 'A', 'UP', 'PSPACE/poly') => ('-d', 'R', 'UP', 'PSPACE/poly')
('-d', 'A', 'UP', 'PSPACE/poly') => ('-d', 'AA', 'UP', 'PSPACE/poly')
('-d', 'AA', 'UP', 'PSPACE/poly') => ('-d', 'T', 'UP', 'PSPACE/poly')
('-d', 'AA', 'UP', 'PSPACE/poly') => ('-d', 'EA', 'UP', 'PSPACE/poly')
('-d', 'AA', 'co.UP', 'PSPACE/poly') => ('-d', 'T', 'co.UP', 'PSPACE/poly')
('-d', 'AA', 'co.UP', 'PSPACE/poly') => ('-d', 'EA', 'co.UP', 'PSPACE/poly')
('-d', 'AA', 'SPP', 'PSPACE/poly') => ('-d', 'T', 'SPP', 'PSPACE/poly')
('-d', 'AA', 'SPP', 'PSPACE/poly') => ('-d', 'EA', 'SPP', 'PSPACE/poly')
('-d', 'A', 'co.UP', 'cocap.AWPP') => ('-d', 'R', 'co.UP', 'cocap.AWPP')
('-d', 'A', 'co.UP', 'cocap.AWPP') => ('-d', 'AA', 'co.UP', 'cocap.AWPP')
('-d', 'A', 'UP', 'cocap.AWPP') => ('-d', 'R', 'UP', 'cocap.AWPP')
('-d', 'A', 'UP', 'cocap.AWPP') => ('-d', 'AA', 'UP', 'cocap.AWPP')
('-d', 'A', 'UP', 'co.AWPP') => ('-d', 'R', 'UP', 'co.AWPP')
('-d', 'A', 'UP', 'co.AWPP') => ('-d', 'AA', 'UP', 'co.AWPP')
('-d', 'A', 'co.UP', 'AWPP') => ('-d', 'R', 'co.UP', 'AWPP')
('-d', 'A', 'co.UP', 'AWPP') => ('-d', 'AA', 'co.UP', 'AWPP')
('-d', 'A', 'co.UP', 'PSPACE') => ('-d', 'R', 'co.UP', 'PSPACE')
('-d', 'A', 'co.UP', 'PSPACE') => ('-d', 'AA', 'co.UP', 'PSPACE')
('-d', 'A', 'UP', 'PSPACE') => ('-d', 'R', 'UP', 'PSPACE')
('-d', 'A', 'UP', 'PSPACE') => ('-d', 'AA', 'UP', 'PSPACE')
('-d', 'AA', 'UP', 'PSPACE') => ('-d', 'T', 'UP', 'PSPACE')
('-d', 'AA', 'UP', 'PSPACE') => ('-d', 'EA', 'UP', 'PSPACE')
('-d', 'AA', 'co.UP', 'PSPACE') => ('-d', 'T', 'co.UP', 'PSPACE')
('-d', 'AA', 'co.UP', 'PSPACE') => ('-d', 'EA', 'co.UP', 'PSPACE')
('-d', 'A', 'co.UP', 'PP/poly') => ('-d', 'R', 'co.UP', 'PP/poly')
('-d', 'A', 'co.UP', 'PP/poly') => ('-d', 'AA', 'co.UP', 'PP/poly')
('-d', 'A', 'UP', 'PP/poly') => ('-d', 'R', 'UP', 'PP/poly')
('-d', 'A', 'UP', 'PP/poly') => ('-d', 'AA', 'UP', 'PP/poly')
('-d', 'AA', 'UP', 'PP/poly') => ('-d', 'T', 'UP', 'PP/poly')
('-d', 'AA', 'UP', 'PP/poly') => ('-d', 'EA', 'UP', 'PP/poly')
('-d', 'AA', 'co.UP', 'PP/poly') => ('-d', 'T', 'co.UP', 'PP/poly')
('-d', 'AA', 'co.UP', 'PP/poly') => ('-d', 'EA', 'co.UP', 'PP/poly')
('-d', 'A', 'co.UP', 'PP') => ('-d', 'R', 'co.UP', 'PP')
('-d', 'A', 'co.UP', 'PP') => ('-d', 'AA', 'co.UP', 'PP')
('-d', 'A', 'UP', 'PP') => ('-d', 'R', 'UP', 'PP')
('-d', 'A', 'UP', 'PP') => ('-d', 'AA', 'UP', 'PP')
('-d', 'AA', 'UP', 'PP') => ('-d', 'T', 'UP', 'PP')
('-d', 'AA', 'UP', 'PP') => ('-d', 'EA', 'UP', 'PP')
('-d', 'AA', 'co.UP', 'PP') => ('-d', 'T', 'co.UP', 'PP')
('-d', 'AA', 'co.UP', 'PP') => ('-d', 'EA', 'co.UP', 'PP')
('-d', 'AA', 'co.UP', 'AWPP') => ('-d', 'T', 'co.UP', 'AWPP')
('-d', 'AA', 'co.UP', 'AWPP') => ('-d', 'EA', 'co.UP', 'AWPP')
('-d', 'AA', 'UP', 'co.AWPP') => ('-d', 'T', 'UP', 'co.AWPP')
('-d', 'AA', 'UP', 'co.AWPP') => ('-d', 'EA', 'UP', 'co.AWPP')
('-d', 'A', 'UP', 'AWPP') => ('-d', 'R', 'UP', 'AWPP')
('-d', 'A', 'UP', 'AWPP') => ('-d', 'AA', 'UP', 'AWPP')
('-d', 'A', 'co.UP', 'co.AWPP') => ('-d', 'R', 'co.UP', 'co.AWPP')
('-d', 'A', 'co.UP', 'co.AWPP') => ('-d', 'AA', 'co.UP', 'co.AWPP')
('-d', 'AA', 'co.UP', 'co.AWPP') => ('-d', 'T', 'co.UP', 'co.AWPP')
('-d', 'AA', 'co.UP', 'co.AWPP') => ('-d', 'EA', 'co.UP', 'co.AWPP')
('-d', 'AA', 'UP', 'AWPP') => ('-d', 'T', 'UP', 'AWPP')
('-d', 'AA', 'UP', 'AWPP') => ('-d', 'EA', 'UP', 'AWPP')
('-d', 'AA', 'UP', 'cocap.AWPP') => ('-d', 'T', 'UP', 'cocap.AWPP')
('-d', 'AA', 'UP', 'cocap.AWPP') => ('-d', 'EA', 'UP', 'cocap.AWPP')
('-d', 'AA', 'co.UP', 'cocap.AWPP') => ('-d', 'T', 'co.UP', 'cocap.AWPP')
('-d', 'AA', 'co.UP', 'cocap.AWPP') => ('-d', 'EA', 'co.UP', 'cocap.AWPP')
('-d', 'A', 'SPP', 'PSPACE') => ('-d', 'R', 'SPP', 'PSPACE')
('-d', 'A', 'SPP', 'PSPACE') => ('-d', 'AA', 'SPP', 'PSPACE')
('-d', 'AA', 'SPP', 'PSPACE') => ('-d', 'T', 'SPP', 'PSPACE')
('-d', 'AA', 'SPP', 'PSPACE') => ('-d', 'EA', 'SPP', 'PSPACE')
('-d', 'A', 'SPP', 'PP/poly') => ('-d', 'R', 'SPP', 'PP/poly')
('-d', 'A', 'SPP', 'PP/poly') => ('-d', 'AA', 'SPP', 'PP/poly')
('-d', 'AA', 'SPP', 'PP/poly') => ('-d', 'T', 'SPP', 'PP/poly')
('-d', 'AA', 'SPP', 'PP/poly') => ('-d', 'EA', 'SPP', 'PP/poly')
('-d', 'A', 'SPP', 'PP') => ('-d', 'R', 'SPP', 'PP')
('-d', 'A', 'SPP', 'PP') => ('-d', 'AA', 'SPP', 'PP')
('-d', 'AA', 'SPP', 'PP') => ('-d', 'T', 'SPP', 'PP')
('-d', 'AA', 'SPP', 'PP') => ('-d', 'EA', 'SPP', 'PP')
('-d', 'A', 'SPP', 'AWPP') => ('-d', 'R', 'SPP', 'AWPP')
('-d', 'A', 'SPP', 'AWPP') => ('-d', 'AA', 'SPP', 'AWPP')
('-d', 'AA', 'SPP', 'AWPP') => ('-d', 'T', 'SPP', 'AWPP')
('-d', 'AA', 'SPP', 'AWPP') => ('-d', 'EA', 'SPP', 'AWPP')
('-d', 'AA', 'SPP', 'co.AWPP') => ('-d', 'T', 'SPP', 'co.AWPP')
('-d', 'AA', 'SPP', 'co.AWPP') => ('-d', 'EA', 'SPP', 'co.AWPP')
('-d', 'AA', 'SPP', 'cocap.AWPP') => ('-d', 'T', 'SPP', 'cocap.AWPP')
('-d', 'AA', 'SPP', 'cocap.AWPP') => ('-d', 'EA', 'SPP', 'cocap.AWPP')
('p', 'A', 'SPP', 'P^Sharp-P') => ('p', 'R', 'SPP', 'P^Sharp-P')
('p', 'A', 'SPP', 'P^Sharp-P') => ('p', 'AA', 'SPP', 'P^Sharp-P')
('p', 'A', 'cocap.UP', 'P^Sharp-P') => ('p', 'R', 'cocap.UP', 'P^Sharp-P')
('p', 'A', 'cocap.UP', 'P^Sharp-P') => ('p', 'AA', 'cocap.UP', 'P^Sharp-P')
('p', 'AA', 'cocap.UP', 'P^Sharp-P') => ('p', 'T', 'cocap.UP', 'P^Sharp-P')
('p', 'AA', 'cocap.UP', 'P^Sharp-P') => ('p', 'EA', 'cocap.UP', 'P^Sharp-P')
('p', 'A', 'co.UP', 'P^Sharp-P') => ('p', 'R', 'co.UP', 'P^Sharp-P')
('p', 'A', 'co.UP', 'P^Sharp-P') => ('p', 'AA', 'co.UP', 'P^Sharp-P')
('p', 'A', 'UP', 'P^Sharp-P') => ('p', 'R', 'UP', 'P^Sharp-P')
('p', 'A', 'UP', 'P^Sharp-P') => ('p', 'AA', 'UP', 'P^Sharp-P')
('p', 'AA', 'UP', 'P^Sharp-P') => ('p', 'T', 'UP', 'P^Sharp-P')
('p', 'AA', 'UP', 'P^Sharp-P') => ('p', 'EA', 'UP', 'P^Sharp-P')
('p', 'AA', 'co.UP', 'P^Sharp-P') => ('p', 'T', 'co.UP', 'P^Sharp-P')
('p', 'AA', 'co.UP', 'P^Sharp-P') => ('p', 'EA', 'co.UP', 'P^Sharp-P')
('p', 'AA', 'SPP', 'P^Sharp-P') => ('p', 'T', 'SPP', 'P^Sharp-P')
('p', 'AA', 'SPP', 'P^Sharp-P') => ('p', 'EA', 'SPP', 'P^Sharp-P')
('p', 'A', 'cocap.UP', 'cocap.AWPP') => ('p', 'R', 'cocap.UP', 'cocap.AWPP')
('p', 'A', 'cocap.UP', 'cocap.AWPP') => ('p', 'AA', 'cocap.UP', 'cocap.AWPP')
('p', 'A', 'cocap.UP', 'co.AWPP') => ('p', 'R', 'cocap.UP', 'co.AWPP')
('p', 'A', 'cocap.UP', 'co.AWPP') => ('p', 'AA', 'cocap.UP', 'co.AWPP')
('p', 'A', 'cocap.UP', 'AWPP') => ('p', 'R', 'cocap.UP', 'AWPP')
('p', 'A', 'cocap.UP', 'AWPP') => ('p', 'AA', 'cocap.UP', 'AWPP')
('p', 'A', 'cocap.UP', 'PSPACE/poly') => ('p', 'R', 'cocap.UP', 'PSPACE/poly')
('p', 'A', 'cocap.UP', 'PSPACE/poly') => ('p', 'AA', 'cocap.UP', 'PSPACE/poly')
('p', 'AA', 'cocap.UP', 'PSPACE/poly') => ('p', 'T', 'cocap.UP', 'PSPACE/poly')
('p', 'AA', 'cocap.UP', 'PSPACE/poly') => ('p', 'EA', 'cocap.UP', 'PSPACE/poly')
('p', 'A', 'cocap.UP', 'PSPACE') => ('p', 'R', 'cocap.UP', 'PSPACE')
('p', 'A', 'cocap.UP', 'PSPACE') => ('p', 'AA', 'cocap.UP', 'PSPACE')
('p', 'AA', 'cocap.UP', 'PSPACE') => ('p', 'T', 'cocap.UP', 'PSPACE')
('p', 'AA', 'cocap.UP', 'PSPACE') => ('p', 'EA', 'cocap.UP', 'PSPACE')
('p', 'A', 'cocap.UP', 'PP/poly') => ('p', 'R', 'cocap.UP', 'PP/poly')
('p', 'A', 'cocap.UP', 'PP/poly') => ('p', 'AA', 'cocap.UP', 'PP/poly')
('p', 'AA', 'cocap.UP', 'PP/poly') => ('p', 'T', 'cocap.UP', 'PP/poly')
('p', 'AA', 'cocap.UP', 'PP/poly') => ('p', 'EA', 'cocap.UP', 'PP/poly')
('p', 'A', 'cocap.UP', 'PP') => ('p', 'R', 'cocap.UP', 'PP')
('p', 'A', 'cocap.UP', 'PP') => ('p', 'AA', 'cocap.UP', 'PP')
('p', 'AA', 'cocap.UP', 'PP') => ('p', 'T', 'cocap.UP', 'PP')
('p', 'AA', 'cocap.UP', 'PP') => ('p', 'EA', 'cocap.UP', 'PP')
('p', 'AA', 'cocap.UP', 'AWPP') => ('p', 'T', 'cocap.UP', 'AWPP')
('p', 'AA', 'cocap.UP', 'AWPP') => ('p', 'EA', 'cocap.UP', 'AWPP')
('p', 'AA', 'cocap.UP', 'co.AWPP') => ('p', 'T', 'cocap.UP', 'co.AWPP')
('p', 'AA', 'cocap.UP', 'co.AWPP') => ('p', 'EA', 'cocap.UP', 'co.AWPP')
('p', 'AA', 'cocap.UP', 'cocap.AWPP') => ('p', 'T', 'cocap.UP', 'cocap.AWPP')
('p', 'AA', 'cocap.UP', 'cocap.AWPP') => ('p', 'EA', 'cocap.UP', 'cocap.AWPP')
('p', 'A', 'SPP', 'PSPACE/poly') => ('p', 'R', 'SPP', 'PSPACE/poly')
('p', 'A', 'SPP', 'PSPACE/poly') => ('p', 'AA', 'SPP', 'PSPACE/poly')
('p', 'A', 'co.UP', 'PSPACE/poly') => ('p', 'R', 'co.UP', 'PSPACE/poly')
('p', 'A', 'co.UP', 'PSPACE/poly') => ('p', 'AA', 'co.UP', 'PSPACE/poly')
('p', 'A', 'UP', 'PSPACE/poly') => ('p', 'R', 'UP', 'PSPACE/poly')
('p', 'A', 'UP', 'PSPACE/poly') => ('p', 'AA', 'UP', 'PSPACE/poly')
('p', 'AA', 'UP', 'PSPACE/poly') => ('p', 'T', 'UP', 'PSPACE/poly')
('p', 'AA', 'UP', 'PSPACE/poly') => ('p', 'EA', 'UP', 'PSPACE/poly')
('p', 'AA', 'co.UP', 'PSPACE/poly') => ('p', 'T', 'co.UP', 'PSPACE/poly')
('p', 'AA', 'co.UP', 'PSPACE/poly') => ('p', 'EA', 'co.UP', 'PSPACE/poly')
('p', 'AA', 'SPP', 'PSPACE/poly') => ('p', 'T', 'SPP', 'PSPACE/poly')
('p', 'AA', 'SPP', 'PSPACE/poly') => ('p', 'EA', 'SPP', 'PSPACE/poly')
('p', 'A', 'co.UP', 'cocap.AWPP') => ('p', 'R', 'co.UP', 'cocap.AWPP')
('p', 'A', 'co.UP', 'cocap.AWPP') => ('p', 'AA', 'co.UP', 'cocap.AWPP')
('p', 'A', 'UP', 'cocap.AWPP') => ('p', 'R', 'UP', 'cocap.AWPP')
('p', 'A', 'UP', 'cocap.AWPP') => ('p', 'AA', 'UP', 'cocap.AWPP')
('p', 'A', 'UP', 'co.AWPP') => ('p', 'R', 'UP', 'co.AWPP')
('p', 'A', 'UP', 'co.AWPP') => ('p', 'AA', 'UP', 'co.AWPP')
('p', 'A', 'co.UP', 'AWPP') => ('p', 'R', 'co.UP', 'AWPP')
('p', 'A', 'co.UP', 'AWPP') => ('p', 'AA', 'co.UP', 'AWPP')
('p', 'A', 'co.UP', 'PSPACE') => ('p', 'R', 'co.UP', 'PSPACE')
('p', 'A', 'co.UP', 'PSPACE') => ('p', 'AA', 'co.UP', 'PSPACE')
('p', 'A', 'UP', 'PSPACE') => ('p', 'R', 'UP', 'PSPACE')
('p', 'A', 'UP', 'PSPACE') => ('p', 'AA', 'UP', 'PSPACE')
('p', 'AA', 'UP', 'PSPACE') => ('p', 'T', 'UP', 'PSPACE')
('p', 'AA', 'UP', 'PSPACE') => ('p', 'EA', 'UP', 'PSPACE')
('p', 'AA', 'co.UP', 'PSPACE') => ('p', 'T', 'co.UP', 'PSPACE')
('p', 'AA', 'co.UP', 'PSPACE') => ('p', 'EA', 'co.UP', 'PSPACE')
('p', 'A', 'co.UP', 'PP/poly') => ('p', 'R', 'co.UP', 'PP/poly')
('p', 'A', 'co.UP', 'PP/poly') => ('p', 'AA', 'co.UP', 'PP/poly')
('p', 'A', 'UP', 'PP/poly') => ('p', 'R', 'UP', 'PP/poly')
('p', 'A', 'UP', 'PP/poly') => ('p', 'AA', 'UP', 'PP/poly')
('p', 'AA', 'UP', 'PP/poly') => ('p', 'T', 'UP', 'PP/poly')
('p', 'AA', 'UP', 'PP/poly') => ('p', 'EA', 'UP', 'PP/poly')
('p', 'AA', 'co.UP', 'PP/poly') => ('p', 'T', 'co.UP', 'PP/poly')
('p', 'AA', 'co.UP', 'PP/poly') => ('p', 'EA', 'co.UP', 'PP/poly')
('p', 'A', 'co.UP', 'PP') => ('p', 'R', 'co.UP', 'PP')
('p', 'A', 'co.UP', 'PP') => ('p', 'AA', 'co.UP', 'PP')
('p', 'A', 'UP', 'PP') => ('p', 'R', 'UP', 'PP')
('p', 'A', 'UP', 'PP') => ('p', 'AA', 'UP', 'PP')
('p', 'AA', 'UP', 'PP') => ('p', 'T', 'UP', 'PP')
('p', 'AA', 'UP', 'PP') => ('p', 'EA', 'UP', 'PP')
('p', 'AA', 'co.UP', 'PP') => ('p', 'T', 'co.UP', 'PP')
('p', 'AA', 'co.UP', 'PP') => ('p', 'EA', 'co.UP', 'PP')
('p', 'AA', 'co.UP', 'AWPP') => ('p', 'T', 'co.UP', 'AWPP')
('p', 'AA', 'co.UP', 'AWPP') => ('p', 'EA', 'co.UP', 'AWPP')
('p', 'AA', 'UP', 'co.AWPP') => ('p', 'T', 'UP', 'co.AWPP')
('p', 'AA', 'UP', 'co.AWPP') => ('p', 'EA', 'UP', 'co.AWPP')
('p', 'A', 'UP', 'AWPP') => ('p', 'R', 'UP', 'AWPP')
('p', 'A', 'UP', 'AWPP') => ('p', 'AA', 'UP', 'AWPP')
('p', 'A', 'co.UP', 'co.AWPP') => ('p', 'R', 'co.UP', 'co.AWPP')
('p', 'A', 'co.UP', 'co.AWPP') => ('p', 'AA', 'co.UP', 'co.AWPP')
('p', 'AA', 'co.UP', 'co.AWPP') => ('p', 'T', 'co.UP', 'co.AWPP')
('p', 'AA', 'co.UP', 'co.AWPP') => ('p', 'EA', 'co.UP', 'co.AWPP')
('p', 'AA', 'co.UP', 'cocap.AWPP') => ('p', 'T', 'co.UP', 'cocap.AWPP')
('p', 'AA', 'co.UP', 'cocap.AWPP') => ('p', 'EA', 'co.UP', 'cocap.AWPP')
('p', 'AA', 'UP', 'cocap.AWPP') => ('p', 'T', 'UP', 'cocap.AWPP')
('p', 'AA', 'UP', 'cocap.AWPP') => ('p', 'EA', 'UP', 'cocap.AWPP')
('p', 'AA', 'UP', 'AWPP') => ('p', 'T', 'UP', 'AWPP')
('p', 'AA', 'UP', 'AWPP') => ('p', 'EA', 'UP', 'AWPP')
('p', 'A', 'SPP', 'PSPACE') => ('p', 'R', 'SPP', 'PSPACE')
('p', 'A', 'SPP', 'PSPACE') => ('p', 'AA', 'SPP', 'PSPACE')
('p', 'AA', 'SPP', 'PSPACE') => ('p', 'T', 'SPP', 'PSPACE')
('p', 'AA', 'SPP', 'PSPACE') => ('p', 'EA', 'SPP', 'PSPACE')
('p', 'A', 'SPP', 'PP/poly') => ('p', 'R', 'SPP', 'PP/poly')
('p', 'A', 'SPP', 'PP/poly') => ('p', 'AA', 'SPP', 'PP/poly')
('p', 'AA', 'SPP', 'PP/poly') => ('p', 'T', 'SPP', 'PP/poly')
('p', 'AA', 'SPP', 'PP/poly') => ('p', 'EA', 'SPP', 'PP/poly')
('p', 'A', 'SPP', 'PP') => ('p', 'R', 'SPP', 'PP')
('p', 'A', 'SPP', 'PP') => ('p', 'AA', 'SPP', 'PP')
('p', 'AA', 'SPP', 'PP') => ('p', 'T', 'SPP', 'PP')
('p', 'AA', 'SPP', 'PP') => ('p', 'EA', 'SPP', 'PP')
('p', 'AA', 'SPP', 'cocap.AWPP') => ('p', 'T', 'SPP', 'cocap.AWPP')
('p', 'AA', 'SPP', 'cocap.AWPP') => ('p', 'EA', 'SPP', 'cocap.AWPP')
('p', 'AA', 'SPP', 'co.AWPP') => ('p', 'T', 'SPP', 'co.AWPP')
('p', 'AA', 'SPP', 'co.AWPP') => ('p', 'EA', 'SPP', 'co.AWPP')
('p', 'AA', 'SPP', 'AWPP') => ('p', 'T', 'SPP', 'AWPP')
('p', 'AA', 'SPP', 'AWPP') => ('p', 'EA', 'SPP', 'AWPP')
('p', 'A', 'PSPACE', 'EXP_plo') => ('-d', 'A', 'PSPACE', 'EXP_plo')
('p', 'A', 'PSPACE', 'EXP_plo') => ('p', 'R', 'PSPACE', 'EXP_plo')
('p', 'A', 'PSPACE', 'EXP_plo') => ('p', 'AA', 'PSPACE', 'EXP_plo')
('p', 'A', 'RP', 'EXP_plo') => ('-d', 'A', 'RP', 'EXP_plo')
('p', 'A', 'RP', 'EXP_plo') => ('p', 'R', 'RP', 'EXP_plo')
('p', 'A', 'RP', 'EXP_plo') => ('p', 'AA', 'RP', 'EXP_plo')
('p', 'A', 'co.RP', 'EXP_plo') => ('-d', 'A', 'co.RP', 'EXP_plo')
('p', 'A', 'co.RP', 'EXP_plo') => ('p', 'R', 'co.RP', 'EXP_plo')
('p', 'A', 'co.RP', 'EXP_plo') => ('p', 'AA', 'co.RP', 'EXP_plo')
('p', 'A', 'ZPP', 'EXP_plo') => ('-d', 'A', 'ZPP', 'EXP_plo')
('p', 'A', 'ZPP', 'EXP_plo') => ('p', 'R', 'ZPP', 'EXP_plo')
('p', 'A', 'ZPP', 'EXP_plo') => ('p', 'AA', 'ZPP', 'EXP_plo')
('p', 'A', 'P', 'EXP_plo') => ('-d', 'A', 'P', 'EXP_plo')
('p', 'A', 'P', 'EXP_plo') => ('p', 'R', 'P', 'EXP_plo')
('p', 'A', 'P', 'EXP_plo') => ('p', 'AA', 'P', 'EXP_plo')
('p', 'E', 'EXP_plo', 'EXP_plo') => ('-d', 'E', 'EXP_plo', 'EXP_plo')
('p', 'AA', 'P', 'EXP_plo') => ('-d', 'AA', 'P', 'EXP_plo')
('p', 'AA', 'P', 'EXP_plo') => ('p', 'T', 'P', 'EXP_plo')
('p', 'AA', 'P', 'EXP_plo') => ('p', 'EA', 'P', 'EXP_plo')
('p', 'EA', 'P', 'EXP_plo') => ('-d', 'EA', 'P', 'EXP_plo')
('p', 'T', 'P', 'EXP_plo') => ('-d', 'T', 'P', 'EXP_plo')
('p', 'R', 'P', 'EXP_plo') => ('-d', 'R', 'P', 'EXP_plo')
('-p', 'R', 'EXP_plo', 'P') => ('-p', 'A', 'EXP_plo', 'P')
('p', 'AA', 'ZPP', 'EXP_plo') => ('-d', 'AA', 'ZPP', 'EXP_plo')
('p', 'AA', 'ZPP', 'EXP_plo') => ('p', 'T', 'ZPP', 'EXP_plo')
('p', 'AA', 'ZPP', 'EXP_plo') => ('p', 'EA', 'ZPP', 'EXP_plo')
('p', 'EA', 'ZPP', 'EXP_plo') => ('-d', 'EA', 'ZPP', 'EXP_plo')
('p', 'T', 'ZPP', 'EXP_plo') => ('-d', 'T', 'ZPP', 'EXP_plo')
('-d', 'A', 'co.RP', 'cocap.NEXP_plo') => ('-d', 'AA', 'co.RP', 'cocap.NEXP_plo')
('-d', 'A', 'RP', 'cocap.NEXP_plo') => ('-d', 'AA', 'RP', 'cocap.NEXP_plo')
('-d', 'A', 'RP', 'co.NEXP') => ('-d', 'AA', 'RP', 'co.NEXP')
('-d', 'A', 'RP', 'cocap.NEXP') => ('-d', 'AA', 'RP', 'cocap.NEXP')
('-d', 'A', 'co.RP', 'cocap.NEXP') => ('-d', 'AA', 'co.RP', 'cocap.NEXP')
('-d', 'A', 'co.RP', 'NEXP') => ('-d', 'AA', 'co.RP', 'NEXP')
('-d', 'AA', 'co.RP', 'NEXP') => ('-d', 'T', 'co.RP', 'NEXP')
('-d', 'AA', 'co.RP', 'NEXP') => ('-d', 'EA', 'co.RP', 'NEXP')
('-d', 'AA', 'co.RP', 'cocap.NEXP') => ('-d', 'T', 'co.RP', 'cocap.NEXP')
('-d', 'AA', 'co.RP', 'cocap.NEXP') => ('-d', 'EA', 'co.RP', 'cocap.NEXP')
('-d', 'AA', 'RP', 'cocap.NEXP') => ('-d', 'T', 'RP', 'cocap.NEXP')
('-d', 'AA', 'RP', 'cocap.NEXP') => ('-d', 'EA', 'RP', 'cocap.NEXP')
('-d', 'AA', 'RP', 'co.NEXP') => ('-d', 'T', 'RP', 'co.NEXP')
('-d', 'AA', 'RP', 'co.NEXP') => ('-d', 'EA', 'RP', 'co.NEXP')
('-d', 'A', 'RP', 'co.NEXP_plo') => ('-d', 'AA', 'RP', 'co.NEXP_plo')
('-d', 'A', 'co.RP', 'NEXP_plo') => ('-d', 'AA', 'co.RP', 'NEXP_plo')
('-d', 'A', 'co.RP', 'AH_plo') => ('-d', 'AA', 'co.RP', 'AH_plo')
('-d', 'A', 'co.RP', 'cocap.AH_plo') => ('-d', 'AA', 'co.RP', 'cocap.AH_plo')
('-d', 'A', 'RP', 'cocap.AH_plo') => ('-d', 'AA', 'RP', 'cocap.AH_plo')
('-d', 'A', 'RP', 'co.AH_plo') => ('-d', 'AA', 'RP', 'co.AH_plo')
('-d', 'AA', 'RP', 'co.AH_plo') => ('-d', 'T', 'RP', 'co.AH_plo')
('-d', 'AA', 'RP', 'co.AH_plo') => ('-d', 'EA', 'RP', 'co.AH_plo')
('-d', 'AA', 'RP', 'cocap.AH_plo') => ('-d', 'T', 'RP', 'cocap.AH_plo')
('-d', 'AA', 'RP', 'cocap.AH_plo') => ('-d', 'EA', 'RP', 'cocap.AH_plo')
('-d', 'AA', 'co.RP', 'cocap.AH_plo') => ('-d', 'T', 'co.RP', 'cocap.AH_plo')
('-d', 'AA', 'co.RP', 'cocap.AH_plo') => ('-d', 'EA', 'co.RP', 'cocap.AH_plo')
('-d', 'AA', 'co.RP', 'AH_plo') => ('-d', 'T', 'co.RP', 'AH_plo')
('-d', 'AA', 'co.RP', 'AH_plo') => ('-d', 'EA', 'co.RP', 'AH_plo')
('-d', 'AA', 'co.RP', 'NEXP_plo') => ('-d', 'T', 'co.RP', 'NEXP_plo')
('-d', 'AA', 'co.RP', 'NEXP_plo') => ('-d', 'EA', 'co.RP', 'NEXP_plo')
('-d', 'AA', 'co.RP', 'cocap.NEXP_plo') => ('-d', 'T', 'co.RP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.RP', 'cocap.NEXP_plo') => ('-d', 'EA', 'co.RP', 'cocap.NEXP_plo')
('-d', 'AA', 'RP', 'cocap.NEXP_plo') => ('-d', 'T', 'RP', 'cocap.NEXP_plo')
('-d', 'AA', 'RP', 'cocap.NEXP_plo') => ('-d', 'EA', 'RP', 'cocap.NEXP_plo')
('-d', 'AA', 'RP', 'co.NEXP_plo') => ('-d', 'T', 'RP', 'co.NEXP_plo')
('-d', 'AA', 'RP', 'co.NEXP_plo') => ('-d', 'EA', 'RP', 'co.NEXP_plo')
('p', 'A', 'co.RP', 'cocap.NEXP_plo') => ('p', 'R', 'co.RP', 'cocap.NEXP_plo')
('p', 'A', 'co.RP', 'cocap.NEXP_plo') => ('p', 'AA', 'co.RP', 'cocap.NEXP_plo')
('p', 'A', 'RP', 'cocap.NEXP_plo') => ('p', 'R', 'RP', 'cocap.NEXP_plo')
('p', 'A', 'RP', 'cocap.NEXP_plo') => ('p', 'AA', 'RP', 'cocap.NEXP_plo')
('p', 'A', 'RP', 'co.NEXP') => ('p', 'R', 'RP', 'co.NEXP')
('p', 'A', 'RP', 'co.NEXP') => ('p', 'AA', 'RP', 'co.NEXP')
('p', 'A', 'RP', 'cocap.NEXP') => ('p', 'R', 'RP', 'cocap.NEXP')
('p', 'A', 'RP', 'cocap.NEXP') => ('p', 'AA', 'RP', 'cocap.NEXP')
('p', 'A', 'co.RP', 'cocap.NEXP') => ('p', 'R', 'co.RP', 'cocap.NEXP')
('p', 'A', 'co.RP', 'cocap.NEXP') => ('p', 'AA', 'co.RP', 'cocap.NEXP')
('p', 'A', 'co.RP', 'NEXP') => ('p', 'R', 'co.RP', 'NEXP')
('p', 'A', 'co.RP', 'NEXP') => ('p', 'AA', 'co.RP', 'NEXP')
('p', 'AA', 'co.RP', 'NEXP') => ('p', 'T', 'co.RP', 'NEXP')
('p', 'AA', 'co.RP', 'NEXP') => ('p', 'EA', 'co.RP', 'NEXP')
('p', 'AA', 'co.RP', 'cocap.NEXP') => ('p', 'T', 'co.RP', 'cocap.NEXP')
('p', 'AA', 'co.RP', 'cocap.NEXP') => ('p', 'EA', 'co.RP', 'cocap.NEXP')
('p', 'AA', 'RP', 'cocap.NEXP') => ('p', 'T', 'RP', 'cocap.NEXP')
('p', 'AA', 'RP', 'cocap.NEXP') => ('p', 'EA', 'RP', 'cocap.NEXP')
('p', 'AA', 'RP', 'co.NEXP') => ('p', 'T', 'RP', 'co.NEXP')
('p', 'AA', 'RP', 'co.NEXP') => ('p', 'EA', 'RP', 'co.NEXP')
('p', 'A', 'RP', 'co.NEXP_plo') => ('p', 'R', 'RP', 'co.NEXP_plo')
('p', 'A', 'RP', 'co.NEXP_plo') => ('p', 'AA', 'RP', 'co.NEXP_plo')
('p', 'A', 'co.RP', 'NEXP_plo') => ('p', 'R', 'co.RP', 'NEXP_plo')
('p', 'A', 'co.RP', 'NEXP_plo') => ('p', 'AA', 'co.RP', 'NEXP_plo')
('p', 'A', 'co.RP', 'AH_plo') => ('p', 'R', 'co.RP', 'AH_plo')
('p', 'A', 'co.RP', 'AH_plo') => ('p', 'AA', 'co.RP', 'AH_plo')
('p', 'A', 'co.RP', 'cocap.AH_plo') => ('p', 'R', 'co.RP', 'cocap.AH_plo')
('p', 'A', 'co.RP', 'cocap.AH_plo') => ('p', 'AA', 'co.RP', 'cocap.AH_plo')
('p', 'A', 'RP', 'cocap.AH_plo') => ('p', 'R', 'RP', 'cocap.AH_plo')
('p', 'A', 'RP', 'cocap.AH_plo') => ('p', 'AA', 'RP', 'cocap.AH_plo')
('p', 'A', 'RP', 'co.AH_plo') => ('p', 'R', 'RP', 'co.AH_plo')
('p', 'A', 'RP', 'co.AH_plo') => ('p', 'AA', 'RP', 'co.AH_plo')
('p', 'AA', 'RP', 'co.AH_plo') => ('p', 'T', 'RP', 'co.AH_plo')
('p', 'AA', 'RP', 'co.AH_plo') => ('p', 'EA', 'RP', 'co.AH_plo')
('p', 'AA', 'RP', 'cocap.AH_plo') => ('p', 'T', 'RP', 'cocap.AH_plo')
('p', 'AA', 'RP', 'cocap.AH_plo') => ('p', 'EA', 'RP', 'cocap.AH_plo')
('p', 'AA', 'co.RP', 'cocap.AH_plo') => ('p', 'T', 'co.RP', 'cocap.AH_plo')
('p', 'AA', 'co.RP', 'cocap.AH_plo') => ('p', 'EA', 'co.RP', 'cocap.AH_plo')
('p', 'AA', 'co.RP', 'AH_plo') => ('p', 'T', 'co.RP', 'AH_plo')
('p', 'AA', 'co.RP', 'AH_plo') => ('p', 'EA', 'co.RP', 'AH_plo')
('p', 'AA', 'co.RP', 'NEXP_plo') => ('p', 'T', 'co.RP', 'NEXP_plo')
('p', 'AA', 'co.RP', 'NEXP_plo') => ('p', 'EA', 'co.RP', 'NEXP_plo')
('p', 'AA', 'co.RP', 'cocap.NEXP_plo') => ('p', 'T', 'co.RP', 'cocap.NEXP_plo')
('p', 'AA', 'co.RP', 'cocap.NEXP_plo') => ('p', 'EA', 'co.RP', 'cocap.NEXP_plo')
('p', 'AA', 'RP', 'cocap.NEXP_plo') => ('p', 'T', 'RP', 'cocap.NEXP_plo')
('p', 'AA', 'RP', 'cocap.NEXP_plo') => ('p', 'EA', 'RP', 'cocap.NEXP_plo')
('p', 'AA', 'RP', 'co.NEXP_plo') => ('p', 'T', 'RP', 'co.NEXP_plo')
('p', 'AA', 'RP', 'co.NEXP_plo') => ('p', 'EA', 'RP', 'co.NEXP_plo')
('p', 'AA', 'co.RP', 'EXP_plo') => ('-d', 'AA', 'co.RP', 'EXP_plo')
('p', 'AA', 'co.RP', 'EXP_plo') => ('p', 'T', 'co.RP', 'EXP_plo')
('p', 'AA', 'co.RP', 'EXP_plo') => ('p', 'EA', 'co.RP', 'EXP_plo')
('p', 'AA', 'RP', 'EXP_plo') => ('-d', 'AA', 'RP', 'EXP_plo')
('p', 'AA', 'RP', 'EXP_plo') => ('p', 'T', 'RP', 'EXP_plo')
('p', 'AA', 'RP', 'EXP_plo') => ('p', 'EA', 'RP', 'EXP_plo')
('p', 'EA', 'RP', 'EXP_plo') => ('-d', 'EA', 'RP', 'EXP_plo')
('p', 'EA', 'co.RP', 'EXP_plo') => ('-d', 'EA', 'co.RP', 'EXP_plo')
('p', 'T', 'RP', 'EXP_plo') => ('-d', 'T', 'RP', 'EXP_plo')
('p', 'T', 'co.RP', 'EXP_plo') => ('-d', 'T', 'co.RP', 'EXP_plo')
('d', 'A', 'EXP_plo', 'RP') => ('-p', 'A', 'EXP_plo', 'RP')
('d', 'A', 'EXP_plo', 'co.RP') => ('-p', 'A', 'EXP_plo', 'co.RP')
('p', 'A', 'co.AWPP', 'EXP_plo') => ('-d', 'A', 'co.AWPP', 'EXP_plo')
('p', 'A', 'co.AWPP', 'EXP_plo') => ('p', 'R', 'co.AWPP', 'EXP_plo')
('p', 'A', 'co.AWPP', 'EXP_plo') => ('p', 'AA', 'co.AWPP', 'EXP_plo')
('p', 'A', 'AWPP', 'EXP_plo') => ('-d', 'A', 'AWPP', 'EXP_plo')
('p', 'A', 'AWPP', 'EXP_plo') => ('p', 'R', 'AWPP', 'EXP_plo')
('p', 'A', 'AWPP', 'EXP_plo') => ('p', 'AA', 'AWPP', 'EXP_plo')
('p', 'A', 'cocap.AWPP', 'EXP_plo') => ('-d', 'A', 'cocap.AWPP', 'EXP_plo')
('p', 'A', 'cocap.AWPP', 'EXP_plo') => ('p', 'R', 'cocap.AWPP', 'EXP_plo')
('p', 'A', 'cocap.AWPP', 'EXP_plo') => ('p', 'AA', 'cocap.AWPP', 'EXP_plo')
('-d', 'A', 'cocap.AWPP', 'ALL') => ('-d', 'R', 'cocap.AWPP', 'ALL')
('-d', 'A', 'cocap.AWPP', 'ALL') => ('-d', 'AA', 'cocap.AWPP', 'ALL')
('-d', 'A', 'cocap.UP', 'ALL') => ('-d', 'R', 'cocap.UP', 'ALL')
('-d', 'A', 'cocap.UP', 'ALL') => ('-d', 'AA', 'cocap.UP', 'ALL')
('-d', 'AA', 'cocap.UP', 'ALL') => ('-d', 'T', 'cocap.UP', 'ALL')
('-d', 'AA', 'cocap.UP', 'ALL') => ('-d', 'EA', 'cocap.UP', 'ALL')
('-d', 'A', 'SPP', 'ALL') => ('-d', 'R', 'SPP', 'ALL')
('-d', 'A', 'SPP', 'ALL') => ('-d', 'AA', 'SPP', 'ALL')
('-d', 'A', 'co.UP', 'ALL') => ('-d', 'R', 'co.UP', 'ALL')
('-d', 'A', 'co.UP', 'ALL') => ('-d', 'AA', 'co.UP', 'ALL')
('-d', 'A', 'UP', 'ALL') => ('-d', 'R', 'UP', 'ALL')
('-d', 'A', 'UP', 'ALL') => ('-d', 'AA', 'UP', 'ALL')
('-d', 'AA', 'UP', 'ALL') => ('-d', 'T', 'UP', 'ALL')
('-d', 'AA', 'UP', 'ALL') => ('-d', 'EA', 'UP', 'ALL')
('-d', 'AA', 'co.UP', 'ALL') => ('-d', 'T', 'co.UP', 'ALL')
('-d', 'AA', 'co.UP', 'ALL') => ('-d', 'EA', 'co.UP', 'ALL')
('-d', 'AA', 'SPP', 'ALL') => ('-d', 'T', 'SPP', 'ALL')
('-d', 'AA', 'SPP', 'ALL') => ('-d', 'EA', 'SPP', 'ALL')
('-d', 'AA', 'cocap.AWPP', 'ALL') => ('-d', 'T', 'cocap.AWPP', 'ALL')
('-d', 'AA', 'cocap.AWPP', 'ALL') => ('-d', 'EA', 'cocap.AWPP', 'ALL')
('p', 'A', 'cocap.AWPP', 'ALL') => ('p', 'R', 'cocap.AWPP', 'ALL')
('p', 'A', 'cocap.AWPP', 'ALL') => ('p', 'AA', 'cocap.AWPP', 'ALL')
('p', 'A', 'cocap.UP', 'ALL') => ('p', 'R', 'cocap.UP', 'ALL')
('p', 'A', 'cocap.UP', 'ALL') => ('p', 'AA', 'cocap.UP', 'ALL')
('p', 'AA', 'cocap.UP', 'ALL') => ('p', 'T', 'cocap.UP', 'ALL')
('p', 'AA', 'cocap.UP', 'ALL') => ('p', 'EA', 'cocap.UP', 'ALL')
('p', 'A', 'SPP', 'ALL') => ('p', 'R', 'SPP', 'ALL')
('p', 'A', 'SPP', 'ALL') => ('p', 'AA', 'SPP', 'ALL')
('p', 'A', 'co.UP', 'ALL') => ('p', 'R', 'co.UP', 'ALL')
('p', 'A', 'co.UP', 'ALL') => ('p', 'AA', 'co.UP', 'ALL')
('p', 'A', 'UP', 'ALL') => ('p', 'R', 'UP', 'ALL')
('p', 'A', 'UP', 'ALL') => ('p', 'AA', 'UP', 'ALL')
('p', 'AA', 'UP', 'ALL') => ('p', 'T', 'UP', 'ALL')
('p', 'AA', 'UP', 'ALL') => ('p', 'EA', 'UP', 'ALL')
('p', 'AA', 'co.UP', 'ALL') => ('p', 'T', 'co.UP', 'ALL')
('p', 'AA', 'co.UP', 'ALL') => ('p', 'EA', 'co.UP', 'ALL')
('p', 'AA', 'SPP', 'ALL') => ('p', 'T', 'SPP', 'ALL')
('p', 'AA', 'SPP', 'ALL') => ('p', 'EA', 'SPP', 'ALL')
('p', 'AA', 'cocap.AWPP', 'ALL') => ('p', 'T', 'cocap.AWPP', 'ALL')
('p', 'AA', 'cocap.AWPP', 'ALL') => ('p', 'EA', 'cocap.AWPP', 'ALL')
('p', 'E', 'co.Sigma_2P', 'EXP_plo') => ('-d', 'E', 'co.Sigma_2P', 'EXP_plo')
('p', 'E', 'Sigma_2P', 'EXP_plo') => ('-d', 'E', 'Sigma_2P', 'EXP_plo')
('p', 'E', 'cocap.Sigma_2P', 'EXP_plo') => ('-d', 'E', 'cocap.Sigma_2P', 'EXP_plo')
('p', 'E', 'Delta_2P', 'EXP_plo') => ('-d', 'E', 'Delta_2P', 'EXP_plo')
('p', 'E', 'S_2P', 'EXP_plo') => ('-d', 'E', 'S_2P', 'EXP_plo')
('d', 'A', 'EXP_plo', 'co.Sigma_2P') => ('-p', 'A', 'EXP_plo', 'co.Sigma_2P')
('d', 'A', 'EXP_plo', 'Sigma_2P') => ('-p', 'A', 'EXP_plo', 'Sigma_2P')
('p', 'E', 'PH', 'EXP_plo') => ('-d', 'E', 'PH', 'EXP_plo')
('p', 'E', 'Delta_3P', 'EXP_plo') => ('-d', 'E', 'Delta_3P', 'EXP_plo')
('d', 'A', 'EXP_plo', 'PH') => ('-p', 'A', 'EXP_plo', 'PH')
('-d', 'A', 'cocap.AWPP', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.AWPP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.AWPP', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.AWPP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.UP', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.UP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.UP', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.UP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.UP', 'co.NEXP') => ('-d', 'R', 'cocap.UP', 'co.NEXP')
('-d', 'A', 'cocap.UP', 'co.NEXP') => ('-d', 'AA', 'cocap.UP', 'co.NEXP')
('-d', 'A', 'cocap.UP', 'NEXP') => ('-d', 'R', 'cocap.UP', 'NEXP')
('-d', 'A', 'cocap.UP', 'NEXP') => ('-d', 'AA', 'cocap.UP', 'NEXP')
('-d', 'A', 'cocap.UP', 'cocap.NEXP') => ('-d', 'R', 'cocap.UP', 'cocap.NEXP')
('-d', 'A', 'cocap.UP', 'cocap.NEXP') => ('-d', 'AA', 'cocap.UP', 'cocap.NEXP')
('-d', 'A', 'cocap.UP', 'R') => ('-d', 'R', 'cocap.UP', 'R')
('-d', 'A', 'cocap.UP', 'R') => ('-d', 'AA', 'cocap.UP', 'R')
('-d', 'A', 'cocap.UP', 'RE') => ('-d', 'R', 'cocap.UP', 'RE')
('-d', 'A', 'cocap.UP', 'RE') => ('-d', 'AA', 'cocap.UP', 'RE')
('-d', 'A', 'cocap.UP', 'co.RE') => ('-d', 'R', 'cocap.UP', 'co.RE')
('-d', 'A', 'cocap.UP', 'co.RE') => ('-d', 'AA', 'cocap.UP', 'co.RE')
('-d', 'AA', 'cocap.UP', 'co.RE') => ('-d', 'T', 'cocap.UP', 'co.RE')
('-d', 'AA', 'cocap.UP', 'co.RE') => ('-d', 'EA', 'cocap.UP', 'co.RE')
('-d', 'AA', 'cocap.UP', 'RE') => ('-d', 'T', 'cocap.UP', 'RE')
('-d', 'AA', 'cocap.UP', 'RE') => ('-d', 'EA', 'cocap.UP', 'RE')
('-d', 'AA', 'cocap.UP', 'R') => ('-d', 'T', 'cocap.UP', 'R')
('-d', 'AA', 'cocap.UP', 'R') => ('-d', 'EA', 'cocap.UP', 'R')
('-d', 'A', 'cocap.UP', 'NEXP/poly') => ('-d', 'R', 'cocap.UP', 'NEXP/poly')
('-d', 'A', 'cocap.UP', 'NEXP/poly') => ('-d', 'AA', 'cocap.UP', 'NEXP/poly')
('-d', 'AA', 'cocap.UP', 'NEXP/poly') => ('-d', 'T', 'cocap.UP', 'NEXP/poly')
('-d', 'AA', 'cocap.UP', 'NEXP/poly') => ('-d', 'EA', 'cocap.UP', 'NEXP/poly')
('-d', 'AA', 'cocap.UP', 'cocap.NEXP') => ('-d', 'T', 'cocap.UP', 'cocap.NEXP')
('-d', 'AA', 'cocap.UP', 'cocap.NEXP') => ('-d', 'EA', 'cocap.UP', 'cocap.NEXP')
('-d', 'AA', 'cocap.UP', 'co.NEXP') => ('-d', 'T', 'cocap.UP', 'co.NEXP')
('-d', 'AA', 'cocap.UP', 'co.NEXP') => ('-d', 'EA', 'cocap.UP', 'co.NEXP')
('-d', 'AA', 'cocap.UP', 'NEXP') => ('-d', 'T', 'cocap.UP', 'NEXP')
('-d', 'AA', 'cocap.UP', 'NEXP') => ('-d', 'EA', 'cocap.UP', 'NEXP')
('-d', 'A', 'cocap.UP', 'co.NEXP_plo') => ('-d', 'R', 'cocap.UP', 'co.NEXP_plo')
('-d', 'A', 'cocap.UP', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.UP', 'co.NEXP_plo')
('-d', 'A', 'cocap.UP', 'NEXP_plo') => ('-d', 'R', 'cocap.UP', 'NEXP_plo')
('-d', 'A', 'cocap.UP', 'NEXP_plo') => ('-d', 'AA', 'cocap.UP', 'NEXP_plo')
('-d', 'A', 'cocap.UP', 'AH') => ('-d', 'R', 'cocap.UP', 'AH')
('-d', 'A', 'cocap.UP', 'AH') => ('-d', 'AA', 'cocap.UP', 'AH')
('-d', 'AA', 'cocap.UP', 'AH') => ('-d', 'T', 'cocap.UP', 'AH')
('-d', 'AA', 'cocap.UP', 'AH') => ('-d', 'EA', 'cocap.UP', 'AH')
('-d', 'A', 'cocap.UP', 'AH_plo') => ('-d', 'R', 'cocap.UP', 'AH_plo')
('-d', 'A', 'cocap.UP', 'AH_plo') => ('-d', 'AA', 'cocap.UP', 'AH_plo')
('-d', 'A', 'cocap.UP', 'co.AH_plo') => ('-d', 'R', 'cocap.UP', 'co.AH_plo')
('-d', 'A', 'cocap.UP', 'co.AH_plo') => ('-d', 'AA', 'cocap.UP', 'co.AH_plo')
('-d', 'A', 'cocap.UP', 'cocap.AH_plo') => ('-d', 'R', 'cocap.UP', 'cocap.AH_plo')
('-d', 'A', 'cocap.UP', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.UP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.UP', 'cocap.AH_plo') => ('-d', 'T', 'cocap.UP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.UP', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.UP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.UP', 'co.AH_plo') => ('-d', 'T', 'cocap.UP', 'co.AH_plo')
('-d', 'AA', 'cocap.UP', 'co.AH_plo') => ('-d', 'EA', 'cocap.UP', 'co.AH_plo')
('-d', 'AA', 'cocap.UP', 'AH_plo') => ('-d', 'T', 'cocap.UP', 'AH_plo')
('-d', 'AA', 'cocap.UP', 'AH_plo') => ('-d', 'EA', 'cocap.UP', 'AH_plo')
('-d', 'AA', 'cocap.UP', 'NEXP_plo') => ('-d', 'T', 'cocap.UP', 'NEXP_plo')
('-d', 'AA', 'cocap.UP', 'NEXP_plo') => ('-d', 'EA', 'cocap.UP', 'NEXP_plo')
('-d', 'AA', 'cocap.UP', 'co.NEXP_plo') => ('-d', 'T', 'cocap.UP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.UP', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.UP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.UP', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.UP', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.UP', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.UP', 'cocap.NEXP_plo')
('-d', 'A', 'BQP', 'cocap.NEXP_plo') => ('-d', 'R', 'BQP', 'cocap.NEXP_plo')
('-d', 'A', 'BQP', 'cocap.NEXP_plo') => ('-d', 'AA', 'BQP', 'cocap.NEXP_plo')
('-d', 'A', 'BQP', 'co.NEXP_plo') => ('-d', 'R', 'BQP', 'co.NEXP_plo')
('-d', 'A', 'BQP', 'co.NEXP_plo') => ('-d', 'AA', 'BQP', 'co.NEXP_plo')
('-d', 'A', 'BQP', 'NEXP_plo') => ('-d', 'R', 'BQP', 'NEXP_plo')
('-d', 'A', 'BQP', 'NEXP_plo') => ('-d', 'AA', 'BQP', 'NEXP_plo')
('-d', 'A', 'BQP', 'AH') => ('-d', 'R', 'BQP', 'AH')
('-d', 'A', 'BQP', 'AH') => ('-d', 'AA', 'BQP', 'AH')
('-d', 'A', 'BPP', 'AH') => ('-d', 'AA', 'BPP', 'AH')
('-d', 'AA', 'BPP', 'AH') => ('-d', 'T', 'BPP', 'AH')
('-d', 'AA', 'BPP', 'AH') => ('-d', 'EA', 'BPP', 'AH')
('-d', 'AA', 'BQP', 'AH') => ('-d', 'T', 'BQP', 'AH')
('-d', 'AA', 'BQP', 'AH') => ('-d', 'EA', 'BQP', 'AH')
('-d', 'A', 'BPP', 'NEXP_plo') => ('-d', 'AA', 'BPP', 'NEXP_plo')
('-d', 'A', 'BPP', 'co.NEXP_plo') => ('-d', 'AA', 'BPP', 'co.NEXP_plo')
('-d', 'A', 'BPP', 'cocap.NEXP_plo') => ('-d', 'AA', 'BPP', 'cocap.NEXP_plo')
('-d', 'A', 'BPP', 'cocap.AH_plo') => ('-d', 'AA', 'BPP', 'cocap.AH_plo')
('-d', 'A', 'BPP', 'co.AH_plo') => ('-d', 'AA', 'BPP', 'co.AH_plo')
('-d', 'A', 'BPP', 'AH_plo') => ('-d', 'AA', 'BPP', 'AH_plo')
('-d', 'AA', 'BPP', 'AH_plo') => ('-d', 'T', 'BPP', 'AH_plo')
('-d', 'AA', 'BPP', 'AH_plo') => ('-d', 'EA', 'BPP', 'AH_plo')
('-d', 'AA', 'BPP', 'co.AH_plo') => ('-d', 'T', 'BPP', 'co.AH_plo')
('-d', 'AA', 'BPP', 'co.AH_plo') => ('-d', 'EA', 'BPP', 'co.AH_plo')
('-d', 'AA', 'BPP', 'cocap.AH_plo') => ('-d', 'T', 'BPP', 'cocap.AH_plo')
('-d', 'AA', 'BPP', 'cocap.AH_plo') => ('-d', 'EA', 'BPP', 'cocap.AH_plo')
('-d', 'AA', 'BPP', 'cocap.NEXP_plo') => ('-d', 'T', 'BPP', 'cocap.NEXP_plo')
('-d', 'AA', 'BPP', 'cocap.NEXP_plo') => ('-d', 'EA', 'BPP', 'cocap.NEXP_plo')
('-d', 'AA', 'BPP', 'co.NEXP_plo') => ('-d', 'T', 'BPP', 'co.NEXP_plo')
('-d', 'AA', 'BPP', 'co.NEXP_plo') => ('-d', 'EA', 'BPP', 'co.NEXP_plo')
('-d', 'AA', 'BPP', 'NEXP_plo') => ('-d', 'T', 'BPP', 'NEXP_plo')
('-d', 'AA', 'BPP', 'NEXP_plo') => ('-d', 'EA', 'BPP', 'NEXP_plo')
('-d', 'A', 'BQP', 'AH_plo') => ('-d', 'R', 'BQP', 'AH_plo')
('-d', 'A', 'BQP', 'AH_plo') => ('-d', 'AA', 'BQP', 'AH_plo')
('-d', 'A', 'BQP', 'co.AH_plo') => ('-d', 'R', 'BQP', 'co.AH_plo')
('-d', 'A', 'BQP', 'co.AH_plo') => ('-d', 'AA', 'BQP', 'co.AH_plo')
('-d', 'A', 'BQP', 'cocap.AH_plo') => ('-d', 'R', 'BQP', 'cocap.AH_plo')
('-d', 'A', 'BQP', 'cocap.AH_plo') => ('-d', 'AA', 'BQP', 'cocap.AH_plo')
('-d', 'AA', 'BQP', 'cocap.AH_plo') => ('-d', 'T', 'BQP', 'cocap.AH_plo')
('-d', 'AA', 'BQP', 'cocap.AH_plo') => ('-d', 'EA', 'BQP', 'cocap.AH_plo')
('-d', 'AA', 'BQP', 'co.AH_plo') => ('-d', 'T', 'BQP', 'co.AH_plo')
('-d', 'AA', 'BQP', 'co.AH_plo') => ('-d', 'EA', 'BQP', 'co.AH_plo')
('-d', 'AA', 'BQP', 'AH_plo') => ('-d', 'T', 'BQP', 'AH_plo')
('-d', 'AA', 'BQP', 'AH_plo') => ('-d', 'EA', 'BQP', 'AH_plo')
('-d', 'AA', 'BQP', 'NEXP_plo') => ('-d', 'T', 'BQP', 'NEXP_plo')
('-d', 'AA', 'BQP', 'NEXP_plo') => ('-d', 'EA', 'BQP', 'NEXP_plo')
('-d', 'AA', 'BQP', 'co.NEXP_plo') => ('-d', 'T', 'BQP', 'co.NEXP_plo')
('-d', 'AA', 'BQP', 'co.NEXP_plo') => ('-d', 'EA', 'BQP', 'co.NEXP_plo')
('-d', 'AA', 'BQP', 'cocap.NEXP_plo') => ('-d', 'T', 'BQP', 'cocap.NEXP_plo')
('-d', 'AA', 'BQP', 'cocap.NEXP_plo') => ('-d', 'EA', 'BQP', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.AWPP', 'co.NEXP') => ('-d', 'R', 'cocap.AWPP', 'co.NEXP')
('-d', 'A', 'cocap.AWPP', 'co.NEXP') => ('-d', 'AA', 'cocap.AWPP', 'co.NEXP')
('-d', 'A', 'cocap.AWPP', 'NEXP') => ('-d', 'R', 'cocap.AWPP', 'NEXP')
('-d', 'A', 'cocap.AWPP', 'NEXP') => ('-d', 'AA', 'cocap.AWPP', 'NEXP')
('-d', 'A', 'cocap.AWPP', 'cocap.NEXP') => ('-d', 'R', 'cocap.AWPP', 'cocap.NEXP')
('-d', 'A', 'cocap.AWPP', 'cocap.NEXP') => ('-d', 'AA', 'cocap.AWPP', 'cocap.NEXP')
('-d', 'A', 'SPP', 'cocap.NEXP') => ('-d', 'R', 'SPP', 'cocap.NEXP')
('-d', 'A', 'SPP', 'cocap.NEXP') => ('-d', 'AA', 'SPP', 'cocap.NEXP')
('-d', 'A', 'SPP', 'co.NEXP') => ('-d', 'R', 'SPP', 'co.NEXP')
('-d', 'A', 'SPP', 'co.NEXP') => ('-d', 'AA', 'SPP', 'co.NEXP')
('-d', 'A', 'SPP', 'NEXP') => ('-d', 'R', 'SPP', 'NEXP')
('-d', 'A', 'SPP', 'NEXP') => ('-d', 'AA', 'SPP', 'NEXP')
('-d', 'A', 'co.UP', 'NEXP') => ('-d', 'R', 'co.UP', 'NEXP')
('-d', 'A', 'co.UP', 'NEXP') => ('-d', 'AA', 'co.UP', 'NEXP')
('-d', 'A', 'UP', 'co.NEXP') => ('-d', 'R', 'UP', 'co.NEXP')
('-d', 'A', 'UP', 'co.NEXP') => ('-d', 'AA', 'UP', 'co.NEXP')
('-d', 'A', 'UP', 'R') => ('-d', 'R', 'UP', 'R')
('-d', 'A', 'UP', 'R') => ('-d', 'AA', 'UP', 'R')
('-d', 'A', 'co.UP', 'R') => ('-d', 'R', 'co.UP', 'R')
('-d', 'A', 'co.UP', 'R') => ('-d', 'AA', 'co.UP', 'R')
('-d', 'A', 'co.UP', 'RE') => ('-d', 'R', 'co.UP', 'RE')
('-d', 'A', 'co.UP', 'RE') => ('-d', 'AA', 'co.UP', 'RE')
('-d', 'A', 'UP', 'co.RE') => ('-d', 'R', 'UP', 'co.RE')
('-d', 'A', 'UP', 'co.RE') => ('-d', 'AA', 'UP', 'co.RE')
('-d', 'AA', 'UP', 'co.RE') => ('-d', 'T', 'UP', 'co.RE')
('-d', 'AA', 'UP', 'co.RE') => ('-d', 'EA', 'UP', 'co.RE')
('-d', 'AA', 'co.UP', 'RE') => ('-d', 'T', 'co.UP', 'RE')
('-d', 'AA', 'co.UP', 'RE') => ('-d', 'EA', 'co.UP', 'RE')
('-d', 'A', 'co.UP', 'co.RE') => ('-d', 'R', 'co.UP', 'co.RE')
('-d', 'A', 'co.UP', 'co.RE') => ('-d', 'AA', 'co.UP', 'co.RE')
('-d', 'A', 'UP', 'RE') => ('-d', 'R', 'UP', 'RE')
('-d', 'A', 'UP', 'RE') => ('-d', 'AA', 'UP', 'RE')
('-d', 'AA', 'UP', 'RE') => ('-d', 'T', 'UP', 'RE')
('-d', 'AA', 'UP', 'RE') => ('-d', 'EA', 'UP', 'RE')
('-d', 'AA', 'co.UP', 'co.RE') => ('-d', 'T', 'co.UP', 'co.RE')
('-d', 'AA', 'co.UP', 'co.RE') => ('-d', 'EA', 'co.UP', 'co.RE')
('-d', 'AA', 'co.UP', 'R') => ('-d', 'T', 'co.UP', 'R')
('-d', 'AA', 'co.UP', 'R') => ('-d', 'EA', 'co.UP', 'R')
('-d', 'AA', 'UP', 'R') => ('-d', 'T', 'UP', 'R')
('-d', 'AA', 'UP', 'R') => ('-d', 'EA', 'UP', 'R')
('-d', 'A', 'UP', 'NEXP/poly') => ('-d', 'R', 'UP', 'NEXP/poly')
('-d', 'A', 'UP', 'NEXP/poly') => ('-d', 'AA', 'UP', 'NEXP/poly')
('-d', 'A', 'co.UP', 'NEXP/poly') => ('-d', 'R', 'co.UP', 'NEXP/poly')
('-d', 'A', 'co.UP', 'NEXP/poly') => ('-d', 'AA', 'co.UP', 'NEXP/poly')
('-d', 'AA', 'co.UP', 'NEXP/poly') => ('-d', 'T', 'co.UP', 'NEXP/poly')
('-d', 'AA', 'co.UP', 'NEXP/poly') => ('-d', 'EA', 'co.UP', 'NEXP/poly')
('-d', 'AA', 'UP', 'NEXP/poly') => ('-d', 'T', 'UP', 'NEXP/poly')
('-d', 'AA', 'UP', 'NEXP/poly') => ('-d', 'EA', 'UP', 'NEXP/poly')
('-d', 'AA', 'UP', 'co.NEXP') => ('-d', 'T', 'UP', 'co.NEXP')
('-d', 'AA', 'UP', 'co.NEXP') => ('-d', 'EA', 'UP', 'co.NEXP')
('-d', 'AA', 'co.UP', 'NEXP') => ('-d', 'T', 'co.UP', 'NEXP')
('-d', 'AA', 'co.UP', 'NEXP') => ('-d', 'EA', 'co.UP', 'NEXP')
('-d', 'A', 'SPP', 'R') => ('-d', 'R', 'SPP', 'R')
('-d', 'A', 'SPP', 'R') => ('-d', 'AA', 'SPP', 'R')
('-d', 'A', 'SPP', 'RE') => ('-d', 'R', 'SPP', 'RE')
('-d', 'A', 'SPP', 'RE') => ('-d', 'AA', 'SPP', 'RE')
('-d', 'A', 'SPP', 'co.RE') => ('-d', 'R', 'SPP', 'co.RE')
('-d', 'A', 'SPP', 'co.RE') => ('-d', 'AA', 'SPP', 'co.RE')
('-d', 'AA', 'SPP', 'co.RE') => ('-d', 'T', 'SPP', 'co.RE')
('-d', 'AA', 'SPP', 'co.RE') => ('-d', 'EA', 'SPP', 'co.RE')
('-d', 'AA', 'SPP', 'RE') => ('-d', 'T', 'SPP', 'RE')
('-d', 'AA', 'SPP', 'RE') => ('-d', 'EA', 'SPP', 'RE')
('-d', 'AA', 'SPP', 'R') => ('-d', 'T', 'SPP', 'R')
('-d', 'AA', 'SPP', 'R') => ('-d', 'EA', 'SPP', 'R')
('-d', 'A', 'UP', 'NEXP') => ('-d', 'R', 'UP', 'NEXP')
('-d', 'A', 'UP', 'NEXP') => ('-d', 'AA', 'UP', 'NEXP')
('-d', 'A', 'co.UP', 'co.NEXP') => ('-d', 'R', 'co.UP', 'co.NEXP')
('-d', 'A', 'co.UP', 'co.NEXP') => ('-d', 'AA', 'co.UP', 'co.NEXP')
('-d', 'AA', 'co.UP', 'co.NEXP') => ('-d', 'T', 'co.UP', 'co.NEXP')
('-d', 'AA', 'co.UP', 'co.NEXP') => ('-d', 'EA', 'co.UP', 'co.NEXP')
('-d', 'AA', 'UP', 'NEXP') => ('-d', 'T', 'UP', 'NEXP')
('-d', 'AA', 'UP', 'NEXP') => ('-d', 'EA', 'UP', 'NEXP')
('-d', 'A', 'SPP', 'NEXP/poly') => ('-d', 'R', 'SPP', 'NEXP/poly')
('-d', 'A', 'SPP', 'NEXP/poly') => ('-d', 'AA', 'SPP', 'NEXP/poly')
('-d', 'AA', 'SPP', 'NEXP/poly') => ('-d', 'T', 'SPP', 'NEXP/poly')
('-d', 'AA', 'SPP', 'NEXP/poly') => ('-d', 'EA', 'SPP', 'NEXP/poly')
('-d', 'AA', 'SPP', 'NEXP') => ('-d', 'T', 'SPP', 'NEXP')
('-d', 'AA', 'SPP', 'NEXP') => ('-d', 'EA', 'SPP', 'NEXP')
('-d', 'AA', 'SPP', 'co.NEXP') => ('-d', 'T', 'SPP', 'co.NEXP')
('-d', 'AA', 'SPP', 'co.NEXP') => ('-d', 'EA', 'SPP', 'co.NEXP')
('-d', 'AA', 'SPP', 'cocap.NEXP') => ('-d', 'T', 'SPP', 'cocap.NEXP')
('-d', 'AA', 'SPP', 'cocap.NEXP') => ('-d', 'EA', 'SPP', 'cocap.NEXP')
('-d', 'AA', 'co.UP', 'cocap.NEXP') => ('-d', 'T', 'co.UP', 'cocap.NEXP')
('-d', 'AA', 'UP', 'cocap.NEXP') => ('-d', 'T', 'UP', 'cocap.NEXP')
('-d', 'A', 'cocap.AWPP', 'R') => ('-d', 'R', 'cocap.AWPP', 'R')
('-d', 'A', 'cocap.AWPP', 'R') => ('-d', 'AA', 'cocap.AWPP', 'R')
('-d', 'A', 'cocap.AWPP', 'RE') => ('-d', 'R', 'cocap.AWPP', 'RE')
('-d', 'A', 'cocap.AWPP', 'RE') => ('-d', 'AA', 'cocap.AWPP', 'RE')
('-d', 'A', 'cocap.AWPP', 'co.RE') => ('-d', 'R', 'cocap.AWPP', 'co.RE')
('-d', 'A', 'cocap.AWPP', 'co.RE') => ('-d', 'AA', 'cocap.AWPP', 'co.RE')
('-d', 'AA', 'cocap.AWPP', 'co.RE') => ('-d', 'T', 'cocap.AWPP', 'co.RE')
('-d', 'AA', 'cocap.AWPP', 'co.RE') => ('-d', 'EA', 'cocap.AWPP', 'co.RE')
('-d', 'AA', 'cocap.AWPP', 'RE') => ('-d', 'T', 'cocap.AWPP', 'RE')
('-d', 'AA', 'cocap.AWPP', 'RE') => ('-d', 'EA', 'cocap.AWPP', 'RE')
('-d', 'AA', 'cocap.AWPP', 'R') => ('-d', 'T', 'cocap.AWPP', 'R')
('-d', 'AA', 'cocap.AWPP', 'R') => ('-d', 'EA', 'cocap.AWPP', 'R')
('-d', 'A', 'cocap.AWPP', 'NEXP/poly') => ('-d', 'R', 'cocap.AWPP', 'NEXP/poly')
('-d', 'A', 'cocap.AWPP', 'NEXP/poly') => ('-d', 'AA', 'cocap.AWPP', 'NEXP/poly')
('-d', 'AA', 'cocap.AWPP', 'NEXP/poly') => ('-d', 'T', 'cocap.AWPP', 'NEXP/poly')
('-d', 'AA', 'cocap.AWPP', 'NEXP/poly') => ('-d', 'EA', 'cocap.AWPP', 'NEXP/poly')
('-d', 'AA', 'cocap.AWPP', 'cocap.NEXP') => ('-d', 'T', 'cocap.AWPP', 'cocap.NEXP')
('-d', 'AA', 'cocap.AWPP', 'cocap.NEXP') => ('-d', 'EA', 'cocap.AWPP', 'cocap.NEXP')
('-d', 'AA', 'cocap.AWPP', 'co.NEXP') => ('-d', 'T', 'cocap.AWPP', 'co.NEXP')
('-d', 'AA', 'cocap.AWPP', 'co.NEXP') => ('-d', 'EA', 'cocap.AWPP', 'co.NEXP')
('-d', 'AA', 'cocap.AWPP', 'NEXP') => ('-d', 'T', 'cocap.AWPP', 'NEXP')
('-d', 'AA', 'cocap.AWPP', 'NEXP') => ('-d', 'EA', 'cocap.AWPP', 'NEXP')
('-d', 'A', 'SPP', 'cocap.NEXP_plo') => ('-d', 'R', 'SPP', 'cocap.NEXP_plo')
('-d', 'A', 'SPP', 'cocap.NEXP_plo') => ('-d', 'AA', 'SPP', 'cocap.NEXP_plo')
('-d', 'A', 'SPP', 'co.NEXP_plo') => ('-d', 'R', 'SPP', 'co.NEXP_plo')
('-d', 'A', 'SPP', 'co.NEXP_plo') => ('-d', 'AA', 'SPP', 'co.NEXP_plo')
('-d', 'A', 'SPP', 'NEXP_plo') => ('-d', 'R', 'SPP', 'NEXP_plo')
('-d', 'A', 'SPP', 'NEXP_plo') => ('-d', 'AA', 'SPP', 'NEXP_plo')
('-d', 'A', 'co.UP', 'NEXP_plo') => ('-d', 'R', 'co.UP', 'NEXP_plo')
('-d', 'A', 'co.UP', 'NEXP_plo') => ('-d', 'AA', 'co.UP', 'NEXP_plo')
('-d', 'A', 'UP', 'co.NEXP_plo') => ('-d', 'R', 'UP', 'co.NEXP_plo')
('-d', 'A', 'UP', 'co.NEXP_plo') => ('-d', 'AA', 'UP', 'co.NEXP_plo')
('-d', 'A', 'UP', 'AH') => ('-d', 'R', 'UP', 'AH')
('-d', 'A', 'UP', 'AH') => ('-d', 'AA', 'UP', 'AH')
('-d', 'A', 'co.UP', 'AH') => ('-d', 'R', 'co.UP', 'AH')
('-d', 'A', 'co.UP', 'AH') => ('-d', 'AA', 'co.UP', 'AH')
('-d', 'AA', 'co.UP', 'AH') => ('-d', 'T', 'co.UP', 'AH')
('-d', 'AA', 'co.UP', 'AH') => ('-d', 'EA', 'co.UP', 'AH')
('-d', 'AA', 'UP', 'AH') => ('-d', 'T', 'UP', 'AH')
('-d', 'AA', 'UP', 'AH') => ('-d', 'EA', 'UP', 'AH')
('-d', 'A', 'UP', 'co.AH_plo') => ('-d', 'R', 'UP', 'co.AH_plo')
('-d', 'A', 'UP', 'co.AH_plo') => ('-d', 'AA', 'UP', 'co.AH_plo')
('-d', 'A', 'co.UP', 'AH_plo') => ('-d', 'R', 'co.UP', 'AH_plo')
('-d', 'A', 'co.UP', 'AH_plo') => ('-d', 'AA', 'co.UP', 'AH_plo')
('-d', 'AA', 'co.UP', 'AH_plo') => ('-d', 'T', 'co.UP', 'AH_plo')
('-d', 'AA', 'co.UP', 'AH_plo') => ('-d', 'EA', 'co.UP', 'AH_plo')
('-d', 'AA', 'UP', 'co.AH_plo') => ('-d', 'T', 'UP', 'co.AH_plo')
('-d', 'AA', 'UP', 'co.AH_plo') => ('-d', 'EA', 'UP', 'co.AH_plo')
('-d', 'AA', 'UP', 'co.NEXP_plo') => ('-d', 'T', 'UP', 'co.NEXP_plo')
('-d', 'AA', 'UP', 'co.NEXP_plo') => ('-d', 'EA', 'UP', 'co.NEXP_plo')
('-d', 'AA', 'co.UP', 'NEXP_plo') => ('-d', 'T', 'co.UP', 'NEXP_plo')
('-d', 'AA', 'co.UP', 'NEXP_plo') => ('-d', 'EA', 'co.UP', 'NEXP_plo')
('-d', 'A', 'SPP', 'AH') => ('-d', 'R', 'SPP', 'AH')
('-d', 'A', 'SPP', 'AH') => ('-d', 'AA', 'SPP', 'AH')
('-d', 'AA', 'SPP', 'AH') => ('-d', 'T', 'SPP', 'AH')
('-d', 'AA', 'SPP', 'AH') => ('-d', 'EA', 'SPP', 'AH')
('-d', 'A', 'UP', 'NEXP_plo') => ('-d', 'R', 'UP', 'NEXP_plo')
('-d', 'A', 'UP', 'NEXP_plo') => ('-d', 'AA', 'UP', 'NEXP_plo')
('-d', 'A', 'co.UP', 'co.NEXP_plo') => ('-d', 'R', 'co.UP', 'co.NEXP_plo')
('-d', 'A', 'co.UP', 'co.NEXP_plo') => ('-d', 'AA', 'co.UP', 'co.NEXP_plo')
('-d', 'A', 'co.UP', 'co.AH_plo') => ('-d', 'R', 'co.UP', 'co.AH_plo')
('-d', 'A', 'co.UP', 'co.AH_plo') => ('-d', 'AA', 'co.UP', 'co.AH_plo')
('-d', 'A', 'UP', 'AH_plo') => ('-d', 'R', 'UP', 'AH_plo')
('-d', 'A', 'UP', 'AH_plo') => ('-d', 'AA', 'UP', 'AH_plo')
('-d', 'AA', 'UP', 'AH_plo') => ('-d', 'T', 'UP', 'AH_plo')
('-d', 'AA', 'UP', 'AH_plo') => ('-d', 'EA', 'UP', 'AH_plo')
('-d', 'AA', 'co.UP', 'co.AH_plo') => ('-d', 'T', 'co.UP', 'co.AH_plo')
('-d', 'AA', 'co.UP', 'co.AH_plo') => ('-d', 'EA', 'co.UP', 'co.AH_plo')
('-d', 'AA', 'co.UP', 'co.NEXP_plo') => ('-d', 'T', 'co.UP', 'co.NEXP_plo')
('-d', 'AA', 'co.UP', 'co.NEXP_plo') => ('-d', 'EA', 'co.UP', 'co.NEXP_plo')
('-d', 'AA', 'UP', 'NEXP_plo') => ('-d', 'T', 'UP', 'NEXP_plo')
('-d', 'AA', 'UP', 'NEXP_plo') => ('-d', 'EA', 'UP', 'NEXP_plo')
('-d', 'A', 'SPP', 'AH_plo') => ('-d', 'R', 'SPP', 'AH_plo')
('-d', 'A', 'SPP', 'AH_plo') => ('-d', 'AA', 'SPP', 'AH_plo')
('-d', 'A', 'SPP', 'co.AH_plo') => ('-d', 'R', 'SPP', 'co.AH_plo')
('-d', 'A', 'SPP', 'co.AH_plo') => ('-d', 'AA', 'SPP', 'co.AH_plo')
('-d', 'A', 'SPP', 'cocap.AH_plo') => ('-d', 'R', 'SPP', 'cocap.AH_plo')
('-d', 'A', 'SPP', 'cocap.AH_plo') => ('-d', 'AA', 'SPP', 'cocap.AH_plo')
('-d', 'A', 'co.UP', 'cocap.AH_plo') => ('-d', 'R', 'co.UP', 'cocap.AH_plo')
('-d', 'A', 'co.UP', 'cocap.AH_plo') => ('-d', 'AA', 'co.UP', 'cocap.AH_plo')
('-d', 'A', 'UP', 'cocap.AH_plo') => ('-d', 'R', 'UP', 'cocap.AH_plo')
('-d', 'A', 'UP', 'cocap.AH_plo') => ('-d', 'AA', 'UP', 'cocap.AH_plo')
('-d', 'AA', 'UP', 'cocap.AH_plo') => ('-d', 'T', 'UP', 'cocap.AH_plo')
('-d', 'AA', 'UP', 'cocap.AH_plo') => ('-d', 'EA', 'UP', 'cocap.AH_plo')
('-d', 'AA', 'co.UP', 'cocap.AH_plo') => ('-d', 'T', 'co.UP', 'cocap.AH_plo')
('-d', 'AA', 'co.UP', 'cocap.AH_plo') => ('-d', 'EA', 'co.UP', 'cocap.AH_plo')
('-d', 'AA', 'SPP', 'cocap.AH_plo') => ('-d', 'T', 'SPP', 'cocap.AH_plo')
('-d', 'AA', 'SPP', 'cocap.AH_plo') => ('-d', 'EA', 'SPP', 'cocap.AH_plo')
('-d', 'AA', 'SPP', 'co.AH_plo') => ('-d', 'T', 'SPP', 'co.AH_plo')
('-d', 'AA', 'SPP', 'co.AH_plo') => ('-d', 'EA', 'SPP', 'co.AH_plo')
('-d', 'AA', 'SPP', 'AH_plo') => ('-d', 'T', 'SPP', 'AH_plo')
('-d', 'AA', 'SPP', 'AH_plo') => ('-d', 'EA', 'SPP', 'AH_plo')
('-d', 'AA', 'SPP', 'NEXP_plo') => ('-d', 'T', 'SPP', 'NEXP_plo')
('-d', 'AA', 'SPP', 'NEXP_plo') => ('-d', 'EA', 'SPP', 'NEXP_plo')
('-d', 'AA', 'SPP', 'co.NEXP_plo') => ('-d', 'T', 'SPP', 'co.NEXP_plo')
('-d', 'AA', 'SPP', 'co.NEXP_plo') => ('-d', 'EA', 'SPP', 'co.NEXP_plo')
('-d', 'AA', 'SPP', 'cocap.NEXP_plo') => ('-d', 'T', 'SPP', 'cocap.NEXP_plo')
('-d', 'AA', 'SPP', 'cocap.NEXP_plo') => ('-d', 'EA', 'SPP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.UP', 'cocap.NEXP_plo') => ('-d', 'T', 'co.UP', 'cocap.NEXP_plo')
('-d', 'AA', 'UP', 'cocap.NEXP_plo') => ('-d', 'T', 'UP', 'cocap.NEXP_plo')
('-p', 'R', 'cocap.NEXP_plo', 'SBP') => ('-p', 'A', 'cocap.NEXP_plo', 'SBP')
('-p', 'R', 'cocap.NEXP_plo', 'co.SBP') => ('-p', 'A', 'cocap.NEXP_plo', 'co.SBP')
('-p', 'R', 'cocap.NEXP_plo', 'cocap.SBP') => ('-p', 'A', 'cocap.NEXP_plo', 'cocap.SBP')
('-p', 'R', 'cocap.NEXP_plo', 'cocap.AM') => ('-p', 'A', 'cocap.NEXP_plo', 'cocap.AM')
('-p', 'R', 'cocap.NEXP_plo', 'AM') => ('-p', 'A', 'cocap.NEXP_plo', 'AM')
('-p', 'R', 'cocap.NEXP_plo', 'co.AM') => ('-p', 'A', 'cocap.NEXP_plo', 'co.AM')
('-d', 'A', 'cocap.AWPP', 'co.NEXP_plo') => ('-d', 'R', 'cocap.AWPP', 'co.NEXP_plo')
('-d', 'A', 'cocap.AWPP', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.AWPP', 'co.NEXP_plo')
('-d', 'A', 'cocap.AWPP', 'NEXP_plo') => ('-d', 'R', 'cocap.AWPP', 'NEXP_plo')
('-d', 'A', 'cocap.AWPP', 'NEXP_plo') => ('-d', 'AA', 'cocap.AWPP', 'NEXP_plo')
('-d', 'A', 'cocap.AWPP', 'AH') => ('-d', 'R', 'cocap.AWPP', 'AH')
('-d', 'A', 'cocap.AWPP', 'AH') => ('-d', 'AA', 'cocap.AWPP', 'AH')
('-d', 'AA', 'cocap.AWPP', 'AH') => ('-d', 'T', 'cocap.AWPP', 'AH')
('-d', 'AA', 'cocap.AWPP', 'AH') => ('-d', 'EA', 'cocap.AWPP', 'AH')
('-d', 'A', 'cocap.AWPP', 'AH_plo') => ('-d', 'R', 'cocap.AWPP', 'AH_plo')
('-d', 'A', 'cocap.AWPP', 'AH_plo') => ('-d', 'AA', 'cocap.AWPP', 'AH_plo')
('-d', 'A', 'cocap.AWPP', 'co.AH_plo') => ('-d', 'R', 'cocap.AWPP', 'co.AH_plo')
('-d', 'A', 'cocap.AWPP', 'co.AH_plo') => ('-d', 'AA', 'cocap.AWPP', 'co.AH_plo')
('-d', 'A', 'cocap.AWPP', 'cocap.AH_plo') => ('-d', 'R', 'cocap.AWPP', 'cocap.AH_plo')
('-d', 'A', 'cocap.AWPP', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.AWPP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.AWPP', 'cocap.AH_plo') => ('-d', 'T', 'cocap.AWPP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.AWPP', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.AWPP', 'cocap.AH_plo')
('-d', 'AA', 'cocap.AWPP', 'co.AH_plo') => ('-d', 'T', 'cocap.AWPP', 'co.AH_plo')
('-d', 'AA', 'cocap.AWPP', 'co.AH_plo') => ('-d', 'EA', 'cocap.AWPP', 'co.AH_plo')
('-d', 'AA', 'cocap.AWPP', 'AH_plo') => ('-d', 'T', 'cocap.AWPP', 'AH_plo')
('-d', 'AA', 'cocap.AWPP', 'AH_plo') => ('-d', 'EA', 'cocap.AWPP', 'AH_plo')
('-d', 'AA', 'cocap.AWPP', 'NEXP_plo') => ('-d', 'T', 'cocap.AWPP', 'NEXP_plo')
('-d', 'AA', 'cocap.AWPP', 'NEXP_plo') => ('-d', 'EA', 'cocap.AWPP', 'NEXP_plo')
('-d', 'AA', 'cocap.AWPP', 'co.NEXP_plo') => ('-d', 'T', 'cocap.AWPP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.AWPP', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.AWPP', 'co.NEXP_plo')
('-d', 'AA', 'cocap.AWPP', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.AWPP', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.AWPP', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.AWPP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.AWPP', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.AWPP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.AWPP', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.AWPP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.UP', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.UP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.UP', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.UP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.UP', 'co.NEXP') => ('p', 'R', 'cocap.UP', 'co.NEXP')
('p', 'A', 'cocap.UP', 'co.NEXP') => ('p', 'AA', 'cocap.UP', 'co.NEXP')
('p', 'A', 'cocap.UP', 'NEXP') => ('p', 'R', 'cocap.UP', 'NEXP')
('p', 'A', 'cocap.UP', 'NEXP') => ('p', 'AA', 'cocap.UP', 'NEXP')
('p', 'A', 'cocap.UP', 'cocap.NEXP') => ('p', 'R', 'cocap.UP', 'cocap.NEXP')
('p', 'A', 'cocap.UP', 'cocap.NEXP') => ('p', 'AA', 'cocap.UP', 'cocap.NEXP')
('p', 'A', 'cocap.UP', 'R') => ('p', 'R', 'cocap.UP', 'R')
('p', 'A', 'cocap.UP', 'R') => ('p', 'AA', 'cocap.UP', 'R')
('p', 'A', 'cocap.UP', 'RE') => ('p', 'R', 'cocap.UP', 'RE')
('p', 'A', 'cocap.UP', 'RE') => ('p', 'AA', 'cocap.UP', 'RE')
('p', 'A', 'cocap.UP', 'co.RE') => ('p', 'R', 'cocap.UP', 'co.RE')
('p', 'A', 'cocap.UP', 'co.RE') => ('p', 'AA', 'cocap.UP', 'co.RE')
('p', 'AA', 'cocap.UP', 'co.RE') => ('p', 'T', 'cocap.UP', 'co.RE')
('p', 'AA', 'cocap.UP', 'co.RE') => ('p', 'EA', 'cocap.UP', 'co.RE')
('p', 'AA', 'cocap.UP', 'RE') => ('p', 'T', 'cocap.UP', 'RE')
('p', 'AA', 'cocap.UP', 'RE') => ('p', 'EA', 'cocap.UP', 'RE')
('p', 'AA', 'cocap.UP', 'R') => ('p', 'T', 'cocap.UP', 'R')
('p', 'AA', 'cocap.UP', 'R') => ('p', 'EA', 'cocap.UP', 'R')
('p', 'A', 'cocap.UP', 'NEXP/poly') => ('p', 'R', 'cocap.UP', 'NEXP/poly')
('p', 'A', 'cocap.UP', 'NEXP/poly') => ('p', 'AA', 'cocap.UP', 'NEXP/poly')
('p', 'AA', 'cocap.UP', 'NEXP/poly') => ('p', 'T', 'cocap.UP', 'NEXP/poly')
('p', 'AA', 'cocap.UP', 'NEXP/poly') => ('p', 'EA', 'cocap.UP', 'NEXP/poly')
('p', 'AA', 'cocap.UP', 'cocap.NEXP') => ('p', 'T', 'cocap.UP', 'cocap.NEXP')
('p', 'AA', 'cocap.UP', 'cocap.NEXP') => ('p', 'EA', 'cocap.UP', 'cocap.NEXP')
('p', 'AA', 'cocap.UP', 'co.NEXP') => ('p', 'T', 'cocap.UP', 'co.NEXP')
('p', 'AA', 'cocap.UP', 'co.NEXP') => ('p', 'EA', 'cocap.UP', 'co.NEXP')
('p', 'AA', 'cocap.UP', 'NEXP') => ('p', 'T', 'cocap.UP', 'NEXP')
('p', 'AA', 'cocap.UP', 'NEXP') => ('p', 'EA', 'cocap.UP', 'NEXP')
('p', 'A', 'cocap.UP', 'co.NEXP_plo') => ('p', 'R', 'cocap.UP', 'co.NEXP_plo')
('p', 'A', 'cocap.UP', 'co.NEXP_plo') => ('p', 'AA', 'cocap.UP', 'co.NEXP_plo')
('p', 'A', 'cocap.UP', 'NEXP_plo') => ('p', 'R', 'cocap.UP', 'NEXP_plo')
('p', 'A', 'cocap.UP', 'NEXP_plo') => ('p', 'AA', 'cocap.UP', 'NEXP_plo')
('p', 'A', 'cocap.UP', 'AH') => ('p', 'R', 'cocap.UP', 'AH')
('p', 'A', 'cocap.UP', 'AH') => ('p', 'AA', 'cocap.UP', 'AH')
('p', 'AA', 'cocap.UP', 'AH') => ('p', 'T', 'cocap.UP', 'AH')
('p', 'AA', 'cocap.UP', 'AH') => ('p', 'EA', 'cocap.UP', 'AH')
('p', 'A', 'cocap.UP', 'AH_plo') => ('p', 'R', 'cocap.UP', 'AH_plo')
('p', 'A', 'cocap.UP', 'AH_plo') => ('p', 'AA', 'cocap.UP', 'AH_plo')
('p', 'A', 'cocap.UP', 'co.AH_plo') => ('p', 'R', 'cocap.UP', 'co.AH_plo')
('p', 'A', 'cocap.UP', 'co.AH_plo') => ('p', 'AA', 'cocap.UP', 'co.AH_plo')
('p', 'A', 'cocap.UP', 'cocap.AH_plo') => ('p', 'R', 'cocap.UP', 'cocap.AH_plo')
('p', 'A', 'cocap.UP', 'cocap.AH_plo') => ('p', 'AA', 'cocap.UP', 'cocap.AH_plo')
('p', 'AA', 'cocap.UP', 'cocap.AH_plo') => ('p', 'T', 'cocap.UP', 'cocap.AH_plo')
('p', 'AA', 'cocap.UP', 'cocap.AH_plo') => ('p', 'EA', 'cocap.UP', 'cocap.AH_plo')
('p', 'AA', 'cocap.UP', 'co.AH_plo') => ('p', 'T', 'cocap.UP', 'co.AH_plo')
('p', 'AA', 'cocap.UP', 'co.AH_plo') => ('p', 'EA', 'cocap.UP', 'co.AH_plo')
('p', 'AA', 'cocap.UP', 'AH_plo') => ('p', 'T', 'cocap.UP', 'AH_plo')
('p', 'AA', 'cocap.UP', 'AH_plo') => ('p', 'EA', 'cocap.UP', 'AH_plo')
('p', 'AA', 'cocap.UP', 'NEXP_plo') => ('p', 'T', 'cocap.UP', 'NEXP_plo')
('p', 'AA', 'cocap.UP', 'NEXP_plo') => ('p', 'EA', 'cocap.UP', 'NEXP_plo')
('p', 'AA', 'cocap.UP', 'co.NEXP_plo') => ('p', 'T', 'cocap.UP', 'co.NEXP_plo')
('p', 'AA', 'cocap.UP', 'co.NEXP_plo') => ('p', 'EA', 'cocap.UP', 'co.NEXP_plo')
('p', 'AA', 'cocap.UP', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.UP', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.UP', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.UP', 'cocap.NEXP_plo')
('p', 'A', 'BQP', 'cocap.NEXP_plo') => ('p', 'R', 'BQP', 'cocap.NEXP_plo')
('p', 'A', 'BQP', 'cocap.NEXP_plo') => ('p', 'AA', 'BQP', 'cocap.NEXP_plo')
('p', 'A', 'BQP', 'co.NEXP_plo') => ('p', 'R', 'BQP', 'co.NEXP_plo')
('p', 'A', 'BQP', 'co.NEXP_plo') => ('p', 'AA', 'BQP', 'co.NEXP_plo')
('p', 'A', 'BQP', 'NEXP_plo') => ('p', 'R', 'BQP', 'NEXP_plo')
('p', 'A', 'BQP', 'NEXP_plo') => ('p', 'AA', 'BQP', 'NEXP_plo')
('p', 'A', 'BQP', 'AH') => ('p', 'R', 'BQP', 'AH')
('p', 'A', 'BQP', 'AH') => ('p', 'AA', 'BQP', 'AH')
('p', 'A', 'BPP', 'AH') => ('p', 'R', 'BPP', 'AH')
('p', 'A', 'BPP', 'AH') => ('p', 'AA', 'BPP', 'AH')
('p', 'AA', 'BPP', 'AH') => ('p', 'T', 'BPP', 'AH')
('p', 'AA', 'BPP', 'AH') => ('p', 'EA', 'BPP', 'AH')
('p', 'AA', 'BQP', 'AH') => ('p', 'T', 'BQP', 'AH')
('p', 'AA', 'BQP', 'AH') => ('p', 'EA', 'BQP', 'AH')
('p', 'A', 'BPP', 'NEXP_plo') => ('p', 'R', 'BPP', 'NEXP_plo')
('p', 'A', 'BPP', 'NEXP_plo') => ('p', 'AA', 'BPP', 'NEXP_plo')
('p', 'A', 'BPP', 'co.NEXP_plo') => ('p', 'R', 'BPP', 'co.NEXP_plo')
('p', 'A', 'BPP', 'co.NEXP_plo') => ('p', 'AA', 'BPP', 'co.NEXP_plo')
('p', 'A', 'BPP', 'cocap.NEXP_plo') => ('p', 'R', 'BPP', 'cocap.NEXP_plo')
('p', 'A', 'BPP', 'cocap.NEXP_plo') => ('p', 'AA', 'BPP', 'cocap.NEXP_plo')
('p', 'A', 'BPP', 'cocap.AH_plo') => ('p', 'R', 'BPP', 'cocap.AH_plo')
('p', 'A', 'BPP', 'cocap.AH_plo') => ('p', 'AA', 'BPP', 'cocap.AH_plo')
('p', 'A', 'BPP', 'co.AH_plo') => ('p', 'R', 'BPP', 'co.AH_plo')
('p', 'A', 'BPP', 'co.AH_plo') => ('p', 'AA', 'BPP', 'co.AH_plo')
('p', 'A', 'BPP', 'AH_plo') => ('p', 'R', 'BPP', 'AH_plo')
('p', 'A', 'BPP', 'AH_plo') => ('p', 'AA', 'BPP', 'AH_plo')
('p', 'AA', 'BPP', 'AH_plo') => ('p', 'T', 'BPP', 'AH_plo')
('p', 'AA', 'BPP', 'AH_plo') => ('p', 'EA', 'BPP', 'AH_plo')
('p', 'AA', 'BPP', 'co.AH_plo') => ('p', 'T', 'BPP', 'co.AH_plo')
('p', 'AA', 'BPP', 'co.AH_plo') => ('p', 'EA', 'BPP', 'co.AH_plo')
('p', 'AA', 'BPP', 'cocap.AH_plo') => ('p', 'T', 'BPP', 'cocap.AH_plo')
('p', 'AA', 'BPP', 'cocap.AH_plo') => ('p', 'EA', 'BPP', 'cocap.AH_plo')
('p', 'AA', 'BPP', 'cocap.NEXP_plo') => ('p', 'T', 'BPP', 'cocap.NEXP_plo')
('p', 'AA', 'BPP', 'cocap.NEXP_plo') => ('p', 'EA', 'BPP', 'cocap.NEXP_plo')
('p', 'AA', 'BPP', 'co.NEXP_plo') => ('p', 'T', 'BPP', 'co.NEXP_plo')
('p', 'AA', 'BPP', 'co.NEXP_plo') => ('p', 'EA', 'BPP', 'co.NEXP_plo')
('p', 'AA', 'BPP', 'NEXP_plo') => ('p', 'T', 'BPP', 'NEXP_plo')
('p', 'AA', 'BPP', 'NEXP_plo') => ('p', 'EA', 'BPP', 'NEXP_plo')
('p', 'A', 'BQP', 'AH_plo') => ('p', 'R', 'BQP', 'AH_plo')
('p', 'A', 'BQP', 'AH_plo') => ('p', 'AA', 'BQP', 'AH_plo')
('p', 'A', 'BQP', 'co.AH_plo') => ('p', 'R', 'BQP', 'co.AH_plo')
('p', 'A', 'BQP', 'co.AH_plo') => ('p', 'AA', 'BQP', 'co.AH_plo')
('p', 'A', 'BQP', 'cocap.AH_plo') => ('p', 'R', 'BQP', 'cocap.AH_plo')
('p', 'A', 'BQP', 'cocap.AH_plo') => ('p', 'AA', 'BQP', 'cocap.AH_plo')
('p', 'AA', 'BQP', 'cocap.AH_plo') => ('p', 'T', 'BQP', 'cocap.AH_plo')
('p', 'AA', 'BQP', 'cocap.AH_plo') => ('p', 'EA', 'BQP', 'cocap.AH_plo')
('p', 'AA', 'BQP', 'co.AH_plo') => ('p', 'T', 'BQP', 'co.AH_plo')
('p', 'AA', 'BQP', 'co.AH_plo') => ('p', 'EA', 'BQP', 'co.AH_plo')
('p', 'AA', 'BQP', 'AH_plo') => ('p', 'T', 'BQP', 'AH_plo')
('p', 'AA', 'BQP', 'AH_plo') => ('p', 'EA', 'BQP', 'AH_plo')
('p', 'AA', 'BQP', 'NEXP_plo') => ('p', 'T', 'BQP', 'NEXP_plo')
('p', 'AA', 'BQP', 'NEXP_plo') => ('p', 'EA', 'BQP', 'NEXP_plo')
('p', 'AA', 'BQP', 'co.NEXP_plo') => ('p', 'T', 'BQP', 'co.NEXP_plo')
('p', 'AA', 'BQP', 'co.NEXP_plo') => ('p', 'EA', 'BQP', 'co.NEXP_plo')
('p', 'AA', 'BQP', 'cocap.NEXP_plo') => ('p', 'T', 'BQP', 'cocap.NEXP_plo')
('p', 'AA', 'BQP', 'cocap.NEXP_plo') => ('p', 'EA', 'BQP', 'cocap.NEXP_plo')
('p', 'A', 'cocap.AWPP', 'co.NEXP') => ('p', 'R', 'cocap.AWPP', 'co.NEXP')
('p', 'A', 'cocap.AWPP', 'co.NEXP') => ('p', 'AA', 'cocap.AWPP', 'co.NEXP')
('p', 'A', 'cocap.AWPP', 'NEXP') => ('p', 'R', 'cocap.AWPP', 'NEXP')
('p', 'A', 'cocap.AWPP', 'NEXP') => ('p', 'AA', 'cocap.AWPP', 'NEXP')
('p', 'A', 'cocap.AWPP', 'cocap.NEXP') => ('p', 'R', 'cocap.AWPP', 'cocap.NEXP')
('p', 'A', 'cocap.AWPP', 'cocap.NEXP') => ('p', 'AA', 'cocap.AWPP', 'cocap.NEXP')
('p', 'A', 'SPP', 'cocap.NEXP') => ('p', 'R', 'SPP', 'cocap.NEXP')
('p', 'A', 'SPP', 'cocap.NEXP') => ('p', 'AA', 'SPP', 'cocap.NEXP')
('p', 'A', 'SPP', 'co.NEXP') => ('p', 'R', 'SPP', 'co.NEXP')
('p', 'A', 'SPP', 'co.NEXP') => ('p', 'AA', 'SPP', 'co.NEXP')
('p', 'A', 'SPP', 'NEXP') => ('p', 'R', 'SPP', 'NEXP')
('p', 'A', 'SPP', 'NEXP') => ('p', 'AA', 'SPP', 'NEXP')
('p', 'A', 'co.UP', 'NEXP') => ('p', 'R', 'co.UP', 'NEXP')
('p', 'A', 'co.UP', 'NEXP') => ('p', 'AA', 'co.UP', 'NEXP')
('p', 'A', 'UP', 'co.NEXP') => ('p', 'R', 'UP', 'co.NEXP')
('p', 'A', 'UP', 'co.NEXP') => ('p', 'AA', 'UP', 'co.NEXP')
('p', 'A', 'UP', 'R') => ('p', 'R', 'UP', 'R')
('p', 'A', 'UP', 'R') => ('p', 'AA', 'UP', 'R')
('p', 'A', 'co.UP', 'R') => ('p', 'R', 'co.UP', 'R')
('p', 'A', 'co.UP', 'R') => ('p', 'AA', 'co.UP', 'R')
('p', 'A', 'co.UP', 'RE') => ('p', 'R', 'co.UP', 'RE')
('p', 'A', 'co.UP', 'RE') => ('p', 'AA', 'co.UP', 'RE')
('p', 'A', 'UP', 'co.RE') => ('p', 'R', 'UP', 'co.RE')
('p', 'A', 'UP', 'co.RE') => ('p', 'AA', 'UP', 'co.RE')
('p', 'AA', 'UP', 'co.RE') => ('p', 'T', 'UP', 'co.RE')
('p', 'AA', 'UP', 'co.RE') => ('p', 'EA', 'UP', 'co.RE')
('p', 'AA', 'co.UP', 'RE') => ('p', 'T', 'co.UP', 'RE')
('p', 'AA', 'co.UP', 'RE') => ('p', 'EA', 'co.UP', 'RE')
('p', 'A', 'co.UP', 'co.RE') => ('p', 'R', 'co.UP', 'co.RE')
('p', 'A', 'co.UP', 'co.RE') => ('p', 'AA', 'co.UP', 'co.RE')
('p', 'A', 'UP', 'RE') => ('p', 'R', 'UP', 'RE')
('p', 'A', 'UP', 'RE') => ('p', 'AA', 'UP', 'RE')
('p', 'AA', 'UP', 'RE') => ('p', 'T', 'UP', 'RE')
('p', 'AA', 'UP', 'RE') => ('p', 'EA', 'UP', 'RE')
('p', 'AA', 'UP', 'R') => ('p', 'T', 'UP', 'R')
('p', 'AA', 'UP', 'R') => ('p', 'EA', 'UP', 'R')
('p', 'AA', 'co.UP', 'R') => ('p', 'T', 'co.UP', 'R')
('p', 'AA', 'co.UP', 'R') => ('p', 'EA', 'co.UP', 'R')
('p', 'AA', 'co.UP', 'co.RE') => ('p', 'T', 'co.UP', 'co.RE')
('p', 'AA', 'co.UP', 'co.RE') => ('p', 'EA', 'co.UP', 'co.RE')
('p', 'A', 'UP', 'NEXP/poly') => ('p', 'R', 'UP', 'NEXP/poly')
('p', 'A', 'UP', 'NEXP/poly') => ('p', 'AA', 'UP', 'NEXP/poly')
('p', 'A', 'co.UP', 'NEXP/poly') => ('p', 'R', 'co.UP', 'NEXP/poly')
('p', 'A', 'co.UP', 'NEXP/poly') => ('p', 'AA', 'co.UP', 'NEXP/poly')
('p', 'AA', 'co.UP', 'NEXP/poly') => ('p', 'T', 'co.UP', 'NEXP/poly')
('p', 'AA', 'co.UP', 'NEXP/poly') => ('p', 'EA', 'co.UP', 'NEXP/poly')
('p', 'AA', 'UP', 'NEXP/poly') => ('p', 'T', 'UP', 'NEXP/poly')
('p', 'AA', 'UP', 'NEXP/poly') => ('p', 'EA', 'UP', 'NEXP/poly')
('p', 'AA', 'UP', 'co.NEXP') => ('p', 'T', 'UP', 'co.NEXP')
('p', 'AA', 'UP', 'co.NEXP') => ('p', 'EA', 'UP', 'co.NEXP')
('p', 'AA', 'co.UP', 'NEXP') => ('p', 'T', 'co.UP', 'NEXP')
('p', 'AA', 'co.UP', 'NEXP') => ('p', 'EA', 'co.UP', 'NEXP')
('p', 'A', 'SPP', 'R') => ('p', 'R', 'SPP', 'R')
('p', 'A', 'SPP', 'R') => ('p', 'AA', 'SPP', 'R')
('p', 'A', 'SPP', 'RE') => ('p', 'R', 'SPP', 'RE')
('p', 'A', 'SPP', 'RE') => ('p', 'AA', 'SPP', 'RE')
('p', 'A', 'SPP', 'co.RE') => ('p', 'R', 'SPP', 'co.RE')
('p', 'A', 'SPP', 'co.RE') => ('p', 'AA', 'SPP', 'co.RE')
('p', 'AA', 'SPP', 'co.RE') => ('p', 'T', 'SPP', 'co.RE')
('p', 'AA', 'SPP', 'co.RE') => ('p', 'EA', 'SPP', 'co.RE')
('p', 'AA', 'SPP', 'RE') => ('p', 'T', 'SPP', 'RE')
('p', 'AA', 'SPP', 'RE') => ('p', 'EA', 'SPP', 'RE')
('p', 'AA', 'SPP', 'R') => ('p', 'T', 'SPP', 'R')
('p', 'AA', 'SPP', 'R') => ('p', 'EA', 'SPP', 'R')
('-p', 'R', 'R', 'cocap.NP/poly') => ('-p', 'A', 'R', 'cocap.NP/poly')
('-p', 'R', 'R', 'co.NP/poly') => ('-p', 'A', 'R', 'co.NP/poly')
('-p', 'R', 'R', 'NP/poly') => ('-p', 'A', 'R', 'NP/poly')
('p', 'A', 'UP', 'NEXP') => ('p', 'R', 'UP', 'NEXP')
('p', 'A', 'UP', 'NEXP') => ('p', 'AA', 'UP', 'NEXP')
('p', 'A', 'UP', 'cocap.NEXP') => ('p', 'R', 'UP', 'cocap.NEXP')
('p', 'A', 'UP', 'cocap.NEXP') => ('p', 'AA', 'UP', 'cocap.NEXP')
('p', 'A', 'co.UP', 'cocap.NEXP') => ('p', 'R', 'co.UP', 'cocap.NEXP')
('p', 'A', 'co.UP', 'cocap.NEXP') => ('p', 'AA', 'co.UP', 'cocap.NEXP')
('p', 'A', 'co.UP', 'co.NEXP') => ('p', 'R', 'co.UP', 'co.NEXP')
('p', 'A', 'co.UP', 'co.NEXP') => ('p', 'AA', 'co.UP', 'co.NEXP')
('p', 'AA', 'co.UP', 'co.NEXP') => ('p', 'T', 'co.UP', 'co.NEXP')
('p', 'AA', 'co.UP', 'co.NEXP') => ('p', 'EA', 'co.UP', 'co.NEXP')
('p', 'AA', 'co.UP', 'cocap.NEXP') => ('p', 'T', 'co.UP', 'cocap.NEXP')
('p', 'AA', 'co.UP', 'cocap.NEXP') => ('p', 'EA', 'co.UP', 'cocap.NEXP')
('p', 'AA', 'UP', 'cocap.NEXP') => ('p', 'T', 'UP', 'cocap.NEXP')
('p', 'AA', 'UP', 'cocap.NEXP') => ('p', 'EA', 'UP', 'cocap.NEXP')
('p', 'AA', 'UP', 'NEXP') => ('p', 'T', 'UP', 'NEXP')
('p', 'AA', 'UP', 'NEXP') => ('p', 'EA', 'UP', 'NEXP')
('p', 'A', 'SPP', 'NEXP/poly') => ('p', 'R', 'SPP', 'NEXP/poly')
('p', 'A', 'SPP', 'NEXP/poly') => ('p', 'AA', 'SPP', 'NEXP/poly')
('p', 'AA', 'SPP', 'NEXP/poly') => ('p', 'T', 'SPP', 'NEXP/poly')
('p', 'AA', 'SPP', 'NEXP/poly') => ('p', 'EA', 'SPP', 'NEXP/poly')
('p', 'AA', 'SPP', 'NEXP') => ('p', 'T', 'SPP', 'NEXP')
('p', 'AA', 'SPP', 'NEXP') => ('p', 'EA', 'SPP', 'NEXP')
('p', 'AA', 'SPP', 'co.NEXP') => ('p', 'T', 'SPP', 'co.NEXP')
('p', 'AA', 'SPP', 'co.NEXP') => ('p', 'EA', 'SPP', 'co.NEXP')
('p', 'AA', 'SPP', 'cocap.NEXP') => ('p', 'T', 'SPP', 'cocap.NEXP')
('p', 'AA', 'SPP', 'cocap.NEXP') => ('p', 'EA', 'SPP', 'cocap.NEXP')
('-p', 'R', 'cocap.NEXP', '(NP-cap-coNP)/poly') => ('-p', 'A', 'cocap.NEXP', '(NP-cap-coNP)/poly')
('-p', 'R', 'cocap.NEXP', 'cocap.NP/poly') => ('-p', 'A', 'cocap.NEXP', 'cocap.NP/poly')
('-p', 'R', 'cocap.NEXP', 'co.NP/poly') => ('-p', 'A', 'cocap.NEXP', 'co.NP/poly')
('-p', 'R', 'cocap.NEXP', 'NP/poly') => ('-p', 'A', 'cocap.NEXP', 'NP/poly')
('p', 'A', 'cocap.AWPP', 'R') => ('p', 'R', 'cocap.AWPP', 'R')
('p', 'A', 'cocap.AWPP', 'R') => ('p', 'AA', 'cocap.AWPP', 'R')
('p', 'A', 'cocap.AWPP', 'RE') => ('p', 'R', 'cocap.AWPP', 'RE')
('p', 'A', 'cocap.AWPP', 'RE') => ('p', 'AA', 'cocap.AWPP', 'RE')
('p', 'A', 'cocap.AWPP', 'co.RE') => ('p', 'R', 'cocap.AWPP', 'co.RE')
('p', 'A', 'cocap.AWPP', 'co.RE') => ('p', 'AA', 'cocap.AWPP', 'co.RE')
('p', 'AA', 'cocap.AWPP', 'co.RE') => ('p', 'T', 'cocap.AWPP', 'co.RE')
('p', 'AA', 'cocap.AWPP', 'co.RE') => ('p', 'EA', 'cocap.AWPP', 'co.RE')
('p', 'AA', 'cocap.AWPP', 'RE') => ('p', 'T', 'cocap.AWPP', 'RE')
('p', 'AA', 'cocap.AWPP', 'RE') => ('p', 'EA', 'cocap.AWPP', 'RE')
('p', 'AA', 'cocap.AWPP', 'R') => ('p', 'T', 'cocap.AWPP', 'R')
('p', 'AA', 'cocap.AWPP', 'R') => ('p', 'EA', 'cocap.AWPP', 'R')
('p', 'A', 'cocap.AWPP', 'NEXP/poly') => ('p', 'R', 'cocap.AWPP', 'NEXP/poly')
('p', 'A', 'cocap.AWPP', 'NEXP/poly') => ('p', 'AA', 'cocap.AWPP', 'NEXP/poly')
('p', 'AA', 'cocap.AWPP', 'NEXP/poly') => ('p', 'T', 'cocap.AWPP', 'NEXP/poly')
('p', 'AA', 'cocap.AWPP', 'NEXP/poly') => ('p', 'EA', 'cocap.AWPP', 'NEXP/poly')
('p', 'AA', 'cocap.AWPP', 'cocap.NEXP') => ('p', 'T', 'cocap.AWPP', 'cocap.NEXP')
('p', 'AA', 'cocap.AWPP', 'cocap.NEXP') => ('p', 'EA', 'cocap.AWPP', 'cocap.NEXP')
('p', 'AA', 'cocap.AWPP', 'co.NEXP') => ('p', 'T', 'cocap.AWPP', 'co.NEXP')
('p', 'AA', 'cocap.AWPP', 'co.NEXP') => ('p', 'EA', 'cocap.AWPP', 'co.NEXP')
('p', 'AA', 'cocap.AWPP', 'NEXP') => ('p', 'T', 'cocap.AWPP', 'NEXP')
('p', 'AA', 'cocap.AWPP', 'NEXP') => ('p', 'EA', 'cocap.AWPP', 'NEXP')
('p', 'A', 'SPP', 'cocap.NEXP_plo') => ('p', 'R', 'SPP', 'cocap.NEXP_plo')
('p', 'A', 'SPP', 'cocap.NEXP_plo') => ('p', 'AA', 'SPP', 'cocap.NEXP_plo')
('p', 'A', 'SPP', 'co.NEXP_plo') => ('p', 'R', 'SPP', 'co.NEXP_plo')
('p', 'A', 'SPP', 'co.NEXP_plo') => ('p', 'AA', 'SPP', 'co.NEXP_plo')
('p', 'A', 'SPP', 'NEXP_plo') => ('p', 'R', 'SPP', 'NEXP_plo')
('p', 'A', 'SPP', 'NEXP_plo') => ('p', 'AA', 'SPP', 'NEXP_plo')
('p', 'A', 'co.UP', 'NEXP_plo') => ('p', 'R', 'co.UP', 'NEXP_plo')
('p', 'A', 'co.UP', 'NEXP_plo') => ('p', 'AA', 'co.UP', 'NEXP_plo')
('p', 'A', 'UP', 'co.NEXP_plo') => ('p', 'R', 'UP', 'co.NEXP_plo')
('p', 'A', 'UP', 'co.NEXP_plo') => ('p', 'AA', 'UP', 'co.NEXP_plo')
('p', 'A', 'UP', 'AH') => ('p', 'R', 'UP', 'AH')
('p', 'A', 'UP', 'AH') => ('p', 'AA', 'UP', 'AH')
('p', 'A', 'co.UP', 'AH') => ('p', 'R', 'co.UP', 'AH')
('p', 'A', 'co.UP', 'AH') => ('p', 'AA', 'co.UP', 'AH')
('p', 'AA', 'co.UP', 'AH') => ('p', 'T', 'co.UP', 'AH')
('p', 'AA', 'co.UP', 'AH') => ('p', 'EA', 'co.UP', 'AH')
('p', 'AA', 'UP', 'AH') => ('p', 'T', 'UP', 'AH')
('p', 'AA', 'UP', 'AH') => ('p', 'EA', 'UP', 'AH')
('p', 'A', 'UP', 'co.AH_plo') => ('p', 'R', 'UP', 'co.AH_plo')
('p', 'A', 'UP', 'co.AH_plo') => ('p', 'AA', 'UP', 'co.AH_plo')
('p', 'A', 'co.UP', 'AH_plo') => ('p', 'R', 'co.UP', 'AH_plo')
('p', 'A', 'co.UP', 'AH_plo') => ('p', 'AA', 'co.UP', 'AH_plo')
('p', 'AA', 'co.UP', 'AH_plo') => ('p', 'T', 'co.UP', 'AH_plo')
('p', 'AA', 'co.UP', 'AH_plo') => ('p', 'EA', 'co.UP', 'AH_plo')
('p', 'AA', 'UP', 'co.AH_plo') => ('p', 'T', 'UP', 'co.AH_plo')
('p', 'AA', 'UP', 'co.AH_plo') => ('p', 'EA', 'UP', 'co.AH_plo')
('p', 'AA', 'UP', 'co.NEXP_plo') => ('p', 'T', 'UP', 'co.NEXP_plo')
('p', 'AA', 'UP', 'co.NEXP_plo') => ('p', 'EA', 'UP', 'co.NEXP_plo')
('p', 'AA', 'co.UP', 'NEXP_plo') => ('p', 'T', 'co.UP', 'NEXP_plo')
('p', 'AA', 'co.UP', 'NEXP_plo') => ('p', 'EA', 'co.UP', 'NEXP_plo')
('p', 'A', 'SPP', 'AH') => ('p', 'R', 'SPP', 'AH')
('p', 'A', 'SPP', 'AH') => ('p', 'AA', 'SPP', 'AH')
('p', 'AA', 'SPP', 'AH') => ('p', 'T', 'SPP', 'AH')
('p', 'AA', 'SPP', 'AH') => ('p', 'EA', 'SPP', 'AH')
('p', 'A', 'UP', 'NEXP_plo') => ('p', 'R', 'UP', 'NEXP_plo')
('p', 'A', 'UP', 'NEXP_plo') => ('p', 'AA', 'UP', 'NEXP_plo')
('p', 'A', 'UP', 'cocap.NEXP_plo') => ('p', 'R', 'UP', 'cocap.NEXP_plo')
('p', 'A', 'UP', 'cocap.NEXP_plo') => ('p', 'AA', 'UP', 'cocap.NEXP_plo')
('p', 'A', 'co.UP', 'cocap.NEXP_plo') => ('p', 'R', 'co.UP', 'cocap.NEXP_plo')
('p', 'A', 'co.UP', 'cocap.NEXP_plo') => ('p', 'AA', 'co.UP', 'cocap.NEXP_plo')
('p', 'A', 'co.UP', 'co.NEXP_plo') => ('p', 'R', 'co.UP', 'co.NEXP_plo')
('p', 'A', 'co.UP', 'co.NEXP_plo') => ('p', 'AA', 'co.UP', 'co.NEXP_plo')
('p', 'A', 'co.UP', 'co.AH_plo') => ('p', 'R', 'co.UP', 'co.AH_plo')
('p', 'A', 'co.UP', 'co.AH_plo') => ('p', 'AA', 'co.UP', 'co.AH_plo')
('p', 'A', 'co.UP', 'cocap.AH_plo') => ('p', 'R', 'co.UP', 'cocap.AH_plo')
('p', 'A', 'co.UP', 'cocap.AH_plo') => ('p', 'AA', 'co.UP', 'cocap.AH_plo')
('p', 'A', 'UP', 'cocap.AH_plo') => ('p', 'R', 'UP', 'cocap.AH_plo')
('p', 'A', 'UP', 'cocap.AH_plo') => ('p', 'AA', 'UP', 'cocap.AH_plo')
('p', 'A', 'UP', 'AH_plo') => ('p', 'R', 'UP', 'AH_plo')
('p', 'A', 'UP', 'AH_plo') => ('p', 'AA', 'UP', 'AH_plo')
('p', 'AA', 'UP', 'AH_plo') => ('p', 'T', 'UP', 'AH_plo')
('p', 'AA', 'UP', 'AH_plo') => ('p', 'EA', 'UP', 'AH_plo')
('p', 'AA', 'UP', 'cocap.AH_plo') => ('p', 'T', 'UP', 'cocap.AH_plo')
('p', 'AA', 'UP', 'cocap.AH_plo') => ('p', 'EA', 'UP', 'cocap.AH_plo')
('p', 'AA', 'co.UP', 'cocap.AH_plo') => ('p', 'T', 'co.UP', 'cocap.AH_plo')
('p', 'AA', 'co.UP', 'cocap.AH_plo') => ('p', 'EA', 'co.UP', 'cocap.AH_plo')
('p', 'AA', 'co.UP', 'co.AH_plo') => ('p', 'T', 'co.UP', 'co.AH_plo')
('p', 'AA', 'co.UP', 'co.AH_plo') => ('p', 'EA', 'co.UP', 'co.AH_plo')
('p', 'AA', 'co.UP', 'co.NEXP_plo') => ('p', 'T', 'co.UP', 'co.NEXP_plo')
('p', 'AA', 'co.UP', 'co.NEXP_plo') => ('p', 'EA', 'co.UP', 'co.NEXP_plo')
('p', 'AA', 'co.UP', 'cocap.NEXP_plo') => ('p', 'T', 'co.UP', 'cocap.NEXP_plo')
('p', 'AA', 'co.UP', 'cocap.NEXP_plo') => ('p', 'EA', 'co.UP', 'cocap.NEXP_plo')
('p', 'AA', 'UP', 'cocap.NEXP_plo') => ('p', 'T', 'UP', 'cocap.NEXP_plo')
('p', 'AA', 'UP', 'cocap.NEXP_plo') => ('p', 'EA', 'UP', 'cocap.NEXP_plo')
('p', 'AA', 'UP', 'NEXP_plo') => ('p', 'T', 'UP', 'NEXP_plo')
('p', 'AA', 'UP', 'NEXP_plo') => ('p', 'EA', 'UP', 'NEXP_plo')
('p', 'A', 'SPP', 'AH_plo') => ('p', 'R', 'SPP', 'AH_plo')
('p', 'A', 'SPP', 'AH_plo') => ('p', 'AA', 'SPP', 'AH_plo')
('p', 'A', 'SPP', 'co.AH_plo') => ('p', 'R', 'SPP', 'co.AH_plo')
('p', 'A', 'SPP', 'co.AH_plo') => ('p', 'AA', 'SPP', 'co.AH_plo')
('p', 'A', 'SPP', 'cocap.AH_plo') => ('p', 'R', 'SPP', 'cocap.AH_plo')
('p', 'A', 'SPP', 'cocap.AH_plo') => ('p', 'AA', 'SPP', 'cocap.AH_plo')
('p', 'AA', 'SPP', 'cocap.AH_plo') => ('p', 'T', 'SPP', 'cocap.AH_plo')
('p', 'AA', 'SPP', 'cocap.AH_plo') => ('p', 'EA', 'SPP', 'cocap.AH_plo')
('p', 'AA', 'SPP', 'co.AH_plo') => ('p', 'T', 'SPP', 'co.AH_plo')
('p', 'AA', 'SPP', 'co.AH_plo') => ('p', 'EA', 'SPP', 'co.AH_plo')
('p', 'AA', 'SPP', 'AH_plo') => ('p', 'T', 'SPP', 'AH_plo')
('p', 'AA', 'SPP', 'AH_plo') => ('p', 'EA', 'SPP', 'AH_plo')
('p', 'AA', 'SPP', 'NEXP_plo') => ('p', 'T', 'SPP', 'NEXP_plo')
('p', 'AA', 'SPP', 'NEXP_plo') => ('p', 'EA', 'SPP', 'NEXP_plo')
('p', 'AA', 'SPP', 'co.NEXP_plo') => ('p', 'T', 'SPP', 'co.NEXP_plo')
('p', 'AA', 'SPP', 'co.NEXP_plo') => ('p', 'EA', 'SPP', 'co.NEXP_plo')
('p', 'AA', 'SPP', 'cocap.NEXP_plo') => ('p', 'T', 'SPP', 'cocap.NEXP_plo')
('p', 'AA', 'SPP', 'cocap.NEXP_plo') => ('p', 'EA', 'SPP', 'cocap.NEXP_plo')
('d', 'R', 'cocap.NEXP_plo', 'SBP') => ('d', 'A', 'cocap.NEXP_plo', 'SBP')
('d', 'R', 'cocap.NEXP_plo', 'co.SBP') => ('d', 'A', 'cocap.NEXP_plo', 'co.SBP')
('-p', 'R', 'cocap.NEXP_plo', '(NP-cap-coNP)/poly') => ('-p', 'A', 'cocap.NEXP_plo', '(NP-cap-coNP)/poly')
('d', 'R', 'cocap.NEXP_plo', 'cocap.SBP') => ('d', 'A', 'cocap.NEXP_plo', 'cocap.SBP')
('d', 'R', 'cocap.NEXP_plo', 'cocap.AM') => ('d', 'A', 'cocap.NEXP_plo', 'cocap.AM')
('d', 'R', 'cocap.NEXP_plo', 'AM') => ('d', 'A', 'cocap.NEXP_plo', 'AM')
('d', 'R', 'cocap.NEXP_plo', 'co.AM') => ('d', 'A', 'cocap.NEXP_plo', 'co.AM')
('-p', 'R', 'cocap.NEXP_plo', 'cocap.NP/poly') => ('-p', 'A', 'cocap.NEXP_plo', 'cocap.NP/poly')
('-p', 'R', 'cocap.NEXP_plo', 'co.NP/poly') => ('-p', 'A', 'cocap.NEXP_plo', 'co.NP/poly')
('-p', 'R', 'cocap.NEXP_plo', 'NP/poly') => ('-p', 'A', 'cocap.NEXP_plo', 'NP/poly')
('p', 'A', 'cocap.AWPP', 'co.NEXP_plo') => ('p', 'R', 'cocap.AWPP', 'co.NEXP_plo')
('p', 'A', 'cocap.AWPP', 'co.NEXP_plo') => ('p', 'AA', 'cocap.AWPP', 'co.NEXP_plo')
('p', 'A', 'cocap.AWPP', 'NEXP_plo') => ('p', 'R', 'cocap.AWPP', 'NEXP_plo')
('p', 'A', 'cocap.AWPP', 'NEXP_plo') => ('p', 'AA', 'cocap.AWPP', 'NEXP_plo')
('p', 'A', 'cocap.AWPP', 'AH') => ('p', 'R', 'cocap.AWPP', 'AH')
('p', 'A', 'cocap.AWPP', 'AH') => ('p', 'AA', 'cocap.AWPP', 'AH')
('p', 'AA', 'cocap.AWPP', 'AH') => ('p', 'T', 'cocap.AWPP', 'AH')
('p', 'AA', 'cocap.AWPP', 'AH') => ('p', 'EA', 'cocap.AWPP', 'AH')
('p', 'A', 'cocap.AWPP', 'AH_plo') => ('p', 'R', 'cocap.AWPP', 'AH_plo')
('p', 'A', 'cocap.AWPP', 'AH_plo') => ('p', 'AA', 'cocap.AWPP', 'AH_plo')
('p', 'A', 'cocap.AWPP', 'co.AH_plo') => ('p', 'R', 'cocap.AWPP', 'co.AH_plo')
('p', 'A', 'cocap.AWPP', 'co.AH_plo') => ('p', 'AA', 'cocap.AWPP', 'co.AH_plo')
('p', 'A', 'cocap.AWPP', 'cocap.AH_plo') => ('p', 'R', 'cocap.AWPP', 'cocap.AH_plo')
('p', 'A', 'cocap.AWPP', 'cocap.AH_plo') => ('p', 'AA', 'cocap.AWPP', 'cocap.AH_plo')
('p', 'AA', 'cocap.AWPP', 'cocap.AH_plo') => ('p', 'T', 'cocap.AWPP', 'cocap.AH_plo')
('p', 'AA', 'cocap.AWPP', 'cocap.AH_plo') => ('p', 'EA', 'cocap.AWPP', 'cocap.AH_plo')
('p', 'AA', 'cocap.AWPP', 'co.AH_plo') => ('p', 'T', 'cocap.AWPP', 'co.AH_plo')
('p', 'AA', 'cocap.AWPP', 'co.AH_plo') => ('p', 'EA', 'cocap.AWPP', 'co.AH_plo')
('p', 'AA', 'cocap.AWPP', 'AH_plo') => ('p', 'T', 'cocap.AWPP', 'AH_plo')
('p', 'AA', 'cocap.AWPP', 'AH_plo') => ('p', 'EA', 'cocap.AWPP', 'AH_plo')
('p', 'AA', 'cocap.AWPP', 'NEXP_plo') => ('p', 'T', 'cocap.AWPP', 'NEXP_plo')
('p', 'AA', 'cocap.AWPP', 'NEXP_plo') => ('p', 'EA', 'cocap.AWPP', 'NEXP_plo')
('p', 'AA', 'cocap.AWPP', 'co.NEXP_plo') => ('p', 'T', 'cocap.AWPP', 'co.NEXP_plo')
('p', 'AA', 'cocap.AWPP', 'co.NEXP_plo') => ('p', 'EA', 'cocap.AWPP', 'co.NEXP_plo')
('p', 'AA', 'cocap.AWPP', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.AWPP', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.AWPP', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.AWPP', 'cocap.NEXP_plo')
('d', 'A', 'EXP_plo', 'SZK') => ('-p', 'A', 'EXP_plo', 'SZK')
('p', 'A', 'cocap.UP', 'EXP_plo') => ('-d', 'A', 'cocap.UP', 'EXP_plo')
('p', 'A', 'cocap.UP', 'EXP_plo') => ('p', 'R', 'cocap.UP', 'EXP_plo')
('p', 'A', 'cocap.UP', 'EXP_plo') => ('p', 'AA', 'cocap.UP', 'EXP_plo')
('p', 'AA', 'cocap.UP', 'EXP_plo') => ('-d', 'AA', 'cocap.UP', 'EXP_plo')
('p', 'AA', 'cocap.UP', 'EXP_plo') => ('p', 'T', 'cocap.UP', 'EXP_plo')
('p', 'AA', 'cocap.UP', 'EXP_plo') => ('p', 'EA', 'cocap.UP', 'EXP_plo')
('p', 'EA', 'cocap.UP', 'EXP_plo') => ('-d', 'EA', 'cocap.UP', 'EXP_plo')
('p', 'T', 'cocap.UP', 'EXP_plo') => ('-d', 'T', 'cocap.UP', 'EXP_plo')
('p', 'R', 'cocap.UP', 'EXP_plo') => ('-d', 'R', 'cocap.UP', 'EXP_plo')
('p', 'A', 'BQP', 'EXP_plo') => ('-d', 'A', 'BQP', 'EXP_plo')
('p', 'A', 'BQP', 'EXP_plo') => ('p', 'R', 'BQP', 'EXP_plo')
('p', 'A', 'BQP', 'EXP_plo') => ('p', 'AA', 'BQP', 'EXP_plo')
('p', 'A', 'BPP', 'EXP_plo') => ('-d', 'A', 'BPP', 'EXP_plo')
('p', 'A', 'BPP', 'EXP_plo') => ('p', 'R', 'BPP', 'EXP_plo')
('p', 'A', 'BPP', 'EXP_plo') => ('p', 'AA', 'BPP', 'EXP_plo')
('p', 'AA', 'BPP', 'EXP_plo') => ('-d', 'AA', 'BPP', 'EXP_plo')
('p', 'AA', 'BPP', 'EXP_plo') => ('p', 'T', 'BPP', 'EXP_plo')
('p', 'AA', 'BPP', 'EXP_plo') => ('p', 'EA', 'BPP', 'EXP_plo')
('p', 'EA', 'BPP', 'EXP_plo') => ('-d', 'EA', 'BPP', 'EXP_plo')
('p', 'T', 'BPP', 'EXP_plo') => ('-d', 'T', 'BPP', 'EXP_plo')
('d', 'A', 'EXP_plo', 'PostBPP') => ('-p', 'A', 'EXP_plo', 'PostBPP')
('p', 'AA', 'BQP', 'EXP_plo') => ('-d', 'AA', 'BQP', 'EXP_plo')
('p', 'AA', 'BQP', 'EXP_plo') => ('p', 'T', 'BQP', 'EXP_plo')
('p', 'AA', 'BQP', 'EXP_plo') => ('p', 'EA', 'BQP', 'EXP_plo')
('p', 'EA', 'BQP', 'EXP_plo') => ('-d', 'EA', 'BQP', 'EXP_plo')
('p', 'T', 'BQP', 'EXP_plo') => ('-d', 'T', 'BQP', 'EXP_plo')
('p', 'R', 'BQP', 'EXP_plo') => ('-d', 'R', 'BQP', 'EXP_plo')
('d', 'A', 'EXP_plo', 'co.MA') => ('-p', 'A', 'EXP_plo', 'co.MA')
('d', 'A', 'EXP_plo', 'MA') => ('-p', 'A', 'EXP_plo', 'MA')
('p', 'A', 'SPP', 'EXP_plo') => ('-d', 'A', 'SPP', 'EXP_plo')
('p', 'A', 'SPP', 'EXP_plo') => ('p', 'R', 'SPP', 'EXP_plo')
('p', 'A', 'SPP', 'EXP_plo') => ('p', 'AA', 'SPP', 'EXP_plo')
('d', 'A', 'EXP_plo', 'SBP') => ('-p', 'A', 'EXP_plo', 'SBP')
('d', 'A', 'EXP_plo', 'co.SBP') => ('-p', 'A', 'EXP_plo', 'co.SBP')
('p', 'A', 'co.UP', 'EXP_plo') => ('-d', 'A', 'co.UP', 'EXP_plo')
('p', 'A', 'co.UP', 'EXP_plo') => ('p', 'R', 'co.UP', 'EXP_plo')
('p', 'A', 'co.UP', 'EXP_plo') => ('p', 'AA', 'co.UP', 'EXP_plo')
('p', 'A', 'UP', 'EXP_plo') => ('-d', 'A', 'UP', 'EXP_plo')
('p', 'A', 'UP', 'EXP_plo') => ('p', 'R', 'UP', 'EXP_plo')
('p', 'A', 'UP', 'EXP_plo') => ('p', 'AA', 'UP', 'EXP_plo')
('p', 'AA', 'UP', 'EXP_plo') => ('-d', 'AA', 'UP', 'EXP_plo')
('p', 'AA', 'UP', 'EXP_plo') => ('p', 'T', 'UP', 'EXP_plo')
('p', 'AA', 'UP', 'EXP_plo') => ('p', 'EA', 'UP', 'EXP_plo')
('p', 'AA', 'co.UP', 'EXP_plo') => ('-d', 'AA', 'co.UP', 'EXP_plo')
('p', 'AA', 'co.UP', 'EXP_plo') => ('p', 'T', 'co.UP', 'EXP_plo')
('p', 'AA', 'co.UP', 'EXP_plo') => ('p', 'EA', 'co.UP', 'EXP_plo')
('p', 'EA', 'co.UP', 'EXP_plo') => ('-d', 'EA', 'co.UP', 'EXP_plo')
('p', 'EA', 'UP', 'EXP_plo') => ('-d', 'EA', 'UP', 'EXP_plo')
('p', 'T', 'co.UP', 'EXP_plo') => ('-d', 'T', 'co.UP', 'EXP_plo')
('p', 'T', 'UP', 'EXP_plo') => ('-d', 'T', 'UP', 'EXP_plo')
('p', 'R', 'UP', 'EXP_plo') => ('-d', 'R', 'UP', 'EXP_plo')
('p', 'R', 'co.UP', 'EXP_plo') => ('-d', 'R', 'co.UP', 'EXP_plo')
('d', 'A', 'EXP_plo', 'AM') => ('-p', 'A', 'EXP_plo', 'AM')
('d', 'A', 'EXP_plo', 'co.AM') => ('-p', 'A', 'EXP_plo', 'co.AM')
('p', 'AA', 'SPP', 'EXP_plo') => ('-d', 'AA', 'SPP', 'EXP_plo')
('p', 'AA', 'SPP', 'EXP_plo') => ('p', 'T', 'SPP', 'EXP_plo')
('p', 'AA', 'SPP', 'EXP_plo') => ('p', 'EA', 'SPP', 'EXP_plo')
('p', 'EA', 'SPP', 'EXP_plo') => ('-d', 'EA', 'SPP', 'EXP_plo')
('p', 'T', 'SPP', 'EXP_plo') => ('-d', 'T', 'SPP', 'EXP_plo')
('p', 'R', 'SPP', 'EXP_plo') => ('-d', 'R', 'SPP', 'EXP_plo')
('d', 'R', 'EXP_plo', 'RP') => ('-p', 'R', 'EXP_plo', 'RP')
('d', 'R', 'EXP_plo', 'co.RP') => ('-p', 'R', 'EXP_plo', 'co.RP')
('p', 'R', 'co.Sigma_2P', 'EXP_plo') => ('-d', 'R', 'co.Sigma_2P', 'EXP_plo')
('p', 'R', 'Sigma_2P', 'EXP_plo') => ('-d', 'R', 'Sigma_2P', 'EXP_plo')
('p', 'R', 'cocap.Sigma_2P', 'EXP_plo') => ('-d', 'R', 'cocap.Sigma_2P', 'EXP_plo')
('p', 'R', 'Delta_2P', 'EXP_plo') => ('-d', 'R', 'Delta_2P', 'EXP_plo')
('p', 'R', 'S_2P', 'EXP_plo') => ('-d', 'R', 'S_2P', 'EXP_plo')
('d', 'R', 'EXP_plo', 'NP') => ('-p', 'R', 'EXP_plo', 'NP')
('d', 'R', 'EXP_plo', 'co.NP') => ('-p', 'R', 'EXP_plo', 'co.NP')
('p', 'R', 'PH', 'EXP_plo') => ('-d', 'R', 'PH', 'EXP_plo')
('p', 'R', 'Delta_3P', 'EXP_plo') => ('-d', 'R', 'Delta_3P', 'EXP_plo')
('p', 'AA', 'cocap.AWPP', 'EXP_plo') => ('-d', 'AA', 'cocap.AWPP', 'EXP_plo')
('p', 'AA', 'cocap.AWPP', 'EXP_plo') => ('p', 'T', 'cocap.AWPP', 'EXP_plo')
('p', 'AA', 'cocap.AWPP', 'EXP_plo') => ('p', 'EA', 'cocap.AWPP', 'EXP_plo')
('p', 'EA', 'cocap.AWPP', 'EXP_plo') => ('-d', 'EA', 'cocap.AWPP', 'EXP_plo')
('p', 'T', 'cocap.AWPP', 'EXP_plo') => ('-d', 'T', 'cocap.AWPP', 'EXP_plo')
('p', 'R', 'cocap.AWPP', 'EXP_plo') => ('-d', 'R', 'cocap.AWPP', 'EXP_plo')
('-d', 'A', 'AWPP', 'ALL') => ('-d', 'R', 'AWPP', 'ALL')
('-d', 'A', 'AWPP', 'ALL') => ('-d', 'AA', 'AWPP', 'ALL')
('-d', 'A', 'co.AWPP', 'ALL') => ('-d', 'R', 'co.AWPP', 'ALL')
('-d', 'A', 'co.AWPP', 'ALL') => ('-d', 'AA', 'co.AWPP', 'ALL')
('-d', 'AA', 'co.AWPP', 'ALL') => ('-d', 'T', 'co.AWPP', 'ALL')
('-d', 'AA', 'co.AWPP', 'ALL') => ('-d', 'EA', 'co.AWPP', 'ALL')
('-d', 'AA', 'AWPP', 'ALL') => ('-d', 'T', 'AWPP', 'ALL')
('-d', 'AA', 'AWPP', 'ALL') => ('-d', 'EA', 'AWPP', 'ALL')
('p', 'A', 'AWPP', 'ALL') => ('p', 'R', 'AWPP', 'ALL')
('p', 'A', 'AWPP', 'ALL') => ('p', 'AA', 'AWPP', 'ALL')
('p', 'A', 'co.AWPP', 'ALL') => ('p', 'R', 'co.AWPP', 'ALL')
('p', 'A', 'co.AWPP', 'ALL') => ('p', 'AA', 'co.AWPP', 'ALL')
('p', 'AA', 'co.AWPP', 'ALL') => ('p', 'T', 'co.AWPP', 'ALL')
('p', 'AA', 'co.AWPP', 'ALL') => ('p', 'EA', 'co.AWPP', 'ALL')
('p', 'AA', 'AWPP', 'ALL') => ('p', 'T', 'AWPP', 'ALL')
('p', 'AA', 'AWPP', 'ALL') => ('p', 'EA', 'AWPP', 'ALL')
('-d', 'A', 'AWPP', 'cocap.NEXP_plo') => ('-d', 'R', 'AWPP', 'cocap.NEXP_plo')
('-d', 'A', 'AWPP', 'cocap.NEXP_plo') => ('-d', 'AA', 'AWPP', 'cocap.NEXP_plo')
('-d', 'A', 'co.AWPP', 'cocap.NEXP_plo') => ('-d', 'R', 'co.AWPP', 'cocap.NEXP_plo')
('-d', 'A', 'co.AWPP', 'cocap.NEXP_plo') => ('-d', 'AA', 'co.AWPP', 'cocap.NEXP_plo')
('-d', 'A', 'co.AWPP', 'co.NEXP') => ('-d', 'R', 'co.AWPP', 'co.NEXP')
('-d', 'A', 'co.AWPP', 'co.NEXP') => ('-d', 'AA', 'co.AWPP', 'co.NEXP')
('-d', 'A', 'AWPP', 'NEXP') => ('-d', 'R', 'AWPP', 'NEXP')
('-d', 'A', 'AWPP', 'NEXP') => ('-d', 'AA', 'AWPP', 'NEXP')
('-d', 'A', 'AWPP', 'R') => ('-d', 'R', 'AWPP', 'R')
('-d', 'A', 'AWPP', 'R') => ('-d', 'AA', 'AWPP', 'R')
('-d', 'A', 'co.AWPP', 'R') => ('-d', 'R', 'co.AWPP', 'R')
('-d', 'A', 'co.AWPP', 'R') => ('-d', 'AA', 'co.AWPP', 'R')
('-d', 'A', 'co.AWPP', 'RE') => ('-d', 'R', 'co.AWPP', 'RE')
('-d', 'A', 'co.AWPP', 'RE') => ('-d', 'AA', 'co.AWPP', 'RE')
('-d', 'A', 'AWPP', 'co.RE') => ('-d', 'R', 'AWPP', 'co.RE')
('-d', 'A', 'AWPP', 'co.RE') => ('-d', 'AA', 'AWPP', 'co.RE')
('-d', 'AA', 'AWPP', 'co.RE') => ('-d', 'T', 'AWPP', 'co.RE')
('-d', 'AA', 'AWPP', 'co.RE') => ('-d', 'EA', 'AWPP', 'co.RE')
('-d', 'AA', 'co.AWPP', 'RE') => ('-d', 'T', 'co.AWPP', 'RE')
('-d', 'AA', 'co.AWPP', 'RE') => ('-d', 'EA', 'co.AWPP', 'RE')
('-d', 'A', 'co.AWPP', 'co.RE') => ('-d', 'R', 'co.AWPP', 'co.RE')
('-d', 'A', 'co.AWPP', 'co.RE') => ('-d', 'AA', 'co.AWPP', 'co.RE')
('-d', 'A', 'AWPP', 'RE') => ('-d', 'R', 'AWPP', 'RE')
('-d', 'A', 'AWPP', 'RE') => ('-d', 'AA', 'AWPP', 'RE')
('-d', 'AA', 'AWPP', 'RE') => ('-d', 'T', 'AWPP', 'RE')
('-d', 'AA', 'AWPP', 'RE') => ('-d', 'EA', 'AWPP', 'RE')
('-d', 'AA', 'co.AWPP', 'co.RE') => ('-d', 'T', 'co.AWPP', 'co.RE')
('-d', 'AA', 'co.AWPP', 'co.RE') => ('-d', 'EA', 'co.AWPP', 'co.RE')
('-d', 'AA', 'co.AWPP', 'R') => ('-d', 'T', 'co.AWPP', 'R')
('-d', 'AA', 'co.AWPP', 'R') => ('-d', 'EA', 'co.AWPP', 'R')
('-d', 'AA', 'AWPP', 'R') => ('-d', 'T', 'AWPP', 'R')
('-d', 'AA', 'AWPP', 'R') => ('-d', 'EA', 'AWPP', 'R')
('-d', 'A', 'AWPP', 'NEXP/poly') => ('-d', 'R', 'AWPP', 'NEXP/poly')
('-d', 'A', 'AWPP', 'NEXP/poly') => ('-d', 'AA', 'AWPP', 'NEXP/poly')
('-d', 'A', 'co.AWPP', 'NEXP/poly') => ('-d', 'R', 'co.AWPP', 'NEXP/poly')
('-d', 'A', 'co.AWPP', 'NEXP/poly') => ('-d', 'AA', 'co.AWPP', 'NEXP/poly')
('-d', 'AA', 'co.AWPP', 'NEXP/poly') => ('-d', 'T', 'co.AWPP', 'NEXP/poly')
('-d', 'AA', 'co.AWPP', 'NEXP/poly') => ('-d', 'EA', 'co.AWPP', 'NEXP/poly')
('-d', 'AA', 'AWPP', 'NEXP/poly') => ('-d', 'T', 'AWPP', 'NEXP/poly')
('-d', 'AA', 'AWPP', 'NEXP/poly') => ('-d', 'EA', 'AWPP', 'NEXP/poly')
('-d', 'AA', 'AWPP', 'NEXP') => ('-d', 'T', 'AWPP', 'NEXP')
('-d', 'AA', 'AWPP', 'NEXP') => ('-d', 'EA', 'AWPP', 'NEXP')
('-d', 'AA', 'co.AWPP', 'co.NEXP') => ('-d', 'T', 'co.AWPP', 'co.NEXP')
('-d', 'AA', 'co.AWPP', 'co.NEXP') => ('-d', 'EA', 'co.AWPP', 'co.NEXP')
('-d', 'A', 'co.AWPP', 'NEXP') => ('-d', 'R', 'co.AWPP', 'NEXP')
('-d', 'A', 'co.AWPP', 'NEXP') => ('-d', 'AA', 'co.AWPP', 'NEXP')
('-d', 'A', 'AWPP', 'co.NEXP') => ('-d', 'R', 'AWPP', 'co.NEXP')
('-d', 'A', 'AWPP', 'co.NEXP') => ('-d', 'AA', 'AWPP', 'co.NEXP')
('-d', 'AA', 'AWPP', 'co.NEXP') => ('-d', 'T', 'AWPP', 'co.NEXP')
('-d', 'AA', 'AWPP', 'co.NEXP') => ('-d', 'EA', 'AWPP', 'co.NEXP')
('-d', 'AA', 'co.AWPP', 'NEXP') => ('-d', 'T', 'co.AWPP', 'NEXP')
('-d', 'AA', 'co.AWPP', 'NEXP') => ('-d', 'EA', 'co.AWPP', 'NEXP')
('-d', 'A', 'co.AWPP', 'cocap.NEXP') => ('-d', 'R', 'co.AWPP', 'cocap.NEXP')
('-d', 'A', 'co.AWPP', 'cocap.NEXP') => ('-d', 'AA', 'co.AWPP', 'cocap.NEXP')
('-d', 'A', 'AWPP', 'cocap.NEXP') => ('-d', 'R', 'AWPP', 'cocap.NEXP')
('-d', 'A', 'AWPP', 'cocap.NEXP') => ('-d', 'AA', 'AWPP', 'cocap.NEXP')
('-d', 'AA', 'AWPP', 'cocap.NEXP') => ('-d', 'T', 'AWPP', 'cocap.NEXP')
('-d', 'AA', 'AWPP', 'cocap.NEXP') => ('-d', 'EA', 'AWPP', 'cocap.NEXP')
('-d', 'AA', 'co.AWPP', 'cocap.NEXP') => ('-d', 'T', 'co.AWPP', 'cocap.NEXP')
('-d', 'AA', 'co.AWPP', 'cocap.NEXP') => ('-d', 'EA', 'co.AWPP', 'cocap.NEXP')
('-d', 'A', 'co.AWPP', 'co.NEXP_plo') => ('-d', 'R', 'co.AWPP', 'co.NEXP_plo')
('-d', 'A', 'co.AWPP', 'co.NEXP_plo') => ('-d', 'AA', 'co.AWPP', 'co.NEXP_plo')
('-d', 'A', 'AWPP', 'NEXP_plo') => ('-d', 'R', 'AWPP', 'NEXP_plo')
('-d', 'A', 'AWPP', 'NEXP_plo') => ('-d', 'AA', 'AWPP', 'NEXP_plo')
('-d', 'A', 'AWPP', 'AH') => ('-d', 'R', 'AWPP', 'AH')
('-d', 'A', 'AWPP', 'AH') => ('-d', 'AA', 'AWPP', 'AH')
('-d', 'A', 'co.AWPP', 'AH') => ('-d', 'R', 'co.AWPP', 'AH')
('-d', 'A', 'co.AWPP', 'AH') => ('-d', 'AA', 'co.AWPP', 'AH')
('-d', 'AA', 'co.AWPP', 'AH') => ('-d', 'T', 'co.AWPP', 'AH')
('-d', 'AA', 'co.AWPP', 'AH') => ('-d', 'EA', 'co.AWPP', 'AH')
('-d', 'AA', 'AWPP', 'AH') => ('-d', 'T', 'AWPP', 'AH')
('-d', 'AA', 'AWPP', 'AH') => ('-d', 'EA', 'AWPP', 'AH')
('-d', 'A', 'AWPP', 'AH_plo') => ('-d', 'R', 'AWPP', 'AH_plo')
('-d', 'A', 'AWPP', 'AH_plo') => ('-d', 'AA', 'AWPP', 'AH_plo')
('-d', 'A', 'co.AWPP', 'co.AH_plo') => ('-d', 'R', 'co.AWPP', 'co.AH_plo')
('-d', 'A', 'co.AWPP', 'co.AH_plo') => ('-d', 'AA', 'co.AWPP', 'co.AH_plo')
('-d', 'AA', 'co.AWPP', 'co.AH_plo') => ('-d', 'T', 'co.AWPP', 'co.AH_plo')
('-d', 'AA', 'co.AWPP', 'co.AH_plo') => ('-d', 'EA', 'co.AWPP', 'co.AH_plo')
('-d', 'AA', 'AWPP', 'AH_plo') => ('-d', 'T', 'AWPP', 'AH_plo')
('-d', 'AA', 'AWPP', 'AH_plo') => ('-d', 'EA', 'AWPP', 'AH_plo')
('-d', 'AA', 'AWPP', 'NEXP_plo') => ('-d', 'T', 'AWPP', 'NEXP_plo')
('-d', 'AA', 'AWPP', 'NEXP_plo') => ('-d', 'EA', 'AWPP', 'NEXP_plo')
('-d', 'AA', 'co.AWPP', 'co.NEXP_plo') => ('-d', 'T', 'co.AWPP', 'co.NEXP_plo')
('-d', 'AA', 'co.AWPP', 'co.NEXP_plo') => ('-d', 'EA', 'co.AWPP', 'co.NEXP_plo')
('-d', 'A', 'co.AWPP', 'cocap.AH_plo') => ('-d', 'R', 'co.AWPP', 'cocap.AH_plo')
('-d', 'A', 'co.AWPP', 'cocap.AH_plo') => ('-d', 'AA', 'co.AWPP', 'cocap.AH_plo')
('-d', 'A', 'AWPP', 'cocap.AH_plo') => ('-d', 'R', 'AWPP', 'cocap.AH_plo')
('-d', 'A', 'AWPP', 'cocap.AH_plo') => ('-d', 'AA', 'AWPP', 'cocap.AH_plo')
('-d', 'A', 'AWPP', 'co.AH_plo') => ('-d', 'R', 'AWPP', 'co.AH_plo')
('-d', 'A', 'AWPP', 'co.AH_plo') => ('-d', 'AA', 'AWPP', 'co.AH_plo')
('-d', 'A', 'co.AWPP', 'AH_plo') => ('-d', 'R', 'co.AWPP', 'AH_plo')
('-d', 'A', 'co.AWPP', 'AH_plo') => ('-d', 'AA', 'co.AWPP', 'AH_plo')
('-d', 'AA', 'co.AWPP', 'AH_plo') => ('-d', 'T', 'co.AWPP', 'AH_plo')
('-d', 'AA', 'co.AWPP', 'AH_plo') => ('-d', 'EA', 'co.AWPP', 'AH_plo')
('-d', 'AA', 'AWPP', 'co.AH_plo') => ('-d', 'T', 'AWPP', 'co.AH_plo')
('-d', 'AA', 'AWPP', 'co.AH_plo') => ('-d', 'EA', 'AWPP', 'co.AH_plo')
('-d', 'AA', 'AWPP', 'cocap.AH_plo') => ('-d', 'T', 'AWPP', 'cocap.AH_plo')
('-d', 'AA', 'AWPP', 'cocap.AH_plo') => ('-d', 'EA', 'AWPP', 'cocap.AH_plo')
('-d', 'AA', 'co.AWPP', 'cocap.AH_plo') => ('-d', 'T', 'co.AWPP', 'cocap.AH_plo')
('-d', 'AA', 'co.AWPP', 'cocap.AH_plo') => ('-d', 'EA', 'co.AWPP', 'cocap.AH_plo')
('-d', 'A', 'co.AWPP', 'NEXP_plo') => ('-d', 'R', 'co.AWPP', 'NEXP_plo')
('-d', 'A', 'co.AWPP', 'NEXP_plo') => ('-d', 'AA', 'co.AWPP', 'NEXP_plo')
('-d', 'A', 'AWPP', 'co.NEXP_plo') => ('-d', 'R', 'AWPP', 'co.NEXP_plo')
('-d', 'A', 'AWPP', 'co.NEXP_plo') => ('-d', 'AA', 'AWPP', 'co.NEXP_plo')
('-d', 'AA', 'AWPP', 'co.NEXP_plo') => ('-d', 'T', 'AWPP', 'co.NEXP_plo')
('-d', 'AA', 'AWPP', 'co.NEXP_plo') => ('-d', 'EA', 'AWPP', 'co.NEXP_plo')
('-d', 'AA', 'co.AWPP', 'NEXP_plo') => ('-d', 'T', 'co.AWPP', 'NEXP_plo')
('-d', 'AA', 'co.AWPP', 'NEXP_plo') => ('-d', 'EA', 'co.AWPP', 'NEXP_plo')
('-d', 'AA', 'co.AWPP', 'cocap.NEXP_plo') => ('-d', 'T', 'co.AWPP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.AWPP', 'cocap.NEXP_plo') => ('-d', 'EA', 'co.AWPP', 'cocap.NEXP_plo')
('-d', 'AA', 'AWPP', 'cocap.NEXP_plo') => ('-d', 'T', 'AWPP', 'cocap.NEXP_plo')
('-d', 'AA', 'AWPP', 'cocap.NEXP_plo') => ('-d', 'EA', 'AWPP', 'cocap.NEXP_plo')
('p', 'A', 'AWPP', 'cocap.NEXP_plo') => ('p', 'R', 'AWPP', 'cocap.NEXP_plo')
('p', 'A', 'AWPP', 'cocap.NEXP_plo') => ('p', 'AA', 'AWPP', 'cocap.NEXP_plo')
('p', 'A', 'co.AWPP', 'cocap.NEXP_plo') => ('p', 'R', 'co.AWPP', 'cocap.NEXP_plo')
('p', 'A', 'co.AWPP', 'cocap.NEXP_plo') => ('p', 'AA', 'co.AWPP', 'cocap.NEXP_plo')
('p', 'A', 'co.AWPP', 'co.NEXP') => ('p', 'R', 'co.AWPP', 'co.NEXP')
('p', 'A', 'co.AWPP', 'co.NEXP') => ('p', 'AA', 'co.AWPP', 'co.NEXP')
('p', 'A', 'AWPP', 'NEXP') => ('p', 'R', 'AWPP', 'NEXP')
('p', 'A', 'AWPP', 'NEXP') => ('p', 'AA', 'AWPP', 'NEXP')
('p', 'A', 'AWPP', 'R') => ('p', 'R', 'AWPP', 'R')
('p', 'A', 'AWPP', 'R') => ('p', 'AA', 'AWPP', 'R')
('p', 'A', 'co.AWPP', 'R') => ('p', 'R', 'co.AWPP', 'R')
('p', 'A', 'co.AWPP', 'R') => ('p', 'AA', 'co.AWPP', 'R')
('p', 'A', 'co.AWPP', 'RE') => ('p', 'R', 'co.AWPP', 'RE')
('p', 'A', 'co.AWPP', 'RE') => ('p', 'AA', 'co.AWPP', 'RE')
('p', 'A', 'AWPP', 'co.RE') => ('p', 'R', 'AWPP', 'co.RE')
('p', 'A', 'AWPP', 'co.RE') => ('p', 'AA', 'AWPP', 'co.RE')
('p', 'AA', 'AWPP', 'co.RE') => ('p', 'T', 'AWPP', 'co.RE')
('p', 'AA', 'AWPP', 'co.RE') => ('p', 'EA', 'AWPP', 'co.RE')
('p', 'AA', 'co.AWPP', 'RE') => ('p', 'T', 'co.AWPP', 'RE')
('p', 'AA', 'co.AWPP', 'RE') => ('p', 'EA', 'co.AWPP', 'RE')
('p', 'A', 'co.AWPP', 'co.RE') => ('p', 'R', 'co.AWPP', 'co.RE')
('p', 'A', 'co.AWPP', 'co.RE') => ('p', 'AA', 'co.AWPP', 'co.RE')
('p', 'A', 'AWPP', 'RE') => ('p', 'R', 'AWPP', 'RE')
('p', 'A', 'AWPP', 'RE') => ('p', 'AA', 'AWPP', 'RE')
('p', 'AA', 'AWPP', 'RE') => ('p', 'T', 'AWPP', 'RE')
('p', 'AA', 'AWPP', 'RE') => ('p', 'EA', 'AWPP', 'RE')
('p', 'AA', 'AWPP', 'R') => ('p', 'T', 'AWPP', 'R')
('p', 'AA', 'AWPP', 'R') => ('p', 'EA', 'AWPP', 'R')
('p', 'AA', 'co.AWPP', 'R') => ('p', 'T', 'co.AWPP', 'R')
('p', 'AA', 'co.AWPP', 'R') => ('p', 'EA', 'co.AWPP', 'R')
('p', 'AA', 'co.AWPP', 'co.RE') => ('p', 'T', 'co.AWPP', 'co.RE')
('p', 'AA', 'co.AWPP', 'co.RE') => ('p', 'EA', 'co.AWPP', 'co.RE')
('p', 'A', 'AWPP', 'NEXP/poly') => ('p', 'R', 'AWPP', 'NEXP/poly')
('p', 'A', 'AWPP', 'NEXP/poly') => ('p', 'AA', 'AWPP', 'NEXP/poly')
('p', 'A', 'co.AWPP', 'NEXP/poly') => ('p', 'R', 'co.AWPP', 'NEXP/poly')
('p', 'A', 'co.AWPP', 'NEXP/poly') => ('p', 'AA', 'co.AWPP', 'NEXP/poly')
('p', 'AA', 'co.AWPP', 'NEXP/poly') => ('p', 'T', 'co.AWPP', 'NEXP/poly')
('p', 'AA', 'co.AWPP', 'NEXP/poly') => ('p', 'EA', 'co.AWPP', 'NEXP/poly')
('p', 'AA', 'AWPP', 'NEXP/poly') => ('p', 'T', 'AWPP', 'NEXP/poly')
('p', 'AA', 'AWPP', 'NEXP/poly') => ('p', 'EA', 'AWPP', 'NEXP/poly')
('p', 'AA', 'AWPP', 'NEXP') => ('p', 'T', 'AWPP', 'NEXP')
('p', 'AA', 'AWPP', 'NEXP') => ('p', 'EA', 'AWPP', 'NEXP')
('p', 'AA', 'co.AWPP', 'co.NEXP') => ('p', 'T', 'co.AWPP', 'co.NEXP')
('p', 'AA', 'co.AWPP', 'co.NEXP') => ('p', 'EA', 'co.AWPP', 'co.NEXP')
('p', 'A', 'co.AWPP', 'NEXP') => ('p', 'R', 'co.AWPP', 'NEXP')
('p', 'A', 'co.AWPP', 'NEXP') => ('p', 'AA', 'co.AWPP', 'NEXP')
('p', 'A', 'co.AWPP', 'cocap.NEXP') => ('p', 'R', 'co.AWPP', 'cocap.NEXP')
('p', 'A', 'co.AWPP', 'cocap.NEXP') => ('p', 'AA', 'co.AWPP', 'cocap.NEXP')
('p', 'A', 'AWPP', 'cocap.NEXP') => ('p', 'R', 'AWPP', 'cocap.NEXP')
('p', 'A', 'AWPP', 'cocap.NEXP') => ('p', 'AA', 'AWPP', 'cocap.NEXP')
('p', 'A', 'AWPP', 'co.NEXP') => ('p', 'R', 'AWPP', 'co.NEXP')
('p', 'A', 'AWPP', 'co.NEXP') => ('p', 'AA', 'AWPP', 'co.NEXP')
('p', 'AA', 'AWPP', 'co.NEXP') => ('p', 'T', 'AWPP', 'co.NEXP')
('p', 'AA', 'AWPP', 'co.NEXP') => ('p', 'EA', 'AWPP', 'co.NEXP')
('p', 'AA', 'AWPP', 'cocap.NEXP') => ('p', 'T', 'AWPP', 'cocap.NEXP')
('p', 'AA', 'AWPP', 'cocap.NEXP') => ('p', 'EA', 'AWPP', 'cocap.NEXP')
('p', 'AA', 'co.AWPP', 'cocap.NEXP') => ('p', 'T', 'co.AWPP', 'cocap.NEXP')
('p', 'AA', 'co.AWPP', 'cocap.NEXP') => ('p', 'EA', 'co.AWPP', 'cocap.NEXP')
('p', 'AA', 'co.AWPP', 'NEXP') => ('p', 'T', 'co.AWPP', 'NEXP')
('p', 'AA', 'co.AWPP', 'NEXP') => ('p', 'EA', 'co.AWPP', 'NEXP')
('p', 'A', 'co.AWPP', 'co.NEXP_plo') => ('p', 'R', 'co.AWPP', 'co.NEXP_plo')
('p', 'A', 'co.AWPP', 'co.NEXP_plo') => ('p', 'AA', 'co.AWPP', 'co.NEXP_plo')
('p', 'A', 'AWPP', 'NEXP_plo') => ('p', 'R', 'AWPP', 'NEXP_plo')
('p', 'A', 'AWPP', 'NEXP_plo') => ('p', 'AA', 'AWPP', 'NEXP_plo')
('p', 'A', 'AWPP', 'AH') => ('p', 'R', 'AWPP', 'AH')
('p', 'A', 'AWPP', 'AH') => ('p', 'AA', 'AWPP', 'AH')
('p', 'A', 'co.AWPP', 'AH') => ('p', 'R', 'co.AWPP', 'AH')
('p', 'A', 'co.AWPP', 'AH') => ('p', 'AA', 'co.AWPP', 'AH')
('p', 'AA', 'co.AWPP', 'AH') => ('p', 'T', 'co.AWPP', 'AH')
('p', 'AA', 'co.AWPP', 'AH') => ('p', 'EA', 'co.AWPP', 'AH')
('p', 'AA', 'AWPP', 'AH') => ('p', 'T', 'AWPP', 'AH')
('p', 'AA', 'AWPP', 'AH') => ('p', 'EA', 'AWPP', 'AH')
('p', 'A', 'AWPP', 'AH_plo') => ('p', 'R', 'AWPP', 'AH_plo')
('p', 'A', 'AWPP', 'AH_plo') => ('p', 'AA', 'AWPP', 'AH_plo')
('p', 'A', 'co.AWPP', 'co.AH_plo') => ('p', 'R', 'co.AWPP', 'co.AH_plo')
('p', 'A', 'co.AWPP', 'co.AH_plo') => ('p', 'AA', 'co.AWPP', 'co.AH_plo')
('p', 'AA', 'co.AWPP', 'co.AH_plo') => ('p', 'T', 'co.AWPP', 'co.AH_plo')
('p', 'AA', 'co.AWPP', 'co.AH_plo') => ('p', 'EA', 'co.AWPP', 'co.AH_plo')
('p', 'AA', 'AWPP', 'AH_plo') => ('p', 'T', 'AWPP', 'AH_plo')
('p', 'AA', 'AWPP', 'AH_plo') => ('p', 'EA', 'AWPP', 'AH_plo')
('p', 'AA', 'AWPP', 'NEXP_plo') => ('p', 'T', 'AWPP', 'NEXP_plo')
('p', 'AA', 'AWPP', 'NEXP_plo') => ('p', 'EA', 'AWPP', 'NEXP_plo')
('p', 'AA', 'co.AWPP', 'co.NEXP_plo') => ('p', 'T', 'co.AWPP', 'co.NEXP_plo')
('p', 'AA', 'co.AWPP', 'co.NEXP_plo') => ('p', 'EA', 'co.AWPP', 'co.NEXP_plo')
('p', 'A', 'co.AWPP', 'cocap.AH_plo') => ('p', 'R', 'co.AWPP', 'cocap.AH_plo')
('p', 'A', 'co.AWPP', 'cocap.AH_plo') => ('p', 'AA', 'co.AWPP', 'cocap.AH_plo')
('p', 'A', 'AWPP', 'cocap.AH_plo') => ('p', 'R', 'AWPP', 'cocap.AH_plo')
('p', 'A', 'AWPP', 'cocap.AH_plo') => ('p', 'AA', 'AWPP', 'cocap.AH_plo')
('p', 'A', 'AWPP', 'co.AH_plo') => ('p', 'R', 'AWPP', 'co.AH_plo')
('p', 'A', 'AWPP', 'co.AH_plo') => ('p', 'AA', 'AWPP', 'co.AH_plo')
('p', 'A', 'co.AWPP', 'AH_plo') => ('p', 'R', 'co.AWPP', 'AH_plo')
('p', 'A', 'co.AWPP', 'AH_plo') => ('p', 'AA', 'co.AWPP', 'AH_plo')
('p', 'AA', 'co.AWPP', 'AH_plo') => ('p', 'T', 'co.AWPP', 'AH_plo')
('p', 'AA', 'co.AWPP', 'AH_plo') => ('p', 'EA', 'co.AWPP', 'AH_plo')
('p', 'AA', 'co.AWPP', 'cocap.AH_plo') => ('p', 'T', 'co.AWPP', 'cocap.AH_plo')
('p', 'AA', 'co.AWPP', 'cocap.AH_plo') => ('p', 'EA', 'co.AWPP', 'cocap.AH_plo')
('p', 'AA', 'AWPP', 'cocap.AH_plo') => ('p', 'T', 'AWPP', 'cocap.AH_plo')
('p', 'AA', 'AWPP', 'cocap.AH_plo') => ('p', 'EA', 'AWPP', 'cocap.AH_plo')
('p', 'AA', 'AWPP', 'co.AH_plo') => ('p', 'T', 'AWPP', 'co.AH_plo')
('p', 'AA', 'AWPP', 'co.AH_plo') => ('p', 'EA', 'AWPP', 'co.AH_plo')
('p', 'A', 'co.AWPP', 'NEXP_plo') => ('p', 'R', 'co.AWPP', 'NEXP_plo')
('p', 'A', 'co.AWPP', 'NEXP_plo') => ('p', 'AA', 'co.AWPP', 'NEXP_plo')
('p', 'A', 'AWPP', 'co.NEXP_plo') => ('p', 'R', 'AWPP', 'co.NEXP_plo')
('p', 'A', 'AWPP', 'co.NEXP_plo') => ('p', 'AA', 'AWPP', 'co.NEXP_plo')
('p', 'AA', 'AWPP', 'co.NEXP_plo') => ('p', 'T', 'AWPP', 'co.NEXP_plo')
('p', 'AA', 'AWPP', 'co.NEXP_plo') => ('p', 'EA', 'AWPP', 'co.NEXP_plo')
('p', 'AA', 'AWPP', 'cocap.NEXP_plo') => ('p', 'T', 'AWPP', 'cocap.NEXP_plo')
('p', 'AA', 'AWPP', 'cocap.NEXP_plo') => ('p', 'EA', 'AWPP', 'cocap.NEXP_plo')
('p', 'AA', 'co.AWPP', 'cocap.NEXP_plo') => ('p', 'T', 'co.AWPP', 'cocap.NEXP_plo')
('p', 'AA', 'co.AWPP', 'cocap.NEXP_plo') => ('p', 'EA', 'co.AWPP', 'cocap.NEXP_plo')
('p', 'AA', 'co.AWPP', 'NEXP_plo') => ('p', 'T', 'co.AWPP', 'NEXP_plo')
('p', 'AA', 'co.AWPP', 'NEXP_plo') => ('p', 'EA', 'co.AWPP', 'NEXP_plo')
('p', 'AA', 'AWPP', 'EXP_plo') => ('-d', 'AA', 'AWPP', 'EXP_plo')
('p', 'AA', 'AWPP', 'EXP_plo') => ('p', 'T', 'AWPP', 'EXP_plo')
('p', 'AA', 'AWPP', 'EXP_plo') => ('p', 'EA', 'AWPP', 'EXP_plo')
('p', 'AA', 'co.AWPP', 'EXP_plo') => ('-d', 'AA', 'co.AWPP', 'EXP_plo')
('p', 'AA', 'co.AWPP', 'EXP_plo') => ('p', 'T', 'co.AWPP', 'EXP_plo')
('p', 'AA', 'co.AWPP', 'EXP_plo') => ('p', 'EA', 'co.AWPP', 'EXP_plo')
('p', 'EA', 'co.AWPP', 'EXP_plo') => ('-d', 'EA', 'co.AWPP', 'EXP_plo')
('p', 'EA', 'AWPP', 'EXP_plo') => ('-d', 'EA', 'AWPP', 'EXP_plo')
('p', 'T', 'co.AWPP', 'EXP_plo') => ('-d', 'T', 'co.AWPP', 'EXP_plo')
('p', 'T', 'AWPP', 'EXP_plo') => ('-d', 'T', 'AWPP', 'EXP_plo')
('p', 'R', 'AWPP', 'EXP_plo') => ('-d', 'R', 'AWPP', 'EXP_plo')
('p', 'R', 'co.AWPP', 'EXP_plo') => ('-d', 'R', 'co.AWPP', 'EXP_plo')
('-d', 'A', 'PSPACE', 'ALL') => ('-d', 'R', 'PSPACE', 'ALL')
('-d', 'A', 'PSPACE', 'ALL') => ('-d', 'AA', 'PSPACE', 'ALL')
('-d', 'A', 'SZK', 'ALL') => ('-d', 'R', 'SZK', 'ALL')
('-d', 'A', 'SZK', 'ALL') => ('-d', 'AA', 'SZK', 'ALL')
('-d', 'A', 'cocap.NISZK', 'ALL') => ('-d', 'R', 'cocap.NISZK', 'ALL')
('-d', 'A', 'cocap.NISZK', 'ALL') => ('-d', 'AA', 'cocap.NISZK', 'ALL')
('-d', 'AA', 'cocap.NISZK', 'ALL') => ('-d', 'T', 'cocap.NISZK', 'ALL')
('-d', 'AA', 'cocap.NISZK', 'ALL') => ('-d', 'EA', 'cocap.NISZK', 'ALL')
('-d', 'A', 'co.NISZK', 'ALL') => ('-d', 'R', 'co.NISZK', 'ALL')
('-d', 'A', 'co.NISZK', 'ALL') => ('-d', 'AA', 'co.NISZK', 'ALL')
('-d', 'A', 'NISZK', 'ALL') => ('-d', 'R', 'NISZK', 'ALL')
('-d', 'A', 'NISZK', 'ALL') => ('-d', 'AA', 'NISZK', 'ALL')
('-d', 'AA', 'NISZK', 'ALL') => ('-d', 'T', 'NISZK', 'ALL')
('-d', 'AA', 'NISZK', 'ALL') => ('-d', 'EA', 'NISZK', 'ALL')
('-d', 'AA', 'co.NISZK', 'ALL') => ('-d', 'T', 'co.NISZK', 'ALL')
('-d', 'AA', 'co.NISZK', 'ALL') => ('-d', 'EA', 'co.NISZK', 'ALL')
('-d', 'AA', 'SZK', 'ALL') => ('-d', 'T', 'SZK', 'ALL')
('-d', 'AA', 'SZK', 'ALL') => ('-d', 'EA', 'SZK', 'ALL')
('-d', 'A', 'QRG(2)', 'ALL') => ('-d', 'R', 'QRG(2)', 'ALL')
('-d', 'A', 'QRG(2)', 'ALL') => ('-d', 'AA', 'QRG(2)', 'ALL')
('-d', 'AA', 'QRG(2)', 'ALL') => ('-d', 'T', 'QRG(2)', 'ALL')
('-d', 'AA', 'QRG(2)', 'ALL') => ('-d', 'EA', 'QRG(2)', 'ALL')
('-d', 'A', 'PP', 'ALL') => ('-d', 'R', 'PP', 'ALL')
('-d', 'A', 'PP', 'ALL') => ('-d', 'AA', 'PP', 'ALL')
('-d', 'AA', 'PP', 'ALL') => ('-d', 'T', 'PP', 'ALL')
('-d', 'AA', 'PP', 'ALL') => ('-d', 'EA', 'PP', 'ALL')
('-d', 'A', 'QSZK', 'ALL') => ('-d', 'R', 'QSZK', 'ALL')
('-d', 'A', 'QSZK', 'ALL') => ('-d', 'AA', 'QSZK', 'ALL')
('-d', 'AA', 'QSZK', 'ALL') => ('-d', 'T', 'QSZK', 'ALL')
('-d', 'AA', 'QSZK', 'ALL') => ('-d', 'EA', 'QSZK', 'ALL')
('-d', 'AA', 'PSPACE', 'ALL') => ('-d', 'T', 'PSPACE', 'ALL')
('-d', 'AA', 'PSPACE', 'ALL') => ('-d', 'EA', 'PSPACE', 'ALL')
('p', 'A', 'PSPACE', 'ALL') => ('p', 'R', 'PSPACE', 'ALL')
('p', 'A', 'PSPACE', 'ALL') => ('p', 'AA', 'PSPACE', 'ALL')
('p', 'A', 'SZK', 'ALL') => ('p', 'R', 'SZK', 'ALL')
('p', 'A', 'SZK', 'ALL') => ('p', 'AA', 'SZK', 'ALL')
('p', 'A', 'cocap.NISZK', 'ALL') => ('p', 'R', 'cocap.NISZK', 'ALL')
('p', 'A', 'cocap.NISZK', 'ALL') => ('p', 'AA', 'cocap.NISZK', 'ALL')
('p', 'AA', 'cocap.NISZK', 'ALL') => ('p', 'T', 'cocap.NISZK', 'ALL')
('p', 'AA', 'cocap.NISZK', 'ALL') => ('p', 'EA', 'cocap.NISZK', 'ALL')
('p', 'A', 'co.NISZK', 'ALL') => ('p', 'R', 'co.NISZK', 'ALL')
('p', 'A', 'co.NISZK', 'ALL') => ('p', 'AA', 'co.NISZK', 'ALL')
('p', 'A', 'NISZK', 'ALL') => ('p', 'R', 'NISZK', 'ALL')
('p', 'A', 'NISZK', 'ALL') => ('p', 'AA', 'NISZK', 'ALL')
('p', 'AA', 'NISZK', 'ALL') => ('p', 'T', 'NISZK', 'ALL')
('p', 'AA', 'NISZK', 'ALL') => ('p', 'EA', 'NISZK', 'ALL')
('p', 'AA', 'co.NISZK', 'ALL') => ('p', 'T', 'co.NISZK', 'ALL')
('p', 'AA', 'co.NISZK', 'ALL') => ('p', 'EA', 'co.NISZK', 'ALL')
('p', 'AA', 'SZK', 'ALL') => ('p', 'T', 'SZK', 'ALL')
('p', 'AA', 'SZK', 'ALL') => ('p', 'EA', 'SZK', 'ALL')
('p', 'A', 'QRG(2)', 'ALL') => ('p', 'R', 'QRG(2)', 'ALL')
('p', 'A', 'QRG(2)', 'ALL') => ('p', 'AA', 'QRG(2)', 'ALL')
('p', 'AA', 'QRG(2)', 'ALL') => ('p', 'T', 'QRG(2)', 'ALL')
('p', 'AA', 'QRG(2)', 'ALL') => ('p', 'EA', 'QRG(2)', 'ALL')
('p', 'A', 'PP', 'ALL') => ('p', 'R', 'PP', 'ALL')
('p', 'A', 'PP', 'ALL') => ('p', 'AA', 'PP', 'ALL')
('p', 'AA', 'PP', 'ALL') => ('p', 'T', 'PP', 'ALL')
('p', 'AA', 'PP', 'ALL') => ('p', 'EA', 'PP', 'ALL')
('p', 'A', 'QSZK', 'ALL') => ('p', 'R', 'QSZK', 'ALL')
('p', 'A', 'QSZK', 'ALL') => ('p', 'AA', 'QSZK', 'ALL')
('p', 'AA', 'QSZK', 'ALL') => ('p', 'T', 'QSZK', 'ALL')
('p', 'AA', 'QSZK', 'ALL') => ('p', 'EA', 'QSZK', 'ALL')
('p', 'AA', 'PSPACE', 'ALL') => ('p', 'T', 'PSPACE', 'ALL')
('p', 'AA', 'PSPACE', 'ALL') => ('p', 'EA', 'PSPACE', 'ALL')
('-d', 'A', 'PSPACE', 'cocap.NEXP_plo') => ('-d', 'R', 'PSPACE', 'cocap.NEXP_plo')
('-d', 'A', 'PSPACE', 'cocap.NEXP_plo') => ('-d', 'AA', 'PSPACE', 'cocap.NEXP_plo')
('-d', 'A', 'SZK', 'cocap.NEXP_plo') => ('-d', 'R', 'SZK', 'cocap.NEXP_plo')
('-d', 'A', 'SZK', 'cocap.NEXP_plo') => ('-d', 'AA', 'SZK', 'cocap.NEXP_plo')
('-d', 'A', 'SZK', 'co.NEXP') => ('-d', 'R', 'SZK', 'co.NEXP')
('-d', 'A', 'SZK', 'co.NEXP') => ('-d', 'AA', 'SZK', 'co.NEXP')
('-d', 'A', 'SZK', 'NEXP') => ('-d', 'R', 'SZK', 'NEXP')
('-d', 'A', 'SZK', 'NEXP') => ('-d', 'AA', 'SZK', 'NEXP')
('-d', 'A', 'SZK', 'cocap.NEXP') => ('-d', 'R', 'SZK', 'cocap.NEXP')
('-d', 'A', 'SZK', 'cocap.NEXP') => ('-d', 'AA', 'SZK', 'cocap.NEXP')
('-d', 'A', 'cocap.NISZK', 'cocap.NEXP') => ('-d', 'R', 'cocap.NISZK', 'cocap.NEXP')
('-d', 'A', 'cocap.NISZK', 'cocap.NEXP') => ('-d', 'AA', 'cocap.NISZK', 'cocap.NEXP')
('-d', 'A', 'cocap.NISZK', 'co.NEXP') => ('-d', 'R', 'cocap.NISZK', 'co.NEXP')
('-d', 'A', 'cocap.NISZK', 'co.NEXP') => ('-d', 'AA', 'cocap.NISZK', 'co.NEXP')
('-d', 'A', 'cocap.NISZK', 'NEXP') => ('-d', 'R', 'cocap.NISZK', 'NEXP')
('-d', 'A', 'cocap.NISZK', 'NEXP') => ('-d', 'AA', 'cocap.NISZK', 'NEXP')
('-d', 'A', 'cocap.NISZK', 'R') => ('-d', 'R', 'cocap.NISZK', 'R')
('-d', 'A', 'cocap.NISZK', 'R') => ('-d', 'AA', 'cocap.NISZK', 'R')
('-d', 'A', 'cocap.NISZK', 'RE') => ('-d', 'R', 'cocap.NISZK', 'RE')
('-d', 'A', 'cocap.NISZK', 'RE') => ('-d', 'AA', 'cocap.NISZK', 'RE')
('-d', 'A', 'cocap.NISZK', 'co.RE') => ('-d', 'R', 'cocap.NISZK', 'co.RE')
('-d', 'A', 'cocap.NISZK', 'co.RE') => ('-d', 'AA', 'cocap.NISZK', 'co.RE')
('-d', 'AA', 'cocap.NISZK', 'co.RE') => ('-d', 'T', 'cocap.NISZK', 'co.RE')
('-d', 'AA', 'cocap.NISZK', 'co.RE') => ('-d', 'EA', 'cocap.NISZK', 'co.RE')
('-d', 'AA', 'cocap.NISZK', 'RE') => ('-d', 'T', 'cocap.NISZK', 'RE')
('-d', 'AA', 'cocap.NISZK', 'RE') => ('-d', 'EA', 'cocap.NISZK', 'RE')
('-d', 'AA', 'cocap.NISZK', 'R') => ('-d', 'T', 'cocap.NISZK', 'R')
('-d', 'AA', 'cocap.NISZK', 'R') => ('-d', 'EA', 'cocap.NISZK', 'R')
('-d', 'A', 'cocap.NISZK', 'NEXP/poly') => ('-d', 'R', 'cocap.NISZK', 'NEXP/poly')
('-d', 'A', 'cocap.NISZK', 'NEXP/poly') => ('-d', 'AA', 'cocap.NISZK', 'NEXP/poly')
('-d', 'AA', 'cocap.NISZK', 'NEXP/poly') => ('-d', 'T', 'cocap.NISZK', 'NEXP/poly')
('-d', 'AA', 'cocap.NISZK', 'NEXP/poly') => ('-d', 'EA', 'cocap.NISZK', 'NEXP/poly')
('-d', 'AA', 'cocap.NISZK', 'NEXP') => ('-d', 'T', 'cocap.NISZK', 'NEXP')
('-d', 'AA', 'cocap.NISZK', 'NEXP') => ('-d', 'EA', 'cocap.NISZK', 'NEXP')
('-d', 'AA', 'cocap.NISZK', 'co.NEXP') => ('-d', 'T', 'cocap.NISZK', 'co.NEXP')
('-d', 'AA', 'cocap.NISZK', 'co.NEXP') => ('-d', 'EA', 'cocap.NISZK', 'co.NEXP')
('-d', 'AA', 'cocap.NISZK', 'cocap.NEXP') => ('-d', 'T', 'cocap.NISZK', 'cocap.NEXP')
('-d', 'AA', 'cocap.NISZK', 'cocap.NEXP') => ('-d', 'EA', 'cocap.NISZK', 'cocap.NEXP')
('-d', 'A', 'SZK', 'R') => ('-d', 'R', 'SZK', 'R')
('-d', 'A', 'SZK', 'R') => ('-d', 'AA', 'SZK', 'R')
('-d', 'A', 'co.NISZK', 'R') => ('-d', 'R', 'co.NISZK', 'R')
('-d', 'A', 'co.NISZK', 'R') => ('-d', 'AA', 'co.NISZK', 'R')
('-d', 'A', 'NISZK', 'R') => ('-d', 'R', 'NISZK', 'R')
('-d', 'A', 'NISZK', 'R') => ('-d', 'AA', 'NISZK', 'R')
('-d', 'A', 'NISZK', 'RE') => ('-d', 'R', 'NISZK', 'RE')
('-d', 'A', 'NISZK', 'RE') => ('-d', 'AA', 'NISZK', 'RE')
('-d', 'A', 'co.NISZK', 'co.RE') => ('-d', 'R', 'co.NISZK', 'co.RE')
('-d', 'A', 'co.NISZK', 'co.RE') => ('-d', 'AA', 'co.NISZK', 'co.RE')
('-d', 'AA', 'co.NISZK', 'co.RE') => ('-d', 'T', 'co.NISZK', 'co.RE')
('-d', 'AA', 'co.NISZK', 'co.RE') => ('-d', 'EA', 'co.NISZK', 'co.RE')
('-d', 'AA', 'NISZK', 'RE') => ('-d', 'T', 'NISZK', 'RE')
('-d', 'AA', 'NISZK', 'RE') => ('-d', 'EA', 'NISZK', 'RE')
('-d', 'A', 'NISZK', 'co.RE') => ('-d', 'R', 'NISZK', 'co.RE')
('-d', 'A', 'NISZK', 'co.RE') => ('-d', 'AA', 'NISZK', 'co.RE')
('-d', 'A', 'co.NISZK', 'RE') => ('-d', 'R', 'co.NISZK', 'RE')
('-d', 'A', 'co.NISZK', 'RE') => ('-d', 'AA', 'co.NISZK', 'RE')
('-d', 'AA', 'co.NISZK', 'RE') => ('-d', 'T', 'co.NISZK', 'RE')
('-d', 'AA', 'co.NISZK', 'RE') => ('-d', 'EA', 'co.NISZK', 'RE')
('-d', 'AA', 'NISZK', 'co.RE') => ('-d', 'T', 'NISZK', 'co.RE')
('-d', 'AA', 'NISZK', 'co.RE') => ('-d', 'EA', 'NISZK', 'co.RE')
('-d', 'AA', 'NISZK', 'R') => ('-d', 'T', 'NISZK', 'R')
('-d', 'AA', 'NISZK', 'R') => ('-d', 'EA', 'NISZK', 'R')
('-d', 'AA', 'co.NISZK', 'R') => ('-d', 'T', 'co.NISZK', 'R')
('-d', 'AA', 'co.NISZK', 'R') => ('-d', 'EA', 'co.NISZK', 'R')
('-d', 'A', 'SZK', 'RE') => ('-d', 'R', 'SZK', 'RE')
('-d', 'A', 'SZK', 'RE') => ('-d', 'AA', 'SZK', 'RE')
('-d', 'A', 'SZK', 'co.RE') => ('-d', 'R', 'SZK', 'co.RE')
('-d', 'A', 'SZK', 'co.RE') => ('-d', 'AA', 'SZK', 'co.RE')
('-d', 'AA', 'SZK', 'co.RE') => ('-d', 'T', 'SZK', 'co.RE')
('-d', 'AA', 'SZK', 'co.RE') => ('-d', 'EA', 'SZK', 'co.RE')
('-d', 'AA', 'SZK', 'RE') => ('-d', 'T', 'SZK', 'RE')
('-d', 'AA', 'SZK', 'RE') => ('-d', 'EA', 'SZK', 'RE')
('-d', 'AA', 'SZK', 'R') => ('-d', 'T', 'SZK', 'R')
('-d', 'AA', 'SZK', 'R') => ('-d', 'EA', 'SZK', 'R')
('-d', 'A', 'co.NISZK', 'cocap.NEXP') => ('-d', 'R', 'co.NISZK', 'cocap.NEXP')
('-d', 'A', 'co.NISZK', 'cocap.NEXP') => ('-d', 'AA', 'co.NISZK', 'cocap.NEXP')
('-d', 'A', 'NISZK', 'cocap.NEXP') => ('-d', 'R', 'NISZK', 'cocap.NEXP')
('-d', 'A', 'NISZK', 'cocap.NEXP') => ('-d', 'AA', 'NISZK', 'cocap.NEXP')
('-d', 'A', 'NISZK', 'co.NEXP') => ('-d', 'R', 'NISZK', 'co.NEXP')
('-d', 'A', 'NISZK', 'co.NEXP') => ('-d', 'AA', 'NISZK', 'co.NEXP')
('-d', 'A', 'co.NISZK', 'NEXP') => ('-d', 'R', 'co.NISZK', 'NEXP')
('-d', 'A', 'co.NISZK', 'NEXP') => ('-d', 'AA', 'co.NISZK', 'NEXP')
('-d', 'A', 'co.NISZK', 'NEXP/poly') => ('-d', 'R', 'co.NISZK', 'NEXP/poly')
('-d', 'A', 'co.NISZK', 'NEXP/poly') => ('-d', 'AA', 'co.NISZK', 'NEXP/poly')
('-d', 'A', 'NISZK', 'NEXP/poly') => ('-d', 'R', 'NISZK', 'NEXP/poly')
('-d', 'A', 'NISZK', 'NEXP/poly') => ('-d', 'AA', 'NISZK', 'NEXP/poly')
('-d', 'AA', 'NISZK', 'NEXP/poly') => ('-d', 'T', 'NISZK', 'NEXP/poly')
('-d', 'AA', 'NISZK', 'NEXP/poly') => ('-d', 'EA', 'NISZK', 'NEXP/poly')
('-d', 'AA', 'co.NISZK', 'NEXP/poly') => ('-d', 'T', 'co.NISZK', 'NEXP/poly')
('-d', 'AA', 'co.NISZK', 'NEXP/poly') => ('-d', 'EA', 'co.NISZK', 'NEXP/poly')
('-d', 'AA', 'co.NISZK', 'NEXP') => ('-d', 'T', 'co.NISZK', 'NEXP')
('-d', 'AA', 'co.NISZK', 'NEXP') => ('-d', 'EA', 'co.NISZK', 'NEXP')
('-d', 'AA', 'NISZK', 'co.NEXP') => ('-d', 'T', 'NISZK', 'co.NEXP')
('-d', 'AA', 'NISZK', 'co.NEXP') => ('-d', 'EA', 'NISZK', 'co.NEXP')
('-d', 'A', 'NISZK', 'NEXP') => ('-d', 'R', 'NISZK', 'NEXP')
('-d', 'A', 'NISZK', 'NEXP') => ('-d', 'AA', 'NISZK', 'NEXP')
('-d', 'A', 'co.NISZK', 'co.NEXP') => ('-d', 'R', 'co.NISZK', 'co.NEXP')
('-d', 'A', 'co.NISZK', 'co.NEXP') => ('-d', 'AA', 'co.NISZK', 'co.NEXP')
('-d', 'AA', 'co.NISZK', 'co.NEXP') => ('-d', 'T', 'co.NISZK', 'co.NEXP')
('-d', 'AA', 'co.NISZK', 'co.NEXP') => ('-d', 'EA', 'co.NISZK', 'co.NEXP')
('-d', 'AA', 'NISZK', 'NEXP') => ('-d', 'T', 'NISZK', 'NEXP')
('-d', 'AA', 'NISZK', 'NEXP') => ('-d', 'EA', 'NISZK', 'NEXP')
('-d', 'AA', 'NISZK', 'cocap.NEXP') => ('-d', 'T', 'NISZK', 'cocap.NEXP')
('-d', 'AA', 'NISZK', 'cocap.NEXP') => ('-d', 'EA', 'NISZK', 'cocap.NEXP')
('-d', 'AA', 'co.NISZK', 'cocap.NEXP') => ('-d', 'T', 'co.NISZK', 'cocap.NEXP')
('-d', 'AA', 'co.NISZK', 'cocap.NEXP') => ('-d', 'EA', 'co.NISZK', 'cocap.NEXP')
('-d', 'A', 'SZK', 'NEXP/poly') => ('-d', 'R', 'SZK', 'NEXP/poly')
('-d', 'A', 'SZK', 'NEXP/poly') => ('-d', 'AA', 'SZK', 'NEXP/poly')
('-d', 'AA', 'SZK', 'NEXP/poly') => ('-d', 'T', 'SZK', 'NEXP/poly')
('-d', 'AA', 'SZK', 'NEXP/poly') => ('-d', 'EA', 'SZK', 'NEXP/poly')
('-d', 'AA', 'SZK', 'cocap.NEXP') => ('-d', 'T', 'SZK', 'cocap.NEXP')
('-d', 'AA', 'SZK', 'cocap.NEXP') => ('-d', 'EA', 'SZK', 'cocap.NEXP')
('-d', 'AA', 'SZK', 'co.NEXP') => ('-d', 'T', 'SZK', 'co.NEXP')
('-d', 'AA', 'SZK', 'co.NEXP') => ('-d', 'EA', 'SZK', 'co.NEXP')
('-d', 'AA', 'SZK', 'NEXP') => ('-d', 'T', 'SZK', 'NEXP')
('-d', 'AA', 'SZK', 'NEXP') => ('-d', 'EA', 'SZK', 'NEXP')
('-d', 'A', 'cocap.NISZK', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.NISZK', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.NISZK', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.NISZK', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.NISZK', 'co.NEXP_plo') => ('-d', 'R', 'cocap.NISZK', 'co.NEXP_plo')
('-d', 'A', 'cocap.NISZK', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.NISZK', 'co.NEXP_plo')
('-d', 'A', 'cocap.NISZK', 'NEXP_plo') => ('-d', 'R', 'cocap.NISZK', 'NEXP_plo')
('-d', 'A', 'cocap.NISZK', 'NEXP_plo') => ('-d', 'AA', 'cocap.NISZK', 'NEXP_plo')
('-d', 'A', 'cocap.NISZK', 'AH') => ('-d', 'R', 'cocap.NISZK', 'AH')
('-d', 'A', 'cocap.NISZK', 'AH') => ('-d', 'AA', 'cocap.NISZK', 'AH')
('-d', 'AA', 'cocap.NISZK', 'AH') => ('-d', 'T', 'cocap.NISZK', 'AH')
('-d', 'AA', 'cocap.NISZK', 'AH') => ('-d', 'EA', 'cocap.NISZK', 'AH')
('-d', 'A', 'cocap.NISZK', 'AH_plo') => ('-d', 'R', 'cocap.NISZK', 'AH_plo')
('-d', 'A', 'cocap.NISZK', 'AH_plo') => ('-d', 'AA', 'cocap.NISZK', 'AH_plo')
('-d', 'A', 'cocap.NISZK', 'co.AH_plo') => ('-d', 'R', 'cocap.NISZK', 'co.AH_plo')
('-d', 'A', 'cocap.NISZK', 'co.AH_plo') => ('-d', 'AA', 'cocap.NISZK', 'co.AH_plo')
('-d', 'A', 'cocap.NISZK', 'cocap.AH_plo') => ('-d', 'R', 'cocap.NISZK', 'cocap.AH_plo')
('-d', 'A', 'cocap.NISZK', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.NISZK', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NISZK', 'cocap.AH_plo') => ('-d', 'T', 'cocap.NISZK', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NISZK', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.NISZK', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NISZK', 'co.AH_plo') => ('-d', 'T', 'cocap.NISZK', 'co.AH_plo')
('-d', 'AA', 'cocap.NISZK', 'co.AH_plo') => ('-d', 'EA', 'cocap.NISZK', 'co.AH_plo')
('-d', 'AA', 'cocap.NISZK', 'AH_plo') => ('-d', 'T', 'cocap.NISZK', 'AH_plo')
('-d', 'AA', 'cocap.NISZK', 'AH_plo') => ('-d', 'EA', 'cocap.NISZK', 'AH_plo')
('-d', 'AA', 'cocap.NISZK', 'NEXP_plo') => ('-d', 'T', 'cocap.NISZK', 'NEXP_plo')
('-d', 'AA', 'cocap.NISZK', 'NEXP_plo') => ('-d', 'EA', 'cocap.NISZK', 'NEXP_plo')
('-d', 'AA', 'cocap.NISZK', 'co.NEXP_plo') => ('-d', 'T', 'cocap.NISZK', 'co.NEXP_plo')
('-d', 'AA', 'cocap.NISZK', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.NISZK', 'co.NEXP_plo')
('-d', 'AA', 'cocap.NISZK', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.NISZK', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.NISZK', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.NISZK', 'cocap.NEXP_plo')
('-d', 'A', 'SZK', 'co.NEXP_plo') => ('-d', 'R', 'SZK', 'co.NEXP_plo')
('-d', 'A', 'SZK', 'co.NEXP_plo') => ('-d', 'AA', 'SZK', 'co.NEXP_plo')
('-d', 'A', 'SZK', 'NEXP_plo') => ('-d', 'R', 'SZK', 'NEXP_plo')
('-d', 'A', 'SZK', 'NEXP_plo') => ('-d', 'AA', 'SZK', 'NEXP_plo')
('-d', 'A', 'SZK', 'AH') => ('-d', 'R', 'SZK', 'AH')
('-d', 'A', 'SZK', 'AH') => ('-d', 'AA', 'SZK', 'AH')
('-d', 'A', 'co.NISZK', 'AH') => ('-d', 'R', 'co.NISZK', 'AH')
('-d', 'A', 'co.NISZK', 'AH') => ('-d', 'AA', 'co.NISZK', 'AH')
('-d', 'A', 'NISZK', 'AH') => ('-d', 'R', 'NISZK', 'AH')
('-d', 'A', 'NISZK', 'AH') => ('-d', 'AA', 'NISZK', 'AH')
('-d', 'AA', 'NISZK', 'AH') => ('-d', 'T', 'NISZK', 'AH')
('-d', 'AA', 'NISZK', 'AH') => ('-d', 'EA', 'NISZK', 'AH')
('-d', 'AA', 'co.NISZK', 'AH') => ('-d', 'T', 'co.NISZK', 'AH')
('-d', 'AA', 'co.NISZK', 'AH') => ('-d', 'EA', 'co.NISZK', 'AH')
('-d', 'AA', 'SZK', 'AH') => ('-d', 'T', 'SZK', 'AH')
('-d', 'AA', 'SZK', 'AH') => ('-d', 'EA', 'SZK', 'AH')
('-d', 'A', 'co.NISZK', 'NEXP_plo') => ('-d', 'R', 'co.NISZK', 'NEXP_plo')
('-d', 'A', 'co.NISZK', 'NEXP_plo') => ('-d', 'AA', 'co.NISZK', 'NEXP_plo')
('-d', 'A', 'NISZK', 'co.NEXP_plo') => ('-d', 'R', 'NISZK', 'co.NEXP_plo')
('-d', 'A', 'NISZK', 'co.NEXP_plo') => ('-d', 'AA', 'NISZK', 'co.NEXP_plo')
('-d', 'A', 'NISZK', 'co.AH_plo') => ('-d', 'R', 'NISZK', 'co.AH_plo')
('-d', 'A', 'NISZK', 'co.AH_plo') => ('-d', 'AA', 'NISZK', 'co.AH_plo')
('-d', 'A', 'co.NISZK', 'AH_plo') => ('-d', 'R', 'co.NISZK', 'AH_plo')
('-d', 'A', 'co.NISZK', 'AH_plo') => ('-d', 'AA', 'co.NISZK', 'AH_plo')
('-d', 'AA', 'co.NISZK', 'AH_plo') => ('-d', 'T', 'co.NISZK', 'AH_plo')
('-d', 'AA', 'co.NISZK', 'AH_plo') => ('-d', 'EA', 'co.NISZK', 'AH_plo')
('-d', 'AA', 'NISZK', 'co.AH_plo') => ('-d', 'T', 'NISZK', 'co.AH_plo')
('-d', 'AA', 'NISZK', 'co.AH_plo') => ('-d', 'EA', 'NISZK', 'co.AH_plo')
('-d', 'AA', 'NISZK', 'co.NEXP_plo') => ('-d', 'T', 'NISZK', 'co.NEXP_plo')
('-d', 'AA', 'NISZK', 'co.NEXP_plo') => ('-d', 'EA', 'NISZK', 'co.NEXP_plo')
('-d', 'AA', 'co.NISZK', 'NEXP_plo') => ('-d', 'T', 'co.NISZK', 'NEXP_plo')
('-d', 'AA', 'co.NISZK', 'NEXP_plo') => ('-d', 'EA', 'co.NISZK', 'NEXP_plo')
('-d', 'A', 'NISZK', 'NEXP_plo') => ('-d', 'R', 'NISZK', 'NEXP_plo')
('-d', 'A', 'NISZK', 'NEXP_plo') => ('-d', 'AA', 'NISZK', 'NEXP_plo')
('-d', 'A', 'co.NISZK', 'co.NEXP_plo') => ('-d', 'R', 'co.NISZK', 'co.NEXP_plo')
('-d', 'A', 'co.NISZK', 'co.NEXP_plo') => ('-d', 'AA', 'co.NISZK', 'co.NEXP_plo')
('-d', 'A', 'co.NISZK', 'co.AH_plo') => ('-d', 'R', 'co.NISZK', 'co.AH_plo')
('-d', 'A', 'co.NISZK', 'co.AH_plo') => ('-d', 'AA', 'co.NISZK', 'co.AH_plo')
('-d', 'A', 'NISZK', 'AH_plo') => ('-d', 'R', 'NISZK', 'AH_plo')
('-d', 'A', 'NISZK', 'AH_plo') => ('-d', 'AA', 'NISZK', 'AH_plo')
('-d', 'AA', 'NISZK', 'AH_plo') => ('-d', 'T', 'NISZK', 'AH_plo')
('-d', 'AA', 'NISZK', 'AH_plo') => ('-d', 'EA', 'NISZK', 'AH_plo')
('-d', 'AA', 'co.NISZK', 'co.AH_plo') => ('-d', 'T', 'co.NISZK', 'co.AH_plo')
('-d', 'AA', 'co.NISZK', 'co.AH_plo') => ('-d', 'EA', 'co.NISZK', 'co.AH_plo')
('-d', 'AA', 'co.NISZK', 'co.NEXP_plo') => ('-d', 'T', 'co.NISZK', 'co.NEXP_plo')
('-d', 'AA', 'co.NISZK', 'co.NEXP_plo') => ('-d', 'EA', 'co.NISZK', 'co.NEXP_plo')
('-d', 'AA', 'NISZK', 'NEXP_plo') => ('-d', 'T', 'NISZK', 'NEXP_plo')
('-d', 'AA', 'NISZK', 'NEXP_plo') => ('-d', 'EA', 'NISZK', 'NEXP_plo')
('-d', 'A', 'SZK', 'AH_plo') => ('-d', 'R', 'SZK', 'AH_plo')
('-d', 'A', 'SZK', 'AH_plo') => ('-d', 'AA', 'SZK', 'AH_plo')
('-d', 'A', 'SZK', 'co.AH_plo') => ('-d', 'R', 'SZK', 'co.AH_plo')
('-d', 'A', 'SZK', 'co.AH_plo') => ('-d', 'AA', 'SZK', 'co.AH_plo')
('-d', 'A', 'SZK', 'cocap.AH_plo') => ('-d', 'R', 'SZK', 'cocap.AH_plo')
('-d', 'A', 'SZK', 'cocap.AH_plo') => ('-d', 'AA', 'SZK', 'cocap.AH_plo')
('-d', 'A', 'co.NISZK', 'cocap.AH_plo') => ('-d', 'R', 'co.NISZK', 'cocap.AH_plo')
('-d', 'A', 'co.NISZK', 'cocap.AH_plo') => ('-d', 'AA', 'co.NISZK', 'cocap.AH_plo')
('-d', 'A', 'NISZK', 'cocap.AH_plo') => ('-d', 'R', 'NISZK', 'cocap.AH_plo')
('-d', 'A', 'NISZK', 'cocap.AH_plo') => ('-d', 'AA', 'NISZK', 'cocap.AH_plo')
('-d', 'AA', 'NISZK', 'cocap.AH_plo') => ('-d', 'T', 'NISZK', 'cocap.AH_plo')
('-d', 'AA', 'NISZK', 'cocap.AH_plo') => ('-d', 'EA', 'NISZK', 'cocap.AH_plo')
('-d', 'AA', 'co.NISZK', 'cocap.AH_plo') => ('-d', 'T', 'co.NISZK', 'cocap.AH_plo')
('-d', 'AA', 'co.NISZK', 'cocap.AH_plo') => ('-d', 'EA', 'co.NISZK', 'cocap.AH_plo')
('-d', 'AA', 'SZK', 'cocap.AH_plo') => ('-d', 'T', 'SZK', 'cocap.AH_plo')
('-d', 'AA', 'SZK', 'cocap.AH_plo') => ('-d', 'EA', 'SZK', 'cocap.AH_plo')
('-d', 'AA', 'SZK', 'co.AH_plo') => ('-d', 'T', 'SZK', 'co.AH_plo')
('-d', 'AA', 'SZK', 'co.AH_plo') => ('-d', 'EA', 'SZK', 'co.AH_plo')
('-d', 'AA', 'SZK', 'AH_plo') => ('-d', 'T', 'SZK', 'AH_plo')
('-d', 'AA', 'SZK', 'AH_plo') => ('-d', 'EA', 'SZK', 'AH_plo')
('-d', 'AA', 'SZK', 'NEXP_plo') => ('-d', 'T', 'SZK', 'NEXP_plo')
('-d', 'AA', 'SZK', 'NEXP_plo') => ('-d', 'EA', 'SZK', 'NEXP_plo')
('-d', 'AA', 'SZK', 'co.NEXP_plo') => ('-d', 'T', 'SZK', 'co.NEXP_plo')
('-d', 'AA', 'SZK', 'co.NEXP_plo') => ('-d', 'EA', 'SZK', 'co.NEXP_plo')
('-d', 'AA', 'SZK', 'cocap.NEXP_plo') => ('-d', 'T', 'SZK', 'cocap.NEXP_plo')
('-d', 'AA', 'SZK', 'cocap.NEXP_plo') => ('-d', 'EA', 'SZK', 'cocap.NEXP_plo')
('-d', 'AA', 'co.NISZK', 'cocap.NEXP_plo') => ('-d', 'T', 'co.NISZK', 'cocap.NEXP_plo')
('-d', 'AA', 'NISZK', 'cocap.NEXP_plo') => ('-d', 'T', 'NISZK', 'cocap.NEXP_plo')
('-d', 'A', 'QRG(2)', 'cocap.NEXP_plo') => ('-d', 'R', 'QRG(2)', 'cocap.NEXP_plo')
('-d', 'A', 'QRG(2)', 'cocap.NEXP_plo') => ('-d', 'AA', 'QRG(2)', 'cocap.NEXP_plo')
('-d', 'A', 'QRG(2)', 'co.NEXP') => ('-d', 'R', 'QRG(2)', 'co.NEXP')
('-d', 'A', 'QRG(2)', 'co.NEXP') => ('-d', 'AA', 'QRG(2)', 'co.NEXP')
('-d', 'A', 'QRG(2)', 'NEXP') => ('-d', 'R', 'QRG(2)', 'NEXP')
('-d', 'A', 'QRG(2)', 'NEXP') => ('-d', 'AA', 'QRG(2)', 'NEXP')
('-d', 'A', 'QRG(2)', 'cocap.NEXP') => ('-d', 'R', 'QRG(2)', 'cocap.NEXP')
('-d', 'A', 'QRG(2)', 'cocap.NEXP') => ('-d', 'AA', 'QRG(2)', 'cocap.NEXP')
('-d', 'A', 'QRG(2)', 'R') => ('-d', 'R', 'QRG(2)', 'R')
('-d', 'A', 'QRG(2)', 'R') => ('-d', 'AA', 'QRG(2)', 'R')
('-d', 'A', 'QRG(2)', 'RE') => ('-d', 'R', 'QRG(2)', 'RE')
('-d', 'A', 'QRG(2)', 'RE') => ('-d', 'AA', 'QRG(2)', 'RE')
('-d', 'A', 'QRG(2)', 'co.RE') => ('-d', 'R', 'QRG(2)', 'co.RE')
('-d', 'A', 'QRG(2)', 'co.RE') => ('-d', 'AA', 'QRG(2)', 'co.RE')
('-d', 'AA', 'QRG(2)', 'co.RE') => ('-d', 'T', 'QRG(2)', 'co.RE')
('-d', 'AA', 'QRG(2)', 'co.RE') => ('-d', 'EA', 'QRG(2)', 'co.RE')
('-d', 'AA', 'QRG(2)', 'RE') => ('-d', 'T', 'QRG(2)', 'RE')
('-d', 'AA', 'QRG(2)', 'RE') => ('-d', 'EA', 'QRG(2)', 'RE')
('-d', 'AA', 'QRG(2)', 'R') => ('-d', 'T', 'QRG(2)', 'R')
('-d', 'AA', 'QRG(2)', 'R') => ('-d', 'EA', 'QRG(2)', 'R')
('-d', 'A', 'QRG(2)', 'NEXP/poly') => ('-d', 'R', 'QRG(2)', 'NEXP/poly')
('-d', 'A', 'QRG(2)', 'NEXP/poly') => ('-d', 'AA', 'QRG(2)', 'NEXP/poly')
('-d', 'AA', 'QRG(2)', 'NEXP/poly') => ('-d', 'T', 'QRG(2)', 'NEXP/poly')
('-d', 'AA', 'QRG(2)', 'NEXP/poly') => ('-d', 'EA', 'QRG(2)', 'NEXP/poly')
('-d', 'AA', 'QRG(2)', 'cocap.NEXP') => ('-d', 'T', 'QRG(2)', 'cocap.NEXP')
('-d', 'AA', 'QRG(2)', 'cocap.NEXP') => ('-d', 'EA', 'QRG(2)', 'cocap.NEXP')
('-d', 'AA', 'QRG(2)', 'co.NEXP') => ('-d', 'T', 'QRG(2)', 'co.NEXP')
('-d', 'AA', 'QRG(2)', 'co.NEXP') => ('-d', 'EA', 'QRG(2)', 'co.NEXP')
('-d', 'AA', 'QRG(2)', 'NEXP') => ('-d', 'T', 'QRG(2)', 'NEXP')
('-d', 'AA', 'QRG(2)', 'NEXP') => ('-d', 'EA', 'QRG(2)', 'NEXP')
('-d', 'A', 'QRG(2)', 'co.NEXP_plo') => ('-d', 'R', 'QRG(2)', 'co.NEXP_plo')
('-d', 'A', 'QRG(2)', 'co.NEXP_plo') => ('-d', 'AA', 'QRG(2)', 'co.NEXP_plo')
('-d', 'A', 'QRG(2)', 'NEXP_plo') => ('-d', 'R', 'QRG(2)', 'NEXP_plo')
('-d', 'A', 'QRG(2)', 'NEXP_plo') => ('-d', 'AA', 'QRG(2)', 'NEXP_plo')
('-d', 'A', 'QRG(2)', 'AH') => ('-d', 'R', 'QRG(2)', 'AH')
('-d', 'A', 'QRG(2)', 'AH') => ('-d', 'AA', 'QRG(2)', 'AH')
('-d', 'AA', 'QRG(2)', 'AH') => ('-d', 'T', 'QRG(2)', 'AH')
('-d', 'AA', 'QRG(2)', 'AH') => ('-d', 'EA', 'QRG(2)', 'AH')
('-d', 'A', 'QRG(2)', 'AH_plo') => ('-d', 'R', 'QRG(2)', 'AH_plo')
('-d', 'A', 'QRG(2)', 'AH_plo') => ('-d', 'AA', 'QRG(2)', 'AH_plo')
('-d', 'A', 'QRG(2)', 'co.AH_plo') => ('-d', 'R', 'QRG(2)', 'co.AH_plo')
('-d', 'A', 'QRG(2)', 'co.AH_plo') => ('-d', 'AA', 'QRG(2)', 'co.AH_plo')
('-d', 'A', 'QRG(2)', 'cocap.AH_plo') => ('-d', 'R', 'QRG(2)', 'cocap.AH_plo')
('-d', 'A', 'QRG(2)', 'cocap.AH_plo') => ('-d', 'AA', 'QRG(2)', 'cocap.AH_plo')
('-d', 'AA', 'QRG(2)', 'cocap.AH_plo') => ('-d', 'T', 'QRG(2)', 'cocap.AH_plo')
('-d', 'AA', 'QRG(2)', 'cocap.AH_plo') => ('-d', 'EA', 'QRG(2)', 'cocap.AH_plo')
('-d', 'AA', 'QRG(2)', 'co.AH_plo') => ('-d', 'T', 'QRG(2)', 'co.AH_plo')
('-d', 'AA', 'QRG(2)', 'co.AH_plo') => ('-d', 'EA', 'QRG(2)', 'co.AH_plo')
('-d', 'AA', 'QRG(2)', 'AH_plo') => ('-d', 'T', 'QRG(2)', 'AH_plo')
('-d', 'AA', 'QRG(2)', 'AH_plo') => ('-d', 'EA', 'QRG(2)', 'AH_plo')
('-d', 'AA', 'QRG(2)', 'NEXP_plo') => ('-d', 'T', 'QRG(2)', 'NEXP_plo')
('-d', 'AA', 'QRG(2)', 'NEXP_plo') => ('-d', 'EA', 'QRG(2)', 'NEXP_plo')
('-d', 'AA', 'QRG(2)', 'co.NEXP_plo') => ('-d', 'T', 'QRG(2)', 'co.NEXP_plo')
('-d', 'AA', 'QRG(2)', 'co.NEXP_plo') => ('-d', 'EA', 'QRG(2)', 'co.NEXP_plo')
('-d', 'AA', 'QRG(2)', 'cocap.NEXP_plo') => ('-d', 'T', 'QRG(2)', 'cocap.NEXP_plo')
('-d', 'AA', 'QRG(2)', 'cocap.NEXP_plo') => ('-d', 'EA', 'QRG(2)', 'cocap.NEXP_plo')
('-d', 'A', 'NP', 'cocap.NEXP_plo') => ('-d', 'AA', 'NP', 'cocap.NEXP_plo')
('-d', 'A', 'co.NP', 'cocap.NEXP_plo') => ('-d', 'AA', 'co.NP', 'cocap.NEXP_plo')
('-d', 'A', 'co.NP', 'NEXP') => ('-d', 'AA', 'co.NP', 'NEXP')
('-d', 'A', 'co.NP', 'cocap.NEXP') => ('-d', 'AA', 'co.NP', 'cocap.NEXP')
('-d', 'A', 'NP', 'cocap.NEXP') => ('-d', 'AA', 'NP', 'cocap.NEXP')
('-d', 'A', 'NP', 'co.NEXP') => ('-d', 'AA', 'NP', 'co.NEXP')
('-d', 'AA', 'NP', 'co.NEXP') => ('-d', 'T', 'NP', 'co.NEXP')
('-d', 'AA', 'NP', 'co.NEXP') => ('-d', 'EA', 'NP', 'co.NEXP')
('-d', 'AA', 'NP', 'cocap.NEXP') => ('-d', 'T', 'NP', 'cocap.NEXP')
('-d', 'AA', 'NP', 'cocap.NEXP') => ('-d', 'EA', 'NP', 'cocap.NEXP')
('-d', 'AA', 'co.NP', 'cocap.NEXP') => ('-d', 'T', 'co.NP', 'cocap.NEXP')
('-d', 'AA', 'co.NP', 'cocap.NEXP') => ('-d', 'EA', 'co.NP', 'cocap.NEXP')
('-d', 'AA', 'co.NP', 'NEXP') => ('-d', 'T', 'co.NP', 'NEXP')
('-d', 'AA', 'co.NP', 'NEXP') => ('-d', 'EA', 'co.NP', 'NEXP')
('-d', 'A', 'co.NP', 'cocap.AH_plo') => ('-d', 'AA', 'co.NP', 'cocap.AH_plo')
('-d', 'A', 'NP', 'cocap.AH_plo') => ('-d', 'AA', 'NP', 'cocap.AH_plo')
('-d', 'A', 'NP', 'co.AH_plo') => ('-d', 'AA', 'NP', 'co.AH_plo')
('-d', 'A', 'co.NP', 'AH_plo') => ('-d', 'AA', 'co.NP', 'AH_plo')
('-d', 'AA', 'co.NP', 'AH_plo') => ('-d', 'T', 'co.NP', 'AH_plo')
('-d', 'AA', 'co.NP', 'AH_plo') => ('-d', 'EA', 'co.NP', 'AH_plo')
('-d', 'AA', 'co.NP', 'cocap.AH_plo') => ('-d', 'T', 'co.NP', 'cocap.AH_plo')
('-d', 'AA', 'co.NP', 'cocap.AH_plo') => ('-d', 'EA', 'co.NP', 'cocap.AH_plo')
('-d', 'AA', 'NP', 'cocap.AH_plo') => ('-d', 'T', 'NP', 'cocap.AH_plo')
('-d', 'AA', 'NP', 'cocap.AH_plo') => ('-d', 'EA', 'NP', 'cocap.AH_plo')
('-d', 'AA', 'NP', 'co.AH_plo') => ('-d', 'T', 'NP', 'co.AH_plo')
('-d', 'AA', 'NP', 'co.AH_plo') => ('-d', 'EA', 'NP', 'co.AH_plo')
('-d', 'A', 'co.NP', 'NEXP_plo') => ('-d', 'AA', 'co.NP', 'NEXP_plo')
('-d', 'A', 'NP', 'co.NEXP_plo') => ('-d', 'AA', 'NP', 'co.NEXP_plo')
('-d', 'AA', 'NP', 'co.NEXP_plo') => ('-d', 'T', 'NP', 'co.NEXP_plo')
('-d', 'AA', 'NP', 'co.NEXP_plo') => ('-d', 'EA', 'NP', 'co.NEXP_plo')
('-d', 'AA', 'NP', 'cocap.NEXP_plo') => ('-d', 'T', 'NP', 'cocap.NEXP_plo')
('-d', 'AA', 'NP', 'cocap.NEXP_plo') => ('-d', 'EA', 'NP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.NP', 'cocap.NEXP_plo') => ('-d', 'T', 'co.NP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.NP', 'cocap.NEXP_plo') => ('-d', 'EA', 'co.NP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.NP', 'NEXP_plo') => ('-d', 'T', 'co.NP', 'NEXP_plo')
('-d', 'AA', 'co.NP', 'NEXP_plo') => ('-d', 'EA', 'co.NP', 'NEXP_plo')
('-d', 'A', 'PSPACE', 'co.NEXP') => ('-d', 'R', 'PSPACE', 'co.NEXP')
('-d', 'A', 'PSPACE', 'co.NEXP') => ('-d', 'AA', 'PSPACE', 'co.NEXP')
('-d', 'A', 'PSPACE', 'NEXP') => ('-d', 'R', 'PSPACE', 'NEXP')
('-d', 'A', 'PSPACE', 'NEXP') => ('-d', 'AA', 'PSPACE', 'NEXP')
('-d', 'A', 'PSPACE', 'cocap.NEXP') => ('-d', 'R', 'PSPACE', 'cocap.NEXP')
('-d', 'A', 'PSPACE', 'cocap.NEXP') => ('-d', 'AA', 'PSPACE', 'cocap.NEXP')
('-d', 'A', 'co.MA', 'cocap.NEXP') => ('-d', 'AA', 'co.MA', 'cocap.NEXP')
('-d', 'A', 'MA', 'cocap.NEXP') => ('-d', 'AA', 'MA', 'cocap.NEXP')
('-d', 'A', 'MA', 'co.NEXP') => ('-d', 'AA', 'MA', 'co.NEXP')
('-d', 'A', 'co.MA', 'NEXP') => ('-d', 'AA', 'co.MA', 'NEXP')
('-d', 'AA', 'co.MA', 'NEXP') => ('-d', 'T', 'co.MA', 'NEXP')
('-d', 'AA', 'co.MA', 'NEXP') => ('-d', 'EA', 'co.MA', 'NEXP')
('-d', 'AA', 'co.MA', 'cocap.NEXP') => ('-d', 'T', 'co.MA', 'cocap.NEXP')
('-d', 'AA', 'co.MA', 'cocap.NEXP') => ('-d', 'EA', 'co.MA', 'cocap.NEXP')
('-d', 'AA', 'MA', 'cocap.NEXP') => ('-d', 'T', 'MA', 'cocap.NEXP')
('-d', 'AA', 'MA', 'cocap.NEXP') => ('-d', 'EA', 'MA', 'cocap.NEXP')
('-d', 'AA', 'MA', 'co.NEXP') => ('-d', 'T', 'MA', 'co.NEXP')
('-d', 'AA', 'MA', 'co.NEXP') => ('-d', 'EA', 'MA', 'co.NEXP')
('-d', 'A', 'SBP', 'cocap.NEXP') => ('-d', 'AA', 'SBP', 'cocap.NEXP')
('-d', 'A', 'co.SBP', 'cocap.NEXP') => ('-d', 'AA', 'co.SBP', 'cocap.NEXP')
('-d', 'A', 'co.SBP', 'NEXP') => ('-d', 'AA', 'co.SBP', 'NEXP')
('-d', 'A', 'SBP', 'co.NEXP') => ('-d', 'AA', 'SBP', 'co.NEXP')
('-d', 'AA', 'SBP', 'co.NEXP') => ('-d', 'T', 'SBP', 'co.NEXP')
('-d', 'AA', 'SBP', 'co.NEXP') => ('-d', 'EA', 'SBP', 'co.NEXP')
('-d', 'AA', 'SBP', 'cocap.NEXP') => ('-d', 'T', 'SBP', 'cocap.NEXP')
('-d', 'AA', 'SBP', 'cocap.NEXP') => ('-d', 'EA', 'SBP', 'cocap.NEXP')
('-d', 'AA', 'co.SBP', 'cocap.NEXP') => ('-d', 'T', 'co.SBP', 'cocap.NEXP')
('-d', 'AA', 'co.SBP', 'cocap.NEXP') => ('-d', 'EA', 'co.SBP', 'cocap.NEXP')
('-d', 'AA', 'co.SBP', 'NEXP') => ('-d', 'T', 'co.SBP', 'NEXP')
('-d', 'AA', 'co.SBP', 'NEXP') => ('-d', 'EA', 'co.SBP', 'NEXP')
('-d', 'A', 'PSPACE', 'R') => ('-d', 'R', 'PSPACE', 'R')
('-d', 'A', 'PSPACE', 'R') => ('-d', 'AA', 'PSPACE', 'R')
('-d', 'A', 'PSPACE', 'RE') => ('-d', 'R', 'PSPACE', 'RE')
('-d', 'A', 'PSPACE', 'RE') => ('-d', 'AA', 'PSPACE', 'RE')
('-d', 'A', 'PSPACE', 'co.RE') => ('-d', 'R', 'PSPACE', 'co.RE')
('-d', 'A', 'PSPACE', 'co.RE') => ('-d', 'AA', 'PSPACE', 'co.RE')
('-d', 'A', 'PP', 'co.RE') => ('-d', 'R', 'PP', 'co.RE')
('-d', 'A', 'PP', 'co.RE') => ('-d', 'AA', 'PP', 'co.RE')
('-d', 'A', 'PP', 'RE') => ('-d', 'R', 'PP', 'RE')
('-d', 'A', 'PP', 'RE') => ('-d', 'AA', 'PP', 'RE')
('-d', 'A', 'PP', 'R') => ('-d', 'R', 'PP', 'R')
('-d', 'A', 'PP', 'R') => ('-d', 'AA', 'PP', 'R')
('-d', 'AA', 'PP', 'R') => ('-d', 'T', 'PP', 'R')
('-d', 'AA', 'PP', 'R') => ('-d', 'EA', 'PP', 'R')
('-d', 'AA', 'PP', 'RE') => ('-d', 'T', 'PP', 'RE')
('-d', 'AA', 'PP', 'RE') => ('-d', 'EA', 'PP', 'RE')
('-d', 'AA', 'PP', 'co.RE') => ('-d', 'T', 'PP', 'co.RE')
('-d', 'AA', 'PP', 'co.RE') => ('-d', 'EA', 'PP', 'co.RE')
('-d', 'A', 'QSZK', 'co.RE') => ('-d', 'R', 'QSZK', 'co.RE')
('-d', 'A', 'QSZK', 'co.RE') => ('-d', 'AA', 'QSZK', 'co.RE')
('-d', 'A', 'QSZK', 'RE') => ('-d', 'R', 'QSZK', 'RE')
('-d', 'A', 'QSZK', 'RE') => ('-d', 'AA', 'QSZK', 'RE')
('-d', 'A', 'QSZK', 'R') => ('-d', 'R', 'QSZK', 'R')
('-d', 'A', 'QSZK', 'R') => ('-d', 'AA', 'QSZK', 'R')
('-d', 'AA', 'QSZK', 'R') => ('-d', 'T', 'QSZK', 'R')
('-d', 'AA', 'QSZK', 'R') => ('-d', 'EA', 'QSZK', 'R')
('-d', 'AA', 'QSZK', 'RE') => ('-d', 'T', 'QSZK', 'RE')
('-d', 'AA', 'QSZK', 'RE') => ('-d', 'EA', 'QSZK', 'RE')
('-d', 'AA', 'QSZK', 'co.RE') => ('-d', 'T', 'QSZK', 'co.RE')
('-d', 'AA', 'QSZK', 'co.RE') => ('-d', 'EA', 'QSZK', 'co.RE')
('-d', 'AA', 'PSPACE', 'co.RE') => ('-d', 'T', 'PSPACE', 'co.RE')
('-d', 'AA', 'PSPACE', 'co.RE') => ('-d', 'EA', 'PSPACE', 'co.RE')
('-d', 'AA', 'PSPACE', 'RE') => ('-d', 'T', 'PSPACE', 'RE')
('-d', 'AA', 'PSPACE', 'RE') => ('-d', 'EA', 'PSPACE', 'RE')
('-d', 'AA', 'PSPACE', 'R') => ('-d', 'T', 'PSPACE', 'R')
('-d', 'AA', 'PSPACE', 'R') => ('-d', 'EA', 'PSPACE', 'R')
('-d', 'A', 'AM', 'cocap.NEXP') => ('-d', 'AA', 'AM', 'cocap.NEXP')
('-d', 'A', 'co.AM', 'cocap.NEXP') => ('-d', 'AA', 'co.AM', 'cocap.NEXP')
('-d', 'A', 'co.AM', 'NEXP') => ('-d', 'AA', 'co.AM', 'NEXP')
('-d', 'A', 'AM', 'co.NEXP') => ('-d', 'AA', 'AM', 'co.NEXP')
('-d', 'AA', 'AM', 'co.NEXP') => ('-d', 'T', 'AM', 'co.NEXP')
('-d', 'AA', 'AM', 'co.NEXP') => ('-d', 'EA', 'AM', 'co.NEXP')
('-d', 'AA', 'AM', 'cocap.NEXP') => ('-d', 'T', 'AM', 'cocap.NEXP')
('-d', 'AA', 'AM', 'cocap.NEXP') => ('-d', 'EA', 'AM', 'cocap.NEXP')
('-d', 'AA', 'co.AM', 'cocap.NEXP') => ('-d', 'T', 'co.AM', 'cocap.NEXP')
('-d', 'AA', 'co.AM', 'cocap.NEXP') => ('-d', 'EA', 'co.AM', 'cocap.NEXP')
('-d', 'AA', 'co.AM', 'NEXP') => ('-d', 'T', 'co.AM', 'NEXP')
('-d', 'AA', 'co.AM', 'NEXP') => ('-d', 'EA', 'co.AM', 'NEXP')
('-d', 'A', 'PP', 'cocap.NEXP') => ('-d', 'R', 'PP', 'cocap.NEXP')
('-d', 'A', 'PP', 'cocap.NEXP') => ('-d', 'AA', 'PP', 'cocap.NEXP')
('-d', 'A', 'PP', 'co.NEXP') => ('-d', 'R', 'PP', 'co.NEXP')
('-d', 'A', 'PP', 'co.NEXP') => ('-d', 'AA', 'PP', 'co.NEXP')
('-d', 'A', 'PP', 'NEXP') => ('-d', 'R', 'PP', 'NEXP')
('-d', 'A', 'PP', 'NEXP') => ('-d', 'AA', 'PP', 'NEXP')
('-d', 'A', 'PP/poly', 'NEXP/poly') => ('-d', 'R', 'PP/poly', 'NEXP/poly')
('-d', 'A', 'PP/poly', 'NEXP/poly') => ('-d', 'AA', 'PP/poly', 'NEXP/poly')
('-d', 'A', 'PP/poly', 'ALL') => ('-d', 'R', 'PP/poly', 'ALL')
('-d', 'A', 'PP/poly', 'ALL') => ('-d', 'AA', 'PP/poly', 'ALL')
('-d', 'AA', 'PP/poly', 'ALL') => ('-d', 'T', 'PP/poly', 'ALL')
('-d', 'AA', 'PP/poly', 'ALL') => ('-d', 'EA', 'PP/poly', 'ALL')
('-d', 'A', 'PP', 'NEXP/poly') => ('-d', 'R', 'PP', 'NEXP/poly')
('-d', 'A', 'PP', 'NEXP/poly') => ('-d', 'AA', 'PP', 'NEXP/poly')
('-d', 'AA', 'PP', 'NEXP/poly') => ('-d', 'T', 'PP', 'NEXP/poly')
('-d', 'AA', 'PP', 'NEXP/poly') => ('-d', 'EA', 'PP', 'NEXP/poly')
('-d', 'AA', 'PP/poly', 'NEXP/poly') => ('-d', 'T', 'PP/poly', 'NEXP/poly')
('-d', 'AA', 'PP/poly', 'NEXP/poly') => ('-d', 'EA', 'PP/poly', 'NEXP/poly')
('-d', 'AA', 'PP', 'NEXP') => ('-d', 'T', 'PP', 'NEXP')
('-d', 'AA', 'PP', 'NEXP') => ('-d', 'EA', 'PP', 'NEXP')
('-d', 'AA', 'PP', 'co.NEXP') => ('-d', 'T', 'PP', 'co.NEXP')
('-d', 'AA', 'PP', 'co.NEXP') => ('-d', 'EA', 'PP', 'co.NEXP')
('-d', 'AA', 'PP', 'cocap.NEXP') => ('-d', 'T', 'PP', 'cocap.NEXP')
('-d', 'AA', 'PP', 'cocap.NEXP') => ('-d', 'EA', 'PP', 'cocap.NEXP')
('-d', 'A', 'PSPACE', 'NEXP/poly') => ('-d', 'R', 'PSPACE', 'NEXP/poly')
('-d', 'A', 'PSPACE', 'NEXP/poly') => ('-d', 'AA', 'PSPACE', 'NEXP/poly')
('-d', 'A', 'PSPACE/poly', 'NEXP/poly') => ('-d', 'R', 'PSPACE/poly', 'NEXP/poly')
('-d', 'A', 'PSPACE/poly', 'NEXP/poly') => ('-d', 'AA', 'PSPACE/poly', 'NEXP/poly')
('-d', 'A', 'cocap.QMA/qpoly', 'NEXP/poly') => ('-d', 'R', 'cocap.QMA/qpoly', 'NEXP/poly')
('-d', 'A', 'cocap.QMA/qpoly', 'NEXP/poly') => ('-d', 'AA', 'cocap.QMA/qpoly', 'NEXP/poly')
('-d', 'A', 'cocap.QMA/qpoly', 'ALL') => ('-d', 'R', 'cocap.QMA/qpoly', 'ALL')
('-d', 'A', 'cocap.QMA/qpoly', 'ALL') => ('-d', 'AA', 'cocap.QMA/qpoly', 'ALL')
('-d', 'A', 'BQP/mpoly', 'ALL') => ('-d', 'R', 'BQP/mpoly', 'ALL')
('-d', 'A', 'BQP/mpoly', 'ALL') => ('-d', 'AA', 'BQP/mpoly', 'ALL')
('-d', 'AA', 'BQP/mpoly', 'ALL') => ('-d', 'T', 'BQP/mpoly', 'ALL')
('-d', 'AA', 'BQP/mpoly', 'ALL') => ('-d', 'EA', 'BQP/mpoly', 'ALL')
('-d', 'A', 'cocap.QCMA/qpoly', 'ALL') => ('-d', 'R', 'cocap.QCMA/qpoly', 'ALL')
('-d', 'A', 'cocap.QCMA/qpoly', 'ALL') => ('-d', 'AA', 'cocap.QCMA/qpoly', 'ALL')
('-d', 'A', 'BQP/qpoly', 'ALL') => ('-d', 'R', 'BQP/qpoly', 'ALL')
('-d', 'A', 'BQP/qpoly', 'ALL') => ('-d', 'AA', 'BQP/qpoly', 'ALL')
('-d', 'AA', 'BQP/qpoly', 'ALL') => ('-d', 'T', 'BQP/qpoly', 'ALL')
('-d', 'AA', 'BQP/qpoly', 'ALL') => ('-d', 'EA', 'BQP/qpoly', 'ALL')
('-d', 'AA', 'cocap.QCMA/qpoly', 'ALL') => ('-d', 'T', 'cocap.QCMA/qpoly', 'ALL')
('-d', 'AA', 'cocap.QCMA/qpoly', 'ALL') => ('-d', 'EA', 'cocap.QCMA/qpoly', 'ALL')
('-d', 'AA', 'cocap.QMA/qpoly', 'ALL') => ('-d', 'T', 'cocap.QMA/qpoly', 'ALL')
('-d', 'AA', 'cocap.QMA/qpoly', 'ALL') => ('-d', 'EA', 'cocap.QMA/qpoly', 'ALL')
('-d', 'A', 'BQP/mpoly', 'NEXP/poly') => ('-d', 'R', 'BQP/mpoly', 'NEXP/poly')
('-d', 'A', 'BQP/mpoly', 'NEXP/poly') => ('-d', 'AA', 'BQP/mpoly', 'NEXP/poly')
('-d', 'AA', 'BQP/mpoly', 'NEXP/poly') => ('-d', 'T', 'BQP/mpoly', 'NEXP/poly')
('-d', 'AA', 'BQP/mpoly', 'NEXP/poly') => ('-d', 'EA', 'BQP/mpoly', 'NEXP/poly')
('-d', 'A', 'cocap.QCMA/qpoly', 'NEXP/poly') => ('-d', 'R', 'cocap.QCMA/qpoly', 'NEXP/poly')
('-d', 'A', 'cocap.QCMA/qpoly', 'NEXP/poly') => ('-d', 'AA', 'cocap.QCMA/qpoly', 'NEXP/poly')
('-d', 'A', 'BQP/qpoly', 'NEXP/poly') => ('-d', 'R', 'BQP/qpoly', 'NEXP/poly')
('-d', 'A', 'BQP/qpoly', 'NEXP/poly') => ('-d', 'AA', 'BQP/qpoly', 'NEXP/poly')
('-d', 'AA', 'BQP/qpoly', 'NEXP/poly') => ('-d', 'T', 'BQP/qpoly', 'NEXP/poly')
('-d', 'AA', 'BQP/qpoly', 'NEXP/poly') => ('-d', 'EA', 'BQP/qpoly', 'NEXP/poly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'NEXP/poly') => ('-d', 'T', 'cocap.QCMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'cocap.QCMA/qpoly', 'NEXP/poly') => ('-d', 'EA', 'cocap.QCMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'cocap.QMA/qpoly', 'NEXP/poly') => ('-d', 'T', 'cocap.QMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'cocap.QMA/qpoly', 'NEXP/poly') => ('-d', 'EA', 'cocap.QMA/qpoly', 'NEXP/poly')
('-d', 'A', 'PSPACE/poly', 'ALL') => ('-d', 'R', 'PSPACE/poly', 'ALL')
('-d', 'A', 'PSPACE/poly', 'ALL') => ('-d', 'AA', 'PSPACE/poly', 'ALL')
('-d', 'A', 'co.QCMA/qpoly', 'ALL') => ('-d', 'R', 'co.QCMA/qpoly', 'ALL')
('-d', 'A', 'co.QCMA/qpoly', 'ALL') => ('-d', 'AA', 'co.QCMA/qpoly', 'ALL')
('-d', 'A', 'QCMA/qpoly', 'ALL') => ('-d', 'R', 'QCMA/qpoly', 'ALL')
('-d', 'A', 'QCMA/qpoly', 'ALL') => ('-d', 'AA', 'QCMA/qpoly', 'ALL')
('-d', 'AA', 'QCMA/qpoly', 'ALL') => ('-d', 'T', 'QCMA/qpoly', 'ALL')
('-d', 'AA', 'QCMA/qpoly', 'ALL') => ('-d', 'EA', 'QCMA/qpoly', 'ALL')
('-d', 'AA', 'co.QCMA/qpoly', 'ALL') => ('-d', 'T', 'co.QCMA/qpoly', 'ALL')
('-d', 'AA', 'co.QCMA/qpoly', 'ALL') => ('-d', 'EA', 'co.QCMA/qpoly', 'ALL')
('-d', 'A', 'co.QMA/qpoly', 'ALL') => ('-d', 'R', 'co.QMA/qpoly', 'ALL')
('-d', 'A', 'co.QMA/qpoly', 'ALL') => ('-d', 'AA', 'co.QMA/qpoly', 'ALL')
('-d', 'A', 'QMA/qpoly', 'ALL') => ('-d', 'R', 'QMA/qpoly', 'ALL')
('-d', 'A', 'QMA/qpoly', 'ALL') => ('-d', 'AA', 'QMA/qpoly', 'ALL')
('-d', 'AA', 'QMA/qpoly', 'ALL') => ('-d', 'T', 'QMA/qpoly', 'ALL')
('-d', 'AA', 'QMA/qpoly', 'ALL') => ('-d', 'EA', 'QMA/qpoly', 'ALL')
('-d', 'AA', 'co.QMA/qpoly', 'ALL') => ('-d', 'T', 'co.QMA/qpoly', 'ALL')
('-d', 'AA', 'co.QMA/qpoly', 'ALL') => ('-d', 'EA', 'co.QMA/qpoly', 'ALL')
('-d', 'AA', 'PSPACE/poly', 'ALL') => ('-d', 'T', 'PSPACE/poly', 'ALL')
('-d', 'AA', 'PSPACE/poly', 'ALL') => ('-d', 'EA', 'PSPACE/poly', 'ALL')
('-d', 'A', 'co.QCMA/qpoly', 'NEXP/poly') => ('-d', 'R', 'co.QCMA/qpoly', 'NEXP/poly')
('-d', 'A', 'co.QCMA/qpoly', 'NEXP/poly') => ('-d', 'AA', 'co.QCMA/qpoly', 'NEXP/poly')
('-d', 'A', 'QCMA/qpoly', 'NEXP/poly') => ('-d', 'R', 'QCMA/qpoly', 'NEXP/poly')
('-d', 'A', 'QCMA/qpoly', 'NEXP/poly') => ('-d', 'AA', 'QCMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'QCMA/qpoly', 'NEXP/poly') => ('-d', 'T', 'QCMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'QCMA/qpoly', 'NEXP/poly') => ('-d', 'EA', 'QCMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'co.QCMA/qpoly', 'NEXP/poly') => ('-d', 'T', 'co.QCMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'co.QCMA/qpoly', 'NEXP/poly') => ('-d', 'EA', 'co.QCMA/qpoly', 'NEXP/poly')
('-d', 'A', 'co.QMA/qpoly', 'NEXP/poly') => ('-d', 'R', 'co.QMA/qpoly', 'NEXP/poly')
('-d', 'A', 'co.QMA/qpoly', 'NEXP/poly') => ('-d', 'AA', 'co.QMA/qpoly', 'NEXP/poly')
('-d', 'A', 'QMA/qpoly', 'NEXP/poly') => ('-d', 'R', 'QMA/qpoly', 'NEXP/poly')
('-d', 'A', 'QMA/qpoly', 'NEXP/poly') => ('-d', 'AA', 'QMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'QMA/qpoly', 'NEXP/poly') => ('-d', 'T', 'QMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'QMA/qpoly', 'NEXP/poly') => ('-d', 'EA', 'QMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'co.QMA/qpoly', 'NEXP/poly') => ('-d', 'T', 'co.QMA/qpoly', 'NEXP/poly')
('-d', 'AA', 'co.QMA/qpoly', 'NEXP/poly') => ('-d', 'EA', 'co.QMA/qpoly', 'NEXP/poly')
('-d', 'A', 'QSZK', 'NEXP/poly') => ('-d', 'R', 'QSZK', 'NEXP/poly')
('-d', 'A', 'QSZK', 'NEXP/poly') => ('-d', 'AA', 'QSZK', 'NEXP/poly')
('-d', 'AA', 'QSZK', 'NEXP/poly') => ('-d', 'T', 'QSZK', 'NEXP/poly')
('-d', 'AA', 'QSZK', 'NEXP/poly') => ('-d', 'EA', 'QSZK', 'NEXP/poly')
('-d', 'AA', 'PSPACE/poly', 'NEXP/poly') => ('-d', 'T', 'PSPACE/poly', 'NEXP/poly')
('-d', 'AA', 'PSPACE/poly', 'NEXP/poly') => ('-d', 'EA', 'PSPACE/poly', 'NEXP/poly')
('-d', 'AA', 'PSPACE', 'NEXP/poly') => ('-d', 'T', 'PSPACE', 'NEXP/poly')
('-d', 'AA', 'PSPACE', 'NEXP/poly') => ('-d', 'EA', 'PSPACE', 'NEXP/poly')
('-d', 'A', 'IP', 'cocap.NEXP') => ('-d', 'R', 'IP', 'cocap.NEXP')
('-d', 'A', 'IP', 'cocap.NEXP') => ('-d', 'AA', 'IP', 'cocap.NEXP')
('-d', 'A', 'co.IP', 'cocap.NEXP') => ('-d', 'R', 'co.IP', 'cocap.NEXP')
('-d', 'A', 'co.IP', 'cocap.NEXP') => ('-d', 'AA', 'co.IP', 'cocap.NEXP')
('-d', 'A', 'co.IP', 'NEXP') => ('-d', 'R', 'co.IP', 'NEXP')
('-d', 'A', 'co.IP', 'NEXP') => ('-d', 'AA', 'co.IP', 'NEXP')
('-d', 'A', 'IP', 'co.NEXP') => ('-d', 'R', 'IP', 'co.NEXP')
('-d', 'A', 'IP', 'co.NEXP') => ('-d', 'AA', 'IP', 'co.NEXP')
('-d', 'AA', 'IP', 'co.NEXP') => ('-d', 'T', 'IP', 'co.NEXP')
('-d', 'AA', 'IP', 'co.NEXP') => ('-d', 'EA', 'IP', 'co.NEXP')
('-d', 'AA', 'IP', 'cocap.NEXP') => ('-d', 'T', 'IP', 'cocap.NEXP')
('-d', 'AA', 'IP', 'cocap.NEXP') => ('-d', 'EA', 'IP', 'cocap.NEXP')
('-d', 'AA', 'co.IP', 'cocap.NEXP') => ('-d', 'T', 'co.IP', 'cocap.NEXP')
('-d', 'AA', 'co.IP', 'cocap.NEXP') => ('-d', 'EA', 'co.IP', 'cocap.NEXP')
('-d', 'AA', 'co.IP', 'NEXP') => ('-d', 'T', 'co.IP', 'NEXP')
('-d', 'AA', 'co.IP', 'NEXP') => ('-d', 'EA', 'co.IP', 'NEXP')
('-d', 'A', 'QSZK', 'cocap.NEXP') => ('-d', 'R', 'QSZK', 'cocap.NEXP')
('-d', 'A', 'QSZK', 'cocap.NEXP') => ('-d', 'AA', 'QSZK', 'cocap.NEXP')
('-d', 'A', 'QSZK', 'co.NEXP') => ('-d', 'R', 'QSZK', 'co.NEXP')
('-d', 'A', 'QSZK', 'co.NEXP') => ('-d', 'AA', 'QSZK', 'co.NEXP')
('-d', 'A', 'QSZK', 'NEXP') => ('-d', 'R', 'QSZK', 'NEXP')
('-d', 'A', 'QSZK', 'NEXP') => ('-d', 'AA', 'QSZK', 'NEXP')
('-d', 'AA', 'QSZK', 'NEXP') => ('-d', 'T', 'QSZK', 'NEXP')
('-d', 'AA', 'QSZK', 'NEXP') => ('-d', 'EA', 'QSZK', 'NEXP')
('-d', 'AA', 'QSZK', 'co.NEXP') => ('-d', 'T', 'QSZK', 'co.NEXP')
('-d', 'AA', 'QSZK', 'co.NEXP') => ('-d', 'EA', 'QSZK', 'co.NEXP')
('-d', 'AA', 'QSZK', 'cocap.NEXP') => ('-d', 'T', 'QSZK', 'cocap.NEXP')
('-d', 'AA', 'QSZK', 'cocap.NEXP') => ('-d', 'EA', 'QSZK', 'cocap.NEXP')
('-d', 'AA', 'PSPACE', 'cocap.NEXP') => ('-d', 'T', 'PSPACE', 'cocap.NEXP')
('-d', 'AA', 'PSPACE', 'cocap.NEXP') => ('-d', 'EA', 'PSPACE', 'cocap.NEXP')
('-d', 'AA', 'PSPACE', 'co.NEXP') => ('-d', 'T', 'PSPACE', 'co.NEXP')
('-d', 'AA', 'PSPACE', 'co.NEXP') => ('-d', 'EA', 'PSPACE', 'co.NEXP')
('-d', 'AA', 'PSPACE', 'NEXP') => ('-d', 'T', 'PSPACE', 'NEXP')
('-d', 'AA', 'PSPACE', 'NEXP') => ('-d', 'EA', 'PSPACE', 'NEXP')
('-d', 'A', 'co.MA', 'cocap.NEXP_plo') => ('-d', 'AA', 'co.MA', 'cocap.NEXP_plo')
('-d', 'A', 'MA', 'cocap.NEXP_plo') => ('-d', 'AA', 'MA', 'cocap.NEXP_plo')
('-d', 'A', 'MA', 'co.NEXP_plo') => ('-d', 'AA', 'MA', 'co.NEXP_plo')
('-d', 'A', 'co.MA', 'NEXP_plo') => ('-d', 'AA', 'co.MA', 'NEXP_plo')
('-d', 'A', 'co.MA', 'AH_plo') => ('-d', 'AA', 'co.MA', 'AH_plo')
('-d', 'A', 'co.MA', 'cocap.AH_plo') => ('-d', 'AA', 'co.MA', 'cocap.AH_plo')
('-d', 'A', 'MA', 'cocap.AH_plo') => ('-d', 'AA', 'MA', 'cocap.AH_plo')
('-d', 'A', 'MA', 'co.AH_plo') => ('-d', 'AA', 'MA', 'co.AH_plo')
('-d', 'AA', 'MA', 'co.AH_plo') => ('-d', 'T', 'MA', 'co.AH_plo')
('-d', 'AA', 'MA', 'co.AH_plo') => ('-d', 'EA', 'MA', 'co.AH_plo')
('-d', 'AA', 'MA', 'cocap.AH_plo') => ('-d', 'T', 'MA', 'cocap.AH_plo')
('-d', 'AA', 'MA', 'cocap.AH_plo') => ('-d', 'EA', 'MA', 'cocap.AH_plo')
('-d', 'AA', 'co.MA', 'cocap.AH_plo') => ('-d', 'T', 'co.MA', 'cocap.AH_plo')
('-d', 'AA', 'co.MA', 'cocap.AH_plo') => ('-d', 'EA', 'co.MA', 'cocap.AH_plo')
('-d', 'AA', 'co.MA', 'AH_plo') => ('-d', 'T', 'co.MA', 'AH_plo')
('-d', 'AA', 'co.MA', 'AH_plo') => ('-d', 'EA', 'co.MA', 'AH_plo')
('-d', 'AA', 'co.MA', 'NEXP_plo') => ('-d', 'T', 'co.MA', 'NEXP_plo')
('-d', 'AA', 'co.MA', 'NEXP_plo') => ('-d', 'EA', 'co.MA', 'NEXP_plo')
('-d', 'AA', 'co.MA', 'cocap.NEXP_plo') => ('-d', 'T', 'co.MA', 'cocap.NEXP_plo')
('-d', 'AA', 'co.MA', 'cocap.NEXP_plo') => ('-d', 'EA', 'co.MA', 'cocap.NEXP_plo')
('-d', 'AA', 'MA', 'cocap.NEXP_plo') => ('-d', 'T', 'MA', 'cocap.NEXP_plo')
('-d', 'AA', 'MA', 'cocap.NEXP_plo') => ('-d', 'EA', 'MA', 'cocap.NEXP_plo')
('-d', 'AA', 'MA', 'co.NEXP_plo') => ('-d', 'T', 'MA', 'co.NEXP_plo')
('-d', 'AA', 'MA', 'co.NEXP_plo') => ('-d', 'EA', 'MA', 'co.NEXP_plo')
('-d', 'A', 'PSPACE', 'co.NEXP_plo') => ('-d', 'R', 'PSPACE', 'co.NEXP_plo')
('-d', 'A', 'PSPACE', 'co.NEXP_plo') => ('-d', 'AA', 'PSPACE', 'co.NEXP_plo')
('-d', 'A', 'PSPACE', 'NEXP_plo') => ('-d', 'R', 'PSPACE', 'NEXP_plo')
('-d', 'A', 'PSPACE', 'NEXP_plo') => ('-d', 'AA', 'PSPACE', 'NEXP_plo')
('-d', 'A', 'PSPACE', 'AH') => ('-d', 'R', 'PSPACE', 'AH')
('-d', 'A', 'PSPACE', 'AH') => ('-d', 'AA', 'PSPACE', 'AH')
('-d', 'A', 'PP', 'AH') => ('-d', 'R', 'PP', 'AH')
('-d', 'A', 'PP', 'AH') => ('-d', 'AA', 'PP', 'AH')
('-d', 'AA', 'PP', 'AH') => ('-d', 'T', 'PP', 'AH')
('-d', 'AA', 'PP', 'AH') => ('-d', 'EA', 'PP', 'AH')
('-d', 'A', 'QSZK', 'AH') => ('-d', 'R', 'QSZK', 'AH')
('-d', 'A', 'QSZK', 'AH') => ('-d', 'AA', 'QSZK', 'AH')
('-d', 'AA', 'QSZK', 'AH') => ('-d', 'T', 'QSZK', 'AH')
('-d', 'AA', 'QSZK', 'AH') => ('-d', 'EA', 'QSZK', 'AH')
('-d', 'AA', 'PSPACE', 'AH') => ('-d', 'T', 'PSPACE', 'AH')
('-d', 'AA', 'PSPACE', 'AH') => ('-d', 'EA', 'PSPACE', 'AH')
('-d', 'A', 'PP', 'NEXP_plo') => ('-d', 'R', 'PP', 'NEXP_plo')
('-d', 'A', 'PP', 'NEXP_plo') => ('-d', 'AA', 'PP', 'NEXP_plo')
('-d', 'A', 'PP', 'co.NEXP_plo') => ('-d', 'R', 'PP', 'co.NEXP_plo')
('-d', 'A', 'PP', 'co.NEXP_plo') => ('-d', 'AA', 'PP', 'co.NEXP_plo')
('-d', 'A', 'PP', 'cocap.NEXP_plo') => ('-d', 'R', 'PP', 'cocap.NEXP_plo')
('-d', 'A', 'PP', 'cocap.NEXP_plo') => ('-d', 'AA', 'PP', 'cocap.NEXP_plo')
('-d', 'A', 'PP', 'cocap.AH_plo') => ('-d', 'R', 'PP', 'cocap.AH_plo')
('-d', 'A', 'PP', 'cocap.AH_plo') => ('-d', 'AA', 'PP', 'cocap.AH_plo')
('-d', 'A', 'PP', 'co.AH_plo') => ('-d', 'R', 'PP', 'co.AH_plo')
('-d', 'A', 'PP', 'co.AH_plo') => ('-d', 'AA', 'PP', 'co.AH_plo')
('-d', 'A', 'PP', 'AH_plo') => ('-d', 'R', 'PP', 'AH_plo')
('-d', 'A', 'PP', 'AH_plo') => ('-d', 'AA', 'PP', 'AH_plo')
('-d', 'AA', 'PP', 'AH_plo') => ('-d', 'T', 'PP', 'AH_plo')
('-d', 'AA', 'PP', 'AH_plo') => ('-d', 'EA', 'PP', 'AH_plo')
('-d', 'AA', 'PP', 'co.AH_plo') => ('-d', 'T', 'PP', 'co.AH_plo')
('-d', 'AA', 'PP', 'co.AH_plo') => ('-d', 'EA', 'PP', 'co.AH_plo')
('-d', 'AA', 'PP', 'cocap.AH_plo') => ('-d', 'T', 'PP', 'cocap.AH_plo')
('-d', 'AA', 'PP', 'cocap.AH_plo') => ('-d', 'EA', 'PP', 'cocap.AH_plo')
('-d', 'AA', 'PP', 'cocap.NEXP_plo') => ('-d', 'T', 'PP', 'cocap.NEXP_plo')
('-d', 'AA', 'PP', 'cocap.NEXP_plo') => ('-d', 'EA', 'PP', 'cocap.NEXP_plo')
('-d', 'AA', 'PP', 'co.NEXP_plo') => ('-d', 'T', 'PP', 'co.NEXP_plo')
('-d', 'AA', 'PP', 'co.NEXP_plo') => ('-d', 'EA', 'PP', 'co.NEXP_plo')
('-d', 'AA', 'PP', 'NEXP_plo') => ('-d', 'T', 'PP', 'NEXP_plo')
('-d', 'AA', 'PP', 'NEXP_plo') => ('-d', 'EA', 'PP', 'NEXP_plo')
('-d', 'A', 'co.SBP', 'NEXP_plo') => ('-d', 'AA', 'co.SBP', 'NEXP_plo')
('-d', 'A', 'co.SBP', 'cocap.NEXP_plo') => ('-d', 'AA', 'co.SBP', 'cocap.NEXP_plo')
('-d', 'A', 'SBP', 'cocap.NEXP_plo') => ('-d', 'AA', 'SBP', 'cocap.NEXP_plo')
('-d', 'A', 'SBP', 'co.NEXP_plo') => ('-d', 'AA', 'SBP', 'co.NEXP_plo')
('-d', 'A', 'SBP', 'co.AH_plo') => ('-d', 'AA', 'SBP', 'co.AH_plo')
('-d', 'A', 'SBP', 'cocap.AH_plo') => ('-d', 'AA', 'SBP', 'cocap.AH_plo')
('-d', 'A', 'co.SBP', 'cocap.AH_plo') => ('-d', 'AA', 'co.SBP', 'cocap.AH_plo')
('-d', 'A', 'co.SBP', 'AH_plo') => ('-d', 'AA', 'co.SBP', 'AH_plo')
('-d', 'AA', 'co.SBP', 'AH_plo') => ('-d', 'T', 'co.SBP', 'AH_plo')
('-d', 'AA', 'co.SBP', 'AH_plo') => ('-d', 'EA', 'co.SBP', 'AH_plo')
('-d', 'AA', 'co.SBP', 'cocap.AH_plo') => ('-d', 'T', 'co.SBP', 'cocap.AH_plo')
('-d', 'AA', 'co.SBP', 'cocap.AH_plo') => ('-d', 'EA', 'co.SBP', 'cocap.AH_plo')
('-d', 'AA', 'SBP', 'cocap.AH_plo') => ('-d', 'T', 'SBP', 'cocap.AH_plo')
('-d', 'AA', 'SBP', 'cocap.AH_plo') => ('-d', 'EA', 'SBP', 'cocap.AH_plo')
('-d', 'AA', 'SBP', 'co.AH_plo') => ('-d', 'T', 'SBP', 'co.AH_plo')
('-d', 'AA', 'SBP', 'co.AH_plo') => ('-d', 'EA', 'SBP', 'co.AH_plo')
('-d', 'AA', 'SBP', 'co.NEXP_plo') => ('-d', 'T', 'SBP', 'co.NEXP_plo')
('-d', 'AA', 'SBP', 'co.NEXP_plo') => ('-d', 'EA', 'SBP', 'co.NEXP_plo')
('-d', 'AA', 'SBP', 'cocap.NEXP_plo') => ('-d', 'T', 'SBP', 'cocap.NEXP_plo')
('-d', 'AA', 'SBP', 'cocap.NEXP_plo') => ('-d', 'EA', 'SBP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.SBP', 'cocap.NEXP_plo') => ('-d', 'T', 'co.SBP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.SBP', 'cocap.NEXP_plo') => ('-d', 'EA', 'co.SBP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.SBP', 'NEXP_plo') => ('-d', 'T', 'co.SBP', 'NEXP_plo')
('-d', 'AA', 'co.SBP', 'NEXP_plo') => ('-d', 'EA', 'co.SBP', 'NEXP_plo')
('-d', 'A', 'QSZK', 'NEXP_plo') => ('-d', 'R', 'QSZK', 'NEXP_plo')
('-d', 'A', 'QSZK', 'NEXP_plo') => ('-d', 'AA', 'QSZK', 'NEXP_plo')
('-d', 'A', 'QSZK', 'co.NEXP_plo') => ('-d', 'R', 'QSZK', 'co.NEXP_plo')
('-d', 'A', 'QSZK', 'co.NEXP_plo') => ('-d', 'AA', 'QSZK', 'co.NEXP_plo')
('-d', 'A', 'QSZK', 'cocap.NEXP_plo') => ('-d', 'R', 'QSZK', 'cocap.NEXP_plo')
('-d', 'A', 'QSZK', 'cocap.NEXP_plo') => ('-d', 'AA', 'QSZK', 'cocap.NEXP_plo')
('-d', 'A', 'QSZK', 'cocap.AH_plo') => ('-d', 'R', 'QSZK', 'cocap.AH_plo')
('-d', 'A', 'QSZK', 'cocap.AH_plo') => ('-d', 'AA', 'QSZK', 'cocap.AH_plo')
('-d', 'A', 'QSZK', 'co.AH_plo') => ('-d', 'R', 'QSZK', 'co.AH_plo')
('-d', 'A', 'QSZK', 'co.AH_plo') => ('-d', 'AA', 'QSZK', 'co.AH_plo')
('-d', 'A', 'QSZK', 'AH_plo') => ('-d', 'R', 'QSZK', 'AH_plo')
('-d', 'A', 'QSZK', 'AH_plo') => ('-d', 'AA', 'QSZK', 'AH_plo')
('-d', 'AA', 'QSZK', 'AH_plo') => ('-d', 'T', 'QSZK', 'AH_plo')
('-d', 'AA', 'QSZK', 'AH_plo') => ('-d', 'EA', 'QSZK', 'AH_plo')
('-d', 'AA', 'QSZK', 'co.AH_plo') => ('-d', 'T', 'QSZK', 'co.AH_plo')
('-d', 'AA', 'QSZK', 'co.AH_plo') => ('-d', 'EA', 'QSZK', 'co.AH_plo')
('-d', 'AA', 'QSZK', 'cocap.AH_plo') => ('-d', 'T', 'QSZK', 'cocap.AH_plo')
('-d', 'AA', 'QSZK', 'cocap.AH_plo') => ('-d', 'EA', 'QSZK', 'cocap.AH_plo')
('-d', 'AA', 'QSZK', 'cocap.NEXP_plo') => ('-d', 'T', 'QSZK', 'cocap.NEXP_plo')
('-d', 'AA', 'QSZK', 'cocap.NEXP_plo') => ('-d', 'EA', 'QSZK', 'cocap.NEXP_plo')
('-d', 'AA', 'QSZK', 'co.NEXP_plo') => ('-d', 'T', 'QSZK', 'co.NEXP_plo')
('-d', 'AA', 'QSZK', 'co.NEXP_plo') => ('-d', 'EA', 'QSZK', 'co.NEXP_plo')
('-d', 'AA', 'QSZK', 'NEXP_plo') => ('-d', 'T', 'QSZK', 'NEXP_plo')
('-d', 'AA', 'QSZK', 'NEXP_plo') => ('-d', 'EA', 'QSZK', 'NEXP_plo')
('-d', 'A', 'co.AM', 'NEXP_plo') => ('-d', 'AA', 'co.AM', 'NEXP_plo')
('-d', 'A', 'co.AM', 'cocap.NEXP_plo') => ('-d', 'AA', 'co.AM', 'cocap.NEXP_plo')
('-d', 'A', 'AM', 'cocap.NEXP_plo') => ('-d', 'AA', 'AM', 'cocap.NEXP_plo')
('-d', 'A', 'AM', 'co.NEXP_plo') => ('-d', 'AA', 'AM', 'co.NEXP_plo')
('-d', 'A', 'AM', 'co.AH_plo') => ('-d', 'AA', 'AM', 'co.AH_plo')
('-d', 'A', 'AM', 'cocap.AH_plo') => ('-d', 'AA', 'AM', 'cocap.AH_plo')
('-d', 'A', 'co.AM', 'cocap.AH_plo') => ('-d', 'AA', 'co.AM', 'cocap.AH_plo')
('-d', 'A', 'co.AM', 'AH_plo') => ('-d', 'AA', 'co.AM', 'AH_plo')
('-d', 'AA', 'co.AM', 'AH_plo') => ('-d', 'T', 'co.AM', 'AH_plo')
('-d', 'AA', 'co.AM', 'AH_plo') => ('-d', 'EA', 'co.AM', 'AH_plo')
('-d', 'AA', 'co.AM', 'cocap.AH_plo') => ('-d', 'T', 'co.AM', 'cocap.AH_plo')
('-d', 'AA', 'co.AM', 'cocap.AH_plo') => ('-d', 'EA', 'co.AM', 'cocap.AH_plo')
('-d', 'AA', 'AM', 'cocap.AH_plo') => ('-d', 'T', 'AM', 'cocap.AH_plo')
('-d', 'AA', 'AM', 'cocap.AH_plo') => ('-d', 'EA', 'AM', 'cocap.AH_plo')
('-d', 'AA', 'AM', 'co.AH_plo') => ('-d', 'T', 'AM', 'co.AH_plo')
('-d', 'AA', 'AM', 'co.AH_plo') => ('-d', 'EA', 'AM', 'co.AH_plo')
('-d', 'AA', 'AM', 'co.NEXP_plo') => ('-d', 'T', 'AM', 'co.NEXP_plo')
('-d', 'AA', 'AM', 'co.NEXP_plo') => ('-d', 'EA', 'AM', 'co.NEXP_plo')
('-d', 'AA', 'AM', 'cocap.NEXP_plo') => ('-d', 'T', 'AM', 'cocap.NEXP_plo')
('-d', 'AA', 'AM', 'cocap.NEXP_plo') => ('-d', 'EA', 'AM', 'cocap.NEXP_plo')
('-d', 'AA', 'co.AM', 'cocap.NEXP_plo') => ('-d', 'T', 'co.AM', 'cocap.NEXP_plo')
('-d', 'AA', 'co.AM', 'cocap.NEXP_plo') => ('-d', 'EA', 'co.AM', 'cocap.NEXP_plo')
('-d', 'AA', 'co.AM', 'NEXP_plo') => ('-d', 'T', 'co.AM', 'NEXP_plo')
('-d', 'AA', 'co.AM', 'NEXP_plo') => ('-d', 'EA', 'co.AM', 'NEXP_plo')
('-d', 'A', 'PSPACE', 'AH_plo') => ('-d', 'R', 'PSPACE', 'AH_plo')
('-d', 'A', 'PSPACE', 'AH_plo') => ('-d', 'AA', 'PSPACE', 'AH_plo')
('-d', 'A', 'PSPACE', 'co.AH_plo') => ('-d', 'R', 'PSPACE', 'co.AH_plo')
('-d', 'A', 'PSPACE', 'co.AH_plo') => ('-d', 'AA', 'PSPACE', 'co.AH_plo')
('-d', 'A', 'PSPACE', 'cocap.AH_plo') => ('-d', 'R', 'PSPACE', 'cocap.AH_plo')
('-d', 'A', 'PSPACE', 'cocap.AH_plo') => ('-d', 'AA', 'PSPACE', 'cocap.AH_plo')
('-d', 'A', 'IP', 'cocap.AH_plo') => ('-d', 'R', 'IP', 'cocap.AH_plo')
('-d', 'A', 'IP', 'cocap.AH_plo') => ('-d', 'AA', 'IP', 'cocap.AH_plo')
('-d', 'A', 'co.IP', 'cocap.AH_plo') => ('-d', 'R', 'co.IP', 'cocap.AH_plo')
('-d', 'A', 'co.IP', 'cocap.AH_plo') => ('-d', 'AA', 'co.IP', 'cocap.AH_plo')
('-d', 'A', 'co.IP', 'AH_plo') => ('-d', 'R', 'co.IP', 'AH_plo')
('-d', 'A', 'co.IP', 'AH_plo') => ('-d', 'AA', 'co.IP', 'AH_plo')
('-d', 'A', 'IP', 'co.AH_plo') => ('-d', 'R', 'IP', 'co.AH_plo')
('-d', 'A', 'IP', 'co.AH_plo') => ('-d', 'AA', 'IP', 'co.AH_plo')
('-d', 'AA', 'IP', 'co.AH_plo') => ('-d', 'T', 'IP', 'co.AH_plo')
('-d', 'AA', 'IP', 'co.AH_plo') => ('-d', 'EA', 'IP', 'co.AH_plo')
('-d', 'AA', 'IP', 'cocap.AH_plo') => ('-d', 'T', 'IP', 'cocap.AH_plo')
('-d', 'AA', 'IP', 'cocap.AH_plo') => ('-d', 'EA', 'IP', 'cocap.AH_plo')
('-d', 'AA', 'co.IP', 'cocap.AH_plo') => ('-d', 'T', 'co.IP', 'cocap.AH_plo')
('-d', 'AA', 'co.IP', 'cocap.AH_plo') => ('-d', 'EA', 'co.IP', 'cocap.AH_plo')
('-d', 'AA', 'co.IP', 'AH_plo') => ('-d', 'T', 'co.IP', 'AH_plo')
('-d', 'AA', 'co.IP', 'AH_plo') => ('-d', 'EA', 'co.IP', 'AH_plo')
('-d', 'AA', 'PSPACE', 'cocap.AH_plo') => ('-d', 'T', 'PSPACE', 'cocap.AH_plo')
('-d', 'AA', 'PSPACE', 'cocap.AH_plo') => ('-d', 'EA', 'PSPACE', 'cocap.AH_plo')
('-d', 'AA', 'PSPACE', 'co.AH_plo') => ('-d', 'T', 'PSPACE', 'co.AH_plo')
('-d', 'AA', 'PSPACE', 'co.AH_plo') => ('-d', 'EA', 'PSPACE', 'co.AH_plo')
('-d', 'AA', 'PSPACE', 'AH_plo') => ('-d', 'T', 'PSPACE', 'AH_plo')
('-d', 'AA', 'PSPACE', 'AH_plo') => ('-d', 'EA', 'PSPACE', 'AH_plo')
('-d', 'A', 'co.IP', 'NEXP_plo') => ('-d', 'R', 'co.IP', 'NEXP_plo')
('-d', 'A', 'co.IP', 'NEXP_plo') => ('-d', 'AA', 'co.IP', 'NEXP_plo')
('-d', 'A', 'co.IP', 'cocap.NEXP_plo') => ('-d', 'R', 'co.IP', 'cocap.NEXP_plo')
('-d', 'A', 'co.IP', 'cocap.NEXP_plo') => ('-d', 'AA', 'co.IP', 'cocap.NEXP_plo')
('-d', 'A', 'IP', 'cocap.NEXP_plo') => ('-d', 'R', 'IP', 'cocap.NEXP_plo')
('-d', 'A', 'IP', 'cocap.NEXP_plo') => ('-d', 'AA', 'IP', 'cocap.NEXP_plo')
('-d', 'A', 'IP', 'co.NEXP_plo') => ('-d', 'R', 'IP', 'co.NEXP_plo')
('-d', 'A', 'IP', 'co.NEXP_plo') => ('-d', 'AA', 'IP', 'co.NEXP_plo')
('-d', 'AA', 'IP', 'co.NEXP_plo') => ('-d', 'T', 'IP', 'co.NEXP_plo')
('-d', 'AA', 'IP', 'co.NEXP_plo') => ('-d', 'EA', 'IP', 'co.NEXP_plo')
('-d', 'AA', 'IP', 'cocap.NEXP_plo') => ('-d', 'T', 'IP', 'cocap.NEXP_plo')
('-d', 'AA', 'IP', 'cocap.NEXP_plo') => ('-d', 'EA', 'IP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.IP', 'cocap.NEXP_plo') => ('-d', 'T', 'co.IP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.IP', 'cocap.NEXP_plo') => ('-d', 'EA', 'co.IP', 'cocap.NEXP_plo')
('-d', 'AA', 'co.IP', 'NEXP_plo') => ('-d', 'T', 'co.IP', 'NEXP_plo')
('-d', 'AA', 'co.IP', 'NEXP_plo') => ('-d', 'EA', 'co.IP', 'NEXP_plo')
('-d', 'AA', 'PSPACE', 'NEXP_plo') => ('-d', 'T', 'PSPACE', 'NEXP_plo')
('-d', 'AA', 'PSPACE', 'NEXP_plo') => ('-d', 'EA', 'PSPACE', 'NEXP_plo')
('-d', 'AA', 'PSPACE', 'co.NEXP_plo') => ('-d', 'T', 'PSPACE', 'co.NEXP_plo')
('-d', 'AA', 'PSPACE', 'co.NEXP_plo') => ('-d', 'EA', 'PSPACE', 'co.NEXP_plo')
('-d', 'AA', 'PSPACE', 'cocap.NEXP_plo') => ('-d', 'T', 'PSPACE', 'cocap.NEXP_plo')
('-d', 'AA', 'PSPACE', 'cocap.NEXP_plo') => ('-d', 'EA', 'PSPACE', 'cocap.NEXP_plo')
('-p', 'R', 'cocap.NEXP_plo', 'IP') => ('-p', 'A', 'cocap.NEXP_plo', 'IP')
('-p', 'R', 'cocap.NEXP_plo', 'co.IP') => ('-p', 'A', 'cocap.NEXP_plo', 'co.IP')
('-p', 'R', 'cocap.NEXP_plo', 'cocap.IP') => ('-p', 'A', 'cocap.NEXP_plo', 'cocap.IP')
('p', 'A', 'PSPACE', 'cocap.NEXP_plo') => ('p', 'R', 'PSPACE', 'cocap.NEXP_plo')
('p', 'A', 'PSPACE', 'cocap.NEXP_plo') => ('p', 'AA', 'PSPACE', 'cocap.NEXP_plo')
('p', 'A', 'SZK', 'cocap.NEXP_plo') => ('p', 'R', 'SZK', 'cocap.NEXP_plo')
('p', 'A', 'SZK', 'cocap.NEXP_plo') => ('p', 'AA', 'SZK', 'cocap.NEXP_plo')
('p', 'A', 'SZK', 'co.NEXP') => ('p', 'R', 'SZK', 'co.NEXP')
('p', 'A', 'SZK', 'co.NEXP') => ('p', 'AA', 'SZK', 'co.NEXP')
('p', 'A', 'SZK', 'NEXP') => ('p', 'R', 'SZK', 'NEXP')
('p', 'A', 'SZK', 'NEXP') => ('p', 'AA', 'SZK', 'NEXP')
('p', 'A', 'SZK', 'cocap.NEXP') => ('p', 'R', 'SZK', 'cocap.NEXP')
('p', 'A', 'SZK', 'cocap.NEXP') => ('p', 'AA', 'SZK', 'cocap.NEXP')
('p', 'A', 'cocap.NISZK', 'cocap.NEXP') => ('p', 'R', 'cocap.NISZK', 'cocap.NEXP')
('p', 'A', 'cocap.NISZK', 'cocap.NEXP') => ('p', 'AA', 'cocap.NISZK', 'cocap.NEXP')
('p', 'A', 'cocap.NISZK', 'co.NEXP') => ('p', 'R', 'cocap.NISZK', 'co.NEXP')
('p', 'A', 'cocap.NISZK', 'co.NEXP') => ('p', 'AA', 'cocap.NISZK', 'co.NEXP')
('p', 'A', 'cocap.NISZK', 'NEXP') => ('p', 'R', 'cocap.NISZK', 'NEXP')
('p', 'A', 'cocap.NISZK', 'NEXP') => ('p', 'AA', 'cocap.NISZK', 'NEXP')
('p', 'A', 'cocap.NISZK', 'R') => ('p', 'R', 'cocap.NISZK', 'R')
('p', 'A', 'cocap.NISZK', 'R') => ('p', 'AA', 'cocap.NISZK', 'R')
('p', 'A', 'cocap.NISZK', 'RE') => ('p', 'R', 'cocap.NISZK', 'RE')
('p', 'A', 'cocap.NISZK', 'RE') => ('p', 'AA', 'cocap.NISZK', 'RE')
('p', 'A', 'cocap.NISZK', 'co.RE') => ('p', 'R', 'cocap.NISZK', 'co.RE')
('p', 'A', 'cocap.NISZK', 'co.RE') => ('p', 'AA', 'cocap.NISZK', 'co.RE')
('p', 'AA', 'cocap.NISZK', 'co.RE') => ('p', 'T', 'cocap.NISZK', 'co.RE')
('p', 'AA', 'cocap.NISZK', 'co.RE') => ('p', 'EA', 'cocap.NISZK', 'co.RE')
('p', 'AA', 'cocap.NISZK', 'RE') => ('p', 'T', 'cocap.NISZK', 'RE')
('p', 'AA', 'cocap.NISZK', 'RE') => ('p', 'EA', 'cocap.NISZK', 'RE')
('p', 'AA', 'cocap.NISZK', 'R') => ('p', 'T', 'cocap.NISZK', 'R')
('p', 'AA', 'cocap.NISZK', 'R') => ('p', 'EA', 'cocap.NISZK', 'R')
('p', 'A', 'cocap.NISZK', 'NEXP/poly') => ('p', 'R', 'cocap.NISZK', 'NEXP/poly')
('p', 'A', 'cocap.NISZK', 'NEXP/poly') => ('p', 'AA', 'cocap.NISZK', 'NEXP/poly')
('p', 'AA', 'cocap.NISZK', 'NEXP/poly') => ('p', 'T', 'cocap.NISZK', 'NEXP/poly')
('p', 'AA', 'cocap.NISZK', 'NEXP/poly') => ('p', 'EA', 'cocap.NISZK', 'NEXP/poly')
('p', 'AA', 'cocap.NISZK', 'NEXP') => ('p', 'T', 'cocap.NISZK', 'NEXP')
('p', 'AA', 'cocap.NISZK', 'NEXP') => ('p', 'EA', 'cocap.NISZK', 'NEXP')
('p', 'AA', 'cocap.NISZK', 'co.NEXP') => ('p', 'T', 'cocap.NISZK', 'co.NEXP')
('p', 'AA', 'cocap.NISZK', 'co.NEXP') => ('p', 'EA', 'cocap.NISZK', 'co.NEXP')
('p', 'AA', 'cocap.NISZK', 'cocap.NEXP') => ('p', 'T', 'cocap.NISZK', 'cocap.NEXP')
('p', 'AA', 'cocap.NISZK', 'cocap.NEXP') => ('p', 'EA', 'cocap.NISZK', 'cocap.NEXP')
('p', 'A', 'SZK', 'R') => ('p', 'R', 'SZK', 'R')
('p', 'A', 'SZK', 'R') => ('p', 'AA', 'SZK', 'R')
('p', 'A', 'co.NISZK', 'R') => ('p', 'R', 'co.NISZK', 'R')
('p', 'A', 'co.NISZK', 'R') => ('p', 'AA', 'co.NISZK', 'R')
('p', 'A', 'NISZK', 'R') => ('p', 'R', 'NISZK', 'R')
('p', 'A', 'NISZK', 'R') => ('p', 'AA', 'NISZK', 'R')
('p', 'A', 'NISZK', 'RE') => ('p', 'R', 'NISZK', 'RE')
('p', 'A', 'NISZK', 'RE') => ('p', 'AA', 'NISZK', 'RE')
('p', 'A', 'co.NISZK', 'co.RE') => ('p', 'R', 'co.NISZK', 'co.RE')
('p', 'A', 'co.NISZK', 'co.RE') => ('p', 'AA', 'co.NISZK', 'co.RE')
('p', 'AA', 'co.NISZK', 'co.RE') => ('p', 'T', 'co.NISZK', 'co.RE')
('p', 'AA', 'co.NISZK', 'co.RE') => ('p', 'EA', 'co.NISZK', 'co.RE')
('p', 'AA', 'NISZK', 'RE') => ('p', 'T', 'NISZK', 'RE')
('p', 'AA', 'NISZK', 'RE') => ('p', 'EA', 'NISZK', 'RE')
('p', 'A', 'NISZK', 'co.RE') => ('p', 'R', 'NISZK', 'co.RE')
('p', 'A', 'NISZK', 'co.RE') => ('p', 'AA', 'NISZK', 'co.RE')
('p', 'A', 'co.NISZK', 'RE') => ('p', 'R', 'co.NISZK', 'RE')
('p', 'A', 'co.NISZK', 'RE') => ('p', 'AA', 'co.NISZK', 'RE')
('p', 'AA', 'co.NISZK', 'RE') => ('p', 'T', 'co.NISZK', 'RE')
('p', 'AA', 'co.NISZK', 'RE') => ('p', 'EA', 'co.NISZK', 'RE')
('p', 'AA', 'co.NISZK', 'R') => ('p', 'T', 'co.NISZK', 'R')
('p', 'AA', 'co.NISZK', 'R') => ('p', 'EA', 'co.NISZK', 'R')
('p', 'AA', 'NISZK', 'R') => ('p', 'T', 'NISZK', 'R')
('p', 'AA', 'NISZK', 'R') => ('p', 'EA', 'NISZK', 'R')
('p', 'AA', 'NISZK', 'co.RE') => ('p', 'T', 'NISZK', 'co.RE')
('p', 'AA', 'NISZK', 'co.RE') => ('p', 'EA', 'NISZK', 'co.RE')
('p', 'A', 'SZK', 'RE') => ('p', 'R', 'SZK', 'RE')
('p', 'A', 'SZK', 'RE') => ('p', 'AA', 'SZK', 'RE')
('p', 'A', 'SZK', 'co.RE') => ('p', 'R', 'SZK', 'co.RE')
('p', 'A', 'SZK', 'co.RE') => ('p', 'AA', 'SZK', 'co.RE')
('p', 'AA', 'SZK', 'co.RE') => ('p', 'T', 'SZK', 'co.RE')
('p', 'AA', 'SZK', 'co.RE') => ('p', 'EA', 'SZK', 'co.RE')
('p', 'AA', 'SZK', 'RE') => ('p', 'T', 'SZK', 'RE')
('p', 'AA', 'SZK', 'RE') => ('p', 'EA', 'SZK', 'RE')
('p', 'AA', 'SZK', 'R') => ('p', 'T', 'SZK', 'R')
('p', 'AA', 'SZK', 'R') => ('p', 'EA', 'SZK', 'R')
('p', 'A', 'co.NISZK', 'cocap.NEXP') => ('p', 'R', 'co.NISZK', 'cocap.NEXP')
('p', 'A', 'co.NISZK', 'cocap.NEXP') => ('p', 'AA', 'co.NISZK', 'cocap.NEXP')
('p', 'A', 'NISZK', 'cocap.NEXP') => ('p', 'R', 'NISZK', 'cocap.NEXP')
('p', 'A', 'NISZK', 'cocap.NEXP') => ('p', 'AA', 'NISZK', 'cocap.NEXP')
('p', 'A', 'NISZK', 'co.NEXP') => ('p', 'R', 'NISZK', 'co.NEXP')
('p', 'A', 'NISZK', 'co.NEXP') => ('p', 'AA', 'NISZK', 'co.NEXP')
('p', 'A', 'co.NISZK', 'NEXP') => ('p', 'R', 'co.NISZK', 'NEXP')
('p', 'A', 'co.NISZK', 'NEXP') => ('p', 'AA', 'co.NISZK', 'NEXP')
('p', 'A', 'co.NISZK', 'NEXP/poly') => ('p', 'R', 'co.NISZK', 'NEXP/poly')
('p', 'A', 'co.NISZK', 'NEXP/poly') => ('p', 'AA', 'co.NISZK', 'NEXP/poly')
('p', 'A', 'NISZK', 'NEXP/poly') => ('p', 'R', 'NISZK', 'NEXP/poly')
('p', 'A', 'NISZK', 'NEXP/poly') => ('p', 'AA', 'NISZK', 'NEXP/poly')
('p', 'AA', 'NISZK', 'NEXP/poly') => ('p', 'T', 'NISZK', 'NEXP/poly')
('p', 'AA', 'NISZK', 'NEXP/poly') => ('p', 'EA', 'NISZK', 'NEXP/poly')
('p', 'AA', 'co.NISZK', 'NEXP/poly') => ('p', 'T', 'co.NISZK', 'NEXP/poly')
('p', 'AA', 'co.NISZK', 'NEXP/poly') => ('p', 'EA', 'co.NISZK', 'NEXP/poly')
('p', 'AA', 'co.NISZK', 'NEXP') => ('p', 'T', 'co.NISZK', 'NEXP')
('p', 'AA', 'co.NISZK', 'NEXP') => ('p', 'EA', 'co.NISZK', 'NEXP')
('p', 'AA', 'NISZK', 'co.NEXP') => ('p', 'T', 'NISZK', 'co.NEXP')
('p', 'AA', 'NISZK', 'co.NEXP') => ('p', 'EA', 'NISZK', 'co.NEXP')
('p', 'A', 'NISZK', 'NEXP') => ('p', 'R', 'NISZK', 'NEXP')
('p', 'A', 'NISZK', 'NEXP') => ('p', 'AA', 'NISZK', 'NEXP')
('p', 'A', 'co.NISZK', 'co.NEXP') => ('p', 'R', 'co.NISZK', 'co.NEXP')
('p', 'A', 'co.NISZK', 'co.NEXP') => ('p', 'AA', 'co.NISZK', 'co.NEXP')
('p', 'AA', 'co.NISZK', 'co.NEXP') => ('p', 'T', 'co.NISZK', 'co.NEXP')
('p', 'AA', 'co.NISZK', 'co.NEXP') => ('p', 'EA', 'co.NISZK', 'co.NEXP')
('p', 'AA', 'co.NISZK', 'cocap.NEXP') => ('p', 'T', 'co.NISZK', 'cocap.NEXP')
('p', 'AA', 'co.NISZK', 'cocap.NEXP') => ('p', 'EA', 'co.NISZK', 'cocap.NEXP')
('p', 'AA', 'NISZK', 'cocap.NEXP') => ('p', 'T', 'NISZK', 'cocap.NEXP')
('p', 'AA', 'NISZK', 'cocap.NEXP') => ('p', 'EA', 'NISZK', 'cocap.NEXP')
('p', 'AA', 'NISZK', 'NEXP') => ('p', 'T', 'NISZK', 'NEXP')
('p', 'AA', 'NISZK', 'NEXP') => ('p', 'EA', 'NISZK', 'NEXP')
('p', 'A', 'SZK', 'NEXP/poly') => ('p', 'R', 'SZK', 'NEXP/poly')
('p', 'A', 'SZK', 'NEXP/poly') => ('p', 'AA', 'SZK', 'NEXP/poly')
('p', 'AA', 'SZK', 'NEXP/poly') => ('p', 'T', 'SZK', 'NEXP/poly')
('p', 'AA', 'SZK', 'NEXP/poly') => ('p', 'EA', 'SZK', 'NEXP/poly')
('p', 'AA', 'SZK', 'cocap.NEXP') => ('p', 'T', 'SZK', 'cocap.NEXP')
('p', 'AA', 'SZK', 'cocap.NEXP') => ('p', 'EA', 'SZK', 'cocap.NEXP')
('p', 'AA', 'SZK', 'co.NEXP') => ('p', 'T', 'SZK', 'co.NEXP')
('p', 'AA', 'SZK', 'co.NEXP') => ('p', 'EA', 'SZK', 'co.NEXP')
('p', 'AA', 'SZK', 'NEXP') => ('p', 'T', 'SZK', 'NEXP')
('p', 'AA', 'SZK', 'NEXP') => ('p', 'EA', 'SZK', 'NEXP')
('p', 'A', 'cocap.NISZK', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.NISZK', 'cocap.NEXP_plo')
('p', 'A', 'cocap.NISZK', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.NISZK', 'cocap.NEXP_plo')
('p', 'A', 'cocap.NISZK', 'co.NEXP_plo') => ('p', 'R', 'cocap.NISZK', 'co.NEXP_plo')
('p', 'A', 'cocap.NISZK', 'co.NEXP_plo') => ('p', 'AA', 'cocap.NISZK', 'co.NEXP_plo')
('p', 'A', 'cocap.NISZK', 'NEXP_plo') => ('p', 'R', 'cocap.NISZK', 'NEXP_plo')
('p', 'A', 'cocap.NISZK', 'NEXP_plo') => ('p', 'AA', 'cocap.NISZK', 'NEXP_plo')
('p', 'A', 'cocap.NISZK', 'AH') => ('p', 'R', 'cocap.NISZK', 'AH')
('p', 'A', 'cocap.NISZK', 'AH') => ('p', 'AA', 'cocap.NISZK', 'AH')
('p', 'AA', 'cocap.NISZK', 'AH') => ('p', 'T', 'cocap.NISZK', 'AH')
('p', 'AA', 'cocap.NISZK', 'AH') => ('p', 'EA', 'cocap.NISZK', 'AH')
('p', 'A', 'cocap.NISZK', 'AH_plo') => ('p', 'R', 'cocap.NISZK', 'AH_plo')
('p', 'A', 'cocap.NISZK', 'AH_plo') => ('p', 'AA', 'cocap.NISZK', 'AH_plo')
('p', 'A', 'cocap.NISZK', 'co.AH_plo') => ('p', 'R', 'cocap.NISZK', 'co.AH_plo')
('p', 'A', 'cocap.NISZK', 'co.AH_plo') => ('p', 'AA', 'cocap.NISZK', 'co.AH_plo')
('p', 'A', 'cocap.NISZK', 'cocap.AH_plo') => ('p', 'R', 'cocap.NISZK', 'cocap.AH_plo')
('p', 'A', 'cocap.NISZK', 'cocap.AH_plo') => ('p', 'AA', 'cocap.NISZK', 'cocap.AH_plo')
('p', 'AA', 'cocap.NISZK', 'cocap.AH_plo') => ('p', 'T', 'cocap.NISZK', 'cocap.AH_plo')
('p', 'AA', 'cocap.NISZK', 'cocap.AH_plo') => ('p', 'EA', 'cocap.NISZK', 'cocap.AH_plo')
('p', 'AA', 'cocap.NISZK', 'co.AH_plo') => ('p', 'T', 'cocap.NISZK', 'co.AH_plo')
('p', 'AA', 'cocap.NISZK', 'co.AH_plo') => ('p', 'EA', 'cocap.NISZK', 'co.AH_plo')
('p', 'AA', 'cocap.NISZK', 'AH_plo') => ('p', 'T', 'cocap.NISZK', 'AH_plo')
('p', 'AA', 'cocap.NISZK', 'AH_plo') => ('p', 'EA', 'cocap.NISZK', 'AH_plo')
('p', 'AA', 'cocap.NISZK', 'NEXP_plo') => ('p', 'T', 'cocap.NISZK', 'NEXP_plo')
('p', 'AA', 'cocap.NISZK', 'NEXP_plo') => ('p', 'EA', 'cocap.NISZK', 'NEXP_plo')
('p', 'AA', 'cocap.NISZK', 'co.NEXP_plo') => ('p', 'T', 'cocap.NISZK', 'co.NEXP_plo')
('p', 'AA', 'cocap.NISZK', 'co.NEXP_plo') => ('p', 'EA', 'cocap.NISZK', 'co.NEXP_plo')
('p', 'AA', 'cocap.NISZK', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.NISZK', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.NISZK', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.NISZK', 'cocap.NEXP_plo')
('p', 'A', 'SZK', 'co.NEXP_plo') => ('p', 'R', 'SZK', 'co.NEXP_plo')
('p', 'A', 'SZK', 'co.NEXP_plo') => ('p', 'AA', 'SZK', 'co.NEXP_plo')
('p', 'A', 'SZK', 'NEXP_plo') => ('p', 'R', 'SZK', 'NEXP_plo')
('p', 'A', 'SZK', 'NEXP_plo') => ('p', 'AA', 'SZK', 'NEXP_plo')
('p', 'A', 'SZK', 'AH') => ('p', 'R', 'SZK', 'AH')
('p', 'A', 'SZK', 'AH') => ('p', 'AA', 'SZK', 'AH')
('p', 'A', 'co.NISZK', 'AH') => ('p', 'R', 'co.NISZK', 'AH')
('p', 'A', 'co.NISZK', 'AH') => ('p', 'AA', 'co.NISZK', 'AH')
('p', 'A', 'NISZK', 'AH') => ('p', 'R', 'NISZK', 'AH')
('p', 'A', 'NISZK', 'AH') => ('p', 'AA', 'NISZK', 'AH')
('p', 'AA', 'NISZK', 'AH') => ('p', 'T', 'NISZK', 'AH')
('p', 'AA', 'NISZK', 'AH') => ('p', 'EA', 'NISZK', 'AH')
('p', 'AA', 'co.NISZK', 'AH') => ('p', 'T', 'co.NISZK', 'AH')
('p', 'AA', 'co.NISZK', 'AH') => ('p', 'EA', 'co.NISZK', 'AH')
('p', 'AA', 'SZK', 'AH') => ('p', 'T', 'SZK', 'AH')
('p', 'AA', 'SZK', 'AH') => ('p', 'EA', 'SZK', 'AH')
('p', 'A', 'co.NISZK', 'NEXP_plo') => ('p', 'R', 'co.NISZK', 'NEXP_plo')
('p', 'A', 'co.NISZK', 'NEXP_plo') => ('p', 'AA', 'co.NISZK', 'NEXP_plo')
('p', 'A', 'NISZK', 'co.NEXP_plo') => ('p', 'R', 'NISZK', 'co.NEXP_plo')
('p', 'A', 'NISZK', 'co.NEXP_plo') => ('p', 'AA', 'NISZK', 'co.NEXP_plo')
('p', 'A', 'NISZK', 'co.AH_plo') => ('p', 'R', 'NISZK', 'co.AH_plo')
('p', 'A', 'NISZK', 'co.AH_plo') => ('p', 'AA', 'NISZK', 'co.AH_plo')
('p', 'A', 'co.NISZK', 'AH_plo') => ('p', 'R', 'co.NISZK', 'AH_plo')
('p', 'A', 'co.NISZK', 'AH_plo') => ('p', 'AA', 'co.NISZK', 'AH_plo')
('p', 'AA', 'co.NISZK', 'AH_plo') => ('p', 'T', 'co.NISZK', 'AH_plo')
('p', 'AA', 'co.NISZK', 'AH_plo') => ('p', 'EA', 'co.NISZK', 'AH_plo')
('p', 'AA', 'NISZK', 'co.AH_plo') => ('p', 'T', 'NISZK', 'co.AH_plo')
('p', 'AA', 'NISZK', 'co.AH_plo') => ('p', 'EA', 'NISZK', 'co.AH_plo')
('p', 'AA', 'NISZK', 'co.NEXP_plo') => ('p', 'T', 'NISZK', 'co.NEXP_plo')
('p', 'AA', 'NISZK', 'co.NEXP_plo') => ('p', 'EA', 'NISZK', 'co.NEXP_plo')
('p', 'AA', 'co.NISZK', 'NEXP_plo') => ('p', 'T', 'co.NISZK', 'NEXP_plo')
('p', 'AA', 'co.NISZK', 'NEXP_plo') => ('p', 'EA', 'co.NISZK', 'NEXP_plo')
('p', 'A', 'NISZK', 'NEXP_plo') => ('p', 'R', 'NISZK', 'NEXP_plo')
('p', 'A', 'NISZK', 'NEXP_plo') => ('p', 'AA', 'NISZK', 'NEXP_plo')
('p', 'A', 'NISZK', 'cocap.NEXP_plo') => ('p', 'R', 'NISZK', 'cocap.NEXP_plo')
('p', 'A', 'NISZK', 'cocap.NEXP_plo') => ('p', 'AA', 'NISZK', 'cocap.NEXP_plo')
('p', 'A', 'co.NISZK', 'cocap.NEXP_plo') => ('p', 'R', 'co.NISZK', 'cocap.NEXP_plo')
('p', 'A', 'co.NISZK', 'cocap.NEXP_plo') => ('p', 'AA', 'co.NISZK', 'cocap.NEXP_plo')
('p', 'A', 'co.NISZK', 'co.NEXP_plo') => ('p', 'R', 'co.NISZK', 'co.NEXP_plo')
('p', 'A', 'co.NISZK', 'co.NEXP_plo') => ('p', 'AA', 'co.NISZK', 'co.NEXP_plo')
('p', 'A', 'co.NISZK', 'co.AH_plo') => ('p', 'R', 'co.NISZK', 'co.AH_plo')
('p', 'A', 'co.NISZK', 'co.AH_plo') => ('p', 'AA', 'co.NISZK', 'co.AH_plo')
('p', 'A', 'co.NISZK', 'cocap.AH_plo') => ('p', 'R', 'co.NISZK', 'cocap.AH_plo')
('p', 'A', 'co.NISZK', 'cocap.AH_plo') => ('p', 'AA', 'co.NISZK', 'cocap.AH_plo')
('p', 'A', 'NISZK', 'cocap.AH_plo') => ('p', 'R', 'NISZK', 'cocap.AH_plo')
('p', 'A', 'NISZK', 'cocap.AH_plo') => ('p', 'AA', 'NISZK', 'cocap.AH_plo')
('p', 'A', 'NISZK', 'AH_plo') => ('p', 'R', 'NISZK', 'AH_plo')
('p', 'A', 'NISZK', 'AH_plo') => ('p', 'AA', 'NISZK', 'AH_plo')
('p', 'AA', 'NISZK', 'AH_plo') => ('p', 'T', 'NISZK', 'AH_plo')
('p', 'AA', 'NISZK', 'AH_plo') => ('p', 'EA', 'NISZK', 'AH_plo')
('p', 'AA', 'NISZK', 'cocap.AH_plo') => ('p', 'T', 'NISZK', 'cocap.AH_plo')
('p', 'AA', 'NISZK', 'cocap.AH_plo') => ('p', 'EA', 'NISZK', 'cocap.AH_plo')
('p', 'AA', 'co.NISZK', 'cocap.AH_plo') => ('p', 'T', 'co.NISZK', 'cocap.AH_plo')
('p', 'AA', 'co.NISZK', 'cocap.AH_plo') => ('p', 'EA', 'co.NISZK', 'cocap.AH_plo')
('p', 'AA', 'co.NISZK', 'co.AH_plo') => ('p', 'T', 'co.NISZK', 'co.AH_plo')
('p', 'AA', 'co.NISZK', 'co.AH_plo') => ('p', 'EA', 'co.NISZK', 'co.AH_plo')
('p', 'AA', 'co.NISZK', 'co.NEXP_plo') => ('p', 'T', 'co.NISZK', 'co.NEXP_plo')
('p', 'AA', 'co.NISZK', 'co.NEXP_plo') => ('p', 'EA', 'co.NISZK', 'co.NEXP_plo')
('p', 'AA', 'co.NISZK', 'cocap.NEXP_plo') => ('p', 'T', 'co.NISZK', 'cocap.NEXP_plo')
('p', 'AA', 'co.NISZK', 'cocap.NEXP_plo') => ('p', 'EA', 'co.NISZK', 'cocap.NEXP_plo')
('p', 'AA', 'NISZK', 'cocap.NEXP_plo') => ('p', 'T', 'NISZK', 'cocap.NEXP_plo')
('p', 'AA', 'NISZK', 'cocap.NEXP_plo') => ('p', 'EA', 'NISZK', 'cocap.NEXP_plo')
('p', 'AA', 'NISZK', 'NEXP_plo') => ('p', 'T', 'NISZK', 'NEXP_plo')
('p', 'AA', 'NISZK', 'NEXP_plo') => ('p', 'EA', 'NISZK', 'NEXP_plo')
('p', 'A', 'SZK', 'AH_plo') => ('p', 'R', 'SZK', 'AH_plo')
('p', 'A', 'SZK', 'AH_plo') => ('p', 'AA', 'SZK', 'AH_plo')
('p', 'A', 'SZK', 'co.AH_plo') => ('p', 'R', 'SZK', 'co.AH_plo')
('p', 'A', 'SZK', 'co.AH_plo') => ('p', 'AA', 'SZK', 'co.AH_plo')
('p', 'A', 'SZK', 'cocap.AH_plo') => ('p', 'R', 'SZK', 'cocap.AH_plo')
('p', 'A', 'SZK', 'cocap.AH_plo') => ('p', 'AA', 'SZK', 'cocap.AH_plo')
('p', 'AA', 'SZK', 'cocap.AH_plo') => ('p', 'T', 'SZK', 'cocap.AH_plo')
('p', 'AA', 'SZK', 'cocap.AH_plo') => ('p', 'EA', 'SZK', 'cocap.AH_plo')
('p', 'AA', 'SZK', 'co.AH_plo') => ('p', 'T', 'SZK', 'co.AH_plo')
('p', 'AA', 'SZK', 'co.AH_plo') => ('p', 'EA', 'SZK', 'co.AH_plo')
('p', 'AA', 'SZK', 'AH_plo') => ('p', 'T', 'SZK', 'AH_plo')
('p', 'AA', 'SZK', 'AH_plo') => ('p', 'EA', 'SZK', 'AH_plo')
('p', 'AA', 'SZK', 'NEXP_plo') => ('p', 'T', 'SZK', 'NEXP_plo')
('p', 'AA', 'SZK', 'NEXP_plo') => ('p', 'EA', 'SZK', 'NEXP_plo')
('p', 'AA', 'SZK', 'co.NEXP_plo') => ('p', 'T', 'SZK', 'co.NEXP_plo')
('p', 'AA', 'SZK', 'co.NEXP_plo') => ('p', 'EA', 'SZK', 'co.NEXP_plo')
('p', 'AA', 'SZK', 'cocap.NEXP_plo') => ('p', 'T', 'SZK', 'cocap.NEXP_plo')
('p', 'AA', 'SZK', 'cocap.NEXP_plo') => ('p', 'EA', 'SZK', 'cocap.NEXP_plo')
('p', 'A', 'QRG(2)', 'cocap.NEXP_plo') => ('p', 'R', 'QRG(2)', 'cocap.NEXP_plo')
('p', 'A', 'QRG(2)', 'cocap.NEXP_plo') => ('p', 'AA', 'QRG(2)', 'cocap.NEXP_plo')
('p', 'A', 'QRG(2)', 'co.NEXP') => ('p', 'R', 'QRG(2)', 'co.NEXP')
('p', 'A', 'QRG(2)', 'co.NEXP') => ('p', 'AA', 'QRG(2)', 'co.NEXP')
('p', 'A', 'QRG(2)', 'NEXP') => ('p', 'R', 'QRG(2)', 'NEXP')
('p', 'A', 'QRG(2)', 'NEXP') => ('p', 'AA', 'QRG(2)', 'NEXP')
('p', 'A', 'QRG(2)', 'cocap.NEXP') => ('p', 'R', 'QRG(2)', 'cocap.NEXP')
('p', 'A', 'QRG(2)', 'cocap.NEXP') => ('p', 'AA', 'QRG(2)', 'cocap.NEXP')
('p', 'A', 'QRG(2)', 'R') => ('p', 'R', 'QRG(2)', 'R')
('p', 'A', 'QRG(2)', 'R') => ('p', 'AA', 'QRG(2)', 'R')
('p', 'A', 'QRG(2)', 'RE') => ('p', 'R', 'QRG(2)', 'RE')
('p', 'A', 'QRG(2)', 'RE') => ('p', 'AA', 'QRG(2)', 'RE')
('p', 'A', 'QRG(2)', 'co.RE') => ('p', 'R', 'QRG(2)', 'co.RE')
('p', 'A', 'QRG(2)', 'co.RE') => ('p', 'AA', 'QRG(2)', 'co.RE')
('p', 'AA', 'QRG(2)', 'co.RE') => ('p', 'T', 'QRG(2)', 'co.RE')
('p', 'AA', 'QRG(2)', 'co.RE') => ('p', 'EA', 'QRG(2)', 'co.RE')
('p', 'AA', 'QRG(2)', 'RE') => ('p', 'T', 'QRG(2)', 'RE')
('p', 'AA', 'QRG(2)', 'RE') => ('p', 'EA', 'QRG(2)', 'RE')
('p', 'AA', 'QRG(2)', 'R') => ('p', 'T', 'QRG(2)', 'R')
('p', 'AA', 'QRG(2)', 'R') => ('p', 'EA', 'QRG(2)', 'R')
('p', 'A', 'QRG(2)', 'NEXP/poly') => ('p', 'R', 'QRG(2)', 'NEXP/poly')
('p', 'A', 'QRG(2)', 'NEXP/poly') => ('p', 'AA', 'QRG(2)', 'NEXP/poly')
('p', 'AA', 'QRG(2)', 'NEXP/poly') => ('p', 'T', 'QRG(2)', 'NEXP/poly')
('p', 'AA', 'QRG(2)', 'NEXP/poly') => ('p', 'EA', 'QRG(2)', 'NEXP/poly')
('p', 'AA', 'QRG(2)', 'cocap.NEXP') => ('p', 'T', 'QRG(2)', 'cocap.NEXP')
('p', 'AA', 'QRG(2)', 'cocap.NEXP') => ('p', 'EA', 'QRG(2)', 'cocap.NEXP')
('p', 'AA', 'QRG(2)', 'co.NEXP') => ('p', 'T', 'QRG(2)', 'co.NEXP')
('p', 'AA', 'QRG(2)', 'co.NEXP') => ('p', 'EA', 'QRG(2)', 'co.NEXP')
('p', 'AA', 'QRG(2)', 'NEXP') => ('p', 'T', 'QRG(2)', 'NEXP')
('p', 'AA', 'QRG(2)', 'NEXP') => ('p', 'EA', 'QRG(2)', 'NEXP')
('p', 'A', 'QRG(2)', 'co.NEXP_plo') => ('p', 'R', 'QRG(2)', 'co.NEXP_plo')
('p', 'A', 'QRG(2)', 'co.NEXP_plo') => ('p', 'AA', 'QRG(2)', 'co.NEXP_plo')
('p', 'A', 'QRG(2)', 'NEXP_plo') => ('p', 'R', 'QRG(2)', 'NEXP_plo')
('p', 'A', 'QRG(2)', 'NEXP_plo') => ('p', 'AA', 'QRG(2)', 'NEXP_plo')
('p', 'A', 'QRG(2)', 'AH') => ('p', 'R', 'QRG(2)', 'AH')
('p', 'A', 'QRG(2)', 'AH') => ('p', 'AA', 'QRG(2)', 'AH')
('p', 'AA', 'QRG(2)', 'AH') => ('p', 'T', 'QRG(2)', 'AH')
('p', 'AA', 'QRG(2)', 'AH') => ('p', 'EA', 'QRG(2)', 'AH')
('p', 'A', 'QRG(2)', 'AH_plo') => ('p', 'R', 'QRG(2)', 'AH_plo')
('p', 'A', 'QRG(2)', 'AH_plo') => ('p', 'AA', 'QRG(2)', 'AH_plo')
('p', 'A', 'QRG(2)', 'co.AH_plo') => ('p', 'R', 'QRG(2)', 'co.AH_plo')
('p', 'A', 'QRG(2)', 'co.AH_plo') => ('p', 'AA', 'QRG(2)', 'co.AH_plo')
('p', 'A', 'QRG(2)', 'cocap.AH_plo') => ('p', 'R', 'QRG(2)', 'cocap.AH_plo')
('p', 'A', 'QRG(2)', 'cocap.AH_plo') => ('p', 'AA', 'QRG(2)', 'cocap.AH_plo')
('p', 'AA', 'QRG(2)', 'cocap.AH_plo') => ('p', 'T', 'QRG(2)', 'cocap.AH_plo')
('p', 'AA', 'QRG(2)', 'cocap.AH_plo') => ('p', 'EA', 'QRG(2)', 'cocap.AH_plo')
('p', 'AA', 'QRG(2)', 'co.AH_plo') => ('p', 'T', 'QRG(2)', 'co.AH_plo')
('p', 'AA', 'QRG(2)', 'co.AH_plo') => ('p', 'EA', 'QRG(2)', 'co.AH_plo')
('p', 'AA', 'QRG(2)', 'AH_plo') => ('p', 'T', 'QRG(2)', 'AH_plo')
('p', 'AA', 'QRG(2)', 'AH_plo') => ('p', 'EA', 'QRG(2)', 'AH_plo')
('p', 'AA', 'QRG(2)', 'NEXP_plo') => ('p', 'T', 'QRG(2)', 'NEXP_plo')
('p', 'AA', 'QRG(2)', 'NEXP_plo') => ('p', 'EA', 'QRG(2)', 'NEXP_plo')
('p', 'AA', 'QRG(2)', 'co.NEXP_plo') => ('p', 'T', 'QRG(2)', 'co.NEXP_plo')
('p', 'AA', 'QRG(2)', 'co.NEXP_plo') => ('p', 'EA', 'QRG(2)', 'co.NEXP_plo')
('p', 'AA', 'QRG(2)', 'cocap.NEXP_plo') => ('p', 'T', 'QRG(2)', 'cocap.NEXP_plo')
('p', 'AA', 'QRG(2)', 'cocap.NEXP_plo') => ('p', 'EA', 'QRG(2)', 'cocap.NEXP_plo')
('p', 'A', 'NP', 'cocap.NEXP_plo') => ('p', 'AA', 'NP', 'cocap.NEXP_plo')
('p', 'A', 'co.NP', 'cocap.NEXP_plo') => ('p', 'AA', 'co.NP', 'cocap.NEXP_plo')
('p', 'A', 'co.NP', 'NEXP') => ('p', 'AA', 'co.NP', 'NEXP')
('p', 'A', 'co.NP', 'cocap.NEXP') => ('p', 'AA', 'co.NP', 'cocap.NEXP')
('p', 'A', 'NP', 'cocap.NEXP') => ('p', 'AA', 'NP', 'cocap.NEXP')
('p', 'A', 'NP', 'co.NEXP') => ('p', 'AA', 'NP', 'co.NEXP')
('p', 'AA', 'NP', 'co.NEXP') => ('p', 'T', 'NP', 'co.NEXP')
('p', 'AA', 'NP', 'co.NEXP') => ('p', 'EA', 'NP', 'co.NEXP')
('p', 'AA', 'NP', 'cocap.NEXP') => ('p', 'T', 'NP', 'cocap.NEXP')
('p', 'AA', 'NP', 'cocap.NEXP') => ('p', 'EA', 'NP', 'cocap.NEXP')
('p', 'AA', 'co.NP', 'cocap.NEXP') => ('p', 'T', 'co.NP', 'cocap.NEXP')
('p', 'AA', 'co.NP', 'cocap.NEXP') => ('p', 'EA', 'co.NP', 'cocap.NEXP')
('p', 'AA', 'co.NP', 'NEXP') => ('p', 'T', 'co.NP', 'NEXP')
('p', 'AA', 'co.NP', 'NEXP') => ('p', 'EA', 'co.NP', 'NEXP')
('p', 'A', 'co.NP', 'cocap.AH_plo') => ('p', 'AA', 'co.NP', 'cocap.AH_plo')
('p', 'A', 'NP', 'cocap.AH_plo') => ('p', 'AA', 'NP', 'cocap.AH_plo')
('p', 'A', 'NP', 'co.AH_plo') => ('p', 'AA', 'NP', 'co.AH_plo')
('p', 'A', 'co.NP', 'AH_plo') => ('p', 'AA', 'co.NP', 'AH_plo')
('p', 'AA', 'co.NP', 'AH_plo') => ('p', 'T', 'co.NP', 'AH_plo')
('p', 'AA', 'co.NP', 'AH_plo') => ('p', 'EA', 'co.NP', 'AH_plo')
('p', 'AA', 'co.NP', 'cocap.AH_plo') => ('p', 'T', 'co.NP', 'cocap.AH_plo')
('p', 'AA', 'co.NP', 'cocap.AH_plo') => ('p', 'EA', 'co.NP', 'cocap.AH_plo')
('p', 'AA', 'NP', 'cocap.AH_plo') => ('p', 'T', 'NP', 'cocap.AH_plo')
('p', 'AA', 'NP', 'cocap.AH_plo') => ('p', 'EA', 'NP', 'cocap.AH_plo')
('p', 'AA', 'NP', 'co.AH_plo') => ('p', 'T', 'NP', 'co.AH_plo')
('p', 'AA', 'NP', 'co.AH_plo') => ('p', 'EA', 'NP', 'co.AH_plo')
('p', 'A', 'co.NP', 'NEXP_plo') => ('p', 'AA', 'co.NP', 'NEXP_plo')
('p', 'A', 'NP', 'co.NEXP_plo') => ('p', 'AA', 'NP', 'co.NEXP_plo')
('p', 'AA', 'NP', 'co.NEXP_plo') => ('p', 'T', 'NP', 'co.NEXP_plo')
('p', 'AA', 'NP', 'co.NEXP_plo') => ('p', 'EA', 'NP', 'co.NEXP_plo')
('p', 'AA', 'NP', 'cocap.NEXP_plo') => ('p', 'T', 'NP', 'cocap.NEXP_plo')
('p', 'AA', 'NP', 'cocap.NEXP_plo') => ('p', 'EA', 'NP', 'cocap.NEXP_plo')
('p', 'AA', 'co.NP', 'cocap.NEXP_plo') => ('p', 'T', 'co.NP', 'cocap.NEXP_plo')
('p', 'AA', 'co.NP', 'cocap.NEXP_plo') => ('p', 'EA', 'co.NP', 'cocap.NEXP_plo')
('p', 'AA', 'co.NP', 'NEXP_plo') => ('p', 'T', 'co.NP', 'NEXP_plo')
('p', 'AA', 'co.NP', 'NEXP_plo') => ('p', 'EA', 'co.NP', 'NEXP_plo')
('p', 'A', 'PSPACE', 'co.NEXP') => ('p', 'R', 'PSPACE', 'co.NEXP')
('p', 'A', 'PSPACE', 'co.NEXP') => ('p', 'AA', 'PSPACE', 'co.NEXP')
('p', 'A', 'PSPACE', 'NEXP') => ('p', 'R', 'PSPACE', 'NEXP')
('p', 'A', 'PSPACE', 'NEXP') => ('p', 'AA', 'PSPACE', 'NEXP')
('p', 'A', 'PSPACE', 'cocap.NEXP') => ('p', 'R', 'PSPACE', 'cocap.NEXP')
('p', 'A', 'PSPACE', 'cocap.NEXP') => ('p', 'AA', 'PSPACE', 'cocap.NEXP')
('p', 'A', 'co.MA', 'cocap.NEXP') => ('p', 'AA', 'co.MA', 'cocap.NEXP')
('p', 'A', 'MA', 'cocap.NEXP') => ('p', 'AA', 'MA', 'cocap.NEXP')
('p', 'A', 'MA', 'co.NEXP') => ('p', 'AA', 'MA', 'co.NEXP')
('p', 'A', 'co.MA', 'NEXP') => ('p', 'AA', 'co.MA', 'NEXP')
('p', 'AA', 'co.MA', 'NEXP') => ('p', 'T', 'co.MA', 'NEXP')
('p', 'AA', 'co.MA', 'NEXP') => ('p', 'EA', 'co.MA', 'NEXP')
('p', 'AA', 'co.MA', 'cocap.NEXP') => ('p', 'T', 'co.MA', 'cocap.NEXP')
('p', 'AA', 'co.MA', 'cocap.NEXP') => ('p', 'EA', 'co.MA', 'cocap.NEXP')
('p', 'AA', 'MA', 'cocap.NEXP') => ('p', 'T', 'MA', 'cocap.NEXP')
('p', 'AA', 'MA', 'cocap.NEXP') => ('p', 'EA', 'MA', 'cocap.NEXP')
('p', 'AA', 'MA', 'co.NEXP') => ('p', 'T', 'MA', 'co.NEXP')
('p', 'AA', 'MA', 'co.NEXP') => ('p', 'EA', 'MA', 'co.NEXP')
('p', 'A', 'SBP', 'cocap.NEXP') => ('p', 'AA', 'SBP', 'cocap.NEXP')
('p', 'A', 'co.SBP', 'cocap.NEXP') => ('p', 'AA', 'co.SBP', 'cocap.NEXP')
('p', 'A', 'co.SBP', 'NEXP') => ('p', 'AA', 'co.SBP', 'NEXP')
('p', 'A', 'SBP', 'co.NEXP') => ('p', 'AA', 'SBP', 'co.NEXP')
('p', 'AA', 'SBP', 'co.NEXP') => ('p', 'T', 'SBP', 'co.NEXP')
('p', 'AA', 'SBP', 'co.NEXP') => ('p', 'EA', 'SBP', 'co.NEXP')
('p', 'AA', 'SBP', 'cocap.NEXP') => ('p', 'T', 'SBP', 'cocap.NEXP')
('p', 'AA', 'SBP', 'cocap.NEXP') => ('p', 'EA', 'SBP', 'cocap.NEXP')
('p', 'AA', 'co.SBP', 'cocap.NEXP') => ('p', 'T', 'co.SBP', 'cocap.NEXP')
('p', 'AA', 'co.SBP', 'cocap.NEXP') => ('p', 'EA', 'co.SBP', 'cocap.NEXP')
('p', 'AA', 'co.SBP', 'NEXP') => ('p', 'T', 'co.SBP', 'NEXP')
('p', 'AA', 'co.SBP', 'NEXP') => ('p', 'EA', 'co.SBP', 'NEXP')
('p', 'A', 'PSPACE', 'R') => ('p', 'R', 'PSPACE', 'R')
('p', 'A', 'PSPACE', 'R') => ('p', 'AA', 'PSPACE', 'R')
('p', 'A', 'PSPACE', 'RE') => ('p', 'R', 'PSPACE', 'RE')
('p', 'A', 'PSPACE', 'RE') => ('p', 'AA', 'PSPACE', 'RE')
('p', 'A', 'PSPACE', 'co.RE') => ('p', 'R', 'PSPACE', 'co.RE')
('p', 'A', 'PSPACE', 'co.RE') => ('p', 'AA', 'PSPACE', 'co.RE')
('p', 'A', 'PP', 'co.RE') => ('p', 'R', 'PP', 'co.RE')
('p', 'A', 'PP', 'co.RE') => ('p', 'AA', 'PP', 'co.RE')
('p', 'A', 'PP', 'RE') => ('p', 'R', 'PP', 'RE')
('p', 'A', 'PP', 'RE') => ('p', 'AA', 'PP', 'RE')
('p', 'A', 'PP', 'R') => ('p', 'R', 'PP', 'R')
('p', 'A', 'PP', 'R') => ('p', 'AA', 'PP', 'R')
('p', 'AA', 'PP', 'R') => ('p', 'T', 'PP', 'R')
('p', 'AA', 'PP', 'R') => ('p', 'EA', 'PP', 'R')
('p', 'AA', 'PP', 'RE') => ('p', 'T', 'PP', 'RE')
('p', 'AA', 'PP', 'RE') => ('p', 'EA', 'PP', 'RE')
('p', 'AA', 'PP', 'co.RE') => ('p', 'T', 'PP', 'co.RE')
('p', 'AA', 'PP', 'co.RE') => ('p', 'EA', 'PP', 'co.RE')
('p', 'A', 'QSZK', 'co.RE') => ('p', 'R', 'QSZK', 'co.RE')
('p', 'A', 'QSZK', 'co.RE') => ('p', 'AA', 'QSZK', 'co.RE')
('p', 'A', 'QSZK', 'RE') => ('p', 'R', 'QSZK', 'RE')
('p', 'A', 'QSZK', 'RE') => ('p', 'AA', 'QSZK', 'RE')
('p', 'A', 'QSZK', 'R') => ('p', 'R', 'QSZK', 'R')
('p', 'A', 'QSZK', 'R') => ('p', 'AA', 'QSZK', 'R')
('p', 'AA', 'QSZK', 'R') => ('p', 'T', 'QSZK', 'R')
('p', 'AA', 'QSZK', 'R') => ('p', 'EA', 'QSZK', 'R')
('p', 'AA', 'QSZK', 'RE') => ('p', 'T', 'QSZK', 'RE')
('p', 'AA', 'QSZK', 'RE') => ('p', 'EA', 'QSZK', 'RE')
('p', 'AA', 'QSZK', 'co.RE') => ('p', 'T', 'QSZK', 'co.RE')
('p', 'AA', 'QSZK', 'co.RE') => ('p', 'EA', 'QSZK', 'co.RE')
('p', 'AA', 'PSPACE', 'co.RE') => ('p', 'T', 'PSPACE', 'co.RE')
('p', 'AA', 'PSPACE', 'co.RE') => ('p', 'EA', 'PSPACE', 'co.RE')
('p', 'AA', 'PSPACE', 'RE') => ('p', 'T', 'PSPACE', 'RE')
('p', 'AA', 'PSPACE', 'RE') => ('p', 'EA', 'PSPACE', 'RE')
('p', 'AA', 'PSPACE', 'R') => ('p', 'T', 'PSPACE', 'R')
('p', 'AA', 'PSPACE', 'R') => ('p', 'EA', 'PSPACE', 'R')
('p', 'A', 'AM', 'cocap.NEXP') => ('p', 'AA', 'AM', 'cocap.NEXP')
('p', 'A', 'co.AM', 'cocap.NEXP') => ('p', 'AA', 'co.AM', 'cocap.NEXP')
('p', 'A', 'co.AM', 'NEXP') => ('p', 'AA', 'co.AM', 'NEXP')
('p', 'A', 'AM', 'co.NEXP') => ('p', 'AA', 'AM', 'co.NEXP')
('p', 'AA', 'AM', 'co.NEXP') => ('p', 'T', 'AM', 'co.NEXP')
('p', 'AA', 'AM', 'co.NEXP') => ('p', 'EA', 'AM', 'co.NEXP')
('p', 'AA', 'AM', 'cocap.NEXP') => ('p', 'T', 'AM', 'cocap.NEXP')
('p', 'AA', 'AM', 'cocap.NEXP') => ('p', 'EA', 'AM', 'cocap.NEXP')
('p', 'AA', 'co.AM', 'cocap.NEXP') => ('p', 'T', 'co.AM', 'cocap.NEXP')
('p', 'AA', 'co.AM', 'cocap.NEXP') => ('p', 'EA', 'co.AM', 'cocap.NEXP')
('p', 'AA', 'co.AM', 'NEXP') => ('p', 'T', 'co.AM', 'NEXP')
('p', 'AA', 'co.AM', 'NEXP') => ('p', 'EA', 'co.AM', 'NEXP')
('p', 'A', 'PP', 'cocap.NEXP') => ('p', 'R', 'PP', 'cocap.NEXP')
('p', 'A', 'PP', 'cocap.NEXP') => ('p', 'AA', 'PP', 'cocap.NEXP')
('p', 'A', 'PP', 'co.NEXP') => ('p', 'R', 'PP', 'co.NEXP')
('p', 'A', 'PP', 'co.NEXP') => ('p', 'AA', 'PP', 'co.NEXP')
('p', 'A', 'PP', 'NEXP') => ('p', 'R', 'PP', 'NEXP')
('p', 'A', 'PP', 'NEXP') => ('p', 'AA', 'PP', 'NEXP')
('p', 'A', 'PP/poly', 'NEXP/poly') => ('p', 'R', 'PP/poly', 'NEXP/poly')
('p', 'A', 'PP/poly', 'NEXP/poly') => ('p', 'AA', 'PP/poly', 'NEXP/poly')
('p', 'A', 'PP/poly', 'ALL') => ('p', 'R', 'PP/poly', 'ALL')
('p', 'A', 'PP/poly', 'ALL') => ('p', 'AA', 'PP/poly', 'ALL')
('p', 'AA', 'PP/poly', 'ALL') => ('p', 'T', 'PP/poly', 'ALL')
('p', 'AA', 'PP/poly', 'ALL') => ('p', 'EA', 'PP/poly', 'ALL')
('p', 'A', 'PP', 'NEXP/poly') => ('p', 'R', 'PP', 'NEXP/poly')
('p', 'A', 'PP', 'NEXP/poly') => ('p', 'AA', 'PP', 'NEXP/poly')
('p', 'AA', 'PP', 'NEXP/poly') => ('p', 'T', 'PP', 'NEXP/poly')
('p', 'AA', 'PP', 'NEXP/poly') => ('p', 'EA', 'PP', 'NEXP/poly')
('p', 'AA', 'PP/poly', 'NEXP/poly') => ('p', 'T', 'PP/poly', 'NEXP/poly')
('p', 'AA', 'PP/poly', 'NEXP/poly') => ('p', 'EA', 'PP/poly', 'NEXP/poly')
('p', 'AA', 'PP', 'NEXP') => ('p', 'T', 'PP', 'NEXP')
('p', 'AA', 'PP', 'NEXP') => ('p', 'EA', 'PP', 'NEXP')
('p', 'AA', 'PP', 'co.NEXP') => ('p', 'T', 'PP', 'co.NEXP')
('p', 'AA', 'PP', 'co.NEXP') => ('p', 'EA', 'PP', 'co.NEXP')
('p', 'AA', 'PP', 'cocap.NEXP') => ('p', 'T', 'PP', 'cocap.NEXP')
('p', 'AA', 'PP', 'cocap.NEXP') => ('p', 'EA', 'PP', 'cocap.NEXP')
('p', 'A', 'PSPACE', 'NEXP/poly') => ('p', 'R', 'PSPACE', 'NEXP/poly')
('p', 'A', 'PSPACE', 'NEXP/poly') => ('p', 'AA', 'PSPACE', 'NEXP/poly')
('p', 'A', 'PSPACE/poly', 'NEXP/poly') => ('p', 'R', 'PSPACE/poly', 'NEXP/poly')
('p', 'A', 'PSPACE/poly', 'NEXP/poly') => ('p', 'AA', 'PSPACE/poly', 'NEXP/poly')
('p', 'A', 'cocap.QMA/qpoly', 'NEXP/poly') => ('p', 'R', 'cocap.QMA/qpoly', 'NEXP/poly')
('p', 'A', 'cocap.QMA/qpoly', 'NEXP/poly') => ('p', 'AA', 'cocap.QMA/qpoly', 'NEXP/poly')
('p', 'A', 'cocap.QMA/qpoly', 'ALL') => ('p', 'R', 'cocap.QMA/qpoly', 'ALL')
('p', 'A', 'cocap.QMA/qpoly', 'ALL') => ('p', 'AA', 'cocap.QMA/qpoly', 'ALL')
('p', 'A', 'BQP/mpoly', 'ALL') => ('p', 'R', 'BQP/mpoly', 'ALL')
('p', 'A', 'BQP/mpoly', 'ALL') => ('p', 'AA', 'BQP/mpoly', 'ALL')
('p', 'AA', 'BQP/mpoly', 'ALL') => ('p', 'T', 'BQP/mpoly', 'ALL')
('p', 'AA', 'BQP/mpoly', 'ALL') => ('p', 'EA', 'BQP/mpoly', 'ALL')
('p', 'A', 'cocap.QCMA/qpoly', 'ALL') => ('p', 'R', 'cocap.QCMA/qpoly', 'ALL')
('p', 'A', 'cocap.QCMA/qpoly', 'ALL') => ('p', 'AA', 'cocap.QCMA/qpoly', 'ALL')
('p', 'A', 'BQP/qpoly', 'ALL') => ('p', 'R', 'BQP/qpoly', 'ALL')
('p', 'A', 'BQP/qpoly', 'ALL') => ('p', 'AA', 'BQP/qpoly', 'ALL')
('p', 'AA', 'BQP/qpoly', 'ALL') => ('p', 'T', 'BQP/qpoly', 'ALL')
('p', 'AA', 'BQP/qpoly', 'ALL') => ('p', 'EA', 'BQP/qpoly', 'ALL')
('p', 'AA', 'cocap.QCMA/qpoly', 'ALL') => ('p', 'T', 'cocap.QCMA/qpoly', 'ALL')
('p', 'AA', 'cocap.QCMA/qpoly', 'ALL') => ('p', 'EA', 'cocap.QCMA/qpoly', 'ALL')
('p', 'AA', 'cocap.QMA/qpoly', 'ALL') => ('p', 'T', 'cocap.QMA/qpoly', 'ALL')
('p', 'AA', 'cocap.QMA/qpoly', 'ALL') => ('p', 'EA', 'cocap.QMA/qpoly', 'ALL')
('p', 'A', 'BQP/mpoly', 'NEXP/poly') => ('p', 'R', 'BQP/mpoly', 'NEXP/poly')
('p', 'A', 'BQP/mpoly', 'NEXP/poly') => ('p', 'AA', 'BQP/mpoly', 'NEXP/poly')
('p', 'AA', 'BQP/mpoly', 'NEXP/poly') => ('p', 'T', 'BQP/mpoly', 'NEXP/poly')
('p', 'AA', 'BQP/mpoly', 'NEXP/poly') => ('p', 'EA', 'BQP/mpoly', 'NEXP/poly')
('p', 'A', 'cocap.QCMA/qpoly', 'NEXP/poly') => ('p', 'R', 'cocap.QCMA/qpoly', 'NEXP/poly')
('p', 'A', 'cocap.QCMA/qpoly', 'NEXP/poly') => ('p', 'AA', 'cocap.QCMA/qpoly', 'NEXP/poly')
('p', 'A', 'BQP/qpoly', 'NEXP/poly') => ('p', 'R', 'BQP/qpoly', 'NEXP/poly')
('p', 'A', 'BQP/qpoly', 'NEXP/poly') => ('p', 'AA', 'BQP/qpoly', 'NEXP/poly')
('p', 'AA', 'BQP/qpoly', 'NEXP/poly') => ('p', 'T', 'BQP/qpoly', 'NEXP/poly')
('p', 'AA', 'BQP/qpoly', 'NEXP/poly') => ('p', 'EA', 'BQP/qpoly', 'NEXP/poly')
('p', 'AA', 'cocap.QCMA/qpoly', 'NEXP/poly') => ('p', 'T', 'cocap.QCMA/qpoly', 'NEXP/poly')
('p', 'AA', 'cocap.QCMA/qpoly', 'NEXP/poly') => ('p', 'EA', 'cocap.QCMA/qpoly', 'NEXP/poly')
('p', 'AA', 'cocap.QMA/qpoly', 'NEXP/poly') => ('p', 'T', 'cocap.QMA/qpoly', 'NEXP/poly')
('p', 'AA', 'cocap.QMA/qpoly', 'NEXP/poly') => ('p', 'EA', 'cocap.QMA/qpoly', 'NEXP/poly')
('p', 'A', 'PSPACE/poly', 'ALL') => ('p', 'R', 'PSPACE/poly', 'ALL')
('p', 'A', 'PSPACE/poly', 'ALL') => ('p', 'AA', 'PSPACE/poly', 'ALL')
('p', 'A', 'co.QCMA/qpoly', 'ALL') => ('p', 'R', 'co.QCMA/qpoly', 'ALL')
('p', 'A', 'co.QCMA/qpoly', 'ALL') => ('p', 'AA', 'co.QCMA/qpoly', 'ALL')
('p', 'A', 'QCMA/qpoly', 'ALL') => ('p', 'R', 'QCMA/qpoly', 'ALL')
('p', 'A', 'QCMA/qpoly', 'ALL') => ('p', 'AA', 'QCMA/qpoly', 'ALL')
('p', 'AA', 'QCMA/qpoly', 'ALL') => ('p', 'T', 'QCMA/qpoly', 'ALL')
('p', 'AA', 'QCMA/qpoly', 'ALL') => ('p', 'EA', 'QCMA/qpoly', 'ALL')
('p', 'AA', 'co.QCMA/qpoly', 'ALL') => ('p', 'T', 'co.QCMA/qpoly', 'ALL')
('p', 'AA', 'co.QCMA/qpoly', 'ALL') => ('p', 'EA', 'co.QCMA/qpoly', 'ALL')
('p', 'A', 'co.QMA/qpoly', 'ALL') => ('p', 'R', 'co.QMA/qpoly', 'ALL')
('p', 'A', 'co.QMA/qpoly', 'ALL') => ('p', 'AA', 'co.QMA/qpoly', 'ALL')
('p', 'A', 'QMA/qpoly', 'ALL') => ('p', 'R', 'QMA/qpoly', 'ALL')
('p', 'A', 'QMA/qpoly', 'ALL') => ('p', 'AA', 'QMA/qpoly', 'ALL')
('p', 'AA', 'QMA/qpoly', 'ALL') => ('p', 'T', 'QMA/qpoly', 'ALL')
('p', 'AA', 'QMA/qpoly', 'ALL') => ('p', 'EA', 'QMA/qpoly', 'ALL')
('p', 'AA', 'co.QMA/qpoly', 'ALL') => ('p', 'T', 'co.QMA/qpoly', 'ALL')
('p', 'AA', 'co.QMA/qpoly', 'ALL') => ('p', 'EA', 'co.QMA/qpoly', 'ALL')
('p', 'AA', 'PSPACE/poly', 'ALL') => ('p', 'T', 'PSPACE/poly', 'ALL')
('p', 'AA', 'PSPACE/poly', 'ALL') => ('p', 'EA', 'PSPACE/poly', 'ALL')
('p', 'A', 'co.QCMA/qpoly', 'NEXP/poly') => ('p', 'R', 'co.QCMA/qpoly', 'NEXP/poly')
('p', 'A', 'co.QCMA/qpoly', 'NEXP/poly') => ('p', 'AA', 'co.QCMA/qpoly', 'NEXP/poly')
('p', 'A', 'QCMA/qpoly', 'NEXP/poly') => ('p', 'R', 'QCMA/qpoly', 'NEXP/poly')
('p', 'A', 'QCMA/qpoly', 'NEXP/poly') => ('p', 'AA', 'QCMA/qpoly', 'NEXP/poly')
('p', 'AA', 'QCMA/qpoly', 'NEXP/poly') => ('p', 'T', 'QCMA/qpoly', 'NEXP/poly')
('p', 'AA', 'QCMA/qpoly', 'NEXP/poly') => ('p', 'EA', 'QCMA/qpoly', 'NEXP/poly')
('p', 'AA', 'co.QCMA/qpoly', 'NEXP/poly') => ('p', 'T', 'co.QCMA/qpoly', 'NEXP/poly')
('p', 'AA', 'co.QCMA/qpoly', 'NEXP/poly') => ('p', 'EA', 'co.QCMA/qpoly', 'NEXP/poly')
('p', 'A', 'co.QMA/qpoly', 'NEXP/poly') => ('p', 'R', 'co.QMA/qpoly', 'NEXP/poly')
('p', 'A', 'co.QMA/qpoly', 'NEXP/poly') => ('p', 'AA', 'co.QMA/qpoly', 'NEXP/poly')
('p', 'A', 'QMA/qpoly', 'NEXP/poly') => ('p', 'R', 'QMA/qpoly', 'NEXP/poly')
('p', 'A', 'QMA/qpoly', 'NEXP/poly') => ('p', 'AA', 'QMA/qpoly', 'NEXP/poly')
('p', 'AA', 'QMA/qpoly', 'NEXP/poly') => ('p', 'T', 'QMA/qpoly', 'NEXP/poly')
('p', 'AA', 'QMA/qpoly', 'NEXP/poly') => ('p', 'EA', 'QMA/qpoly', 'NEXP/poly')
('p', 'AA', 'co.QMA/qpoly', 'NEXP/poly') => ('p', 'T', 'co.QMA/qpoly', 'NEXP/poly')
('p', 'AA', 'co.QMA/qpoly', 'NEXP/poly') => ('p', 'EA', 'co.QMA/qpoly', 'NEXP/poly')
('p', 'A', 'QSZK', 'NEXP/poly') => ('p', 'R', 'QSZK', 'NEXP/poly')
('p', 'A', 'QSZK', 'NEXP/poly') => ('p', 'AA', 'QSZK', 'NEXP/poly')
('p', 'AA', 'QSZK', 'NEXP/poly') => ('p', 'T', 'QSZK', 'NEXP/poly')
('p', 'AA', 'QSZK', 'NEXP/poly') => ('p', 'EA', 'QSZK', 'NEXP/poly')
('p', 'AA', 'PSPACE/poly', 'NEXP/poly') => ('p', 'T', 'PSPACE/poly', 'NEXP/poly')
('p', 'AA', 'PSPACE/poly', 'NEXP/poly') => ('p', 'EA', 'PSPACE/poly', 'NEXP/poly')
('p', 'AA', 'PSPACE', 'NEXP/poly') => ('p', 'T', 'PSPACE', 'NEXP/poly')
('p', 'AA', 'PSPACE', 'NEXP/poly') => ('p', 'EA', 'PSPACE', 'NEXP/poly')
('p', 'A', 'IP', 'cocap.NEXP') => ('p', 'R', 'IP', 'cocap.NEXP')
('p', 'A', 'IP', 'cocap.NEXP') => ('p', 'AA', 'IP', 'cocap.NEXP')
('p', 'A', 'co.IP', 'cocap.NEXP') => ('p', 'R', 'co.IP', 'cocap.NEXP')
('p', 'A', 'co.IP', 'cocap.NEXP') => ('p', 'AA', 'co.IP', 'cocap.NEXP')
('p', 'A', 'co.IP', 'NEXP') => ('p', 'R', 'co.IP', 'NEXP')
('p', 'A', 'co.IP', 'NEXP') => ('p', 'AA', 'co.IP', 'NEXP')
('p', 'A', 'IP', 'co.NEXP') => ('p', 'R', 'IP', 'co.NEXP')
('p', 'A', 'IP', 'co.NEXP') => ('p', 'AA', 'IP', 'co.NEXP')
('p', 'AA', 'IP', 'co.NEXP') => ('p', 'T', 'IP', 'co.NEXP')
('p', 'AA', 'IP', 'co.NEXP') => ('p', 'EA', 'IP', 'co.NEXP')
('p', 'AA', 'IP', 'cocap.NEXP') => ('p', 'T', 'IP', 'cocap.NEXP')
('p', 'AA', 'IP', 'cocap.NEXP') => ('p', 'EA', 'IP', 'cocap.NEXP')
('p', 'AA', 'co.IP', 'cocap.NEXP') => ('p', 'T', 'co.IP', 'cocap.NEXP')
('p', 'AA', 'co.IP', 'cocap.NEXP') => ('p', 'EA', 'co.IP', 'cocap.NEXP')
('p', 'AA', 'co.IP', 'NEXP') => ('p', 'T', 'co.IP', 'NEXP')
('p', 'AA', 'co.IP', 'NEXP') => ('p', 'EA', 'co.IP', 'NEXP')
('p', 'A', 'QSZK', 'cocap.NEXP') => ('p', 'R', 'QSZK', 'cocap.NEXP')
('p', 'A', 'QSZK', 'cocap.NEXP') => ('p', 'AA', 'QSZK', 'cocap.NEXP')
('p', 'A', 'QSZK', 'co.NEXP') => ('p', 'R', 'QSZK', 'co.NEXP')
('p', 'A', 'QSZK', 'co.NEXP') => ('p', 'AA', 'QSZK', 'co.NEXP')
('p', 'A', 'QSZK', 'NEXP') => ('p', 'R', 'QSZK', 'NEXP')
('p', 'A', 'QSZK', 'NEXP') => ('p', 'AA', 'QSZK', 'NEXP')
('p', 'AA', 'QSZK', 'NEXP') => ('p', 'T', 'QSZK', 'NEXP')
('p', 'AA', 'QSZK', 'NEXP') => ('p', 'EA', 'QSZK', 'NEXP')
('p', 'AA', 'QSZK', 'co.NEXP') => ('p', 'T', 'QSZK', 'co.NEXP')
('p', 'AA', 'QSZK', 'co.NEXP') => ('p', 'EA', 'QSZK', 'co.NEXP')
('p', 'AA', 'QSZK', 'cocap.NEXP') => ('p', 'T', 'QSZK', 'cocap.NEXP')
('p', 'AA', 'QSZK', 'cocap.NEXP') => ('p', 'EA', 'QSZK', 'cocap.NEXP')
('p', 'AA', 'PSPACE', 'cocap.NEXP') => ('p', 'T', 'PSPACE', 'cocap.NEXP')
('p', 'AA', 'PSPACE', 'cocap.NEXP') => ('p', 'EA', 'PSPACE', 'cocap.NEXP')
('p', 'AA', 'PSPACE', 'co.NEXP') => ('p', 'T', 'PSPACE', 'co.NEXP')
('p', 'AA', 'PSPACE', 'co.NEXP') => ('p', 'EA', 'PSPACE', 'co.NEXP')
('p', 'AA', 'PSPACE', 'NEXP') => ('p', 'T', 'PSPACE', 'NEXP')
('p', 'AA', 'PSPACE', 'NEXP') => ('p', 'EA', 'PSPACE', 'NEXP')
('p', 'A', 'co.MA', 'cocap.NEXP_plo') => ('p', 'AA', 'co.MA', 'cocap.NEXP_plo')
('p', 'A', 'MA', 'cocap.NEXP_plo') => ('p', 'AA', 'MA', 'cocap.NEXP_plo')
('p', 'A', 'MA', 'co.NEXP_plo') => ('p', 'AA', 'MA', 'co.NEXP_plo')
('p', 'A', 'co.MA', 'NEXP_plo') => ('p', 'AA', 'co.MA', 'NEXP_plo')
('p', 'A', 'co.MA', 'AH_plo') => ('p', 'AA', 'co.MA', 'AH_plo')
('p', 'A', 'co.MA', 'cocap.AH_plo') => ('p', 'AA', 'co.MA', 'cocap.AH_plo')
('p', 'A', 'MA', 'cocap.AH_plo') => ('p', 'AA', 'MA', 'cocap.AH_plo')
('p', 'A', 'MA', 'co.AH_plo') => ('p', 'AA', 'MA', 'co.AH_plo')
('p', 'AA', 'MA', 'co.AH_plo') => ('p', 'T', 'MA', 'co.AH_plo')
('p', 'AA', 'MA', 'co.AH_plo') => ('p', 'EA', 'MA', 'co.AH_plo')
('p', 'AA', 'MA', 'cocap.AH_plo') => ('p', 'T', 'MA', 'cocap.AH_plo')
('p', 'AA', 'MA', 'cocap.AH_plo') => ('p', 'EA', 'MA', 'cocap.AH_plo')
('p', 'AA', 'co.MA', 'cocap.AH_plo') => ('p', 'T', 'co.MA', 'cocap.AH_plo')
('p', 'AA', 'co.MA', 'cocap.AH_plo') => ('p', 'EA', 'co.MA', 'cocap.AH_plo')
('p', 'AA', 'co.MA', 'AH_plo') => ('p', 'T', 'co.MA', 'AH_plo')
('p', 'AA', 'co.MA', 'AH_plo') => ('p', 'EA', 'co.MA', 'AH_plo')
('p', 'AA', 'co.MA', 'NEXP_plo') => ('p', 'T', 'co.MA', 'NEXP_plo')
('p', 'AA', 'co.MA', 'NEXP_plo') => ('p', 'EA', 'co.MA', 'NEXP_plo')
('p', 'AA', 'co.MA', 'cocap.NEXP_plo') => ('p', 'T', 'co.MA', 'cocap.NEXP_plo')
('p', 'AA', 'co.MA', 'cocap.NEXP_plo') => ('p', 'EA', 'co.MA', 'cocap.NEXP_plo')
('p', 'AA', 'MA', 'cocap.NEXP_plo') => ('p', 'T', 'MA', 'cocap.NEXP_plo')
('p', 'AA', 'MA', 'cocap.NEXP_plo') => ('p', 'EA', 'MA', 'cocap.NEXP_plo')
('p', 'AA', 'MA', 'co.NEXP_plo') => ('p', 'T', 'MA', 'co.NEXP_plo')
('p', 'AA', 'MA', 'co.NEXP_plo') => ('p', 'EA', 'MA', 'co.NEXP_plo')
('p', 'A', 'PSPACE', 'co.NEXP_plo') => ('p', 'R', 'PSPACE', 'co.NEXP_plo')
('p', 'A', 'PSPACE', 'co.NEXP_plo') => ('p', 'AA', 'PSPACE', 'co.NEXP_plo')
('p', 'A', 'PSPACE', 'NEXP_plo') => ('p', 'R', 'PSPACE', 'NEXP_plo')
('p', 'A', 'PSPACE', 'NEXP_plo') => ('p', 'AA', 'PSPACE', 'NEXP_plo')
('p', 'A', 'PSPACE', 'AH') => ('p', 'R', 'PSPACE', 'AH')
('p', 'A', 'PSPACE', 'AH') => ('p', 'AA', 'PSPACE', 'AH')
('p', 'A', 'PP', 'AH') => ('p', 'R', 'PP', 'AH')
('p', 'A', 'PP', 'AH') => ('p', 'AA', 'PP', 'AH')
('p', 'AA', 'PP', 'AH') => ('p', 'T', 'PP', 'AH')
('p', 'AA', 'PP', 'AH') => ('p', 'EA', 'PP', 'AH')
('p', 'A', 'QSZK', 'AH') => ('p', 'R', 'QSZK', 'AH')
('p', 'A', 'QSZK', 'AH') => ('p', 'AA', 'QSZK', 'AH')
('p', 'AA', 'QSZK', 'AH') => ('p', 'T', 'QSZK', 'AH')
('p', 'AA', 'QSZK', 'AH') => ('p', 'EA', 'QSZK', 'AH')
('p', 'AA', 'PSPACE', 'AH') => ('p', 'T', 'PSPACE', 'AH')
('p', 'AA', 'PSPACE', 'AH') => ('p', 'EA', 'PSPACE', 'AH')
('p', 'A', 'PP', 'NEXP_plo') => ('p', 'R', 'PP', 'NEXP_plo')
('p', 'A', 'PP', 'NEXP_plo') => ('p', 'AA', 'PP', 'NEXP_plo')
('p', 'A', 'PP', 'co.NEXP_plo') => ('p', 'R', 'PP', 'co.NEXP_plo')
('p', 'A', 'PP', 'co.NEXP_plo') => ('p', 'AA', 'PP', 'co.NEXP_plo')
('p', 'A', 'PP', 'cocap.NEXP_plo') => ('p', 'R', 'PP', 'cocap.NEXP_plo')
('p', 'A', 'PP', 'cocap.NEXP_plo') => ('p', 'AA', 'PP', 'cocap.NEXP_plo')
('p', 'A', 'PP', 'cocap.AH_plo') => ('p', 'R', 'PP', 'cocap.AH_plo')
('p', 'A', 'PP', 'cocap.AH_plo') => ('p', 'AA', 'PP', 'cocap.AH_plo')
('p', 'A', 'PP', 'co.AH_plo') => ('p', 'R', 'PP', 'co.AH_plo')
('p', 'A', 'PP', 'co.AH_plo') => ('p', 'AA', 'PP', 'co.AH_plo')
('p', 'A', 'PP', 'AH_plo') => ('p', 'R', 'PP', 'AH_plo')
('p', 'A', 'PP', 'AH_plo') => ('p', 'AA', 'PP', 'AH_plo')
('p', 'AA', 'PP', 'AH_plo') => ('p', 'T', 'PP', 'AH_plo')
('p', 'AA', 'PP', 'AH_plo') => ('p', 'EA', 'PP', 'AH_plo')
('p', 'AA', 'PP', 'co.AH_plo') => ('p', 'T', 'PP', 'co.AH_plo')
('p', 'AA', 'PP', 'co.AH_plo') => ('p', 'EA', 'PP', 'co.AH_plo')
('p', 'AA', 'PP', 'cocap.AH_plo') => ('p', 'T', 'PP', 'cocap.AH_plo')
('p', 'AA', 'PP', 'cocap.AH_plo') => ('p', 'EA', 'PP', 'cocap.AH_plo')
('p', 'AA', 'PP', 'cocap.NEXP_plo') => ('p', 'T', 'PP', 'cocap.NEXP_plo')
('p', 'AA', 'PP', 'cocap.NEXP_plo') => ('p', 'EA', 'PP', 'cocap.NEXP_plo')
('p', 'AA', 'PP', 'co.NEXP_plo') => ('p', 'T', 'PP', 'co.NEXP_plo')
('p', 'AA', 'PP', 'co.NEXP_plo') => ('p', 'EA', 'PP', 'co.NEXP_plo')
('p', 'AA', 'PP', 'NEXP_plo') => ('p', 'T', 'PP', 'NEXP_plo')
('p', 'AA', 'PP', 'NEXP_plo') => ('p', 'EA', 'PP', 'NEXP_plo')
('p', 'A', 'co.SBP', 'NEXP_plo') => ('p', 'AA', 'co.SBP', 'NEXP_plo')
('p', 'A', 'co.SBP', 'cocap.NEXP_plo') => ('p', 'AA', 'co.SBP', 'cocap.NEXP_plo')
('p', 'A', 'SBP', 'cocap.NEXP_plo') => ('p', 'AA', 'SBP', 'cocap.NEXP_plo')
('p', 'A', 'SBP', 'co.NEXP_plo') => ('p', 'AA', 'SBP', 'co.NEXP_plo')
('p', 'A', 'SBP', 'co.AH_plo') => ('p', 'AA', 'SBP', 'co.AH_plo')
('p', 'A', 'SBP', 'cocap.AH_plo') => ('p', 'AA', 'SBP', 'cocap.AH_plo')
('p', 'A', 'co.SBP', 'cocap.AH_plo') => ('p', 'AA', 'co.SBP', 'cocap.AH_plo')
('p', 'A', 'co.SBP', 'AH_plo') => ('p', 'AA', 'co.SBP', 'AH_plo')
('p', 'AA', 'co.SBP', 'AH_plo') => ('p', 'T', 'co.SBP', 'AH_plo')
('p', 'AA', 'co.SBP', 'AH_plo') => ('p', 'EA', 'co.SBP', 'AH_plo')
('p', 'AA', 'co.SBP', 'cocap.AH_plo') => ('p', 'T', 'co.SBP', 'cocap.AH_plo')
('p', 'AA', 'co.SBP', 'cocap.AH_plo') => ('p', 'EA', 'co.SBP', 'cocap.AH_plo')
('p', 'AA', 'SBP', 'cocap.AH_plo') => ('p', 'T', 'SBP', 'cocap.AH_plo')
('p', 'AA', 'SBP', 'cocap.AH_plo') => ('p', 'EA', 'SBP', 'cocap.AH_plo')
('p', 'AA', 'SBP', 'co.AH_plo') => ('p', 'T', 'SBP', 'co.AH_plo')
('p', 'AA', 'SBP', 'co.AH_plo') => ('p', 'EA', 'SBP', 'co.AH_plo')
('p', 'AA', 'SBP', 'co.NEXP_plo') => ('p', 'T', 'SBP', 'co.NEXP_plo')
('p', 'AA', 'SBP', 'co.NEXP_plo') => ('p', 'EA', 'SBP', 'co.NEXP_plo')
('p', 'AA', 'SBP', 'cocap.NEXP_plo') => ('p', 'T', 'SBP', 'cocap.NEXP_plo')
('p', 'AA', 'SBP', 'cocap.NEXP_plo') => ('p', 'EA', 'SBP', 'cocap.NEXP_plo')
('p', 'AA', 'co.SBP', 'cocap.NEXP_plo') => ('p', 'T', 'co.SBP', 'cocap.NEXP_plo')
('p', 'AA', 'co.SBP', 'cocap.NEXP_plo') => ('p', 'EA', 'co.SBP', 'cocap.NEXP_plo')
('p', 'AA', 'co.SBP', 'NEXP_plo') => ('p', 'T', 'co.SBP', 'NEXP_plo')
('p', 'AA', 'co.SBP', 'NEXP_plo') => ('p', 'EA', 'co.SBP', 'NEXP_plo')
('p', 'A', 'QSZK', 'NEXP_plo') => ('p', 'R', 'QSZK', 'NEXP_plo')
('p', 'A', 'QSZK', 'NEXP_plo') => ('p', 'AA', 'QSZK', 'NEXP_plo')
('p', 'A', 'QSZK', 'co.NEXP_plo') => ('p', 'R', 'QSZK', 'co.NEXP_plo')
('p', 'A', 'QSZK', 'co.NEXP_plo') => ('p', 'AA', 'QSZK', 'co.NEXP_plo')
('p', 'A', 'QSZK', 'cocap.NEXP_plo') => ('p', 'R', 'QSZK', 'cocap.NEXP_plo')
('p', 'A', 'QSZK', 'cocap.NEXP_plo') => ('p', 'AA', 'QSZK', 'cocap.NEXP_plo')
('p', 'A', 'QSZK', 'cocap.AH_plo') => ('p', 'R', 'QSZK', 'cocap.AH_plo')
('p', 'A', 'QSZK', 'cocap.AH_plo') => ('p', 'AA', 'QSZK', 'cocap.AH_plo')
('p', 'A', 'QSZK', 'co.AH_plo') => ('p', 'R', 'QSZK', 'co.AH_plo')
('p', 'A', 'QSZK', 'co.AH_plo') => ('p', 'AA', 'QSZK', 'co.AH_plo')
('p', 'A', 'QSZK', 'AH_plo') => ('p', 'R', 'QSZK', 'AH_plo')
('p', 'A', 'QSZK', 'AH_plo') => ('p', 'AA', 'QSZK', 'AH_plo')
('p', 'AA', 'QSZK', 'AH_plo') => ('p', 'T', 'QSZK', 'AH_plo')
('p', 'AA', 'QSZK', 'AH_plo') => ('p', 'EA', 'QSZK', 'AH_plo')
('p', 'AA', 'QSZK', 'co.AH_plo') => ('p', 'T', 'QSZK', 'co.AH_plo')
('p', 'AA', 'QSZK', 'co.AH_plo') => ('p', 'EA', 'QSZK', 'co.AH_plo')
('p', 'AA', 'QSZK', 'cocap.AH_plo') => ('p', 'T', 'QSZK', 'cocap.AH_plo')
('p', 'AA', 'QSZK', 'cocap.AH_plo') => ('p', 'EA', 'QSZK', 'cocap.AH_plo')
('p', 'AA', 'QSZK', 'cocap.NEXP_plo') => ('p', 'T', 'QSZK', 'cocap.NEXP_plo')
('p', 'AA', 'QSZK', 'cocap.NEXP_plo') => ('p', 'EA', 'QSZK', 'cocap.NEXP_plo')
('p', 'AA', 'QSZK', 'co.NEXP_plo') => ('p', 'T', 'QSZK', 'co.NEXP_plo')
('p', 'AA', 'QSZK', 'co.NEXP_plo') => ('p', 'EA', 'QSZK', 'co.NEXP_plo')
('p', 'AA', 'QSZK', 'NEXP_plo') => ('p', 'T', 'QSZK', 'NEXP_plo')
('p', 'AA', 'QSZK', 'NEXP_plo') => ('p', 'EA', 'QSZK', 'NEXP_plo')
('p', 'A', 'co.AM', 'NEXP_plo') => ('p', 'AA', 'co.AM', 'NEXP_plo')
('p', 'A', 'co.AM', 'cocap.NEXP_plo') => ('p', 'AA', 'co.AM', 'cocap.NEXP_plo')
('p', 'A', 'AM', 'cocap.NEXP_plo') => ('p', 'AA', 'AM', 'cocap.NEXP_plo')
('p', 'A', 'AM', 'co.NEXP_plo') => ('p', 'AA', 'AM', 'co.NEXP_plo')
('p', 'A', 'AM', 'co.AH_plo') => ('p', 'AA', 'AM', 'co.AH_plo')
('p', 'A', 'AM', 'cocap.AH_plo') => ('p', 'AA', 'AM', 'cocap.AH_plo')
('p', 'A', 'co.AM', 'cocap.AH_plo') => ('p', 'AA', 'co.AM', 'cocap.AH_plo')
('p', 'A', 'co.AM', 'AH_plo') => ('p', 'AA', 'co.AM', 'AH_plo')
('p', 'AA', 'co.AM', 'AH_plo') => ('p', 'T', 'co.AM', 'AH_plo')
('p', 'AA', 'co.AM', 'AH_plo') => ('p', 'EA', 'co.AM', 'AH_plo')
('p', 'AA', 'co.AM', 'cocap.AH_plo') => ('p', 'T', 'co.AM', 'cocap.AH_plo')
('p', 'AA', 'co.AM', 'cocap.AH_plo') => ('p', 'EA', 'co.AM', 'cocap.AH_plo')
('p', 'AA', 'AM', 'cocap.AH_plo') => ('p', 'T', 'AM', 'cocap.AH_plo')
('p', 'AA', 'AM', 'cocap.AH_plo') => ('p', 'EA', 'AM', 'cocap.AH_plo')
('p', 'AA', 'AM', 'co.AH_plo') => ('p', 'T', 'AM', 'co.AH_plo')
('p', 'AA', 'AM', 'co.AH_plo') => ('p', 'EA', 'AM', 'co.AH_plo')
('p', 'AA', 'AM', 'co.NEXP_plo') => ('p', 'T', 'AM', 'co.NEXP_plo')
('p', 'AA', 'AM', 'co.NEXP_plo') => ('p', 'EA', 'AM', 'co.NEXP_plo')
('p', 'AA', 'AM', 'cocap.NEXP_plo') => ('p', 'T', 'AM', 'cocap.NEXP_plo')
('p', 'AA', 'AM', 'cocap.NEXP_plo') => ('p', 'EA', 'AM', 'cocap.NEXP_plo')
('p', 'AA', 'co.AM', 'cocap.NEXP_plo') => ('p', 'T', 'co.AM', 'cocap.NEXP_plo')
('p', 'AA', 'co.AM', 'cocap.NEXP_plo') => ('p', 'EA', 'co.AM', 'cocap.NEXP_plo')
('p', 'AA', 'co.AM', 'NEXP_plo') => ('p', 'T', 'co.AM', 'NEXP_plo')
('p', 'AA', 'co.AM', 'NEXP_plo') => ('p', 'EA', 'co.AM', 'NEXP_plo')
('p', 'A', 'PSPACE', 'AH_plo') => ('p', 'R', 'PSPACE', 'AH_plo')
('p', 'A', 'PSPACE', 'AH_plo') => ('p', 'AA', 'PSPACE', 'AH_plo')
('p', 'A', 'PSPACE', 'co.AH_plo') => ('p', 'R', 'PSPACE', 'co.AH_plo')
('p', 'A', 'PSPACE', 'co.AH_plo') => ('p', 'AA', 'PSPACE', 'co.AH_plo')
('p', 'A', 'PSPACE', 'cocap.AH_plo') => ('p', 'R', 'PSPACE', 'cocap.AH_plo')
('p', 'A', 'PSPACE', 'cocap.AH_plo') => ('p', 'AA', 'PSPACE', 'cocap.AH_plo')
('p', 'A', 'IP', 'cocap.AH_plo') => ('p', 'R', 'IP', 'cocap.AH_plo')
('p', 'A', 'IP', 'cocap.AH_plo') => ('p', 'AA', 'IP', 'cocap.AH_plo')
('p', 'A', 'co.IP', 'cocap.AH_plo') => ('p', 'R', 'co.IP', 'cocap.AH_plo')
('p', 'A', 'co.IP', 'cocap.AH_plo') => ('p', 'AA', 'co.IP', 'cocap.AH_plo')
('p', 'A', 'co.IP', 'AH_plo') => ('p', 'R', 'co.IP', 'AH_plo')
('p', 'A', 'co.IP', 'AH_plo') => ('p', 'AA', 'co.IP', 'AH_plo')
('p', 'A', 'IP', 'co.AH_plo') => ('p', 'R', 'IP', 'co.AH_plo')
('p', 'A', 'IP', 'co.AH_plo') => ('p', 'AA', 'IP', 'co.AH_plo')
('p', 'AA', 'IP', 'co.AH_plo') => ('p', 'T', 'IP', 'co.AH_plo')
('p', 'AA', 'IP', 'co.AH_plo') => ('p', 'EA', 'IP', 'co.AH_plo')
('p', 'AA', 'IP', 'cocap.AH_plo') => ('p', 'T', 'IP', 'cocap.AH_plo')
('p', 'AA', 'IP', 'cocap.AH_plo') => ('p', 'EA', 'IP', 'cocap.AH_plo')
('p', 'AA', 'co.IP', 'cocap.AH_plo') => ('p', 'T', 'co.IP', 'cocap.AH_plo')
('p', 'AA', 'co.IP', 'cocap.AH_plo') => ('p', 'EA', 'co.IP', 'cocap.AH_plo')
('p', 'AA', 'co.IP', 'AH_plo') => ('p', 'T', 'co.IP', 'AH_plo')
('p', 'AA', 'co.IP', 'AH_plo') => ('p', 'EA', 'co.IP', 'AH_plo')
('p', 'AA', 'PSPACE', 'cocap.AH_plo') => ('p', 'T', 'PSPACE', 'cocap.AH_plo')
('p', 'AA', 'PSPACE', 'cocap.AH_plo') => ('p', 'EA', 'PSPACE', 'cocap.AH_plo')
('p', 'AA', 'PSPACE', 'co.AH_plo') => ('p', 'T', 'PSPACE', 'co.AH_plo')
('p', 'AA', 'PSPACE', 'co.AH_plo') => ('p', 'EA', 'PSPACE', 'co.AH_plo')
('p', 'AA', 'PSPACE', 'AH_plo') => ('p', 'T', 'PSPACE', 'AH_plo')
('p', 'AA', 'PSPACE', 'AH_plo') => ('p', 'EA', 'PSPACE', 'AH_plo')
('p', 'A', 'co.IP', 'NEXP_plo') => ('p', 'R', 'co.IP', 'NEXP_plo')
('p', 'A', 'co.IP', 'NEXP_plo') => ('p', 'AA', 'co.IP', 'NEXP_plo')
('p', 'A', 'co.IP', 'cocap.NEXP_plo') => ('p', 'R', 'co.IP', 'cocap.NEXP_plo')
('p', 'A', 'co.IP', 'cocap.NEXP_plo') => ('p', 'AA', 'co.IP', 'cocap.NEXP_plo')
('p', 'A', 'IP', 'cocap.NEXP_plo') => ('p', 'R', 'IP', 'cocap.NEXP_plo')
('p', 'A', 'IP', 'cocap.NEXP_plo') => ('p', 'AA', 'IP', 'cocap.NEXP_plo')
('p', 'A', 'IP', 'co.NEXP_plo') => ('p', 'R', 'IP', 'co.NEXP_plo')
('p', 'A', 'IP', 'co.NEXP_plo') => ('p', 'AA', 'IP', 'co.NEXP_plo')
('p', 'AA', 'IP', 'co.NEXP_plo') => ('p', 'T', 'IP', 'co.NEXP_plo')
('p', 'AA', 'IP', 'co.NEXP_plo') => ('p', 'EA', 'IP', 'co.NEXP_plo')
('p', 'AA', 'IP', 'cocap.NEXP_plo') => ('p', 'T', 'IP', 'cocap.NEXP_plo')
('p', 'AA', 'IP', 'cocap.NEXP_plo') => ('p', 'EA', 'IP', 'cocap.NEXP_plo')
('p', 'AA', 'co.IP', 'cocap.NEXP_plo') => ('p', 'T', 'co.IP', 'cocap.NEXP_plo')
('p', 'AA', 'co.IP', 'cocap.NEXP_plo') => ('p', 'EA', 'co.IP', 'cocap.NEXP_plo')
('p', 'AA', 'co.IP', 'NEXP_plo') => ('p', 'T', 'co.IP', 'NEXP_plo')
('p', 'AA', 'co.IP', 'NEXP_plo') => ('p', 'EA', 'co.IP', 'NEXP_plo')
('p', 'AA', 'PSPACE', 'NEXP_plo') => ('p', 'T', 'PSPACE', 'NEXP_plo')
('p', 'AA', 'PSPACE', 'NEXP_plo') => ('p', 'EA', 'PSPACE', 'NEXP_plo')
('p', 'AA', 'PSPACE', 'co.NEXP_plo') => ('p', 'T', 'PSPACE', 'co.NEXP_plo')
('p', 'AA', 'PSPACE', 'co.NEXP_plo') => ('p', 'EA', 'PSPACE', 'co.NEXP_plo')
('p', 'AA', 'PSPACE', 'cocap.NEXP_plo') => ('p', 'T', 'PSPACE', 'cocap.NEXP_plo')
('p', 'AA', 'PSPACE', 'cocap.NEXP_plo') => ('p', 'EA', 'PSPACE', 'cocap.NEXP_plo')
('d', 'R', 'cocap.NEXP_plo', 'IP') => ('d', 'A', 'cocap.NEXP_plo', 'IP')
('d', 'R', 'cocap.NEXP_plo', 'co.IP') => ('d', 'A', 'cocap.NEXP_plo', 'co.IP')
('d', 'R', 'cocap.NEXP_plo', 'cocap.IP') => ('d', 'A', 'cocap.NEXP_plo', 'cocap.IP')
('p', 'A', 'SZK', 'EXP_plo') => ('-d', 'A', 'SZK', 'EXP_plo')
('p', 'A', 'SZK', 'EXP_plo') => ('p', 'R', 'SZK', 'EXP_plo')
('p', 'A', 'SZK', 'EXP_plo') => ('p', 'AA', 'SZK', 'EXP_plo')
('p', 'A', 'cocap.NISZK', 'EXP_plo') => ('-d', 'A', 'cocap.NISZK', 'EXP_plo')
('p', 'A', 'cocap.NISZK', 'EXP_plo') => ('p', 'R', 'cocap.NISZK', 'EXP_plo')
('p', 'A', 'cocap.NISZK', 'EXP_plo') => ('p', 'AA', 'cocap.NISZK', 'EXP_plo')
('p', 'AA', 'cocap.NISZK', 'EXP_plo') => ('-d', 'AA', 'cocap.NISZK', 'EXP_plo')
('p', 'AA', 'cocap.NISZK', 'EXP_plo') => ('p', 'T', 'cocap.NISZK', 'EXP_plo')
('p', 'AA', 'cocap.NISZK', 'EXP_plo') => ('p', 'EA', 'cocap.NISZK', 'EXP_plo')
('p', 'EA', 'cocap.NISZK', 'EXP_plo') => ('-d', 'EA', 'cocap.NISZK', 'EXP_plo')
('p', 'T', 'cocap.NISZK', 'EXP_plo') => ('-d', 'T', 'cocap.NISZK', 'EXP_plo')
('p', 'R', 'cocap.NISZK', 'EXP_plo') => ('-d', 'R', 'cocap.NISZK', 'EXP_plo')
('p', 'A', 'co.NISZK', 'EXP_plo') => ('-d', 'A', 'co.NISZK', 'EXP_plo')
('p', 'A', 'co.NISZK', 'EXP_plo') => ('p', 'R', 'co.NISZK', 'EXP_plo')
('p', 'A', 'co.NISZK', 'EXP_plo') => ('p', 'AA', 'co.NISZK', 'EXP_plo')
('p', 'A', 'NISZK', 'EXP_plo') => ('-d', 'A', 'NISZK', 'EXP_plo')
('p', 'A', 'NISZK', 'EXP_plo') => ('p', 'R', 'NISZK', 'EXP_plo')
('p', 'A', 'NISZK', 'EXP_plo') => ('p', 'AA', 'NISZK', 'EXP_plo')
('p', 'AA', 'NISZK', 'EXP_plo') => ('-d', 'AA', 'NISZK', 'EXP_plo')
('p', 'AA', 'NISZK', 'EXP_plo') => ('p', 'T', 'NISZK', 'EXP_plo')
('p', 'AA', 'NISZK', 'EXP_plo') => ('p', 'EA', 'NISZK', 'EXP_plo')
('p', 'AA', 'co.NISZK', 'EXP_plo') => ('-d', 'AA', 'co.NISZK', 'EXP_plo')
('p', 'AA', 'co.NISZK', 'EXP_plo') => ('p', 'T', 'co.NISZK', 'EXP_plo')
('p', 'AA', 'co.NISZK', 'EXP_plo') => ('p', 'EA', 'co.NISZK', 'EXP_plo')
('p', 'EA', 'co.NISZK', 'EXP_plo') => ('-d', 'EA', 'co.NISZK', 'EXP_plo')
('p', 'EA', 'NISZK', 'EXP_plo') => ('-d', 'EA', 'NISZK', 'EXP_plo')
('p', 'T', 'co.NISZK', 'EXP_plo') => ('-d', 'T', 'co.NISZK', 'EXP_plo')
('p', 'T', 'NISZK', 'EXP_plo') => ('-d', 'T', 'NISZK', 'EXP_plo')
('p', 'R', 'NISZK', 'EXP_plo') => ('-d', 'R', 'NISZK', 'EXP_plo')
('p', 'R', 'co.NISZK', 'EXP_plo') => ('-d', 'R', 'co.NISZK', 'EXP_plo')
('p', 'AA', 'SZK', 'EXP_plo') => ('-d', 'AA', 'SZK', 'EXP_plo')
('p', 'AA', 'SZK', 'EXP_plo') => ('p', 'T', 'SZK', 'EXP_plo')
('p', 'AA', 'SZK', 'EXP_plo') => ('p', 'EA', 'SZK', 'EXP_plo')
('p', 'EA', 'SZK', 'EXP_plo') => ('-d', 'EA', 'SZK', 'EXP_plo')
('p', 'T', 'SZK', 'EXP_plo') => ('-d', 'T', 'SZK', 'EXP_plo')
('p', 'R', 'SZK', 'EXP_plo') => ('-d', 'R', 'SZK', 'EXP_plo')
('p', 'A', 'QRG(2)', 'EXP_plo') => ('-d', 'A', 'QRG(2)', 'EXP_plo')
('p', 'A', 'QRG(2)', 'EXP_plo') => ('p', 'R', 'QRG(2)', 'EXP_plo')
('p', 'A', 'QRG(2)', 'EXP_plo') => ('p', 'AA', 'QRG(2)', 'EXP_plo')
('p', 'AA', 'QRG(2)', 'EXP_plo') => ('-d', 'AA', 'QRG(2)', 'EXP_plo')
('p', 'AA', 'QRG(2)', 'EXP_plo') => ('p', 'T', 'QRG(2)', 'EXP_plo')
('p', 'AA', 'QRG(2)', 'EXP_plo') => ('p', 'EA', 'QRG(2)', 'EXP_plo')
('p', 'EA', 'QRG(2)', 'EXP_plo') => ('-d', 'EA', 'QRG(2)', 'EXP_plo')
('p', 'T', 'QRG(2)', 'EXP_plo') => ('-d', 'T', 'QRG(2)', 'EXP_plo')
('p', 'R', 'QRG(2)', 'EXP_plo') => ('-d', 'R', 'QRG(2)', 'EXP_plo')
('p', 'A', 'NP', 'EXP_plo') => ('-d', 'A', 'NP', 'EXP_plo')
('p', 'A', 'NP', 'EXP_plo') => ('p', 'AA', 'NP', 'EXP_plo')
('p', 'A', 'co.NP', 'EXP_plo') => ('-d', 'A', 'co.NP', 'EXP_plo')
('p', 'A', 'co.NP', 'EXP_plo') => ('p', 'AA', 'co.NP', 'EXP_plo')
('p', 'A', 'cocap.NP', 'EXP_plo') => ('-d', 'A', 'cocap.NP', 'EXP_plo')
('p', 'A', 'cocap.NP', 'EXP_plo') => ('p', 'AA', 'cocap.NP', 'EXP_plo')
('d', 'A', 'EXP_plo', 'BQP') => ('-p', 'A', 'EXP_plo', 'BQP')
('p', 'AA', 'cocap.NP', 'EXP_plo') => ('-d', 'AA', 'cocap.NP', 'EXP_plo')
('p', 'AA', 'cocap.NP', 'EXP_plo') => ('p', 'T', 'cocap.NP', 'EXP_plo')
('p', 'AA', 'cocap.NP', 'EXP_plo') => ('p', 'EA', 'cocap.NP', 'EXP_plo')
('p', 'EA', 'cocap.NP', 'EXP_plo') => ('-d', 'EA', 'cocap.NP', 'EXP_plo')
('p', 'T', 'cocap.NP', 'EXP_plo') => ('-d', 'T', 'cocap.NP', 'EXP_plo')
('d', 'A', 'EXP_plo', 'BQP/mpoly') => ('-p', 'A', 'EXP_plo', 'BQP/mpoly')
('d', 'A', 'EXP_plo', 'BQP/qpoly') => ('-p', 'A', 'EXP_plo', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'EXP_plo') => ('-d', 'AA', 'co.NP', 'EXP_plo')
('p', 'AA', 'co.NP', 'EXP_plo') => ('p', 'T', 'co.NP', 'EXP_plo')
('p', 'AA', 'co.NP', 'EXP_plo') => ('p', 'EA', 'co.NP', 'EXP_plo')
('p', 'AA', 'NP', 'EXP_plo') => ('-d', 'AA', 'NP', 'EXP_plo')
('p', 'AA', 'NP', 'EXP_plo') => ('p', 'T', 'NP', 'EXP_plo')
('p', 'AA', 'NP', 'EXP_plo') => ('p', 'EA', 'NP', 'EXP_plo')
('p', 'EA', 'NP', 'EXP_plo') => ('-d', 'EA', 'NP', 'EXP_plo')
('p', 'EA', 'co.NP', 'EXP_plo') => ('-d', 'EA', 'co.NP', 'EXP_plo')
('p', 'T', 'NP', 'EXP_plo') => ('-d', 'T', 'NP', 'EXP_plo')
('p', 'T', 'co.NP', 'EXP_plo') => ('-d', 'T', 'co.NP', 'EXP_plo')
('p', 'A', 'co.MA', 'EXP_plo') => ('-d', 'A', 'co.MA', 'EXP_plo')
('p', 'A', 'co.MA', 'EXP_plo') => ('p', 'AA', 'co.MA', 'EXP_plo')
('p', 'A', 'MA', 'EXP_plo') => ('-d', 'A', 'MA', 'EXP_plo')
('p', 'A', 'MA', 'EXP_plo') => ('p', 'AA', 'MA', 'EXP_plo')
('p', 'A', 'cocap.MA', 'EXP_plo') => ('-d', 'A', 'cocap.MA', 'EXP_plo')
('p', 'A', 'cocap.MA', 'EXP_plo') => ('p', 'AA', 'cocap.MA', 'EXP_plo')
('p', 'AA', 'cocap.MA', 'EXP_plo') => ('-d', 'AA', 'cocap.MA', 'EXP_plo')
('p', 'AA', 'cocap.MA', 'EXP_plo') => ('p', 'T', 'cocap.MA', 'EXP_plo')
('p', 'AA', 'cocap.MA', 'EXP_plo') => ('p', 'EA', 'cocap.MA', 'EXP_plo')
('p', 'EA', 'cocap.MA', 'EXP_plo') => ('-d', 'EA', 'cocap.MA', 'EXP_plo')
('p', 'T', 'cocap.MA', 'EXP_plo') => ('-d', 'T', 'cocap.MA', 'EXP_plo')
('p', 'AA', 'MA', 'EXP_plo') => ('-d', 'AA', 'MA', 'EXP_plo')
('p', 'AA', 'MA', 'EXP_plo') => ('p', 'T', 'MA', 'EXP_plo')
('p', 'AA', 'MA', 'EXP_plo') => ('p', 'EA', 'MA', 'EXP_plo')
('p', 'AA', 'co.MA', 'EXP_plo') => ('-d', 'AA', 'co.MA', 'EXP_plo')
('p', 'AA', 'co.MA', 'EXP_plo') => ('p', 'T', 'co.MA', 'EXP_plo')
('p', 'AA', 'co.MA', 'EXP_plo') => ('p', 'EA', 'co.MA', 'EXP_plo')
('p', 'EA', 'co.MA', 'EXP_plo') => ('-d', 'EA', 'co.MA', 'EXP_plo')
('p', 'EA', 'MA', 'EXP_plo') => ('-d', 'EA', 'MA', 'EXP_plo')
('p', 'T', 'co.MA', 'EXP_plo') => ('-d', 'T', 'co.MA', 'EXP_plo')
('p', 'T', 'MA', 'EXP_plo') => ('-d', 'T', 'MA', 'EXP_plo')
('p', 'A', 'SBP', 'EXP_plo') => ('-d', 'A', 'SBP', 'EXP_plo')
('p', 'A', 'SBP', 'EXP_plo') => ('p', 'AA', 'SBP', 'EXP_plo')
('p', 'A', 'co.SBP', 'EXP_plo') => ('-d', 'A', 'co.SBP', 'EXP_plo')
('p', 'A', 'co.SBP', 'EXP_plo') => ('p', 'AA', 'co.SBP', 'EXP_plo')
('p', 'A', 'cocap.SBP', 'EXP_plo') => ('-d', 'A', 'cocap.SBP', 'EXP_plo')
('p', 'A', 'cocap.SBP', 'EXP_plo') => ('p', 'AA', 'cocap.SBP', 'EXP_plo')
('p', 'AA', 'cocap.SBP', 'EXP_plo') => ('-d', 'AA', 'cocap.SBP', 'EXP_plo')
('p', 'AA', 'cocap.SBP', 'EXP_plo') => ('p', 'T', 'cocap.SBP', 'EXP_plo')
('p', 'AA', 'cocap.SBP', 'EXP_plo') => ('p', 'EA', 'cocap.SBP', 'EXP_plo')
('p', 'EA', 'cocap.SBP', 'EXP_plo') => ('-d', 'EA', 'cocap.SBP', 'EXP_plo')
('p', 'T', 'cocap.SBP', 'EXP_plo') => ('-d', 'T', 'cocap.SBP', 'EXP_plo')
('p', 'AA', 'co.SBP', 'EXP_plo') => ('-d', 'AA', 'co.SBP', 'EXP_plo')
('p', 'AA', 'co.SBP', 'EXP_plo') => ('p', 'T', 'co.SBP', 'EXP_plo')
('p', 'AA', 'co.SBP', 'EXP_plo') => ('p', 'EA', 'co.SBP', 'EXP_plo')
('p', 'AA', 'SBP', 'EXP_plo') => ('-d', 'AA', 'SBP', 'EXP_plo')
('p', 'AA', 'SBP', 'EXP_plo') => ('p', 'T', 'SBP', 'EXP_plo')
('p', 'AA', 'SBP', 'EXP_plo') => ('p', 'EA', 'SBP', 'EXP_plo')
('p', 'EA', 'SBP', 'EXP_plo') => ('-d', 'EA', 'SBP', 'EXP_plo')
('p', 'EA', 'co.SBP', 'EXP_plo') => ('-d', 'EA', 'co.SBP', 'EXP_plo')
('p', 'T', 'SBP', 'EXP_plo') => ('-d', 'T', 'SBP', 'EXP_plo')
('p', 'T', 'co.SBP', 'EXP_plo') => ('-d', 'T', 'co.SBP', 'EXP_plo')
('p', 'A', 'AM', 'EXP_plo') => ('-d', 'A', 'AM', 'EXP_plo')
('p', 'A', 'AM', 'EXP_plo') => ('p', 'AA', 'AM', 'EXP_plo')
('p', 'A', 'co.AM', 'EXP_plo') => ('-d', 'A', 'co.AM', 'EXP_plo')
('p', 'A', 'co.AM', 'EXP_plo') => ('p', 'AA', 'co.AM', 'EXP_plo')
('p', 'A', 'cocap.AM', 'EXP_plo') => ('-d', 'A', 'cocap.AM', 'EXP_plo')
('p', 'A', 'cocap.AM', 'EXP_plo') => ('p', 'AA', 'cocap.AM', 'EXP_plo')
('p', 'AA', 'cocap.AM', 'EXP_plo') => ('-d', 'AA', 'cocap.AM', 'EXP_plo')
('p', 'AA', 'cocap.AM', 'EXP_plo') => ('p', 'T', 'cocap.AM', 'EXP_plo')
('p', 'AA', 'cocap.AM', 'EXP_plo') => ('p', 'EA', 'cocap.AM', 'EXP_plo')
('p', 'EA', 'cocap.AM', 'EXP_plo') => ('-d', 'EA', 'cocap.AM', 'EXP_plo')
('p', 'T', 'cocap.AM', 'EXP_plo') => ('-d', 'T', 'cocap.AM', 'EXP_plo')
('p', 'AA', 'co.AM', 'EXP_plo') => ('-d', 'AA', 'co.AM', 'EXP_plo')
('p', 'AA', 'co.AM', 'EXP_plo') => ('p', 'T', 'co.AM', 'EXP_plo')
('p', 'AA', 'co.AM', 'EXP_plo') => ('p', 'EA', 'co.AM', 'EXP_plo')
('p', 'AA', 'AM', 'EXP_plo') => ('-d', 'AA', 'AM', 'EXP_plo')
('p', 'AA', 'AM', 'EXP_plo') => ('p', 'T', 'AM', 'EXP_plo')
('p', 'AA', 'AM', 'EXP_plo') => ('p', 'EA', 'AM', 'EXP_plo')
('p', 'EA', 'AM', 'EXP_plo') => ('-d', 'EA', 'AM', 'EXP_plo')
('p', 'EA', 'co.AM', 'EXP_plo') => ('-d', 'EA', 'co.AM', 'EXP_plo')
('p', 'T', 'AM', 'EXP_plo') => ('-d', 'T', 'AM', 'EXP_plo')
('p', 'T', 'co.AM', 'EXP_plo') => ('-d', 'T', 'co.AM', 'EXP_plo')
('p', 'A', 'PP', 'EXP_plo') => ('-d', 'A', 'PP', 'EXP_plo')
('p', 'A', 'PP', 'EXP_plo') => ('p', 'R', 'PP', 'EXP_plo')
('p', 'A', 'PP', 'EXP_plo') => ('p', 'AA', 'PP', 'EXP_plo')
('p', 'AA', 'PP', 'EXP_plo') => ('-d', 'AA', 'PP', 'EXP_plo')
('p', 'AA', 'PP', 'EXP_plo') => ('p', 'T', 'PP', 'EXP_plo')
('p', 'AA', 'PP', 'EXP_plo') => ('p', 'EA', 'PP', 'EXP_plo')
('p', 'EA', 'PP', 'EXP_plo') => ('-d', 'EA', 'PP', 'EXP_plo')
('p', 'T', 'PP', 'EXP_plo') => ('-d', 'T', 'PP', 'EXP_plo')
('p', 'R', 'PP', 'EXP_plo') => ('-d', 'R', 'PP', 'EXP_plo')
('p', 'A', 'IP', 'EXP_plo') => ('-d', 'A', 'IP', 'EXP_plo')
('p', 'A', 'IP', 'EXP_plo') => ('p', 'R', 'IP', 'EXP_plo')
('p', 'A', 'IP', 'EXP_plo') => ('p', 'AA', 'IP', 'EXP_plo')
('p', 'A', 'co.IP', 'EXP_plo') => ('-d', 'A', 'co.IP', 'EXP_plo')
('p', 'A', 'co.IP', 'EXP_plo') => ('p', 'R', 'co.IP', 'EXP_plo')
('p', 'A', 'co.IP', 'EXP_plo') => ('p', 'AA', 'co.IP', 'EXP_plo')
('p', 'A', 'cocap.IP', 'EXP_plo') => ('-d', 'A', 'cocap.IP', 'EXP_plo')
('p', 'A', 'cocap.IP', 'EXP_plo') => ('p', 'R', 'cocap.IP', 'EXP_plo')
('p', 'A', 'cocap.IP', 'EXP_plo') => ('p', 'AA', 'cocap.IP', 'EXP_plo')
('p', 'AA', 'cocap.IP', 'EXP_plo') => ('-d', 'AA', 'cocap.IP', 'EXP_plo')
('p', 'AA', 'cocap.IP', 'EXP_plo') => ('p', 'T', 'cocap.IP', 'EXP_plo')
('p', 'AA', 'cocap.IP', 'EXP_plo') => ('p', 'EA', 'cocap.IP', 'EXP_plo')
('p', 'EA', 'cocap.IP', 'EXP_plo') => ('-d', 'EA', 'cocap.IP', 'EXP_plo')
('p', 'T', 'cocap.IP', 'EXP_plo') => ('-d', 'T', 'cocap.IP', 'EXP_plo')
('p', 'R', 'cocap.IP', 'EXP_plo') => ('-d', 'R', 'cocap.IP', 'EXP_plo')
('p', 'AA', 'co.IP', 'EXP_plo') => ('-d', 'AA', 'co.IP', 'EXP_plo')
('p', 'AA', 'co.IP', 'EXP_plo') => ('p', 'T', 'co.IP', 'EXP_plo')
('p', 'AA', 'co.IP', 'EXP_plo') => ('p', 'EA', 'co.IP', 'EXP_plo')
('p', 'AA', 'IP', 'EXP_plo') => ('-d', 'AA', 'IP', 'EXP_plo')
('p', 'AA', 'IP', 'EXP_plo') => ('p', 'T', 'IP', 'EXP_plo')
('p', 'AA', 'IP', 'EXP_plo') => ('p', 'EA', 'IP', 'EXP_plo')
('p', 'EA', 'IP', 'EXP_plo') => ('-d', 'EA', 'IP', 'EXP_plo')
('p', 'EA', 'co.IP', 'EXP_plo') => ('-d', 'EA', 'co.IP', 'EXP_plo')
('p', 'T', 'IP', 'EXP_plo') => ('-d', 'T', 'IP', 'EXP_plo')
('p', 'T', 'co.IP', 'EXP_plo') => ('-d', 'T', 'co.IP', 'EXP_plo')
('p', 'R', 'co.IP', 'EXP_plo') => ('-d', 'R', 'co.IP', 'EXP_plo')
('p', 'R', 'IP', 'EXP_plo') => ('-d', 'R', 'IP', 'EXP_plo')
('d', 'A', 'EXP_plo', 'IP') => ('-p', 'A', 'EXP_plo', 'IP')
('d', 'A', 'EXP_plo', 'co.IP') => ('-p', 'A', 'EXP_plo', 'co.IP')
('p', 'A', 'QSZK', 'EXP_plo') => ('-d', 'A', 'QSZK', 'EXP_plo')
('p', 'A', 'QSZK', 'EXP_plo') => ('p', 'R', 'QSZK', 'EXP_plo')
('p', 'A', 'QSZK', 'EXP_plo') => ('p', 'AA', 'QSZK', 'EXP_plo')
('p', 'AA', 'QSZK', 'EXP_plo') => ('-d', 'AA', 'QSZK', 'EXP_plo')
('p', 'AA', 'QSZK', 'EXP_plo') => ('p', 'T', 'QSZK', 'EXP_plo')
('p', 'AA', 'QSZK', 'EXP_plo') => ('p', 'EA', 'QSZK', 'EXP_plo')
('p', 'EA', 'QSZK', 'EXP_plo') => ('-d', 'EA', 'QSZK', 'EXP_plo')
('p', 'T', 'QSZK', 'EXP_plo') => ('-d', 'T', 'QSZK', 'EXP_plo')
('p', 'R', 'QSZK', 'EXP_plo') => ('-d', 'R', 'QSZK', 'EXP_plo')
('p', 'AA', 'PSPACE', 'EXP_plo') => ('-d', 'AA', 'PSPACE', 'EXP_plo')
('p', 'AA', 'PSPACE', 'EXP_plo') => ('p', 'T', 'PSPACE', 'EXP_plo')
('p', 'AA', 'PSPACE', 'EXP_plo') => ('p', 'EA', 'PSPACE', 'EXP_plo')
('p', 'EA', 'PSPACE', 'EXP_plo') => ('-d', 'EA', 'PSPACE', 'EXP_plo')
('p', 'T', 'PSPACE', 'EXP_plo') => ('-d', 'T', 'PSPACE', 'EXP_plo')
('p', 'R', 'PSPACE', 'EXP_plo') => ('-d', 'R', 'PSPACE', 'EXP_plo')
('d', 'R', 'EXP_plo', 'IP') => ('-p', 'R', 'EXP_plo', 'IP')
('d', 'R', 'EXP_plo', 'co.IP') => ('-p', 'R', 'EXP_plo', 'co.IP')
('d', 'R', 'PH', 'Delta_3P') => ('-p', 'R', 'PH', 'Delta_3P')
('d', 'R', 'PH', 'Delta_3P') => ('d', 'A', 'PH', 'Delta_3P')
('-p', 'R', 'PH', 'co.Sigma_2P') => ('-p', 'A', 'PH', 'co.Sigma_2P')
('-p', 'R', 'PH', 'Sigma_2P') => ('-p', 'A', 'PH', 'Sigma_2P')
('-p', 'R', 'MP', 'Sigma_2P') => ('-p', 'A', 'MP', 'Sigma_2P')
('-p', 'R', 'co.MP', 'co.Sigma_2P') => ('-p', 'A', 'co.MP', 'co.Sigma_2P')
('-p', 'R', 'co.MP', 'Delta_2P') => ('-p', 'A', 'co.MP', 'Delta_2P')
('-p', 'R', 'MP', 'Delta_2P') => ('-p', 'A', 'MP', 'Delta_2P')
('-p', 'R', 'co.MP', 'S_2P') => ('-p', 'A', 'co.MP', 'S_2P')
('-p', 'R', 'MP', 'S_2P') => ('-p', 'A', 'MP', 'S_2P')
('-p', 'R', 'co.MP', 'cocap.Sigma_2P') => ('-p', 'A', 'co.MP', 'cocap.Sigma_2P')
('-p', 'R', 'MP', 'cocap.Sigma_2P') => ('-p', 'A', 'MP', 'cocap.Sigma_2P')
('-p', 'R', 'PH', 'Delta_2P') => ('-p', 'A', 'PH', 'Delta_2P')
('-p', 'R', 'SPP', 'Delta_2P') => ('-p', 'A', 'SPP', 'Delta_2P')
('-p', 'R', 'cocap.MP', 'Delta_2P') => ('-p', 'A', 'cocap.MP', 'Delta_2P')
('-p', 'R', 'SPP', 'Sigma_2P') => ('-p', 'A', 'SPP', 'Sigma_2P')
('-p', 'R', 'SPP', 'co.Sigma_2P') => ('-p', 'A', 'SPP', 'co.Sigma_2P')
('-p', 'R', 'SPP', 'S_2P') => ('-p', 'A', 'SPP', 'S_2P')
('-p', 'R', 'SPP', 'cocap.Sigma_2P') => ('-p', 'A', 'SPP', 'cocap.Sigma_2P')
('-p', 'R', 'PH', 'S_2P') => ('-p', 'A', 'PH', 'S_2P')
('-p', 'R', 'cocap.MP', 'S_2P') => ('-p', 'A', 'cocap.MP', 'S_2P')
('-p', 'R', 'PH', 'cocap.Sigma_2P') => ('-p', 'A', 'PH', 'cocap.Sigma_2P')
('-p', 'R', 'cocap.MP', 'cocap.Sigma_2P') => ('-p', 'A', 'cocap.MP', 'cocap.Sigma_2P')
('-p', 'R', 'MP', 'co.Sigma_2P') => ('-p', 'A', 'MP', 'co.Sigma_2P')
('-p', 'R', 'co.MP', 'Sigma_2P') => ('-p', 'A', 'co.MP', 'Sigma_2P')
('-p', 'R', 'cocap.MP', 'Sigma_2P') => ('-p', 'A', 'cocap.MP', 'Sigma_2P')
('-p', 'R', 'cocap.MP', 'co.Sigma_2P') => ('-p', 'A', 'cocap.MP', 'co.Sigma_2P')
('d', 'R', 'PH', 'co.Sigma_2P') => ('d', 'A', 'PH', 'co.Sigma_2P')
('d', 'R', 'PH', 'Sigma_2P') => ('d', 'A', 'PH', 'Sigma_2P')
('d', 'R', 'MP', 'Sigma_2P') => ('d', 'A', 'MP', 'Sigma_2P')
('d', 'R', 'co.MP', 'co.Sigma_2P') => ('d', 'A', 'co.MP', 'co.Sigma_2P')
('d', 'R', 'co.MP', 'Delta_2P') => ('d', 'A', 'co.MP', 'Delta_2P')
('d', 'R', 'MP', 'Delta_2P') => ('d', 'A', 'MP', 'Delta_2P')
('d', 'R', 'co.MP', 'S_2P') => ('d', 'A', 'co.MP', 'S_2P')
('d', 'R', 'MP', 'S_2P') => ('d', 'A', 'MP', 'S_2P')
('d', 'R', 'co.MP', 'cocap.Sigma_2P') => ('d', 'A', 'co.MP', 'cocap.Sigma_2P')
('d', 'R', 'MP', 'cocap.Sigma_2P') => ('d', 'A', 'MP', 'cocap.Sigma_2P')
('d', 'R', 'PH', 'Delta_2P') => ('d', 'A', 'PH', 'Delta_2P')
('d', 'R', 'SPP', 'Delta_2P') => ('d', 'A', 'SPP', 'Delta_2P')
('d', 'R', 'cocap.MP', 'Delta_2P') => ('d', 'A', 'cocap.MP', 'Delta_2P')
('d', 'R', 'SPP', 'Sigma_2P') => ('d', 'A', 'SPP', 'Sigma_2P')
('d', 'R', 'SPP', 'co.Sigma_2P') => ('d', 'A', 'SPP', 'co.Sigma_2P')
('d', 'R', 'SPP', 'S_2P') => ('d', 'A', 'SPP', 'S_2P')
('d', 'R', 'SPP', 'cocap.Sigma_2P') => ('d', 'A', 'SPP', 'cocap.Sigma_2P')
('d', 'R', 'PH', 'S_2P') => ('d', 'A', 'PH', 'S_2P')
('d', 'R', 'cocap.MP', 'S_2P') => ('d', 'A', 'cocap.MP', 'S_2P')
('d', 'R', 'PH', 'cocap.Sigma_2P') => ('d', 'A', 'PH', 'cocap.Sigma_2P')
('d', 'R', 'cocap.MP', 'cocap.Sigma_2P') => ('d', 'A', 'cocap.MP', 'cocap.Sigma_2P')
('d', 'R', 'MP', 'co.Sigma_2P') => ('d', 'A', 'MP', 'co.Sigma_2P')
('d', 'R', 'co.MP', 'Sigma_2P') => ('d', 'A', 'co.MP', 'Sigma_2P')
('d', 'R', 'cocap.MP', 'Sigma_2P') => ('d', 'A', 'cocap.MP', 'Sigma_2P')
('d', 'R', 'cocap.MP', 'co.Sigma_2P') => ('d', 'A', 'cocap.MP', 'co.Sigma_2P')
('-p', 'R', 'MP', 'Delta_3P') => ('-p', 'A', 'MP', 'Delta_3P')
('-p', 'R', 'co.MP', 'Delta_3P') => ('-p', 'A', 'co.MP', 'Delta_3P')
('d', 'R', 'MP', 'Delta_3P') => ('d', 'A', 'MP', 'Delta_3P')
('d', 'R', 'co.MP', 'Delta_3P') => ('d', 'A', 'co.MP', 'Delta_3P')
('-p', 'R', 'SPP', 'Delta_3P') => ('-p', 'A', 'SPP', 'Delta_3P')
('d', 'R', 'SPP', 'Delta_3P') => ('d', 'A', 'SPP', 'Delta_3P')
('-p', 'R', 'cocap.MP', 'Delta_3P') => ('-p', 'A', 'cocap.MP', 'Delta_3P')
('d', 'R', 'cocap.MP', 'Delta_3P') => ('d', 'A', 'cocap.MP', 'Delta_3P')
('d', 'A', 'PH', 'Delta_3P') => ('-p', 'A', 'PH', 'Delta_3P')
('p', 'A', 'S_2P', 'RG(1)') => ('-d', 'A', 'S_2P', 'RG(1)')
('p', 'A', 'S_2P', 'RG(1)') => ('p', 'R', 'S_2P', 'RG(1)')
('p', 'A', 'S_2P', 'RG(1)') => ('p', 'AA', 'S_2P', 'RG(1)')
('p', 'A', 'RP', 'RG(1)') => ('-d', 'A', 'RP', 'RG(1)')
('p', 'A', 'RP', 'RG(1)') => ('p', 'R', 'RP', 'RG(1)')
('p', 'A', 'RP', 'RG(1)') => ('p', 'AA', 'RP', 'RG(1)')
('p', 'A', 'co.RP', 'RG(1)') => ('-d', 'A', 'co.RP', 'RG(1)')
('p', 'A', 'co.RP', 'RG(1)') => ('p', 'R', 'co.RP', 'RG(1)')
('p', 'A', 'co.RP', 'RG(1)') => ('p', 'AA', 'co.RP', 'RG(1)')
('p', 'A', 'ZPP', 'RG(1)') => ('-d', 'A', 'ZPP', 'RG(1)')
('p', 'A', 'ZPP', 'RG(1)') => ('p', 'R', 'ZPP', 'RG(1)')
('p', 'A', 'ZPP', 'RG(1)') => ('p', 'AA', 'ZPP', 'RG(1)')
('p', 'A', 'P', 'RG(1)') => ('-d', 'A', 'P', 'RG(1)')
('p', 'A', 'P', 'RG(1)') => ('p', 'R', 'P', 'RG(1)')
('p', 'A', 'P', 'RG(1)') => ('p', 'AA', 'P', 'RG(1)')
('-d', 'A', 'P', 'RG(2)') => ('-d', 'R', 'P', 'RG(2)')
('-d', 'A', 'P', 'RG(2)') => ('-d', 'AA', 'P', 'RG(2)')
('-d', 'A', 'P', 'RG(3)') => ('-d', 'AA', 'P', 'RG(3)')
('-d', 'AA', 'P', 'RG(3)') => ('-d', 'T', 'P', 'RG(3)')
('-d', 'AA', 'P', 'RG(3)') => ('-d', 'EA', 'P', 'RG(3)')
('-d', 'AA', 'P', 'RG(2)') => ('-d', 'T', 'P', 'RG(2)')
('-d', 'AA', 'P', 'RG(2)') => ('-d', 'EA', 'P', 'RG(2)')
('p', 'A', 'P', 'RG(2)') => ('p', 'R', 'P', 'RG(2)')
('p', 'A', 'P', 'RG(2)') => ('p', 'AA', 'P', 'RG(2)')
('p', 'A', 'P', 'RG(3)') => ('p', 'R', 'P', 'RG(3)')
('p', 'A', 'P', 'RG(3)') => ('p', 'AA', 'P', 'RG(3)')
('p', 'AA', 'P', 'RG(3)') => ('p', 'T', 'P', 'RG(3)')
('p', 'AA', 'P', 'RG(3)') => ('p', 'EA', 'P', 'RG(3)')
('p', 'AA', 'P', 'RG(2)') => ('p', 'T', 'P', 'RG(2)')
('p', 'AA', 'P', 'RG(2)') => ('p', 'EA', 'P', 'RG(2)')
('-p', 'R', 'RG(2)', 'P') => ('-p', 'A', 'RG(2)', 'P')
('p', 'AA', 'P', 'RG(1)') => ('-d', 'AA', 'P', 'RG(1)')
('p', 'AA', 'P', 'RG(1)') => ('p', 'T', 'P', 'RG(1)')
('p', 'AA', 'P', 'RG(1)') => ('p', 'EA', 'P', 'RG(1)')
('p', 'EA', 'P', 'RG(1)') => ('-d', 'EA', 'P', 'RG(1)')
('p', 'T', 'P', 'RG(1)') => ('-d', 'T', 'P', 'RG(1)')
('p', 'R', 'P', 'RG(1)') => ('-d', 'R', 'P', 'RG(1)')
('-p', 'R', 'RG(1)', 'P') => ('-p', 'A', 'RG(1)', 'P')
('-d', 'A', 'ZPP', 'RG(2)') => ('-d', 'AA', 'ZPP', 'RG(2)')
('-d', 'A', 'ZPP', 'RG(3)') => ('-d', 'AA', 'ZPP', 'RG(3)')
('-d', 'AA', 'ZPP', 'RG(3)') => ('-d', 'T', 'ZPP', 'RG(3)')
('-d', 'AA', 'ZPP', 'RG(3)') => ('-d', 'EA', 'ZPP', 'RG(3)')
('-d', 'AA', 'ZPP', 'RG(2)') => ('-d', 'T', 'ZPP', 'RG(2)')
('-d', 'AA', 'ZPP', 'RG(2)') => ('-d', 'EA', 'ZPP', 'RG(2)')
('p', 'A', 'ZPP', 'RG(2)') => ('p', 'R', 'ZPP', 'RG(2)')
('p', 'A', 'ZPP', 'RG(2)') => ('p', 'AA', 'ZPP', 'RG(2)')
('p', 'A', 'ZPP', 'RG(3)') => ('p', 'R', 'ZPP', 'RG(3)')
('p', 'A', 'ZPP', 'RG(3)') => ('p', 'AA', 'ZPP', 'RG(3)')
('p', 'AA', 'ZPP', 'RG(3)') => ('p', 'T', 'ZPP', 'RG(3)')
('p', 'AA', 'ZPP', 'RG(3)') => ('p', 'EA', 'ZPP', 'RG(3)')
('p', 'AA', 'ZPP', 'RG(2)') => ('p', 'T', 'ZPP', 'RG(2)')
('p', 'AA', 'ZPP', 'RG(2)') => ('p', 'EA', 'ZPP', 'RG(2)')
('p', 'AA', 'ZPP', 'RG(1)') => ('-d', 'AA', 'ZPP', 'RG(1)')
('p', 'AA', 'ZPP', 'RG(1)') => ('p', 'T', 'ZPP', 'RG(1)')
('p', 'AA', 'ZPP', 'RG(1)') => ('p', 'EA', 'ZPP', 'RG(1)')
('p', 'EA', 'ZPP', 'RG(1)') => ('-d', 'EA', 'ZPP', 'RG(1)')
('p', 'T', 'ZPP', 'RG(1)') => ('-d', 'T', 'ZPP', 'RG(1)')
('-d', 'A', 'co.RP', 'RG(2)') => ('-d', 'AA', 'co.RP', 'RG(2)')
('-d', 'A', 'RP', 'RG(2)') => ('-d', 'AA', 'RP', 'RG(2)')
('-d', 'A', 'RP', 'RG(3)') => ('-d', 'AA', 'RP', 'RG(3)')
('-d', 'A', 'co.RP', 'RG(3)') => ('-d', 'AA', 'co.RP', 'RG(3)')
('-d', 'AA', 'co.RP', 'RG(3)') => ('-d', 'T', 'co.RP', 'RG(3)')
('-d', 'AA', 'co.RP', 'RG(3)') => ('-d', 'EA', 'co.RP', 'RG(3)')
('-d', 'AA', 'RP', 'RG(3)') => ('-d', 'T', 'RP', 'RG(3)')
('-d', 'AA', 'RP', 'RG(3)') => ('-d', 'EA', 'RP', 'RG(3)')
('-d', 'AA', 'RP', 'RG(2)') => ('-d', 'T', 'RP', 'RG(2)')
('-d', 'AA', 'RP', 'RG(2)') => ('-d', 'EA', 'RP', 'RG(2)')
('-d', 'AA', 'co.RP', 'RG(2)') => ('-d', 'T', 'co.RP', 'RG(2)')
('-d', 'AA', 'co.RP', 'RG(2)') => ('-d', 'EA', 'co.RP', 'RG(2)')
('p', 'A', 'co.RP', 'RG(2)') => ('p', 'R', 'co.RP', 'RG(2)')
('p', 'A', 'co.RP', 'RG(2)') => ('p', 'AA', 'co.RP', 'RG(2)')
('p', 'A', 'RP', 'RG(2)') => ('p', 'R', 'RP', 'RG(2)')
('p', 'A', 'RP', 'RG(2)') => ('p', 'AA', 'RP', 'RG(2)')
('p', 'A', 'RP', 'RG(3)') => ('p', 'R', 'RP', 'RG(3)')
('p', 'A', 'RP', 'RG(3)') => ('p', 'AA', 'RP', 'RG(3)')
('p', 'A', 'co.RP', 'RG(3)') => ('p', 'R', 'co.RP', 'RG(3)')
('p', 'A', 'co.RP', 'RG(3)') => ('p', 'AA', 'co.RP', 'RG(3)')
('p', 'AA', 'co.RP', 'RG(3)') => ('p', 'T', 'co.RP', 'RG(3)')
('p', 'AA', 'co.RP', 'RG(3)') => ('p', 'EA', 'co.RP', 'RG(3)')
('p', 'AA', 'RP', 'RG(3)') => ('p', 'T', 'RP', 'RG(3)')
('p', 'AA', 'RP', 'RG(3)') => ('p', 'EA', 'RP', 'RG(3)')
('p', 'AA', 'RP', 'RG(2)') => ('p', 'T', 'RP', 'RG(2)')
('p', 'AA', 'RP', 'RG(2)') => ('p', 'EA', 'RP', 'RG(2)')
('p', 'AA', 'co.RP', 'RG(2)') => ('p', 'T', 'co.RP', 'RG(2)')
('p', 'AA', 'co.RP', 'RG(2)') => ('p', 'EA', 'co.RP', 'RG(2)')
('p', 'AA', 'co.RP', 'RG(1)') => ('-d', 'AA', 'co.RP', 'RG(1)')
('p', 'AA', 'co.RP', 'RG(1)') => ('p', 'T', 'co.RP', 'RG(1)')
('p', 'AA', 'co.RP', 'RG(1)') => ('p', 'EA', 'co.RP', 'RG(1)')
('p', 'AA', 'RP', 'RG(1)') => ('-d', 'AA', 'RP', 'RG(1)')
('p', 'AA', 'RP', 'RG(1)') => ('p', 'T', 'RP', 'RG(1)')
('p', 'AA', 'RP', 'RG(1)') => ('p', 'EA', 'RP', 'RG(1)')
('p', 'EA', 'RP', 'RG(1)') => ('-d', 'EA', 'RP', 'RG(1)')
('p', 'EA', 'co.RP', 'RG(1)') => ('-d', 'EA', 'co.RP', 'RG(1)')
('p', 'T', 'RP', 'RG(1)') => ('-d', 'T', 'RP', 'RG(1)')
('p', 'T', 'co.RP', 'RG(1)') => ('-d', 'T', 'co.RP', 'RG(1)')
('d', 'A', 'RG(1)', 'co.AWPP') => ('-p', 'A', 'RG(1)', 'co.AWPP')
('d', 'A', 'RG(1)', 'AWPP') => ('-p', 'A', 'RG(1)', 'AWPP')
('p', 'E', 'P^Sharp-P', 'RG(1)') => ('-d', 'E', 'P^Sharp-P', 'RG(1)')
('p', 'A', 'NP', 'RG(1)') => ('-d', 'A', 'NP', 'RG(1)')
('p', 'A', 'NP', 'RG(1)') => ('p', 'R', 'NP', 'RG(1)')
('p', 'A', 'NP', 'RG(1)') => ('p', 'AA', 'NP', 'RG(1)')
('p', 'A', 'co.NP', 'RG(1)') => ('-d', 'A', 'co.NP', 'RG(1)')
('p', 'A', 'co.NP', 'RG(1)') => ('p', 'R', 'co.NP', 'RG(1)')
('p', 'A', 'co.NP', 'RG(1)') => ('p', 'AA', 'co.NP', 'RG(1)')
('p', 'A', 'cocap.NP', 'RG(1)') => ('-d', 'A', 'cocap.NP', 'RG(1)')
('p', 'A', 'cocap.NP', 'RG(1)') => ('p', 'R', 'cocap.NP', 'RG(1)')
('p', 'A', 'cocap.NP', 'RG(1)') => ('p', 'AA', 'cocap.NP', 'RG(1)')
('-d', 'A', 'cocap.NP', 'RG(2)') => ('-d', 'AA', 'cocap.NP', 'RG(2)')
('-d', 'A', 'cocap.NP', 'RG(3)') => ('-d', 'AA', 'cocap.NP', 'RG(3)')
('-d', 'AA', 'cocap.NP', 'RG(3)') => ('-d', 'T', 'cocap.NP', 'RG(3)')
('-d', 'AA', 'cocap.NP', 'RG(3)') => ('-d', 'EA', 'cocap.NP', 'RG(3)')
('-d', 'AA', 'cocap.NP', 'RG(2)') => ('-d', 'T', 'cocap.NP', 'RG(2)')
('-d', 'AA', 'cocap.NP', 'RG(2)') => ('-d', 'EA', 'cocap.NP', 'RG(2)')
('p', 'A', 'cocap.NP', 'RG(2)') => ('p', 'R', 'cocap.NP', 'RG(2)')
('p', 'A', 'cocap.NP', 'RG(2)') => ('p', 'AA', 'cocap.NP', 'RG(2)')
('p', 'A', 'cocap.NP', 'RG(3)') => ('p', 'R', 'cocap.NP', 'RG(3)')
('p', 'A', 'cocap.NP', 'RG(3)') => ('p', 'AA', 'cocap.NP', 'RG(3)')
('p', 'AA', 'cocap.NP', 'RG(3)') => ('p', 'T', 'cocap.NP', 'RG(3)')
('p', 'AA', 'cocap.NP', 'RG(3)') => ('p', 'EA', 'cocap.NP', 'RG(3)')
('p', 'AA', 'cocap.NP', 'RG(2)') => ('p', 'T', 'cocap.NP', 'RG(2)')
('p', 'AA', 'cocap.NP', 'RG(2)') => ('p', 'EA', 'cocap.NP', 'RG(2)')
('p', 'AA', 'cocap.NP', 'RG(1)') => ('-d', 'AA', 'cocap.NP', 'RG(1)')
('p', 'AA', 'cocap.NP', 'RG(1)') => ('p', 'T', 'cocap.NP', 'RG(1)')
('p', 'AA', 'cocap.NP', 'RG(1)') => ('p', 'EA', 'cocap.NP', 'RG(1)')
('p', 'EA', 'cocap.NP', 'RG(1)') => ('-d', 'EA', 'cocap.NP', 'RG(1)')
('p', 'T', 'cocap.NP', 'RG(1)') => ('-d', 'T', 'cocap.NP', 'RG(1)')
('d', 'A', 'RG(1)', 'BQP/mpoly') => ('-p', 'A', 'RG(1)', 'BQP/mpoly')
('-d', 'A', 'co.NP', 'RG(2)') => ('-d', 'AA', 'co.NP', 'RG(2)')
('-d', 'A', 'NP', 'RG(2)') => ('-d', 'AA', 'NP', 'RG(2)')
('-d', 'A', 'NP', 'RG(3)') => ('-d', 'AA', 'NP', 'RG(3)')
('-d', 'A', 'co.NP', 'RG(3)') => ('-d', 'AA', 'co.NP', 'RG(3)')
('-d', 'AA', 'co.NP', 'RG(3)') => ('-d', 'T', 'co.NP', 'RG(3)')
('-d', 'AA', 'co.NP', 'RG(3)') => ('-d', 'EA', 'co.NP', 'RG(3)')
('-d', 'AA', 'NP', 'RG(3)') => ('-d', 'T', 'NP', 'RG(3)')
('-d', 'AA', 'NP', 'RG(3)') => ('-d', 'EA', 'NP', 'RG(3)')
('-d', 'AA', 'NP', 'RG(2)') => ('-d', 'T', 'NP', 'RG(2)')
('-d', 'AA', 'NP', 'RG(2)') => ('-d', 'EA', 'NP', 'RG(2)')
('-d', 'AA', 'co.NP', 'RG(2)') => ('-d', 'T', 'co.NP', 'RG(2)')
('-d', 'AA', 'co.NP', 'RG(2)') => ('-d', 'EA', 'co.NP', 'RG(2)')
('p', 'A', 'co.NP', 'RG(2)') => ('p', 'R', 'co.NP', 'RG(2)')
('p', 'A', 'co.NP', 'RG(2)') => ('p', 'AA', 'co.NP', 'RG(2)')
('p', 'A', 'NP', 'RG(2)') => ('p', 'R', 'NP', 'RG(2)')
('p', 'A', 'NP', 'RG(2)') => ('p', 'AA', 'NP', 'RG(2)')
('p', 'A', 'NP', 'RG(3)') => ('p', 'R', 'NP', 'RG(3)')
('p', 'A', 'NP', 'RG(3)') => ('p', 'AA', 'NP', 'RG(3)')
('p', 'A', 'co.NP', 'RG(3)') => ('p', 'R', 'co.NP', 'RG(3)')
('p', 'A', 'co.NP', 'RG(3)') => ('p', 'AA', 'co.NP', 'RG(3)')
('p', 'AA', 'co.NP', 'RG(3)') => ('p', 'T', 'co.NP', 'RG(3)')
('p', 'AA', 'co.NP', 'RG(3)') => ('p', 'EA', 'co.NP', 'RG(3)')
('p', 'AA', 'NP', 'RG(3)') => ('p', 'T', 'NP', 'RG(3)')
('p', 'AA', 'NP', 'RG(3)') => ('p', 'EA', 'NP', 'RG(3)')
('p', 'AA', 'NP', 'RG(2)') => ('p', 'T', 'NP', 'RG(2)')
('p', 'AA', 'NP', 'RG(2)') => ('p', 'EA', 'NP', 'RG(2)')
('p', 'AA', 'co.NP', 'RG(2)') => ('p', 'T', 'co.NP', 'RG(2)')
('p', 'AA', 'co.NP', 'RG(2)') => ('p', 'EA', 'co.NP', 'RG(2)')
('d', 'A', 'RG(1)', 'BQP/qpoly') => ('-p', 'A', 'RG(1)', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'RG(1)') => ('-d', 'AA', 'co.NP', 'RG(1)')
('p', 'AA', 'co.NP', 'RG(1)') => ('p', 'T', 'co.NP', 'RG(1)')
('p', 'AA', 'co.NP', 'RG(1)') => ('p', 'EA', 'co.NP', 'RG(1)')
('p', 'AA', 'NP', 'RG(1)') => ('-d', 'AA', 'NP', 'RG(1)')
('p', 'AA', 'NP', 'RG(1)') => ('p', 'T', 'NP', 'RG(1)')
('p', 'AA', 'NP', 'RG(1)') => ('p', 'EA', 'NP', 'RG(1)')
('p', 'EA', 'NP', 'RG(1)') => ('-d', 'EA', 'NP', 'RG(1)')
('p', 'EA', 'co.NP', 'RG(1)') => ('-d', 'EA', 'co.NP', 'RG(1)')
('p', 'T', 'NP', 'RG(1)') => ('-d', 'T', 'NP', 'RG(1)')
('p', 'T', 'co.NP', 'RG(1)') => ('-d', 'T', 'co.NP', 'RG(1)')
('p', 'E', 'Delta_2P', 'RG(1)') => ('-d', 'E', 'Delta_2P', 'RG(1)')
('p', 'A', 'Delta_2P', 'RG(1)') => ('-d', 'A', 'Delta_2P', 'RG(1)')
('p', 'A', 'Delta_2P', 'RG(1)') => ('p', 'R', 'Delta_2P', 'RG(1)')
('p', 'A', 'Delta_2P', 'RG(1)') => ('p', 'AA', 'Delta_2P', 'RG(1)')
('-d', 'A', 'Delta_2P', 'RG(2)') => ('-d', 'R', 'Delta_2P', 'RG(2)')
('-d', 'A', 'Delta_2P', 'RG(2)') => ('-d', 'AA', 'Delta_2P', 'RG(2)')
('-d', 'A', 'Delta_2P', 'RG(3)') => ('-d', 'R', 'Delta_2P', 'RG(3)')
('-d', 'A', 'Delta_2P', 'RG(3)') => ('-d', 'AA', 'Delta_2P', 'RG(3)')
('-d', 'AA', 'Delta_2P', 'RG(3)') => ('-d', 'T', 'Delta_2P', 'RG(3)')
('-d', 'AA', 'Delta_2P', 'RG(3)') => ('-d', 'EA', 'Delta_2P', 'RG(3)')
('-d', 'AA', 'Delta_2P', 'RG(2)') => ('-d', 'T', 'Delta_2P', 'RG(2)')
('-d', 'AA', 'Delta_2P', 'RG(2)') => ('-d', 'EA', 'Delta_2P', 'RG(2)')
('p', 'A', 'Delta_2P', 'RG(2)') => ('p', 'R', 'Delta_2P', 'RG(2)')
('p', 'A', 'Delta_2P', 'RG(2)') => ('p', 'AA', 'Delta_2P', 'RG(2)')
('p', 'A', 'Delta_2P', 'RG(3)') => ('p', 'R', 'Delta_2P', 'RG(3)')
('p', 'A', 'Delta_2P', 'RG(3)') => ('p', 'AA', 'Delta_2P', 'RG(3)')
('p', 'AA', 'Delta_2P', 'RG(3)') => ('p', 'T', 'Delta_2P', 'RG(3)')
('p', 'AA', 'Delta_2P', 'RG(3)') => ('p', 'EA', 'Delta_2P', 'RG(3)')
('p', 'AA', 'Delta_2P', 'RG(2)') => ('p', 'T', 'Delta_2P', 'RG(2)')
('p', 'AA', 'Delta_2P', 'RG(2)') => ('p', 'EA', 'Delta_2P', 'RG(2)')
('d', 'A', 'RG(1)', 'PP') => ('-p', 'A', 'RG(1)', 'PP')
('p', 'AA', 'Delta_2P', 'RG(1)') => ('-d', 'AA', 'Delta_2P', 'RG(1)')
('p', 'AA', 'Delta_2P', 'RG(1)') => ('p', 'T', 'Delta_2P', 'RG(1)')
('p', 'AA', 'Delta_2P', 'RG(1)') => ('p', 'EA', 'Delta_2P', 'RG(1)')
('p', 'EA', 'Delta_2P', 'RG(1)') => ('-d', 'EA', 'Delta_2P', 'RG(1)')
('p', 'T', 'Delta_2P', 'RG(1)') => ('-d', 'T', 'Delta_2P', 'RG(1)')
('p', 'R', 'Delta_2P', 'RG(1)') => ('-d', 'R', 'Delta_2P', 'RG(1)')
('-d', 'A', 'S_2P', 'RG(2)') => ('-d', 'R', 'S_2P', 'RG(2)')
('-d', 'A', 'S_2P', 'RG(2)') => ('-d', 'AA', 'S_2P', 'RG(2)')
('-d', 'A', 'S_2P', 'RG(3)') => ('-d', 'R', 'S_2P', 'RG(3)')
('-d', 'A', 'S_2P', 'RG(3)') => ('-d', 'AA', 'S_2P', 'RG(3)')
('-d', 'AA', 'S_2P', 'RG(3)') => ('-d', 'T', 'S_2P', 'RG(3)')
('-d', 'AA', 'S_2P', 'RG(3)') => ('-d', 'EA', 'S_2P', 'RG(3)')
('-d', 'AA', 'S_2P', 'RG(2)') => ('-d', 'T', 'S_2P', 'RG(2)')
('-d', 'AA', 'S_2P', 'RG(2)') => ('-d', 'EA', 'S_2P', 'RG(2)')
('p', 'A', 'S_2P', 'RG(2)') => ('p', 'R', 'S_2P', 'RG(2)')
('p', 'A', 'S_2P', 'RG(2)') => ('p', 'AA', 'S_2P', 'RG(2)')
('p', 'A', 'S_2P', 'RG(3)') => ('p', 'R', 'S_2P', 'RG(3)')
('p', 'A', 'S_2P', 'RG(3)') => ('p', 'AA', 'S_2P', 'RG(3)')
('p', 'AA', 'S_2P', 'RG(3)') => ('p', 'T', 'S_2P', 'RG(3)')
('p', 'AA', 'S_2P', 'RG(3)') => ('p', 'EA', 'S_2P', 'RG(3)')
('p', 'AA', 'S_2P', 'RG(2)') => ('p', 'T', 'S_2P', 'RG(2)')
('p', 'AA', 'S_2P', 'RG(2)') => ('p', 'EA', 'S_2P', 'RG(2)')
('p', 'AA', 'S_2P', 'RG(1)') => ('-d', 'AA', 'S_2P', 'RG(1)')
('p', 'AA', 'S_2P', 'RG(1)') => ('p', 'T', 'S_2P', 'RG(1)')
('p', 'AA', 'S_2P', 'RG(1)') => ('p', 'EA', 'S_2P', 'RG(1)')
('p', 'EA', 'S_2P', 'RG(1)') => ('-d', 'EA', 'S_2P', 'RG(1)')
('p', 'EA', 'S_2P', 'RG(1)') => ('p', 'E', 'S_2P', 'RG(1)')
('p', 'E', 'S_2P', 'RG(1)') => ('-d', 'E', 'S_2P', 'RG(1)')
('p', 'T', 'S_2P', 'RG(1)') => ('-d', 'T', 'S_2P', 'RG(1)')
('p', 'R', 'S_2P', 'RG(1)') => ('-d', 'R', 'S_2P', 'RG(1)')
('p', 'A', 'QMA(2)', 'EXP') => ('-d', 'A', 'QMA(2)', 'EXP')
('p', 'A', 'QMA(2)', 'EXP') => ('p', 'R', 'QMA(2)', 'EXP')
('p', 'A', 'QMA(2)', 'EXP') => ('p', 'AA', 'QMA(2)', 'EXP')
('p', 'A', 'co.QMA(2)', 'EXP') => ('-d', 'A', 'co.QMA(2)', 'EXP')
('p', 'A', 'co.QMA(2)', 'EXP') => ('p', 'R', 'co.QMA(2)', 'EXP')
('p', 'A', 'co.QMA(2)', 'EXP') => ('p', 'AA', 'co.QMA(2)', 'EXP')
('p', 'A', 'cocap.QMA(2)', 'EXP') => ('-d', 'A', 'cocap.QMA(2)', 'EXP')
('p', 'A', 'cocap.QMA(2)', 'EXP') => ('p', 'R', 'cocap.QMA(2)', 'EXP')
('p', 'A', 'cocap.QMA(2)', 'EXP') => ('p', 'AA', 'cocap.QMA(2)', 'EXP')
('-d', 'A', 'cocap.QMA(2)', 'ALL') => ('-d', 'R', 'cocap.QMA(2)', 'ALL')
('-d', 'A', 'cocap.QMA(2)', 'ALL') => ('-d', 'AA', 'cocap.QMA(2)', 'ALL')
('-d', 'AA', 'cocap.QMA(2)', 'ALL') => ('-d', 'T', 'cocap.QMA(2)', 'ALL')
('-d', 'AA', 'cocap.QMA(2)', 'ALL') => ('-d', 'EA', 'cocap.QMA(2)', 'ALL')
('p', 'A', 'cocap.QMA(2)', 'ALL') => ('p', 'R', 'cocap.QMA(2)', 'ALL')
('p', 'A', 'cocap.QMA(2)', 'ALL') => ('p', 'AA', 'cocap.QMA(2)', 'ALL')
('p', 'AA', 'cocap.QMA(2)', 'ALL') => ('p', 'T', 'cocap.QMA(2)', 'ALL')
('p', 'AA', 'cocap.QMA(2)', 'ALL') => ('p', 'EA', 'cocap.QMA(2)', 'ALL')
('-d', 'A', 'cocap.QMA(2)', 'co.NEXP') => ('-d', 'R', 'cocap.QMA(2)', 'co.NEXP')
('-d', 'A', 'cocap.QMA(2)', 'co.NEXP') => ('-d', 'AA', 'cocap.QMA(2)', 'co.NEXP')
('-d', 'A', 'cocap.QMA(2)', 'NEXP') => ('-d', 'R', 'cocap.QMA(2)', 'NEXP')
('-d', 'A', 'cocap.QMA(2)', 'NEXP') => ('-d', 'AA', 'cocap.QMA(2)', 'NEXP')
('-d', 'A', 'cocap.QMA(2)', 'cocap.NEXP') => ('-d', 'R', 'cocap.QMA(2)', 'cocap.NEXP')
('-d', 'A', 'cocap.QMA(2)', 'cocap.NEXP') => ('-d', 'AA', 'cocap.QMA(2)', 'cocap.NEXP')
('-d', 'A', 'cocap.QMA(2)', 'R') => ('-d', 'R', 'cocap.QMA(2)', 'R')
('-d', 'A', 'cocap.QMA(2)', 'R') => ('-d', 'AA', 'cocap.QMA(2)', 'R')
('-d', 'A', 'cocap.QMA(2)', 'RE') => ('-d', 'R', 'cocap.QMA(2)', 'RE')
('-d', 'A', 'cocap.QMA(2)', 'RE') => ('-d', 'AA', 'cocap.QMA(2)', 'RE')
('-d', 'A', 'cocap.QMA(2)', 'co.RE') => ('-d', 'R', 'cocap.QMA(2)', 'co.RE')
('-d', 'A', 'cocap.QMA(2)', 'co.RE') => ('-d', 'AA', 'cocap.QMA(2)', 'co.RE')
('-d', 'AA', 'cocap.QMA(2)', 'co.RE') => ('-d', 'T', 'cocap.QMA(2)', 'co.RE')
('-d', 'AA', 'cocap.QMA(2)', 'co.RE') => ('-d', 'EA', 'cocap.QMA(2)', 'co.RE')
('-d', 'AA', 'cocap.QMA(2)', 'RE') => ('-d', 'T', 'cocap.QMA(2)', 'RE')
('-d', 'AA', 'cocap.QMA(2)', 'RE') => ('-d', 'EA', 'cocap.QMA(2)', 'RE')
('-d', 'AA', 'cocap.QMA(2)', 'R') => ('-d', 'T', 'cocap.QMA(2)', 'R')
('-d', 'AA', 'cocap.QMA(2)', 'R') => ('-d', 'EA', 'cocap.QMA(2)', 'R')
('-d', 'A', 'cocap.QMA(2)', 'NEXP/poly') => ('-d', 'R', 'cocap.QMA(2)', 'NEXP/poly')
('-d', 'A', 'cocap.QMA(2)', 'NEXP/poly') => ('-d', 'AA', 'cocap.QMA(2)', 'NEXP/poly')
('-d', 'AA', 'cocap.QMA(2)', 'NEXP/poly') => ('-d', 'T', 'cocap.QMA(2)', 'NEXP/poly')
('-d', 'AA', 'cocap.QMA(2)', 'NEXP/poly') => ('-d', 'EA', 'cocap.QMA(2)', 'NEXP/poly')
('-d', 'AA', 'cocap.QMA(2)', 'cocap.NEXP') => ('-d', 'T', 'cocap.QMA(2)', 'cocap.NEXP')
('-d', 'AA', 'cocap.QMA(2)', 'cocap.NEXP') => ('-d', 'EA', 'cocap.QMA(2)', 'cocap.NEXP')
('-d', 'AA', 'cocap.QMA(2)', 'co.NEXP') => ('-d', 'T', 'cocap.QMA(2)', 'co.NEXP')
('-d', 'AA', 'cocap.QMA(2)', 'co.NEXP') => ('-d', 'EA', 'cocap.QMA(2)', 'co.NEXP')
('-d', 'AA', 'cocap.QMA(2)', 'NEXP') => ('-d', 'T', 'cocap.QMA(2)', 'NEXP')
('-d', 'AA', 'cocap.QMA(2)', 'NEXP') => ('-d', 'EA', 'cocap.QMA(2)', 'NEXP')
('p', 'A', 'cocap.QMA(2)', 'co.NEXP') => ('p', 'R', 'cocap.QMA(2)', 'co.NEXP')
('p', 'A', 'cocap.QMA(2)', 'co.NEXP') => ('p', 'AA', 'cocap.QMA(2)', 'co.NEXP')
('p', 'A', 'cocap.QMA(2)', 'NEXP') => ('p', 'R', 'cocap.QMA(2)', 'NEXP')
('p', 'A', 'cocap.QMA(2)', 'NEXP') => ('p', 'AA', 'cocap.QMA(2)', 'NEXP')
('p', 'A', 'cocap.QMA(2)', 'cocap.NEXP') => ('p', 'R', 'cocap.QMA(2)', 'cocap.NEXP')
('p', 'A', 'cocap.QMA(2)', 'cocap.NEXP') => ('p', 'AA', 'cocap.QMA(2)', 'cocap.NEXP')
('p', 'A', 'cocap.QMA(2)', 'R') => ('p', 'R', 'cocap.QMA(2)', 'R')
('p', 'A', 'cocap.QMA(2)', 'R') => ('p', 'AA', 'cocap.QMA(2)', 'R')
('p', 'A', 'cocap.QMA(2)', 'RE') => ('p', 'R', 'cocap.QMA(2)', 'RE')
('p', 'A', 'cocap.QMA(2)', 'RE') => ('p', 'AA', 'cocap.QMA(2)', 'RE')
('p', 'A', 'cocap.QMA(2)', 'co.RE') => ('p', 'R', 'cocap.QMA(2)', 'co.RE')
('p', 'A', 'cocap.QMA(2)', 'co.RE') => ('p', 'AA', 'cocap.QMA(2)', 'co.RE')
('p', 'AA', 'cocap.QMA(2)', 'co.RE') => ('p', 'T', 'cocap.QMA(2)', 'co.RE')
('p', 'AA', 'cocap.QMA(2)', 'co.RE') => ('p', 'EA', 'cocap.QMA(2)', 'co.RE')
('p', 'AA', 'cocap.QMA(2)', 'RE') => ('p', 'T', 'cocap.QMA(2)', 'RE')
('p', 'AA', 'cocap.QMA(2)', 'RE') => ('p', 'EA', 'cocap.QMA(2)', 'RE')
('p', 'AA', 'cocap.QMA(2)', 'R') => ('p', 'T', 'cocap.QMA(2)', 'R')
('p', 'AA', 'cocap.QMA(2)', 'R') => ('p', 'EA', 'cocap.QMA(2)', 'R')
('p', 'A', 'cocap.QMA(2)', 'NEXP/poly') => ('p', 'R', 'cocap.QMA(2)', 'NEXP/poly')
('p', 'A', 'cocap.QMA(2)', 'NEXP/poly') => ('p', 'AA', 'cocap.QMA(2)', 'NEXP/poly')
('p', 'AA', 'cocap.QMA(2)', 'NEXP/poly') => ('p', 'T', 'cocap.QMA(2)', 'NEXP/poly')
('p', 'AA', 'cocap.QMA(2)', 'NEXP/poly') => ('p', 'EA', 'cocap.QMA(2)', 'NEXP/poly')
('p', 'AA', 'cocap.QMA(2)', 'cocap.NEXP') => ('p', 'T', 'cocap.QMA(2)', 'cocap.NEXP')
('p', 'AA', 'cocap.QMA(2)', 'cocap.NEXP') => ('p', 'EA', 'cocap.QMA(2)', 'cocap.NEXP')
('p', 'AA', 'cocap.QMA(2)', 'co.NEXP') => ('p', 'T', 'cocap.QMA(2)', 'co.NEXP')
('p', 'AA', 'cocap.QMA(2)', 'co.NEXP') => ('p', 'EA', 'cocap.QMA(2)', 'co.NEXP')
('p', 'AA', 'cocap.QMA(2)', 'NEXP') => ('p', 'T', 'cocap.QMA(2)', 'NEXP')
('p', 'AA', 'cocap.QMA(2)', 'NEXP') => ('p', 'EA', 'cocap.QMA(2)', 'NEXP')
('p', 'AA', 'cocap.QMA(2)', 'EXP') => ('-d', 'AA', 'cocap.QMA(2)', 'EXP')
('p', 'AA', 'cocap.QMA(2)', 'EXP') => ('p', 'T', 'cocap.QMA(2)', 'EXP')
('p', 'AA', 'cocap.QMA(2)', 'EXP') => ('p', 'EA', 'cocap.QMA(2)', 'EXP')
('p', 'EA', 'cocap.QMA(2)', 'EXP') => ('-d', 'EA', 'cocap.QMA(2)', 'EXP')
('p', 'EA', 'cocap.QMA(2)', 'EXP') => ('p', 'E', 'cocap.QMA(2)', 'EXP')
('p', 'E', 'cocap.QMA(2)', 'EXP') => ('-d', 'E', 'cocap.QMA(2)', 'EXP')
('p', 'T', 'cocap.QMA(2)', 'EXP') => ('-d', 'T', 'cocap.QMA(2)', 'EXP')
('p', 'R', 'cocap.QMA(2)', 'EXP') => ('-d', 'R', 'cocap.QMA(2)', 'EXP')
('-d', 'A', 'co.QMA(2)', 'ALL') => ('-d', 'R', 'co.QMA(2)', 'ALL')
('-d', 'A', 'co.QMA(2)', 'ALL') => ('-d', 'AA', 'co.QMA(2)', 'ALL')
('-d', 'A', 'QMA(2)', 'ALL') => ('-d', 'R', 'QMA(2)', 'ALL')
('-d', 'A', 'QMA(2)', 'ALL') => ('-d', 'AA', 'QMA(2)', 'ALL')
('-d', 'AA', 'QMA(2)', 'ALL') => ('-d', 'T', 'QMA(2)', 'ALL')
('-d', 'AA', 'QMA(2)', 'ALL') => ('-d', 'EA', 'QMA(2)', 'ALL')
('-d', 'AA', 'co.QMA(2)', 'ALL') => ('-d', 'T', 'co.QMA(2)', 'ALL')
('-d', 'AA', 'co.QMA(2)', 'ALL') => ('-d', 'EA', 'co.QMA(2)', 'ALL')
('p', 'A', 'co.QMA(2)', 'ALL') => ('p', 'R', 'co.QMA(2)', 'ALL')
('p', 'A', 'co.QMA(2)', 'ALL') => ('p', 'AA', 'co.QMA(2)', 'ALL')
('p', 'A', 'QMA(2)', 'ALL') => ('p', 'R', 'QMA(2)', 'ALL')
('p', 'A', 'QMA(2)', 'ALL') => ('p', 'AA', 'QMA(2)', 'ALL')
('p', 'AA', 'QMA(2)', 'ALL') => ('p', 'T', 'QMA(2)', 'ALL')
('p', 'AA', 'QMA(2)', 'ALL') => ('p', 'EA', 'QMA(2)', 'ALL')
('p', 'AA', 'co.QMA(2)', 'ALL') => ('p', 'T', 'co.QMA(2)', 'ALL')
('p', 'AA', 'co.QMA(2)', 'ALL') => ('p', 'EA', 'co.QMA(2)', 'ALL')
('-d', 'A', 'co.QMA(2)', 'co.NEXP') => ('-d', 'R', 'co.QMA(2)', 'co.NEXP')
('-d', 'A', 'co.QMA(2)', 'co.NEXP') => ('-d', 'AA', 'co.QMA(2)', 'co.NEXP')
('-d', 'A', 'QMA(2)', 'NEXP') => ('-d', 'R', 'QMA(2)', 'NEXP')
('-d', 'A', 'QMA(2)', 'NEXP') => ('-d', 'AA', 'QMA(2)', 'NEXP')
('-d', 'A', 'QMA(2)', 'R') => ('-d', 'R', 'QMA(2)', 'R')
('-d', 'A', 'QMA(2)', 'R') => ('-d', 'AA', 'QMA(2)', 'R')
('-d', 'A', 'co.QMA(2)', 'R') => ('-d', 'R', 'co.QMA(2)', 'R')
('-d', 'A', 'co.QMA(2)', 'R') => ('-d', 'AA', 'co.QMA(2)', 'R')
('-d', 'A', 'co.QMA(2)', 'RE') => ('-d', 'R', 'co.QMA(2)', 'RE')
('-d', 'A', 'co.QMA(2)', 'RE') => ('-d', 'AA', 'co.QMA(2)', 'RE')
('-d', 'A', 'QMA(2)', 'co.RE') => ('-d', 'R', 'QMA(2)', 'co.RE')
('-d', 'A', 'QMA(2)', 'co.RE') => ('-d', 'AA', 'QMA(2)', 'co.RE')
('-d', 'AA', 'QMA(2)', 'co.RE') => ('-d', 'T', 'QMA(2)', 'co.RE')
('-d', 'AA', 'QMA(2)', 'co.RE') => ('-d', 'EA', 'QMA(2)', 'co.RE')
('-d', 'AA', 'co.QMA(2)', 'RE') => ('-d', 'T', 'co.QMA(2)', 'RE')
('-d', 'AA', 'co.QMA(2)', 'RE') => ('-d', 'EA', 'co.QMA(2)', 'RE')
('-d', 'A', 'co.QMA(2)', 'co.RE') => ('-d', 'R', 'co.QMA(2)', 'co.RE')
('-d', 'A', 'co.QMA(2)', 'co.RE') => ('-d', 'AA', 'co.QMA(2)', 'co.RE')
('-d', 'A', 'QMA(2)', 'RE') => ('-d', 'R', 'QMA(2)', 'RE')
('-d', 'A', 'QMA(2)', 'RE') => ('-d', 'AA', 'QMA(2)', 'RE')
('-d', 'AA', 'QMA(2)', 'RE') => ('-d', 'T', 'QMA(2)', 'RE')
('-d', 'AA', 'QMA(2)', 'RE') => ('-d', 'EA', 'QMA(2)', 'RE')
('-d', 'AA', 'co.QMA(2)', 'co.RE') => ('-d', 'T', 'co.QMA(2)', 'co.RE')
('-d', 'AA', 'co.QMA(2)', 'co.RE') => ('-d', 'EA', 'co.QMA(2)', 'co.RE')
('-d', 'AA', 'co.QMA(2)', 'R') => ('-d', 'T', 'co.QMA(2)', 'R')
('-d', 'AA', 'co.QMA(2)', 'R') => ('-d', 'EA', 'co.QMA(2)', 'R')
('-d', 'AA', 'QMA(2)', 'R') => ('-d', 'T', 'QMA(2)', 'R')
('-d', 'AA', 'QMA(2)', 'R') => ('-d', 'EA', 'QMA(2)', 'R')
('-d', 'A', 'QMA(2)', 'NEXP/poly') => ('-d', 'R', 'QMA(2)', 'NEXP/poly')
('-d', 'A', 'QMA(2)', 'NEXP/poly') => ('-d', 'AA', 'QMA(2)', 'NEXP/poly')
('-d', 'A', 'co.QMA(2)', 'NEXP/poly') => ('-d', 'R', 'co.QMA(2)', 'NEXP/poly')
('-d', 'A', 'co.QMA(2)', 'NEXP/poly') => ('-d', 'AA', 'co.QMA(2)', 'NEXP/poly')
('-d', 'AA', 'co.QMA(2)', 'NEXP/poly') => ('-d', 'T', 'co.QMA(2)', 'NEXP/poly')
('-d', 'AA', 'co.QMA(2)', 'NEXP/poly') => ('-d', 'EA', 'co.QMA(2)', 'NEXP/poly')
('-d', 'AA', 'QMA(2)', 'NEXP/poly') => ('-d', 'T', 'QMA(2)', 'NEXP/poly')
('-d', 'AA', 'QMA(2)', 'NEXP/poly') => ('-d', 'EA', 'QMA(2)', 'NEXP/poly')
('-d', 'AA', 'QMA(2)', 'NEXP') => ('-d', 'T', 'QMA(2)', 'NEXP')
('-d', 'AA', 'QMA(2)', 'NEXP') => ('-d', 'EA', 'QMA(2)', 'NEXP')
('-d', 'AA', 'co.QMA(2)', 'co.NEXP') => ('-d', 'T', 'co.QMA(2)', 'co.NEXP')
('-d', 'AA', 'co.QMA(2)', 'co.NEXP') => ('-d', 'EA', 'co.QMA(2)', 'co.NEXP')
('p', 'A', 'co.QMA(2)', 'co.NEXP') => ('p', 'R', 'co.QMA(2)', 'co.NEXP')
('p', 'A', 'co.QMA(2)', 'co.NEXP') => ('p', 'AA', 'co.QMA(2)', 'co.NEXP')
('p', 'A', 'QMA(2)', 'NEXP') => ('p', 'R', 'QMA(2)', 'NEXP')
('p', 'A', 'QMA(2)', 'NEXP') => ('p', 'AA', 'QMA(2)', 'NEXP')
('p', 'A', 'QMA(2)', 'R') => ('p', 'R', 'QMA(2)', 'R')
('p', 'A', 'QMA(2)', 'R') => ('p', 'AA', 'QMA(2)', 'R')
('p', 'A', 'co.QMA(2)', 'R') => ('p', 'R', 'co.QMA(2)', 'R')
('p', 'A', 'co.QMA(2)', 'R') => ('p', 'AA', 'co.QMA(2)', 'R')
('p', 'A', 'co.QMA(2)', 'RE') => ('p', 'R', 'co.QMA(2)', 'RE')
('p', 'A', 'co.QMA(2)', 'RE') => ('p', 'AA', 'co.QMA(2)', 'RE')
('p', 'A', 'QMA(2)', 'co.RE') => ('p', 'R', 'QMA(2)', 'co.RE')
('p', 'A', 'QMA(2)', 'co.RE') => ('p', 'AA', 'QMA(2)', 'co.RE')
('p', 'AA', 'QMA(2)', 'co.RE') => ('p', 'T', 'QMA(2)', 'co.RE')
('p', 'AA', 'QMA(2)', 'co.RE') => ('p', 'EA', 'QMA(2)', 'co.RE')
('p', 'AA', 'co.QMA(2)', 'RE') => ('p', 'T', 'co.QMA(2)', 'RE')
('p', 'AA', 'co.QMA(2)', 'RE') => ('p', 'EA', 'co.QMA(2)', 'RE')
('p', 'A', 'co.QMA(2)', 'co.RE') => ('p', 'R', 'co.QMA(2)', 'co.RE')
('p', 'A', 'co.QMA(2)', 'co.RE') => ('p', 'AA', 'co.QMA(2)', 'co.RE')
('p', 'A', 'QMA(2)', 'RE') => ('p', 'R', 'QMA(2)', 'RE')
('p', 'A', 'QMA(2)', 'RE') => ('p', 'AA', 'QMA(2)', 'RE')
('p', 'AA', 'QMA(2)', 'RE') => ('p', 'T', 'QMA(2)', 'RE')
('p', 'AA', 'QMA(2)', 'RE') => ('p', 'EA', 'QMA(2)', 'RE')
('p', 'AA', 'QMA(2)', 'R') => ('p', 'T', 'QMA(2)', 'R')
('p', 'AA', 'QMA(2)', 'R') => ('p', 'EA', 'QMA(2)', 'R')
('p', 'AA', 'co.QMA(2)', 'R') => ('p', 'T', 'co.QMA(2)', 'R')
('p', 'AA', 'co.QMA(2)', 'R') => ('p', 'EA', 'co.QMA(2)', 'R')
('p', 'AA', 'co.QMA(2)', 'co.RE') => ('p', 'T', 'co.QMA(2)', 'co.RE')
('p', 'AA', 'co.QMA(2)', 'co.RE') => ('p', 'EA', 'co.QMA(2)', 'co.RE')
('p', 'A', 'QMA(2)', 'NEXP/poly') => ('p', 'R', 'QMA(2)', 'NEXP/poly')
('p', 'A', 'QMA(2)', 'NEXP/poly') => ('p', 'AA', 'QMA(2)', 'NEXP/poly')
('p', 'A', 'co.QMA(2)', 'NEXP/poly') => ('p', 'R', 'co.QMA(2)', 'NEXP/poly')
('p', 'A', 'co.QMA(2)', 'NEXP/poly') => ('p', 'AA', 'co.QMA(2)', 'NEXP/poly')
('p', 'AA', 'co.QMA(2)', 'NEXP/poly') => ('p', 'T', 'co.QMA(2)', 'NEXP/poly')
('p', 'AA', 'co.QMA(2)', 'NEXP/poly') => ('p', 'EA', 'co.QMA(2)', 'NEXP/poly')
('p', 'AA', 'QMA(2)', 'NEXP/poly') => ('p', 'T', 'QMA(2)', 'NEXP/poly')
('p', 'AA', 'QMA(2)', 'NEXP/poly') => ('p', 'EA', 'QMA(2)', 'NEXP/poly')
('p', 'AA', 'QMA(2)', 'NEXP') => ('p', 'T', 'QMA(2)', 'NEXP')
('p', 'AA', 'QMA(2)', 'NEXP') => ('p', 'EA', 'QMA(2)', 'NEXP')
('p', 'AA', 'co.QMA(2)', 'co.NEXP') => ('p', 'T', 'co.QMA(2)', 'co.NEXP')
('p', 'AA', 'co.QMA(2)', 'co.NEXP') => ('p', 'EA', 'co.QMA(2)', 'co.NEXP')
('-d', 'A', 'co.QMA(2)', 'NEXP') => ('-d', 'R', 'co.QMA(2)', 'NEXP')
('-d', 'A', 'co.QMA(2)', 'NEXP') => ('-d', 'AA', 'co.QMA(2)', 'NEXP')
('-d', 'A', 'co.QMA(2)', 'cocap.NEXP') => ('-d', 'R', 'co.QMA(2)', 'cocap.NEXP')
('-d', 'A', 'co.QMA(2)', 'cocap.NEXP') => ('-d', 'AA', 'co.QMA(2)', 'cocap.NEXP')
('-d', 'A', 'QMA(2)', 'cocap.NEXP') => ('-d', 'R', 'QMA(2)', 'cocap.NEXP')
('-d', 'A', 'QMA(2)', 'cocap.NEXP') => ('-d', 'AA', 'QMA(2)', 'cocap.NEXP')
('-d', 'A', 'QMA(2)', 'co.NEXP') => ('-d', 'R', 'QMA(2)', 'co.NEXP')
('-d', 'A', 'QMA(2)', 'co.NEXP') => ('-d', 'AA', 'QMA(2)', 'co.NEXP')
('-d', 'AA', 'QMA(2)', 'co.NEXP') => ('-d', 'T', 'QMA(2)', 'co.NEXP')
('-d', 'AA', 'QMA(2)', 'co.NEXP') => ('-d', 'EA', 'QMA(2)', 'co.NEXP')
('-d', 'AA', 'QMA(2)', 'cocap.NEXP') => ('-d', 'T', 'QMA(2)', 'cocap.NEXP')
('-d', 'AA', 'QMA(2)', 'cocap.NEXP') => ('-d', 'EA', 'QMA(2)', 'cocap.NEXP')
('-d', 'AA', 'co.QMA(2)', 'cocap.NEXP') => ('-d', 'T', 'co.QMA(2)', 'cocap.NEXP')
('-d', 'AA', 'co.QMA(2)', 'cocap.NEXP') => ('-d', 'EA', 'co.QMA(2)', 'cocap.NEXP')
('-d', 'AA', 'co.QMA(2)', 'NEXP') => ('-d', 'T', 'co.QMA(2)', 'NEXP')
('-d', 'AA', 'co.QMA(2)', 'NEXP') => ('-d', 'EA', 'co.QMA(2)', 'NEXP')
('-d', 'T', 'co.QMA(2)', 'cocap.NEXP') => ('-d', 'E', 'co.QMA(2)', 'cocap.NEXP')
('-d', 'T', 'QMA(2)', 'cocap.NEXP') => ('-d', 'E', 'QMA(2)', 'cocap.NEXP')
('p', 'A', 'co.QMA(2)', 'NEXP') => ('p', 'R', 'co.QMA(2)', 'NEXP')
('p', 'A', 'co.QMA(2)', 'NEXP') => ('p', 'AA', 'co.QMA(2)', 'NEXP')
('p', 'A', 'co.QMA(2)', 'cocap.NEXP') => ('p', 'R', 'co.QMA(2)', 'cocap.NEXP')
('p', 'A', 'co.QMA(2)', 'cocap.NEXP') => ('p', 'AA', 'co.QMA(2)', 'cocap.NEXP')
('p', 'A', 'QMA(2)', 'cocap.NEXP') => ('p', 'R', 'QMA(2)', 'cocap.NEXP')
('p', 'A', 'QMA(2)', 'cocap.NEXP') => ('p', 'AA', 'QMA(2)', 'cocap.NEXP')
('p', 'A', 'QMA(2)', 'co.NEXP') => ('p', 'R', 'QMA(2)', 'co.NEXP')
('p', 'A', 'QMA(2)', 'co.NEXP') => ('p', 'AA', 'QMA(2)', 'co.NEXP')
('p', 'AA', 'QMA(2)', 'co.NEXP') => ('p', 'T', 'QMA(2)', 'co.NEXP')
('p', 'AA', 'QMA(2)', 'co.NEXP') => ('p', 'EA', 'QMA(2)', 'co.NEXP')
('p', 'AA', 'QMA(2)', 'cocap.NEXP') => ('p', 'T', 'QMA(2)', 'cocap.NEXP')
('p', 'AA', 'QMA(2)', 'cocap.NEXP') => ('p', 'EA', 'QMA(2)', 'cocap.NEXP')
('p', 'AA', 'co.QMA(2)', 'cocap.NEXP') => ('p', 'T', 'co.QMA(2)', 'cocap.NEXP')
('p', 'AA', 'co.QMA(2)', 'cocap.NEXP') => ('p', 'EA', 'co.QMA(2)', 'cocap.NEXP')
('p', 'AA', 'co.QMA(2)', 'NEXP') => ('p', 'T', 'co.QMA(2)', 'NEXP')
('p', 'AA', 'co.QMA(2)', 'NEXP') => ('p', 'EA', 'co.QMA(2)', 'NEXP')
('p', 'T', 'co.QMA(2)', 'cocap.NEXP') => ('p', 'E', 'co.QMA(2)', 'cocap.NEXP')
('p', 'T', 'QMA(2)', 'cocap.NEXP') => ('p', 'E', 'QMA(2)', 'cocap.NEXP')
('p', 'AA', 'co.QMA(2)', 'EXP') => ('-d', 'AA', 'co.QMA(2)', 'EXP')
('p', 'AA', 'co.QMA(2)', 'EXP') => ('p', 'T', 'co.QMA(2)', 'EXP')
('p', 'AA', 'co.QMA(2)', 'EXP') => ('p', 'EA', 'co.QMA(2)', 'EXP')
('p', 'AA', 'QMA(2)', 'EXP') => ('-d', 'AA', 'QMA(2)', 'EXP')
('p', 'AA', 'QMA(2)', 'EXP') => ('p', 'T', 'QMA(2)', 'EXP')
('p', 'AA', 'QMA(2)', 'EXP') => ('p', 'EA', 'QMA(2)', 'EXP')
('p', 'EA', 'QMA(2)', 'EXP') => ('-d', 'EA', 'QMA(2)', 'EXP')
('p', 'EA', 'QMA(2)', 'EXP') => ('p', 'E', 'QMA(2)', 'EXP')
('p', 'EA', 'co.QMA(2)', 'EXP') => ('-d', 'EA', 'co.QMA(2)', 'EXP')
('p', 'EA', 'co.QMA(2)', 'EXP') => ('p', 'E', 'co.QMA(2)', 'EXP')
('p', 'E', 'co.QMA(2)', 'EXP') => ('-d', 'E', 'co.QMA(2)', 'EXP')
('p', 'E', 'QMA(2)', 'EXP') => ('-d', 'E', 'QMA(2)', 'EXP')
('p', 'T', 'QMA(2)', 'EXP') => ('-d', 'T', 'QMA(2)', 'EXP')
('p', 'T', 'co.QMA(2)', 'EXP') => ('-d', 'T', 'co.QMA(2)', 'EXP')
('p', 'R', 'co.QMA(2)', 'EXP') => ('-d', 'R', 'co.QMA(2)', 'EXP')
('p', 'R', 'QMA(2)', 'EXP') => ('-d', 'R', 'QMA(2)', 'EXP')
('p', 'A', 'QAM', 'PP/poly') => ('-d', 'A', 'QAM', 'PP/poly')
('p', 'A', 'QAM', 'PP/poly') => ('p', 'R', 'QAM', 'PP/poly')
('p', 'A', 'QAM', 'PP/poly') => ('p', 'AA', 'QAM', 'PP/poly')
('p', 'A', 'co.QAM', 'PP/poly') => ('-d', 'A', 'co.QAM', 'PP/poly')
('p', 'A', 'co.QAM', 'PP/poly') => ('p', 'R', 'co.QAM', 'PP/poly')
('p', 'A', 'co.QAM', 'PP/poly') => ('p', 'AA', 'co.QAM', 'PP/poly')
('p', 'A', 'cocap.QAM', 'PP/poly') => ('-d', 'A', 'cocap.QAM', 'PP/poly')
('p', 'A', 'cocap.QAM', 'PP/poly') => ('p', 'R', 'cocap.QAM', 'PP/poly')
('p', 'A', 'cocap.QAM', 'PP/poly') => ('p', 'AA', 'cocap.QAM', 'PP/poly')
('d', 'A', 'ALL', 'cocap.QAM') => ('-p', 'A', 'ALL', 'cocap.QAM')
('d', 'A', 'ALL', 'QAM') => ('-p', 'A', 'ALL', 'QAM')
('d', 'A', 'ALL', 'co.QAM') => ('-p', 'A', 'ALL', 'co.QAM')
('d', 'A', 'PP/poly', 'BQP') => ('-p', 'A', 'PP/poly', 'BQP')
('p', 'A', 'cocap.QCMA', 'PP/poly') => ('-d', 'A', 'cocap.QCMA', 'PP/poly')
('p', 'A', 'cocap.QCMA', 'PP/poly') => ('p', 'R', 'cocap.QCMA', 'PP/poly')
('p', 'A', 'cocap.QCMA', 'PP/poly') => ('p', 'AA', 'cocap.QCMA', 'PP/poly')
('-d', 'A', 'cocap.QCMA', 'PSPACE/poly') => ('-d', 'R', 'cocap.QCMA', 'PSPACE/poly')
('-d', 'A', 'cocap.QCMA', 'PSPACE/poly') => ('-d', 'AA', 'cocap.QCMA', 'PSPACE/poly')
('-d', 'AA', 'cocap.QCMA', 'PSPACE/poly') => ('-d', 'T', 'cocap.QCMA', 'PSPACE/poly')
('-d', 'AA', 'cocap.QCMA', 'PSPACE/poly') => ('-d', 'EA', 'cocap.QCMA', 'PSPACE/poly')
('p', 'A', 'cocap.QCMA', 'PSPACE/poly') => ('p', 'R', 'cocap.QCMA', 'PSPACE/poly')
('p', 'A', 'cocap.QCMA', 'PSPACE/poly') => ('p', 'AA', 'cocap.QCMA', 'PSPACE/poly')
('p', 'AA', 'cocap.QCMA', 'PSPACE/poly') => ('p', 'T', 'cocap.QCMA', 'PSPACE/poly')
('p', 'AA', 'cocap.QCMA', 'PSPACE/poly') => ('p', 'EA', 'cocap.QCMA', 'PSPACE/poly')
('p', 'A', 'cocap.NP', 'PP/poly') => ('-d', 'A', 'cocap.NP', 'PP/poly')
('p', 'A', 'cocap.NP', 'PP/poly') => ('p', 'AA', 'cocap.NP', 'PP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'PP/poly') => ('-d', 'A', '(NP-cap-coNP)/poly', 'PP/poly')
('p', 'A', '(NP-cap-coNP)/poly', 'PP/poly') => ('p', 'AA', '(NP-cap-coNP)/poly', 'PP/poly')
('p', 'A', 'ZPP', 'PP/poly') => ('-d', 'A', 'ZPP', 'PP/poly')
('p', 'A', 'ZPP', 'PP/poly') => ('p', 'AA', 'ZPP', 'PP/poly')
('p', 'AA', 'ZPP', 'PP/poly') => ('-d', 'AA', 'ZPP', 'PP/poly')
('p', 'AA', 'ZPP', 'PP/poly') => ('p', 'T', 'ZPP', 'PP/poly')
('p', 'AA', 'ZPP', 'PP/poly') => ('p', 'EA', 'ZPP', 'PP/poly')
('p', 'EA', 'ZPP', 'PP/poly') => ('-d', 'EA', 'ZPP', 'PP/poly')
('p', 'T', 'ZPP', 'PP/poly') => ('-d', 'T', 'ZPP', 'PP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'PP/poly') => ('-d', 'AA', '(NP-cap-coNP)/poly', 'PP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'PP/poly') => ('p', 'T', '(NP-cap-coNP)/poly', 'PP/poly')
('p', 'AA', '(NP-cap-coNP)/poly', 'PP/poly') => ('p', 'EA', '(NP-cap-coNP)/poly', 'PP/poly')
('p', 'AA', 'cocap.NP', 'PP/poly') => ('-d', 'AA', 'cocap.NP', 'PP/poly')
('p', 'AA', 'cocap.NP', 'PP/poly') => ('p', 'T', 'cocap.NP', 'PP/poly')
('p', 'AA', 'cocap.NP', 'PP/poly') => ('p', 'EA', 'cocap.NP', 'PP/poly')
('p', 'EA', 'cocap.NP', 'PP/poly') => ('-d', 'EA', 'cocap.NP', 'PP/poly')
('p', 'EA', '(NP-cap-coNP)/poly', 'PP/poly') => ('-d', 'EA', '(NP-cap-coNP)/poly', 'PP/poly')
('p', 'T', 'cocap.NP', 'PP/poly') => ('-d', 'T', 'cocap.NP', 'PP/poly')
('p', 'T', '(NP-cap-coNP)/poly', 'PP/poly') => ('-d', 'T', '(NP-cap-coNP)/poly', 'PP/poly')
('p', 'A', 'cocap.MA', 'PP/poly') => ('-d', 'A', 'cocap.MA', 'PP/poly')
('p', 'A', 'cocap.MA', 'PP/poly') => ('p', 'AA', 'cocap.MA', 'PP/poly')
('p', 'AA', 'cocap.MA', 'PP/poly') => ('-d', 'AA', 'cocap.MA', 'PP/poly')
('p', 'AA', 'cocap.MA', 'PP/poly') => ('p', 'T', 'cocap.MA', 'PP/poly')
('p', 'AA', 'cocap.MA', 'PP/poly') => ('p', 'EA', 'cocap.MA', 'PP/poly')
('p', 'EA', 'cocap.MA', 'PP/poly') => ('-d', 'EA', 'cocap.MA', 'PP/poly')
('p', 'T', 'cocap.MA', 'PP/poly') => ('-d', 'T', 'cocap.MA', 'PP/poly')
('p', 'AA', 'cocap.QCMA', 'PP/poly') => ('-d', 'AA', 'cocap.QCMA', 'PP/poly')
('p', 'AA', 'cocap.QCMA', 'PP/poly') => ('p', 'T', 'cocap.QCMA', 'PP/poly')
('p', 'AA', 'cocap.QCMA', 'PP/poly') => ('p', 'EA', 'cocap.QCMA', 'PP/poly')
('p', 'EA', 'cocap.QCMA', 'PP/poly') => ('-d', 'EA', 'cocap.QCMA', 'PP/poly')
('p', 'T', 'cocap.QCMA', 'PP/poly') => ('-d', 'T', 'cocap.QCMA', 'PP/poly')
('p', 'R', 'cocap.QCMA', 'PP/poly') => ('-d', 'R', 'cocap.QCMA', 'PP/poly')
('-d', 'A', 'cocap.QAM', 'PSPACE/poly') => ('-d', 'R', 'cocap.QAM', 'PSPACE/poly')
('-d', 'A', 'cocap.QAM', 'PSPACE/poly') => ('-d', 'AA', 'cocap.QAM', 'PSPACE/poly')
('-d', 'A', 'cocap.QMA', 'PSPACE/poly') => ('-d', 'R', 'cocap.QMA', 'PSPACE/poly')
('-d', 'A', 'cocap.QMA', 'PSPACE/poly') => ('-d', 'AA', 'cocap.QMA', 'PSPACE/poly')
('-d', 'AA', 'cocap.QMA', 'PSPACE/poly') => ('-d', 'T', 'cocap.QMA', 'PSPACE/poly')
('-d', 'AA', 'cocap.QMA', 'PSPACE/poly') => ('-d', 'EA', 'cocap.QMA', 'PSPACE/poly')
('-d', 'AA', 'cocap.QAM', 'PSPACE/poly') => ('-d', 'T', 'cocap.QAM', 'PSPACE/poly')
('-d', 'AA', 'cocap.QAM', 'PSPACE/poly') => ('-d', 'EA', 'cocap.QAM', 'PSPACE/poly')
('p', 'A', 'cocap.QAM', 'PSPACE/poly') => ('p', 'R', 'cocap.QAM', 'PSPACE/poly')
('p', 'A', 'cocap.QAM', 'PSPACE/poly') => ('p', 'AA', 'cocap.QAM', 'PSPACE/poly')
('p', 'A', 'cocap.QMA', 'PSPACE/poly') => ('p', 'R', 'cocap.QMA', 'PSPACE/poly')
('p', 'A', 'cocap.QMA', 'PSPACE/poly') => ('p', 'AA', 'cocap.QMA', 'PSPACE/poly')
('p', 'AA', 'cocap.QMA', 'PSPACE/poly') => ('p', 'T', 'cocap.QMA', 'PSPACE/poly')
('p', 'AA', 'cocap.QMA', 'PSPACE/poly') => ('p', 'EA', 'cocap.QMA', 'PSPACE/poly')
('p', 'AA', 'cocap.QAM', 'PSPACE/poly') => ('p', 'T', 'cocap.QAM', 'PSPACE/poly')
('p', 'AA', 'cocap.QAM', 'PSPACE/poly') => ('p', 'EA', 'cocap.QAM', 'PSPACE/poly')
('p', 'A', 'cocap.QMA', 'PP/poly') => ('-d', 'A', 'cocap.QMA', 'PP/poly')
('p', 'A', 'cocap.QMA', 'PP/poly') => ('p', 'R', 'cocap.QMA', 'PP/poly')
('p', 'A', 'cocap.QMA', 'PP/poly') => ('p', 'AA', 'cocap.QMA', 'PP/poly')
('p', 'AA', 'cocap.QMA', 'PP/poly') => ('-d', 'AA', 'cocap.QMA', 'PP/poly')
('p', 'AA', 'cocap.QMA', 'PP/poly') => ('p', 'T', 'cocap.QMA', 'PP/poly')
('p', 'AA', 'cocap.QMA', 'PP/poly') => ('p', 'EA', 'cocap.QMA', 'PP/poly')
('p', 'EA', 'cocap.QMA', 'PP/poly') => ('-d', 'EA', 'cocap.QMA', 'PP/poly')
('p', 'T', 'cocap.QMA', 'PP/poly') => ('-d', 'T', 'cocap.QMA', 'PP/poly')
('p', 'R', 'cocap.QMA', 'PP/poly') => ('-d', 'R', 'cocap.QMA', 'PP/poly')
('p', 'AA', 'cocap.QAM', 'PP/poly') => ('-d', 'AA', 'cocap.QAM', 'PP/poly')
('p', 'AA', 'cocap.QAM', 'PP/poly') => ('p', 'T', 'cocap.QAM', 'PP/poly')
('p', 'AA', 'cocap.QAM', 'PP/poly') => ('p', 'EA', 'cocap.QAM', 'PP/poly')
('p', 'EA', 'cocap.QAM', 'PP/poly') => ('-d', 'EA', 'cocap.QAM', 'PP/poly')
('p', 'T', 'cocap.QAM', 'PP/poly') => ('-d', 'T', 'cocap.QAM', 'PP/poly')
('p', 'R', 'cocap.QAM', 'PP/poly') => ('-d', 'R', 'cocap.QAM', 'PP/poly')
('p', 'A', 'co.MA', 'PP/poly') => ('-d', 'A', 'co.MA', 'PP/poly')
('p', 'A', 'co.MA', 'PP/poly') => ('p', 'AA', 'co.MA', 'PP/poly')
('p', 'A', 'MA', 'PP/poly') => ('-d', 'A', 'MA', 'PP/poly')
('p', 'A', 'MA', 'PP/poly') => ('p', 'AA', 'MA', 'PP/poly')
('p', 'A', 'RP', 'PP/poly') => ('-d', 'A', 'RP', 'PP/poly')
('p', 'A', 'RP', 'PP/poly') => ('p', 'AA', 'RP', 'PP/poly')
('p', 'A', 'co.RP', 'PP/poly') => ('-d', 'A', 'co.RP', 'PP/poly')
('p', 'A', 'co.RP', 'PP/poly') => ('p', 'AA', 'co.RP', 'PP/poly')
('p', 'AA', 'co.RP', 'PP/poly') => ('-d', 'AA', 'co.RP', 'PP/poly')
('p', 'AA', 'co.RP', 'PP/poly') => ('p', 'T', 'co.RP', 'PP/poly')
('p', 'AA', 'co.RP', 'PP/poly') => ('p', 'EA', 'co.RP', 'PP/poly')
('p', 'AA', 'RP', 'PP/poly') => ('-d', 'AA', 'RP', 'PP/poly')
('p', 'AA', 'RP', 'PP/poly') => ('p', 'T', 'RP', 'PP/poly')
('p', 'AA', 'RP', 'PP/poly') => ('p', 'EA', 'RP', 'PP/poly')
('p', 'EA', 'RP', 'PP/poly') => ('-d', 'EA', 'RP', 'PP/poly')
('p', 'EA', 'co.RP', 'PP/poly') => ('-d', 'EA', 'co.RP', 'PP/poly')
('p', 'T', 'RP', 'PP/poly') => ('-d', 'T', 'RP', 'PP/poly')
('p', 'T', 'co.RP', 'PP/poly') => ('-d', 'T', 'co.RP', 'PP/poly')
('p', 'A', 'NP', 'PP/poly') => ('-d', 'A', 'NP', 'PP/poly')
('p', 'A', 'NP', 'PP/poly') => ('p', 'AA', 'NP', 'PP/poly')
('p', 'A', 'co.NP', 'PP/poly') => ('-d', 'A', 'co.NP', 'PP/poly')
('p', 'A', 'co.NP', 'PP/poly') => ('p', 'AA', 'co.NP', 'PP/poly')
('p', 'A', 'co.NP/poly', 'PP/poly') => ('-d', 'A', 'co.NP/poly', 'PP/poly')
('p', 'A', 'co.NP/poly', 'PP/poly') => ('p', 'AA', 'co.NP/poly', 'PP/poly')
('p', 'A', 'NP/poly', 'PP/poly') => ('-d', 'A', 'NP/poly', 'PP/poly')
('p', 'A', 'NP/poly', 'PP/poly') => ('p', 'AA', 'NP/poly', 'PP/poly')
('p', 'A', 'cocap.NP/poly', 'PP/poly') => ('-d', 'A', 'cocap.NP/poly', 'PP/poly')
('p', 'A', 'cocap.NP/poly', 'PP/poly') => ('p', 'AA', 'cocap.NP/poly', 'PP/poly')
('p', 'A', 'cocap.SBP', 'PP/poly') => ('-d', 'A', 'cocap.SBP', 'PP/poly')
('p', 'A', 'cocap.SBP', 'PP/poly') => ('p', 'AA', 'cocap.SBP', 'PP/poly')
('p', 'AA', 'cocap.SBP', 'PP/poly') => ('-d', 'AA', 'cocap.SBP', 'PP/poly')
('p', 'AA', 'cocap.SBP', 'PP/poly') => ('p', 'T', 'cocap.SBP', 'PP/poly')
('p', 'AA', 'cocap.SBP', 'PP/poly') => ('p', 'EA', 'cocap.SBP', 'PP/poly')
('p', 'EA', 'cocap.SBP', 'PP/poly') => ('-d', 'EA', 'cocap.SBP', 'PP/poly')
('p', 'T', 'cocap.SBP', 'PP/poly') => ('-d', 'T', 'cocap.SBP', 'PP/poly')
('p', 'A', 'cocap.AM', 'PP/poly') => ('-d', 'A', 'cocap.AM', 'PP/poly')
('p', 'A', 'cocap.AM', 'PP/poly') => ('p', 'AA', 'cocap.AM', 'PP/poly')
('p', 'AA', 'cocap.AM', 'PP/poly') => ('-d', 'AA', 'cocap.AM', 'PP/poly')
('p', 'AA', 'cocap.AM', 'PP/poly') => ('p', 'T', 'cocap.AM', 'PP/poly')
('p', 'AA', 'cocap.AM', 'PP/poly') => ('p', 'EA', 'cocap.AM', 'PP/poly')
('p', 'EA', 'cocap.AM', 'PP/poly') => ('-d', 'EA', 'cocap.AM', 'PP/poly')
('p', 'T', 'cocap.AM', 'PP/poly') => ('-d', 'T', 'cocap.AM', 'PP/poly')
('p', 'AA', 'cocap.NP/poly', 'PP/poly') => ('-d', 'AA', 'cocap.NP/poly', 'PP/poly')
('p', 'AA', 'cocap.NP/poly', 'PP/poly') => ('p', 'T', 'cocap.NP/poly', 'PP/poly')
('p', 'AA', 'cocap.NP/poly', 'PP/poly') => ('p', 'EA', 'cocap.NP/poly', 'PP/poly')
('p', 'EA', 'cocap.NP/poly', 'PP/poly') => ('-d', 'EA', 'cocap.NP/poly', 'PP/poly')
('p', 'T', 'cocap.NP/poly', 'PP/poly') => ('-d', 'T', 'cocap.NP/poly', 'PP/poly')
('p', 'A', 'SBP', 'PP/poly') => ('-d', 'A', 'SBP', 'PP/poly')
('p', 'A', 'SBP', 'PP/poly') => ('p', 'AA', 'SBP', 'PP/poly')
('p', 'A', 'co.SBP', 'PP/poly') => ('-d', 'A', 'co.SBP', 'PP/poly')
('p', 'A', 'co.SBP', 'PP/poly') => ('p', 'AA', 'co.SBP', 'PP/poly')
('d', 'A', 'PP/poly', 'BQP/mpoly') => ('-p', 'A', 'PP/poly', 'BQP/mpoly')
('d', 'A', 'PP/poly', 'BQP/qpoly') => ('-p', 'A', 'PP/poly', 'BQP/qpoly')
('p', 'AA', 'co.SBP', 'PP/poly') => ('-d', 'AA', 'co.SBP', 'PP/poly')
('p', 'AA', 'co.SBP', 'PP/poly') => ('p', 'T', 'co.SBP', 'PP/poly')
('p', 'AA', 'co.SBP', 'PP/poly') => ('p', 'EA', 'co.SBP', 'PP/poly')
('p', 'AA', 'SBP', 'PP/poly') => ('-d', 'AA', 'SBP', 'PP/poly')
('p', 'AA', 'SBP', 'PP/poly') => ('p', 'T', 'SBP', 'PP/poly')
('p', 'AA', 'SBP', 'PP/poly') => ('p', 'EA', 'SBP', 'PP/poly')
('p', 'AA', 'NP', 'PP/poly') => ('-d', 'AA', 'NP', 'PP/poly')
('p', 'AA', 'NP', 'PP/poly') => ('p', 'T', 'NP', 'PP/poly')
('p', 'AA', 'NP', 'PP/poly') => ('p', 'EA', 'NP', 'PP/poly')
('p', 'AA', 'co.NP', 'PP/poly') => ('-d', 'AA', 'co.NP', 'PP/poly')
('p', 'AA', 'co.NP', 'PP/poly') => ('p', 'T', 'co.NP', 'PP/poly')
('p', 'AA', 'co.NP', 'PP/poly') => ('p', 'EA', 'co.NP', 'PP/poly')
('p', 'AA', 'co.NP/poly', 'PP/poly') => ('-d', 'AA', 'co.NP/poly', 'PP/poly')
('p', 'AA', 'co.NP/poly', 'PP/poly') => ('p', 'T', 'co.NP/poly', 'PP/poly')
('p', 'AA', 'co.NP/poly', 'PP/poly') => ('p', 'EA', 'co.NP/poly', 'PP/poly')
('p', 'AA', 'NP/poly', 'PP/poly') => ('-d', 'AA', 'NP/poly', 'PP/poly')
('p', 'AA', 'NP/poly', 'PP/poly') => ('p', 'T', 'NP/poly', 'PP/poly')
('p', 'AA', 'NP/poly', 'PP/poly') => ('p', 'EA', 'NP/poly', 'PP/poly')
('p', 'EA', 'NP', 'PP/poly') => ('-d', 'EA', 'NP', 'PP/poly')
('p', 'EA', 'co.NP', 'PP/poly') => ('-d', 'EA', 'co.NP', 'PP/poly')
('p', 'EA', 'co.NP/poly', 'PP/poly') => ('-d', 'EA', 'co.NP/poly', 'PP/poly')
('p', 'EA', 'NP/poly', 'PP/poly') => ('-d', 'EA', 'NP/poly', 'PP/poly')
('p', 'EA', 'SBP', 'PP/poly') => ('-d', 'EA', 'SBP', 'PP/poly')
('p', 'EA', 'co.SBP', 'PP/poly') => ('-d', 'EA', 'co.SBP', 'PP/poly')
('p', 'EA', 'co.MA', 'PP/poly') => ('-d', 'EA', 'co.MA', 'PP/poly')
('p', 'EA', 'MA', 'PP/poly') => ('-d', 'EA', 'MA', 'PP/poly')
('p', 'AA', 'AM', 'PP/poly') => ('-d', 'AA', 'AM', 'PP/poly')
('p', 'AA', 'AM', 'PP/poly') => ('p', 'T', 'AM', 'PP/poly')
('p', 'AA', 'co.AM', 'PP/poly') => ('-d', 'AA', 'co.AM', 'PP/poly')
('p', 'AA', 'co.AM', 'PP/poly') => ('p', 'T', 'co.AM', 'PP/poly')
('p', 'AA', 'co.MA', 'PP/poly') => ('-d', 'AA', 'co.MA', 'PP/poly')
('p', 'AA', 'co.MA', 'PP/poly') => ('p', 'T', 'co.MA', 'PP/poly')
('p', 'AA', 'MA', 'PP/poly') => ('-d', 'AA', 'MA', 'PP/poly')
('p', 'AA', 'MA', 'PP/poly') => ('p', 'T', 'MA', 'PP/poly')
('p', 'T', 'MA', 'PP/poly') => ('-d', 'T', 'MA', 'PP/poly')
('p', 'T', 'co.MA', 'PP/poly') => ('-d', 'T', 'co.MA', 'PP/poly')
('p', 'T', 'co.NP', 'PP/poly') => ('-d', 'T', 'co.NP', 'PP/poly')
('p', 'T', 'NP', 'PP/poly') => ('-d', 'T', 'NP', 'PP/poly')
('p', 'T', 'NP/poly', 'PP/poly') => ('-d', 'T', 'NP/poly', 'PP/poly')
('p', 'T', 'co.NP/poly', 'PP/poly') => ('-d', 'T', 'co.NP/poly', 'PP/poly')
('p', 'T', 'co.SBP', 'PP/poly') => ('-d', 'T', 'co.SBP', 'PP/poly')
('p', 'T', 'SBP', 'PP/poly') => ('-d', 'T', 'SBP', 'PP/poly')
('-d', 'A', 'co.QAM', 'PSPACE/poly') => ('-d', 'R', 'co.QAM', 'PSPACE/poly')
('-d', 'A', 'co.QAM', 'PSPACE/poly') => ('-d', 'AA', 'co.QAM', 'PSPACE/poly')
('-d', 'A', 'QAM', 'PSPACE/poly') => ('-d', 'R', 'QAM', 'PSPACE/poly')
('-d', 'A', 'QAM', 'PSPACE/poly') => ('-d', 'AA', 'QAM', 'PSPACE/poly')
('-d', 'A', 'QMA', 'PSPACE/poly') => ('-d', 'R', 'QMA', 'PSPACE/poly')
('-d', 'A', 'QMA', 'PSPACE/poly') => ('-d', 'AA', 'QMA', 'PSPACE/poly')
('-d', 'A', 'co.QMA', 'PSPACE/poly') => ('-d', 'R', 'co.QMA', 'PSPACE/poly')
('-d', 'A', 'co.QMA', 'PSPACE/poly') => ('-d', 'AA', 'co.QMA', 'PSPACE/poly')
('-d', 'A', 'co.QCMA', 'PSPACE/poly') => ('-d', 'R', 'co.QCMA', 'PSPACE/poly')
('-d', 'A', 'co.QCMA', 'PSPACE/poly') => ('-d', 'AA', 'co.QCMA', 'PSPACE/poly')
('-d', 'A', 'QCMA', 'PSPACE/poly') => ('-d', 'R', 'QCMA', 'PSPACE/poly')
('-d', 'A', 'QCMA', 'PSPACE/poly') => ('-d', 'AA', 'QCMA', 'PSPACE/poly')
('-d', 'AA', 'QCMA', 'PSPACE/poly') => ('-d', 'T', 'QCMA', 'PSPACE/poly')
('-d', 'AA', 'QCMA', 'PSPACE/poly') => ('-d', 'EA', 'QCMA', 'PSPACE/poly')
('-d', 'AA', 'co.QCMA', 'PSPACE/poly') => ('-d', 'T', 'co.QCMA', 'PSPACE/poly')
('-d', 'AA', 'co.QCMA', 'PSPACE/poly') => ('-d', 'EA', 'co.QCMA', 'PSPACE/poly')
('-d', 'AA', 'co.QMA', 'PSPACE/poly') => ('-d', 'T', 'co.QMA', 'PSPACE/poly')
('-d', 'AA', 'co.QMA', 'PSPACE/poly') => ('-d', 'EA', 'co.QMA', 'PSPACE/poly')
('-d', 'AA', 'QMA', 'PSPACE/poly') => ('-d', 'T', 'QMA', 'PSPACE/poly')
('-d', 'AA', 'QMA', 'PSPACE/poly') => ('-d', 'EA', 'QMA', 'PSPACE/poly')
('-d', 'AA', 'QAM', 'PSPACE/poly') => ('-d', 'T', 'QAM', 'PSPACE/poly')
('-d', 'AA', 'QAM', 'PSPACE/poly') => ('-d', 'EA', 'QAM', 'PSPACE/poly')
('-d', 'AA', 'co.QAM', 'PSPACE/poly') => ('-d', 'T', 'co.QAM', 'PSPACE/poly')
('-d', 'AA', 'co.QAM', 'PSPACE/poly') => ('-d', 'EA', 'co.QAM', 'PSPACE/poly')
('p', 'A', 'co.QAM', 'PSPACE/poly') => ('p', 'R', 'co.QAM', 'PSPACE/poly')
('p', 'A', 'co.QAM', 'PSPACE/poly') => ('p', 'AA', 'co.QAM', 'PSPACE/poly')
('p', 'A', 'QAM', 'PSPACE/poly') => ('p', 'R', 'QAM', 'PSPACE/poly')
('p', 'A', 'QAM', 'PSPACE/poly') => ('p', 'AA', 'QAM', 'PSPACE/poly')
('p', 'A', 'QMA', 'PSPACE/poly') => ('p', 'R', 'QMA', 'PSPACE/poly')
('p', 'A', 'QMA', 'PSPACE/poly') => ('p', 'AA', 'QMA', 'PSPACE/poly')
('p', 'A', 'co.QMA', 'PSPACE/poly') => ('p', 'R', 'co.QMA', 'PSPACE/poly')
('p', 'A', 'co.QMA', 'PSPACE/poly') => ('p', 'AA', 'co.QMA', 'PSPACE/poly')
('p', 'A', 'co.QCMA', 'PSPACE/poly') => ('p', 'R', 'co.QCMA', 'PSPACE/poly')
('p', 'A', 'co.QCMA', 'PSPACE/poly') => ('p', 'AA', 'co.QCMA', 'PSPACE/poly')
('p', 'A', 'QCMA', 'PSPACE/poly') => ('p', 'R', 'QCMA', 'PSPACE/poly')
('p', 'A', 'QCMA', 'PSPACE/poly') => ('p', 'AA', 'QCMA', 'PSPACE/poly')
('p', 'AA', 'QCMA', 'PSPACE/poly') => ('p', 'T', 'QCMA', 'PSPACE/poly')
('p', 'AA', 'QCMA', 'PSPACE/poly') => ('p', 'EA', 'QCMA', 'PSPACE/poly')
('p', 'AA', 'co.QCMA', 'PSPACE/poly') => ('p', 'T', 'co.QCMA', 'PSPACE/poly')
('p', 'AA', 'co.QCMA', 'PSPACE/poly') => ('p', 'EA', 'co.QCMA', 'PSPACE/poly')
('p', 'AA', 'co.QMA', 'PSPACE/poly') => ('p', 'T', 'co.QMA', 'PSPACE/poly')
('p', 'AA', 'co.QMA', 'PSPACE/poly') => ('p', 'EA', 'co.QMA', 'PSPACE/poly')
('p', 'AA', 'QMA', 'PSPACE/poly') => ('p', 'T', 'QMA', 'PSPACE/poly')
('p', 'AA', 'QMA', 'PSPACE/poly') => ('p', 'EA', 'QMA', 'PSPACE/poly')
('p', 'AA', 'QAM', 'PSPACE/poly') => ('p', 'T', 'QAM', 'PSPACE/poly')
('p', 'AA', 'QAM', 'PSPACE/poly') => ('p', 'EA', 'QAM', 'PSPACE/poly')
('p', 'AA', 'co.QAM', 'PSPACE/poly') => ('p', 'T', 'co.QAM', 'PSPACE/poly')
('p', 'AA', 'co.QAM', 'PSPACE/poly') => ('p', 'EA', 'co.QAM', 'PSPACE/poly')
('p', 'A', 'co.QMA', 'PP/poly') => ('-d', 'A', 'co.QMA', 'PP/poly')
('p', 'A', 'co.QMA', 'PP/poly') => ('p', 'R', 'co.QMA', 'PP/poly')
('p', 'A', 'co.QMA', 'PP/poly') => ('p', 'AA', 'co.QMA', 'PP/poly')
('p', 'A', 'QMA', 'PP/poly') => ('-d', 'A', 'QMA', 'PP/poly')
('p', 'A', 'QMA', 'PP/poly') => ('p', 'R', 'QMA', 'PP/poly')
('p', 'A', 'QMA', 'PP/poly') => ('p', 'AA', 'QMA', 'PP/poly')
('p', 'A', 'QCMA', 'PP/poly') => ('-d', 'A', 'QCMA', 'PP/poly')
('p', 'A', 'QCMA', 'PP/poly') => ('p', 'R', 'QCMA', 'PP/poly')
('p', 'A', 'QCMA', 'PP/poly') => ('p', 'AA', 'QCMA', 'PP/poly')
('p', 'A', 'co.QCMA', 'PP/poly') => ('-d', 'A', 'co.QCMA', 'PP/poly')
('p', 'A', 'co.QCMA', 'PP/poly') => ('p', 'R', 'co.QCMA', 'PP/poly')
('p', 'A', 'co.QCMA', 'PP/poly') => ('p', 'AA', 'co.QCMA', 'PP/poly')
('p', 'AA', 'co.QCMA', 'PP/poly') => ('-d', 'AA', 'co.QCMA', 'PP/poly')
('p', 'AA', 'co.QCMA', 'PP/poly') => ('p', 'T', 'co.QCMA', 'PP/poly')
('p', 'AA', 'co.QCMA', 'PP/poly') => ('p', 'EA', 'co.QCMA', 'PP/poly')
('p', 'AA', 'QCMA', 'PP/poly') => ('-d', 'AA', 'QCMA', 'PP/poly')
('p', 'AA', 'QCMA', 'PP/poly') => ('p', 'T', 'QCMA', 'PP/poly')
('p', 'AA', 'QCMA', 'PP/poly') => ('p', 'EA', 'QCMA', 'PP/poly')
('p', 'EA', 'QCMA', 'PP/poly') => ('-d', 'EA', 'QCMA', 'PP/poly')
('p', 'EA', 'co.QCMA', 'PP/poly') => ('-d', 'EA', 'co.QCMA', 'PP/poly')
('p', 'T', 'QCMA', 'PP/poly') => ('-d', 'T', 'QCMA', 'PP/poly')
('p', 'T', 'co.QCMA', 'PP/poly') => ('-d', 'T', 'co.QCMA', 'PP/poly')
('p', 'R', 'co.QCMA', 'PP/poly') => ('-d', 'R', 'co.QCMA', 'PP/poly')
('p', 'R', 'QCMA', 'PP/poly') => ('-d', 'R', 'QCMA', 'PP/poly')
('p', 'AA', 'QMA', 'PP/poly') => ('-d', 'AA', 'QMA', 'PP/poly')
('p', 'AA', 'QMA', 'PP/poly') => ('p', 'T', 'QMA', 'PP/poly')
('p', 'AA', 'QMA', 'PP/poly') => ('p', 'EA', 'QMA', 'PP/poly')
('p', 'AA', 'co.QMA', 'PP/poly') => ('-d', 'AA', 'co.QMA', 'PP/poly')
('p', 'AA', 'co.QMA', 'PP/poly') => ('p', 'T', 'co.QMA', 'PP/poly')
('p', 'AA', 'co.QMA', 'PP/poly') => ('p', 'EA', 'co.QMA', 'PP/poly')
('p', 'EA', 'co.QMA', 'PP/poly') => ('-d', 'EA', 'co.QMA', 'PP/poly')
('p', 'EA', 'QMA', 'PP/poly') => ('-d', 'EA', 'QMA', 'PP/poly')
('p', 'T', 'co.QMA', 'PP/poly') => ('-d', 'T', 'co.QMA', 'PP/poly')
('p', 'T', 'QMA', 'PP/poly') => ('-d', 'T', 'QMA', 'PP/poly')
('p', 'R', 'QMA', 'PP/poly') => ('-d', 'R', 'QMA', 'PP/poly')
('p', 'R', 'co.QMA', 'PP/poly') => ('-d', 'R', 'co.QMA', 'PP/poly')
('p', 'AA', 'co.QAM', 'PP/poly') => ('-d', 'AA', 'co.QAM', 'PP/poly')
('p', 'AA', 'co.QAM', 'PP/poly') => ('p', 'T', 'co.QAM', 'PP/poly')
('p', 'AA', 'co.QAM', 'PP/poly') => ('p', 'EA', 'co.QAM', 'PP/poly')
('p', 'AA', 'QAM', 'PP/poly') => ('-d', 'AA', 'QAM', 'PP/poly')
('p', 'AA', 'QAM', 'PP/poly') => ('p', 'T', 'QAM', 'PP/poly')
('p', 'AA', 'QAM', 'PP/poly') => ('p', 'EA', 'QAM', 'PP/poly')
('p', 'EA', 'QAM', 'PP/poly') => ('-d', 'EA', 'QAM', 'PP/poly')
('p', 'EA', 'co.QAM', 'PP/poly') => ('-d', 'EA', 'co.QAM', 'PP/poly')
('p', 'T', 'QAM', 'PP/poly') => ('-d', 'T', 'QAM', 'PP/poly')
('p', 'T', 'co.QAM', 'PP/poly') => ('-d', 'T', 'co.QAM', 'PP/poly')
('p', 'R', 'co.QAM', 'PP/poly') => ('-d', 'R', 'co.QAM', 'PP/poly')
('p', 'R', 'QAM', 'PP/poly') => ('-d', 'R', 'QAM', 'PP/poly')
('p', 'A', 'QIP', 'QMIP_le') => ('-d', 'A', 'QIP', 'QMIP_le')
('p', 'A', 'QIP', 'QMIP_le') => ('p', 'R', 'QIP', 'QMIP_le')
('p', 'A', 'QIP', 'QMIP_le') => ('p', 'AA', 'QIP', 'QMIP_le')
('p', 'A', 'co.QIP', 'co.QMIP_le') => ('-d', 'A', 'co.QIP', 'co.QMIP_le')
('p', 'A', 'co.QIP', 'co.QMIP_le') => ('p', 'R', 'co.QIP', 'co.QMIP_le')
('p', 'A', 'co.QIP', 'co.QMIP_le') => ('p', 'AA', 'co.QIP', 'co.QMIP_le')
('p', 'A', 'cocap.QIP', 'cocap.QMIP_le') => ('-d', 'A', 'cocap.QIP', 'cocap.QMIP_le')
('p', 'A', 'cocap.QIP', 'cocap.QMIP_le') => ('p', 'R', 'cocap.QIP', 'cocap.QMIP_le')
('p', 'A', 'cocap.QIP', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.QIP', 'cocap.QMIP_le')
('d', 'A', 'cocap.QMIP_le', 'co.Sigma_2P') => ('-p', 'A', 'cocap.QMIP_le', 'co.Sigma_2P')
('d', 'A', 'cocap.QMIP_le', 'Sigma_2P') => ('-p', 'A', 'cocap.QMIP_le', 'Sigma_2P')
('d', 'A', 'cocap.QMIP_le', 'PH') => ('-p', 'A', 'cocap.QMIP_le', 'PH')
('d', 'A', 'co.QMIP_le', 'PH') => ('-p', 'A', 'co.QMIP_le', 'PH')
('d', 'A', 'QMIP_le', 'PH') => ('-p', 'A', 'QMIP_le', 'PH')
('d', 'A', 'cocap.QMIP_le', 'SZK') => ('-p', 'A', 'cocap.QMIP_le', 'SZK')
('d', 'A', 'co.QMIP_le', 'SZK') => ('-p', 'A', 'co.QMIP_le', 'SZK')
('d', 'A', 'QMIP_le', 'SZK') => ('-p', 'A', 'QMIP_le', 'SZK')
('p', 'A', 'BQP', 'cocap.QMIP_le') => ('-d', 'A', 'BQP', 'cocap.QMIP_le')
('p', 'A', 'BQP', 'cocap.QMIP_le') => ('p', 'R', 'BQP', 'cocap.QMIP_le')
('p', 'A', 'BQP', 'cocap.QMIP_le') => ('p', 'AA', 'BQP', 'cocap.QMIP_le')
('-d', 'A', 'BQP', 'co.QMIP_le') => ('-d', 'R', 'BQP', 'co.QMIP_le')
('-d', 'A', 'BQP', 'co.QMIP_le') => ('-d', 'AA', 'BQP', 'co.QMIP_le')
('-d', 'A', 'BQP', 'QMIP_le') => ('-d', 'R', 'BQP', 'QMIP_le')
('-d', 'A', 'BQP', 'QMIP_le') => ('-d', 'AA', 'BQP', 'QMIP_le')
('-d', 'A', 'BQP', 'cocap.QMIP_le') => ('-d', 'R', 'BQP', 'cocap.QMIP_le')
('-d', 'A', 'BQP', 'cocap.QMIP_le') => ('-d', 'AA', 'BQP', 'cocap.QMIP_le')
('-d', 'AA', 'BQP', 'cocap.QMIP_le') => ('-d', 'T', 'BQP', 'cocap.QMIP_le')
('-d', 'AA', 'BQP', 'cocap.QMIP_le') => ('-d', 'EA', 'BQP', 'cocap.QMIP_le')
('-d', 'AA', 'BQP', 'co.QMIP_le') => ('-d', 'T', 'BQP', 'co.QMIP_le')
('-d', 'AA', 'BQP', 'co.QMIP_le') => ('-d', 'EA', 'BQP', 'co.QMIP_le')
('-d', 'AA', 'BQP', 'QMIP_le') => ('-d', 'T', 'BQP', 'QMIP_le')
('-d', 'AA', 'BQP', 'QMIP_le') => ('-d', 'EA', 'BQP', 'QMIP_le')
('p', 'A', 'BQP', 'co.QMIP_le') => ('p', 'R', 'BQP', 'co.QMIP_le')
('p', 'A', 'BQP', 'co.QMIP_le') => ('p', 'AA', 'BQP', 'co.QMIP_le')
('p', 'A', 'BQP', 'QMIP_le') => ('p', 'R', 'BQP', 'QMIP_le')
('p', 'A', 'BQP', 'QMIP_le') => ('p', 'AA', 'BQP', 'QMIP_le')
('p', 'AA', 'BQP', 'QMIP_le') => ('p', 'T', 'BQP', 'QMIP_le')
('p', 'AA', 'BQP', 'QMIP_le') => ('p', 'EA', 'BQP', 'QMIP_le')
('p', 'AA', 'BQP', 'co.QMIP_le') => ('p', 'T', 'BQP', 'co.QMIP_le')
('p', 'AA', 'BQP', 'co.QMIP_le') => ('p', 'EA', 'BQP', 'co.QMIP_le')
('p', 'AA', 'BQP', 'cocap.QMIP_le') => ('p', 'T', 'BQP', 'cocap.QMIP_le')
('p', 'AA', 'BQP', 'cocap.QMIP_le') => ('p', 'EA', 'BQP', 'cocap.QMIP_le')
('d', 'A', 'cocap.QMIP_le', 'BQP') => ('-p', 'A', 'cocap.QMIP_le', 'BQP')
('d', 'A', 'co.QMIP_le', 'BQP') => ('-p', 'A', 'co.QMIP_le', 'BQP')
('d', 'A', 'QMIP_le', 'BQP') => ('-p', 'A', 'QMIP_le', 'BQP')
('-d', 'A', 'cocap.QIP', 'co.QMIP_le') => ('-d', 'R', 'cocap.QIP', 'co.QMIP_le')
('-d', 'A', 'cocap.QIP', 'co.QMIP_le') => ('-d', 'AA', 'cocap.QIP', 'co.QMIP_le')
('-d', 'A', 'cocap.QIP', 'QMIP_le') => ('-d', 'R', 'cocap.QIP', 'QMIP_le')
('-d', 'A', 'cocap.QIP', 'QMIP_le') => ('-d', 'AA', 'cocap.QIP', 'QMIP_le')
('-d', 'A', 'cocap.QIP', 'cocap.QMIP_le') => ('-d', 'R', 'cocap.QIP', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QIP', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.QIP', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QCMA', 'cocap.QMIP_le') => ('-d', 'R', 'cocap.QCMA', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QCMA', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.QCMA', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QCMA', 'co.QMIP_le') => ('-d', 'R', 'cocap.QCMA', 'co.QMIP_le')
('-d', 'A', 'cocap.QCMA', 'co.QMIP_le') => ('-d', 'AA', 'cocap.QCMA', 'co.QMIP_le')
('-d', 'A', 'cocap.QCMA', 'QMIP_le') => ('-d', 'R', 'cocap.QCMA', 'QMIP_le')
('-d', 'A', 'cocap.QCMA', 'QMIP_le') => ('-d', 'AA', 'cocap.QCMA', 'QMIP_le')
('-d', 'A', 'cocap.NP', 'QMIP_le') => ('-d', 'AA', 'cocap.NP', 'QMIP_le')
('-d', 'A', 'cocap.NP', 'co.QMIP_le') => ('-d', 'AA', 'cocap.NP', 'co.QMIP_le')
('-d', 'A', 'cocap.NP', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.NP', 'cocap.QMIP_le')
('-d', 'A', 'ZPP', 'cocap.QMIP_le') => ('-d', 'AA', 'ZPP', 'cocap.QMIP_le')
('-d', 'A', 'ZPP', 'co.QMIP_le') => ('-d', 'AA', 'ZPP', 'co.QMIP_le')
('-d', 'A', 'ZPP', 'QMIP_le') => ('-d', 'AA', 'ZPP', 'QMIP_le')
('-d', 'AA', 'ZPP', 'QMIP_le') => ('-d', 'T', 'ZPP', 'QMIP_le')
('-d', 'AA', 'ZPP', 'QMIP_le') => ('-d', 'EA', 'ZPP', 'QMIP_le')
('-d', 'AA', 'ZPP', 'co.QMIP_le') => ('-d', 'T', 'ZPP', 'co.QMIP_le')
('-d', 'AA', 'ZPP', 'co.QMIP_le') => ('-d', 'EA', 'ZPP', 'co.QMIP_le')
('-d', 'AA', 'ZPP', 'cocap.QMIP_le') => ('-d', 'T', 'ZPP', 'cocap.QMIP_le')
('-d', 'AA', 'ZPP', 'cocap.QMIP_le') => ('-d', 'EA', 'ZPP', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.NP', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.NP', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.NP', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.NP', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.NP', 'co.QMIP_le') => ('-d', 'T', 'cocap.NP', 'co.QMIP_le')
('-d', 'AA', 'cocap.NP', 'co.QMIP_le') => ('-d', 'EA', 'cocap.NP', 'co.QMIP_le')
('-d', 'AA', 'cocap.NP', 'QMIP_le') => ('-d', 'T', 'cocap.NP', 'QMIP_le')
('-d', 'AA', 'cocap.NP', 'QMIP_le') => ('-d', 'EA', 'cocap.NP', 'QMIP_le')
('-d', 'A', 'cocap.MA', 'QMIP_le') => ('-d', 'AA', 'cocap.MA', 'QMIP_le')
('-d', 'A', 'cocap.MA', 'co.QMIP_le') => ('-d', 'AA', 'cocap.MA', 'co.QMIP_le')
('-d', 'A', 'cocap.MA', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.MA', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.MA', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.MA', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.MA', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.MA', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.MA', 'co.QMIP_le') => ('-d', 'T', 'cocap.MA', 'co.QMIP_le')
('-d', 'AA', 'cocap.MA', 'co.QMIP_le') => ('-d', 'EA', 'cocap.MA', 'co.QMIP_le')
('-d', 'AA', 'cocap.MA', 'QMIP_le') => ('-d', 'T', 'cocap.MA', 'QMIP_le')
('-d', 'AA', 'cocap.MA', 'QMIP_le') => ('-d', 'EA', 'cocap.MA', 'QMIP_le')
('-d', 'AA', 'cocap.QCMA', 'QMIP_le') => ('-d', 'T', 'cocap.QCMA', 'QMIP_le')
('-d', 'AA', 'cocap.QCMA', 'QMIP_le') => ('-d', 'EA', 'cocap.QCMA', 'QMIP_le')
('-d', 'AA', 'cocap.QCMA', 'co.QMIP_le') => ('-d', 'T', 'cocap.QCMA', 'co.QMIP_le')
('-d', 'AA', 'cocap.QCMA', 'co.QMIP_le') => ('-d', 'EA', 'cocap.QCMA', 'co.QMIP_le')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.QCMA', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.QCMA', 'cocap.QMIP_le')
('-d', 'A', 'cocap.SBP', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_le')
('-d', 'A', 'cocap.SBP', 'co.QMIP_le') => ('-d', 'AA', 'cocap.SBP', 'co.QMIP_le')
('-d', 'A', 'cocap.SBP', 'QMIP_le') => ('-d', 'AA', 'cocap.SBP', 'QMIP_le')
('-d', 'AA', 'cocap.SBP', 'QMIP_le') => ('-d', 'T', 'cocap.SBP', 'QMIP_le')
('-d', 'AA', 'cocap.SBP', 'QMIP_le') => ('-d', 'EA', 'cocap.SBP', 'QMIP_le')
('-d', 'AA', 'cocap.SBP', 'co.QMIP_le') => ('-d', 'T', 'cocap.SBP', 'co.QMIP_le')
('-d', 'AA', 'cocap.SBP', 'co.QMIP_le') => ('-d', 'EA', 'cocap.SBP', 'co.QMIP_le')
('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.SBP', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.SBP', 'cocap.QMIP_le')
('-d', 'A', 'cocap.AM', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.AM', 'cocap.QMIP_le')
('-d', 'A', 'cocap.AM', 'co.QMIP_le') => ('-d', 'AA', 'cocap.AM', 'co.QMIP_le')
('-d', 'A', 'cocap.AM', 'QMIP_le') => ('-d', 'AA', 'cocap.AM', 'QMIP_le')
('-d', 'AA', 'cocap.AM', 'QMIP_le') => ('-d', 'T', 'cocap.AM', 'QMIP_le')
('-d', 'AA', 'cocap.AM', 'QMIP_le') => ('-d', 'EA', 'cocap.AM', 'QMIP_le')
('-d', 'AA', 'cocap.AM', 'co.QMIP_le') => ('-d', 'T', 'cocap.AM', 'co.QMIP_le')
('-d', 'AA', 'cocap.AM', 'co.QMIP_le') => ('-d', 'EA', 'cocap.AM', 'co.QMIP_le')
('-d', 'AA', 'cocap.AM', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.AM', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.AM', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.AM', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QAM', 'cocap.QMIP_le') => ('-d', 'R', 'cocap.QAM', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QAM', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.QAM', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QAM', 'co.QMIP_le') => ('-d', 'R', 'cocap.QAM', 'co.QMIP_le')
('-d', 'A', 'cocap.QAM', 'co.QMIP_le') => ('-d', 'AA', 'cocap.QAM', 'co.QMIP_le')
('-d', 'A', 'cocap.QAM', 'QMIP_le') => ('-d', 'R', 'cocap.QAM', 'QMIP_le')
('-d', 'A', 'cocap.QAM', 'QMIP_le') => ('-d', 'AA', 'cocap.QAM', 'QMIP_le')
('-d', 'A', 'cocap.QMA', 'QMIP_le') => ('-d', 'R', 'cocap.QMA', 'QMIP_le')
('-d', 'A', 'cocap.QMA', 'QMIP_le') => ('-d', 'AA', 'cocap.QMA', 'QMIP_le')
('-d', 'A', 'cocap.QMA', 'co.QMIP_le') => ('-d', 'R', 'cocap.QMA', 'co.QMIP_le')
('-d', 'A', 'cocap.QMA', 'co.QMIP_le') => ('-d', 'AA', 'cocap.QMA', 'co.QMIP_le')
('-d', 'A', 'cocap.QMA', 'cocap.QMIP_le') => ('-d', 'R', 'cocap.QMA', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QMA', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.QMA', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QMA', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.QMA', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QMA', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.QMA', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QMA', 'co.QMIP_le') => ('-d', 'T', 'cocap.QMA', 'co.QMIP_le')
('-d', 'AA', 'cocap.QMA', 'co.QMIP_le') => ('-d', 'EA', 'cocap.QMA', 'co.QMIP_le')
('-d', 'AA', 'cocap.QMA', 'QMIP_le') => ('-d', 'T', 'cocap.QMA', 'QMIP_le')
('-d', 'AA', 'cocap.QMA', 'QMIP_le') => ('-d', 'EA', 'cocap.QMA', 'QMIP_le')
('-d', 'AA', 'cocap.QAM', 'QMIP_le') => ('-d', 'T', 'cocap.QAM', 'QMIP_le')
('-d', 'AA', 'cocap.QAM', 'QMIP_le') => ('-d', 'EA', 'cocap.QAM', 'QMIP_le')
('-d', 'AA', 'cocap.QAM', 'co.QMIP_le') => ('-d', 'T', 'cocap.QAM', 'co.QMIP_le')
('-d', 'AA', 'cocap.QAM', 'co.QMIP_le') => ('-d', 'EA', 'cocap.QAM', 'co.QMIP_le')
('-d', 'AA', 'cocap.QAM', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.QAM', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QAM', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.QAM', 'cocap.QMIP_le')
('-d', 'A', 'cocap.IP', 'cocap.QMIP_le') => ('-d', 'R', 'cocap.IP', 'cocap.QMIP_le')
('-d', 'A', 'cocap.IP', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.IP', 'cocap.QMIP_le')
('-d', 'A', 'cocap.IP', 'co.QMIP_le') => ('-d', 'R', 'cocap.IP', 'co.QMIP_le')
('-d', 'A', 'cocap.IP', 'co.QMIP_le') => ('-d', 'AA', 'cocap.IP', 'co.QMIP_le')
('-d', 'A', 'cocap.IP', 'QMIP_le') => ('-d', 'R', 'cocap.IP', 'QMIP_le')
('-d', 'A', 'cocap.IP', 'QMIP_le') => ('-d', 'AA', 'cocap.IP', 'QMIP_le')
('-d', 'AA', 'cocap.IP', 'QMIP_le') => ('-d', 'T', 'cocap.IP', 'QMIP_le')
('-d', 'AA', 'cocap.IP', 'QMIP_le') => ('-d', 'EA', 'cocap.IP', 'QMIP_le')
('-d', 'AA', 'cocap.IP', 'co.QMIP_le') => ('-d', 'T', 'cocap.IP', 'co.QMIP_le')
('-d', 'AA', 'cocap.IP', 'co.QMIP_le') => ('-d', 'EA', 'cocap.IP', 'co.QMIP_le')
('-d', 'AA', 'cocap.IP', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.IP', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.IP', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.IP', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QIP', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.QIP', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QIP', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.QIP', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QIP', 'co.QMIP_le') => ('-d', 'T', 'cocap.QIP', 'co.QMIP_le')
('-d', 'AA', 'cocap.QIP', 'co.QMIP_le') => ('-d', 'EA', 'cocap.QIP', 'co.QMIP_le')
('-d', 'AA', 'cocap.QIP', 'QMIP_le') => ('-d', 'T', 'cocap.QIP', 'QMIP_le')
('-d', 'AA', 'cocap.QIP', 'QMIP_le') => ('-d', 'EA', 'cocap.QIP', 'QMIP_le')
('p', 'A', 'cocap.QIP', 'co.QMIP_le') => ('p', 'R', 'cocap.QIP', 'co.QMIP_le')
('p', 'A', 'cocap.QIP', 'co.QMIP_le') => ('p', 'AA', 'cocap.QIP', 'co.QMIP_le')
('p', 'A', 'cocap.QIP', 'QMIP_le') => ('p', 'R', 'cocap.QIP', 'QMIP_le')
('p', 'A', 'cocap.QIP', 'QMIP_le') => ('p', 'AA', 'cocap.QIP', 'QMIP_le')
('p', 'A', 'cocap.QCMA', 'QMIP_le') => ('p', 'R', 'cocap.QCMA', 'QMIP_le')
('p', 'A', 'cocap.QCMA', 'QMIP_le') => ('p', 'AA', 'cocap.QCMA', 'QMIP_le')
('p', 'A', 'cocap.QCMA', 'co.QMIP_le') => ('p', 'R', 'cocap.QCMA', 'co.QMIP_le')
('p', 'A', 'cocap.QCMA', 'co.QMIP_le') => ('p', 'AA', 'cocap.QCMA', 'co.QMIP_le')
('p', 'A', 'cocap.QCMA', 'cocap.QMIP_le') => ('p', 'R', 'cocap.QCMA', 'cocap.QMIP_le')
('p', 'A', 'cocap.QCMA', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.QCMA', 'cocap.QMIP_le')
('p', 'A', 'cocap.NP', 'cocap.QMIP_le') => ('p', 'R', 'cocap.NP', 'cocap.QMIP_le')
('p', 'A', 'cocap.NP', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.NP', 'cocap.QMIP_le')
('p', 'A', 'cocap.NP', 'co.QMIP_le') => ('p', 'R', 'cocap.NP', 'co.QMIP_le')
('p', 'A', 'cocap.NP', 'co.QMIP_le') => ('p', 'AA', 'cocap.NP', 'co.QMIP_le')
('p', 'A', 'cocap.NP', 'QMIP_le') => ('p', 'R', 'cocap.NP', 'QMIP_le')
('p', 'A', 'cocap.NP', 'QMIP_le') => ('p', 'AA', 'cocap.NP', 'QMIP_le')
('p', 'A', 'ZPP', 'QMIP_le') => ('p', 'R', 'ZPP', 'QMIP_le')
('p', 'A', 'ZPP', 'QMIP_le') => ('p', 'AA', 'ZPP', 'QMIP_le')
('p', 'A', 'ZPP', 'co.QMIP_le') => ('p', 'R', 'ZPP', 'co.QMIP_le')
('p', 'A', 'ZPP', 'co.QMIP_le') => ('p', 'AA', 'ZPP', 'co.QMIP_le')
('p', 'A', 'ZPP', 'cocap.QMIP_le') => ('p', 'R', 'ZPP', 'cocap.QMIP_le')
('p', 'A', 'ZPP', 'cocap.QMIP_le') => ('p', 'AA', 'ZPP', 'cocap.QMIP_le')
('p', 'AA', 'ZPP', 'cocap.QMIP_le') => ('p', 'T', 'ZPP', 'cocap.QMIP_le')
('p', 'AA', 'ZPP', 'cocap.QMIP_le') => ('p', 'EA', 'ZPP', 'cocap.QMIP_le')
('p', 'AA', 'ZPP', 'co.QMIP_le') => ('p', 'T', 'ZPP', 'co.QMIP_le')
('p', 'AA', 'ZPP', 'co.QMIP_le') => ('p', 'EA', 'ZPP', 'co.QMIP_le')
('p', 'AA', 'ZPP', 'QMIP_le') => ('p', 'T', 'ZPP', 'QMIP_le')
('p', 'AA', 'ZPP', 'QMIP_le') => ('p', 'EA', 'ZPP', 'QMIP_le')
('p', 'AA', 'cocap.NP', 'QMIP_le') => ('p', 'T', 'cocap.NP', 'QMIP_le')
('p', 'AA', 'cocap.NP', 'QMIP_le') => ('p', 'EA', 'cocap.NP', 'QMIP_le')
('p', 'AA', 'cocap.NP', 'co.QMIP_le') => ('p', 'T', 'cocap.NP', 'co.QMIP_le')
('p', 'AA', 'cocap.NP', 'co.QMIP_le') => ('p', 'EA', 'cocap.NP', 'co.QMIP_le')
('p', 'AA', 'cocap.NP', 'cocap.QMIP_le') => ('p', 'T', 'cocap.NP', 'cocap.QMIP_le')
('p', 'AA', 'cocap.NP', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.NP', 'cocap.QMIP_le')
('p', 'A', 'cocap.MA', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.MA', 'cocap.QMIP_le')
('p', 'A', 'cocap.MA', 'co.QMIP_le') => ('p', 'AA', 'cocap.MA', 'co.QMIP_le')
('p', 'A', 'cocap.MA', 'QMIP_le') => ('p', 'AA', 'cocap.MA', 'QMIP_le')
('p', 'AA', 'cocap.MA', 'QMIP_le') => ('p', 'T', 'cocap.MA', 'QMIP_le')
('p', 'AA', 'cocap.MA', 'QMIP_le') => ('p', 'EA', 'cocap.MA', 'QMIP_le')
('p', 'AA', 'cocap.MA', 'co.QMIP_le') => ('p', 'T', 'cocap.MA', 'co.QMIP_le')
('p', 'AA', 'cocap.MA', 'co.QMIP_le') => ('p', 'EA', 'cocap.MA', 'co.QMIP_le')
('p', 'AA', 'cocap.MA', 'cocap.QMIP_le') => ('p', 'T', 'cocap.MA', 'cocap.QMIP_le')
('p', 'AA', 'cocap.MA', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.MA', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QCMA', 'cocap.QMIP_le') => ('p', 'T', 'cocap.QCMA', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QCMA', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.QCMA', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QCMA', 'co.QMIP_le') => ('p', 'T', 'cocap.QCMA', 'co.QMIP_le')
('p', 'AA', 'cocap.QCMA', 'co.QMIP_le') => ('p', 'EA', 'cocap.QCMA', 'co.QMIP_le')
('p', 'AA', 'cocap.QCMA', 'QMIP_le') => ('p', 'T', 'cocap.QCMA', 'QMIP_le')
('p', 'AA', 'cocap.QCMA', 'QMIP_le') => ('p', 'EA', 'cocap.QCMA', 'QMIP_le')
('p', 'A', 'cocap.SBP', 'QMIP_le') => ('p', 'AA', 'cocap.SBP', 'QMIP_le')
('p', 'A', 'cocap.SBP', 'co.QMIP_le') => ('p', 'AA', 'cocap.SBP', 'co.QMIP_le')
('p', 'A', 'cocap.SBP', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.SBP', 'cocap.QMIP_le')
('p', 'AA', 'cocap.SBP', 'cocap.QMIP_le') => ('p', 'T', 'cocap.SBP', 'cocap.QMIP_le')
('p', 'AA', 'cocap.SBP', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.SBP', 'cocap.QMIP_le')
('p', 'AA', 'cocap.SBP', 'co.QMIP_le') => ('p', 'T', 'cocap.SBP', 'co.QMIP_le')
('p', 'AA', 'cocap.SBP', 'co.QMIP_le') => ('p', 'EA', 'cocap.SBP', 'co.QMIP_le')
('p', 'AA', 'cocap.SBP', 'QMIP_le') => ('p', 'T', 'cocap.SBP', 'QMIP_le')
('p', 'AA', 'cocap.SBP', 'QMIP_le') => ('p', 'EA', 'cocap.SBP', 'QMIP_le')
('p', 'A', 'cocap.AM', 'QMIP_le') => ('p', 'AA', 'cocap.AM', 'QMIP_le')
('p', 'A', 'cocap.AM', 'co.QMIP_le') => ('p', 'AA', 'cocap.AM', 'co.QMIP_le')
('p', 'A', 'cocap.AM', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.AM', 'cocap.QMIP_le')
('p', 'AA', 'cocap.AM', 'cocap.QMIP_le') => ('p', 'T', 'cocap.AM', 'cocap.QMIP_le')
('p', 'AA', 'cocap.AM', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.AM', 'cocap.QMIP_le')
('p', 'AA', 'cocap.AM', 'co.QMIP_le') => ('p', 'T', 'cocap.AM', 'co.QMIP_le')
('p', 'AA', 'cocap.AM', 'co.QMIP_le') => ('p', 'EA', 'cocap.AM', 'co.QMIP_le')
('p', 'AA', 'cocap.AM', 'QMIP_le') => ('p', 'T', 'cocap.AM', 'QMIP_le')
('p', 'AA', 'cocap.AM', 'QMIP_le') => ('p', 'EA', 'cocap.AM', 'QMIP_le')
('p', 'A', 'cocap.QAM', 'QMIP_le') => ('p', 'R', 'cocap.QAM', 'QMIP_le')
('p', 'A', 'cocap.QAM', 'QMIP_le') => ('p', 'AA', 'cocap.QAM', 'QMIP_le')
('p', 'A', 'cocap.QAM', 'co.QMIP_le') => ('p', 'R', 'cocap.QAM', 'co.QMIP_le')
('p', 'A', 'cocap.QAM', 'co.QMIP_le') => ('p', 'AA', 'cocap.QAM', 'co.QMIP_le')
('p', 'A', 'cocap.QAM', 'cocap.QMIP_le') => ('p', 'R', 'cocap.QAM', 'cocap.QMIP_le')
('p', 'A', 'cocap.QAM', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.QAM', 'cocap.QMIP_le')
('p', 'A', 'cocap.QMA', 'cocap.QMIP_le') => ('p', 'R', 'cocap.QMA', 'cocap.QMIP_le')
('p', 'A', 'cocap.QMA', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.QMA', 'cocap.QMIP_le')
('p', 'A', 'cocap.QMA', 'co.QMIP_le') => ('p', 'R', 'cocap.QMA', 'co.QMIP_le')
('p', 'A', 'cocap.QMA', 'co.QMIP_le') => ('p', 'AA', 'cocap.QMA', 'co.QMIP_le')
('p', 'A', 'cocap.QMA', 'QMIP_le') => ('p', 'R', 'cocap.QMA', 'QMIP_le')
('p', 'A', 'cocap.QMA', 'QMIP_le') => ('p', 'AA', 'cocap.QMA', 'QMIP_le')
('p', 'AA', 'cocap.QMA', 'QMIP_le') => ('p', 'T', 'cocap.QMA', 'QMIP_le')
('p', 'AA', 'cocap.QMA', 'QMIP_le') => ('p', 'EA', 'cocap.QMA', 'QMIP_le')
('p', 'AA', 'cocap.QMA', 'co.QMIP_le') => ('p', 'T', 'cocap.QMA', 'co.QMIP_le')
('p', 'AA', 'cocap.QMA', 'co.QMIP_le') => ('p', 'EA', 'cocap.QMA', 'co.QMIP_le')
('p', 'AA', 'cocap.QMA', 'cocap.QMIP_le') => ('p', 'T', 'cocap.QMA', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QMA', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.QMA', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QAM', 'cocap.QMIP_le') => ('p', 'T', 'cocap.QAM', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QAM', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.QAM', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QAM', 'co.QMIP_le') => ('p', 'T', 'cocap.QAM', 'co.QMIP_le')
('p', 'AA', 'cocap.QAM', 'co.QMIP_le') => ('p', 'EA', 'cocap.QAM', 'co.QMIP_le')
('p', 'AA', 'cocap.QAM', 'QMIP_le') => ('p', 'T', 'cocap.QAM', 'QMIP_le')
('p', 'AA', 'cocap.QAM', 'QMIP_le') => ('p', 'EA', 'cocap.QAM', 'QMIP_le')
('p', 'A', 'cocap.IP', 'QMIP_le') => ('p', 'R', 'cocap.IP', 'QMIP_le')
('p', 'A', 'cocap.IP', 'QMIP_le') => ('p', 'AA', 'cocap.IP', 'QMIP_le')
('p', 'A', 'cocap.IP', 'co.QMIP_le') => ('p', 'R', 'cocap.IP', 'co.QMIP_le')
('p', 'A', 'cocap.IP', 'co.QMIP_le') => ('p', 'AA', 'cocap.IP', 'co.QMIP_le')
('p', 'A', 'cocap.IP', 'cocap.QMIP_le') => ('p', 'R', 'cocap.IP', 'cocap.QMIP_le')
('p', 'A', 'cocap.IP', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.IP', 'cocap.QMIP_le')
('p', 'AA', 'cocap.IP', 'cocap.QMIP_le') => ('p', 'T', 'cocap.IP', 'cocap.QMIP_le')
('p', 'AA', 'cocap.IP', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.IP', 'cocap.QMIP_le')
('p', 'AA', 'cocap.IP', 'co.QMIP_le') => ('p', 'T', 'cocap.IP', 'co.QMIP_le')
('p', 'AA', 'cocap.IP', 'co.QMIP_le') => ('p', 'EA', 'cocap.IP', 'co.QMIP_le')
('p', 'AA', 'cocap.IP', 'QMIP_le') => ('p', 'T', 'cocap.IP', 'QMIP_le')
('p', 'AA', 'cocap.IP', 'QMIP_le') => ('p', 'EA', 'cocap.IP', 'QMIP_le')
('p', 'AA', 'cocap.QIP', 'QMIP_le') => ('p', 'T', 'cocap.QIP', 'QMIP_le')
('p', 'AA', 'cocap.QIP', 'QMIP_le') => ('p', 'EA', 'cocap.QIP', 'QMIP_le')
('p', 'AA', 'cocap.QIP', 'co.QMIP_le') => ('p', 'T', 'cocap.QIP', 'co.QMIP_le')
('p', 'AA', 'cocap.QIP', 'co.QMIP_le') => ('p', 'EA', 'cocap.QIP', 'co.QMIP_le')
('p', 'AA', 'cocap.QIP', 'cocap.QMIP_le') => ('p', 'T', 'cocap.QIP', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QIP', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.QIP', 'cocap.QMIP_le')
('p', 'A', 'co.MA', 'co.QMIP_le') => ('-d', 'A', 'co.MA', 'co.QMIP_le')
('p', 'A', 'co.MA', 'co.QMIP_le') => ('p', 'R', 'co.MA', 'co.QMIP_le')
('p', 'A', 'co.MA', 'co.QMIP_le') => ('p', 'AA', 'co.MA', 'co.QMIP_le')
('p', 'A', 'MA', 'QMIP_le') => ('-d', 'A', 'MA', 'QMIP_le')
('p', 'A', 'MA', 'QMIP_le') => ('p', 'R', 'MA', 'QMIP_le')
('p', 'A', 'MA', 'QMIP_le') => ('p', 'AA', 'MA', 'QMIP_le')
('p', 'A', 'RP', 'QMIP_le') => ('-d', 'A', 'RP', 'QMIP_le')
('p', 'A', 'RP', 'QMIP_le') => ('p', 'R', 'RP', 'QMIP_le')
('p', 'A', 'RP', 'QMIP_le') => ('p', 'AA', 'RP', 'QMIP_le')
('p', 'A', 'co.RP', 'co.QMIP_le') => ('-d', 'A', 'co.RP', 'co.QMIP_le')
('p', 'A', 'co.RP', 'co.QMIP_le') => ('p', 'R', 'co.RP', 'co.QMIP_le')
('p', 'A', 'co.RP', 'co.QMIP_le') => ('p', 'AA', 'co.RP', 'co.QMIP_le')
('p', 'AA', 'co.RP', 'co.QMIP_le') => ('-d', 'AA', 'co.RP', 'co.QMIP_le')
('p', 'AA', 'co.RP', 'co.QMIP_le') => ('p', 'T', 'co.RP', 'co.QMIP_le')
('p', 'AA', 'co.RP', 'co.QMIP_le') => ('p', 'EA', 'co.RP', 'co.QMIP_le')
('p', 'AA', 'RP', 'QMIP_le') => ('-d', 'AA', 'RP', 'QMIP_le')
('p', 'AA', 'RP', 'QMIP_le') => ('p', 'T', 'RP', 'QMIP_le')
('p', 'AA', 'RP', 'QMIP_le') => ('p', 'EA', 'RP', 'QMIP_le')
('p', 'EA', 'RP', 'QMIP_le') => ('-d', 'EA', 'RP', 'QMIP_le')
('p', 'EA', 'co.RP', 'co.QMIP_le') => ('-d', 'EA', 'co.RP', 'co.QMIP_le')
('p', 'T', 'RP', 'QMIP_le') => ('-d', 'T', 'RP', 'QMIP_le')
('p', 'T', 'co.RP', 'co.QMIP_le') => ('-d', 'T', 'co.RP', 'co.QMIP_le')
('p', 'A', 'NP', 'QMIP_le') => ('-d', 'A', 'NP', 'QMIP_le')
('p', 'A', 'NP', 'QMIP_le') => ('p', 'R', 'NP', 'QMIP_le')
('p', 'A', 'NP', 'QMIP_le') => ('p', 'AA', 'NP', 'QMIP_le')
('p', 'A', 'co.NP', 'co.QMIP_le') => ('-d', 'A', 'co.NP', 'co.QMIP_le')
('p', 'A', 'co.NP', 'co.QMIP_le') => ('p', 'R', 'co.NP', 'co.QMIP_le')
('p', 'A', 'co.NP', 'co.QMIP_le') => ('p', 'AA', 'co.NP', 'co.QMIP_le')
('d', 'A', 'co.QMIP_le', 'BQP/mpoly') => ('-p', 'A', 'co.QMIP_le', 'BQP/mpoly')
('d', 'A', 'QMIP_le', 'BQP/mpoly') => ('-p', 'A', 'QMIP_le', 'BQP/mpoly')
('d', 'A', 'co.QMIP_le', 'BQP/qpoly') => ('-p', 'A', 'co.QMIP_le', 'BQP/qpoly')
('d', 'A', 'QMIP_le', 'BQP/qpoly') => ('-p', 'A', 'QMIP_le', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'co.QMIP_le') => ('-d', 'AA', 'co.NP', 'co.QMIP_le')
('p', 'AA', 'co.NP', 'co.QMIP_le') => ('p', 'T', 'co.NP', 'co.QMIP_le')
('p', 'AA', 'co.NP', 'co.QMIP_le') => ('p', 'EA', 'co.NP', 'co.QMIP_le')
('p', 'AA', 'NP', 'QMIP_le') => ('-d', 'AA', 'NP', 'QMIP_le')
('p', 'AA', 'NP', 'QMIP_le') => ('p', 'T', 'NP', 'QMIP_le')
('p', 'AA', 'NP', 'QMIP_le') => ('p', 'EA', 'NP', 'QMIP_le')
('p', 'EA', 'NP', 'QMIP_le') => ('-d', 'EA', 'NP', 'QMIP_le')
('p', 'EA', 'co.NP', 'co.QMIP_le') => ('-d', 'EA', 'co.NP', 'co.QMIP_le')
('p', 'T', 'NP', 'QMIP_le') => ('-d', 'T', 'NP', 'QMIP_le')
('p', 'T', 'co.NP', 'co.QMIP_le') => ('-d', 'T', 'co.NP', 'co.QMIP_le')
('p', 'AA', 'MA', 'QMIP_le') => ('-d', 'AA', 'MA', 'QMIP_le')
('p', 'AA', 'MA', 'QMIP_le') => ('p', 'T', 'MA', 'QMIP_le')
('p', 'AA', 'MA', 'QMIP_le') => ('p', 'EA', 'MA', 'QMIP_le')
('p', 'AA', 'co.MA', 'co.QMIP_le') => ('-d', 'AA', 'co.MA', 'co.QMIP_le')
('p', 'AA', 'co.MA', 'co.QMIP_le') => ('p', 'T', 'co.MA', 'co.QMIP_le')
('p', 'AA', 'co.MA', 'co.QMIP_le') => ('p', 'EA', 'co.MA', 'co.QMIP_le')
('p', 'EA', 'co.MA', 'co.QMIP_le') => ('-d', 'EA', 'co.MA', 'co.QMIP_le')
('p', 'EA', 'MA', 'QMIP_le') => ('-d', 'EA', 'MA', 'QMIP_le')
('p', 'T', 'co.MA', 'co.QMIP_le') => ('-d', 'T', 'co.MA', 'co.QMIP_le')
('p', 'T', 'MA', 'QMIP_le') => ('-d', 'T', 'MA', 'QMIP_le')
('p', 'A', 'co.QMA', 'co.QMIP_le') => ('-d', 'A', 'co.QMA', 'co.QMIP_le')
('p', 'A', 'co.QMA', 'co.QMIP_le') => ('p', 'R', 'co.QMA', 'co.QMIP_le')
('p', 'A', 'co.QMA', 'co.QMIP_le') => ('p', 'AA', 'co.QMA', 'co.QMIP_le')
('p', 'A', 'QMA', 'QMIP_le') => ('-d', 'A', 'QMA', 'QMIP_le')
('p', 'A', 'QMA', 'QMIP_le') => ('p', 'R', 'QMA', 'QMIP_le')
('p', 'A', 'QMA', 'QMIP_le') => ('p', 'AA', 'QMA', 'QMIP_le')
('p', 'A', 'QCMA', 'QMIP_le') => ('-d', 'A', 'QCMA', 'QMIP_le')
('p', 'A', 'QCMA', 'QMIP_le') => ('p', 'R', 'QCMA', 'QMIP_le')
('p', 'A', 'QCMA', 'QMIP_le') => ('p', 'AA', 'QCMA', 'QMIP_le')
('p', 'A', 'co.QCMA', 'co.QMIP_le') => ('-d', 'A', 'co.QCMA', 'co.QMIP_le')
('p', 'A', 'co.QCMA', 'co.QMIP_le') => ('p', 'R', 'co.QCMA', 'co.QMIP_le')
('p', 'A', 'co.QCMA', 'co.QMIP_le') => ('p', 'AA', 'co.QCMA', 'co.QMIP_le')
('p', 'AA', 'co.QCMA', 'co.QMIP_le') => ('-d', 'AA', 'co.QCMA', 'co.QMIP_le')
('p', 'AA', 'co.QCMA', 'co.QMIP_le') => ('p', 'T', 'co.QCMA', 'co.QMIP_le')
('p', 'AA', 'co.QCMA', 'co.QMIP_le') => ('p', 'EA', 'co.QCMA', 'co.QMIP_le')
('p', 'AA', 'QCMA', 'QMIP_le') => ('-d', 'AA', 'QCMA', 'QMIP_le')
('p', 'AA', 'QCMA', 'QMIP_le') => ('p', 'T', 'QCMA', 'QMIP_le')
('p', 'AA', 'QCMA', 'QMIP_le') => ('p', 'EA', 'QCMA', 'QMIP_le')
('p', 'EA', 'QCMA', 'QMIP_le') => ('-d', 'EA', 'QCMA', 'QMIP_le')
('p', 'EA', 'co.QCMA', 'co.QMIP_le') => ('-d', 'EA', 'co.QCMA', 'co.QMIP_le')
('p', 'T', 'QCMA', 'QMIP_le') => ('-d', 'T', 'QCMA', 'QMIP_le')
('p', 'T', 'co.QCMA', 'co.QMIP_le') => ('-d', 'T', 'co.QCMA', 'co.QMIP_le')
('p', 'R', 'co.QCMA', 'co.QMIP_le') => ('-d', 'R', 'co.QCMA', 'co.QMIP_le')
('p', 'R', 'QCMA', 'QMIP_le') => ('-d', 'R', 'QCMA', 'QMIP_le')
('p', 'AA', 'QMA', 'QMIP_le') => ('-d', 'AA', 'QMA', 'QMIP_le')
('p', 'AA', 'QMA', 'QMIP_le') => ('p', 'T', 'QMA', 'QMIP_le')
('p', 'AA', 'QMA', 'QMIP_le') => ('p', 'EA', 'QMA', 'QMIP_le')
('p', 'AA', 'co.QMA', 'co.QMIP_le') => ('-d', 'AA', 'co.QMA', 'co.QMIP_le')
('p', 'AA', 'co.QMA', 'co.QMIP_le') => ('p', 'T', 'co.QMA', 'co.QMIP_le')
('p', 'AA', 'co.QMA', 'co.QMIP_le') => ('p', 'EA', 'co.QMA', 'co.QMIP_le')
('p', 'EA', 'co.QMA', 'co.QMIP_le') => ('-d', 'EA', 'co.QMA', 'co.QMIP_le')
('p', 'EA', 'QMA', 'QMIP_le') => ('-d', 'EA', 'QMA', 'QMIP_le')
('p', 'T', 'co.QMA', 'co.QMIP_le') => ('-d', 'T', 'co.QMA', 'co.QMIP_le')
('p', 'T', 'QMA', 'QMIP_le') => ('-d', 'T', 'QMA', 'QMIP_le')
('p', 'R', 'QMA', 'QMIP_le') => ('-d', 'R', 'QMA', 'QMIP_le')
('p', 'R', 'co.QMA', 'co.QMIP_le') => ('-d', 'R', 'co.QMA', 'co.QMIP_le')
('p', 'A', 'co.SBP', 'co.QMIP_le') => ('-d', 'A', 'co.SBP', 'co.QMIP_le')
('p', 'A', 'co.SBP', 'co.QMIP_le') => ('p', 'AA', 'co.SBP', 'co.QMIP_le')
('p', 'A', 'SBP', 'QMIP_le') => ('-d', 'A', 'SBP', 'QMIP_le')
('p', 'A', 'SBP', 'QMIP_le') => ('p', 'AA', 'SBP', 'QMIP_le')
('p', 'AA', 'SBP', 'QMIP_le') => ('-d', 'AA', 'SBP', 'QMIP_le')
('p', 'AA', 'SBP', 'QMIP_le') => ('p', 'T', 'SBP', 'QMIP_le')
('p', 'AA', 'SBP', 'QMIP_le') => ('p', 'EA', 'SBP', 'QMIP_le')
('p', 'AA', 'co.SBP', 'co.QMIP_le') => ('-d', 'AA', 'co.SBP', 'co.QMIP_le')
('p', 'AA', 'co.SBP', 'co.QMIP_le') => ('p', 'T', 'co.SBP', 'co.QMIP_le')
('p', 'AA', 'co.SBP', 'co.QMIP_le') => ('p', 'EA', 'co.SBP', 'co.QMIP_le')
('p', 'EA', 'co.SBP', 'co.QMIP_le') => ('-d', 'EA', 'co.SBP', 'co.QMIP_le')
('p', 'EA', 'SBP', 'QMIP_le') => ('-d', 'EA', 'SBP', 'QMIP_le')
('p', 'T', 'co.SBP', 'co.QMIP_le') => ('-d', 'T', 'co.SBP', 'co.QMIP_le')
('p', 'T', 'SBP', 'QMIP_le') => ('-d', 'T', 'SBP', 'QMIP_le')
('p', 'A', 'co.AM', 'co.QMIP_le') => ('-d', 'A', 'co.AM', 'co.QMIP_le')
('p', 'A', 'co.AM', 'co.QMIP_le') => ('p', 'AA', 'co.AM', 'co.QMIP_le')
('p', 'A', 'AM', 'QMIP_le') => ('-d', 'A', 'AM', 'QMIP_le')
('p', 'A', 'AM', 'QMIP_le') => ('p', 'AA', 'AM', 'QMIP_le')
('p', 'AA', 'AM', 'QMIP_le') => ('-d', 'AA', 'AM', 'QMIP_le')
('p', 'AA', 'AM', 'QMIP_le') => ('p', 'T', 'AM', 'QMIP_le')
('p', 'AA', 'AM', 'QMIP_le') => ('p', 'EA', 'AM', 'QMIP_le')
('p', 'AA', 'co.AM', 'co.QMIP_le') => ('-d', 'AA', 'co.AM', 'co.QMIP_le')
('p', 'AA', 'co.AM', 'co.QMIP_le') => ('p', 'T', 'co.AM', 'co.QMIP_le')
('p', 'AA', 'co.AM', 'co.QMIP_le') => ('p', 'EA', 'co.AM', 'co.QMIP_le')
('p', 'EA', 'co.AM', 'co.QMIP_le') => ('-d', 'EA', 'co.AM', 'co.QMIP_le')
('p', 'EA', 'AM', 'QMIP_le') => ('-d', 'EA', 'AM', 'QMIP_le')
('p', 'T', 'co.AM', 'co.QMIP_le') => ('-d', 'T', 'co.AM', 'co.QMIP_le')
('p', 'T', 'AM', 'QMIP_le') => ('-d', 'T', 'AM', 'QMIP_le')
('p', 'A', 'co.IP', 'co.QMIP_le') => ('-d', 'A', 'co.IP', 'co.QMIP_le')
('p', 'A', 'co.IP', 'co.QMIP_le') => ('p', 'R', 'co.IP', 'co.QMIP_le')
('p', 'A', 'co.IP', 'co.QMIP_le') => ('p', 'AA', 'co.IP', 'co.QMIP_le')
('p', 'A', 'IP', 'QMIP_le') => ('-d', 'A', 'IP', 'QMIP_le')
('p', 'A', 'IP', 'QMIP_le') => ('p', 'R', 'IP', 'QMIP_le')
('p', 'A', 'IP', 'QMIP_le') => ('p', 'AA', 'IP', 'QMIP_le')
('p', 'AA', 'IP', 'QMIP_le') => ('-d', 'AA', 'IP', 'QMIP_le')
('p', 'AA', 'IP', 'QMIP_le') => ('p', 'T', 'IP', 'QMIP_le')
('p', 'AA', 'IP', 'QMIP_le') => ('p', 'EA', 'IP', 'QMIP_le')
('p', 'AA', 'co.IP', 'co.QMIP_le') => ('-d', 'AA', 'co.IP', 'co.QMIP_le')
('p', 'AA', 'co.IP', 'co.QMIP_le') => ('p', 'T', 'co.IP', 'co.QMIP_le')
('p', 'AA', 'co.IP', 'co.QMIP_le') => ('p', 'EA', 'co.IP', 'co.QMIP_le')
('p', 'EA', 'co.IP', 'co.QMIP_le') => ('-d', 'EA', 'co.IP', 'co.QMIP_le')
('p', 'EA', 'IP', 'QMIP_le') => ('-d', 'EA', 'IP', 'QMIP_le')
('p', 'T', 'co.IP', 'co.QMIP_le') => ('-d', 'T', 'co.IP', 'co.QMIP_le')
('p', 'T', 'IP', 'QMIP_le') => ('-d', 'T', 'IP', 'QMIP_le')
('p', 'R', 'IP', 'QMIP_le') => ('-d', 'R', 'IP', 'QMIP_le')
('p', 'R', 'co.IP', 'co.QMIP_le') => ('-d', 'R', 'co.IP', 'co.QMIP_le')
('p', 'A', 'co.QAM', 'co.QMIP_le') => ('-d', 'A', 'co.QAM', 'co.QMIP_le')
('p', 'A', 'co.QAM', 'co.QMIP_le') => ('p', 'R', 'co.QAM', 'co.QMIP_le')
('p', 'A', 'co.QAM', 'co.QMIP_le') => ('p', 'AA', 'co.QAM', 'co.QMIP_le')
('p', 'A', 'QAM', 'QMIP_le') => ('-d', 'A', 'QAM', 'QMIP_le')
('p', 'A', 'QAM', 'QMIP_le') => ('p', 'R', 'QAM', 'QMIP_le')
('p', 'A', 'QAM', 'QMIP_le') => ('p', 'AA', 'QAM', 'QMIP_le')
('p', 'AA', 'QAM', 'QMIP_le') => ('-d', 'AA', 'QAM', 'QMIP_le')
('p', 'AA', 'QAM', 'QMIP_le') => ('p', 'T', 'QAM', 'QMIP_le')
('p', 'AA', 'QAM', 'QMIP_le') => ('p', 'EA', 'QAM', 'QMIP_le')
('p', 'AA', 'co.QAM', 'co.QMIP_le') => ('-d', 'AA', 'co.QAM', 'co.QMIP_le')
('p', 'AA', 'co.QAM', 'co.QMIP_le') => ('p', 'T', 'co.QAM', 'co.QMIP_le')
('p', 'AA', 'co.QAM', 'co.QMIP_le') => ('p', 'EA', 'co.QAM', 'co.QMIP_le')
('p', 'EA', 'co.QAM', 'co.QMIP_le') => ('-d', 'EA', 'co.QAM', 'co.QMIP_le')
('p', 'EA', 'QAM', 'QMIP_le') => ('-d', 'EA', 'QAM', 'QMIP_le')
('p', 'T', 'co.QAM', 'co.QMIP_le') => ('-d', 'T', 'co.QAM', 'co.QMIP_le')
('p', 'T', 'QAM', 'QMIP_le') => ('-d', 'T', 'QAM', 'QMIP_le')
('p', 'R', 'QAM', 'QMIP_le') => ('-d', 'R', 'QAM', 'QMIP_le')
('p', 'R', 'co.QAM', 'co.QMIP_le') => ('-d', 'R', 'co.QAM', 'co.QMIP_le')
('p', 'AA', 'co.QIP', 'co.QMIP_le') => ('-d', 'AA', 'co.QIP', 'co.QMIP_le')
('p', 'AA', 'co.QIP', 'co.QMIP_le') => ('p', 'T', 'co.QIP', 'co.QMIP_le')
('p', 'AA', 'co.QIP', 'co.QMIP_le') => ('p', 'EA', 'co.QIP', 'co.QMIP_le')
('p', 'AA', 'QIP', 'QMIP_le') => ('-d', 'AA', 'QIP', 'QMIP_le')
('p', 'AA', 'QIP', 'QMIP_le') => ('p', 'T', 'QIP', 'QMIP_le')
('p', 'AA', 'QIP', 'QMIP_le') => ('p', 'EA', 'QIP', 'QMIP_le')
('p', 'EA', 'QIP', 'QMIP_le') => ('-d', 'EA', 'QIP', 'QMIP_le')
('p', 'EA', 'QIP', 'QMIP_le') => ('p', 'E', 'QIP', 'QMIP_le')
('p', 'EA', 'co.QIP', 'co.QMIP_le') => ('-d', 'EA', 'co.QIP', 'co.QMIP_le')
('p', 'EA', 'co.QIP', 'co.QMIP_le') => ('p', 'E', 'co.QIP', 'co.QMIP_le')
('p', 'E', 'co.QIP', 'co.QMIP_le') => ('-d', 'E', 'co.QIP', 'co.QMIP_le')
('p', 'E', 'QIP', 'QMIP_le') => ('-d', 'E', 'QIP', 'QMIP_le')
('p', 'T', 'QIP', 'QMIP_le') => ('-d', 'T', 'QIP', 'QMIP_le')
('p', 'T', 'co.QIP', 'co.QMIP_le') => ('-d', 'T', 'co.QIP', 'co.QMIP_le')
('p', 'R', 'co.QIP', 'co.QMIP_le') => ('-d', 'R', 'co.QIP', 'co.QMIP_le')
('p', 'R', 'QIP', 'QMIP_le') => ('-d', 'R', 'QIP', 'QMIP_le')
('d', 'A', 'co.NP', 'IP') => ('-p', 'A', 'co.NP', 'IP')
('d', 'A', 'NP', 'co.IP') => ('-p', 'A', 'NP', 'co.IP')
('p', 'A', 'RG(3)', 'EXP_plo') => ('-d', 'A', 'RG(3)', 'EXP_plo')
('p', 'A', 'RG(3)', 'EXP_plo') => ('p', 'R', 'RG(3)', 'EXP_plo')
('p', 'A', 'RG(3)', 'EXP_plo') => ('p', 'AA', 'RG(3)', 'EXP_plo')
('d', 'A', 'EXP_plo', 'co.AWPP') => ('-p', 'A', 'EXP_plo', 'co.AWPP')
('d', 'A', 'EXP_plo', 'AWPP') => ('-p', 'A', 'EXP_plo', 'AWPP')
('-d', 'A', 'RG(3)', 'ALL') => ('-d', 'R', 'RG(3)', 'ALL')
('-d', 'A', 'RG(3)', 'ALL') => ('-d', 'AA', 'RG(3)', 'ALL')
('-d', 'A', 'Delta_2P', 'ALL') => ('-d', 'AA', 'Delta_2P', 'ALL')
('-d', 'AA', 'Delta_2P', 'ALL') => ('-d', 'T', 'Delta_2P', 'ALL')
('-d', 'AA', 'Delta_2P', 'ALL') => ('-d', 'EA', 'Delta_2P', 'ALL')
('-d', 'A', 'S_2P', 'ALL') => ('-d', 'AA', 'S_2P', 'ALL')
('-d', 'AA', 'S_2P', 'ALL') => ('-d', 'T', 'S_2P', 'ALL')
('-d', 'AA', 'S_2P', 'ALL') => ('-d', 'EA', 'S_2P', 'ALL')
('-d', 'A', 'RG(1)', 'ALL') => ('-d', 'R', 'RG(1)', 'ALL')
('-d', 'A', 'RG(1)', 'ALL') => ('-d', 'AA', 'RG(1)', 'ALL')
('-d', 'AA', 'RG(1)', 'ALL') => ('-d', 'T', 'RG(1)', 'ALL')
('-d', 'AA', 'RG(1)', 'ALL') => ('-d', 'EA', 'RG(1)', 'ALL')
('-d', 'A', 'RG(2)', 'ALL') => ('-d', 'R', 'RG(2)', 'ALL')
('-d', 'A', 'RG(2)', 'ALL') => ('-d', 'AA', 'RG(2)', 'ALL')
('-d', 'AA', 'RG(2)', 'ALL') => ('-d', 'T', 'RG(2)', 'ALL')
('-d', 'AA', 'RG(2)', 'ALL') => ('-d', 'EA', 'RG(2)', 'ALL')
('-d', 'AA', 'RG(3)', 'ALL') => ('-d', 'T', 'RG(3)', 'ALL')
('-d', 'AA', 'RG(3)', 'ALL') => ('-d', 'EA', 'RG(3)', 'ALL')
('p', 'A', 'RG(3)', 'ALL') => ('p', 'R', 'RG(3)', 'ALL')
('p', 'A', 'RG(3)', 'ALL') => ('p', 'AA', 'RG(3)', 'ALL')
('p', 'A', 'Delta_2P', 'ALL') => ('p', 'AA', 'Delta_2P', 'ALL')
('p', 'AA', 'Delta_2P', 'ALL') => ('p', 'T', 'Delta_2P', 'ALL')
('p', 'AA', 'Delta_2P', 'ALL') => ('p', 'EA', 'Delta_2P', 'ALL')
('p', 'A', 'S_2P', 'ALL') => ('p', 'AA', 'S_2P', 'ALL')
('p', 'AA', 'S_2P', 'ALL') => ('p', 'T', 'S_2P', 'ALL')
('p', 'AA', 'S_2P', 'ALL') => ('p', 'EA', 'S_2P', 'ALL')
('p', 'A', 'RG(1)', 'ALL') => ('p', 'R', 'RG(1)', 'ALL')
('p', 'A', 'RG(1)', 'ALL') => ('p', 'AA', 'RG(1)', 'ALL')
('p', 'AA', 'RG(1)', 'ALL') => ('p', 'T', 'RG(1)', 'ALL')
('p', 'AA', 'RG(1)', 'ALL') => ('p', 'EA', 'RG(1)', 'ALL')
('p', 'A', 'RG(2)', 'ALL') => ('p', 'R', 'RG(2)', 'ALL')
('p', 'A', 'RG(2)', 'ALL') => ('p', 'AA', 'RG(2)', 'ALL')
('p', 'AA', 'RG(2)', 'ALL') => ('p', 'T', 'RG(2)', 'ALL')
('p', 'AA', 'RG(2)', 'ALL') => ('p', 'EA', 'RG(2)', 'ALL')
('p', 'AA', 'RG(3)', 'ALL') => ('p', 'T', 'RG(3)', 'ALL')
('p', 'AA', 'RG(3)', 'ALL') => ('p', 'EA', 'RG(3)', 'ALL')
('p', 'E', 'P^Sharp-P', 'EXP_plo') => ('-d', 'E', 'P^Sharp-P', 'EXP_plo')
('-d', 'A', 'RG(3)', 'cocap.NEXP_plo') => ('-d', 'R', 'RG(3)', 'cocap.NEXP_plo')
('-d', 'A', 'RG(3)', 'cocap.NEXP_plo') => ('-d', 'AA', 'RG(3)', 'cocap.NEXP_plo')
('-d', 'A', 'RG(3)', 'co.NEXP') => ('-d', 'R', 'RG(3)', 'co.NEXP')
('-d', 'A', 'RG(3)', 'co.NEXP') => ('-d', 'AA', 'RG(3)', 'co.NEXP')
('-d', 'A', 'RG(3)', 'NEXP') => ('-d', 'R', 'RG(3)', 'NEXP')
('-d', 'A', 'RG(3)', 'NEXP') => ('-d', 'AA', 'RG(3)', 'NEXP')
('-d', 'A', 'RG(3)', 'cocap.NEXP') => ('-d', 'R', 'RG(3)', 'cocap.NEXP')
('-d', 'A', 'RG(3)', 'cocap.NEXP') => ('-d', 'AA', 'RG(3)', 'cocap.NEXP')
('-d', 'A', 'Delta_2P', 'cocap.NEXP') => ('-d', 'AA', 'Delta_2P', 'cocap.NEXP')
('-d', 'A', 'Delta_2P', 'co.NEXP') => ('-d', 'AA', 'Delta_2P', 'co.NEXP')
('-d', 'A', 'Delta_2P', 'NEXP') => ('-d', 'AA', 'Delta_2P', 'NEXP')
('-d', 'A', 'Delta_2P', 'R') => ('-d', 'AA', 'Delta_2P', 'R')
('-d', 'A', 'Delta_2P', 'RE') => ('-d', 'AA', 'Delta_2P', 'RE')
('-d', 'A', 'Delta_2P', 'co.RE') => ('-d', 'AA', 'Delta_2P', 'co.RE')
('-d', 'AA', 'Delta_2P', 'co.RE') => ('-d', 'T', 'Delta_2P', 'co.RE')
('-d', 'AA', 'Delta_2P', 'co.RE') => ('-d', 'EA', 'Delta_2P', 'co.RE')
('-d', 'AA', 'Delta_2P', 'RE') => ('-d', 'T', 'Delta_2P', 'RE')
('-d', 'AA', 'Delta_2P', 'RE') => ('-d', 'EA', 'Delta_2P', 'RE')
('-d', 'AA', 'Delta_2P', 'R') => ('-d', 'T', 'Delta_2P', 'R')
('-d', 'AA', 'Delta_2P', 'R') => ('-d', 'EA', 'Delta_2P', 'R')
('-d', 'A', 'Delta_2P', 'NEXP/poly') => ('-d', 'AA', 'Delta_2P', 'NEXP/poly')
('-d', 'AA', 'Delta_2P', 'NEXP/poly') => ('-d', 'T', 'Delta_2P', 'NEXP/poly')
('-d', 'AA', 'Delta_2P', 'NEXP/poly') => ('-d', 'EA', 'Delta_2P', 'NEXP/poly')
('-d', 'AA', 'Delta_2P', 'NEXP') => ('-d', 'T', 'Delta_2P', 'NEXP')
('-d', 'AA', 'Delta_2P', 'NEXP') => ('-d', 'EA', 'Delta_2P', 'NEXP')
('-d', 'AA', 'Delta_2P', 'co.NEXP') => ('-d', 'T', 'Delta_2P', 'co.NEXP')
('-d', 'AA', 'Delta_2P', 'co.NEXP') => ('-d', 'EA', 'Delta_2P', 'co.NEXP')
('-d', 'AA', 'Delta_2P', 'cocap.NEXP') => ('-d', 'T', 'Delta_2P', 'cocap.NEXP')
('-d', 'AA', 'Delta_2P', 'cocap.NEXP') => ('-d', 'EA', 'Delta_2P', 'cocap.NEXP')
('-d', 'A', 'S_2P', 'cocap.NEXP') => ('-d', 'AA', 'S_2P', 'cocap.NEXP')
('-d', 'A', 'S_2P', 'co.NEXP') => ('-d', 'AA', 'S_2P', 'co.NEXP')
('-d', 'A', 'S_2P', 'NEXP') => ('-d', 'AA', 'S_2P', 'NEXP')
('-d', 'A', 'S_2P', 'R') => ('-d', 'AA', 'S_2P', 'R')
('-d', 'A', 'S_2P', 'RE') => ('-d', 'AA', 'S_2P', 'RE')
('-d', 'A', 'S_2P', 'co.RE') => ('-d', 'AA', 'S_2P', 'co.RE')
('-d', 'AA', 'S_2P', 'co.RE') => ('-d', 'T', 'S_2P', 'co.RE')
('-d', 'AA', 'S_2P', 'co.RE') => ('-d', 'EA', 'S_2P', 'co.RE')
('-d', 'AA', 'S_2P', 'RE') => ('-d', 'T', 'S_2P', 'RE')
('-d', 'AA', 'S_2P', 'RE') => ('-d', 'EA', 'S_2P', 'RE')
('-d', 'AA', 'S_2P', 'R') => ('-d', 'T', 'S_2P', 'R')
('-d', 'AA', 'S_2P', 'R') => ('-d', 'EA', 'S_2P', 'R')
('-d', 'A', 'S_2P', 'NEXP/poly') => ('-d', 'AA', 'S_2P', 'NEXP/poly')
('-d', 'AA', 'S_2P', 'NEXP/poly') => ('-d', 'T', 'S_2P', 'NEXP/poly')
('-d', 'AA', 'S_2P', 'NEXP/poly') => ('-d', 'EA', 'S_2P', 'NEXP/poly')
('-d', 'AA', 'S_2P', 'NEXP') => ('-d', 'T', 'S_2P', 'NEXP')
('-d', 'AA', 'S_2P', 'NEXP') => ('-d', 'EA', 'S_2P', 'NEXP')
('-d', 'AA', 'S_2P', 'co.NEXP') => ('-d', 'T', 'S_2P', 'co.NEXP')
('-d', 'AA', 'S_2P', 'co.NEXP') => ('-d', 'EA', 'S_2P', 'co.NEXP')
('-d', 'AA', 'S_2P', 'cocap.NEXP') => ('-d', 'T', 'S_2P', 'cocap.NEXP')
('-d', 'AA', 'S_2P', 'cocap.NEXP') => ('-d', 'EA', 'S_2P', 'cocap.NEXP')
('-d', 'A', 'RG(1)', 'cocap.NEXP') => ('-d', 'R', 'RG(1)', 'cocap.NEXP')
('-d', 'A', 'RG(1)', 'cocap.NEXP') => ('-d', 'AA', 'RG(1)', 'cocap.NEXP')
('-d', 'A', 'RG(1)', 'co.NEXP') => ('-d', 'R', 'RG(1)', 'co.NEXP')
('-d', 'A', 'RG(1)', 'co.NEXP') => ('-d', 'AA', 'RG(1)', 'co.NEXP')
('-d', 'A', 'RG(1)', 'NEXP') => ('-d', 'R', 'RG(1)', 'NEXP')
('-d', 'A', 'RG(1)', 'NEXP') => ('-d', 'AA', 'RG(1)', 'NEXP')
('-d', 'A', 'RG(1)', 'R') => ('-d', 'R', 'RG(1)', 'R')
('-d', 'A', 'RG(1)', 'R') => ('-d', 'AA', 'RG(1)', 'R')
('-d', 'A', 'RG(1)', 'RE') => ('-d', 'R', 'RG(1)', 'RE')
('-d', 'A', 'RG(1)', 'RE') => ('-d', 'AA', 'RG(1)', 'RE')
('-d', 'A', 'RG(1)', 'co.RE') => ('-d', 'R', 'RG(1)', 'co.RE')
('-d', 'A', 'RG(1)', 'co.RE') => ('-d', 'AA', 'RG(1)', 'co.RE')
('-d', 'AA', 'RG(1)', 'co.RE') => ('-d', 'T', 'RG(1)', 'co.RE')
('-d', 'AA', 'RG(1)', 'co.RE') => ('-d', 'EA', 'RG(1)', 'co.RE')
('-d', 'AA', 'RG(1)', 'RE') => ('-d', 'T', 'RG(1)', 'RE')
('-d', 'AA', 'RG(1)', 'RE') => ('-d', 'EA', 'RG(1)', 'RE')
('-d', 'AA', 'RG(1)', 'R') => ('-d', 'T', 'RG(1)', 'R')
('-d', 'AA', 'RG(1)', 'R') => ('-d', 'EA', 'RG(1)', 'R')
('-d', 'A', 'RG(1)', 'NEXP/poly') => ('-d', 'R', 'RG(1)', 'NEXP/poly')
('-d', 'A', 'RG(1)', 'NEXP/poly') => ('-d', 'AA', 'RG(1)', 'NEXP/poly')
('-d', 'AA', 'RG(1)', 'NEXP/poly') => ('-d', 'T', 'RG(1)', 'NEXP/poly')
('-d', 'AA', 'RG(1)', 'NEXP/poly') => ('-d', 'EA', 'RG(1)', 'NEXP/poly')
('-d', 'AA', 'RG(1)', 'NEXP') => ('-d', 'T', 'RG(1)', 'NEXP')
('-d', 'AA', 'RG(1)', 'NEXP') => ('-d', 'EA', 'RG(1)', 'NEXP')
('-d', 'AA', 'RG(1)', 'co.NEXP') => ('-d', 'T', 'RG(1)', 'co.NEXP')
('-d', 'AA', 'RG(1)', 'co.NEXP') => ('-d', 'EA', 'RG(1)', 'co.NEXP')
('-d', 'AA', 'RG(1)', 'cocap.NEXP') => ('-d', 'T', 'RG(1)', 'cocap.NEXP')
('-d', 'AA', 'RG(1)', 'cocap.NEXP') => ('-d', 'EA', 'RG(1)', 'cocap.NEXP')
('-d', 'A', 'RG(3)', 'R') => ('-d', 'R', 'RG(3)', 'R')
('-d', 'A', 'RG(3)', 'R') => ('-d', 'AA', 'RG(3)', 'R')
('-d', 'A', 'RG(3)', 'RE') => ('-d', 'R', 'RG(3)', 'RE')
('-d', 'A', 'RG(3)', 'RE') => ('-d', 'AA', 'RG(3)', 'RE')
('-d', 'A', 'RG(3)', 'co.RE') => ('-d', 'R', 'RG(3)', 'co.RE')
('-d', 'A', 'RG(3)', 'co.RE') => ('-d', 'AA', 'RG(3)', 'co.RE')
('-d', 'A', 'RG(2)', 'co.RE') => ('-d', 'R', 'RG(2)', 'co.RE')
('-d', 'A', 'RG(2)', 'co.RE') => ('-d', 'AA', 'RG(2)', 'co.RE')
('-d', 'A', 'RG(2)', 'RE') => ('-d', 'R', 'RG(2)', 'RE')
('-d', 'A', 'RG(2)', 'RE') => ('-d', 'AA', 'RG(2)', 'RE')
('-d', 'A', 'RG(2)', 'R') => ('-d', 'R', 'RG(2)', 'R')
('-d', 'A', 'RG(2)', 'R') => ('-d', 'AA', 'RG(2)', 'R')
('-d', 'AA', 'RG(2)', 'R') => ('-d', 'T', 'RG(2)', 'R')
('-d', 'AA', 'RG(2)', 'R') => ('-d', 'EA', 'RG(2)', 'R')
('-d', 'AA', 'RG(2)', 'RE') => ('-d', 'T', 'RG(2)', 'RE')
('-d', 'AA', 'RG(2)', 'RE') => ('-d', 'EA', 'RG(2)', 'RE')
('-d', 'AA', 'RG(2)', 'co.RE') => ('-d', 'T', 'RG(2)', 'co.RE')
('-d', 'AA', 'RG(2)', 'co.RE') => ('-d', 'EA', 'RG(2)', 'co.RE')
('-d', 'AA', 'RG(3)', 'co.RE') => ('-d', 'T', 'RG(3)', 'co.RE')
('-d', 'AA', 'RG(3)', 'co.RE') => ('-d', 'EA', 'RG(3)', 'co.RE')
('-d', 'AA', 'RG(3)', 'RE') => ('-d', 'T', 'RG(3)', 'RE')
('-d', 'AA', 'RG(3)', 'RE') => ('-d', 'EA', 'RG(3)', 'RE')
('-d', 'AA', 'RG(3)', 'R') => ('-d', 'T', 'RG(3)', 'R')
('-d', 'AA', 'RG(3)', 'R') => ('-d', 'EA', 'RG(3)', 'R')
('-d', 'A', 'RG(2)', 'cocap.NEXP') => ('-d', 'R', 'RG(2)', 'cocap.NEXP')
('-d', 'A', 'RG(2)', 'cocap.NEXP') => ('-d', 'AA', 'RG(2)', 'cocap.NEXP')
('-d', 'A', 'RG(2)', 'co.NEXP') => ('-d', 'R', 'RG(2)', 'co.NEXP')
('-d', 'A', 'RG(2)', 'co.NEXP') => ('-d', 'AA', 'RG(2)', 'co.NEXP')
('-d', 'A', 'RG(2)', 'NEXP') => ('-d', 'R', 'RG(2)', 'NEXP')
('-d', 'A', 'RG(2)', 'NEXP') => ('-d', 'AA', 'RG(2)', 'NEXP')
('-d', 'A', 'RG(2)', 'NEXP/poly') => ('-d', 'R', 'RG(2)', 'NEXP/poly')
('-d', 'A', 'RG(2)', 'NEXP/poly') => ('-d', 'AA', 'RG(2)', 'NEXP/poly')
('-d', 'AA', 'RG(2)', 'NEXP/poly') => ('-d', 'T', 'RG(2)', 'NEXP/poly')
('-d', 'AA', 'RG(2)', 'NEXP/poly') => ('-d', 'EA', 'RG(2)', 'NEXP/poly')
('-d', 'AA', 'RG(2)', 'NEXP') => ('-d', 'T', 'RG(2)', 'NEXP')
('-d', 'AA', 'RG(2)', 'NEXP') => ('-d', 'EA', 'RG(2)', 'NEXP')
('-d', 'AA', 'RG(2)', 'co.NEXP') => ('-d', 'T', 'RG(2)', 'co.NEXP')
('-d', 'AA', 'RG(2)', 'co.NEXP') => ('-d', 'EA', 'RG(2)', 'co.NEXP')
('-d', 'AA', 'RG(2)', 'cocap.NEXP') => ('-d', 'T', 'RG(2)', 'cocap.NEXP')
('-d', 'AA', 'RG(2)', 'cocap.NEXP') => ('-d', 'EA', 'RG(2)', 'cocap.NEXP')
('-d', 'A', 'RG(3)', 'NEXP/poly') => ('-d', 'R', 'RG(3)', 'NEXP/poly')
('-d', 'A', 'RG(3)', 'NEXP/poly') => ('-d', 'AA', 'RG(3)', 'NEXP/poly')
('-d', 'AA', 'RG(3)', 'NEXP/poly') => ('-d', 'T', 'RG(3)', 'NEXP/poly')
('-d', 'AA', 'RG(3)', 'NEXP/poly') => ('-d', 'EA', 'RG(3)', 'NEXP/poly')
('-d', 'AA', 'RG(3)', 'cocap.NEXP') => ('-d', 'T', 'RG(3)', 'cocap.NEXP')
('-d', 'AA', 'RG(3)', 'cocap.NEXP') => ('-d', 'EA', 'RG(3)', 'cocap.NEXP')
('-d', 'AA', 'RG(3)', 'co.NEXP') => ('-d', 'T', 'RG(3)', 'co.NEXP')
('-d', 'AA', 'RG(3)', 'co.NEXP') => ('-d', 'EA', 'RG(3)', 'co.NEXP')
('-d', 'AA', 'RG(3)', 'NEXP') => ('-d', 'T', 'RG(3)', 'NEXP')
('-d', 'AA', 'RG(3)', 'NEXP') => ('-d', 'EA', 'RG(3)', 'NEXP')
('-d', 'A', 'Delta_2P', 'cocap.NEXP_plo') => ('-d', 'AA', 'Delta_2P', 'cocap.NEXP_plo')
('-d', 'A', 'Delta_2P', 'co.NEXP_plo') => ('-d', 'AA', 'Delta_2P', 'co.NEXP_plo')
('-d', 'A', 'Delta_2P', 'NEXP_plo') => ('-d', 'AA', 'Delta_2P', 'NEXP_plo')
('-d', 'A', 'Delta_2P', 'AH') => ('-d', 'AA', 'Delta_2P', 'AH')
('-d', 'AA', 'Delta_2P', 'AH') => ('-d', 'T', 'Delta_2P', 'AH')
('-d', 'AA', 'Delta_2P', 'AH') => ('-d', 'EA', 'Delta_2P', 'AH')
('-d', 'A', 'Delta_2P', 'AH_plo') => ('-d', 'AA', 'Delta_2P', 'AH_plo')
('-d', 'A', 'Delta_2P', 'co.AH_plo') => ('-d', 'AA', 'Delta_2P', 'co.AH_plo')
('-d', 'A', 'Delta_2P', 'cocap.AH_plo') => ('-d', 'AA', 'Delta_2P', 'cocap.AH_plo')
('-d', 'AA', 'Delta_2P', 'cocap.AH_plo') => ('-d', 'T', 'Delta_2P', 'cocap.AH_plo')
('-d', 'AA', 'Delta_2P', 'cocap.AH_plo') => ('-d', 'EA', 'Delta_2P', 'cocap.AH_plo')
('-d', 'AA', 'Delta_2P', 'co.AH_plo') => ('-d', 'T', 'Delta_2P', 'co.AH_plo')
('-d', 'AA', 'Delta_2P', 'co.AH_plo') => ('-d', 'EA', 'Delta_2P', 'co.AH_plo')
('-d', 'AA', 'Delta_2P', 'AH_plo') => ('-d', 'T', 'Delta_2P', 'AH_plo')
('-d', 'AA', 'Delta_2P', 'AH_plo') => ('-d', 'EA', 'Delta_2P', 'AH_plo')
('-d', 'AA', 'Delta_2P', 'NEXP_plo') => ('-d', 'T', 'Delta_2P', 'NEXP_plo')
('-d', 'AA', 'Delta_2P', 'NEXP_plo') => ('-d', 'EA', 'Delta_2P', 'NEXP_plo')
('-d', 'AA', 'Delta_2P', 'co.NEXP_plo') => ('-d', 'T', 'Delta_2P', 'co.NEXP_plo')
('-d', 'AA', 'Delta_2P', 'co.NEXP_plo') => ('-d', 'EA', 'Delta_2P', 'co.NEXP_plo')
('-d', 'AA', 'Delta_2P', 'cocap.NEXP_plo') => ('-d', 'T', 'Delta_2P', 'cocap.NEXP_plo')
('-d', 'AA', 'Delta_2P', 'cocap.NEXP_plo') => ('-d', 'EA', 'Delta_2P', 'cocap.NEXP_plo')
('-d', 'A', 'RG(3)', 'co.NEXP_plo') => ('-d', 'R', 'RG(3)', 'co.NEXP_plo')
('-d', 'A', 'RG(3)', 'co.NEXP_plo') => ('-d', 'AA', 'RG(3)', 'co.NEXP_plo')
('-d', 'A', 'RG(3)', 'NEXP_plo') => ('-d', 'R', 'RG(3)', 'NEXP_plo')
('-d', 'A', 'RG(3)', 'NEXP_plo') => ('-d', 'AA', 'RG(3)', 'NEXP_plo')
('-d', 'A', 'S_2P', 'NEXP_plo') => ('-d', 'AA', 'S_2P', 'NEXP_plo')
('-d', 'A', 'S_2P', 'co.NEXP_plo') => ('-d', 'AA', 'S_2P', 'co.NEXP_plo')
('-d', 'A', 'S_2P', 'cocap.NEXP_plo') => ('-d', 'AA', 'S_2P', 'cocap.NEXP_plo')
('-d', 'A', 'S_2P', 'AH') => ('-d', 'AA', 'S_2P', 'AH')
('-d', 'AA', 'S_2P', 'AH') => ('-d', 'T', 'S_2P', 'AH')
('-d', 'AA', 'S_2P', 'AH') => ('-d', 'EA', 'S_2P', 'AH')
('-d', 'A', 'S_2P', 'cocap.AH_plo') => ('-d', 'AA', 'S_2P', 'cocap.AH_plo')
('-d', 'A', 'S_2P', 'co.AH_plo') => ('-d', 'AA', 'S_2P', 'co.AH_plo')
('-d', 'A', 'S_2P', 'AH_plo') => ('-d', 'AA', 'S_2P', 'AH_plo')
('-d', 'AA', 'S_2P', 'AH_plo') => ('-d', 'T', 'S_2P', 'AH_plo')
('-d', 'AA', 'S_2P', 'AH_plo') => ('-d', 'EA', 'S_2P', 'AH_plo')
('-d', 'AA', 'S_2P', 'co.AH_plo') => ('-d', 'T', 'S_2P', 'co.AH_plo')
('-d', 'AA', 'S_2P', 'co.AH_plo') => ('-d', 'EA', 'S_2P', 'co.AH_plo')
('-d', 'AA', 'S_2P', 'cocap.AH_plo') => ('-d', 'T', 'S_2P', 'cocap.AH_plo')
('-d', 'AA', 'S_2P', 'cocap.AH_plo') => ('-d', 'EA', 'S_2P', 'cocap.AH_plo')
('-d', 'AA', 'S_2P', 'cocap.NEXP_plo') => ('-d', 'T', 'S_2P', 'cocap.NEXP_plo')
('-d', 'AA', 'S_2P', 'cocap.NEXP_plo') => ('-d', 'EA', 'S_2P', 'cocap.NEXP_plo')
('-d', 'AA', 'S_2P', 'co.NEXP_plo') => ('-d', 'T', 'S_2P', 'co.NEXP_plo')
('-d', 'AA', 'S_2P', 'co.NEXP_plo') => ('-d', 'EA', 'S_2P', 'co.NEXP_plo')
('-d', 'AA', 'S_2P', 'NEXP_plo') => ('-d', 'T', 'S_2P', 'NEXP_plo')
('-d', 'AA', 'S_2P', 'NEXP_plo') => ('-d', 'EA', 'S_2P', 'NEXP_plo')
('-d', 'A', 'RG(1)', 'NEXP_plo') => ('-d', 'R', 'RG(1)', 'NEXP_plo')
('-d', 'A', 'RG(1)', 'NEXP_plo') => ('-d', 'AA', 'RG(1)', 'NEXP_plo')
('-d', 'A', 'RG(1)', 'co.NEXP_plo') => ('-d', 'R', 'RG(1)', 'co.NEXP_plo')
('-d', 'A', 'RG(1)', 'co.NEXP_plo') => ('-d', 'AA', 'RG(1)', 'co.NEXP_plo')
('-d', 'A', 'RG(1)', 'cocap.NEXP_plo') => ('-d', 'R', 'RG(1)', 'cocap.NEXP_plo')
('-d', 'A', 'RG(1)', 'cocap.NEXP_plo') => ('-d', 'AA', 'RG(1)', 'cocap.NEXP_plo')
('-d', 'A', 'RG(1)', 'AH') => ('-d', 'R', 'RG(1)', 'AH')
('-d', 'A', 'RG(1)', 'AH') => ('-d', 'AA', 'RG(1)', 'AH')
('-d', 'AA', 'RG(1)', 'AH') => ('-d', 'T', 'RG(1)', 'AH')
('-d', 'AA', 'RG(1)', 'AH') => ('-d', 'EA', 'RG(1)', 'AH')
('-d', 'A', 'RG(1)', 'cocap.AH_plo') => ('-d', 'R', 'RG(1)', 'cocap.AH_plo')
('-d', 'A', 'RG(1)', 'cocap.AH_plo') => ('-d', 'AA', 'RG(1)', 'cocap.AH_plo')
('-d', 'A', 'RG(1)', 'co.AH_plo') => ('-d', 'R', 'RG(1)', 'co.AH_plo')
('-d', 'A', 'RG(1)', 'co.AH_plo') => ('-d', 'AA', 'RG(1)', 'co.AH_plo')
('-d', 'A', 'RG(1)', 'AH_plo') => ('-d', 'R', 'RG(1)', 'AH_plo')
('-d', 'A', 'RG(1)', 'AH_plo') => ('-d', 'AA', 'RG(1)', 'AH_plo')
('-d', 'AA', 'RG(1)', 'AH_plo') => ('-d', 'T', 'RG(1)', 'AH_plo')
('-d', 'AA', 'RG(1)', 'AH_plo') => ('-d', 'EA', 'RG(1)', 'AH_plo')
('-d', 'AA', 'RG(1)', 'co.AH_plo') => ('-d', 'T', 'RG(1)', 'co.AH_plo')
('-d', 'AA', 'RG(1)', 'co.AH_plo') => ('-d', 'EA', 'RG(1)', 'co.AH_plo')
('-d', 'AA', 'RG(1)', 'cocap.AH_plo') => ('-d', 'T', 'RG(1)', 'cocap.AH_plo')
('-d', 'AA', 'RG(1)', 'cocap.AH_plo') => ('-d', 'EA', 'RG(1)', 'cocap.AH_plo')
('-d', 'AA', 'RG(1)', 'cocap.NEXP_plo') => ('-d', 'T', 'RG(1)', 'cocap.NEXP_plo')
('-d', 'AA', 'RG(1)', 'cocap.NEXP_plo') => ('-d', 'EA', 'RG(1)', 'cocap.NEXP_plo')
('-d', 'AA', 'RG(1)', 'co.NEXP_plo') => ('-d', 'T', 'RG(1)', 'co.NEXP_plo')
('-d', 'AA', 'RG(1)', 'co.NEXP_plo') => ('-d', 'EA', 'RG(1)', 'co.NEXP_plo')
('-d', 'AA', 'RG(1)', 'NEXP_plo') => ('-d', 'T', 'RG(1)', 'NEXP_plo')
('-d', 'AA', 'RG(1)', 'NEXP_plo') => ('-d', 'EA', 'RG(1)', 'NEXP_plo')
('-d', 'A', 'RG(3)', 'AH') => ('-d', 'R', 'RG(3)', 'AH')
('-d', 'A', 'RG(3)', 'AH') => ('-d', 'AA', 'RG(3)', 'AH')
('-d', 'A', 'RG(2)', 'AH') => ('-d', 'R', 'RG(2)', 'AH')
('-d', 'A', 'RG(2)', 'AH') => ('-d', 'AA', 'RG(2)', 'AH')
('-d', 'AA', 'RG(2)', 'AH') => ('-d', 'T', 'RG(2)', 'AH')
('-d', 'AA', 'RG(2)', 'AH') => ('-d', 'EA', 'RG(2)', 'AH')
('-d', 'AA', 'RG(3)', 'AH') => ('-d', 'T', 'RG(3)', 'AH')
('-d', 'AA', 'RG(3)', 'AH') => ('-d', 'EA', 'RG(3)', 'AH')
('-d', 'A', 'RG(2)', 'NEXP_plo') => ('-d', 'R', 'RG(2)', 'NEXP_plo')
('-d', 'A', 'RG(2)', 'NEXP_plo') => ('-d', 'AA', 'RG(2)', 'NEXP_plo')
('-d', 'A', 'RG(2)', 'co.NEXP_plo') => ('-d', 'R', 'RG(2)', 'co.NEXP_plo')
('-d', 'A', 'RG(2)', 'co.NEXP_plo') => ('-d', 'AA', 'RG(2)', 'co.NEXP_plo')
('-d', 'A', 'RG(2)', 'cocap.NEXP_plo') => ('-d', 'R', 'RG(2)', 'cocap.NEXP_plo')
('-d', 'A', 'RG(2)', 'cocap.NEXP_plo') => ('-d', 'AA', 'RG(2)', 'cocap.NEXP_plo')
('-d', 'A', 'RG(2)', 'cocap.AH_plo') => ('-d', 'R', 'RG(2)', 'cocap.AH_plo')
('-d', 'A', 'RG(2)', 'cocap.AH_plo') => ('-d', 'AA', 'RG(2)', 'cocap.AH_plo')
('-d', 'A', 'RG(2)', 'co.AH_plo') => ('-d', 'R', 'RG(2)', 'co.AH_plo')
('-d', 'A', 'RG(2)', 'co.AH_plo') => ('-d', 'AA', 'RG(2)', 'co.AH_plo')
('-d', 'A', 'RG(2)', 'AH_plo') => ('-d', 'R', 'RG(2)', 'AH_plo')
('-d', 'A', 'RG(2)', 'AH_plo') => ('-d', 'AA', 'RG(2)', 'AH_plo')
('-d', 'AA', 'RG(2)', 'AH_plo') => ('-d', 'T', 'RG(2)', 'AH_plo')
('-d', 'AA', 'RG(2)', 'AH_plo') => ('-d', 'EA', 'RG(2)', 'AH_plo')
('-d', 'AA', 'RG(2)', 'co.AH_plo') => ('-d', 'T', 'RG(2)', 'co.AH_plo')
('-d', 'AA', 'RG(2)', 'co.AH_plo') => ('-d', 'EA', 'RG(2)', 'co.AH_plo')
('-d', 'AA', 'RG(2)', 'cocap.AH_plo') => ('-d', 'T', 'RG(2)', 'cocap.AH_plo')
('-d', 'AA', 'RG(2)', 'cocap.AH_plo') => ('-d', 'EA', 'RG(2)', 'cocap.AH_plo')
('-d', 'AA', 'RG(2)', 'cocap.NEXP_plo') => ('-d', 'T', 'RG(2)', 'cocap.NEXP_plo')
('-d', 'AA', 'RG(2)', 'cocap.NEXP_plo') => ('-d', 'EA', 'RG(2)', 'cocap.NEXP_plo')
('-d', 'AA', 'RG(2)', 'co.NEXP_plo') => ('-d', 'T', 'RG(2)', 'co.NEXP_plo')
('-d', 'AA', 'RG(2)', 'co.NEXP_plo') => ('-d', 'EA', 'RG(2)', 'co.NEXP_plo')
('-d', 'AA', 'RG(2)', 'NEXP_plo') => ('-d', 'T', 'RG(2)', 'NEXP_plo')
('-d', 'AA', 'RG(2)', 'NEXP_plo') => ('-d', 'EA', 'RG(2)', 'NEXP_plo')
('-d', 'A', 'RG(3)', 'AH_plo') => ('-d', 'R', 'RG(3)', 'AH_plo')
('-d', 'A', 'RG(3)', 'AH_plo') => ('-d', 'AA', 'RG(3)', 'AH_plo')
('-d', 'A', 'RG(3)', 'co.AH_plo') => ('-d', 'R', 'RG(3)', 'co.AH_plo')
('-d', 'A', 'RG(3)', 'co.AH_plo') => ('-d', 'AA', 'RG(3)', 'co.AH_plo')
('-d', 'A', 'RG(3)', 'cocap.AH_plo') => ('-d', 'R', 'RG(3)', 'cocap.AH_plo')
('-d', 'A', 'RG(3)', 'cocap.AH_plo') => ('-d', 'AA', 'RG(3)', 'cocap.AH_plo')
('-d', 'AA', 'RG(3)', 'cocap.AH_plo') => ('-d', 'T', 'RG(3)', 'cocap.AH_plo')
('-d', 'AA', 'RG(3)', 'cocap.AH_plo') => ('-d', 'EA', 'RG(3)', 'cocap.AH_plo')
('-d', 'AA', 'RG(3)', 'co.AH_plo') => ('-d', 'T', 'RG(3)', 'co.AH_plo')
('-d', 'AA', 'RG(3)', 'co.AH_plo') => ('-d', 'EA', 'RG(3)', 'co.AH_plo')
('-d', 'AA', 'RG(3)', 'AH_plo') => ('-d', 'T', 'RG(3)', 'AH_plo')
('-d', 'AA', 'RG(3)', 'AH_plo') => ('-d', 'EA', 'RG(3)', 'AH_plo')
('-d', 'AA', 'RG(3)', 'NEXP_plo') => ('-d', 'T', 'RG(3)', 'NEXP_plo')
('-d', 'AA', 'RG(3)', 'NEXP_plo') => ('-d', 'EA', 'RG(3)', 'NEXP_plo')
('-d', 'AA', 'RG(3)', 'co.NEXP_plo') => ('-d', 'T', 'RG(3)', 'co.NEXP_plo')
('-d', 'AA', 'RG(3)', 'co.NEXP_plo') => ('-d', 'EA', 'RG(3)', 'co.NEXP_plo')
('-d', 'AA', 'RG(3)', 'cocap.NEXP_plo') => ('-d', 'T', 'RG(3)', 'cocap.NEXP_plo')
('-d', 'AA', 'RG(3)', 'cocap.NEXP_plo') => ('-d', 'EA', 'RG(3)', 'cocap.NEXP_plo')
('p', 'A', 'RG(3)', 'cocap.NEXP_plo') => ('p', 'R', 'RG(3)', 'cocap.NEXP_plo')
('p', 'A', 'RG(3)', 'cocap.NEXP_plo') => ('p', 'AA', 'RG(3)', 'cocap.NEXP_plo')
('p', 'A', 'RG(3)', 'co.NEXP') => ('p', 'R', 'RG(3)', 'co.NEXP')
('p', 'A', 'RG(3)', 'co.NEXP') => ('p', 'AA', 'RG(3)', 'co.NEXP')
('p', 'A', 'RG(3)', 'NEXP') => ('p', 'R', 'RG(3)', 'NEXP')
('p', 'A', 'RG(3)', 'NEXP') => ('p', 'AA', 'RG(3)', 'NEXP')
('p', 'A', 'RG(3)', 'cocap.NEXP') => ('p', 'R', 'RG(3)', 'cocap.NEXP')
('p', 'A', 'RG(3)', 'cocap.NEXP') => ('p', 'AA', 'RG(3)', 'cocap.NEXP')
('p', 'A', 'Delta_2P', 'cocap.NEXP') => ('p', 'AA', 'Delta_2P', 'cocap.NEXP')
('p', 'A', 'Delta_2P', 'co.NEXP') => ('p', 'AA', 'Delta_2P', 'co.NEXP')
('p', 'A', 'Delta_2P', 'NEXP') => ('p', 'AA', 'Delta_2P', 'NEXP')
('p', 'A', 'Delta_2P', 'R') => ('p', 'AA', 'Delta_2P', 'R')
('p', 'A', 'Delta_2P', 'RE') => ('p', 'AA', 'Delta_2P', 'RE')
('p', 'A', 'Delta_2P', 'co.RE') => ('p', 'AA', 'Delta_2P', 'co.RE')
('p', 'AA', 'Delta_2P', 'co.RE') => ('p', 'T', 'Delta_2P', 'co.RE')
('p', 'AA', 'Delta_2P', 'co.RE') => ('p', 'EA', 'Delta_2P', 'co.RE')
('p', 'AA', 'Delta_2P', 'RE') => ('p', 'T', 'Delta_2P', 'RE')
('p', 'AA', 'Delta_2P', 'RE') => ('p', 'EA', 'Delta_2P', 'RE')
('p', 'AA', 'Delta_2P', 'R') => ('p', 'T', 'Delta_2P', 'R')
('p', 'AA', 'Delta_2P', 'R') => ('p', 'EA', 'Delta_2P', 'R')
('p', 'A', 'Delta_2P', 'NEXP/poly') => ('p', 'AA', 'Delta_2P', 'NEXP/poly')
('p', 'AA', 'Delta_2P', 'NEXP/poly') => ('p', 'T', 'Delta_2P', 'NEXP/poly')
('p', 'AA', 'Delta_2P', 'NEXP/poly') => ('p', 'EA', 'Delta_2P', 'NEXP/poly')
('p', 'AA', 'Delta_2P', 'NEXP') => ('p', 'T', 'Delta_2P', 'NEXP')
('p', 'AA', 'Delta_2P', 'NEXP') => ('p', 'EA', 'Delta_2P', 'NEXP')
('p', 'AA', 'Delta_2P', 'co.NEXP') => ('p', 'T', 'Delta_2P', 'co.NEXP')
('p', 'AA', 'Delta_2P', 'co.NEXP') => ('p', 'EA', 'Delta_2P', 'co.NEXP')
('p', 'AA', 'Delta_2P', 'cocap.NEXP') => ('p', 'T', 'Delta_2P', 'cocap.NEXP')
('p', 'AA', 'Delta_2P', 'cocap.NEXP') => ('p', 'EA', 'Delta_2P', 'cocap.NEXP')
('p', 'A', 'S_2P', 'cocap.NEXP') => ('p', 'AA', 'S_2P', 'cocap.NEXP')
('p', 'A', 'S_2P', 'co.NEXP') => ('p', 'AA', 'S_2P', 'co.NEXP')
('p', 'A', 'S_2P', 'NEXP') => ('p', 'AA', 'S_2P', 'NEXP')
('p', 'A', 'S_2P', 'R') => ('p', 'AA', 'S_2P', 'R')
('p', 'A', 'S_2P', 'RE') => ('p', 'AA', 'S_2P', 'RE')
('p', 'A', 'S_2P', 'co.RE') => ('p', 'AA', 'S_2P', 'co.RE')
('p', 'AA', 'S_2P', 'co.RE') => ('p', 'T', 'S_2P', 'co.RE')
('p', 'AA', 'S_2P', 'co.RE') => ('p', 'EA', 'S_2P', 'co.RE')
('p', 'AA', 'S_2P', 'RE') => ('p', 'T', 'S_2P', 'RE')
('p', 'AA', 'S_2P', 'RE') => ('p', 'EA', 'S_2P', 'RE')
('p', 'AA', 'S_2P', 'R') => ('p', 'T', 'S_2P', 'R')
('p', 'AA', 'S_2P', 'R') => ('p', 'EA', 'S_2P', 'R')
('p', 'A', 'S_2P', 'NEXP/poly') => ('p', 'AA', 'S_2P', 'NEXP/poly')
('p', 'AA', 'S_2P', 'NEXP/poly') => ('p', 'T', 'S_2P', 'NEXP/poly')
('p', 'AA', 'S_2P', 'NEXP/poly') => ('p', 'EA', 'S_2P', 'NEXP/poly')
('p', 'AA', 'S_2P', 'NEXP') => ('p', 'T', 'S_2P', 'NEXP')
('p', 'AA', 'S_2P', 'NEXP') => ('p', 'EA', 'S_2P', 'NEXP')
('p', 'AA', 'S_2P', 'co.NEXP') => ('p', 'T', 'S_2P', 'co.NEXP')
('p', 'AA', 'S_2P', 'co.NEXP') => ('p', 'EA', 'S_2P', 'co.NEXP')
('p', 'AA', 'S_2P', 'cocap.NEXP') => ('p', 'T', 'S_2P', 'cocap.NEXP')
('p', 'AA', 'S_2P', 'cocap.NEXP') => ('p', 'EA', 'S_2P', 'cocap.NEXP')
('p', 'A', 'RG(1)', 'cocap.NEXP') => ('p', 'R', 'RG(1)', 'cocap.NEXP')
('p', 'A', 'RG(1)', 'cocap.NEXP') => ('p', 'AA', 'RG(1)', 'cocap.NEXP')
('p', 'A', 'RG(1)', 'co.NEXP') => ('p', 'R', 'RG(1)', 'co.NEXP')
('p', 'A', 'RG(1)', 'co.NEXP') => ('p', 'AA', 'RG(1)', 'co.NEXP')
('p', 'A', 'RG(1)', 'NEXP') => ('p', 'R', 'RG(1)', 'NEXP')
('p', 'A', 'RG(1)', 'NEXP') => ('p', 'AA', 'RG(1)', 'NEXP')
('p', 'A', 'RG(1)', 'R') => ('p', 'R', 'RG(1)', 'R')
('p', 'A', 'RG(1)', 'R') => ('p', 'AA', 'RG(1)', 'R')
('p', 'A', 'RG(1)', 'RE') => ('p', 'R', 'RG(1)', 'RE')
('p', 'A', 'RG(1)', 'RE') => ('p', 'AA', 'RG(1)', 'RE')
('p', 'A', 'RG(1)', 'co.RE') => ('p', 'R', 'RG(1)', 'co.RE')
('p', 'A', 'RG(1)', 'co.RE') => ('p', 'AA', 'RG(1)', 'co.RE')
('p', 'AA', 'RG(1)', 'co.RE') => ('p', 'T', 'RG(1)', 'co.RE')
('p', 'AA', 'RG(1)', 'co.RE') => ('p', 'EA', 'RG(1)', 'co.RE')
('p', 'AA', 'RG(1)', 'RE') => ('p', 'T', 'RG(1)', 'RE')
('p', 'AA', 'RG(1)', 'RE') => ('p', 'EA', 'RG(1)', 'RE')
('p', 'AA', 'RG(1)', 'R') => ('p', 'T', 'RG(1)', 'R')
('p', 'AA', 'RG(1)', 'R') => ('p', 'EA', 'RG(1)', 'R')
('p', 'A', 'RG(1)', 'NEXP/poly') => ('p', 'R', 'RG(1)', 'NEXP/poly')
('p', 'A', 'RG(1)', 'NEXP/poly') => ('p', 'AA', 'RG(1)', 'NEXP/poly')
('p', 'AA', 'RG(1)', 'NEXP/poly') => ('p', 'T', 'RG(1)', 'NEXP/poly')
('p', 'AA', 'RG(1)', 'NEXP/poly') => ('p', 'EA', 'RG(1)', 'NEXP/poly')
('p', 'AA', 'RG(1)', 'NEXP') => ('p', 'T', 'RG(1)', 'NEXP')
('p', 'AA', 'RG(1)', 'NEXP') => ('p', 'EA', 'RG(1)', 'NEXP')
('p', 'AA', 'RG(1)', 'co.NEXP') => ('p', 'T', 'RG(1)', 'co.NEXP')
('p', 'AA', 'RG(1)', 'co.NEXP') => ('p', 'EA', 'RG(1)', 'co.NEXP')
('p', 'AA', 'RG(1)', 'cocap.NEXP') => ('p', 'T', 'RG(1)', 'cocap.NEXP')
('p', 'AA', 'RG(1)', 'cocap.NEXP') => ('p', 'EA', 'RG(1)', 'cocap.NEXP')
('p', 'A', 'RG(3)', 'R') => ('p', 'R', 'RG(3)', 'R')
('p', 'A', 'RG(3)', 'R') => ('p', 'AA', 'RG(3)', 'R')
('p', 'A', 'RG(3)', 'RE') => ('p', 'R', 'RG(3)', 'RE')
('p', 'A', 'RG(3)', 'RE') => ('p', 'AA', 'RG(3)', 'RE')
('p', 'A', 'RG(3)', 'co.RE') => ('p', 'R', 'RG(3)', 'co.RE')
('p', 'A', 'RG(3)', 'co.RE') => ('p', 'AA', 'RG(3)', 'co.RE')
('p', 'A', 'RG(2)', 'co.RE') => ('p', 'R', 'RG(2)', 'co.RE')
('p', 'A', 'RG(2)', 'co.RE') => ('p', 'AA', 'RG(2)', 'co.RE')
('p', 'A', 'RG(2)', 'RE') => ('p', 'R', 'RG(2)', 'RE')
('p', 'A', 'RG(2)', 'RE') => ('p', 'AA', 'RG(2)', 'RE')
('p', 'A', 'RG(2)', 'R') => ('p', 'R', 'RG(2)', 'R')
('p', 'A', 'RG(2)', 'R') => ('p', 'AA', 'RG(2)', 'R')
('p', 'AA', 'RG(2)', 'R') => ('p', 'T', 'RG(2)', 'R')
('p', 'AA', 'RG(2)', 'R') => ('p', 'EA', 'RG(2)', 'R')
('p', 'AA', 'RG(2)', 'RE') => ('p', 'T', 'RG(2)', 'RE')
('p', 'AA', 'RG(2)', 'RE') => ('p', 'EA', 'RG(2)', 'RE')
('p', 'AA', 'RG(2)', 'co.RE') => ('p', 'T', 'RG(2)', 'co.RE')
('p', 'AA', 'RG(2)', 'co.RE') => ('p', 'EA', 'RG(2)', 'co.RE')
('p', 'AA', 'RG(3)', 'co.RE') => ('p', 'T', 'RG(3)', 'co.RE')
('p', 'AA', 'RG(3)', 'co.RE') => ('p', 'EA', 'RG(3)', 'co.RE')
('p', 'AA', 'RG(3)', 'RE') => ('p', 'T', 'RG(3)', 'RE')
('p', 'AA', 'RG(3)', 'RE') => ('p', 'EA', 'RG(3)', 'RE')
('p', 'AA', 'RG(3)', 'R') => ('p', 'T', 'RG(3)', 'R')
('p', 'AA', 'RG(3)', 'R') => ('p', 'EA', 'RG(3)', 'R')
('p', 'A', 'RG(2)', 'cocap.NEXP') => ('p', 'R', 'RG(2)', 'cocap.NEXP')
('p', 'A', 'RG(2)', 'cocap.NEXP') => ('p', 'AA', 'RG(2)', 'cocap.NEXP')
('p', 'A', 'RG(2)', 'co.NEXP') => ('p', 'R', 'RG(2)', 'co.NEXP')
('p', 'A', 'RG(2)', 'co.NEXP') => ('p', 'AA', 'RG(2)', 'co.NEXP')
('p', 'A', 'RG(2)', 'NEXP') => ('p', 'R', 'RG(2)', 'NEXP')
('p', 'A', 'RG(2)', 'NEXP') => ('p', 'AA', 'RG(2)', 'NEXP')
('p', 'A', 'RG(2)', 'NEXP/poly') => ('p', 'R', 'RG(2)', 'NEXP/poly')
('p', 'A', 'RG(2)', 'NEXP/poly') => ('p', 'AA', 'RG(2)', 'NEXP/poly')
('p', 'AA', 'RG(2)', 'NEXP/poly') => ('p', 'T', 'RG(2)', 'NEXP/poly')
('p', 'AA', 'RG(2)', 'NEXP/poly') => ('p', 'EA', 'RG(2)', 'NEXP/poly')
('p', 'AA', 'RG(2)', 'NEXP') => ('p', 'T', 'RG(2)', 'NEXP')
('p', 'AA', 'RG(2)', 'NEXP') => ('p', 'EA', 'RG(2)', 'NEXP')
('p', 'AA', 'RG(2)', 'co.NEXP') => ('p', 'T', 'RG(2)', 'co.NEXP')
('p', 'AA', 'RG(2)', 'co.NEXP') => ('p', 'EA', 'RG(2)', 'co.NEXP')
('p', 'AA', 'RG(2)', 'cocap.NEXP') => ('p', 'T', 'RG(2)', 'cocap.NEXP')
('p', 'AA', 'RG(2)', 'cocap.NEXP') => ('p', 'EA', 'RG(2)', 'cocap.NEXP')
('p', 'A', 'RG(3)', 'NEXP/poly') => ('p', 'R', 'RG(3)', 'NEXP/poly')
('p', 'A', 'RG(3)', 'NEXP/poly') => ('p', 'AA', 'RG(3)', 'NEXP/poly')
('p', 'AA', 'RG(3)', 'NEXP/poly') => ('p', 'T', 'RG(3)', 'NEXP/poly')
('p', 'AA', 'RG(3)', 'NEXP/poly') => ('p', 'EA', 'RG(3)', 'NEXP/poly')
('p', 'AA', 'RG(3)', 'cocap.NEXP') => ('p', 'T', 'RG(3)', 'cocap.NEXP')
('p', 'AA', 'RG(3)', 'cocap.NEXP') => ('p', 'EA', 'RG(3)', 'cocap.NEXP')
('p', 'AA', 'RG(3)', 'co.NEXP') => ('p', 'T', 'RG(3)', 'co.NEXP')
('p', 'AA', 'RG(3)', 'co.NEXP') => ('p', 'EA', 'RG(3)', 'co.NEXP')
('p', 'AA', 'RG(3)', 'NEXP') => ('p', 'T', 'RG(3)', 'NEXP')
('p', 'AA', 'RG(3)', 'NEXP') => ('p', 'EA', 'RG(3)', 'NEXP')
('p', 'A', 'Delta_2P', 'cocap.NEXP_plo') => ('p', 'AA', 'Delta_2P', 'cocap.NEXP_plo')
('p', 'A', 'Delta_2P', 'co.NEXP_plo') => ('p', 'AA', 'Delta_2P', 'co.NEXP_plo')
('p', 'A', 'Delta_2P', 'NEXP_plo') => ('p', 'AA', 'Delta_2P', 'NEXP_plo')
('p', 'A', 'Delta_2P', 'AH') => ('p', 'AA', 'Delta_2P', 'AH')
('p', 'AA', 'Delta_2P', 'AH') => ('p', 'T', 'Delta_2P', 'AH')
('p', 'AA', 'Delta_2P', 'AH') => ('p', 'EA', 'Delta_2P', 'AH')
('p', 'A', 'Delta_2P', 'AH_plo') => ('p', 'AA', 'Delta_2P', 'AH_plo')
('p', 'A', 'Delta_2P', 'co.AH_plo') => ('p', 'AA', 'Delta_2P', 'co.AH_plo')
('p', 'A', 'Delta_2P', 'cocap.AH_plo') => ('p', 'AA', 'Delta_2P', 'cocap.AH_plo')
('p', 'AA', 'Delta_2P', 'cocap.AH_plo') => ('p', 'T', 'Delta_2P', 'cocap.AH_plo')
('p', 'AA', 'Delta_2P', 'cocap.AH_plo') => ('p', 'EA', 'Delta_2P', 'cocap.AH_plo')
('p', 'AA', 'Delta_2P', 'co.AH_plo') => ('p', 'T', 'Delta_2P', 'co.AH_plo')
('p', 'AA', 'Delta_2P', 'co.AH_plo') => ('p', 'EA', 'Delta_2P', 'co.AH_plo')
('p', 'AA', 'Delta_2P', 'AH_plo') => ('p', 'T', 'Delta_2P', 'AH_plo')
('p', 'AA', 'Delta_2P', 'AH_plo') => ('p', 'EA', 'Delta_2P', 'AH_plo')
('p', 'AA', 'Delta_2P', 'NEXP_plo') => ('p', 'T', 'Delta_2P', 'NEXP_plo')
('p', 'AA', 'Delta_2P', 'NEXP_plo') => ('p', 'EA', 'Delta_2P', 'NEXP_plo')
('p', 'AA', 'Delta_2P', 'co.NEXP_plo') => ('p', 'T', 'Delta_2P', 'co.NEXP_plo')
('p', 'AA', 'Delta_2P', 'co.NEXP_plo') => ('p', 'EA', 'Delta_2P', 'co.NEXP_plo')
('p', 'AA', 'Delta_2P', 'cocap.NEXP_plo') => ('p', 'T', 'Delta_2P', 'cocap.NEXP_plo')
('p', 'AA', 'Delta_2P', 'cocap.NEXP_plo') => ('p', 'EA', 'Delta_2P', 'cocap.NEXP_plo')
('p', 'A', 'RG(3)', 'co.NEXP_plo') => ('p', 'R', 'RG(3)', 'co.NEXP_plo')
('p', 'A', 'RG(3)', 'co.NEXP_plo') => ('p', 'AA', 'RG(3)', 'co.NEXP_plo')
('p', 'A', 'RG(3)', 'NEXP_plo') => ('p', 'R', 'RG(3)', 'NEXP_plo')
('p', 'A', 'RG(3)', 'NEXP_plo') => ('p', 'AA', 'RG(3)', 'NEXP_plo')
('p', 'A', 'S_2P', 'NEXP_plo') => ('p', 'AA', 'S_2P', 'NEXP_plo')
('p', 'A', 'S_2P', 'co.NEXP_plo') => ('p', 'AA', 'S_2P', 'co.NEXP_plo')
('p', 'A', 'S_2P', 'cocap.NEXP_plo') => ('p', 'AA', 'S_2P', 'cocap.NEXP_plo')
('p', 'A', 'S_2P', 'AH') => ('p', 'AA', 'S_2P', 'AH')
('p', 'AA', 'S_2P', 'AH') => ('p', 'T', 'S_2P', 'AH')
('p', 'AA', 'S_2P', 'AH') => ('p', 'EA', 'S_2P', 'AH')
('p', 'A', 'S_2P', 'cocap.AH_plo') => ('p', 'AA', 'S_2P', 'cocap.AH_plo')
('p', 'A', 'S_2P', 'co.AH_plo') => ('p', 'AA', 'S_2P', 'co.AH_plo')
('p', 'A', 'S_2P', 'AH_plo') => ('p', 'AA', 'S_2P', 'AH_plo')
('p', 'AA', 'S_2P', 'AH_plo') => ('p', 'T', 'S_2P', 'AH_plo')
('p', 'AA', 'S_2P', 'AH_plo') => ('p', 'EA', 'S_2P', 'AH_plo')
('p', 'AA', 'S_2P', 'co.AH_plo') => ('p', 'T', 'S_2P', 'co.AH_plo')
('p', 'AA', 'S_2P', 'co.AH_plo') => ('p', 'EA', 'S_2P', 'co.AH_plo')
('p', 'AA', 'S_2P', 'cocap.AH_plo') => ('p', 'T', 'S_2P', 'cocap.AH_plo')
('p', 'AA', 'S_2P', 'cocap.AH_plo') => ('p', 'EA', 'S_2P', 'cocap.AH_plo')
('p', 'AA', 'S_2P', 'cocap.NEXP_plo') => ('p', 'T', 'S_2P', 'cocap.NEXP_plo')
('p', 'AA', 'S_2P', 'cocap.NEXP_plo') => ('p', 'EA', 'S_2P', 'cocap.NEXP_plo')
('p', 'AA', 'S_2P', 'co.NEXP_plo') => ('p', 'T', 'S_2P', 'co.NEXP_plo')
('p', 'AA', 'S_2P', 'co.NEXP_plo') => ('p', 'EA', 'S_2P', 'co.NEXP_plo')
('p', 'AA', 'S_2P', 'NEXP_plo') => ('p', 'T', 'S_2P', 'NEXP_plo')
('p', 'AA', 'S_2P', 'NEXP_plo') => ('p', 'EA', 'S_2P', 'NEXP_plo')
('p', 'A', 'RG(1)', 'NEXP_plo') => ('p', 'R', 'RG(1)', 'NEXP_plo')
('p', 'A', 'RG(1)', 'NEXP_plo') => ('p', 'AA', 'RG(1)', 'NEXP_plo')
('p', 'A', 'RG(1)', 'co.NEXP_plo') => ('p', 'R', 'RG(1)', 'co.NEXP_plo')
('p', 'A', 'RG(1)', 'co.NEXP_plo') => ('p', 'AA', 'RG(1)', 'co.NEXP_plo')
('p', 'A', 'RG(1)', 'cocap.NEXP_plo') => ('p', 'R', 'RG(1)', 'cocap.NEXP_plo')
('p', 'A', 'RG(1)', 'cocap.NEXP_plo') => ('p', 'AA', 'RG(1)', 'cocap.NEXP_plo')
('p', 'A', 'RG(1)', 'AH') => ('p', 'R', 'RG(1)', 'AH')
('p', 'A', 'RG(1)', 'AH') => ('p', 'AA', 'RG(1)', 'AH')
('p', 'AA', 'RG(1)', 'AH') => ('p', 'T', 'RG(1)', 'AH')
('p', 'AA', 'RG(1)', 'AH') => ('p', 'EA', 'RG(1)', 'AH')
('p', 'A', 'RG(1)', 'cocap.AH_plo') => ('p', 'R', 'RG(1)', 'cocap.AH_plo')
('p', 'A', 'RG(1)', 'cocap.AH_plo') => ('p', 'AA', 'RG(1)', 'cocap.AH_plo')
('p', 'A', 'RG(1)', 'co.AH_plo') => ('p', 'R', 'RG(1)', 'co.AH_plo')
('p', 'A', 'RG(1)', 'co.AH_plo') => ('p', 'AA', 'RG(1)', 'co.AH_plo')
('p', 'A', 'RG(1)', 'AH_plo') => ('p', 'R', 'RG(1)', 'AH_plo')
('p', 'A', 'RG(1)', 'AH_plo') => ('p', 'AA', 'RG(1)', 'AH_plo')
('p', 'AA', 'RG(1)', 'AH_plo') => ('p', 'T', 'RG(1)', 'AH_plo')
('p', 'AA', 'RG(1)', 'AH_plo') => ('p', 'EA', 'RG(1)', 'AH_plo')
('p', 'AA', 'RG(1)', 'co.AH_plo') => ('p', 'T', 'RG(1)', 'co.AH_plo')
('p', 'AA', 'RG(1)', 'co.AH_plo') => ('p', 'EA', 'RG(1)', 'co.AH_plo')
('p', 'AA', 'RG(1)', 'cocap.AH_plo') => ('p', 'T', 'RG(1)', 'cocap.AH_plo')
('p', 'AA', 'RG(1)', 'cocap.AH_plo') => ('p', 'EA', 'RG(1)', 'cocap.AH_plo')
('p', 'AA', 'RG(1)', 'cocap.NEXP_plo') => ('p', 'T', 'RG(1)', 'cocap.NEXP_plo')
('p', 'AA', 'RG(1)', 'cocap.NEXP_plo') => ('p', 'EA', 'RG(1)', 'cocap.NEXP_plo')
('p', 'AA', 'RG(1)', 'co.NEXP_plo') => ('p', 'T', 'RG(1)', 'co.NEXP_plo')
('p', 'AA', 'RG(1)', 'co.NEXP_plo') => ('p', 'EA', 'RG(1)', 'co.NEXP_plo')
('p', 'AA', 'RG(1)', 'NEXP_plo') => ('p', 'T', 'RG(1)', 'NEXP_plo')
('p', 'AA', 'RG(1)', 'NEXP_plo') => ('p', 'EA', 'RG(1)', 'NEXP_plo')
('p', 'A', 'RG(3)', 'AH') => ('p', 'R', 'RG(3)', 'AH')
('p', 'A', 'RG(3)', 'AH') => ('p', 'AA', 'RG(3)', 'AH')
('p', 'A', 'RG(2)', 'AH') => ('p', 'R', 'RG(2)', 'AH')
('p', 'A', 'RG(2)', 'AH') => ('p', 'AA', 'RG(2)', 'AH')
('p', 'AA', 'RG(2)', 'AH') => ('p', 'T', 'RG(2)', 'AH')
('p', 'AA', 'RG(2)', 'AH') => ('p', 'EA', 'RG(2)', 'AH')
('p', 'AA', 'RG(3)', 'AH') => ('p', 'T', 'RG(3)', 'AH')
('p', 'AA', 'RG(3)', 'AH') => ('p', 'EA', 'RG(3)', 'AH')
('p', 'A', 'RG(2)', 'NEXP_plo') => ('p', 'R', 'RG(2)', 'NEXP_plo')
('p', 'A', 'RG(2)', 'NEXP_plo') => ('p', 'AA', 'RG(2)', 'NEXP_plo')
('p', 'A', 'RG(2)', 'co.NEXP_plo') => ('p', 'R', 'RG(2)', 'co.NEXP_plo')
('p', 'A', 'RG(2)', 'co.NEXP_plo') => ('p', 'AA', 'RG(2)', 'co.NEXP_plo')
('p', 'A', 'RG(2)', 'cocap.NEXP_plo') => ('p', 'R', 'RG(2)', 'cocap.NEXP_plo')
('p', 'A', 'RG(2)', 'cocap.NEXP_plo') => ('p', 'AA', 'RG(2)', 'cocap.NEXP_plo')
('p', 'A', 'RG(2)', 'cocap.AH_plo') => ('p', 'R', 'RG(2)', 'cocap.AH_plo')
('p', 'A', 'RG(2)', 'cocap.AH_plo') => ('p', 'AA', 'RG(2)', 'cocap.AH_plo')
('p', 'A', 'RG(2)', 'co.AH_plo') => ('p', 'R', 'RG(2)', 'co.AH_plo')
('p', 'A', 'RG(2)', 'co.AH_plo') => ('p', 'AA', 'RG(2)', 'co.AH_plo')
('p', 'A', 'RG(2)', 'AH_plo') => ('p', 'R', 'RG(2)', 'AH_plo')
('p', 'A', 'RG(2)', 'AH_plo') => ('p', 'AA', 'RG(2)', 'AH_plo')
('p', 'AA', 'RG(2)', 'AH_plo') => ('p', 'T', 'RG(2)', 'AH_plo')
('p', 'AA', 'RG(2)', 'AH_plo') => ('p', 'EA', 'RG(2)', 'AH_plo')
('p', 'AA', 'RG(2)', 'co.AH_plo') => ('p', 'T', 'RG(2)', 'co.AH_plo')
('p', 'AA', 'RG(2)', 'co.AH_plo') => ('p', 'EA', 'RG(2)', 'co.AH_plo')
('p', 'AA', 'RG(2)', 'cocap.AH_plo') => ('p', 'T', 'RG(2)', 'cocap.AH_plo')
('p', 'AA', 'RG(2)', 'cocap.AH_plo') => ('p', 'EA', 'RG(2)', 'cocap.AH_plo')
('p', 'AA', 'RG(2)', 'cocap.NEXP_plo') => ('p', 'T', 'RG(2)', 'cocap.NEXP_plo')
('p', 'AA', 'RG(2)', 'cocap.NEXP_plo') => ('p', 'EA', 'RG(2)', 'cocap.NEXP_plo')
('p', 'AA', 'RG(2)', 'co.NEXP_plo') => ('p', 'T', 'RG(2)', 'co.NEXP_plo')
('p', 'AA', 'RG(2)', 'co.NEXP_plo') => ('p', 'EA', 'RG(2)', 'co.NEXP_plo')
('p', 'AA', 'RG(2)', 'NEXP_plo') => ('p', 'T', 'RG(2)', 'NEXP_plo')
('p', 'AA', 'RG(2)', 'NEXP_plo') => ('p', 'EA', 'RG(2)', 'NEXP_plo')
('p', 'A', 'RG(3)', 'AH_plo') => ('p', 'R', 'RG(3)', 'AH_plo')
('p', 'A', 'RG(3)', 'AH_plo') => ('p', 'AA', 'RG(3)', 'AH_plo')
('p', 'A', 'RG(3)', 'co.AH_plo') => ('p', 'R', 'RG(3)', 'co.AH_plo')
('p', 'A', 'RG(3)', 'co.AH_plo') => ('p', 'AA', 'RG(3)', 'co.AH_plo')
('p', 'A', 'RG(3)', 'cocap.AH_plo') => ('p', 'R', 'RG(3)', 'cocap.AH_plo')
('p', 'A', 'RG(3)', 'cocap.AH_plo') => ('p', 'AA', 'RG(3)', 'cocap.AH_plo')
('p', 'AA', 'RG(3)', 'cocap.AH_plo') => ('p', 'T', 'RG(3)', 'cocap.AH_plo')
('p', 'AA', 'RG(3)', 'cocap.AH_plo') => ('p', 'EA', 'RG(3)', 'cocap.AH_plo')
('p', 'AA', 'RG(3)', 'co.AH_plo') => ('p', 'T', 'RG(3)', 'co.AH_plo')
('p', 'AA', 'RG(3)', 'co.AH_plo') => ('p', 'EA', 'RG(3)', 'co.AH_plo')
('p', 'AA', 'RG(3)', 'AH_plo') => ('p', 'T', 'RG(3)', 'AH_plo')
('p', 'AA', 'RG(3)', 'AH_plo') => ('p', 'EA', 'RG(3)', 'AH_plo')
('p', 'AA', 'RG(3)', 'NEXP_plo') => ('p', 'T', 'RG(3)', 'NEXP_plo')
('p', 'AA', 'RG(3)', 'NEXP_plo') => ('p', 'EA', 'RG(3)', 'NEXP_plo')
('p', 'AA', 'RG(3)', 'co.NEXP_plo') => ('p', 'T', 'RG(3)', 'co.NEXP_plo')
('p', 'AA', 'RG(3)', 'co.NEXP_plo') => ('p', 'EA', 'RG(3)', 'co.NEXP_plo')
('p', 'AA', 'RG(3)', 'cocap.NEXP_plo') => ('p', 'T', 'RG(3)', 'cocap.NEXP_plo')
('p', 'AA', 'RG(3)', 'cocap.NEXP_plo') => ('p', 'EA', 'RG(3)', 'cocap.NEXP_plo')
('p', 'A', 'Delta_2P', 'EXP_plo') => ('-d', 'A', 'Delta_2P', 'EXP_plo')
('p', 'A', 'Delta_2P', 'EXP_plo') => ('p', 'AA', 'Delta_2P', 'EXP_plo')
('d', 'A', 'EXP_plo', 'PP') => ('-p', 'A', 'EXP_plo', 'PP')
('p', 'AA', 'Delta_2P', 'EXP_plo') => ('-d', 'AA', 'Delta_2P', 'EXP_plo')
('p', 'AA', 'Delta_2P', 'EXP_plo') => ('p', 'T', 'Delta_2P', 'EXP_plo')
('p', 'AA', 'Delta_2P', 'EXP_plo') => ('p', 'EA', 'Delta_2P', 'EXP_plo')
('p', 'EA', 'Delta_2P', 'EXP_plo') => ('-d', 'EA', 'Delta_2P', 'EXP_plo')
('p', 'T', 'Delta_2P', 'EXP_plo') => ('-d', 'T', 'Delta_2P', 'EXP_plo')
('p', 'A', 'S_2P', 'EXP_plo') => ('-d', 'A', 'S_2P', 'EXP_plo')
('p', 'A', 'S_2P', 'EXP_plo') => ('p', 'AA', 'S_2P', 'EXP_plo')
('p', 'AA', 'S_2P', 'EXP_plo') => ('-d', 'AA', 'S_2P', 'EXP_plo')
('p', 'AA', 'S_2P', 'EXP_plo') => ('p', 'T', 'S_2P', 'EXP_plo')
('p', 'AA', 'S_2P', 'EXP_plo') => ('p', 'EA', 'S_2P', 'EXP_plo')
('p', 'EA', 'S_2P', 'EXP_plo') => ('-d', 'EA', 'S_2P', 'EXP_plo')
('p', 'T', 'S_2P', 'EXP_plo') => ('-d', 'T', 'S_2P', 'EXP_plo')
('p', 'A', 'RG(1)', 'EXP_plo') => ('-d', 'A', 'RG(1)', 'EXP_plo')
('p', 'A', 'RG(1)', 'EXP_plo') => ('p', 'R', 'RG(1)', 'EXP_plo')
('p', 'A', 'RG(1)', 'EXP_plo') => ('p', 'AA', 'RG(1)', 'EXP_plo')
('p', 'AA', 'RG(1)', 'EXP_plo') => ('-d', 'AA', 'RG(1)', 'EXP_plo')
('p', 'AA', 'RG(1)', 'EXP_plo') => ('p', 'T', 'RG(1)', 'EXP_plo')
('p', 'AA', 'RG(1)', 'EXP_plo') => ('p', 'EA', 'RG(1)', 'EXP_plo')
('p', 'EA', 'RG(1)', 'EXP_plo') => ('-d', 'EA', 'RG(1)', 'EXP_plo')
('p', 'T', 'RG(1)', 'EXP_plo') => ('-d', 'T', 'RG(1)', 'EXP_plo')
('p', 'R', 'RG(1)', 'EXP_plo') => ('-d', 'R', 'RG(1)', 'EXP_plo')
('p', 'A', 'RG(2)', 'EXP_plo') => ('-d', 'A', 'RG(2)', 'EXP_plo')
('p', 'A', 'RG(2)', 'EXP_plo') => ('p', 'R', 'RG(2)', 'EXP_plo')
('p', 'A', 'RG(2)', 'EXP_plo') => ('p', 'AA', 'RG(2)', 'EXP_plo')
('p', 'AA', 'RG(2)', 'EXP_plo') => ('-d', 'AA', 'RG(2)', 'EXP_plo')
('p', 'AA', 'RG(2)', 'EXP_plo') => ('p', 'T', 'RG(2)', 'EXP_plo')
('p', 'AA', 'RG(2)', 'EXP_plo') => ('p', 'EA', 'RG(2)', 'EXP_plo')
('p', 'EA', 'RG(2)', 'EXP_plo') => ('-d', 'EA', 'RG(2)', 'EXP_plo')
('p', 'T', 'RG(2)', 'EXP_plo') => ('-d', 'T', 'RG(2)', 'EXP_plo')
('p', 'R', 'RG(2)', 'EXP_plo') => ('-d', 'R', 'RG(2)', 'EXP_plo')
('p', 'AA', 'RG(3)', 'EXP_plo') => ('-d', 'AA', 'RG(3)', 'EXP_plo')
('p', 'AA', 'RG(3)', 'EXP_plo') => ('p', 'T', 'RG(3)', 'EXP_plo')
('p', 'AA', 'RG(3)', 'EXP_plo') => ('p', 'EA', 'RG(3)', 'EXP_plo')
('p', 'EA', 'RG(3)', 'EXP_plo') => ('-d', 'EA', 'RG(3)', 'EXP_plo')
('p', 'T', 'RG(3)', 'EXP_plo') => ('-d', 'T', 'RG(3)', 'EXP_plo')
('p', 'R', 'RG(3)', 'EXP_plo') => ('-d', 'R', 'RG(3)', 'EXP_plo')
('p', 'A', 'SZK', 'AM') => ('-d', 'A', 'SZK', 'AM')
('p', 'A', 'SZK', 'AM') => ('p', 'R', 'SZK', 'AM')
('p', 'A', 'SZK', 'AM') => ('p', 'AA', 'SZK', 'AM')
('p', 'A', 'SZK', 'co.AM') => ('-d', 'A', 'SZK', 'co.AM')
('p', 'A', 'SZK', 'co.AM') => ('p', 'R', 'SZK', 'co.AM')
('p', 'A', 'SZK', 'co.AM') => ('p', 'AA', 'SZK', 'co.AM')
('p', 'A', 'SZK', 'cocap.AM') => ('-d', 'A', 'SZK', 'cocap.AM')
('p', 'A', 'SZK', 'cocap.AM') => ('p', 'R', 'SZK', 'cocap.AM')
('p', 'A', 'SZK', 'cocap.AM') => ('p', 'AA', 'SZK', 'cocap.AM')
('d', 'A', 'cocap.AM', 'RP') => ('-p', 'A', 'cocap.AM', 'RP')
('d', 'A', 'cocap.AM', 'co.RP') => ('-p', 'A', 'cocap.AM', 'co.RP')
('d', 'A', 'co.Sigma_2P', 'SZK') => ('-p', 'A', 'co.Sigma_2P', 'SZK')
('d', 'A', 'Sigma_2P', 'SZK') => ('-p', 'A', 'Sigma_2P', 'SZK')
('d', 'A', 'QMIP_cme', 'SZK') => ('-p', 'A', 'QMIP_cme', 'SZK')
('d', 'A', 'co.QMIP_cme', 'SZK') => ('-p', 'A', 'co.QMIP_cme', 'SZK')
('-d', 'A', 'SZK', 'QMIP_cme') => ('-d', 'R', 'SZK', 'QMIP_cme')
('-d', 'A', 'SZK', 'QMIP_cme') => ('-d', 'AA', 'SZK', 'QMIP_cme')
('-d', 'A', 'SZK', 'co.QMIP_cme') => ('-d', 'R', 'SZK', 'co.QMIP_cme')
('-d', 'A', 'SZK', 'co.QMIP_cme') => ('-d', 'AA', 'SZK', 'co.QMIP_cme')
('-d', 'A', 'SZK', 'cocap.QMIP_cme') => ('-d', 'R', 'SZK', 'cocap.QMIP_cme')
('-d', 'A', 'SZK', 'cocap.QMIP_cme') => ('-d', 'AA', 'SZK', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.NISZK', 'cocap.QMIP_cme') => ('-d', 'R', 'cocap.NISZK', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.NISZK', 'cocap.QMIP_cme') => ('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_cme')
('-d', 'A', 'cocap.NISZK', 'QMIP_cme') => ('-d', 'R', 'cocap.NISZK', 'QMIP_cme')
('-d', 'A', 'cocap.NISZK', 'QMIP_cme') => ('-d', 'AA', 'cocap.NISZK', 'QMIP_cme')
('-d', 'A', 'cocap.NISZK', 'co.QMIP_cme') => ('-d', 'R', 'cocap.NISZK', 'co.QMIP_cme')
('-d', 'A', 'cocap.NISZK', 'co.QMIP_cme') => ('-d', 'AA', 'cocap.NISZK', 'co.QMIP_cme')
('-d', 'A', 'BPP', 'co.QMIP_cme') => ('-d', 'AA', 'BPP', 'co.QMIP_cme')
('-d', 'A', 'BPP', 'QMIP_cme') => ('-d', 'AA', 'BPP', 'QMIP_cme')
('-d', 'A', 'BPP', 'cocap.QMIP_cme') => ('-d', 'AA', 'BPP', 'cocap.QMIP_cme')
('-d', 'AA', 'BPP', 'cocap.QMIP_cme') => ('-d', 'T', 'BPP', 'cocap.QMIP_cme')
('-d', 'AA', 'BPP', 'cocap.QMIP_cme') => ('-d', 'EA', 'BPP', 'cocap.QMIP_cme')
('-d', 'AA', 'BPP', 'QMIP_cme') => ('-d', 'T', 'BPP', 'QMIP_cme')
('-d', 'AA', 'BPP', 'QMIP_cme') => ('-d', 'EA', 'BPP', 'QMIP_cme')
('-d', 'AA', 'BPP', 'co.QMIP_cme') => ('-d', 'T', 'BPP', 'co.QMIP_cme')
('-d', 'AA', 'BPP', 'co.QMIP_cme') => ('-d', 'EA', 'BPP', 'co.QMIP_cme')
('-d', 'AA', 'cocap.NISZK', 'co.QMIP_cme') => ('-d', 'T', 'cocap.NISZK', 'co.QMIP_cme')
('-d', 'AA', 'cocap.NISZK', 'co.QMIP_cme') => ('-d', 'EA', 'cocap.NISZK', 'co.QMIP_cme')
('-d', 'AA', 'cocap.NISZK', 'QMIP_cme') => ('-d', 'T', 'cocap.NISZK', 'QMIP_cme')
('-d', 'AA', 'cocap.NISZK', 'QMIP_cme') => ('-d', 'EA', 'cocap.NISZK', 'QMIP_cme')
('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_cme') => ('-d', 'T', 'cocap.NISZK', 'cocap.QMIP_cme')
('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_cme') => ('-d', 'EA', 'cocap.NISZK', 'cocap.QMIP_cme')
('-d', 'A', 'co.NISZK', 'cocap.QMIP_cme') => ('-d', 'R', 'co.NISZK', 'cocap.QMIP_cme')
('-d', 'A', 'co.NISZK', 'cocap.QMIP_cme') => ('-d', 'AA', 'co.NISZK', 'cocap.QMIP_cme')
('-d', 'A', 'NISZK', 'cocap.QMIP_cme') => ('-d', 'R', 'NISZK', 'cocap.QMIP_cme')
('-d', 'A', 'NISZK', 'cocap.QMIP_cme') => ('-d', 'AA', 'NISZK', 'cocap.QMIP_cme')
('-d', 'A', 'NISZK', 'QMIP_cme') => ('-d', 'R', 'NISZK', 'QMIP_cme')
('-d', 'A', 'NISZK', 'QMIP_cme') => ('-d', 'AA', 'NISZK', 'QMIP_cme')
('-d', 'A', 'co.NISZK', 'co.QMIP_cme') => ('-d', 'R', 'co.NISZK', 'co.QMIP_cme')
('-d', 'A', 'co.NISZK', 'co.QMIP_cme') => ('-d', 'AA', 'co.NISZK', 'co.QMIP_cme')
('-d', 'AA', 'co.NISZK', 'co.QMIP_cme') => ('-d', 'T', 'co.NISZK', 'co.QMIP_cme')
('-d', 'AA', 'co.NISZK', 'co.QMIP_cme') => ('-d', 'EA', 'co.NISZK', 'co.QMIP_cme')
('-d', 'AA', 'NISZK', 'QMIP_cme') => ('-d', 'T', 'NISZK', 'QMIP_cme')
('-d', 'AA', 'NISZK', 'QMIP_cme') => ('-d', 'EA', 'NISZK', 'QMIP_cme')
('-d', 'A', 'NISZK', 'co.QMIP_cme') => ('-d', 'R', 'NISZK', 'co.QMIP_cme')
('-d', 'A', 'NISZK', 'co.QMIP_cme') => ('-d', 'AA', 'NISZK', 'co.QMIP_cme')
('-d', 'A', 'co.NISZK', 'QMIP_cme') => ('-d', 'R', 'co.NISZK', 'QMIP_cme')
('-d', 'A', 'co.NISZK', 'QMIP_cme') => ('-d', 'AA', 'co.NISZK', 'QMIP_cme')
('-d', 'AA', 'co.NISZK', 'QMIP_cme') => ('-d', 'T', 'co.NISZK', 'QMIP_cme')
('-d', 'AA', 'co.NISZK', 'QMIP_cme') => ('-d', 'EA', 'co.NISZK', 'QMIP_cme')
('-d', 'AA', 'NISZK', 'co.QMIP_cme') => ('-d', 'T', 'NISZK', 'co.QMIP_cme')
('-d', 'AA', 'NISZK', 'co.QMIP_cme') => ('-d', 'EA', 'NISZK', 'co.QMIP_cme')
('-d', 'AA', 'NISZK', 'cocap.QMIP_cme') => ('-d', 'T', 'NISZK', 'cocap.QMIP_cme')
('-d', 'AA', 'NISZK', 'cocap.QMIP_cme') => ('-d', 'EA', 'NISZK', 'cocap.QMIP_cme')
('-d', 'AA', 'co.NISZK', 'cocap.QMIP_cme') => ('-d', 'T', 'co.NISZK', 'cocap.QMIP_cme')
('-d', 'AA', 'co.NISZK', 'cocap.QMIP_cme') => ('-d', 'EA', 'co.NISZK', 'cocap.QMIP_cme')
('-d', 'AA', 'SZK', 'cocap.QMIP_cme') => ('-d', 'T', 'SZK', 'cocap.QMIP_cme')
('-d', 'AA', 'SZK', 'cocap.QMIP_cme') => ('-d', 'EA', 'SZK', 'cocap.QMIP_cme')
('-d', 'AA', 'SZK', 'QMIP_cme') => ('-d', 'T', 'SZK', 'QMIP_cme')
('-d', 'AA', 'SZK', 'QMIP_cme') => ('-d', 'EA', 'SZK', 'QMIP_cme')
('-d', 'AA', 'SZK', 'co.QMIP_cme') => ('-d', 'T', 'SZK', 'co.QMIP_cme')
('-d', 'AA', 'SZK', 'co.QMIP_cme') => ('-d', 'EA', 'SZK', 'co.QMIP_cme')
('p', 'A', 'SZK', 'QMIP_cme') => ('p', 'R', 'SZK', 'QMIP_cme')
('p', 'A', 'SZK', 'QMIP_cme') => ('p', 'AA', 'SZK', 'QMIP_cme')
('p', 'A', 'SZK', 'co.QMIP_cme') => ('p', 'R', 'SZK', 'co.QMIP_cme')
('p', 'A', 'SZK', 'co.QMIP_cme') => ('p', 'AA', 'SZK', 'co.QMIP_cme')
('p', 'A', 'SZK', 'cocap.QMIP_cme') => ('p', 'R', 'SZK', 'cocap.QMIP_cme')
('p', 'A', 'SZK', 'cocap.QMIP_cme') => ('p', 'AA', 'SZK', 'cocap.QMIP_cme')
('p', 'A', 'cocap.NISZK', 'cocap.QMIP_cme') => ('p', 'R', 'cocap.NISZK', 'cocap.QMIP_cme')
('p', 'A', 'cocap.NISZK', 'cocap.QMIP_cme') => ('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_cme')
('p', 'A', 'cocap.NISZK', 'QMIP_cme') => ('p', 'R', 'cocap.NISZK', 'QMIP_cme')
('p', 'A', 'cocap.NISZK', 'QMIP_cme') => ('p', 'AA', 'cocap.NISZK', 'QMIP_cme')
('p', 'A', 'cocap.NISZK', 'co.QMIP_cme') => ('p', 'R', 'cocap.NISZK', 'co.QMIP_cme')
('p', 'A', 'cocap.NISZK', 'co.QMIP_cme') => ('p', 'AA', 'cocap.NISZK', 'co.QMIP_cme')
('p', 'A', 'BPP', 'co.QMIP_cme') => ('p', 'R', 'BPP', 'co.QMIP_cme')
('p', 'A', 'BPP', 'co.QMIP_cme') => ('p', 'AA', 'BPP', 'co.QMIP_cme')
('p', 'A', 'BPP', 'QMIP_cme') => ('p', 'R', 'BPP', 'QMIP_cme')
('p', 'A', 'BPP', 'QMIP_cme') => ('p', 'AA', 'BPP', 'QMIP_cme')
('p', 'A', 'BPP', 'cocap.QMIP_cme') => ('p', 'R', 'BPP', 'cocap.QMIP_cme')
('p', 'A', 'BPP', 'cocap.QMIP_cme') => ('p', 'AA', 'BPP', 'cocap.QMIP_cme')
('p', 'AA', 'BPP', 'cocap.QMIP_cme') => ('p', 'T', 'BPP', 'cocap.QMIP_cme')
('p', 'AA', 'BPP', 'cocap.QMIP_cme') => ('p', 'EA', 'BPP', 'cocap.QMIP_cme')
('p', 'AA', 'BPP', 'QMIP_cme') => ('p', 'T', 'BPP', 'QMIP_cme')
('p', 'AA', 'BPP', 'QMIP_cme') => ('p', 'EA', 'BPP', 'QMIP_cme')
('p', 'AA', 'BPP', 'co.QMIP_cme') => ('p', 'T', 'BPP', 'co.QMIP_cme')
('p', 'AA', 'BPP', 'co.QMIP_cme') => ('p', 'EA', 'BPP', 'co.QMIP_cme')
('p', 'AA', 'cocap.NISZK', 'co.QMIP_cme') => ('p', 'T', 'cocap.NISZK', 'co.QMIP_cme')
('p', 'AA', 'cocap.NISZK', 'co.QMIP_cme') => ('p', 'EA', 'cocap.NISZK', 'co.QMIP_cme')
('p', 'AA', 'cocap.NISZK', 'QMIP_cme') => ('p', 'T', 'cocap.NISZK', 'QMIP_cme')
('p', 'AA', 'cocap.NISZK', 'QMIP_cme') => ('p', 'EA', 'cocap.NISZK', 'QMIP_cme')
('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_cme') => ('p', 'T', 'cocap.NISZK', 'cocap.QMIP_cme')
('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_cme') => ('p', 'EA', 'cocap.NISZK', 'cocap.QMIP_cme')
('p', 'A', 'co.NISZK', 'cocap.QMIP_cme') => ('p', 'R', 'co.NISZK', 'cocap.QMIP_cme')
('p', 'A', 'co.NISZK', 'cocap.QMIP_cme') => ('p', 'AA', 'co.NISZK', 'cocap.QMIP_cme')
('p', 'A', 'NISZK', 'cocap.QMIP_cme') => ('p', 'R', 'NISZK', 'cocap.QMIP_cme')
('p', 'A', 'NISZK', 'cocap.QMIP_cme') => ('p', 'AA', 'NISZK', 'cocap.QMIP_cme')
('p', 'A', 'NISZK', 'QMIP_cme') => ('p', 'R', 'NISZK', 'QMIP_cme')
('p', 'A', 'NISZK', 'QMIP_cme') => ('p', 'AA', 'NISZK', 'QMIP_cme')
('p', 'A', 'co.NISZK', 'co.QMIP_cme') => ('p', 'R', 'co.NISZK', 'co.QMIP_cme')
('p', 'A', 'co.NISZK', 'co.QMIP_cme') => ('p', 'AA', 'co.NISZK', 'co.QMIP_cme')
('p', 'AA', 'co.NISZK', 'co.QMIP_cme') => ('p', 'T', 'co.NISZK', 'co.QMIP_cme')
('p', 'AA', 'co.NISZK', 'co.QMIP_cme') => ('p', 'EA', 'co.NISZK', 'co.QMIP_cme')
('p', 'AA', 'NISZK', 'QMIP_cme') => ('p', 'T', 'NISZK', 'QMIP_cme')
('p', 'AA', 'NISZK', 'QMIP_cme') => ('p', 'EA', 'NISZK', 'QMIP_cme')
('p', 'A', 'NISZK', 'co.QMIP_cme') => ('p', 'R', 'NISZK', 'co.QMIP_cme')
('p', 'A', 'NISZK', 'co.QMIP_cme') => ('p', 'AA', 'NISZK', 'co.QMIP_cme')
('p', 'A', 'co.NISZK', 'QMIP_cme') => ('p', 'R', 'co.NISZK', 'QMIP_cme')
('p', 'A', 'co.NISZK', 'QMIP_cme') => ('p', 'AA', 'co.NISZK', 'QMIP_cme')
('p', 'AA', 'co.NISZK', 'QMIP_cme') => ('p', 'T', 'co.NISZK', 'QMIP_cme')
('p', 'AA', 'co.NISZK', 'QMIP_cme') => ('p', 'EA', 'co.NISZK', 'QMIP_cme')
('p', 'AA', 'co.NISZK', 'cocap.QMIP_cme') => ('p', 'T', 'co.NISZK', 'cocap.QMIP_cme')
('p', 'AA', 'co.NISZK', 'cocap.QMIP_cme') => ('p', 'EA', 'co.NISZK', 'cocap.QMIP_cme')
('p', 'AA', 'NISZK', 'cocap.QMIP_cme') => ('p', 'T', 'NISZK', 'cocap.QMIP_cme')
('p', 'AA', 'NISZK', 'cocap.QMIP_cme') => ('p', 'EA', 'NISZK', 'cocap.QMIP_cme')
('p', 'AA', 'NISZK', 'co.QMIP_cme') => ('p', 'T', 'NISZK', 'co.QMIP_cme')
('p', 'AA', 'NISZK', 'co.QMIP_cme') => ('p', 'EA', 'NISZK', 'co.QMIP_cme')
('p', 'AA', 'SZK', 'cocap.QMIP_cme') => ('p', 'T', 'SZK', 'cocap.QMIP_cme')
('p', 'AA', 'SZK', 'cocap.QMIP_cme') => ('p', 'EA', 'SZK', 'cocap.QMIP_cme')
('p', 'AA', 'SZK', 'QMIP_cme') => ('p', 'T', 'SZK', 'QMIP_cme')
('p', 'AA', 'SZK', 'QMIP_cme') => ('p', 'EA', 'SZK', 'QMIP_cme')
('p', 'AA', 'SZK', 'co.QMIP_cme') => ('p', 'T', 'SZK', 'co.QMIP_cme')
('p', 'AA', 'SZK', 'co.QMIP_cme') => ('p', 'EA', 'SZK', 'co.QMIP_cme')
('-d', 'A', 'SZK', 'cocap.MIP*_cme') => ('-d', 'R', 'SZK', 'cocap.MIP*_cme')
('-d', 'A', 'SZK', 'cocap.MIP*_cme') => ('-d', 'AA', 'SZK', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.NISZK', 'cocap.MIP*_cme') => ('-d', 'R', 'cocap.NISZK', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.NISZK', 'cocap.MIP*_cme') => ('-d', 'AA', 'cocap.NISZK', 'cocap.MIP*_cme')
('-d', 'A', 'cocap.NISZK', 'MIP*_cme') => ('-d', 'R', 'cocap.NISZK', 'MIP*_cme')
('-d', 'A', 'cocap.NISZK', 'MIP*_cme') => ('-d', 'AA', 'cocap.NISZK', 'MIP*_cme')
('-d', 'A', 'cocap.NISZK', 'co.MIP*_cme') => ('-d', 'R', 'cocap.NISZK', 'co.MIP*_cme')
('-d', 'A', 'cocap.NISZK', 'co.MIP*_cme') => ('-d', 'AA', 'cocap.NISZK', 'co.MIP*_cme')
('-d', 'A', 'BPP', 'co.MIP*_cme') => ('-d', 'AA', 'BPP', 'co.MIP*_cme')
('-d', 'A', 'BPP', 'MIP*_cme') => ('-d', 'AA', 'BPP', 'MIP*_cme')
('-d', 'A', 'BPP', 'cocap.MIP*_cme') => ('-d', 'AA', 'BPP', 'cocap.MIP*_cme')
('-d', 'AA', 'BPP', 'cocap.MIP*_cme') => ('-d', 'T', 'BPP', 'cocap.MIP*_cme')
('-d', 'AA', 'BPP', 'cocap.MIP*_cme') => ('-d', 'EA', 'BPP', 'cocap.MIP*_cme')
('-d', 'AA', 'BPP', 'MIP*_cme') => ('-d', 'T', 'BPP', 'MIP*_cme')
('-d', 'AA', 'BPP', 'MIP*_cme') => ('-d', 'EA', 'BPP', 'MIP*_cme')
('-d', 'AA', 'BPP', 'co.MIP*_cme') => ('-d', 'T', 'BPP', 'co.MIP*_cme')
('-d', 'AA', 'BPP', 'co.MIP*_cme') => ('-d', 'EA', 'BPP', 'co.MIP*_cme')
('-d', 'AA', 'cocap.NISZK', 'co.MIP*_cme') => ('-d', 'T', 'cocap.NISZK', 'co.MIP*_cme')
('-d', 'AA', 'cocap.NISZK', 'co.MIP*_cme') => ('-d', 'EA', 'cocap.NISZK', 'co.MIP*_cme')
('-d', 'AA', 'cocap.NISZK', 'MIP*_cme') => ('-d', 'T', 'cocap.NISZK', 'MIP*_cme')
('-d', 'AA', 'cocap.NISZK', 'MIP*_cme') => ('-d', 'EA', 'cocap.NISZK', 'MIP*_cme')
('-d', 'AA', 'cocap.NISZK', 'cocap.MIP*_cme') => ('-d', 'T', 'cocap.NISZK', 'cocap.MIP*_cme')
('-d', 'AA', 'cocap.NISZK', 'cocap.MIP*_cme') => ('-d', 'EA', 'cocap.NISZK', 'cocap.MIP*_cme')
('-d', 'A', 'co.NISZK', 'cocap.MIP*_cme') => ('-d', 'R', 'co.NISZK', 'cocap.MIP*_cme')
('-d', 'A', 'co.NISZK', 'cocap.MIP*_cme') => ('-d', 'AA', 'co.NISZK', 'cocap.MIP*_cme')
('-d', 'A', 'NISZK', 'cocap.MIP*_cme') => ('-d', 'R', 'NISZK', 'cocap.MIP*_cme')
('-d', 'A', 'NISZK', 'cocap.MIP*_cme') => ('-d', 'AA', 'NISZK', 'cocap.MIP*_cme')
('-d', 'A', 'NISZK', 'MIP*_cme') => ('-d', 'R', 'NISZK', 'MIP*_cme')
('-d', 'A', 'NISZK', 'MIP*_cme') => ('-d', 'AA', 'NISZK', 'MIP*_cme')
('-d', 'A', 'co.NISZK', 'co.MIP*_cme') => ('-d', 'R', 'co.NISZK', 'co.MIP*_cme')
('-d', 'A', 'co.NISZK', 'co.MIP*_cme') => ('-d', 'AA', 'co.NISZK', 'co.MIP*_cme')
('-d', 'AA', 'co.NISZK', 'co.MIP*_cme') => ('-d', 'T', 'co.NISZK', 'co.MIP*_cme')
('-d', 'AA', 'co.NISZK', 'co.MIP*_cme') => ('-d', 'EA', 'co.NISZK', 'co.MIP*_cme')
('-d', 'AA', 'NISZK', 'MIP*_cme') => ('-d', 'T', 'NISZK', 'MIP*_cme')
('-d', 'AA', 'NISZK', 'MIP*_cme') => ('-d', 'EA', 'NISZK', 'MIP*_cme')
('-d', 'A', 'NISZK', 'co.MIP*_cme') => ('-d', 'R', 'NISZK', 'co.MIP*_cme')
('-d', 'A', 'NISZK', 'co.MIP*_cme') => ('-d', 'AA', 'NISZK', 'co.MIP*_cme')
('-d', 'A', 'co.NISZK', 'MIP*_cme') => ('-d', 'R', 'co.NISZK', 'MIP*_cme')
('-d', 'A', 'co.NISZK', 'MIP*_cme') => ('-d', 'AA', 'co.NISZK', 'MIP*_cme')
('-d', 'AA', 'co.NISZK', 'MIP*_cme') => ('-d', 'T', 'co.NISZK', 'MIP*_cme')
('-d', 'AA', 'co.NISZK', 'MIP*_cme') => ('-d', 'EA', 'co.NISZK', 'MIP*_cme')
('-d', 'AA', 'NISZK', 'co.MIP*_cme') => ('-d', 'T', 'NISZK', 'co.MIP*_cme')
('-d', 'AA', 'NISZK', 'co.MIP*_cme') => ('-d', 'EA', 'NISZK', 'co.MIP*_cme')
('-d', 'AA', 'NISZK', 'cocap.MIP*_cme') => ('-d', 'T', 'NISZK', 'cocap.MIP*_cme')
('-d', 'AA', 'NISZK', 'cocap.MIP*_cme') => ('-d', 'EA', 'NISZK', 'cocap.MIP*_cme')
('-d', 'AA', 'co.NISZK', 'cocap.MIP*_cme') => ('-d', 'T', 'co.NISZK', 'cocap.MIP*_cme')
('-d', 'AA', 'co.NISZK', 'cocap.MIP*_cme') => ('-d', 'EA', 'co.NISZK', 'cocap.MIP*_cme')
('-d', 'A', 'SZK', 'MIP*_cme') => ('-d', 'R', 'SZK', 'MIP*_cme')
('-d', 'A', 'SZK', 'MIP*_cme') => ('-d', 'AA', 'SZK', 'MIP*_cme')
('-d', 'A', 'SZK', 'co.MIP*_cme') => ('-d', 'R', 'SZK', 'co.MIP*_cme')
('-d', 'A', 'SZK', 'co.MIP*_cme') => ('-d', 'AA', 'SZK', 'co.MIP*_cme')
('-d', 'AA', 'SZK', 'co.MIP*_cme') => ('-d', 'T', 'SZK', 'co.MIP*_cme')
('-d', 'AA', 'SZK', 'co.MIP*_cme') => ('-d', 'EA', 'SZK', 'co.MIP*_cme')
('-d', 'AA', 'SZK', 'MIP*_cme') => ('-d', 'T', 'SZK', 'MIP*_cme')
('-d', 'AA', 'SZK', 'MIP*_cme') => ('-d', 'EA', 'SZK', 'MIP*_cme')
('-d', 'AA', 'SZK', 'cocap.MIP*_cme') => ('-d', 'T', 'SZK', 'cocap.MIP*_cme')
('-d', 'AA', 'SZK', 'cocap.MIP*_cme') => ('-d', 'EA', 'SZK', 'cocap.MIP*_cme')
('p', 'A', 'SZK', 'cocap.MIP*_cme') => ('p', 'R', 'SZK', 'cocap.MIP*_cme')
('p', 'A', 'SZK', 'cocap.MIP*_cme') => ('p', 'AA', 'SZK', 'cocap.MIP*_cme')
('p', 'A', 'cocap.NISZK', 'cocap.MIP*_cme') => ('p', 'R', 'cocap.NISZK', 'cocap.MIP*_cme')
('p', 'A', 'cocap.NISZK', 'cocap.MIP*_cme') => ('p', 'AA', 'cocap.NISZK', 'cocap.MIP*_cme')
('p', 'A', 'cocap.NISZK', 'MIP*_cme') => ('p', 'R', 'cocap.NISZK', 'MIP*_cme')
('p', 'A', 'cocap.NISZK', 'MIP*_cme') => ('p', 'AA', 'cocap.NISZK', 'MIP*_cme')
('p', 'A', 'cocap.NISZK', 'co.MIP*_cme') => ('p', 'R', 'cocap.NISZK', 'co.MIP*_cme')
('p', 'A', 'cocap.NISZK', 'co.MIP*_cme') => ('p', 'AA', 'cocap.NISZK', 'co.MIP*_cme')
('p', 'A', 'BPP', 'co.MIP*_cme') => ('p', 'R', 'BPP', 'co.MIP*_cme')
('p', 'A', 'BPP', 'co.MIP*_cme') => ('p', 'AA', 'BPP', 'co.MIP*_cme')
('p', 'A', 'BPP', 'MIP*_cme') => ('p', 'R', 'BPP', 'MIP*_cme')
('p', 'A', 'BPP', 'MIP*_cme') => ('p', 'AA', 'BPP', 'MIP*_cme')
('p', 'A', 'BPP', 'cocap.MIP*_cme') => ('p', 'R', 'BPP', 'cocap.MIP*_cme')
('p', 'A', 'BPP', 'cocap.MIP*_cme') => ('p', 'AA', 'BPP', 'cocap.MIP*_cme')
('p', 'AA', 'BPP', 'cocap.MIP*_cme') => ('p', 'T', 'BPP', 'cocap.MIP*_cme')
('p', 'AA', 'BPP', 'cocap.MIP*_cme') => ('p', 'EA', 'BPP', 'cocap.MIP*_cme')
('p', 'AA', 'BPP', 'MIP*_cme') => ('p', 'T', 'BPP', 'MIP*_cme')
('p', 'AA', 'BPP', 'MIP*_cme') => ('p', 'EA', 'BPP', 'MIP*_cme')
('p', 'AA', 'BPP', 'co.MIP*_cme') => ('p', 'T', 'BPP', 'co.MIP*_cme')
('p', 'AA', 'BPP', 'co.MIP*_cme') => ('p', 'EA', 'BPP', 'co.MIP*_cme')
('p', 'AA', 'cocap.NISZK', 'co.MIP*_cme') => ('p', 'T', 'cocap.NISZK', 'co.MIP*_cme')
('p', 'AA', 'cocap.NISZK', 'co.MIP*_cme') => ('p', 'EA', 'cocap.NISZK', 'co.MIP*_cme')
('p', 'AA', 'cocap.NISZK', 'MIP*_cme') => ('p', 'T', 'cocap.NISZK', 'MIP*_cme')
('p', 'AA', 'cocap.NISZK', 'MIP*_cme') => ('p', 'EA', 'cocap.NISZK', 'MIP*_cme')
('p', 'AA', 'cocap.NISZK', 'cocap.MIP*_cme') => ('p', 'T', 'cocap.NISZK', 'cocap.MIP*_cme')
('p', 'AA', 'cocap.NISZK', 'cocap.MIP*_cme') => ('p', 'EA', 'cocap.NISZK', 'cocap.MIP*_cme')
('p', 'A', 'co.NISZK', 'cocap.MIP*_cme') => ('p', 'R', 'co.NISZK', 'cocap.MIP*_cme')
('p', 'A', 'co.NISZK', 'cocap.MIP*_cme') => ('p', 'AA', 'co.NISZK', 'cocap.MIP*_cme')
('p', 'A', 'NISZK', 'cocap.MIP*_cme') => ('p', 'R', 'NISZK', 'cocap.MIP*_cme')
('p', 'A', 'NISZK', 'cocap.MIP*_cme') => ('p', 'AA', 'NISZK', 'cocap.MIP*_cme')
('p', 'A', 'NISZK', 'MIP*_cme') => ('p', 'R', 'NISZK', 'MIP*_cme')
('p', 'A', 'NISZK', 'MIP*_cme') => ('p', 'AA', 'NISZK', 'MIP*_cme')
('p', 'A', 'co.NISZK', 'co.MIP*_cme') => ('p', 'R', 'co.NISZK', 'co.MIP*_cme')
('p', 'A', 'co.NISZK', 'co.MIP*_cme') => ('p', 'AA', 'co.NISZK', 'co.MIP*_cme')
('p', 'AA', 'co.NISZK', 'co.MIP*_cme') => ('p', 'T', 'co.NISZK', 'co.MIP*_cme')
('p', 'AA', 'co.NISZK', 'co.MIP*_cme') => ('p', 'EA', 'co.NISZK', 'co.MIP*_cme')
('p', 'AA', 'NISZK', 'MIP*_cme') => ('p', 'T', 'NISZK', 'MIP*_cme')
('p', 'AA', 'NISZK', 'MIP*_cme') => ('p', 'EA', 'NISZK', 'MIP*_cme')
('p', 'A', 'NISZK', 'co.MIP*_cme') => ('p', 'R', 'NISZK', 'co.MIP*_cme')
('p', 'A', 'NISZK', 'co.MIP*_cme') => ('p', 'AA', 'NISZK', 'co.MIP*_cme')
('p', 'A', 'co.NISZK', 'MIP*_cme') => ('p', 'R', 'co.NISZK', 'MIP*_cme')
('p', 'A', 'co.NISZK', 'MIP*_cme') => ('p', 'AA', 'co.NISZK', 'MIP*_cme')
('p', 'AA', 'co.NISZK', 'MIP*_cme') => ('p', 'T', 'co.NISZK', 'MIP*_cme')
('p', 'AA', 'co.NISZK', 'MIP*_cme') => ('p', 'EA', 'co.NISZK', 'MIP*_cme')
('p', 'AA', 'co.NISZK', 'cocap.MIP*_cme') => ('p', 'T', 'co.NISZK', 'cocap.MIP*_cme')
('p', 'AA', 'co.NISZK', 'cocap.MIP*_cme') => ('p', 'EA', 'co.NISZK', 'cocap.MIP*_cme')
('p', 'AA', 'NISZK', 'cocap.MIP*_cme') => ('p', 'T', 'NISZK', 'cocap.MIP*_cme')
('p', 'AA', 'NISZK', 'cocap.MIP*_cme') => ('p', 'EA', 'NISZK', 'cocap.MIP*_cme')
('p', 'AA', 'NISZK', 'co.MIP*_cme') => ('p', 'T', 'NISZK', 'co.MIP*_cme')
('p', 'AA', 'NISZK', 'co.MIP*_cme') => ('p', 'EA', 'NISZK', 'co.MIP*_cme')
('p', 'A', 'SZK', 'MIP*_cme') => ('p', 'R', 'SZK', 'MIP*_cme')
('p', 'A', 'SZK', 'MIP*_cme') => ('p', 'AA', 'SZK', 'MIP*_cme')
('p', 'A', 'SZK', 'co.MIP*_cme') => ('p', 'R', 'SZK', 'co.MIP*_cme')
('p', 'A', 'SZK', 'co.MIP*_cme') => ('p', 'AA', 'SZK', 'co.MIP*_cme')
('p', 'AA', 'SZK', 'co.MIP*_cme') => ('p', 'T', 'SZK', 'co.MIP*_cme')
('p', 'AA', 'SZK', 'co.MIP*_cme') => ('p', 'EA', 'SZK', 'co.MIP*_cme')
('p', 'AA', 'SZK', 'MIP*_cme') => ('p', 'T', 'SZK', 'MIP*_cme')
('p', 'AA', 'SZK', 'MIP*_cme') => ('p', 'EA', 'SZK', 'MIP*_cme')
('p', 'AA', 'SZK', 'cocap.MIP*_cme') => ('p', 'T', 'SZK', 'cocap.MIP*_cme')
('p', 'AA', 'SZK', 'cocap.MIP*_cme') => ('p', 'EA', 'SZK', 'cocap.MIP*_cme')
('d', 'A', 'NP', 'SZK') => ('-p', 'A', 'NP', 'SZK')
('d', 'A', 'co.NP', 'SZK') => ('-p', 'A', 'co.NP', 'SZK')
('d', 'A', 'cocap.AM', 'NP') => ('-p', 'A', 'cocap.AM', 'NP')
('d', 'A', 'cocap.AM', 'co.NP') => ('-p', 'A', 'cocap.AM', 'co.NP')
('d', 'A', 'cocap.AM', 'Delta_2P') => ('-p', 'A', 'cocap.AM', 'Delta_2P')
('d', 'A', 'AM', 'Delta_2P') => ('-p', 'A', 'AM', 'Delta_2P')
('d', 'A', 'co.AM', 'Delta_2P') => ('-p', 'A', 'co.AM', 'Delta_2P')
('-d', 'A', 'SZK', 'QIP') => ('-d', 'R', 'SZK', 'QIP')
('-d', 'A', 'SZK', 'QIP') => ('-d', 'AA', 'SZK', 'QIP')
('-d', 'A', 'SZK', 'co.QIP') => ('-d', 'R', 'SZK', 'co.QIP')
('-d', 'A', 'SZK', 'co.QIP') => ('-d', 'AA', 'SZK', 'co.QIP')
('-d', 'A', 'SZK', 'cocap.QIP') => ('-d', 'R', 'SZK', 'cocap.QIP')
('-d', 'A', 'SZK', 'cocap.QIP') => ('-d', 'AA', 'SZK', 'cocap.QIP')
('-d', 'A', 'SZK', 'co.QMIP_le') => ('-d', 'R', 'SZK', 'co.QMIP_le')
('-d', 'A', 'SZK', 'co.QMIP_le') => ('-d', 'AA', 'SZK', 'co.QMIP_le')
('-d', 'A', 'SZK', 'QMIP_le') => ('-d', 'R', 'SZK', 'QMIP_le')
('-d', 'A', 'SZK', 'QMIP_le') => ('-d', 'AA', 'SZK', 'QMIP_le')
('-d', 'A', 'SZK', 'cocap.QMIP_le') => ('-d', 'R', 'SZK', 'cocap.QMIP_le')
('-d', 'A', 'SZK', 'cocap.QMIP_le') => ('-d', 'AA', 'SZK', 'cocap.QMIP_le')
('-d', 'A', 'cocap.NISZK', 'cocap.QMIP_le') => ('-d', 'R', 'cocap.NISZK', 'cocap.QMIP_le')
('-d', 'A', 'cocap.NISZK', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_le')
('-d', 'A', 'cocap.NISZK', 'co.QMIP_le') => ('-d', 'R', 'cocap.NISZK', 'co.QMIP_le')
('-d', 'A', 'cocap.NISZK', 'co.QMIP_le') => ('-d', 'AA', 'cocap.NISZK', 'co.QMIP_le')
('-d', 'A', 'cocap.NISZK', 'QMIP_le') => ('-d', 'R', 'cocap.NISZK', 'QMIP_le')
('-d', 'A', 'cocap.NISZK', 'QMIP_le') => ('-d', 'AA', 'cocap.NISZK', 'QMIP_le')
('-d', 'AA', 'cocap.NISZK', 'QMIP_le') => ('-d', 'T', 'cocap.NISZK', 'QMIP_le')
('-d', 'AA', 'cocap.NISZK', 'QMIP_le') => ('-d', 'EA', 'cocap.NISZK', 'QMIP_le')
('-d', 'AA', 'cocap.NISZK', 'co.QMIP_le') => ('-d', 'T', 'cocap.NISZK', 'co.QMIP_le')
('-d', 'AA', 'cocap.NISZK', 'co.QMIP_le') => ('-d', 'EA', 'cocap.NISZK', 'co.QMIP_le')
('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.NISZK', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.NISZK', 'cocap.QMIP_le')
('-d', 'A', 'co.NISZK', 'cocap.QMIP_le') => ('-d', 'R', 'co.NISZK', 'cocap.QMIP_le')
('-d', 'A', 'co.NISZK', 'cocap.QMIP_le') => ('-d', 'AA', 'co.NISZK', 'cocap.QMIP_le')
('-d', 'A', 'NISZK', 'cocap.QMIP_le') => ('-d', 'R', 'NISZK', 'cocap.QMIP_le')
('-d', 'A', 'NISZK', 'cocap.QMIP_le') => ('-d', 'AA', 'NISZK', 'cocap.QMIP_le')
('-d', 'A', 'NISZK', 'co.QMIP_le') => ('-d', 'R', 'NISZK', 'co.QMIP_le')
('-d', 'A', 'NISZK', 'co.QMIP_le') => ('-d', 'AA', 'NISZK', 'co.QMIP_le')
('-d', 'A', 'co.NISZK', 'QMIP_le') => ('-d', 'R', 'co.NISZK', 'QMIP_le')
('-d', 'A', 'co.NISZK', 'QMIP_le') => ('-d', 'AA', 'co.NISZK', 'QMIP_le')
('-d', 'AA', 'co.NISZK', 'QMIP_le') => ('-d', 'T', 'co.NISZK', 'QMIP_le')
('-d', 'AA', 'co.NISZK', 'QMIP_le') => ('-d', 'EA', 'co.NISZK', 'QMIP_le')
('-d', 'AA', 'NISZK', 'co.QMIP_le') => ('-d', 'T', 'NISZK', 'co.QMIP_le')
('-d', 'AA', 'NISZK', 'co.QMIP_le') => ('-d', 'EA', 'NISZK', 'co.QMIP_le')
('-d', 'A', 'NISZK', 'QMIP_le') => ('-d', 'R', 'NISZK', 'QMIP_le')
('-d', 'A', 'NISZK', 'QMIP_le') => ('-d', 'AA', 'NISZK', 'QMIP_le')
('-d', 'A', 'co.NISZK', 'co.QMIP_le') => ('-d', 'R', 'co.NISZK', 'co.QMIP_le')
('-d', 'A', 'co.NISZK', 'co.QMIP_le') => ('-d', 'AA', 'co.NISZK', 'co.QMIP_le')
('-d', 'AA', 'co.NISZK', 'co.QMIP_le') => ('-d', 'T', 'co.NISZK', 'co.QMIP_le')
('-d', 'AA', 'co.NISZK', 'co.QMIP_le') => ('-d', 'EA', 'co.NISZK', 'co.QMIP_le')
('-d', 'AA', 'NISZK', 'QMIP_le') => ('-d', 'T', 'NISZK', 'QMIP_le')
('-d', 'AA', 'NISZK', 'QMIP_le') => ('-d', 'EA', 'NISZK', 'QMIP_le')
('-d', 'AA', 'NISZK', 'cocap.QMIP_le') => ('-d', 'T', 'NISZK', 'cocap.QMIP_le')
('-d', 'AA', 'NISZK', 'cocap.QMIP_le') => ('-d', 'EA', 'NISZK', 'cocap.QMIP_le')
('-d', 'AA', 'co.NISZK', 'cocap.QMIP_le') => ('-d', 'T', 'co.NISZK', 'cocap.QMIP_le')
('-d', 'AA', 'co.NISZK', 'cocap.QMIP_le') => ('-d', 'EA', 'co.NISZK', 'cocap.QMIP_le')
('-d', 'AA', 'SZK', 'cocap.QMIP_le') => ('-d', 'T', 'SZK', 'cocap.QMIP_le')
('-d', 'AA', 'SZK', 'cocap.QMIP_le') => ('-d', 'EA', 'SZK', 'cocap.QMIP_le')
('-d', 'AA', 'SZK', 'co.QMIP_le') => ('-d', 'T', 'SZK', 'co.QMIP_le')
('-d', 'AA', 'SZK', 'co.QMIP_le') => ('-d', 'EA', 'SZK', 'co.QMIP_le')
('-d', 'AA', 'SZK', 'QMIP_le') => ('-d', 'T', 'SZK', 'QMIP_le')
('-d', 'AA', 'SZK', 'QMIP_le') => ('-d', 'EA', 'SZK', 'QMIP_le')
('-d', 'A', 'SZK', 'cocap.QMIP_ne') => ('-d', 'R', 'SZK', 'cocap.QMIP_ne')
('-d', 'A', 'SZK', 'cocap.QMIP_ne') => ('-d', 'AA', 'SZK', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NISZK', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.NISZK', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NISZK', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NISZK', 'QMIP_ne') => ('-d', 'R', 'cocap.NISZK', 'QMIP_ne')
('-d', 'A', 'cocap.NISZK', 'QMIP_ne') => ('-d', 'AA', 'cocap.NISZK', 'QMIP_ne')
('-d', 'A', 'cocap.NISZK', 'co.QMIP_ne') => ('-d', 'R', 'cocap.NISZK', 'co.QMIP_ne')
('-d', 'A', 'cocap.NISZK', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.NISZK', 'co.QMIP_ne')
('-d', 'AA', 'cocap.NISZK', 'co.QMIP_ne') => ('-d', 'T', 'cocap.NISZK', 'co.QMIP_ne')
('-d', 'AA', 'cocap.NISZK', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.NISZK', 'co.QMIP_ne')
('-d', 'AA', 'cocap.NISZK', 'QMIP_ne') => ('-d', 'T', 'cocap.NISZK', 'QMIP_ne')
('-d', 'AA', 'cocap.NISZK', 'QMIP_ne') => ('-d', 'EA', 'cocap.NISZK', 'QMIP_ne')
('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.NISZK', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.NISZK', 'cocap.QMIP_ne')
('-d', 'A', 'co.NISZK', 'cocap.QMIP_ne') => ('-d', 'R', 'co.NISZK', 'cocap.QMIP_ne')
('-d', 'A', 'co.NISZK', 'cocap.QMIP_ne') => ('-d', 'AA', 'co.NISZK', 'cocap.QMIP_ne')
('-d', 'A', 'NISZK', 'cocap.QMIP_ne') => ('-d', 'R', 'NISZK', 'cocap.QMIP_ne')
('-d', 'A', 'NISZK', 'cocap.QMIP_ne') => ('-d', 'AA', 'NISZK', 'cocap.QMIP_ne')
('-d', 'A', 'NISZK', 'QMIP_ne') => ('-d', 'R', 'NISZK', 'QMIP_ne')
('-d', 'A', 'NISZK', 'QMIP_ne') => ('-d', 'AA', 'NISZK', 'QMIP_ne')
('-d', 'A', 'co.NISZK', 'co.QMIP_ne') => ('-d', 'R', 'co.NISZK', 'co.QMIP_ne')
('-d', 'A', 'co.NISZK', 'co.QMIP_ne') => ('-d', 'AA', 'co.NISZK', 'co.QMIP_ne')
('-d', 'AA', 'co.NISZK', 'co.QMIP_ne') => ('-d', 'T', 'co.NISZK', 'co.QMIP_ne')
('-d', 'AA', 'co.NISZK', 'co.QMIP_ne') => ('-d', 'EA', 'co.NISZK', 'co.QMIP_ne')
('-d', 'AA', 'NISZK', 'QMIP_ne') => ('-d', 'T', 'NISZK', 'QMIP_ne')
('-d', 'AA', 'NISZK', 'QMIP_ne') => ('-d', 'EA', 'NISZK', 'QMIP_ne')
('-d', 'A', 'NISZK', 'co.QMIP_ne') => ('-d', 'R', 'NISZK', 'co.QMIP_ne')
('-d', 'A', 'NISZK', 'co.QMIP_ne') => ('-d', 'AA', 'NISZK', 'co.QMIP_ne')
('-d', 'A', 'co.NISZK', 'QMIP_ne') => ('-d', 'R', 'co.NISZK', 'QMIP_ne')
('-d', 'A', 'co.NISZK', 'QMIP_ne') => ('-d', 'AA', 'co.NISZK', 'QMIP_ne')
('-d', 'AA', 'co.NISZK', 'QMIP_ne') => ('-d', 'T', 'co.NISZK', 'QMIP_ne')
('-d', 'AA', 'co.NISZK', 'QMIP_ne') => ('-d', 'EA', 'co.NISZK', 'QMIP_ne')
('-d', 'AA', 'NISZK', 'co.QMIP_ne') => ('-d', 'T', 'NISZK', 'co.QMIP_ne')
('-d', 'AA', 'NISZK', 'co.QMIP_ne') => ('-d', 'EA', 'NISZK', 'co.QMIP_ne')
('-d', 'AA', 'NISZK', 'cocap.QMIP_ne') => ('-d', 'T', 'NISZK', 'cocap.QMIP_ne')
('-d', 'AA', 'NISZK', 'cocap.QMIP_ne') => ('-d', 'EA', 'NISZK', 'cocap.QMIP_ne')
('-d', 'AA', 'co.NISZK', 'cocap.QMIP_ne') => ('-d', 'T', 'co.NISZK', 'cocap.QMIP_ne')
('-d', 'AA', 'co.NISZK', 'cocap.QMIP_ne') => ('-d', 'EA', 'co.NISZK', 'cocap.QMIP_ne')
('-d', 'A', 'SZK', 'QMIP_ne') => ('-d', 'R', 'SZK', 'QMIP_ne')
('-d', 'A', 'SZK', 'QMIP_ne') => ('-d', 'AA', 'SZK', 'QMIP_ne')
('-d', 'A', 'SZK', 'co.QMIP_ne') => ('-d', 'R', 'SZK', 'co.QMIP_ne')
('-d', 'A', 'SZK', 'co.QMIP_ne') => ('-d', 'AA', 'SZK', 'co.QMIP_ne')
('-d', 'AA', 'SZK', 'co.QMIP_ne') => ('-d', 'T', 'SZK', 'co.QMIP_ne')
('-d', 'AA', 'SZK', 'co.QMIP_ne') => ('-d', 'EA', 'SZK', 'co.QMIP_ne')
('-d', 'AA', 'SZK', 'QMIP_ne') => ('-d', 'T', 'SZK', 'QMIP_ne')
('-d', 'AA', 'SZK', 'QMIP_ne') => ('-d', 'EA', 'SZK', 'QMIP_ne')
('-d', 'AA', 'SZK', 'cocap.QMIP_ne') => ('-d', 'T', 'SZK', 'cocap.QMIP_ne')
('-d', 'AA', 'SZK', 'cocap.QMIP_ne') => ('-d', 'EA', 'SZK', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NISZK', 'cocap.QIP') => ('-d', 'R', 'cocap.NISZK', 'cocap.QIP')
('-d', 'A', 'cocap.NISZK', 'cocap.QIP') => ('-d', 'AA', 'cocap.NISZK', 'cocap.QIP')
('-d', 'A', 'cocap.NISZK', 'QIP') => ('-d', 'R', 'cocap.NISZK', 'QIP')
('-d', 'A', 'cocap.NISZK', 'QIP') => ('-d', 'AA', 'cocap.NISZK', 'QIP')
('-d', 'A', 'cocap.NISZK', 'co.QIP') => ('-d', 'R', 'cocap.NISZK', 'co.QIP')
('-d', 'A', 'cocap.NISZK', 'co.QIP') => ('-d', 'AA', 'cocap.NISZK', 'co.QIP')
('-d', 'AA', 'cocap.NISZK', 'co.QIP') => ('-d', 'T', 'cocap.NISZK', 'co.QIP')
('-d', 'AA', 'cocap.NISZK', 'co.QIP') => ('-d', 'EA', 'cocap.NISZK', 'co.QIP')
('-d', 'AA', 'cocap.NISZK', 'QIP') => ('-d', 'T', 'cocap.NISZK', 'QIP')
('-d', 'AA', 'cocap.NISZK', 'QIP') => ('-d', 'EA', 'cocap.NISZK', 'QIP')
('-d', 'AA', 'cocap.NISZK', 'cocap.QIP') => ('-d', 'T', 'cocap.NISZK', 'cocap.QIP')
('-d', 'AA', 'cocap.NISZK', 'cocap.QIP') => ('-d', 'EA', 'cocap.NISZK', 'cocap.QIP')
('-d', 'A', 'co.NISZK', 'cocap.QIP') => ('-d', 'R', 'co.NISZK', 'cocap.QIP')
('-d', 'A', 'co.NISZK', 'cocap.QIP') => ('-d', 'AA', 'co.NISZK', 'cocap.QIP')
('-d', 'A', 'NISZK', 'cocap.QIP') => ('-d', 'R', 'NISZK', 'cocap.QIP')
('-d', 'A', 'NISZK', 'cocap.QIP') => ('-d', 'AA', 'NISZK', 'cocap.QIP')
('-d', 'A', 'NISZK', 'QIP') => ('-d', 'R', 'NISZK', 'QIP')
('-d', 'A', 'NISZK', 'QIP') => ('-d', 'AA', 'NISZK', 'QIP')
('-d', 'A', 'co.NISZK', 'co.QIP') => ('-d', 'R', 'co.NISZK', 'co.QIP')
('-d', 'A', 'co.NISZK', 'co.QIP') => ('-d', 'AA', 'co.NISZK', 'co.QIP')
('-d', 'AA', 'co.NISZK', 'co.QIP') => ('-d', 'T', 'co.NISZK', 'co.QIP')
('-d', 'AA', 'co.NISZK', 'co.QIP') => ('-d', 'EA', 'co.NISZK', 'co.QIP')
('-d', 'AA', 'NISZK', 'QIP') => ('-d', 'T', 'NISZK', 'QIP')
('-d', 'AA', 'NISZK', 'QIP') => ('-d', 'EA', 'NISZK', 'QIP')
('-d', 'A', 'NISZK', 'co.QIP') => ('-d', 'R', 'NISZK', 'co.QIP')
('-d', 'A', 'NISZK', 'co.QIP') => ('-d', 'AA', 'NISZK', 'co.QIP')
('-d', 'A', 'co.NISZK', 'QIP') => ('-d', 'R', 'co.NISZK', 'QIP')
('-d', 'A', 'co.NISZK', 'QIP') => ('-d', 'AA', 'co.NISZK', 'QIP')
('-d', 'AA', 'co.NISZK', 'QIP') => ('-d', 'T', 'co.NISZK', 'QIP')
('-d', 'AA', 'co.NISZK', 'QIP') => ('-d', 'EA', 'co.NISZK', 'QIP')
('-d', 'AA', 'NISZK', 'co.QIP') => ('-d', 'T', 'NISZK', 'co.QIP')
('-d', 'AA', 'NISZK', 'co.QIP') => ('-d', 'EA', 'NISZK', 'co.QIP')
('-d', 'AA', 'NISZK', 'cocap.QIP') => ('-d', 'T', 'NISZK', 'cocap.QIP')
('-d', 'AA', 'NISZK', 'cocap.QIP') => ('-d', 'EA', 'NISZK', 'cocap.QIP')
('-d', 'AA', 'co.NISZK', 'cocap.QIP') => ('-d', 'T', 'co.NISZK', 'cocap.QIP')
('-d', 'AA', 'co.NISZK', 'cocap.QIP') => ('-d', 'EA', 'co.NISZK', 'cocap.QIP')
('-d', 'AA', 'SZK', 'cocap.QIP') => ('-d', 'T', 'SZK', 'cocap.QIP')
('-d', 'AA', 'SZK', 'cocap.QIP') => ('-d', 'EA', 'SZK', 'cocap.QIP')
('-d', 'AA', 'SZK', 'QIP') => ('-d', 'T', 'SZK', 'QIP')
('-d', 'AA', 'SZK', 'QIP') => ('-d', 'EA', 'SZK', 'QIP')
('-d', 'AA', 'SZK', 'co.QIP') => ('-d', 'T', 'SZK', 'co.QIP')
('-d', 'AA', 'SZK', 'co.QIP') => ('-d', 'EA', 'SZK', 'co.QIP')
('p', 'A', 'SZK', 'QIP') => ('p', 'R', 'SZK', 'QIP')
('p', 'A', 'SZK', 'QIP') => ('p', 'AA', 'SZK', 'QIP')
('p', 'A', 'SZK', 'co.QIP') => ('p', 'R', 'SZK', 'co.QIP')
('p', 'A', 'SZK', 'co.QIP') => ('p', 'AA', 'SZK', 'co.QIP')
('p', 'A', 'SZK', 'cocap.QIP') => ('p', 'R', 'SZK', 'cocap.QIP')
('p', 'A', 'SZK', 'cocap.QIP') => ('p', 'AA', 'SZK', 'cocap.QIP')
('p', 'A', 'SZK', 'co.QMIP_le') => ('p', 'R', 'SZK', 'co.QMIP_le')
('p', 'A', 'SZK', 'co.QMIP_le') => ('p', 'AA', 'SZK', 'co.QMIP_le')
('p', 'A', 'SZK', 'QMIP_le') => ('p', 'R', 'SZK', 'QMIP_le')
('p', 'A', 'SZK', 'QMIP_le') => ('p', 'AA', 'SZK', 'QMIP_le')
('p', 'A', 'SZK', 'cocap.QMIP_le') => ('p', 'R', 'SZK', 'cocap.QMIP_le')
('p', 'A', 'SZK', 'cocap.QMIP_le') => ('p', 'AA', 'SZK', 'cocap.QMIP_le')
('p', 'A', 'cocap.NISZK', 'cocap.QMIP_le') => ('p', 'R', 'cocap.NISZK', 'cocap.QMIP_le')
('p', 'A', 'cocap.NISZK', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_le')
('p', 'A', 'cocap.NISZK', 'co.QMIP_le') => ('p', 'R', 'cocap.NISZK', 'co.QMIP_le')
('p', 'A', 'cocap.NISZK', 'co.QMIP_le') => ('p', 'AA', 'cocap.NISZK', 'co.QMIP_le')
('p', 'A', 'cocap.NISZK', 'QMIP_le') => ('p', 'R', 'cocap.NISZK', 'QMIP_le')
('p', 'A', 'cocap.NISZK', 'QMIP_le') => ('p', 'AA', 'cocap.NISZK', 'QMIP_le')
('p', 'AA', 'cocap.NISZK', 'QMIP_le') => ('p', 'T', 'cocap.NISZK', 'QMIP_le')
('p', 'AA', 'cocap.NISZK', 'QMIP_le') => ('p', 'EA', 'cocap.NISZK', 'QMIP_le')
('p', 'AA', 'cocap.NISZK', 'co.QMIP_le') => ('p', 'T', 'cocap.NISZK', 'co.QMIP_le')
('p', 'AA', 'cocap.NISZK', 'co.QMIP_le') => ('p', 'EA', 'cocap.NISZK', 'co.QMIP_le')
('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_le') => ('p', 'T', 'cocap.NISZK', 'cocap.QMIP_le')
('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.NISZK', 'cocap.QMIP_le')
('p', 'A', 'co.NISZK', 'cocap.QMIP_le') => ('p', 'R', 'co.NISZK', 'cocap.QMIP_le')
('p', 'A', 'co.NISZK', 'cocap.QMIP_le') => ('p', 'AA', 'co.NISZK', 'cocap.QMIP_le')
('p', 'A', 'NISZK', 'cocap.QMIP_le') => ('p', 'R', 'NISZK', 'cocap.QMIP_le')
('p', 'A', 'NISZK', 'cocap.QMIP_le') => ('p', 'AA', 'NISZK', 'cocap.QMIP_le')
('p', 'A', 'NISZK', 'co.QMIP_le') => ('p', 'R', 'NISZK', 'co.QMIP_le')
('p', 'A', 'NISZK', 'co.QMIP_le') => ('p', 'AA', 'NISZK', 'co.QMIP_le')
('p', 'A', 'co.NISZK', 'QMIP_le') => ('p', 'R', 'co.NISZK', 'QMIP_le')
('p', 'A', 'co.NISZK', 'QMIP_le') => ('p', 'AA', 'co.NISZK', 'QMIP_le')
('p', 'AA', 'co.NISZK', 'QMIP_le') => ('p', 'T', 'co.NISZK', 'QMIP_le')
('p', 'AA', 'co.NISZK', 'QMIP_le') => ('p', 'EA', 'co.NISZK', 'QMIP_le')
('p', 'AA', 'NISZK', 'co.QMIP_le') => ('p', 'T', 'NISZK', 'co.QMIP_le')
('p', 'AA', 'NISZK', 'co.QMIP_le') => ('p', 'EA', 'NISZK', 'co.QMIP_le')
('p', 'A', 'NISZK', 'QMIP_le') => ('p', 'R', 'NISZK', 'QMIP_le')
('p', 'A', 'NISZK', 'QMIP_le') => ('p', 'AA', 'NISZK', 'QMIP_le')
('p', 'A', 'co.NISZK', 'co.QMIP_le') => ('p', 'R', 'co.NISZK', 'co.QMIP_le')
('p', 'A', 'co.NISZK', 'co.QMIP_le') => ('p', 'AA', 'co.NISZK', 'co.QMIP_le')
('p', 'AA', 'co.NISZK', 'co.QMIP_le') => ('p', 'T', 'co.NISZK', 'co.QMIP_le')
('p', 'AA', 'co.NISZK', 'co.QMIP_le') => ('p', 'EA', 'co.NISZK', 'co.QMIP_le')
('p', 'AA', 'co.NISZK', 'cocap.QMIP_le') => ('p', 'T', 'co.NISZK', 'cocap.QMIP_le')
('p', 'AA', 'co.NISZK', 'cocap.QMIP_le') => ('p', 'EA', 'co.NISZK', 'cocap.QMIP_le')
('p', 'AA', 'NISZK', 'cocap.QMIP_le') => ('p', 'T', 'NISZK', 'cocap.QMIP_le')
('p', 'AA', 'NISZK', 'cocap.QMIP_le') => ('p', 'EA', 'NISZK', 'cocap.QMIP_le')
('p', 'AA', 'NISZK', 'QMIP_le') => ('p', 'T', 'NISZK', 'QMIP_le')
('p', 'AA', 'NISZK', 'QMIP_le') => ('p', 'EA', 'NISZK', 'QMIP_le')
('p', 'AA', 'SZK', 'cocap.QMIP_le') => ('p', 'T', 'SZK', 'cocap.QMIP_le')
('p', 'AA', 'SZK', 'cocap.QMIP_le') => ('p', 'EA', 'SZK', 'cocap.QMIP_le')
('p', 'AA', 'SZK', 'co.QMIP_le') => ('p', 'T', 'SZK', 'co.QMIP_le')
('p', 'AA', 'SZK', 'co.QMIP_le') => ('p', 'EA', 'SZK', 'co.QMIP_le')
('p', 'AA', 'SZK', 'QMIP_le') => ('p', 'T', 'SZK', 'QMIP_le')
('p', 'AA', 'SZK', 'QMIP_le') => ('p', 'EA', 'SZK', 'QMIP_le')
('p', 'A', 'SZK', 'cocap.QMIP_ne') => ('p', 'R', 'SZK', 'cocap.QMIP_ne')
('p', 'A', 'SZK', 'cocap.QMIP_ne') => ('p', 'AA', 'SZK', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NISZK', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.NISZK', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NISZK', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NISZK', 'QMIP_ne') => ('p', 'R', 'cocap.NISZK', 'QMIP_ne')
('p', 'A', 'cocap.NISZK', 'QMIP_ne') => ('p', 'AA', 'cocap.NISZK', 'QMIP_ne')
('p', 'A', 'cocap.NISZK', 'co.QMIP_ne') => ('p', 'R', 'cocap.NISZK', 'co.QMIP_ne')
('p', 'A', 'cocap.NISZK', 'co.QMIP_ne') => ('p', 'AA', 'cocap.NISZK', 'co.QMIP_ne')
('p', 'AA', 'cocap.NISZK', 'co.QMIP_ne') => ('p', 'T', 'cocap.NISZK', 'co.QMIP_ne')
('p', 'AA', 'cocap.NISZK', 'co.QMIP_ne') => ('p', 'EA', 'cocap.NISZK', 'co.QMIP_ne')
('p', 'AA', 'cocap.NISZK', 'QMIP_ne') => ('p', 'T', 'cocap.NISZK', 'QMIP_ne')
('p', 'AA', 'cocap.NISZK', 'QMIP_ne') => ('p', 'EA', 'cocap.NISZK', 'QMIP_ne')
('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.NISZK', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.NISZK', 'cocap.QMIP_ne')
('p', 'A', 'co.NISZK', 'cocap.QMIP_ne') => ('p', 'R', 'co.NISZK', 'cocap.QMIP_ne')
('p', 'A', 'co.NISZK', 'cocap.QMIP_ne') => ('p', 'AA', 'co.NISZK', 'cocap.QMIP_ne')
('p', 'A', 'NISZK', 'cocap.QMIP_ne') => ('p', 'R', 'NISZK', 'cocap.QMIP_ne')
('p', 'A', 'NISZK', 'cocap.QMIP_ne') => ('p', 'AA', 'NISZK', 'cocap.QMIP_ne')
('p', 'A', 'NISZK', 'QMIP_ne') => ('p', 'R', 'NISZK', 'QMIP_ne')
('p', 'A', 'NISZK', 'QMIP_ne') => ('p', 'AA', 'NISZK', 'QMIP_ne')
('p', 'A', 'co.NISZK', 'co.QMIP_ne') => ('p', 'R', 'co.NISZK', 'co.QMIP_ne')
('p', 'A', 'co.NISZK', 'co.QMIP_ne') => ('p', 'AA', 'co.NISZK', 'co.QMIP_ne')
('p', 'AA', 'co.NISZK', 'co.QMIP_ne') => ('p', 'T', 'co.NISZK', 'co.QMIP_ne')
('p', 'AA', 'co.NISZK', 'co.QMIP_ne') => ('p', 'EA', 'co.NISZK', 'co.QMIP_ne')
('p', 'AA', 'NISZK', 'QMIP_ne') => ('p', 'T', 'NISZK', 'QMIP_ne')
('p', 'AA', 'NISZK', 'QMIP_ne') => ('p', 'EA', 'NISZK', 'QMIP_ne')
('p', 'A', 'NISZK', 'co.QMIP_ne') => ('p', 'R', 'NISZK', 'co.QMIP_ne')
('p', 'A', 'NISZK', 'co.QMIP_ne') => ('p', 'AA', 'NISZK', 'co.QMIP_ne')
('p', 'A', 'co.NISZK', 'QMIP_ne') => ('p', 'R', 'co.NISZK', 'QMIP_ne')
('p', 'A', 'co.NISZK', 'QMIP_ne') => ('p', 'AA', 'co.NISZK', 'QMIP_ne')
('p', 'AA', 'co.NISZK', 'QMIP_ne') => ('p', 'T', 'co.NISZK', 'QMIP_ne')
('p', 'AA', 'co.NISZK', 'QMIP_ne') => ('p', 'EA', 'co.NISZK', 'QMIP_ne')
('p', 'AA', 'co.NISZK', 'cocap.QMIP_ne') => ('p', 'T', 'co.NISZK', 'cocap.QMIP_ne')
('p', 'AA', 'co.NISZK', 'cocap.QMIP_ne') => ('p', 'EA', 'co.NISZK', 'cocap.QMIP_ne')
('p', 'AA', 'NISZK', 'cocap.QMIP_ne') => ('p', 'T', 'NISZK', 'cocap.QMIP_ne')
('p', 'AA', 'NISZK', 'cocap.QMIP_ne') => ('p', 'EA', 'NISZK', 'cocap.QMIP_ne')
('p', 'AA', 'NISZK', 'co.QMIP_ne') => ('p', 'T', 'NISZK', 'co.QMIP_ne')
('p', 'AA', 'NISZK', 'co.QMIP_ne') => ('p', 'EA', 'NISZK', 'co.QMIP_ne')
('p', 'A', 'SZK', 'QMIP_ne') => ('p', 'R', 'SZK', 'QMIP_ne')
('p', 'A', 'SZK', 'QMIP_ne') => ('p', 'AA', 'SZK', 'QMIP_ne')
('p', 'A', 'SZK', 'co.QMIP_ne') => ('p', 'R', 'SZK', 'co.QMIP_ne')
('p', 'A', 'SZK', 'co.QMIP_ne') => ('p', 'AA', 'SZK', 'co.QMIP_ne')
('p', 'AA', 'SZK', 'co.QMIP_ne') => ('p', 'T', 'SZK', 'co.QMIP_ne')
('p', 'AA', 'SZK', 'co.QMIP_ne') => ('p', 'EA', 'SZK', 'co.QMIP_ne')
('p', 'AA', 'SZK', 'QMIP_ne') => ('p', 'T', 'SZK', 'QMIP_ne')
('p', 'AA', 'SZK', 'QMIP_ne') => ('p', 'EA', 'SZK', 'QMIP_ne')
('p', 'AA', 'SZK', 'cocap.QMIP_ne') => ('p', 'T', 'SZK', 'cocap.QMIP_ne')
('p', 'AA', 'SZK', 'cocap.QMIP_ne') => ('p', 'EA', 'SZK', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NISZK', 'cocap.QIP') => ('p', 'R', 'cocap.NISZK', 'cocap.QIP')
('p', 'A', 'cocap.NISZK', 'cocap.QIP') => ('p', 'AA', 'cocap.NISZK', 'cocap.QIP')
('p', 'A', 'cocap.NISZK', 'QIP') => ('p', 'R', 'cocap.NISZK', 'QIP')
('p', 'A', 'cocap.NISZK', 'QIP') => ('p', 'AA', 'cocap.NISZK', 'QIP')
('p', 'A', 'cocap.NISZK', 'co.QIP') => ('p', 'R', 'cocap.NISZK', 'co.QIP')
('p', 'A', 'cocap.NISZK', 'co.QIP') => ('p', 'AA', 'cocap.NISZK', 'co.QIP')
('p', 'AA', 'cocap.NISZK', 'co.QIP') => ('p', 'T', 'cocap.NISZK', 'co.QIP')
('p', 'AA', 'cocap.NISZK', 'co.QIP') => ('p', 'EA', 'cocap.NISZK', 'co.QIP')
('p', 'AA', 'cocap.NISZK', 'QIP') => ('p', 'T', 'cocap.NISZK', 'QIP')
('p', 'AA', 'cocap.NISZK', 'QIP') => ('p', 'EA', 'cocap.NISZK', 'QIP')
('p', 'AA', 'cocap.NISZK', 'cocap.QIP') => ('p', 'T', 'cocap.NISZK', 'cocap.QIP')
('p', 'AA', 'cocap.NISZK', 'cocap.QIP') => ('p', 'EA', 'cocap.NISZK', 'cocap.QIP')
('p', 'A', 'co.NISZK', 'cocap.QIP') => ('p', 'R', 'co.NISZK', 'cocap.QIP')
('p', 'A', 'co.NISZK', 'cocap.QIP') => ('p', 'AA', 'co.NISZK', 'cocap.QIP')
('p', 'A', 'NISZK', 'cocap.QIP') => ('p', 'R', 'NISZK', 'cocap.QIP')
('p', 'A', 'NISZK', 'cocap.QIP') => ('p', 'AA', 'NISZK', 'cocap.QIP')
('p', 'A', 'NISZK', 'QIP') => ('p', 'R', 'NISZK', 'QIP')
('p', 'A', 'NISZK', 'QIP') => ('p', 'AA', 'NISZK', 'QIP')
('p', 'A', 'co.NISZK', 'co.QIP') => ('p', 'R', 'co.NISZK', 'co.QIP')
('p', 'A', 'co.NISZK', 'co.QIP') => ('p', 'AA', 'co.NISZK', 'co.QIP')
('p', 'AA', 'co.NISZK', 'co.QIP') => ('p', 'T', 'co.NISZK', 'co.QIP')
('p', 'AA', 'co.NISZK', 'co.QIP') => ('p', 'EA', 'co.NISZK', 'co.QIP')
('p', 'AA', 'NISZK', 'QIP') => ('p', 'T', 'NISZK', 'QIP')
('p', 'AA', 'NISZK', 'QIP') => ('p', 'EA', 'NISZK', 'QIP')
('p', 'A', 'NISZK', 'co.QIP') => ('p', 'R', 'NISZK', 'co.QIP')
('p', 'A', 'NISZK', 'co.QIP') => ('p', 'AA', 'NISZK', 'co.QIP')
('p', 'A', 'co.NISZK', 'QIP') => ('p', 'R', 'co.NISZK', 'QIP')
('p', 'A', 'co.NISZK', 'QIP') => ('p', 'AA', 'co.NISZK', 'QIP')
('p', 'AA', 'co.NISZK', 'QIP') => ('p', 'T', 'co.NISZK', 'QIP')
('p', 'AA', 'co.NISZK', 'QIP') => ('p', 'EA', 'co.NISZK', 'QIP')
('p', 'AA', 'co.NISZK', 'cocap.QIP') => ('p', 'T', 'co.NISZK', 'cocap.QIP')
('p', 'AA', 'co.NISZK', 'cocap.QIP') => ('p', 'EA', 'co.NISZK', 'cocap.QIP')
('p', 'AA', 'NISZK', 'cocap.QIP') => ('p', 'T', 'NISZK', 'cocap.QIP')
('p', 'AA', 'NISZK', 'cocap.QIP') => ('p', 'EA', 'NISZK', 'cocap.QIP')
('p', 'AA', 'NISZK', 'co.QIP') => ('p', 'T', 'NISZK', 'co.QIP')
('p', 'AA', 'NISZK', 'co.QIP') => ('p', 'EA', 'NISZK', 'co.QIP')
('p', 'AA', 'SZK', 'cocap.QIP') => ('p', 'T', 'SZK', 'cocap.QIP')
('p', 'AA', 'SZK', 'cocap.QIP') => ('p', 'EA', 'SZK', 'cocap.QIP')
('p', 'AA', 'SZK', 'QIP') => ('p', 'T', 'SZK', 'QIP')
('p', 'AA', 'SZK', 'QIP') => ('p', 'EA', 'SZK', 'QIP')
('p', 'AA', 'SZK', 'co.QIP') => ('p', 'T', 'SZK', 'co.QIP')
('p', 'AA', 'SZK', 'co.QIP') => ('p', 'EA', 'SZK', 'co.QIP')
('d', 'A', 'SPP', 'SZK') => ('-p', 'A', 'SPP', 'SZK')
('p', 'A', 'cocap.NISZK', 'cocap.AM') => ('-d', 'A', 'cocap.NISZK', 'cocap.AM')
('p', 'A', 'cocap.NISZK', 'cocap.AM') => ('p', 'R', 'cocap.NISZK', 'cocap.AM')
('p', 'A', 'cocap.NISZK', 'cocap.AM') => ('p', 'AA', 'cocap.NISZK', 'cocap.AM')
('-d', 'A', 'cocap.NISZK', 'cocap.MIP') => ('-d', 'R', 'cocap.NISZK', 'cocap.MIP')
('-d', 'A', 'cocap.NISZK', 'cocap.MIP') => ('-d', 'AA', 'cocap.NISZK', 'cocap.MIP')
('-d', 'A', 'cocap.NISZK', 'MIP') => ('-d', 'R', 'cocap.NISZK', 'MIP')
('-d', 'A', 'cocap.NISZK', 'MIP') => ('-d', 'AA', 'cocap.NISZK', 'MIP')
('-d', 'A', 'cocap.NISZK', 'co.MIP') => ('-d', 'R', 'cocap.NISZK', 'co.MIP')
('-d', 'A', 'cocap.NISZK', 'co.MIP') => ('-d', 'AA', 'cocap.NISZK', 'co.MIP')
('-d', 'A', 'BPP', 'co.MIP') => ('-d', 'AA', 'BPP', 'co.MIP')
('-d', 'A', 'BPP', 'MIP') => ('-d', 'AA', 'BPP', 'MIP')
('-d', 'A', 'BPP', 'cocap.MIP') => ('-d', 'AA', 'BPP', 'cocap.MIP')
('-d', 'AA', 'BPP', 'cocap.MIP') => ('-d', 'T', 'BPP', 'cocap.MIP')
('-d', 'AA', 'BPP', 'cocap.MIP') => ('-d', 'EA', 'BPP', 'cocap.MIP')
('-d', 'AA', 'BPP', 'MIP') => ('-d', 'T', 'BPP', 'MIP')
('-d', 'AA', 'BPP', 'MIP') => ('-d', 'EA', 'BPP', 'MIP')
('-d', 'AA', 'BPP', 'co.MIP') => ('-d', 'T', 'BPP', 'co.MIP')
('-d', 'AA', 'BPP', 'co.MIP') => ('-d', 'EA', 'BPP', 'co.MIP')
('-d', 'AA', 'cocap.NISZK', 'co.MIP') => ('-d', 'T', 'cocap.NISZK', 'co.MIP')
('-d', 'AA', 'cocap.NISZK', 'co.MIP') => ('-d', 'EA', 'cocap.NISZK', 'co.MIP')
('-d', 'AA', 'cocap.NISZK', 'MIP') => ('-d', 'T', 'cocap.NISZK', 'MIP')
('-d', 'AA', 'cocap.NISZK', 'MIP') => ('-d', 'EA', 'cocap.NISZK', 'MIP')
('-d', 'AA', 'cocap.NISZK', 'cocap.MIP') => ('-d', 'T', 'cocap.NISZK', 'cocap.MIP')
('-d', 'AA', 'cocap.NISZK', 'cocap.MIP') => ('-d', 'EA', 'cocap.NISZK', 'cocap.MIP')
('p', 'A', 'cocap.NISZK', 'cocap.MIP') => ('p', 'R', 'cocap.NISZK', 'cocap.MIP')
('p', 'A', 'cocap.NISZK', 'cocap.MIP') => ('p', 'AA', 'cocap.NISZK', 'cocap.MIP')
('p', 'A', 'cocap.NISZK', 'MIP') => ('p', 'R', 'cocap.NISZK', 'MIP')
('p', 'A', 'cocap.NISZK', 'MIP') => ('p', 'AA', 'cocap.NISZK', 'MIP')
('p', 'A', 'cocap.NISZK', 'co.MIP') => ('p', 'R', 'cocap.NISZK', 'co.MIP')
('p', 'A', 'cocap.NISZK', 'co.MIP') => ('p', 'AA', 'cocap.NISZK', 'co.MIP')
('p', 'A', 'BPP', 'co.MIP') => ('p', 'R', 'BPP', 'co.MIP')
('p', 'A', 'BPP', 'co.MIP') => ('p', 'AA', 'BPP', 'co.MIP')
('p', 'A', 'BPP', 'MIP') => ('p', 'R', 'BPP', 'MIP')
('p', 'A', 'BPP', 'MIP') => ('p', 'AA', 'BPP', 'MIP')
('p', 'A', 'BPP', 'cocap.MIP') => ('p', 'R', 'BPP', 'cocap.MIP')
('p', 'A', 'BPP', 'cocap.MIP') => ('p', 'AA', 'BPP', 'cocap.MIP')
('p', 'AA', 'BPP', 'cocap.MIP') => ('p', 'T', 'BPP', 'cocap.MIP')
('p', 'AA', 'BPP', 'cocap.MIP') => ('p', 'EA', 'BPP', 'cocap.MIP')
('p', 'AA', 'BPP', 'MIP') => ('p', 'T', 'BPP', 'MIP')
('p', 'AA', 'BPP', 'MIP') => ('p', 'EA', 'BPP', 'MIP')
('p', 'AA', 'BPP', 'co.MIP') => ('p', 'T', 'BPP', 'co.MIP')
('p', 'AA', 'BPP', 'co.MIP') => ('p', 'EA', 'BPP', 'co.MIP')
('p', 'AA', 'cocap.NISZK', 'co.MIP') => ('p', 'T', 'cocap.NISZK', 'co.MIP')
('p', 'AA', 'cocap.NISZK', 'co.MIP') => ('p', 'EA', 'cocap.NISZK', 'co.MIP')
('p', 'AA', 'cocap.NISZK', 'MIP') => ('p', 'T', 'cocap.NISZK', 'MIP')
('p', 'AA', 'cocap.NISZK', 'MIP') => ('p', 'EA', 'cocap.NISZK', 'MIP')
('p', 'AA', 'cocap.NISZK', 'cocap.MIP') => ('p', 'T', 'cocap.NISZK', 'cocap.MIP')
('p', 'AA', 'cocap.NISZK', 'cocap.MIP') => ('p', 'EA', 'cocap.NISZK', 'cocap.MIP')
('-d', 'A', 'cocap.NISZK', 'AM') => ('-d', 'R', 'cocap.NISZK', 'AM')
('-d', 'A', 'cocap.NISZK', 'AM') => ('-d', 'AA', 'cocap.NISZK', 'AM')
('-d', 'A', 'cocap.NISZK', 'co.AM') => ('-d', 'R', 'cocap.NISZK', 'co.AM')
('-d', 'A', 'cocap.NISZK', 'co.AM') => ('-d', 'AA', 'cocap.NISZK', 'co.AM')
('-d', 'A', 'cocap.NISZK', 'cocap.AM') => ('-d', 'R', 'cocap.NISZK', 'cocap.AM')
('-d', 'A', 'cocap.NISZK', 'cocap.AM') => ('-d', 'AA', 'cocap.NISZK', 'cocap.AM')
('-d', 'A', 'cocap.NISZK', 'PP/poly') => ('-d', 'R', 'cocap.NISZK', 'PP/poly')
('-d', 'A', 'cocap.NISZK', 'PP/poly') => ('-d', 'AA', 'cocap.NISZK', 'PP/poly')
('-d', 'AA', 'cocap.NISZK', 'PP/poly') => ('-d', 'T', 'cocap.NISZK', 'PP/poly')
('-d', 'AA', 'cocap.NISZK', 'PP/poly') => ('-d', 'EA', 'cocap.NISZK', 'PP/poly')
('-d', 'A', 'BPP', 'cocap.AM') => ('-d', 'AA', 'BPP', 'cocap.AM')
('-d', 'A', 'BPP', 'AM') => ('-d', 'AA', 'BPP', 'AM')
('-d', 'A', 'BPP', 'co.AM') => ('-d', 'AA', 'BPP', 'co.AM')
('-d', 'A', 'BPP', 'co.IP') => ('-d', 'AA', 'BPP', 'co.IP')
('-d', 'A', 'BPP', 'IP') => ('-d', 'AA', 'BPP', 'IP')
('-d', 'A', 'BPP', 'cocap.IP') => ('-d', 'AA', 'BPP', 'cocap.IP')
('-d', 'AA', 'BPP', 'cocap.IP') => ('-d', 'T', 'BPP', 'cocap.IP')
('-d', 'AA', 'BPP', 'cocap.IP') => ('-d', 'EA', 'BPP', 'cocap.IP')
('-d', 'AA', 'BPP', 'IP') => ('-d', 'T', 'BPP', 'IP')
('-d', 'AA', 'BPP', 'IP') => ('-d', 'EA', 'BPP', 'IP')
('-d', 'AA', 'BPP', 'co.IP') => ('-d', 'T', 'BPP', 'co.IP')
('-d', 'AA', 'BPP', 'co.IP') => ('-d', 'EA', 'BPP', 'co.IP')
('-d', 'AA', 'BPP', 'co.AM') => ('-d', 'T', 'BPP', 'co.AM')
('-d', 'AA', 'BPP', 'co.AM') => ('-d', 'EA', 'BPP', 'co.AM')
('-d', 'AA', 'BPP', 'AM') => ('-d', 'T', 'BPP', 'AM')
('-d', 'AA', 'BPP', 'AM') => ('-d', 'EA', 'BPP', 'AM')
('-d', 'AA', 'BPP', 'cocap.AM') => ('-d', 'T', 'BPP', 'cocap.AM')
('-d', 'AA', 'BPP', 'cocap.AM') => ('-d', 'EA', 'BPP', 'cocap.AM')
('-d', 'A', 'cocap.NISZK', 'co.NP/poly') => ('-d', 'R', 'cocap.NISZK', 'co.NP/poly')
('-d', 'A', 'cocap.NISZK', 'co.NP/poly') => ('-d', 'AA', 'cocap.NISZK', 'co.NP/poly')
('-d', 'A', 'cocap.NISZK', 'NP/poly') => ('-d', 'R', 'cocap.NISZK', 'NP/poly')
('-d', 'A', 'cocap.NISZK', 'NP/poly') => ('-d', 'AA', 'cocap.NISZK', 'NP/poly')
('-d', 'A', 'cocap.NISZK', 'cocap.NP/poly') => ('-d', 'R', 'cocap.NISZK', 'cocap.NP/poly')
('-d', 'A', 'cocap.NISZK', 'cocap.NP/poly') => ('-d', 'AA', 'cocap.NISZK', 'cocap.NP/poly')
('-d', 'AA', 'cocap.NISZK', 'cocap.NP/poly') => ('-d', 'T', 'cocap.NISZK', 'cocap.NP/poly')
('-d', 'AA', 'cocap.NISZK', 'cocap.NP/poly') => ('-d', 'EA', 'cocap.NISZK', 'cocap.NP/poly')
('-d', 'AA', 'cocap.NISZK', 'co.NP/poly') => ('-d', 'T', 'cocap.NISZK', 'co.NP/poly')
('-d', 'AA', 'cocap.NISZK', 'co.NP/poly') => ('-d', 'EA', 'cocap.NISZK', 'co.NP/poly')
('-d', 'AA', 'cocap.NISZK', 'NP/poly') => ('-d', 'T', 'cocap.NISZK', 'NP/poly')
('-d', 'AA', 'cocap.NISZK', 'NP/poly') => ('-d', 'EA', 'cocap.NISZK', 'NP/poly')
('-d', 'A', 'cocap.NISZK', 'IP') => ('-d', 'R', 'cocap.NISZK', 'IP')
('-d', 'A', 'cocap.NISZK', 'IP') => ('-d', 'AA', 'cocap.NISZK', 'IP')
('-d', 'A', 'cocap.NISZK', 'co.IP') => ('-d', 'R', 'cocap.NISZK', 'co.IP')
('-d', 'A', 'cocap.NISZK', 'co.IP') => ('-d', 'AA', 'cocap.NISZK', 'co.IP')
('-d', 'A', 'cocap.NISZK', 'cocap.IP') => ('-d', 'R', 'cocap.NISZK', 'cocap.IP')
('-d', 'A', 'cocap.NISZK', 'cocap.IP') => ('-d', 'AA', 'cocap.NISZK', 'cocap.IP')
('-d', 'AA', 'cocap.NISZK', 'cocap.IP') => ('-d', 'T', 'cocap.NISZK', 'cocap.IP')
('-d', 'AA', 'cocap.NISZK', 'cocap.IP') => ('-d', 'EA', 'cocap.NISZK', 'cocap.IP')
('-d', 'AA', 'cocap.NISZK', 'IP') => ('-d', 'T', 'cocap.NISZK', 'IP')
('-d', 'AA', 'cocap.NISZK', 'IP') => ('-d', 'EA', 'cocap.NISZK', 'IP')
('-d', 'AA', 'cocap.NISZK', 'co.IP') => ('-d', 'T', 'cocap.NISZK', 'co.IP')
('-d', 'AA', 'cocap.NISZK', 'co.IP') => ('-d', 'EA', 'cocap.NISZK', 'co.IP')
('-d', 'AA', 'cocap.NISZK', 'cocap.AM') => ('-d', 'T', 'cocap.NISZK', 'cocap.AM')
('-d', 'AA', 'cocap.NISZK', 'cocap.AM') => ('-d', 'EA', 'cocap.NISZK', 'cocap.AM')
('-d', 'AA', 'cocap.NISZK', 'AM') => ('-d', 'T', 'cocap.NISZK', 'AM')
('-d', 'AA', 'cocap.NISZK', 'AM') => ('-d', 'EA', 'cocap.NISZK', 'AM')
('-d', 'AA', 'cocap.NISZK', 'co.AM') => ('-d', 'T', 'cocap.NISZK', 'co.AM')
('-d', 'AA', 'cocap.NISZK', 'co.AM') => ('-d', 'EA', 'cocap.NISZK', 'co.AM')
('p', 'A', 'cocap.NISZK', 'AM') => ('p', 'R', 'cocap.NISZK', 'AM')
('p', 'A', 'cocap.NISZK', 'AM') => ('p', 'AA', 'cocap.NISZK', 'AM')
('p', 'A', 'cocap.NISZK', 'co.AM') => ('p', 'R', 'cocap.NISZK', 'co.AM')
('p', 'A', 'cocap.NISZK', 'co.AM') => ('p', 'AA', 'cocap.NISZK', 'co.AM')
('p', 'A', 'cocap.NISZK', 'PP/poly') => ('p', 'R', 'cocap.NISZK', 'PP/poly')
('p', 'A', 'cocap.NISZK', 'PP/poly') => ('p', 'AA', 'cocap.NISZK', 'PP/poly')
('p', 'AA', 'cocap.NISZK', 'PP/poly') => ('p', 'T', 'cocap.NISZK', 'PP/poly')
('p', 'AA', 'cocap.NISZK', 'PP/poly') => ('p', 'EA', 'cocap.NISZK', 'PP/poly')
('p', 'A', 'BPP', 'co.AM') => ('p', 'R', 'BPP', 'co.AM')
('p', 'A', 'BPP', 'co.AM') => ('p', 'AA', 'BPP', 'co.AM')
('p', 'A', 'BPP', 'AM') => ('p', 'R', 'BPP', 'AM')
('p', 'A', 'BPP', 'AM') => ('p', 'AA', 'BPP', 'AM')
('p', 'A', 'BPP', 'cocap.AM') => ('p', 'R', 'BPP', 'cocap.AM')
('p', 'A', 'BPP', 'cocap.AM') => ('p', 'AA', 'BPP', 'cocap.AM')
('p', 'A', 'BPP', 'IP') => ('p', 'R', 'BPP', 'IP')
('p', 'A', 'BPP', 'IP') => ('p', 'AA', 'BPP', 'IP')
('p', 'A', 'BPP', 'co.IP') => ('p', 'R', 'BPP', 'co.IP')
('p', 'A', 'BPP', 'co.IP') => ('p', 'AA', 'BPP', 'co.IP')
('p', 'A', 'BPP', 'cocap.IP') => ('p', 'R', 'BPP', 'cocap.IP')
('p', 'A', 'BPP', 'cocap.IP') => ('p', 'AA', 'BPP', 'cocap.IP')
('p', 'AA', 'BPP', 'cocap.IP') => ('p', 'T', 'BPP', 'cocap.IP')
('p', 'AA', 'BPP', 'cocap.IP') => ('p', 'EA', 'BPP', 'cocap.IP')
('p', 'AA', 'BPP', 'IP') => ('p', 'T', 'BPP', 'IP')
('p', 'AA', 'BPP', 'IP') => ('p', 'EA', 'BPP', 'IP')
('p', 'AA', 'BPP', 'co.IP') => ('p', 'T', 'BPP', 'co.IP')
('p', 'AA', 'BPP', 'co.IP') => ('p', 'EA', 'BPP', 'co.IP')
('p', 'AA', 'BPP', 'cocap.AM') => ('p', 'T', 'BPP', 'cocap.AM')
('p', 'AA', 'BPP', 'cocap.AM') => ('p', 'EA', 'BPP', 'cocap.AM')
('p', 'AA', 'BPP', 'AM') => ('p', 'T', 'BPP', 'AM')
('p', 'AA', 'BPP', 'AM') => ('p', 'EA', 'BPP', 'AM')
('p', 'AA', 'BPP', 'co.AM') => ('p', 'T', 'BPP', 'co.AM')
('p', 'AA', 'BPP', 'co.AM') => ('p', 'EA', 'BPP', 'co.AM')
('-p', 'R', 'P^Sharp-P', 'BQP') => ('-p', 'A', 'P^Sharp-P', 'BQP')
('-p', 'R', 'AWPP', 'BQP') => ('-p', 'A', 'AWPP', 'BQP')
('-p', 'R', 'co.AWPP', 'BQP') => ('-p', 'A', 'co.AWPP', 'BQP')
('-p', 'R', 'PP', 'BQP') => ('-p', 'A', 'PP', 'BQP')
('-p', 'R', 'SPP', 'BQP') => ('-p', 'A', 'SPP', 'BQP')
('-p', 'R', 'cocap.AWPP', 'BQP') => ('-p', 'A', 'cocap.AWPP', 'BQP')
('p', 'A', 'cocap.NISZK', 'co.NP/poly') => ('p', 'R', 'cocap.NISZK', 'co.NP/poly')
('p', 'A', 'cocap.NISZK', 'co.NP/poly') => ('p', 'AA', 'cocap.NISZK', 'co.NP/poly')
('p', 'A', 'cocap.NISZK', 'NP/poly') => ('p', 'R', 'cocap.NISZK', 'NP/poly')
('p', 'A', 'cocap.NISZK', 'NP/poly') => ('p', 'AA', 'cocap.NISZK', 'NP/poly')
('p', 'A', 'cocap.NISZK', 'cocap.NP/poly') => ('p', 'R', 'cocap.NISZK', 'cocap.NP/poly')
('p', 'A', 'cocap.NISZK', 'cocap.NP/poly') => ('p', 'AA', 'cocap.NISZK', 'cocap.NP/poly')
('p', 'AA', 'cocap.NISZK', 'cocap.NP/poly') => ('p', 'T', 'cocap.NISZK', 'cocap.NP/poly')
('p', 'AA', 'cocap.NISZK', 'cocap.NP/poly') => ('p', 'EA', 'cocap.NISZK', 'cocap.NP/poly')
('p', 'AA', 'cocap.NISZK', 'co.NP/poly') => ('p', 'T', 'cocap.NISZK', 'co.NP/poly')
('p', 'AA', 'cocap.NISZK', 'co.NP/poly') => ('p', 'EA', 'cocap.NISZK', 'co.NP/poly')
('p', 'AA', 'cocap.NISZK', 'NP/poly') => ('p', 'T', 'cocap.NISZK', 'NP/poly')
('p', 'AA', 'cocap.NISZK', 'NP/poly') => ('p', 'EA', 'cocap.NISZK', 'NP/poly')
('p', 'A', 'cocap.NISZK', 'co.IP') => ('p', 'R', 'cocap.NISZK', 'co.IP')
('p', 'A', 'cocap.NISZK', 'co.IP') => ('p', 'AA', 'cocap.NISZK', 'co.IP')
('p', 'A', 'cocap.NISZK', 'IP') => ('p', 'R', 'cocap.NISZK', 'IP')
('p', 'A', 'cocap.NISZK', 'IP') => ('p', 'AA', 'cocap.NISZK', 'IP')
('p', 'A', 'cocap.NISZK', 'cocap.IP') => ('p', 'R', 'cocap.NISZK', 'cocap.IP')
('p', 'A', 'cocap.NISZK', 'cocap.IP') => ('p', 'AA', 'cocap.NISZK', 'cocap.IP')
('p', 'AA', 'cocap.NISZK', 'cocap.IP') => ('p', 'T', 'cocap.NISZK', 'cocap.IP')
('p', 'AA', 'cocap.NISZK', 'cocap.IP') => ('p', 'EA', 'cocap.NISZK', 'cocap.IP')
('p', 'AA', 'cocap.NISZK', 'IP') => ('p', 'T', 'cocap.NISZK', 'IP')
('p', 'AA', 'cocap.NISZK', 'IP') => ('p', 'EA', 'cocap.NISZK', 'IP')
('p', 'AA', 'cocap.NISZK', 'co.IP') => ('p', 'T', 'cocap.NISZK', 'co.IP')
('p', 'AA', 'cocap.NISZK', 'co.IP') => ('p', 'EA', 'cocap.NISZK', 'co.IP')
('p', 'AA', 'cocap.NISZK', 'co.AM') => ('p', 'T', 'cocap.NISZK', 'co.AM')
('p', 'AA', 'cocap.NISZK', 'co.AM') => ('p', 'EA', 'cocap.NISZK', 'co.AM')
('p', 'AA', 'cocap.NISZK', 'AM') => ('p', 'T', 'cocap.NISZK', 'AM')
('p', 'AA', 'cocap.NISZK', 'AM') => ('p', 'EA', 'cocap.NISZK', 'AM')
('p', 'AA', 'cocap.NISZK', 'cocap.AM') => ('p', 'T', 'cocap.NISZK', 'cocap.AM')
('p', 'AA', 'cocap.NISZK', 'cocap.AM') => ('p', 'EA', 'cocap.NISZK', 'cocap.AM')
('-d', 'A', 'SZK', 'cocap.MIP') => ('-d', 'R', 'SZK', 'cocap.MIP')
('-d', 'A', 'SZK', 'cocap.MIP') => ('-d', 'AA', 'SZK', 'cocap.MIP')
('-d', 'A', 'co.NISZK', 'cocap.MIP') => ('-d', 'R', 'co.NISZK', 'cocap.MIP')
('-d', 'A', 'co.NISZK', 'cocap.MIP') => ('-d', 'AA', 'co.NISZK', 'cocap.MIP')
('-d', 'A', 'NISZK', 'cocap.MIP') => ('-d', 'R', 'NISZK', 'cocap.MIP')
('-d', 'A', 'NISZK', 'cocap.MIP') => ('-d', 'AA', 'NISZK', 'cocap.MIP')
('-d', 'A', 'NISZK', 'MIP') => ('-d', 'R', 'NISZK', 'MIP')
('-d', 'A', 'NISZK', 'MIP') => ('-d', 'AA', 'NISZK', 'MIP')
('-d', 'A', 'co.NISZK', 'co.MIP') => ('-d', 'R', 'co.NISZK', 'co.MIP')
('-d', 'A', 'co.NISZK', 'co.MIP') => ('-d', 'AA', 'co.NISZK', 'co.MIP')
('-d', 'AA', 'co.NISZK', 'co.MIP') => ('-d', 'T', 'co.NISZK', 'co.MIP')
('-d', 'AA', 'co.NISZK', 'co.MIP') => ('-d', 'EA', 'co.NISZK', 'co.MIP')
('-d', 'AA', 'NISZK', 'MIP') => ('-d', 'T', 'NISZK', 'MIP')
('-d', 'AA', 'NISZK', 'MIP') => ('-d', 'EA', 'NISZK', 'MIP')
('-d', 'A', 'NISZK', 'co.MIP') => ('-d', 'R', 'NISZK', 'co.MIP')
('-d', 'A', 'NISZK', 'co.MIP') => ('-d', 'AA', 'NISZK', 'co.MIP')
('-d', 'A', 'co.NISZK', 'MIP') => ('-d', 'R', 'co.NISZK', 'MIP')
('-d', 'A', 'co.NISZK', 'MIP') => ('-d', 'AA', 'co.NISZK', 'MIP')
('-d', 'AA', 'co.NISZK', 'MIP') => ('-d', 'T', 'co.NISZK', 'MIP')
('-d', 'AA', 'co.NISZK', 'MIP') => ('-d', 'EA', 'co.NISZK', 'MIP')
('-d', 'AA', 'NISZK', 'co.MIP') => ('-d', 'T', 'NISZK', 'co.MIP')
('-d', 'AA', 'NISZK', 'co.MIP') => ('-d', 'EA', 'NISZK', 'co.MIP')
('-d', 'AA', 'NISZK', 'cocap.MIP') => ('-d', 'T', 'NISZK', 'cocap.MIP')
('-d', 'AA', 'NISZK', 'cocap.MIP') => ('-d', 'EA', 'NISZK', 'cocap.MIP')
('-d', 'AA', 'co.NISZK', 'cocap.MIP') => ('-d', 'T', 'co.NISZK', 'cocap.MIP')
('-d', 'AA', 'co.NISZK', 'cocap.MIP') => ('-d', 'EA', 'co.NISZK', 'cocap.MIP')
('-d', 'A', 'SZK', 'MIP') => ('-d', 'R', 'SZK', 'MIP')
('-d', 'A', 'SZK', 'MIP') => ('-d', 'AA', 'SZK', 'MIP')
('-d', 'A', 'SZK', 'co.MIP') => ('-d', 'R', 'SZK', 'co.MIP')
('-d', 'A', 'SZK', 'co.MIP') => ('-d', 'AA', 'SZK', 'co.MIP')
('-d', 'AA', 'SZK', 'co.MIP') => ('-d', 'T', 'SZK', 'co.MIP')
('-d', 'AA', 'SZK', 'co.MIP') => ('-d', 'EA', 'SZK', 'co.MIP')
('-d', 'AA', 'SZK', 'MIP') => ('-d', 'T', 'SZK', 'MIP')
('-d', 'AA', 'SZK', 'MIP') => ('-d', 'EA', 'SZK', 'MIP')
('-d', 'AA', 'SZK', 'cocap.MIP') => ('-d', 'T', 'SZK', 'cocap.MIP')
('-d', 'AA', 'SZK', 'cocap.MIP') => ('-d', 'EA', 'SZK', 'cocap.MIP')
('p', 'A', 'SZK', 'cocap.MIP') => ('p', 'R', 'SZK', 'cocap.MIP')
('p', 'A', 'SZK', 'cocap.MIP') => ('p', 'AA', 'SZK', 'cocap.MIP')
('p', 'A', 'co.NISZK', 'cocap.MIP') => ('p', 'R', 'co.NISZK', 'cocap.MIP')
('p', 'A', 'co.NISZK', 'cocap.MIP') => ('p', 'AA', 'co.NISZK', 'cocap.MIP')
('p', 'A', 'NISZK', 'cocap.MIP') => ('p', 'R', 'NISZK', 'cocap.MIP')
('p', 'A', 'NISZK', 'cocap.MIP') => ('p', 'AA', 'NISZK', 'cocap.MIP')
('p', 'A', 'NISZK', 'MIP') => ('p', 'R', 'NISZK', 'MIP')
('p', 'A', 'NISZK', 'MIP') => ('p', 'AA', 'NISZK', 'MIP')
('p', 'A', 'co.NISZK', 'co.MIP') => ('p', 'R', 'co.NISZK', 'co.MIP')
('p', 'A', 'co.NISZK', 'co.MIP') => ('p', 'AA', 'co.NISZK', 'co.MIP')
('p', 'AA', 'co.NISZK', 'co.MIP') => ('p', 'T', 'co.NISZK', 'co.MIP')
('p', 'AA', 'co.NISZK', 'co.MIP') => ('p', 'EA', 'co.NISZK', 'co.MIP')
('p', 'AA', 'NISZK', 'MIP') => ('p', 'T', 'NISZK', 'MIP')
('p', 'AA', 'NISZK', 'MIP') => ('p', 'EA', 'NISZK', 'MIP')
('p', 'A', 'NISZK', 'co.MIP') => ('p', 'R', 'NISZK', 'co.MIP')
('p', 'A', 'NISZK', 'co.MIP') => ('p', 'AA', 'NISZK', 'co.MIP')
('p', 'A', 'co.NISZK', 'MIP') => ('p', 'R', 'co.NISZK', 'MIP')
('p', 'A', 'co.NISZK', 'MIP') => ('p', 'AA', 'co.NISZK', 'MIP')
('p', 'AA', 'co.NISZK', 'MIP') => ('p', 'T', 'co.NISZK', 'MIP')
('p', 'AA', 'co.NISZK', 'MIP') => ('p', 'EA', 'co.NISZK', 'MIP')
('p', 'AA', 'co.NISZK', 'cocap.MIP') => ('p', 'T', 'co.NISZK', 'cocap.MIP')
('p', 'AA', 'co.NISZK', 'cocap.MIP') => ('p', 'EA', 'co.NISZK', 'cocap.MIP')
('p', 'AA', 'NISZK', 'cocap.MIP') => ('p', 'T', 'NISZK', 'cocap.MIP')
('p', 'AA', 'NISZK', 'cocap.MIP') => ('p', 'EA', 'NISZK', 'cocap.MIP')
('p', 'AA', 'NISZK', 'co.MIP') => ('p', 'T', 'NISZK', 'co.MIP')
('p', 'AA', 'NISZK', 'co.MIP') => ('p', 'EA', 'NISZK', 'co.MIP')
('p', 'A', 'SZK', 'MIP') => ('p', 'R', 'SZK', 'MIP')
('p', 'A', 'SZK', 'MIP') => ('p', 'AA', 'SZK', 'MIP')
('p', 'A', 'SZK', 'co.MIP') => ('p', 'R', 'SZK', 'co.MIP')
('p', 'A', 'SZK', 'co.MIP') => ('p', 'AA', 'SZK', 'co.MIP')
('p', 'AA', 'SZK', 'co.MIP') => ('p', 'T', 'SZK', 'co.MIP')
('p', 'AA', 'SZK', 'co.MIP') => ('p', 'EA', 'SZK', 'co.MIP')
('p', 'AA', 'SZK', 'MIP') => ('p', 'T', 'SZK', 'MIP')
('p', 'AA', 'SZK', 'MIP') => ('p', 'EA', 'SZK', 'MIP')
('p', 'AA', 'SZK', 'cocap.MIP') => ('p', 'T', 'SZK', 'cocap.MIP')
('p', 'AA', 'SZK', 'cocap.MIP') => ('p', 'EA', 'SZK', 'cocap.MIP')
('p', 'A', 'co.NISZK', 'cocap.AM') => ('-d', 'A', 'co.NISZK', 'cocap.AM')
('p', 'A', 'co.NISZK', 'cocap.AM') => ('p', 'R', 'co.NISZK', 'cocap.AM')
('p', 'A', 'co.NISZK', 'cocap.AM') => ('p', 'AA', 'co.NISZK', 'cocap.AM')
('p', 'A', 'NISZK', 'cocap.AM') => ('-d', 'A', 'NISZK', 'cocap.AM')
('p', 'A', 'NISZK', 'cocap.AM') => ('p', 'R', 'NISZK', 'cocap.AM')
('p', 'A', 'NISZK', 'cocap.AM') => ('p', 'AA', 'NISZK', 'cocap.AM')
('-d', 'A', 'NISZK', 'AM') => ('-d', 'R', 'NISZK', 'AM')
('-d', 'A', 'NISZK', 'AM') => ('-d', 'AA', 'NISZK', 'AM')
('-d', 'A', 'co.NISZK', 'co.AM') => ('-d', 'R', 'co.NISZK', 'co.AM')
('-d', 'A', 'co.NISZK', 'co.AM') => ('-d', 'AA', 'co.NISZK', 'co.AM')
('-d', 'A', 'co.NISZK', 'PP/poly') => ('-d', 'R', 'co.NISZK', 'PP/poly')
('-d', 'A', 'co.NISZK', 'PP/poly') => ('-d', 'AA', 'co.NISZK', 'PP/poly')
('-d', 'A', 'NISZK', 'PP/poly') => ('-d', 'R', 'NISZK', 'PP/poly')
('-d', 'A', 'NISZK', 'PP/poly') => ('-d', 'AA', 'NISZK', 'PP/poly')
('-d', 'AA', 'NISZK', 'PP/poly') => ('-d', 'T', 'NISZK', 'PP/poly')
('-d', 'AA', 'NISZK', 'PP/poly') => ('-d', 'EA', 'NISZK', 'PP/poly')
('-d', 'AA', 'co.NISZK', 'PP/poly') => ('-d', 'T', 'co.NISZK', 'PP/poly')
('-d', 'AA', 'co.NISZK', 'PP/poly') => ('-d', 'EA', 'co.NISZK', 'PP/poly')
('-d', 'A', 'co.NISZK', 'co.NP/poly') => ('-d', 'R', 'co.NISZK', 'co.NP/poly')
('-d', 'A', 'co.NISZK', 'co.NP/poly') => ('-d', 'AA', 'co.NISZK', 'co.NP/poly')
('-d', 'A', 'NISZK', 'NP/poly') => ('-d', 'R', 'NISZK', 'NP/poly')
('-d', 'A', 'NISZK', 'NP/poly') => ('-d', 'AA', 'NISZK', 'NP/poly')
('-d', 'AA', 'NISZK', 'NP/poly') => ('-d', 'T', 'NISZK', 'NP/poly')
('-d', 'AA', 'NISZK', 'NP/poly') => ('-d', 'EA', 'NISZK', 'NP/poly')
('-d', 'AA', 'co.NISZK', 'co.NP/poly') => ('-d', 'T', 'co.NISZK', 'co.NP/poly')
('-d', 'AA', 'co.NISZK', 'co.NP/poly') => ('-d', 'EA', 'co.NISZK', 'co.NP/poly')
('-d', 'A', 'co.NISZK', 'co.IP') => ('-d', 'R', 'co.NISZK', 'co.IP')
('-d', 'A', 'co.NISZK', 'co.IP') => ('-d', 'AA', 'co.NISZK', 'co.IP')
('-d', 'A', 'NISZK', 'IP') => ('-d', 'R', 'NISZK', 'IP')
('-d', 'A', 'NISZK', 'IP') => ('-d', 'AA', 'NISZK', 'IP')
('-d', 'AA', 'NISZK', 'IP') => ('-d', 'T', 'NISZK', 'IP')
('-d', 'AA', 'NISZK', 'IP') => ('-d', 'EA', 'NISZK', 'IP')
('-d', 'AA', 'co.NISZK', 'co.IP') => ('-d', 'T', 'co.NISZK', 'co.IP')
('-d', 'AA', 'co.NISZK', 'co.IP') => ('-d', 'EA', 'co.NISZK', 'co.IP')
('-d', 'AA', 'co.NISZK', 'co.AM') => ('-d', 'T', 'co.NISZK', 'co.AM')
('-d', 'AA', 'co.NISZK', 'co.AM') => ('-d', 'EA', 'co.NISZK', 'co.AM')
('-d', 'AA', 'NISZK', 'AM') => ('-d', 'T', 'NISZK', 'AM')
('-d', 'AA', 'NISZK', 'AM') => ('-d', 'EA', 'NISZK', 'AM')
('p', 'A', 'NISZK', 'AM') => ('p', 'R', 'NISZK', 'AM')
('p', 'A', 'NISZK', 'AM') => ('p', 'AA', 'NISZK', 'AM')
('p', 'A', 'co.NISZK', 'co.AM') => ('p', 'R', 'co.NISZK', 'co.AM')
('p', 'A', 'co.NISZK', 'co.AM') => ('p', 'AA', 'co.NISZK', 'co.AM')
('p', 'A', 'co.NISZK', 'PP/poly') => ('p', 'R', 'co.NISZK', 'PP/poly')
('p', 'A', 'co.NISZK', 'PP/poly') => ('p', 'AA', 'co.NISZK', 'PP/poly')
('p', 'A', 'NISZK', 'PP/poly') => ('p', 'R', 'NISZK', 'PP/poly')
('p', 'A', 'NISZK', 'PP/poly') => ('p', 'AA', 'NISZK', 'PP/poly')
('p', 'AA', 'NISZK', 'PP/poly') => ('p', 'T', 'NISZK', 'PP/poly')
('p', 'AA', 'NISZK', 'PP/poly') => ('p', 'EA', 'NISZK', 'PP/poly')
('p', 'AA', 'co.NISZK', 'PP/poly') => ('p', 'T', 'co.NISZK', 'PP/poly')
('p', 'AA', 'co.NISZK', 'PP/poly') => ('p', 'EA', 'co.NISZK', 'PP/poly')
('p', 'A', 'co.NISZK', 'co.NP/poly') => ('p', 'R', 'co.NISZK', 'co.NP/poly')
('p', 'A', 'co.NISZK', 'co.NP/poly') => ('p', 'AA', 'co.NISZK', 'co.NP/poly')
('p', 'A', 'NISZK', 'NP/poly') => ('p', 'R', 'NISZK', 'NP/poly')
('p', 'A', 'NISZK', 'NP/poly') => ('p', 'AA', 'NISZK', 'NP/poly')
('p', 'AA', 'NISZK', 'NP/poly') => ('p', 'T', 'NISZK', 'NP/poly')
('p', 'AA', 'NISZK', 'NP/poly') => ('p', 'EA', 'NISZK', 'NP/poly')
('p', 'AA', 'co.NISZK', 'co.NP/poly') => ('p', 'T', 'co.NISZK', 'co.NP/poly')
('p', 'AA', 'co.NISZK', 'co.NP/poly') => ('p', 'EA', 'co.NISZK', 'co.NP/poly')
('p', 'A', 'co.NISZK', 'co.IP') => ('p', 'R', 'co.NISZK', 'co.IP')
('p', 'A', 'co.NISZK', 'co.IP') => ('p', 'AA', 'co.NISZK', 'co.IP')
('p', 'A', 'NISZK', 'IP') => ('p', 'R', 'NISZK', 'IP')
('p', 'A', 'NISZK', 'IP') => ('p', 'AA', 'NISZK', 'IP')
('p', 'AA', 'NISZK', 'IP') => ('p', 'T', 'NISZK', 'IP')
('p', 'AA', 'NISZK', 'IP') => ('p', 'EA', 'NISZK', 'IP')
('p', 'AA', 'co.NISZK', 'co.IP') => ('p', 'T', 'co.NISZK', 'co.IP')
('p', 'AA', 'co.NISZK', 'co.IP') => ('p', 'EA', 'co.NISZK', 'co.IP')
('p', 'AA', 'co.NISZK', 'co.AM') => ('p', 'T', 'co.NISZK', 'co.AM')
('p', 'AA', 'co.NISZK', 'co.AM') => ('p', 'EA', 'co.NISZK', 'co.AM')
('p', 'AA', 'NISZK', 'AM') => ('p', 'T', 'NISZK', 'AM')
('p', 'AA', 'NISZK', 'AM') => ('p', 'EA', 'NISZK', 'AM')
('-d', 'A', 'NISZK', 'co.NP/poly') => ('-d', 'AA', 'NISZK', 'co.NP/poly')
('-d', 'A', 'NISZK', 'cocap.NP/poly') => ('-d', 'AA', 'NISZK', 'cocap.NP/poly')
('-d', 'A', 'co.NISZK', 'cocap.NP/poly') => ('-d', 'AA', 'co.NISZK', 'cocap.NP/poly')
('-d', 'A', 'co.NISZK', 'NP/poly') => ('-d', 'AA', 'co.NISZK', 'NP/poly')
('-d', 'AA', 'co.NISZK', 'NP/poly') => ('-d', 'T', 'co.NISZK', 'NP/poly')
('-d', 'AA', 'co.NISZK', 'NP/poly') => ('-d', 'EA', 'co.NISZK', 'NP/poly')
('-d', 'AA', 'co.NISZK', 'cocap.NP/poly') => ('-d', 'T', 'co.NISZK', 'cocap.NP/poly')
('-d', 'AA', 'co.NISZK', 'cocap.NP/poly') => ('-d', 'EA', 'co.NISZK', 'cocap.NP/poly')
('-d', 'AA', 'NISZK', 'cocap.NP/poly') => ('-d', 'T', 'NISZK', 'cocap.NP/poly')
('-d', 'AA', 'NISZK', 'cocap.NP/poly') => ('-d', 'EA', 'NISZK', 'cocap.NP/poly')
('-d', 'AA', 'NISZK', 'co.NP/poly') => ('-d', 'T', 'NISZK', 'co.NP/poly')
('-d', 'AA', 'NISZK', 'co.NP/poly') => ('-d', 'EA', 'NISZK', 'co.NP/poly')
('p', 'A', 'NISZK', 'co.NP/poly') => ('p', 'R', 'NISZK', 'co.NP/poly')
('p', 'A', 'NISZK', 'co.NP/poly') => ('p', 'AA', 'NISZK', 'co.NP/poly')
('p', 'A', 'NISZK', 'cocap.NP/poly') => ('p', 'R', 'NISZK', 'cocap.NP/poly')
('p', 'A', 'NISZK', 'cocap.NP/poly') => ('p', 'AA', 'NISZK', 'cocap.NP/poly')
('p', 'A', 'co.NISZK', 'cocap.NP/poly') => ('p', 'R', 'co.NISZK', 'cocap.NP/poly')
('p', 'A', 'co.NISZK', 'cocap.NP/poly') => ('p', 'AA', 'co.NISZK', 'cocap.NP/poly')
('p', 'A', 'co.NISZK', 'NP/poly') => ('p', 'R', 'co.NISZK', 'NP/poly')
('p', 'A', 'co.NISZK', 'NP/poly') => ('p', 'AA', 'co.NISZK', 'NP/poly')
('p', 'AA', 'co.NISZK', 'NP/poly') => ('p', 'T', 'co.NISZK', 'NP/poly')
('p', 'AA', 'co.NISZK', 'NP/poly') => ('p', 'EA', 'co.NISZK', 'NP/poly')
('p', 'AA', 'co.NISZK', 'cocap.NP/poly') => ('p', 'T', 'co.NISZK', 'cocap.NP/poly')
('p', 'AA', 'co.NISZK', 'cocap.NP/poly') => ('p', 'EA', 'co.NISZK', 'cocap.NP/poly')
('p', 'AA', 'NISZK', 'cocap.NP/poly') => ('p', 'T', 'NISZK', 'cocap.NP/poly')
('p', 'AA', 'NISZK', 'cocap.NP/poly') => ('p', 'EA', 'NISZK', 'cocap.NP/poly')
('p', 'AA', 'NISZK', 'co.NP/poly') => ('p', 'T', 'NISZK', 'co.NP/poly')
('p', 'AA', 'NISZK', 'co.NP/poly') => ('p', 'EA', 'NISZK', 'co.NP/poly')
('-d', 'A', 'NISZK', 'cocap.IP') => ('-d', 'AA', 'NISZK', 'cocap.IP')
('-d', 'A', 'co.NISZK', 'cocap.IP') => ('-d', 'AA', 'co.NISZK', 'cocap.IP')
('-d', 'A', 'co.NISZK', 'IP') => ('-d', 'AA', 'co.NISZK', 'IP')
('-d', 'A', 'NISZK', 'co.IP') => ('-d', 'AA', 'NISZK', 'co.IP')
('-d', 'AA', 'NISZK', 'co.IP') => ('-d', 'T', 'NISZK', 'co.IP')
('-d', 'AA', 'NISZK', 'co.IP') => ('-d', 'EA', 'NISZK', 'co.IP')
('-d', 'AA', 'NISZK', 'cocap.IP') => ('-d', 'T', 'NISZK', 'cocap.IP')
('-d', 'AA', 'NISZK', 'cocap.IP') => ('-d', 'EA', 'NISZK', 'cocap.IP')
('-d', 'AA', 'co.NISZK', 'cocap.IP') => ('-d', 'T', 'co.NISZK', 'cocap.IP')
('-d', 'AA', 'co.NISZK', 'cocap.IP') => ('-d', 'EA', 'co.NISZK', 'cocap.IP')
('-d', 'AA', 'co.NISZK', 'IP') => ('-d', 'T', 'co.NISZK', 'IP')
('-d', 'AA', 'co.NISZK', 'IP') => ('-d', 'EA', 'co.NISZK', 'IP')
('p', 'A', 'NISZK', 'cocap.IP') => ('p', 'R', 'NISZK', 'cocap.IP')
('p', 'A', 'NISZK', 'cocap.IP') => ('p', 'AA', 'NISZK', 'cocap.IP')
('p', 'A', 'co.NISZK', 'cocap.IP') => ('p', 'R', 'co.NISZK', 'cocap.IP')
('p', 'A', 'co.NISZK', 'cocap.IP') => ('p', 'AA', 'co.NISZK', 'cocap.IP')
('p', 'A', 'co.NISZK', 'IP') => ('p', 'R', 'co.NISZK', 'IP')
('p', 'A', 'co.NISZK', 'IP') => ('p', 'AA', 'co.NISZK', 'IP')
('p', 'A', 'NISZK', 'co.IP') => ('p', 'R', 'NISZK', 'co.IP')
('p', 'A', 'NISZK', 'co.IP') => ('p', 'AA', 'NISZK', 'co.IP')
('p', 'AA', 'NISZK', 'co.IP') => ('p', 'T', 'NISZK', 'co.IP')
('p', 'AA', 'NISZK', 'co.IP') => ('p', 'EA', 'NISZK', 'co.IP')
('p', 'AA', 'NISZK', 'cocap.IP') => ('p', 'T', 'NISZK', 'cocap.IP')
('p', 'AA', 'NISZK', 'cocap.IP') => ('p', 'EA', 'NISZK', 'cocap.IP')
('p', 'AA', 'co.NISZK', 'cocap.IP') => ('p', 'T', 'co.NISZK', 'cocap.IP')
('p', 'AA', 'co.NISZK', 'cocap.IP') => ('p', 'EA', 'co.NISZK', 'cocap.IP')
('p', 'AA', 'co.NISZK', 'IP') => ('p', 'T', 'co.NISZK', 'IP')
('p', 'AA', 'co.NISZK', 'IP') => ('p', 'EA', 'co.NISZK', 'IP')
('-d', 'A', 'NISZK', 'co.AM') => ('-d', 'AA', 'NISZK', 'co.AM')
('-d', 'A', 'NISZK', 'cocap.AM') => ('-d', 'AA', 'NISZK', 'cocap.AM')
('-d', 'A', 'co.NISZK', 'cocap.AM') => ('-d', 'AA', 'co.NISZK', 'cocap.AM')
('-d', 'A', 'co.NISZK', 'AM') => ('-d', 'AA', 'co.NISZK', 'AM')
('-d', 'AA', 'co.NISZK', 'AM') => ('-d', 'T', 'co.NISZK', 'AM')
('-d', 'AA', 'co.NISZK', 'AM') => ('-d', 'EA', 'co.NISZK', 'AM')
('-d', 'AA', 'co.NISZK', 'cocap.AM') => ('-d', 'T', 'co.NISZK', 'cocap.AM')
('-d', 'AA', 'co.NISZK', 'cocap.AM') => ('-d', 'EA', 'co.NISZK', 'cocap.AM')
('-d', 'AA', 'NISZK', 'cocap.AM') => ('-d', 'T', 'NISZK', 'cocap.AM')
('-d', 'AA', 'NISZK', 'cocap.AM') => ('-d', 'EA', 'NISZK', 'cocap.AM')
('-d', 'AA', 'NISZK', 'co.AM') => ('-d', 'T', 'NISZK', 'co.AM')
('-d', 'AA', 'NISZK', 'co.AM') => ('-d', 'EA', 'NISZK', 'co.AM')
('p', 'A', 'NISZK', 'co.AM') => ('p', 'R', 'NISZK', 'co.AM')
('p', 'A', 'NISZK', 'co.AM') => ('p', 'AA', 'NISZK', 'co.AM')
('p', 'A', 'co.NISZK', 'AM') => ('p', 'R', 'co.NISZK', 'AM')
('p', 'A', 'co.NISZK', 'AM') => ('p', 'AA', 'co.NISZK', 'AM')
('p', 'AA', 'co.NISZK', 'AM') => ('p', 'T', 'co.NISZK', 'AM')
('p', 'AA', 'co.NISZK', 'AM') => ('p', 'EA', 'co.NISZK', 'AM')
('p', 'AA', 'co.NISZK', 'cocap.AM') => ('p', 'T', 'co.NISZK', 'cocap.AM')
('p', 'AA', 'co.NISZK', 'cocap.AM') => ('p', 'EA', 'co.NISZK', 'cocap.AM')
('p', 'AA', 'NISZK', 'cocap.AM') => ('p', 'T', 'NISZK', 'cocap.AM')
('p', 'AA', 'NISZK', 'cocap.AM') => ('p', 'EA', 'NISZK', 'cocap.AM')
('p', 'AA', 'NISZK', 'co.AM') => ('p', 'T', 'NISZK', 'co.AM')
('p', 'AA', 'NISZK', 'co.AM') => ('p', 'EA', 'NISZK', 'co.AM')
('-d', 'A', 'SZK', 'AM') => ('-d', 'R', 'SZK', 'AM')
('-d', 'A', 'SZK', 'AM') => ('-d', 'AA', 'SZK', 'AM')
('-d', 'A', 'SZK', 'cocap.AM') => ('-d', 'R', 'SZK', 'cocap.AM')
('-d', 'A', 'SZK', 'cocap.AM') => ('-d', 'AA', 'SZK', 'cocap.AM')
('-d', 'A', 'SZK', 'PP/poly') => ('-d', 'R', 'SZK', 'PP/poly')
('-d', 'A', 'SZK', 'PP/poly') => ('-d', 'AA', 'SZK', 'PP/poly')
('-d', 'AA', 'SZK', 'PP/poly') => ('-d', 'T', 'SZK', 'PP/poly')
('-d', 'AA', 'SZK', 'PP/poly') => ('-d', 'EA', 'SZK', 'PP/poly')
('-d', 'A', 'SZK', 'co.NP/poly') => ('-d', 'R', 'SZK', 'co.NP/poly')
('-d', 'A', 'SZK', 'co.NP/poly') => ('-d', 'AA', 'SZK', 'co.NP/poly')
('-d', 'A', 'SZK', 'NP/poly') => ('-d', 'R', 'SZK', 'NP/poly')
('-d', 'A', 'SZK', 'NP/poly') => ('-d', 'AA', 'SZK', 'NP/poly')
('-d', 'A', 'SZK', 'cocap.NP/poly') => ('-d', 'R', 'SZK', 'cocap.NP/poly')
('-d', 'A', 'SZK', 'cocap.NP/poly') => ('-d', 'AA', 'SZK', 'cocap.NP/poly')
('-d', 'AA', 'SZK', 'cocap.NP/poly') => ('-d', 'T', 'SZK', 'cocap.NP/poly')
('-d', 'AA', 'SZK', 'cocap.NP/poly') => ('-d', 'EA', 'SZK', 'cocap.NP/poly')
('-d', 'AA', 'SZK', 'co.NP/poly') => ('-d', 'T', 'SZK', 'co.NP/poly')
('-d', 'AA', 'SZK', 'co.NP/poly') => ('-d', 'EA', 'SZK', 'co.NP/poly')
('-d', 'AA', 'SZK', 'NP/poly') => ('-d', 'T', 'SZK', 'NP/poly')
('-d', 'AA', 'SZK', 'NP/poly') => ('-d', 'EA', 'SZK', 'NP/poly')
('-d', 'A', 'SZK', 'IP') => ('-d', 'R', 'SZK', 'IP')
('-d', 'A', 'SZK', 'IP') => ('-d', 'AA', 'SZK', 'IP')
('-d', 'A', 'SZK', 'co.IP') => ('-d', 'R', 'SZK', 'co.IP')
('-d', 'A', 'SZK', 'co.IP') => ('-d', 'AA', 'SZK', 'co.IP')
('-d', 'A', 'SZK', 'cocap.IP') => ('-d', 'R', 'SZK', 'cocap.IP')
('-d', 'A', 'SZK', 'cocap.IP') => ('-d', 'AA', 'SZK', 'cocap.IP')
('-d', 'AA', 'SZK', 'cocap.IP') => ('-d', 'T', 'SZK', 'cocap.IP')
('-d', 'AA', 'SZK', 'cocap.IP') => ('-d', 'EA', 'SZK', 'cocap.IP')
('-d', 'AA', 'SZK', 'IP') => ('-d', 'T', 'SZK', 'IP')
('-d', 'AA', 'SZK', 'IP') => ('-d', 'EA', 'SZK', 'IP')
('-d', 'AA', 'SZK', 'co.IP') => ('-d', 'T', 'SZK', 'co.IP')
('-d', 'AA', 'SZK', 'co.IP') => ('-d', 'EA', 'SZK', 'co.IP')
('-d', 'A', 'SZK', 'co.AM') => ('-d', 'R', 'SZK', 'co.AM')
('-d', 'A', 'SZK', 'co.AM') => ('-d', 'AA', 'SZK', 'co.AM')
('-d', 'AA', 'SZK', 'co.AM') => ('-d', 'T', 'SZK', 'co.AM')
('-d', 'AA', 'SZK', 'co.AM') => ('-d', 'EA', 'SZK', 'co.AM')
('-d', 'AA', 'SZK', 'AM') => ('-d', 'T', 'SZK', 'AM')
('-d', 'AA', 'SZK', 'AM') => ('-d', 'EA', 'SZK', 'AM')
('-d', 'AA', 'SZK', 'cocap.AM') => ('-d', 'T', 'SZK', 'cocap.AM')
('-d', 'AA', 'SZK', 'cocap.AM') => ('-d', 'EA', 'SZK', 'cocap.AM')
('p', 'A', 'SZK', 'PP/poly') => ('p', 'R', 'SZK', 'PP/poly')
('p', 'A', 'SZK', 'PP/poly') => ('p', 'AA', 'SZK', 'PP/poly')
('p', 'AA', 'SZK', 'PP/poly') => ('p', 'T', 'SZK', 'PP/poly')
('p', 'AA', 'SZK', 'PP/poly') => ('p', 'EA', 'SZK', 'PP/poly')
('p', 'A', 'SZK', 'co.NP/poly') => ('p', 'R', 'SZK', 'co.NP/poly')
('p', 'A', 'SZK', 'co.NP/poly') => ('p', 'AA', 'SZK', 'co.NP/poly')
('p', 'A', 'SZK', 'NP/poly') => ('p', 'R', 'SZK', 'NP/poly')
('p', 'A', 'SZK', 'NP/poly') => ('p', 'AA', 'SZK', 'NP/poly')
('p', 'A', 'SZK', 'cocap.NP/poly') => ('p', 'R', 'SZK', 'cocap.NP/poly')
('p', 'A', 'SZK', 'cocap.NP/poly') => ('p', 'AA', 'SZK', 'cocap.NP/poly')
('p', 'AA', 'SZK', 'cocap.NP/poly') => ('p', 'T', 'SZK', 'cocap.NP/poly')
('p', 'AA', 'SZK', 'cocap.NP/poly') => ('p', 'EA', 'SZK', 'cocap.NP/poly')
('p', 'AA', 'SZK', 'co.NP/poly') => ('p', 'T', 'SZK', 'co.NP/poly')
('p', 'AA', 'SZK', 'co.NP/poly') => ('p', 'EA', 'SZK', 'co.NP/poly')
('p', 'AA', 'SZK', 'NP/poly') => ('p', 'T', 'SZK', 'NP/poly')
('p', 'AA', 'SZK', 'NP/poly') => ('p', 'EA', 'SZK', 'NP/poly')
('p', 'A', 'SZK', 'IP') => ('p', 'R', 'SZK', 'IP')
('p', 'A', 'SZK', 'IP') => ('p', 'AA', 'SZK', 'IP')
('p', 'A', 'SZK', 'co.IP') => ('p', 'R', 'SZK', 'co.IP')
('p', 'A', 'SZK', 'co.IP') => ('p', 'AA', 'SZK', 'co.IP')
('p', 'A', 'SZK', 'cocap.IP') => ('p', 'R', 'SZK', 'cocap.IP')
('p', 'A', 'SZK', 'cocap.IP') => ('p', 'AA', 'SZK', 'cocap.IP')
('p', 'AA', 'SZK', 'cocap.IP') => ('p', 'T', 'SZK', 'cocap.IP')
('p', 'AA', 'SZK', 'cocap.IP') => ('p', 'EA', 'SZK', 'cocap.IP')
('p', 'AA', 'SZK', 'IP') => ('p', 'T', 'SZK', 'IP')
('p', 'AA', 'SZK', 'IP') => ('p', 'EA', 'SZK', 'IP')
('p', 'AA', 'SZK', 'co.IP') => ('p', 'T', 'SZK', 'co.IP')
('p', 'AA', 'SZK', 'co.IP') => ('p', 'EA', 'SZK', 'co.IP')
('p', 'AA', 'SZK', 'cocap.AM') => ('p', 'T', 'SZK', 'cocap.AM')
('p', 'AA', 'SZK', 'cocap.AM') => ('p', 'EA', 'SZK', 'cocap.AM')
('p', 'AA', 'SZK', 'AM') => ('p', 'T', 'SZK', 'AM')
('p', 'AA', 'SZK', 'AM') => ('p', 'EA', 'SZK', 'AM')
('p', 'AA', 'SZK', 'co.AM') => ('p', 'T', 'SZK', 'co.AM')
('p', 'AA', 'SZK', 'co.AM') => ('p', 'EA', 'SZK', 'co.AM')
('d', 'A', 'SZK', 'BQP') => ('-p', 'A', 'SZK', 'BQP')
('p', 'A', 'QMA', 'QRG(1)') => ('-d', 'A', 'QMA', 'QRG(1)')
('p', 'A', 'QMA', 'QRG(1)') => ('p', 'R', 'QMA', 'QRG(1)')
('p', 'A', 'QMA', 'QRG(1)') => ('p', 'AA', 'QMA', 'QRG(1)')
('p', 'A', 'co.QMA', 'QRG(1)') => ('-d', 'A', 'co.QMA', 'QRG(1)')
('p', 'A', 'co.QMA', 'QRG(1)') => ('p', 'R', 'co.QMA', 'QRG(1)')
('p', 'A', 'co.QMA', 'QRG(1)') => ('p', 'AA', 'co.QMA', 'QRG(1)')
('p', 'A', 'cocap.QMA', 'QRG(1)') => ('-d', 'A', 'cocap.QMA', 'QRG(1)')
('p', 'A', 'cocap.QMA', 'QRG(1)') => ('p', 'R', 'cocap.QMA', 'QRG(1)')
('p', 'A', 'cocap.QMA', 'QRG(1)') => ('p', 'AA', 'cocap.QMA', 'QRG(1)')
('d', 'A', 'QRG(1)', 'RP') => ('-p', 'A', 'QRG(1)', 'RP')
('d', 'A', 'QRG(1)', 'co.RP') => ('-p', 'A', 'QRG(1)', 'co.RP')
('p', 'A', 'P', 'QRG(1)') => ('-d', 'A', 'P', 'QRG(1)')
('p', 'A', 'P', 'QRG(1)') => ('p', 'R', 'P', 'QRG(1)')
('p', 'A', 'P', 'QRG(1)') => ('p', 'AA', 'P', 'QRG(1)')
('p', 'AA', 'P', 'QRG(1)') => ('-d', 'AA', 'P', 'QRG(1)')
('p', 'AA', 'P', 'QRG(1)') => ('p', 'T', 'P', 'QRG(1)')
('p', 'AA', 'P', 'QRG(1)') => ('p', 'EA', 'P', 'QRG(1)')
('p', 'EA', 'P', 'QRG(1)') => ('-d', 'EA', 'P', 'QRG(1)')
('p', 'T', 'P', 'QRG(1)') => ('-d', 'T', 'P', 'QRG(1)')
('p', 'R', 'P', 'QRG(1)') => ('-d', 'R', 'P', 'QRG(1)')
('d', 'A', 'QRG(1)', 'co.Sigma_2P') => ('-p', 'A', 'QRG(1)', 'co.Sigma_2P')
('d', 'A', 'QRG(1)', 'Sigma_2P') => ('-p', 'A', 'QRG(1)', 'Sigma_2P')
('d', 'A', 'QRG(1)', 'PH') => ('-p', 'A', 'QRG(1)', 'PH')
('d', 'A', 'QRG(1)', 'SZK') => ('-p', 'A', 'QRG(1)', 'SZK')
('p', 'A', 'BQP', 'QRG(1)') => ('-d', 'A', 'BQP', 'QRG(1)')
('p', 'A', 'BQP', 'QRG(1)') => ('p', 'R', 'BQP', 'QRG(1)')
('p', 'A', 'BQP', 'QRG(1)') => ('p', 'AA', 'BQP', 'QRG(1)')
('p', 'A', 'BPP', 'QRG(1)') => ('-d', 'A', 'BPP', 'QRG(1)')
('p', 'A', 'BPP', 'QRG(1)') => ('p', 'R', 'BPP', 'QRG(1)')
('p', 'A', 'BPP', 'QRG(1)') => ('p', 'AA', 'BPP', 'QRG(1)')
('p', 'AA', 'BPP', 'QRG(1)') => ('-d', 'AA', 'BPP', 'QRG(1)')
('p', 'AA', 'BPP', 'QRG(1)') => ('p', 'T', 'BPP', 'QRG(1)')
('p', 'AA', 'BPP', 'QRG(1)') => ('p', 'EA', 'BPP', 'QRG(1)')
('p', 'EA', 'BPP', 'QRG(1)') => ('-d', 'EA', 'BPP', 'QRG(1)')
('p', 'T', 'BPP', 'QRG(1)') => ('-d', 'T', 'BPP', 'QRG(1)')
('d', 'A', 'QRG(1)', 'PostBPP') => ('-p', 'A', 'QRG(1)', 'PostBPP')
('p', 'AA', 'BQP', 'QRG(1)') => ('-d', 'AA', 'BQP', 'QRG(1)')
('p', 'AA', 'BQP', 'QRG(1)') => ('p', 'T', 'BQP', 'QRG(1)')
('p', 'AA', 'BQP', 'QRG(1)') => ('p', 'EA', 'BQP', 'QRG(1)')
('p', 'EA', 'BQP', 'QRG(1)') => ('-d', 'EA', 'BQP', 'QRG(1)')
('p', 'T', 'BQP', 'QRG(1)') => ('-d', 'T', 'BQP', 'QRG(1)')
('p', 'R', 'BQP', 'QRG(1)') => ('-d', 'R', 'BQP', 'QRG(1)')
('d', 'A', 'QRG(1)', 'BQP') => ('-p', 'A', 'QRG(1)', 'BQP')
('p', 'A', 'cocap.QCMA', 'QRG(1)') => ('-d', 'A', 'cocap.QCMA', 'QRG(1)')
('p', 'A', 'cocap.QCMA', 'QRG(1)') => ('p', 'R', 'cocap.QCMA', 'QRG(1)')
('p', 'A', 'cocap.QCMA', 'QRG(1)') => ('p', 'AA', 'cocap.QCMA', 'QRG(1)')
('p', 'A', 'cocap.NP', 'QRG(1)') => ('-d', 'A', 'cocap.NP', 'QRG(1)')
('p', 'A', 'cocap.NP', 'QRG(1)') => ('p', 'R', 'cocap.NP', 'QRG(1)')
('p', 'A', 'cocap.NP', 'QRG(1)') => ('p', 'AA', 'cocap.NP', 'QRG(1)')
('p', 'A', 'ZPP', 'QRG(1)') => ('-d', 'A', 'ZPP', 'QRG(1)')
('p', 'A', 'ZPP', 'QRG(1)') => ('p', 'R', 'ZPP', 'QRG(1)')
('p', 'A', 'ZPP', 'QRG(1)') => ('p', 'AA', 'ZPP', 'QRG(1)')
('p', 'AA', 'ZPP', 'QRG(1)') => ('-d', 'AA', 'ZPP', 'QRG(1)')
('p', 'AA', 'ZPP', 'QRG(1)') => ('p', 'T', 'ZPP', 'QRG(1)')
('p', 'AA', 'ZPP', 'QRG(1)') => ('p', 'EA', 'ZPP', 'QRG(1)')
('p', 'EA', 'ZPP', 'QRG(1)') => ('-d', 'EA', 'ZPP', 'QRG(1)')
('p', 'T', 'ZPP', 'QRG(1)') => ('-d', 'T', 'ZPP', 'QRG(1)')
('p', 'AA', 'cocap.NP', 'QRG(1)') => ('-d', 'AA', 'cocap.NP', 'QRG(1)')
('p', 'AA', 'cocap.NP', 'QRG(1)') => ('p', 'T', 'cocap.NP', 'QRG(1)')
('p', 'AA', 'cocap.NP', 'QRG(1)') => ('p', 'EA', 'cocap.NP', 'QRG(1)')
('p', 'EA', 'cocap.NP', 'QRG(1)') => ('-d', 'EA', 'cocap.NP', 'QRG(1)')
('p', 'T', 'cocap.NP', 'QRG(1)') => ('-d', 'T', 'cocap.NP', 'QRG(1)')
('p', 'A', 'cocap.MA', 'QRG(1)') => ('-d', 'A', 'cocap.MA', 'QRG(1)')
('p', 'A', 'cocap.MA', 'QRG(1)') => ('p', 'AA', 'cocap.MA', 'QRG(1)')
('p', 'AA', 'cocap.MA', 'QRG(1)') => ('-d', 'AA', 'cocap.MA', 'QRG(1)')
('p', 'AA', 'cocap.MA', 'QRG(1)') => ('p', 'T', 'cocap.MA', 'QRG(1)')
('p', 'AA', 'cocap.MA', 'QRG(1)') => ('p', 'EA', 'cocap.MA', 'QRG(1)')
('p', 'EA', 'cocap.MA', 'QRG(1)') => ('-d', 'EA', 'cocap.MA', 'QRG(1)')
('p', 'T', 'cocap.MA', 'QRG(1)') => ('-d', 'T', 'cocap.MA', 'QRG(1)')
('p', 'AA', 'cocap.QCMA', 'QRG(1)') => ('-d', 'AA', 'cocap.QCMA', 'QRG(1)')
('p', 'AA', 'cocap.QCMA', 'QRG(1)') => ('p', 'T', 'cocap.QCMA', 'QRG(1)')
('p', 'AA', 'cocap.QCMA', 'QRG(1)') => ('p', 'EA', 'cocap.QCMA', 'QRG(1)')
('p', 'EA', 'cocap.QCMA', 'QRG(1)') => ('-d', 'EA', 'cocap.QCMA', 'QRG(1)')
('p', 'T', 'cocap.QCMA', 'QRG(1)') => ('-d', 'T', 'cocap.QCMA', 'QRG(1)')
('p', 'R', 'cocap.QCMA', 'QRG(1)') => ('-d', 'R', 'cocap.QCMA', 'QRG(1)')
('p', 'AA', 'cocap.QMA', 'QRG(1)') => ('-d', 'AA', 'cocap.QMA', 'QRG(1)')
('p', 'AA', 'cocap.QMA', 'QRG(1)') => ('p', 'T', 'cocap.QMA', 'QRG(1)')
('p', 'AA', 'cocap.QMA', 'QRG(1)') => ('p', 'EA', 'cocap.QMA', 'QRG(1)')
('p', 'EA', 'cocap.QMA', 'QRG(1)') => ('-d', 'EA', 'cocap.QMA', 'QRG(1)')
('p', 'EA', 'cocap.QMA', 'QRG(1)') => ('p', 'E', 'cocap.QMA', 'QRG(1)')
('p', 'T', 'cocap.QMA', 'QRG(1)') => ('-d', 'T', 'cocap.QMA', 'QRG(1)')
('p', 'R', 'cocap.QMA', 'QRG(1)') => ('-d', 'R', 'cocap.QMA', 'QRG(1)')
('p', 'A', 'co.MA', 'QRG(1)') => ('-d', 'A', 'co.MA', 'QRG(1)')
('p', 'A', 'co.MA', 'QRG(1)') => ('p', 'R', 'co.MA', 'QRG(1)')
('p', 'A', 'co.MA', 'QRG(1)') => ('p', 'AA', 'co.MA', 'QRG(1)')
('p', 'A', 'MA', 'QRG(1)') => ('-d', 'A', 'MA', 'QRG(1)')
('p', 'A', 'MA', 'QRG(1)') => ('p', 'R', 'MA', 'QRG(1)')
('p', 'A', 'MA', 'QRG(1)') => ('p', 'AA', 'MA', 'QRG(1)')
('p', 'A', 'RP', 'QRG(1)') => ('-d', 'A', 'RP', 'QRG(1)')
('p', 'A', 'RP', 'QRG(1)') => ('p', 'R', 'RP', 'QRG(1)')
('p', 'A', 'RP', 'QRG(1)') => ('p', 'AA', 'RP', 'QRG(1)')
('p', 'A', 'co.RP', 'QRG(1)') => ('-d', 'A', 'co.RP', 'QRG(1)')
('p', 'A', 'co.RP', 'QRG(1)') => ('p', 'R', 'co.RP', 'QRG(1)')
('p', 'A', 'co.RP', 'QRG(1)') => ('p', 'AA', 'co.RP', 'QRG(1)')
('p', 'AA', 'co.RP', 'QRG(1)') => ('-d', 'AA', 'co.RP', 'QRG(1)')
('p', 'AA', 'co.RP', 'QRG(1)') => ('p', 'T', 'co.RP', 'QRG(1)')
('p', 'AA', 'co.RP', 'QRG(1)') => ('p', 'EA', 'co.RP', 'QRG(1)')
('p', 'AA', 'RP', 'QRG(1)') => ('-d', 'AA', 'RP', 'QRG(1)')
('p', 'AA', 'RP', 'QRG(1)') => ('p', 'T', 'RP', 'QRG(1)')
('p', 'AA', 'RP', 'QRG(1)') => ('p', 'EA', 'RP', 'QRG(1)')
('p', 'EA', 'RP', 'QRG(1)') => ('-d', 'EA', 'RP', 'QRG(1)')
('p', 'EA', 'co.RP', 'QRG(1)') => ('-d', 'EA', 'co.RP', 'QRG(1)')
('p', 'T', 'RP', 'QRG(1)') => ('-d', 'T', 'RP', 'QRG(1)')
('p', 'T', 'co.RP', 'QRG(1)') => ('-d', 'T', 'co.RP', 'QRG(1)')
('p', 'A', 'NP', 'QRG(1)') => ('-d', 'A', 'NP', 'QRG(1)')
('p', 'A', 'NP', 'QRG(1)') => ('p', 'R', 'NP', 'QRG(1)')
('p', 'A', 'NP', 'QRG(1)') => ('p', 'AA', 'NP', 'QRG(1)')
('p', 'A', 'co.NP', 'QRG(1)') => ('-d', 'A', 'co.NP', 'QRG(1)')
('p', 'A', 'co.NP', 'QRG(1)') => ('p', 'R', 'co.NP', 'QRG(1)')
('p', 'A', 'co.NP', 'QRG(1)') => ('p', 'AA', 'co.NP', 'QRG(1)')
('d', 'A', 'QRG(1)', 'SBP') => ('-p', 'A', 'QRG(1)', 'SBP')
('d', 'A', 'QRG(1)', 'co.SBP') => ('-p', 'A', 'QRG(1)', 'co.SBP')
('d', 'A', 'QRG(1)', 'BQP/mpoly') => ('-p', 'A', 'QRG(1)', 'BQP/mpoly')
('d', 'A', 'QRG(1)', 'AM') => ('-p', 'A', 'QRG(1)', 'AM')
('d', 'A', 'QRG(1)', 'co.AM') => ('-p', 'A', 'QRG(1)', 'co.AM')
('d', 'A', 'QRG(1)', 'IP') => ('-p', 'A', 'QRG(1)', 'IP')
('d', 'A', 'QRG(1)', 'co.IP') => ('-p', 'A', 'QRG(1)', 'co.IP')
('d', 'A', 'QRG(1)', 'BQP/qpoly') => ('-p', 'A', 'QRG(1)', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'QRG(1)') => ('-d', 'AA', 'co.NP', 'QRG(1)')
('p', 'AA', 'co.NP', 'QRG(1)') => ('p', 'T', 'co.NP', 'QRG(1)')
('p', 'AA', 'co.NP', 'QRG(1)') => ('p', 'EA', 'co.NP', 'QRG(1)')
('p', 'AA', 'NP', 'QRG(1)') => ('-d', 'AA', 'NP', 'QRG(1)')
('p', 'AA', 'NP', 'QRG(1)') => ('p', 'T', 'NP', 'QRG(1)')
('p', 'AA', 'NP', 'QRG(1)') => ('p', 'EA', 'NP', 'QRG(1)')
('p', 'EA', 'NP', 'QRG(1)') => ('-d', 'EA', 'NP', 'QRG(1)')
('p', 'EA', 'co.NP', 'QRG(1)') => ('-d', 'EA', 'co.NP', 'QRG(1)')
('p', 'T', 'NP', 'QRG(1)') => ('-d', 'T', 'NP', 'QRG(1)')
('p', 'T', 'co.NP', 'QRG(1)') => ('-d', 'T', 'co.NP', 'QRG(1)')
('p', 'AA', 'MA', 'QRG(1)') => ('-d', 'AA', 'MA', 'QRG(1)')
('p', 'AA', 'MA', 'QRG(1)') => ('p', 'T', 'MA', 'QRG(1)')
('p', 'AA', 'MA', 'QRG(1)') => ('p', 'EA', 'MA', 'QRG(1)')
('p', 'AA', 'co.MA', 'QRG(1)') => ('-d', 'AA', 'co.MA', 'QRG(1)')
('p', 'AA', 'co.MA', 'QRG(1)') => ('p', 'T', 'co.MA', 'QRG(1)')
('p', 'AA', 'co.MA', 'QRG(1)') => ('p', 'EA', 'co.MA', 'QRG(1)')
('p', 'EA', 'co.MA', 'QRG(1)') => ('-d', 'EA', 'co.MA', 'QRG(1)')
('p', 'EA', 'MA', 'QRG(1)') => ('-d', 'EA', 'MA', 'QRG(1)')
('p', 'T', 'co.MA', 'QRG(1)') => ('-d', 'T', 'co.MA', 'QRG(1)')
('p', 'T', 'MA', 'QRG(1)') => ('-d', 'T', 'MA', 'QRG(1)')
('p', 'A', 'co.QCMA', 'QRG(1)') => ('-d', 'A', 'co.QCMA', 'QRG(1)')
('p', 'A', 'co.QCMA', 'QRG(1)') => ('p', 'R', 'co.QCMA', 'QRG(1)')
('p', 'A', 'co.QCMA', 'QRG(1)') => ('p', 'AA', 'co.QCMA', 'QRG(1)')
('p', 'A', 'QCMA', 'QRG(1)') => ('-d', 'A', 'QCMA', 'QRG(1)')
('p', 'A', 'QCMA', 'QRG(1)') => ('p', 'R', 'QCMA', 'QRG(1)')
('p', 'A', 'QCMA', 'QRG(1)') => ('p', 'AA', 'QCMA', 'QRG(1)')
('p', 'AA', 'QCMA', 'QRG(1)') => ('-d', 'AA', 'QCMA', 'QRG(1)')
('p', 'AA', 'QCMA', 'QRG(1)') => ('p', 'T', 'QCMA', 'QRG(1)')
('p', 'AA', 'QCMA', 'QRG(1)') => ('p', 'EA', 'QCMA', 'QRG(1)')
('p', 'AA', 'co.QCMA', 'QRG(1)') => ('-d', 'AA', 'co.QCMA', 'QRG(1)')
('p', 'AA', 'co.QCMA', 'QRG(1)') => ('p', 'T', 'co.QCMA', 'QRG(1)')
('p', 'AA', 'co.QCMA', 'QRG(1)') => ('p', 'EA', 'co.QCMA', 'QRG(1)')
('p', 'EA', 'co.QCMA', 'QRG(1)') => ('-d', 'EA', 'co.QCMA', 'QRG(1)')
('p', 'EA', 'QCMA', 'QRG(1)') => ('-d', 'EA', 'QCMA', 'QRG(1)')
('p', 'T', 'co.QCMA', 'QRG(1)') => ('-d', 'T', 'co.QCMA', 'QRG(1)')
('p', 'T', 'QCMA', 'QRG(1)') => ('-d', 'T', 'QCMA', 'QRG(1)')
('p', 'R', 'QCMA', 'QRG(1)') => ('-d', 'R', 'QCMA', 'QRG(1)')
('p', 'R', 'co.QCMA', 'QRG(1)') => ('-d', 'R', 'co.QCMA', 'QRG(1)')
('p', 'AA', 'co.QMA', 'QRG(1)') => ('-d', 'AA', 'co.QMA', 'QRG(1)')
('p', 'AA', 'co.QMA', 'QRG(1)') => ('p', 'T', 'co.QMA', 'QRG(1)')
('p', 'AA', 'co.QMA', 'QRG(1)') => ('p', 'EA', 'co.QMA', 'QRG(1)')
('p', 'AA', 'QMA', 'QRG(1)') => ('-d', 'AA', 'QMA', 'QRG(1)')
('p', 'AA', 'QMA', 'QRG(1)') => ('p', 'T', 'QMA', 'QRG(1)')
('p', 'AA', 'QMA', 'QRG(1)') => ('p', 'EA', 'QMA', 'QRG(1)')
('p', 'EA', 'QMA', 'QRG(1)') => ('-d', 'EA', 'QMA', 'QRG(1)')
('p', 'EA', 'QMA', 'QRG(1)') => ('p', 'E', 'QMA', 'QRG(1)')
('p', 'EA', 'co.QMA', 'QRG(1)') => ('-d', 'EA', 'co.QMA', 'QRG(1)')
('p', 'EA', 'co.QMA', 'QRG(1)') => ('p', 'E', 'co.QMA', 'QRG(1)')
('p', 'T', 'QMA', 'QRG(1)') => ('-d', 'T', 'QMA', 'QRG(1)')
('p', 'T', 'co.QMA', 'QRG(1)') => ('-d', 'T', 'co.QMA', 'QRG(1)')
('p', 'R', 'co.QMA', 'QRG(1)') => ('-d', 'R', 'co.QMA', 'QRG(1)')
('p', 'R', 'QMA', 'QRG(1)') => ('-d', 'R', 'QMA', 'QRG(1)')
('p', 'A', 'MIP', 'QMIP_ne') => ('-d', 'A', 'MIP', 'QMIP_ne')
('p', 'A', 'MIP', 'QMIP_ne') => ('p', 'R', 'MIP', 'QMIP_ne')
('p', 'A', 'MIP', 'QMIP_ne') => ('p', 'AA', 'MIP', 'QMIP_ne')
('p', 'A', 'co.MIP', 'co.QMIP_ne') => ('-d', 'A', 'co.MIP', 'co.QMIP_ne')
('p', 'A', 'co.MIP', 'co.QMIP_ne') => ('p', 'R', 'co.MIP', 'co.QMIP_ne')
('p', 'A', 'co.MIP', 'co.QMIP_ne') => ('p', 'AA', 'co.MIP', 'co.QMIP_ne')
('p', 'A', 'cocap.MIP', 'cocap.QMIP_ne') => ('-d', 'A', 'cocap.MIP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.MIP', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.MIP', 'cocap.QMIP_ne')
('p', 'A', 'cocap.MIP', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.MIP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.MIP', 'QMIP_ne') => ('-d', 'R', 'cocap.MIP', 'QMIP_ne')
('-d', 'A', 'cocap.MIP', 'QMIP_ne') => ('-d', 'AA', 'cocap.MIP', 'QMIP_ne')
('-d', 'A', 'cocap.MIP', 'co.QMIP_ne') => ('-d', 'R', 'cocap.MIP', 'co.QMIP_ne')
('-d', 'A', 'cocap.MIP', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.MIP', 'co.QMIP_ne')
('-d', 'A', 'cocap.MIP', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.MIP', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.MIP', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.MIP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.MIP', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.MIP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.MIP', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.MIP', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.MIP', 'QMIP_ne') => ('-d', 'T', 'cocap.MIP', 'QMIP_ne')
('-d', 'AA', 'cocap.MIP', 'QMIP_ne') => ('-d', 'EA', 'cocap.MIP', 'QMIP_ne')
('-d', 'AA', 'cocap.MIP', 'co.QMIP_ne') => ('-d', 'T', 'cocap.MIP', 'co.QMIP_ne')
('-d', 'AA', 'cocap.MIP', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.MIP', 'co.QMIP_ne')
('p', 'A', 'cocap.MIP', 'QMIP_ne') => ('p', 'R', 'cocap.MIP', 'QMIP_ne')
('p', 'A', 'cocap.MIP', 'QMIP_ne') => ('p', 'AA', 'cocap.MIP', 'QMIP_ne')
('p', 'A', 'cocap.MIP', 'co.QMIP_ne') => ('p', 'R', 'cocap.MIP', 'co.QMIP_ne')
('p', 'A', 'cocap.MIP', 'co.QMIP_ne') => ('p', 'AA', 'cocap.MIP', 'co.QMIP_ne')
('p', 'AA', 'cocap.MIP', 'co.QMIP_ne') => ('p', 'T', 'cocap.MIP', 'co.QMIP_ne')
('p', 'AA', 'cocap.MIP', 'co.QMIP_ne') => ('p', 'EA', 'cocap.MIP', 'co.QMIP_ne')
('p', 'AA', 'cocap.MIP', 'QMIP_ne') => ('p', 'T', 'cocap.MIP', 'QMIP_ne')
('p', 'AA', 'cocap.MIP', 'QMIP_ne') => ('p', 'EA', 'cocap.MIP', 'QMIP_ne')
('p', 'AA', 'cocap.MIP', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.MIP', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.MIP', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.MIP', 'cocap.QMIP_ne')
('p', 'AA', 'co.MIP', 'co.QMIP_ne') => ('-d', 'AA', 'co.MIP', 'co.QMIP_ne')
('p', 'AA', 'co.MIP', 'co.QMIP_ne') => ('p', 'T', 'co.MIP', 'co.QMIP_ne')
('p', 'AA', 'co.MIP', 'co.QMIP_ne') => ('p', 'EA', 'co.MIP', 'co.QMIP_ne')
('p', 'AA', 'MIP', 'QMIP_ne') => ('-d', 'AA', 'MIP', 'QMIP_ne')
('p', 'AA', 'MIP', 'QMIP_ne') => ('p', 'T', 'MIP', 'QMIP_ne')
('p', 'AA', 'MIP', 'QMIP_ne') => ('p', 'EA', 'MIP', 'QMIP_ne')
('p', 'EA', 'MIP', 'QMIP_ne') => ('-d', 'EA', 'MIP', 'QMIP_ne')
('p', 'EA', 'co.MIP', 'co.QMIP_ne') => ('-d', 'EA', 'co.MIP', 'co.QMIP_ne')
('p', 'T', 'MIP', 'QMIP_ne') => ('-d', 'T', 'MIP', 'QMIP_ne')
('p', 'T', 'co.MIP', 'co.QMIP_ne') => ('-d', 'T', 'co.MIP', 'co.QMIP_ne')
('p', 'R', 'co.MIP', 'co.QMIP_ne') => ('-d', 'R', 'co.MIP', 'co.QMIP_ne')
('p', 'R', 'MIP', 'QMIP_ne') => ('-d', 'R', 'MIP', 'QMIP_ne')
('p', 'A', 'SBP', 'PostBPP') => ('-d', 'A', 'SBP', 'PostBPP')
('p', 'A', 'SBP', 'PostBPP') => ('p', 'R', 'SBP', 'PostBPP')
('p', 'A', 'SBP', 'PostBPP') => ('p', 'AA', 'SBP', 'PostBPP')
('p', 'A', 'co.SBP', 'PostBPP') => ('-d', 'A', 'co.SBP', 'PostBPP')
('p', 'A', 'co.SBP', 'PostBPP') => ('p', 'R', 'co.SBP', 'PostBPP')
('p', 'A', 'co.SBP', 'PostBPP') => ('p', 'AA', 'co.SBP', 'PostBPP')
('p', 'A', 'cocap.SBP', 'PostBPP') => ('-d', 'A', 'cocap.SBP', 'PostBPP')
('p', 'A', 'cocap.SBP', 'PostBPP') => ('p', 'R', 'cocap.SBP', 'PostBPP')
('p', 'A', 'cocap.SBP', 'PostBPP') => ('p', 'AA', 'cocap.SBP', 'PostBPP')
('d', 'A', 'cocap.QMA/qpoly', 'cocap.SBP') => ('-p', 'A', 'cocap.QMA/qpoly', 'cocap.SBP')
('d', 'A', 'co.QMA/qpoly', 'cocap.SBP') => ('-p', 'A', 'co.QMA/qpoly', 'cocap.SBP')
('d', 'A', 'QMA/qpoly', 'cocap.SBP') => ('-p', 'A', 'QMA/qpoly', 'cocap.SBP')
('d', 'A', 'co.QMA/qpoly', 'SBP') => ('-p', 'A', 'co.QMA/qpoly', 'SBP')
('d', 'A', 'QMA/qpoly', 'co.SBP') => ('-p', 'A', 'QMA/qpoly', 'co.SBP')
('d', 'A', 'co.QMA/qpoly', 'co.SBP') => ('-p', 'A', 'co.QMA/qpoly', 'co.SBP')
('d', 'A', 'QMA/qpoly', 'SBP') => ('-p', 'A', 'QMA/qpoly', 'SBP')
('d', 'A', 'cocap.QMA/qpoly', 'SBP') => ('-p', 'A', 'cocap.QMA/qpoly', 'SBP')
('d', 'A', 'cocap.QMA/qpoly', 'co.SBP') => ('-p', 'A', 'cocap.QMA/qpoly', 'co.SBP')
('p', 'A', 'P', 'PostBPP') => ('-d', 'A', 'P', 'PostBPP')
('p', 'A', 'P', 'PostBPP') => ('p', 'R', 'P', 'PostBPP')
('p', 'A', 'P', 'PostBPP') => ('p', 'AA', 'P', 'PostBPP')
('p', 'AA', 'P', 'PostBPP') => ('-d', 'AA', 'P', 'PostBPP')
('p', 'AA', 'P', 'PostBPP') => ('p', 'T', 'P', 'PostBPP')
('p', 'AA', 'P', 'PostBPP') => ('p', 'EA', 'P', 'PostBPP')
('p', 'EA', 'P', 'PostBPP') => ('-d', 'EA', 'P', 'PostBPP')
('p', 'T', 'P', 'PostBPP') => ('-d', 'T', 'P', 'PostBPP')
('p', 'R', 'P', 'PostBPP') => ('-d', 'R', 'P', 'PostBPP')
('-p', 'R', 'PostBPP', 'P') => ('-p', 'A', 'PostBPP', 'P')
('d', 'A', 'co.QCMA/qpoly', 'cocap.SBP') => ('-p', 'A', 'co.QCMA/qpoly', 'cocap.SBP')
('d', 'A', 'QCMA/qpoly', 'cocap.SBP') => ('-p', 'A', 'QCMA/qpoly', 'cocap.SBP')
('d', 'A', 'BQP', 'cocap.SBP') => ('-p', 'A', 'BQP', 'cocap.SBP')
('d', 'A', 'BQP', 'SBP') => ('-p', 'A', 'BQP', 'SBP')
('d', 'A', 'BQP', 'co.SBP') => ('-p', 'A', 'BQP', 'co.SBP')
('d', 'A', 'PostBPP', 'BQP') => ('-p', 'A', 'PostBPP', 'BQP')
('p', 'A', 'cocap.NP', 'PostBPP') => ('-d', 'A', 'cocap.NP', 'PostBPP')
('p', 'A', 'cocap.NP', 'PostBPP') => ('p', 'R', 'cocap.NP', 'PostBPP')
('p', 'A', 'cocap.NP', 'PostBPP') => ('p', 'AA', 'cocap.NP', 'PostBPP')
('p', 'A', 'ZPP', 'PostBPP') => ('-d', 'A', 'ZPP', 'PostBPP')
('p', 'A', 'ZPP', 'PostBPP') => ('p', 'R', 'ZPP', 'PostBPP')
('p', 'A', 'ZPP', 'PostBPP') => ('p', 'AA', 'ZPP', 'PostBPP')
('p', 'AA', 'ZPP', 'PostBPP') => ('-d', 'AA', 'ZPP', 'PostBPP')
('p', 'AA', 'ZPP', 'PostBPP') => ('p', 'T', 'ZPP', 'PostBPP')
('p', 'AA', 'ZPP', 'PostBPP') => ('p', 'EA', 'ZPP', 'PostBPP')
('p', 'EA', 'ZPP', 'PostBPP') => ('-d', 'EA', 'ZPP', 'PostBPP')
('p', 'T', 'ZPP', 'PostBPP') => ('-d', 'T', 'ZPP', 'PostBPP')
('p', 'AA', 'cocap.NP', 'PostBPP') => ('-d', 'AA', 'cocap.NP', 'PostBPP')
('p', 'AA', 'cocap.NP', 'PostBPP') => ('p', 'T', 'cocap.NP', 'PostBPP')
('p', 'AA', 'cocap.NP', 'PostBPP') => ('p', 'EA', 'cocap.NP', 'PostBPP')
('p', 'EA', 'cocap.NP', 'PostBPP') => ('-d', 'EA', 'cocap.NP', 'PostBPP')
('p', 'T', 'cocap.NP', 'PostBPP') => ('-d', 'T', 'cocap.NP', 'PostBPP')
('p', 'A', 'cocap.MA', 'PostBPP') => ('-d', 'A', 'cocap.MA', 'PostBPP')
('p', 'A', 'cocap.MA', 'PostBPP') => ('p', 'AA', 'cocap.MA', 'PostBPP')
('p', 'AA', 'cocap.MA', 'PostBPP') => ('-d', 'AA', 'cocap.MA', 'PostBPP')
('p', 'AA', 'cocap.MA', 'PostBPP') => ('p', 'T', 'cocap.MA', 'PostBPP')
('p', 'AA', 'cocap.MA', 'PostBPP') => ('p', 'EA', 'cocap.MA', 'PostBPP')
('p', 'EA', 'cocap.MA', 'PostBPP') => ('-d', 'EA', 'cocap.MA', 'PostBPP')
('p', 'T', 'cocap.MA', 'PostBPP') => ('-d', 'T', 'cocap.MA', 'PostBPP')
('p', 'AA', 'cocap.SBP', 'PostBPP') => ('-d', 'AA', 'cocap.SBP', 'PostBPP')
('p', 'AA', 'cocap.SBP', 'PostBPP') => ('p', 'T', 'cocap.SBP', 'PostBPP')
('p', 'AA', 'cocap.SBP', 'PostBPP') => ('p', 'EA', 'cocap.SBP', 'PostBPP')
('p', 'EA', 'cocap.SBP', 'PostBPP') => ('-d', 'EA', 'cocap.SBP', 'PostBPP')
('p', 'T', 'cocap.SBP', 'PostBPP') => ('-d', 'T', 'cocap.SBP', 'PostBPP')
('d', 'A', 'PostBPP', 'RP') => ('-p', 'A', 'PostBPP', 'RP')
('d', 'A', 'PostBPP', 'co.RP') => ('-p', 'A', 'PostBPP', 'co.RP')
('d', 'A', 'PostBPP', 'SZK') => ('-p', 'A', 'PostBPP', 'SZK')
('d', 'A', 'PostBPP', 'NP') => ('-p', 'A', 'PostBPP', 'NP')
('d', 'A', 'PostBPP', 'co.NP') => ('-p', 'A', 'PostBPP', 'co.NP')
('p', 'A', 'co.MA', 'PostBPP') => ('-d', 'A', 'co.MA', 'PostBPP')
('p', 'A', 'co.MA', 'PostBPP') => ('p', 'R', 'co.MA', 'PostBPP')
('p', 'A', 'co.MA', 'PostBPP') => ('p', 'AA', 'co.MA', 'PostBPP')
('p', 'A', 'MA', 'PostBPP') => ('-d', 'A', 'MA', 'PostBPP')
('p', 'A', 'MA', 'PostBPP') => ('p', 'R', 'MA', 'PostBPP')
('p', 'A', 'MA', 'PostBPP') => ('p', 'AA', 'MA', 'PostBPP')
('p', 'A', 'RP', 'PostBPP') => ('-d', 'A', 'RP', 'PostBPP')
('p', 'A', 'RP', 'PostBPP') => ('p', 'R', 'RP', 'PostBPP')
('p', 'A', 'RP', 'PostBPP') => ('p', 'AA', 'RP', 'PostBPP')
('p', 'A', 'co.RP', 'PostBPP') => ('-d', 'A', 'co.RP', 'PostBPP')
('p', 'A', 'co.RP', 'PostBPP') => ('p', 'R', 'co.RP', 'PostBPP')
('p', 'A', 'co.RP', 'PostBPP') => ('p', 'AA', 'co.RP', 'PostBPP')
('p', 'AA', 'co.RP', 'PostBPP') => ('-d', 'AA', 'co.RP', 'PostBPP')
('p', 'AA', 'co.RP', 'PostBPP') => ('p', 'T', 'co.RP', 'PostBPP')
('p', 'AA', 'co.RP', 'PostBPP') => ('p', 'EA', 'co.RP', 'PostBPP')
('p', 'AA', 'RP', 'PostBPP') => ('-d', 'AA', 'RP', 'PostBPP')
('p', 'AA', 'RP', 'PostBPP') => ('p', 'T', 'RP', 'PostBPP')
('p', 'AA', 'RP', 'PostBPP') => ('p', 'EA', 'RP', 'PostBPP')
('p', 'EA', 'RP', 'PostBPP') => ('-d', 'EA', 'RP', 'PostBPP')
('p', 'EA', 'co.RP', 'PostBPP') => ('-d', 'EA', 'co.RP', 'PostBPP')
('p', 'T', 'RP', 'PostBPP') => ('-d', 'T', 'RP', 'PostBPP')
('p', 'T', 'co.RP', 'PostBPP') => ('-d', 'T', 'co.RP', 'PostBPP')
('p', 'A', 'NP', 'PostBPP') => ('-d', 'A', 'NP', 'PostBPP')
('p', 'A', 'NP', 'PostBPP') => ('p', 'R', 'NP', 'PostBPP')
('p', 'A', 'NP', 'PostBPP') => ('p', 'AA', 'NP', 'PostBPP')
('p', 'A', 'co.NP', 'PostBPP') => ('-d', 'A', 'co.NP', 'PostBPP')
('p', 'A', 'co.NP', 'PostBPP') => ('p', 'R', 'co.NP', 'PostBPP')
('p', 'A', 'co.NP', 'PostBPP') => ('p', 'AA', 'co.NP', 'PostBPP')
('d', 'A', 'PostBPP', 'SBP') => ('-p', 'A', 'PostBPP', 'SBP')
('d', 'A', 'PostBPP', 'co.SBP') => ('-p', 'A', 'PostBPP', 'co.SBP')
('d', 'A', 'PostBPP', 'BQP/mpoly') => ('-p', 'A', 'PostBPP', 'BQP/mpoly')
('d', 'A', 'PostBPP', 'AM') => ('-p', 'A', 'PostBPP', 'AM')
('d', 'A', 'PostBPP', 'co.AM') => ('-p', 'A', 'PostBPP', 'co.AM')
('d', 'A', 'PostBPP', 'IP') => ('-p', 'A', 'PostBPP', 'IP')
('d', 'A', 'PostBPP', 'co.IP') => ('-p', 'A', 'PostBPP', 'co.IP')
('d', 'A', 'PostBPP', 'BQP/qpoly') => ('-p', 'A', 'PostBPP', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'PostBPP') => ('-d', 'AA', 'co.NP', 'PostBPP')
('p', 'AA', 'co.NP', 'PostBPP') => ('p', 'T', 'co.NP', 'PostBPP')
('p', 'AA', 'co.NP', 'PostBPP') => ('p', 'EA', 'co.NP', 'PostBPP')
('p', 'AA', 'NP', 'PostBPP') => ('-d', 'AA', 'NP', 'PostBPP')
('p', 'AA', 'NP', 'PostBPP') => ('p', 'T', 'NP', 'PostBPP')
('p', 'AA', 'NP', 'PostBPP') => ('p', 'EA', 'NP', 'PostBPP')
('p', 'EA', 'NP', 'PostBPP') => ('-d', 'EA', 'NP', 'PostBPP')
('p', 'EA', 'co.NP', 'PostBPP') => ('-d', 'EA', 'co.NP', 'PostBPP')
('p', 'T', 'NP', 'PostBPP') => ('-d', 'T', 'NP', 'PostBPP')
('p', 'T', 'co.NP', 'PostBPP') => ('-d', 'T', 'co.NP', 'PostBPP')
('p', 'AA', 'MA', 'PostBPP') => ('-d', 'AA', 'MA', 'PostBPP')
('p', 'AA', 'MA', 'PostBPP') => ('p', 'T', 'MA', 'PostBPP')
('p', 'AA', 'MA', 'PostBPP') => ('p', 'EA', 'MA', 'PostBPP')
('p', 'AA', 'co.MA', 'PostBPP') => ('-d', 'AA', 'co.MA', 'PostBPP')
('p', 'AA', 'co.MA', 'PostBPP') => ('p', 'T', 'co.MA', 'PostBPP')
('p', 'AA', 'co.MA', 'PostBPP') => ('p', 'EA', 'co.MA', 'PostBPP')
('p', 'EA', 'co.MA', 'PostBPP') => ('-d', 'EA', 'co.MA', 'PostBPP')
('p', 'EA', 'MA', 'PostBPP') => ('-d', 'EA', 'MA', 'PostBPP')
('p', 'T', 'co.MA', 'PostBPP') => ('-d', 'T', 'co.MA', 'PostBPP')
('p', 'T', 'MA', 'PostBPP') => ('-d', 'T', 'MA', 'PostBPP')
('p', 'AA', 'co.SBP', 'PostBPP') => ('-d', 'AA', 'co.SBP', 'PostBPP')
('p', 'AA', 'co.SBP', 'PostBPP') => ('p', 'T', 'co.SBP', 'PostBPP')
('p', 'AA', 'co.SBP', 'PostBPP') => ('p', 'EA', 'co.SBP', 'PostBPP')
('p', 'AA', 'SBP', 'PostBPP') => ('-d', 'AA', 'SBP', 'PostBPP')
('p', 'AA', 'SBP', 'PostBPP') => ('p', 'T', 'SBP', 'PostBPP')
('p', 'AA', 'SBP', 'PostBPP') => ('p', 'EA', 'SBP', 'PostBPP')
('p', 'EA', 'SBP', 'PostBPP') => ('-d', 'EA', 'SBP', 'PostBPP')
('p', 'EA', 'co.SBP', 'PostBPP') => ('-d', 'EA', 'co.SBP', 'PostBPP')
('p', 'T', 'SBP', 'PostBPP') => ('-d', 'T', 'SBP', 'PostBPP')
('p', 'T', 'co.SBP', 'PostBPP') => ('-d', 'T', 'co.SBP', 'PostBPP')
('p', 'A', 'BPP', 'MA') => ('-d', 'A', 'BPP', 'MA')
('p', 'A', 'BPP', 'MA') => ('p', 'AA', 'BPP', 'MA')
('p', 'A', 'BPP', 'co.MA') => ('-d', 'A', 'BPP', 'co.MA')
('p', 'A', 'BPP', 'co.MA') => ('p', 'AA', 'BPP', 'co.MA')
('p', 'A', 'BPP', 'cocap.MA') => ('-d', 'A', 'BPP', 'cocap.MA')
('p', 'A', 'BPP', 'cocap.MA') => ('p', 'AA', 'BPP', 'cocap.MA')
('d', 'A', 'cocap.MA', 'RP') => ('-p', 'A', 'cocap.MA', 'RP')
('d', 'A', 'cocap.MA', 'co.RP') => ('-p', 'A', 'cocap.MA', 'co.RP')
('d', 'A', 'cocap.MA', 'NP') => ('-p', 'A', 'cocap.MA', 'NP')
('d', 'A', 'cocap.MA', 'co.NP') => ('-p', 'A', 'cocap.MA', 'co.NP')
('d', 'A', 'cocap.MA', 'Delta_2P') => ('-p', 'A', 'cocap.MA', 'Delta_2P')
('d', 'A', 'MA', 'Delta_2P') => ('-p', 'A', 'MA', 'Delta_2P')
('d', 'A', 'co.MA', 'Delta_2P') => ('-p', 'A', 'co.MA', 'Delta_2P')
('-d', 'A', 'BPP', 'co.MA') => ('-d', 'AA', 'BPP', 'co.MA')
('-d', 'A', 'BPP', 'cocap.MA') => ('-d', 'AA', 'BPP', 'cocap.MA')
('-d', 'A', 'BPP', 'SBP') => ('-d', 'AA', 'BPP', 'SBP')
('-d', 'A', 'BPP', 'co.SBP') => ('-d', 'AA', 'BPP', 'co.SBP')
('-d', 'A', 'BPP', 'cocap.SBP') => ('-d', 'AA', 'BPP', 'cocap.SBP')
('-d', 'A', 'BPP', 'PostBPP') => ('-d', 'AA', 'BPP', 'PostBPP')
('-d', 'AA', 'BPP', 'PostBPP') => ('-d', 'T', 'BPP', 'PostBPP')
('-d', 'AA', 'BPP', 'PostBPP') => ('-d', 'EA', 'BPP', 'PostBPP')
('-d', 'AA', 'BPP', 'cocap.SBP') => ('-d', 'T', 'BPP', 'cocap.SBP')
('-d', 'AA', 'BPP', 'cocap.SBP') => ('-d', 'EA', 'BPP', 'cocap.SBP')
('-d', 'AA', 'BPP', 'SBP') => ('-d', 'T', 'BPP', 'SBP')
('-d', 'AA', 'BPP', 'SBP') => ('-d', 'EA', 'BPP', 'SBP')
('-d', 'AA', 'BPP', 'co.SBP') => ('-d', 'T', 'BPP', 'co.SBP')
('-d', 'AA', 'BPP', 'co.SBP') => ('-d', 'EA', 'BPP', 'co.SBP')
('-d', 'A', 'BPP', 'MA') => ('-d', 'AA', 'BPP', 'MA')
('-d', 'AA', 'BPP', 'MA') => ('-d', 'T', 'BPP', 'MA')
('-d', 'AA', 'BPP', 'MA') => ('-d', 'EA', 'BPP', 'MA')
('-d', 'AA', 'BPP', 'co.MA') => ('-d', 'T', 'BPP', 'co.MA')
('-d', 'AA', 'BPP', 'co.MA') => ('-d', 'EA', 'BPP', 'co.MA')
('-d', 'AA', 'BPP', 'cocap.MA') => ('-d', 'T', 'BPP', 'cocap.MA')
('-d', 'AA', 'BPP', 'cocap.MA') => ('-d', 'EA', 'BPP', 'cocap.MA')
('p', 'A', 'BPP', 'SBP') => ('p', 'AA', 'BPP', 'SBP')
('p', 'A', 'BPP', 'co.SBP') => ('p', 'AA', 'BPP', 'co.SBP')
('p', 'A', 'BPP', 'cocap.SBP') => ('p', 'AA', 'BPP', 'cocap.SBP')
('p', 'A', 'BPP', 'PostBPP') => ('p', 'AA', 'BPP', 'PostBPP')
('p', 'AA', 'BPP', 'PostBPP') => ('p', 'T', 'BPP', 'PostBPP')
('p', 'AA', 'BPP', 'PostBPP') => ('p', 'EA', 'BPP', 'PostBPP')
('p', 'AA', 'BPP', 'cocap.SBP') => ('p', 'T', 'BPP', 'cocap.SBP')
('p', 'AA', 'BPP', 'cocap.SBP') => ('p', 'EA', 'BPP', 'cocap.SBP')
('p', 'AA', 'BPP', 'SBP') => ('p', 'T', 'BPP', 'SBP')
('p', 'AA', 'BPP', 'SBP') => ('p', 'EA', 'BPP', 'SBP')
('p', 'AA', 'BPP', 'co.SBP') => ('p', 'T', 'BPP', 'co.SBP')
('p', 'AA', 'BPP', 'co.SBP') => ('p', 'EA', 'BPP', 'co.SBP')
('p', 'AA', 'BPP', 'cocap.MA') => ('p', 'T', 'BPP', 'cocap.MA')
('p', 'AA', 'BPP', 'cocap.MA') => ('p', 'EA', 'BPP', 'cocap.MA')
('p', 'AA', 'BPP', 'co.MA') => ('p', 'T', 'BPP', 'co.MA')
('p', 'AA', 'BPP', 'co.MA') => ('p', 'EA', 'BPP', 'co.MA')
('p', 'AA', 'BPP', 'MA') => ('p', 'T', 'BPP', 'MA')
('p', 'AA', 'BPP', 'MA') => ('p', 'EA', 'BPP', 'MA')
('p', 'A', 'QSZK', 'QIP') => ('-d', 'A', 'QSZK', 'QIP')
('p', 'A', 'QSZK', 'QIP') => ('p', 'R', 'QSZK', 'QIP')
('p', 'A', 'QSZK', 'QIP') => ('p', 'AA', 'QSZK', 'QIP')
('p', 'A', 'QSZK', 'co.QIP') => ('-d', 'A', 'QSZK', 'co.QIP')
('p', 'A', 'QSZK', 'co.QIP') => ('p', 'R', 'QSZK', 'co.QIP')
('p', 'A', 'QSZK', 'co.QIP') => ('p', 'AA', 'QSZK', 'co.QIP')
('p', 'A', 'QSZK', 'cocap.QIP') => ('-d', 'A', 'QSZK', 'cocap.QIP')
('p', 'A', 'QSZK', 'cocap.QIP') => ('p', 'R', 'QSZK', 'cocap.QIP')
('p', 'A', 'QSZK', 'cocap.QIP') => ('p', 'AA', 'QSZK', 'cocap.QIP')
('-d', 'A', 'QSZK', 'QIP') => ('-d', 'R', 'QSZK', 'QIP')
('-d', 'A', 'QSZK', 'QIP') => ('-d', 'AA', 'QSZK', 'QIP')
('-d', 'A', 'QSZK', 'cocap.QIP') => ('-d', 'R', 'QSZK', 'cocap.QIP')
('-d', 'A', 'QSZK', 'cocap.QIP') => ('-d', 'AA', 'QSZK', 'cocap.QIP')
('-d', 'A', 'QSZK', 'co.QMIP_le') => ('-d', 'R', 'QSZK', 'co.QMIP_le')
('-d', 'A', 'QSZK', 'co.QMIP_le') => ('-d', 'AA', 'QSZK', 'co.QMIP_le')
('-d', 'A', 'QSZK', 'QMIP_le') => ('-d', 'R', 'QSZK', 'QMIP_le')
('-d', 'A', 'QSZK', 'QMIP_le') => ('-d', 'AA', 'QSZK', 'QMIP_le')
('-d', 'A', 'QSZK', 'cocap.QMIP_le') => ('-d', 'R', 'QSZK', 'cocap.QMIP_le')
('-d', 'A', 'QSZK', 'cocap.QMIP_le') => ('-d', 'AA', 'QSZK', 'cocap.QMIP_le')
('-d', 'AA', 'QSZK', 'cocap.QMIP_le') => ('-d', 'T', 'QSZK', 'cocap.QMIP_le')
('-d', 'AA', 'QSZK', 'cocap.QMIP_le') => ('-d', 'EA', 'QSZK', 'cocap.QMIP_le')
('-d', 'AA', 'QSZK', 'co.QMIP_le') => ('-d', 'T', 'QSZK', 'co.QMIP_le')
('-d', 'AA', 'QSZK', 'co.QMIP_le') => ('-d', 'EA', 'QSZK', 'co.QMIP_le')
('-d', 'AA', 'QSZK', 'QMIP_le') => ('-d', 'T', 'QSZK', 'QMIP_le')
('-d', 'AA', 'QSZK', 'QMIP_le') => ('-d', 'EA', 'QSZK', 'QMIP_le')
('-d', 'A', 'QSZK', 'cocap.QMIP_ne') => ('-d', 'R', 'QSZK', 'cocap.QMIP_ne')
('-d', 'A', 'QSZK', 'cocap.QMIP_ne') => ('-d', 'AA', 'QSZK', 'cocap.QMIP_ne')
('-d', 'A', 'QSZK', 'QMIP_ne') => ('-d', 'R', 'QSZK', 'QMIP_ne')
('-d', 'A', 'QSZK', 'QMIP_ne') => ('-d', 'AA', 'QSZK', 'QMIP_ne')
('-d', 'A', 'QSZK', 'co.QMIP_ne') => ('-d', 'R', 'QSZK', 'co.QMIP_ne')
('-d', 'A', 'QSZK', 'co.QMIP_ne') => ('-d', 'AA', 'QSZK', 'co.QMIP_ne')
('-d', 'AA', 'QSZK', 'co.QMIP_ne') => ('-d', 'T', 'QSZK', 'co.QMIP_ne')
('-d', 'AA', 'QSZK', 'co.QMIP_ne') => ('-d', 'EA', 'QSZK', 'co.QMIP_ne')
('-d', 'AA', 'QSZK', 'QMIP_ne') => ('-d', 'T', 'QSZK', 'QMIP_ne')
('-d', 'AA', 'QSZK', 'QMIP_ne') => ('-d', 'EA', 'QSZK', 'QMIP_ne')
('-d', 'AA', 'QSZK', 'cocap.QMIP_ne') => ('-d', 'T', 'QSZK', 'cocap.QMIP_ne')
('-d', 'AA', 'QSZK', 'cocap.QMIP_ne') => ('-d', 'EA', 'QSZK', 'cocap.QMIP_ne')
('-d', 'A', 'QSZK', 'co.QIP') => ('-d', 'R', 'QSZK', 'co.QIP')
('-d', 'A', 'QSZK', 'co.QIP') => ('-d', 'AA', 'QSZK', 'co.QIP')
('-d', 'AA', 'QSZK', 'co.QIP') => ('-d', 'T', 'QSZK', 'co.QIP')
('-d', 'AA', 'QSZK', 'co.QIP') => ('-d', 'EA', 'QSZK', 'co.QIP')
('-d', 'AA', 'QSZK', 'QIP') => ('-d', 'T', 'QSZK', 'QIP')
('-d', 'AA', 'QSZK', 'QIP') => ('-d', 'EA', 'QSZK', 'QIP')
('-d', 'AA', 'QSZK', 'cocap.QIP') => ('-d', 'T', 'QSZK', 'cocap.QIP')
('-d', 'AA', 'QSZK', 'cocap.QIP') => ('-d', 'EA', 'QSZK', 'cocap.QIP')
('p', 'A', 'QSZK', 'co.QMIP_le') => ('p', 'R', 'QSZK', 'co.QMIP_le')
('p', 'A', 'QSZK', 'co.QMIP_le') => ('p', 'AA', 'QSZK', 'co.QMIP_le')
('p', 'A', 'QSZK', 'QMIP_le') => ('p', 'R', 'QSZK', 'QMIP_le')
('p', 'A', 'QSZK', 'QMIP_le') => ('p', 'AA', 'QSZK', 'QMIP_le')
('p', 'A', 'QSZK', 'cocap.QMIP_le') => ('p', 'R', 'QSZK', 'cocap.QMIP_le')
('p', 'A', 'QSZK', 'cocap.QMIP_le') => ('p', 'AA', 'QSZK', 'cocap.QMIP_le')
('p', 'AA', 'QSZK', 'cocap.QMIP_le') => ('p', 'T', 'QSZK', 'cocap.QMIP_le')
('p', 'AA', 'QSZK', 'cocap.QMIP_le') => ('p', 'EA', 'QSZK', 'cocap.QMIP_le')
('p', 'AA', 'QSZK', 'co.QMIP_le') => ('p', 'T', 'QSZK', 'co.QMIP_le')
('p', 'AA', 'QSZK', 'co.QMIP_le') => ('p', 'EA', 'QSZK', 'co.QMIP_le')
('p', 'AA', 'QSZK', 'QMIP_le') => ('p', 'T', 'QSZK', 'QMIP_le')
('p', 'AA', 'QSZK', 'QMIP_le') => ('p', 'EA', 'QSZK', 'QMIP_le')
('p', 'A', 'QSZK', 'cocap.QMIP_ne') => ('p', 'R', 'QSZK', 'cocap.QMIP_ne')
('p', 'A', 'QSZK', 'cocap.QMIP_ne') => ('p', 'AA', 'QSZK', 'cocap.QMIP_ne')
('p', 'A', 'QSZK', 'QMIP_ne') => ('p', 'R', 'QSZK', 'QMIP_ne')
('p', 'A', 'QSZK', 'QMIP_ne') => ('p', 'AA', 'QSZK', 'QMIP_ne')
('p', 'A', 'QSZK', 'co.QMIP_ne') => ('p', 'R', 'QSZK', 'co.QMIP_ne')
('p', 'A', 'QSZK', 'co.QMIP_ne') => ('p', 'AA', 'QSZK', 'co.QMIP_ne')
('p', 'AA', 'QSZK', 'co.QMIP_ne') => ('p', 'T', 'QSZK', 'co.QMIP_ne')
('p', 'AA', 'QSZK', 'co.QMIP_ne') => ('p', 'EA', 'QSZK', 'co.QMIP_ne')
('p', 'AA', 'QSZK', 'QMIP_ne') => ('p', 'T', 'QSZK', 'QMIP_ne')
('p', 'AA', 'QSZK', 'QMIP_ne') => ('p', 'EA', 'QSZK', 'QMIP_ne')
('p', 'AA', 'QSZK', 'cocap.QMIP_ne') => ('p', 'T', 'QSZK', 'cocap.QMIP_ne')
('p', 'AA', 'QSZK', 'cocap.QMIP_ne') => ('p', 'EA', 'QSZK', 'cocap.QMIP_ne')
('p', 'AA', 'QSZK', 'cocap.QIP') => ('p', 'T', 'QSZK', 'cocap.QIP')
('p', 'AA', 'QSZK', 'cocap.QIP') => ('p', 'EA', 'QSZK', 'cocap.QIP')
('p', 'AA', 'QSZK', 'QIP') => ('p', 'T', 'QSZK', 'QIP')
('p', 'AA', 'QSZK', 'QIP') => ('p', 'EA', 'QSZK', 'QIP')
('p', 'AA', 'QSZK', 'co.QIP') => ('p', 'T', 'QSZK', 'co.QIP')
('p', 'AA', 'QSZK', 'co.QIP') => ('p', 'EA', 'QSZK', 'co.QIP')
('p', 'A', 'EXP_plo', 'EXP') => ('-d', 'A', 'EXP_plo', 'EXP')
('p', 'A', 'EXP_plo', 'EXP') => ('p', 'R', 'EXP_plo', 'EXP')
('p', 'A', 'EXP_plo', 'EXP') => ('p', 'AA', 'EXP_plo', 'EXP')
('p', 'A', 'RP', 'EXP') => ('-d', 'A', 'RP', 'EXP')
('p', 'A', 'RP', 'EXP') => ('p', 'R', 'RP', 'EXP')
('p', 'A', 'RP', 'EXP') => ('p', 'AA', 'RP', 'EXP')
('p', 'A', 'co.RP', 'EXP') => ('-d', 'A', 'co.RP', 'EXP')
('p', 'A', 'co.RP', 'EXP') => ('p', 'R', 'co.RP', 'EXP')
('p', 'A', 'co.RP', 'EXP') => ('p', 'AA', 'co.RP', 'EXP')
('p', 'A', 'ZPP', 'EXP') => ('-d', 'A', 'ZPP', 'EXP')
('p', 'A', 'ZPP', 'EXP') => ('p', 'R', 'ZPP', 'EXP')
('p', 'A', 'ZPP', 'EXP') => ('p', 'AA', 'ZPP', 'EXP')
('p', 'A', 'P', 'EXP') => ('-d', 'A', 'P', 'EXP')
('p', 'A', 'P', 'EXP') => ('p', 'R', 'P', 'EXP')
('p', 'A', 'P', 'EXP') => ('p', 'AA', 'P', 'EXP')
('p', 'AA', 'P', 'EXP') => ('-d', 'AA', 'P', 'EXP')
('p', 'AA', 'P', 'EXP') => ('p', 'T', 'P', 'EXP')
('p', 'AA', 'P', 'EXP') => ('p', 'EA', 'P', 'EXP')
('p', 'EA', 'P', 'EXP') => ('-d', 'EA', 'P', 'EXP')
('p', 'T', 'P', 'EXP') => ('-d', 'T', 'P', 'EXP')
('p', 'AA', 'ZPP', 'EXP') => ('-d', 'AA', 'ZPP', 'EXP')
('p', 'AA', 'ZPP', 'EXP') => ('p', 'T', 'ZPP', 'EXP')
('p', 'AA', 'ZPP', 'EXP') => ('p', 'EA', 'ZPP', 'EXP')
('p', 'EA', 'ZPP', 'EXP') => ('-d', 'EA', 'ZPP', 'EXP')
('p', 'T', 'ZPP', 'EXP') => ('-d', 'T', 'ZPP', 'EXP')
('p', 'AA', 'co.RP', 'EXP') => ('-d', 'AA', 'co.RP', 'EXP')
('p', 'AA', 'co.RP', 'EXP') => ('p', 'T', 'co.RP', 'EXP')
('p', 'AA', 'co.RP', 'EXP') => ('p', 'EA', 'co.RP', 'EXP')
('p', 'AA', 'RP', 'EXP') => ('-d', 'AA', 'RP', 'EXP')
('p', 'AA', 'RP', 'EXP') => ('p', 'T', 'RP', 'EXP')
('p', 'AA', 'RP', 'EXP') => ('p', 'EA', 'RP', 'EXP')
('p', 'EA', 'RP', 'EXP') => ('-d', 'EA', 'RP', 'EXP')
('p', 'EA', 'co.RP', 'EXP') => ('-d', 'EA', 'co.RP', 'EXP')
('p', 'T', 'RP', 'EXP') => ('-d', 'T', 'RP', 'EXP')
('p', 'T', 'co.RP', 'EXP') => ('-d', 'T', 'co.RP', 'EXP')
('p', 'A', 'co.AWPP', 'EXP') => ('-d', 'A', 'co.AWPP', 'EXP')
('p', 'A', 'co.AWPP', 'EXP') => ('p', 'R', 'co.AWPP', 'EXP')
('p', 'A', 'co.AWPP', 'EXP') => ('p', 'AA', 'co.AWPP', 'EXP')
('p', 'A', 'AWPP', 'EXP') => ('-d', 'A', 'AWPP', 'EXP')
('p', 'A', 'AWPP', 'EXP') => ('p', 'R', 'AWPP', 'EXP')
('p', 'A', 'AWPP', 'EXP') => ('p', 'AA', 'AWPP', 'EXP')
('p', 'A', 'cocap.AWPP', 'EXP') => ('-d', 'A', 'cocap.AWPP', 'EXP')
('p', 'A', 'cocap.AWPP', 'EXP') => ('p', 'R', 'cocap.AWPP', 'EXP')
('p', 'A', 'cocap.AWPP', 'EXP') => ('p', 'AA', 'cocap.AWPP', 'EXP')
('p', 'E', 'co.Sigma_2P', 'EXP') => ('-d', 'E', 'co.Sigma_2P', 'EXP')
('p', 'E', 'Sigma_2P', 'EXP') => ('-d', 'E', 'Sigma_2P', 'EXP')
('p', 'E', 'cocap.Sigma_2P', 'EXP') => ('-d', 'E', 'cocap.Sigma_2P', 'EXP')
('d', 'A', 'EXP', 'co.Sigma_2P') => ('-p', 'A', 'EXP', 'co.Sigma_2P')
('d', 'A', 'EXP', 'Sigma_2P') => ('-p', 'A', 'EXP', 'Sigma_2P')
('p', 'E', 'PH', 'EXP') => ('-d', 'E', 'PH', 'EXP')
('p', 'E', 'Delta_3P', 'EXP') => ('-d', 'E', 'Delta_3P', 'EXP')
('d', 'A', 'EXP', 'PH') => ('-p', 'A', 'EXP', 'PH')
('p', 'A', 'cocap.UP', 'EXP') => ('-d', 'A', 'cocap.UP', 'EXP')
('p', 'A', 'cocap.UP', 'EXP') => ('p', 'R', 'cocap.UP', 'EXP')
('p', 'A', 'cocap.UP', 'EXP') => ('p', 'AA', 'cocap.UP', 'EXP')
('p', 'AA', 'cocap.UP', 'EXP') => ('-d', 'AA', 'cocap.UP', 'EXP')
('p', 'AA', 'cocap.UP', 'EXP') => ('p', 'T', 'cocap.UP', 'EXP')
('p', 'AA', 'cocap.UP', 'EXP') => ('p', 'EA', 'cocap.UP', 'EXP')
('p', 'EA', 'cocap.UP', 'EXP') => ('-d', 'EA', 'cocap.UP', 'EXP')
('p', 'T', 'cocap.UP', 'EXP') => ('-d', 'T', 'cocap.UP', 'EXP')
('p', 'R', 'cocap.UP', 'EXP') => ('-d', 'R', 'cocap.UP', 'EXP')
('p', 'A', 'BQP', 'EXP') => ('-d', 'A', 'BQP', 'EXP')
('p', 'A', 'BQP', 'EXP') => ('p', 'R', 'BQP', 'EXP')
('p', 'A', 'BQP', 'EXP') => ('p', 'AA', 'BQP', 'EXP')
('p', 'A', 'BPP', 'EXP') => ('-d', 'A', 'BPP', 'EXP')
('p', 'A', 'BPP', 'EXP') => ('p', 'R', 'BPP', 'EXP')
('p', 'A', 'BPP', 'EXP') => ('p', 'AA', 'BPP', 'EXP')
('p', 'AA', 'BPP', 'EXP') => ('-d', 'AA', 'BPP', 'EXP')
('p', 'AA', 'BPP', 'EXP') => ('p', 'T', 'BPP', 'EXP')
('p', 'AA', 'BPP', 'EXP') => ('p', 'EA', 'BPP', 'EXP')
('p', 'EA', 'BPP', 'EXP') => ('-d', 'EA', 'BPP', 'EXP')
('p', 'T', 'BPP', 'EXP') => ('-d', 'T', 'BPP', 'EXP')
('d', 'A', 'EXP', 'PostBPP') => ('-p', 'A', 'EXP', 'PostBPP')
('p', 'AA', 'BQP', 'EXP') => ('-d', 'AA', 'BQP', 'EXP')
('p', 'AA', 'BQP', 'EXP') => ('p', 'T', 'BQP', 'EXP')
('p', 'AA', 'BQP', 'EXP') => ('p', 'EA', 'BQP', 'EXP')
('p', 'EA', 'BQP', 'EXP') => ('-d', 'EA', 'BQP', 'EXP')
('p', 'T', 'BQP', 'EXP') => ('-d', 'T', 'BQP', 'EXP')
('p', 'R', 'BQP', 'EXP') => ('-d', 'R', 'BQP', 'EXP')
('p', 'A', 'SPP', 'EXP') => ('-d', 'A', 'SPP', 'EXP')
('p', 'A', 'SPP', 'EXP') => ('p', 'R', 'SPP', 'EXP')
('p', 'A', 'SPP', 'EXP') => ('p', 'AA', 'SPP', 'EXP')
('p', 'A', 'co.UP', 'EXP') => ('-d', 'A', 'co.UP', 'EXP')
('p', 'A', 'co.UP', 'EXP') => ('p', 'R', 'co.UP', 'EXP')
('p', 'A', 'co.UP', 'EXP') => ('p', 'AA', 'co.UP', 'EXP')
('p', 'A', 'UP', 'EXP') => ('-d', 'A', 'UP', 'EXP')
('p', 'A', 'UP', 'EXP') => ('p', 'R', 'UP', 'EXP')
('p', 'A', 'UP', 'EXP') => ('p', 'AA', 'UP', 'EXP')
('p', 'AA', 'UP', 'EXP') => ('-d', 'AA', 'UP', 'EXP')
('p', 'AA', 'UP', 'EXP') => ('p', 'T', 'UP', 'EXP')
('p', 'AA', 'UP', 'EXP') => ('p', 'EA', 'UP', 'EXP')
('p', 'AA', 'co.UP', 'EXP') => ('-d', 'AA', 'co.UP', 'EXP')
('p', 'AA', 'co.UP', 'EXP') => ('p', 'T', 'co.UP', 'EXP')
('p', 'AA', 'co.UP', 'EXP') => ('p', 'EA', 'co.UP', 'EXP')
('p', 'EA', 'co.UP', 'EXP') => ('-d', 'EA', 'co.UP', 'EXP')
('p', 'EA', 'UP', 'EXP') => ('-d', 'EA', 'UP', 'EXP')
('p', 'T', 'co.UP', 'EXP') => ('-d', 'T', 'co.UP', 'EXP')
('p', 'T', 'UP', 'EXP') => ('-d', 'T', 'UP', 'EXP')
('p', 'R', 'UP', 'EXP') => ('-d', 'R', 'UP', 'EXP')
('p', 'R', 'co.UP', 'EXP') => ('-d', 'R', 'co.UP', 'EXP')
('p', 'AA', 'SPP', 'EXP') => ('-d', 'AA', 'SPP', 'EXP')
('p', 'AA', 'SPP', 'EXP') => ('p', 'T', 'SPP', 'EXP')
('p', 'AA', 'SPP', 'EXP') => ('p', 'EA', 'SPP', 'EXP')
('p', 'EA', 'SPP', 'EXP') => ('-d', 'EA', 'SPP', 'EXP')
('p', 'T', 'SPP', 'EXP') => ('-d', 'T', 'SPP', 'EXP')
('p', 'R', 'SPP', 'EXP') => ('-d', 'R', 'SPP', 'EXP')
('d', 'R', 'EXP', 'RP') => ('-p', 'R', 'EXP', 'RP')
('d', 'R', 'EXP', 'co.RP') => ('-p', 'R', 'EXP', 'co.RP')
('p', 'R', 'co.Sigma_2P', 'EXP') => ('-d', 'R', 'co.Sigma_2P', 'EXP')
('p', 'R', 'Sigma_2P', 'EXP') => ('-d', 'R', 'Sigma_2P', 'EXP')
('p', 'R', 'cocap.Sigma_2P', 'EXP') => ('-d', 'R', 'cocap.Sigma_2P', 'EXP')
('p', 'R', 'Delta_2P', 'EXP') => ('-d', 'R', 'Delta_2P', 'EXP')
('p', 'R', 'S_2P', 'EXP') => ('-d', 'R', 'S_2P', 'EXP')
('d', 'R', 'EXP', 'SZK') => ('-p', 'R', 'EXP', 'SZK')
('d', 'R', 'EXP', 'NP') => ('-p', 'R', 'EXP', 'NP')
('d', 'R', 'EXP', 'co.NP') => ('-p', 'R', 'EXP', 'co.NP')
('d', 'R', 'EXP', 'co.Sigma_2P') => ('-p', 'R', 'EXP', 'co.Sigma_2P')
('d', 'R', 'EXP', 'Sigma_2P') => ('-p', 'R', 'EXP', 'Sigma_2P')
('p', 'R', 'PH', 'EXP') => ('-d', 'R', 'PH', 'EXP')
('p', 'R', 'Delta_3P', 'EXP') => ('-d', 'R', 'Delta_3P', 'EXP')
('d', 'R', 'EXP', 'Delta_3P') => ('-p', 'R', 'EXP', 'Delta_3P')
('p', 'AA', 'cocap.AWPP', 'EXP') => ('-d', 'AA', 'cocap.AWPP', 'EXP')
('p', 'AA', 'cocap.AWPP', 'EXP') => ('p', 'T', 'cocap.AWPP', 'EXP')
('p', 'AA', 'cocap.AWPP', 'EXP') => ('p', 'EA', 'cocap.AWPP', 'EXP')
('p', 'EA', 'cocap.AWPP', 'EXP') => ('-d', 'EA', 'cocap.AWPP', 'EXP')
('p', 'T', 'cocap.AWPP', 'EXP') => ('-d', 'T', 'cocap.AWPP', 'EXP')
('p', 'R', 'cocap.AWPP', 'EXP') => ('-d', 'R', 'cocap.AWPP', 'EXP')
('p', 'AA', 'AWPP', 'EXP') => ('-d', 'AA', 'AWPP', 'EXP')
('p', 'AA', 'AWPP', 'EXP') => ('p', 'T', 'AWPP', 'EXP')
('p', 'AA', 'AWPP', 'EXP') => ('p', 'EA', 'AWPP', 'EXP')
('p', 'AA', 'co.AWPP', 'EXP') => ('-d', 'AA', 'co.AWPP', 'EXP')
('p', 'AA', 'co.AWPP', 'EXP') => ('p', 'T', 'co.AWPP', 'EXP')
('p', 'AA', 'co.AWPP', 'EXP') => ('p', 'EA', 'co.AWPP', 'EXP')
('p', 'EA', 'co.AWPP', 'EXP') => ('-d', 'EA', 'co.AWPP', 'EXP')
('p', 'EA', 'AWPP', 'EXP') => ('-d', 'EA', 'AWPP', 'EXP')
('p', 'T', 'co.AWPP', 'EXP') => ('-d', 'T', 'co.AWPP', 'EXP')
('p', 'T', 'AWPP', 'EXP') => ('-d', 'T', 'AWPP', 'EXP')
('p', 'R', 'AWPP', 'EXP') => ('-d', 'R', 'AWPP', 'EXP')
('p', 'R', 'co.AWPP', 'EXP') => ('-d', 'R', 'co.AWPP', 'EXP')
('p', 'E', 'P^Sharp-P', 'EXP') => ('-d', 'E', 'P^Sharp-P', 'EXP')
('p', 'A', 'SZK', 'EXP') => ('-d', 'A', 'SZK', 'EXP')
('p', 'A', 'SZK', 'EXP') => ('p', 'AA', 'SZK', 'EXP')
('p', 'A', 'cocap.NISZK', 'EXP') => ('-d', 'A', 'cocap.NISZK', 'EXP')
('p', 'A', 'cocap.NISZK', 'EXP') => ('p', 'AA', 'cocap.NISZK', 'EXP')
('p', 'AA', 'cocap.NISZK', 'EXP') => ('-d', 'AA', 'cocap.NISZK', 'EXP')
('p', 'AA', 'cocap.NISZK', 'EXP') => ('p', 'T', 'cocap.NISZK', 'EXP')
('p', 'AA', 'cocap.NISZK', 'EXP') => ('p', 'EA', 'cocap.NISZK', 'EXP')
('p', 'EA', 'cocap.NISZK', 'EXP') => ('-d', 'EA', 'cocap.NISZK', 'EXP')
('p', 'T', 'cocap.NISZK', 'EXP') => ('-d', 'T', 'cocap.NISZK', 'EXP')
('p', 'A', 'co.NISZK', 'EXP') => ('-d', 'A', 'co.NISZK', 'EXP')
('p', 'A', 'co.NISZK', 'EXP') => ('p', 'AA', 'co.NISZK', 'EXP')
('p', 'A', 'NISZK', 'EXP') => ('-d', 'A', 'NISZK', 'EXP')
('p', 'A', 'NISZK', 'EXP') => ('p', 'AA', 'NISZK', 'EXP')
('p', 'AA', 'NISZK', 'EXP') => ('-d', 'AA', 'NISZK', 'EXP')
('p', 'AA', 'NISZK', 'EXP') => ('p', 'T', 'NISZK', 'EXP')
('p', 'AA', 'NISZK', 'EXP') => ('p', 'EA', 'NISZK', 'EXP')
('p', 'AA', 'co.NISZK', 'EXP') => ('-d', 'AA', 'co.NISZK', 'EXP')
('p', 'AA', 'co.NISZK', 'EXP') => ('p', 'T', 'co.NISZK', 'EXP')
('p', 'AA', 'co.NISZK', 'EXP') => ('p', 'EA', 'co.NISZK', 'EXP')
('p', 'EA', 'co.NISZK', 'EXP') => ('-d', 'EA', 'co.NISZK', 'EXP')
('p', 'EA', 'NISZK', 'EXP') => ('-d', 'EA', 'NISZK', 'EXP')
('p', 'T', 'co.NISZK', 'EXP') => ('-d', 'T', 'co.NISZK', 'EXP')
('p', 'T', 'NISZK', 'EXP') => ('-d', 'T', 'NISZK', 'EXP')
('p', 'AA', 'SZK', 'EXP') => ('-d', 'AA', 'SZK', 'EXP')
('p', 'AA', 'SZK', 'EXP') => ('p', 'T', 'SZK', 'EXP')
('p', 'AA', 'SZK', 'EXP') => ('p', 'EA', 'SZK', 'EXP')
('p', 'EA', 'SZK', 'EXP') => ('-d', 'EA', 'SZK', 'EXP')
('p', 'T', 'SZK', 'EXP') => ('-d', 'T', 'SZK', 'EXP')
('p', 'A', 'QRG(2)', 'EXP') => ('-d', 'A', 'QRG(2)', 'EXP')
('p', 'A', 'QRG(2)', 'EXP') => ('p', 'R', 'QRG(2)', 'EXP')
('p', 'A', 'QRG(2)', 'EXP') => ('p', 'AA', 'QRG(2)', 'EXP')
('p', 'AA', 'QRG(2)', 'EXP') => ('-d', 'AA', 'QRG(2)', 'EXP')
('p', 'AA', 'QRG(2)', 'EXP') => ('p', 'T', 'QRG(2)', 'EXP')
('p', 'AA', 'QRG(2)', 'EXP') => ('p', 'EA', 'QRG(2)', 'EXP')
('p', 'EA', 'QRG(2)', 'EXP') => ('-d', 'EA', 'QRG(2)', 'EXP')
('p', 'T', 'QRG(2)', 'EXP') => ('-d', 'T', 'QRG(2)', 'EXP')
('p', 'R', 'QRG(2)', 'EXP') => ('-d', 'R', 'QRG(2)', 'EXP')
('p', 'A', 'NP', 'EXP') => ('-d', 'A', 'NP', 'EXP')
('p', 'A', 'NP', 'EXP') => ('p', 'AA', 'NP', 'EXP')
('p', 'A', 'co.NP', 'EXP') => ('-d', 'A', 'co.NP', 'EXP')
('p', 'A', 'co.NP', 'EXP') => ('p', 'AA', 'co.NP', 'EXP')
('p', 'A', 'cocap.NP', 'EXP') => ('-d', 'A', 'cocap.NP', 'EXP')
('p', 'A', 'cocap.NP', 'EXP') => ('p', 'AA', 'cocap.NP', 'EXP')
('p', 'AA', 'cocap.NP', 'EXP') => ('-d', 'AA', 'cocap.NP', 'EXP')
('p', 'AA', 'cocap.NP', 'EXP') => ('p', 'T', 'cocap.NP', 'EXP')
('p', 'AA', 'cocap.NP', 'EXP') => ('p', 'EA', 'cocap.NP', 'EXP')
('p', 'EA', 'cocap.NP', 'EXP') => ('-d', 'EA', 'cocap.NP', 'EXP')
('p', 'T', 'cocap.NP', 'EXP') => ('-d', 'T', 'cocap.NP', 'EXP')
('d', 'A', 'EXP', 'BQP/mpoly') => ('-p', 'A', 'EXP', 'BQP/mpoly')
('d', 'A', 'EXP', 'BQP/qpoly') => ('-p', 'A', 'EXP', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'EXP') => ('-d', 'AA', 'co.NP', 'EXP')
('p', 'AA', 'co.NP', 'EXP') => ('p', 'T', 'co.NP', 'EXP')
('p', 'AA', 'co.NP', 'EXP') => ('p', 'EA', 'co.NP', 'EXP')
('p', 'AA', 'NP', 'EXP') => ('-d', 'AA', 'NP', 'EXP')
('p', 'AA', 'NP', 'EXP') => ('p', 'T', 'NP', 'EXP')
('p', 'AA', 'NP', 'EXP') => ('p', 'EA', 'NP', 'EXP')
('p', 'EA', 'NP', 'EXP') => ('-d', 'EA', 'NP', 'EXP')
('p', 'EA', 'co.NP', 'EXP') => ('-d', 'EA', 'co.NP', 'EXP')
('p', 'T', 'NP', 'EXP') => ('-d', 'T', 'NP', 'EXP')
('p', 'T', 'co.NP', 'EXP') => ('-d', 'T', 'co.NP', 'EXP')
('p', 'A', 'Delta_2P', 'EXP') => ('-d', 'A', 'Delta_2P', 'EXP')
('p', 'A', 'Delta_2P', 'EXP') => ('p', 'AA', 'Delta_2P', 'EXP')
('p', 'AA', 'Delta_2P', 'EXP') => ('-d', 'AA', 'Delta_2P', 'EXP')
('p', 'AA', 'Delta_2P', 'EXP') => ('p', 'T', 'Delta_2P', 'EXP')
('p', 'AA', 'Delta_2P', 'EXP') => ('p', 'EA', 'Delta_2P', 'EXP')
('p', 'EA', 'Delta_2P', 'EXP') => ('-d', 'EA', 'Delta_2P', 'EXP')
('p', 'T', 'Delta_2P', 'EXP') => ('-d', 'T', 'Delta_2P', 'EXP')
('p', 'A', 'co.MA', 'EXP') => ('-d', 'A', 'co.MA', 'EXP')
('p', 'A', 'co.MA', 'EXP') => ('p', 'AA', 'co.MA', 'EXP')
('p', 'A', 'MA', 'EXP') => ('-d', 'A', 'MA', 'EXP')
('p', 'A', 'MA', 'EXP') => ('p', 'AA', 'MA', 'EXP')
('p', 'A', 'cocap.MA', 'EXP') => ('-d', 'A', 'cocap.MA', 'EXP')
('p', 'A', 'cocap.MA', 'EXP') => ('p', 'AA', 'cocap.MA', 'EXP')
('p', 'AA', 'cocap.MA', 'EXP') => ('-d', 'AA', 'cocap.MA', 'EXP')
('p', 'AA', 'cocap.MA', 'EXP') => ('p', 'T', 'cocap.MA', 'EXP')
('p', 'AA', 'cocap.MA', 'EXP') => ('p', 'EA', 'cocap.MA', 'EXP')
('p', 'EA', 'cocap.MA', 'EXP') => ('-d', 'EA', 'cocap.MA', 'EXP')
('p', 'T', 'cocap.MA', 'EXP') => ('-d', 'T', 'cocap.MA', 'EXP')
('p', 'AA', 'MA', 'EXP') => ('-d', 'AA', 'MA', 'EXP')
('p', 'AA', 'MA', 'EXP') => ('p', 'T', 'MA', 'EXP')
('p', 'AA', 'MA', 'EXP') => ('p', 'EA', 'MA', 'EXP')
('p', 'AA', 'co.MA', 'EXP') => ('-d', 'AA', 'co.MA', 'EXP')
('p', 'AA', 'co.MA', 'EXP') => ('p', 'T', 'co.MA', 'EXP')
('p', 'AA', 'co.MA', 'EXP') => ('p', 'EA', 'co.MA', 'EXP')
('p', 'EA', 'co.MA', 'EXP') => ('-d', 'EA', 'co.MA', 'EXP')
('p', 'EA', 'MA', 'EXP') => ('-d', 'EA', 'MA', 'EXP')
('p', 'T', 'co.MA', 'EXP') => ('-d', 'T', 'co.MA', 'EXP')
('p', 'T', 'MA', 'EXP') => ('-d', 'T', 'MA', 'EXP')
('p', 'A', 'S_2P', 'EXP') => ('-d', 'A', 'S_2P', 'EXP')
('p', 'A', 'S_2P', 'EXP') => ('p', 'AA', 'S_2P', 'EXP')
('p', 'AA', 'S_2P', 'EXP') => ('-d', 'AA', 'S_2P', 'EXP')
('p', 'AA', 'S_2P', 'EXP') => ('p', 'T', 'S_2P', 'EXP')
('p', 'AA', 'S_2P', 'EXP') => ('p', 'EA', 'S_2P', 'EXP')
('p', 'EA', 'S_2P', 'EXP') => ('-d', 'EA', 'S_2P', 'EXP')
('p', 'T', 'S_2P', 'EXP') => ('-d', 'T', 'S_2P', 'EXP')
('p', 'A', 'RG(1)', 'EXP') => ('-d', 'A', 'RG(1)', 'EXP')
('p', 'A', 'RG(1)', 'EXP') => ('p', 'R', 'RG(1)', 'EXP')
('p', 'A', 'RG(1)', 'EXP') => ('p', 'AA', 'RG(1)', 'EXP')
('p', 'AA', 'RG(1)', 'EXP') => ('-d', 'AA', 'RG(1)', 'EXP')
('p', 'AA', 'RG(1)', 'EXP') => ('p', 'T', 'RG(1)', 'EXP')
('p', 'AA', 'RG(1)', 'EXP') => ('p', 'EA', 'RG(1)', 'EXP')
('p', 'EA', 'RG(1)', 'EXP') => ('-d', 'EA', 'RG(1)', 'EXP')
('p', 'T', 'RG(1)', 'EXP') => ('-d', 'T', 'RG(1)', 'EXP')
('p', 'R', 'RG(1)', 'EXP') => ('-d', 'R', 'RG(1)', 'EXP')
('p', 'A', 'SBP', 'EXP') => ('-d', 'A', 'SBP', 'EXP')
('p', 'A', 'SBP', 'EXP') => ('p', 'AA', 'SBP', 'EXP')
('p', 'A', 'co.SBP', 'EXP') => ('-d', 'A', 'co.SBP', 'EXP')
('p', 'A', 'co.SBP', 'EXP') => ('p', 'AA', 'co.SBP', 'EXP')
('p', 'A', 'cocap.SBP', 'EXP') => ('-d', 'A', 'cocap.SBP', 'EXP')
('p', 'A', 'cocap.SBP', 'EXP') => ('p', 'AA', 'cocap.SBP', 'EXP')
('p', 'AA', 'cocap.SBP', 'EXP') => ('-d', 'AA', 'cocap.SBP', 'EXP')
('p', 'AA', 'cocap.SBP', 'EXP') => ('p', 'T', 'cocap.SBP', 'EXP')
('p', 'AA', 'cocap.SBP', 'EXP') => ('p', 'EA', 'cocap.SBP', 'EXP')
('p', 'EA', 'cocap.SBP', 'EXP') => ('-d', 'EA', 'cocap.SBP', 'EXP')
('p', 'T', 'cocap.SBP', 'EXP') => ('-d', 'T', 'cocap.SBP', 'EXP')
('p', 'AA', 'co.SBP', 'EXP') => ('-d', 'AA', 'co.SBP', 'EXP')
('p', 'AA', 'co.SBP', 'EXP') => ('p', 'T', 'co.SBP', 'EXP')
('p', 'AA', 'co.SBP', 'EXP') => ('p', 'EA', 'co.SBP', 'EXP')
('p', 'AA', 'SBP', 'EXP') => ('-d', 'AA', 'SBP', 'EXP')
('p', 'AA', 'SBP', 'EXP') => ('p', 'T', 'SBP', 'EXP')
('p', 'AA', 'SBP', 'EXP') => ('p', 'EA', 'SBP', 'EXP')
('p', 'EA', 'SBP', 'EXP') => ('-d', 'EA', 'SBP', 'EXP')
('p', 'EA', 'co.SBP', 'EXP') => ('-d', 'EA', 'co.SBP', 'EXP')
('p', 'T', 'SBP', 'EXP') => ('-d', 'T', 'SBP', 'EXP')
('p', 'T', 'co.SBP', 'EXP') => ('-d', 'T', 'co.SBP', 'EXP')
('p', 'A', 'PSPACE', 'EXP') => ('-d', 'A', 'PSPACE', 'EXP')
('p', 'A', 'PSPACE', 'EXP') => ('p', 'R', 'PSPACE', 'EXP')
('p', 'A', 'PSPACE', 'EXP') => ('p', 'AA', 'PSPACE', 'EXP')
('p', 'A', 'AM', 'EXP') => ('-d', 'A', 'AM', 'EXP')
('p', 'A', 'AM', 'EXP') => ('p', 'AA', 'AM', 'EXP')
('p', 'A', 'co.AM', 'EXP') => ('-d', 'A', 'co.AM', 'EXP')
('p', 'A', 'co.AM', 'EXP') => ('p', 'AA', 'co.AM', 'EXP')
('p', 'A', 'cocap.AM', 'EXP') => ('-d', 'A', 'cocap.AM', 'EXP')
('p', 'A', 'cocap.AM', 'EXP') => ('p', 'AA', 'cocap.AM', 'EXP')
('p', 'AA', 'cocap.AM', 'EXP') => ('-d', 'AA', 'cocap.AM', 'EXP')
('p', 'AA', 'cocap.AM', 'EXP') => ('p', 'T', 'cocap.AM', 'EXP')
('p', 'AA', 'cocap.AM', 'EXP') => ('p', 'EA', 'cocap.AM', 'EXP')
('p', 'EA', 'cocap.AM', 'EXP') => ('-d', 'EA', 'cocap.AM', 'EXP')
('p', 'T', 'cocap.AM', 'EXP') => ('-d', 'T', 'cocap.AM', 'EXP')
('p', 'AA', 'co.AM', 'EXP') => ('-d', 'AA', 'co.AM', 'EXP')
('p', 'AA', 'co.AM', 'EXP') => ('p', 'T', 'co.AM', 'EXP')
('p', 'AA', 'co.AM', 'EXP') => ('p', 'EA', 'co.AM', 'EXP')
('p', 'AA', 'AM', 'EXP') => ('-d', 'AA', 'AM', 'EXP')
('p', 'AA', 'AM', 'EXP') => ('p', 'T', 'AM', 'EXP')
('p', 'AA', 'AM', 'EXP') => ('p', 'EA', 'AM', 'EXP')
('p', 'EA', 'AM', 'EXP') => ('-d', 'EA', 'AM', 'EXP')
('p', 'EA', 'co.AM', 'EXP') => ('-d', 'EA', 'co.AM', 'EXP')
('p', 'T', 'AM', 'EXP') => ('-d', 'T', 'AM', 'EXP')
('p', 'T', 'co.AM', 'EXP') => ('-d', 'T', 'co.AM', 'EXP')
('p', 'A', 'PP', 'EXP') => ('-d', 'A', 'PP', 'EXP')
('p', 'A', 'PP', 'EXP') => ('p', 'R', 'PP', 'EXP')
('p', 'A', 'PP', 'EXP') => ('p', 'AA', 'PP', 'EXP')
('p', 'AA', 'PP', 'EXP') => ('-d', 'AA', 'PP', 'EXP')
('p', 'AA', 'PP', 'EXP') => ('p', 'T', 'PP', 'EXP')
('p', 'AA', 'PP', 'EXP') => ('p', 'EA', 'PP', 'EXP')
('p', 'EA', 'PP', 'EXP') => ('-d', 'EA', 'PP', 'EXP')
('p', 'T', 'PP', 'EXP') => ('-d', 'T', 'PP', 'EXP')
('p', 'R', 'PP', 'EXP') => ('-d', 'R', 'PP', 'EXP')
('p', 'A', 'IP', 'EXP') => ('-d', 'A', 'IP', 'EXP')
('p', 'A', 'IP', 'EXP') => ('p', 'R', 'IP', 'EXP')
('p', 'A', 'IP', 'EXP') => ('p', 'AA', 'IP', 'EXP')
('p', 'A', 'co.IP', 'EXP') => ('-d', 'A', 'co.IP', 'EXP')
('p', 'A', 'co.IP', 'EXP') => ('p', 'R', 'co.IP', 'EXP')
('p', 'A', 'co.IP', 'EXP') => ('p', 'AA', 'co.IP', 'EXP')
('p', 'A', 'cocap.IP', 'EXP') => ('-d', 'A', 'cocap.IP', 'EXP')
('p', 'A', 'cocap.IP', 'EXP') => ('p', 'R', 'cocap.IP', 'EXP')
('p', 'A', 'cocap.IP', 'EXP') => ('p', 'AA', 'cocap.IP', 'EXP')
('p', 'AA', 'cocap.IP', 'EXP') => ('-d', 'AA', 'cocap.IP', 'EXP')
('p', 'AA', 'cocap.IP', 'EXP') => ('p', 'T', 'cocap.IP', 'EXP')
('p', 'AA', 'cocap.IP', 'EXP') => ('p', 'EA', 'cocap.IP', 'EXP')
('p', 'EA', 'cocap.IP', 'EXP') => ('-d', 'EA', 'cocap.IP', 'EXP')
('p', 'T', 'cocap.IP', 'EXP') => ('-d', 'T', 'cocap.IP', 'EXP')
('p', 'R', 'cocap.IP', 'EXP') => ('-d', 'R', 'cocap.IP', 'EXP')
('p', 'AA', 'co.IP', 'EXP') => ('-d', 'AA', 'co.IP', 'EXP')
('p', 'AA', 'co.IP', 'EXP') => ('p', 'T', 'co.IP', 'EXP')
('p', 'AA', 'co.IP', 'EXP') => ('p', 'EA', 'co.IP', 'EXP')
('p', 'AA', 'IP', 'EXP') => ('-d', 'AA', 'IP', 'EXP')
('p', 'AA', 'IP', 'EXP') => ('p', 'T', 'IP', 'EXP')
('p', 'AA', 'IP', 'EXP') => ('p', 'EA', 'IP', 'EXP')
('p', 'EA', 'IP', 'EXP') => ('-d', 'EA', 'IP', 'EXP')
('p', 'EA', 'co.IP', 'EXP') => ('-d', 'EA', 'co.IP', 'EXP')
('p', 'T', 'IP', 'EXP') => ('-d', 'T', 'IP', 'EXP')
('p', 'T', 'co.IP', 'EXP') => ('-d', 'T', 'co.IP', 'EXP')
('p', 'R', 'co.IP', 'EXP') => ('-d', 'R', 'co.IP', 'EXP')
('p', 'R', 'IP', 'EXP') => ('-d', 'R', 'IP', 'EXP')
('p', 'A', 'QSZK', 'EXP') => ('-d', 'A', 'QSZK', 'EXP')
('p', 'A', 'QSZK', 'EXP') => ('p', 'R', 'QSZK', 'EXP')
('p', 'A', 'QSZK', 'EXP') => ('p', 'AA', 'QSZK', 'EXP')
('p', 'AA', 'QSZK', 'EXP') => ('-d', 'AA', 'QSZK', 'EXP')
('p', 'AA', 'QSZK', 'EXP') => ('p', 'T', 'QSZK', 'EXP')
('p', 'AA', 'QSZK', 'EXP') => ('p', 'EA', 'QSZK', 'EXP')
('p', 'EA', 'QSZK', 'EXP') => ('-d', 'EA', 'QSZK', 'EXP')
('p', 'T', 'QSZK', 'EXP') => ('-d', 'T', 'QSZK', 'EXP')
('p', 'R', 'QSZK', 'EXP') => ('-d', 'R', 'QSZK', 'EXP')
('p', 'AA', 'PSPACE', 'EXP') => ('-d', 'AA', 'PSPACE', 'EXP')
('p', 'AA', 'PSPACE', 'EXP') => ('p', 'T', 'PSPACE', 'EXP')
('p', 'AA', 'PSPACE', 'EXP') => ('p', 'EA', 'PSPACE', 'EXP')
('p', 'EA', 'PSPACE', 'EXP') => ('-d', 'EA', 'PSPACE', 'EXP')
('p', 'T', 'PSPACE', 'EXP') => ('-d', 'T', 'PSPACE', 'EXP')
('p', 'R', 'PSPACE', 'EXP') => ('-d', 'R', 'PSPACE', 'EXP')
('d', 'R', 'EXP', 'IP') => ('-p', 'R', 'EXP', 'IP')
('d', 'R', 'EXP', 'co.IP') => ('-p', 'R', 'EXP', 'co.IP')
('p', 'A', 'RG(2)', 'EXP') => ('-d', 'A', 'RG(2)', 'EXP')
('p', 'A', 'RG(2)', 'EXP') => ('p', 'R', 'RG(2)', 'EXP')
('p', 'A', 'RG(2)', 'EXP') => ('p', 'AA', 'RG(2)', 'EXP')
('p', 'AA', 'RG(2)', 'EXP') => ('-d', 'AA', 'RG(2)', 'EXP')
('p', 'AA', 'RG(2)', 'EXP') => ('p', 'T', 'RG(2)', 'EXP')
('p', 'AA', 'RG(2)', 'EXP') => ('p', 'EA', 'RG(2)', 'EXP')
('p', 'EA', 'RG(2)', 'EXP') => ('-d', 'EA', 'RG(2)', 'EXP')
('p', 'T', 'RG(2)', 'EXP') => ('-d', 'T', 'RG(2)', 'EXP')
('p', 'R', 'RG(2)', 'EXP') => ('-d', 'R', 'RG(2)', 'EXP')
('p', 'A', 'RG(3)', 'EXP') => ('-d', 'A', 'RG(3)', 'EXP')
('p', 'A', 'RG(3)', 'EXP') => ('p', 'R', 'RG(3)', 'EXP')
('p', 'A', 'RG(3)', 'EXP') => ('p', 'AA', 'RG(3)', 'EXP')
('p', 'AA', 'RG(3)', 'EXP') => ('-d', 'AA', 'RG(3)', 'EXP')
('p', 'AA', 'RG(3)', 'EXP') => ('p', 'T', 'RG(3)', 'EXP')
('p', 'AA', 'RG(3)', 'EXP') => ('p', 'EA', 'RG(3)', 'EXP')
('p', 'EA', 'RG(3)', 'EXP') => ('-d', 'EA', 'RG(3)', 'EXP')
('p', 'T', 'RG(3)', 'EXP') => ('-d', 'T', 'RG(3)', 'EXP')
('p', 'R', 'RG(3)', 'EXP') => ('-d', 'R', 'RG(3)', 'EXP')
('p', 'AA', 'EXP_plo', 'EXP') => ('-d', 'AA', 'EXP_plo', 'EXP')
('p', 'AA', 'EXP_plo', 'EXP') => ('p', 'T', 'EXP_plo', 'EXP')
('p', 'AA', 'EXP_plo', 'EXP') => ('p', 'EA', 'EXP_plo', 'EXP')
('p', 'EA', 'EXP_plo', 'EXP') => ('-d', 'EA', 'EXP_plo', 'EXP')
('p', 'T', 'EXP_plo', 'EXP') => ('-d', 'T', 'EXP_plo', 'EXP')
('p', 'R', 'EXP_plo', 'EXP') => ('-d', 'R', 'EXP_plo', 'EXP')
('d', 'A', 'NP/poly', '(NP-cap-coNP)/poly') => ('-p', 'A', 'NP/poly', '(NP-cap-coNP)/poly')
('d', 'A', 'co.NP/poly', '(NP-cap-coNP)/poly') => ('-p', 'A', 'co.NP/poly', '(NP-cap-coNP)/poly')
('d', 'A', 'co.AM', '(NP-cap-coNP)/poly') => ('-p', 'A', 'co.AM', '(NP-cap-coNP)/poly')
('d', 'A', 'AM', '(NP-cap-coNP)/poly') => ('-p', 'A', 'AM', '(NP-cap-coNP)/poly')
('p', 'A', 'co.AM', 'Sigma_2P') => ('-d', 'A', 'co.AM', 'Sigma_2P')
('p', 'A', 'co.AM', 'Sigma_2P') => ('p', 'AA', 'co.AM', 'Sigma_2P')
('p', 'A', 'AM', 'co.Sigma_2P') => ('-d', 'A', 'AM', 'co.Sigma_2P')
('p', 'A', 'AM', 'co.Sigma_2P') => ('p', 'AA', 'AM', 'co.Sigma_2P')
('p', 'A', 'cocap.AM', 'cocap.Sigma_2P') => ('-d', 'A', 'cocap.AM', 'cocap.Sigma_2P')
('p', 'A', 'cocap.AM', 'cocap.Sigma_2P') => ('p', 'AA', 'cocap.AM', 'cocap.Sigma_2P')
('d', 'A', 'cocap.QMA/qpoly', 'cocap.AM') => ('-p', 'A', 'cocap.QMA/qpoly', 'cocap.AM')
('d', 'A', 'co.QMA/qpoly', 'cocap.AM') => ('-p', 'A', 'co.QMA/qpoly', 'cocap.AM')
('d', 'A', 'QMA/qpoly', 'cocap.AM') => ('-p', 'A', 'QMA/qpoly', 'cocap.AM')
('d', 'A', 'co.QMA/qpoly', 'AM') => ('-p', 'A', 'co.QMA/qpoly', 'AM')
('d', 'A', 'QMA/qpoly', 'co.AM') => ('-p', 'A', 'QMA/qpoly', 'co.AM')
('d', 'A', 'co.QMA/qpoly', 'co.AM') => ('-p', 'A', 'co.QMA/qpoly', 'co.AM')
('d', 'A', 'QMA/qpoly', 'AM') => ('-p', 'A', 'QMA/qpoly', 'AM')
('d', 'A', 'cocap.QMA/qpoly', 'AM') => ('-p', 'A', 'cocap.QMA/qpoly', 'AM')
('d', 'A', 'cocap.QMA/qpoly', 'co.AM') => ('-p', 'A', 'cocap.QMA/qpoly', 'co.AM')
('d', 'A', 'co.QCMA/qpoly', 'cocap.AM') => ('-p', 'A', 'co.QCMA/qpoly', 'cocap.AM')
('d', 'A', 'QCMA/qpoly', 'cocap.AM') => ('-p', 'A', 'QCMA/qpoly', 'cocap.AM')
('-d', 'A', 'cocap.AM', 'co.Sigma_2P') => ('-d', 'AA', 'cocap.AM', 'co.Sigma_2P')
('-d', 'A', 'cocap.AM', 'Sigma_2P') => ('-d', 'AA', 'cocap.AM', 'Sigma_2P')
('-d', 'A', 'cocap.AM', 'cocap.Sigma_2P') => ('-d', 'AA', 'cocap.AM', 'cocap.Sigma_2P')
('-d', 'A', 'cocap.AM', 'MP') => ('-d', 'AA', 'cocap.AM', 'MP')
('-d', 'A', 'cocap.AM', 'co.MP') => ('-d', 'AA', 'cocap.AM', 'co.MP')
('-d', 'A', 'cocap.AM', 'cocap.MP') => ('-d', 'AA', 'cocap.AM', 'cocap.MP')
('-d', 'A', 'SZK', 'cocap.MP') => ('-d', 'AA', 'SZK', 'cocap.MP')
('-d', 'A', 'SZK', 'MP') => ('-d', 'AA', 'SZK', 'MP')
('-d', 'A', 'SZK', 'co.MP') => ('-d', 'AA', 'SZK', 'co.MP')
('-d', 'A', 'cocap.NISZK', 'co.MP') => ('-d', 'AA', 'cocap.NISZK', 'co.MP')
('-d', 'A', 'cocap.NISZK', 'MP') => ('-d', 'AA', 'cocap.NISZK', 'MP')
('-d', 'A', 'cocap.NISZK', 'cocap.MP') => ('-d', 'AA', 'cocap.NISZK', 'cocap.MP')
('-d', 'A', 'BPP', 'cocap.MP') => ('-d', 'AA', 'BPP', 'cocap.MP')
('-d', 'A', 'BPP', 'MP') => ('-d', 'AA', 'BPP', 'MP')
('-d', 'A', 'BPP', 'co.MP') => ('-d', 'AA', 'BPP', 'co.MP')
('-d', 'AA', 'BPP', 'co.MP') => ('-d', 'T', 'BPP', 'co.MP')
('-d', 'AA', 'BPP', 'co.MP') => ('-d', 'EA', 'BPP', 'co.MP')
('-d', 'AA', 'BPP', 'MP') => ('-d', 'T', 'BPP', 'MP')
('-d', 'AA', 'BPP', 'MP') => ('-d', 'EA', 'BPP', 'MP')
('-d', 'AA', 'BPP', 'cocap.MP') => ('-d', 'T', 'BPP', 'cocap.MP')
('-d', 'AA', 'BPP', 'cocap.MP') => ('-d', 'EA', 'BPP', 'cocap.MP')
('-d', 'AA', 'cocap.NISZK', 'cocap.MP') => ('-d', 'T', 'cocap.NISZK', 'cocap.MP')
('-d', 'AA', 'cocap.NISZK', 'cocap.MP') => ('-d', 'EA', 'cocap.NISZK', 'cocap.MP')
('-d', 'AA', 'cocap.NISZK', 'MP') => ('-d', 'T', 'cocap.NISZK', 'MP')
('-d', 'AA', 'cocap.NISZK', 'MP') => ('-d', 'EA', 'cocap.NISZK', 'MP')
('-d', 'AA', 'cocap.NISZK', 'co.MP') => ('-d', 'T', 'cocap.NISZK', 'co.MP')
('-d', 'AA', 'cocap.NISZK', 'co.MP') => ('-d', 'EA', 'cocap.NISZK', 'co.MP')
('-d', 'A', 'co.NISZK', 'co.MP') => ('-d', 'AA', 'co.NISZK', 'co.MP')
('-d', 'A', 'NISZK', 'MP') => ('-d', 'AA', 'NISZK', 'MP')
('-d', 'AA', 'NISZK', 'MP') => ('-d', 'T', 'NISZK', 'MP')
('-d', 'AA', 'NISZK', 'MP') => ('-d', 'EA', 'NISZK', 'MP')
('-d', 'AA', 'co.NISZK', 'co.MP') => ('-d', 'T', 'co.NISZK', 'co.MP')
('-d', 'AA', 'co.NISZK', 'co.MP') => ('-d', 'EA', 'co.NISZK', 'co.MP')
('-d', 'A', 'NISZK', 'co.MP') => ('-d', 'AA', 'NISZK', 'co.MP')
('-d', 'A', 'co.NISZK', 'MP') => ('-d', 'AA', 'co.NISZK', 'MP')
('-d', 'AA', 'co.NISZK', 'MP') => ('-d', 'T', 'co.NISZK', 'MP')
('-d', 'AA', 'co.NISZK', 'MP') => ('-d', 'EA', 'co.NISZK', 'MP')
('-d', 'AA', 'NISZK', 'co.MP') => ('-d', 'T', 'NISZK', 'co.MP')
('-d', 'AA', 'NISZK', 'co.MP') => ('-d', 'EA', 'NISZK', 'co.MP')
('-d', 'AA', 'SZK', 'co.MP') => ('-d', 'T', 'SZK', 'co.MP')
('-d', 'AA', 'SZK', 'co.MP') => ('-d', 'EA', 'SZK', 'co.MP')
('-d', 'AA', 'SZK', 'MP') => ('-d', 'T', 'SZK', 'MP')
('-d', 'AA', 'SZK', 'MP') => ('-d', 'EA', 'SZK', 'MP')
('-d', 'AA', 'SZK', 'cocap.MP') => ('-d', 'T', 'SZK', 'cocap.MP')
('-d', 'AA', 'SZK', 'cocap.MP') => ('-d', 'EA', 'SZK', 'cocap.MP')
('-d', 'AA', 'co.NISZK', 'cocap.MP') => ('-d', 'T', 'co.NISZK', 'cocap.MP')
('-d', 'AA', 'NISZK', 'cocap.MP') => ('-d', 'T', 'NISZK', 'cocap.MP')
('-d', 'A', 'cocap.SBP', 'cocap.MP') => ('-d', 'AA', 'cocap.SBP', 'cocap.MP')
('-d', 'A', 'cocap.SBP', 'MP') => ('-d', 'AA', 'cocap.SBP', 'MP')
('-d', 'A', 'cocap.SBP', 'co.MP') => ('-d', 'AA', 'cocap.SBP', 'co.MP')
('-d', 'A', 'cocap.MA', 'co.MP') => ('-d', 'AA', 'cocap.MA', 'co.MP')
('-d', 'A', 'cocap.MA', 'MP') => ('-d', 'AA', 'cocap.MA', 'MP')
('-d', 'A', 'cocap.MA', 'cocap.MP') => ('-d', 'AA', 'cocap.MA', 'cocap.MP')
('-d', 'AA', 'cocap.MA', 'cocap.MP') => ('-d', 'T', 'cocap.MA', 'cocap.MP')
('-d', 'AA', 'cocap.MA', 'cocap.MP') => ('-d', 'EA', 'cocap.MA', 'cocap.MP')
('-d', 'AA', 'cocap.MA', 'MP') => ('-d', 'T', 'cocap.MA', 'MP')
('-d', 'AA', 'cocap.MA', 'MP') => ('-d', 'EA', 'cocap.MA', 'MP')
('-d', 'AA', 'cocap.MA', 'co.MP') => ('-d', 'T', 'cocap.MA', 'co.MP')
('-d', 'AA', 'cocap.MA', 'co.MP') => ('-d', 'EA', 'cocap.MA', 'co.MP')
('-d', 'AA', 'cocap.SBP', 'co.MP') => ('-d', 'T', 'cocap.SBP', 'co.MP')
('-d', 'AA', 'cocap.SBP', 'co.MP') => ('-d', 'EA', 'cocap.SBP', 'co.MP')
('-d', 'AA', 'cocap.SBP', 'MP') => ('-d', 'T', 'cocap.SBP', 'MP')
('-d', 'AA', 'cocap.SBP', 'MP') => ('-d', 'EA', 'cocap.SBP', 'MP')
('-d', 'AA', 'cocap.SBP', 'cocap.MP') => ('-d', 'T', 'cocap.SBP', 'cocap.MP')
('-d', 'AA', 'cocap.SBP', 'cocap.MP') => ('-d', 'EA', 'cocap.SBP', 'cocap.MP')
('-d', 'AA', 'cocap.AM', 'cocap.MP') => ('-d', 'T', 'cocap.AM', 'cocap.MP')
('-d', 'AA', 'cocap.AM', 'cocap.MP') => ('-d', 'EA', 'cocap.AM', 'cocap.MP')
('-d', 'AA', 'cocap.AM', 'MP') => ('-d', 'T', 'cocap.AM', 'MP')
('-d', 'AA', 'cocap.AM', 'MP') => ('-d', 'EA', 'cocap.AM', 'MP')
('-d', 'AA', 'cocap.AM', 'co.MP') => ('-d', 'T', 'cocap.AM', 'co.MP')
('-d', 'AA', 'cocap.AM', 'co.MP') => ('-d', 'EA', 'cocap.AM', 'co.MP')
('-d', 'A', 'cocap.AM', 'PH') => ('-d', 'AA', 'cocap.AM', 'PH')
('-d', 'A', 'SZK', 'PH') => ('-d', 'AA', 'SZK', 'PH')
('-d', 'A', 'cocap.NISZK', 'PH') => ('-d', 'AA', 'cocap.NISZK', 'PH')
('-d', 'A', 'BPP', 'PH') => ('-d', 'AA', 'BPP', 'PH')
('-d', 'AA', 'BPP', 'PH') => ('-d', 'T', 'BPP', 'PH')
('-d', 'AA', 'BPP', 'PH') => ('-d', 'EA', 'BPP', 'PH')
('-d', 'AA', 'cocap.NISZK', 'PH') => ('-d', 'T', 'cocap.NISZK', 'PH')
('-d', 'AA', 'cocap.NISZK', 'PH') => ('-d', 'EA', 'cocap.NISZK', 'PH')
('-d', 'A', 'co.NISZK', 'PH') => ('-d', 'AA', 'co.NISZK', 'PH')
('-d', 'A', 'NISZK', 'PH') => ('-d', 'AA', 'NISZK', 'PH')
('-d', 'AA', 'NISZK', 'PH') => ('-d', 'T', 'NISZK', 'PH')
('-d', 'AA', 'NISZK', 'PH') => ('-d', 'EA', 'NISZK', 'PH')
('-d', 'AA', 'co.NISZK', 'PH') => ('-d', 'T', 'co.NISZK', 'PH')
('-d', 'AA', 'co.NISZK', 'PH') => ('-d', 'EA', 'co.NISZK', 'PH')
('-d', 'AA', 'SZK', 'PH') => ('-d', 'T', 'SZK', 'PH')
('-d', 'AA', 'SZK', 'PH') => ('-d', 'EA', 'SZK', 'PH')
('-d', 'A', 'cocap.SBP', 'PH') => ('-d', 'AA', 'cocap.SBP', 'PH')
('-d', 'A', 'cocap.MA', 'PH') => ('-d', 'AA', 'cocap.MA', 'PH')
('-d', 'AA', 'cocap.MA', 'PH') => ('-d', 'T', 'cocap.MA', 'PH')
('-d', 'AA', 'cocap.MA', 'PH') => ('-d', 'EA', 'cocap.MA', 'PH')
('-d', 'AA', 'cocap.SBP', 'PH') => ('-d', 'T', 'cocap.SBP', 'PH')
('-d', 'AA', 'cocap.SBP', 'PH') => ('-d', 'EA', 'cocap.SBP', 'PH')
('-d', 'AA', 'cocap.AM', 'PH') => ('-d', 'T', 'cocap.AM', 'PH')
('-d', 'AA', 'cocap.AM', 'PH') => ('-d', 'EA', 'cocap.AM', 'PH')
('-d', 'A', 'SZK', 'cocap.Sigma_2P') => ('-d', 'AA', 'SZK', 'cocap.Sigma_2P')
('-d', 'A', 'SZK', 'co.Sigma_2P') => ('-d', 'AA', 'SZK', 'co.Sigma_2P')
('-d', 'A', 'SZK', 'Sigma_2P') => ('-d', 'AA', 'SZK', 'Sigma_2P')
('-d', 'A', 'cocap.NISZK', 'Sigma_2P') => ('-d', 'AA', 'cocap.NISZK', 'Sigma_2P')
('-d', 'A', 'cocap.NISZK', 'co.Sigma_2P') => ('-d', 'AA', 'cocap.NISZK', 'co.Sigma_2P')
('-d', 'A', 'cocap.NISZK', 'cocap.Sigma_2P') => ('-d', 'AA', 'cocap.NISZK', 'cocap.Sigma_2P')
('-d', 'A', 'BPP', 'cocap.Sigma_2P') => ('-d', 'AA', 'BPP', 'cocap.Sigma_2P')
('-d', 'A', 'BPP', 'co.Sigma_2P') => ('-d', 'AA', 'BPP', 'co.Sigma_2P')
('-d', 'A', 'BPP', 'Sigma_2P') => ('-d', 'AA', 'BPP', 'Sigma_2P')
('-d', 'A', 'BPP', 'Delta_3P') => ('-d', 'AA', 'BPP', 'Delta_3P')
('-d', 'AA', 'BPP', 'Delta_3P') => ('-d', 'T', 'BPP', 'Delta_3P')
('-d', 'AA', 'BPP', 'Delta_3P') => ('-d', 'EA', 'BPP', 'Delta_3P')
('-d', 'AA', 'BPP', 'Sigma_2P') => ('-d', 'T', 'BPP', 'Sigma_2P')
('-d', 'AA', 'BPP', 'Sigma_2P') => ('-d', 'EA', 'BPP', 'Sigma_2P')
('-d', 'AA', 'BPP', 'co.Sigma_2P') => ('-d', 'T', 'BPP', 'co.Sigma_2P')
('-d', 'AA', 'BPP', 'co.Sigma_2P') => ('-d', 'EA', 'BPP', 'co.Sigma_2P')
('-d', 'AA', 'BPP', 'cocap.Sigma_2P') => ('-d', 'T', 'BPP', 'cocap.Sigma_2P')
('-d', 'AA', 'BPP', 'cocap.Sigma_2P') => ('-d', 'EA', 'BPP', 'cocap.Sigma_2P')
('-d', 'A', 'cocap.NISZK', 'Delta_3P') => ('-d', 'AA', 'cocap.NISZK', 'Delta_3P')
('-d', 'AA', 'cocap.NISZK', 'Delta_3P') => ('-d', 'T', 'cocap.NISZK', 'Delta_3P')
('-d', 'AA', 'cocap.NISZK', 'Delta_3P') => ('-d', 'EA', 'cocap.NISZK', 'Delta_3P')
('-d', 'AA', 'cocap.NISZK', 'cocap.Sigma_2P') => ('-d', 'T', 'cocap.NISZK', 'cocap.Sigma_2P')
('-d', 'AA', 'cocap.NISZK', 'cocap.Sigma_2P') => ('-d', 'EA', 'cocap.NISZK', 'cocap.Sigma_2P')
('-d', 'AA', 'cocap.NISZK', 'co.Sigma_2P') => ('-d', 'T', 'cocap.NISZK', 'co.Sigma_2P')
('-d', 'AA', 'cocap.NISZK', 'co.Sigma_2P') => ('-d', 'EA', 'cocap.NISZK', 'co.Sigma_2P')
('-d', 'AA', 'cocap.NISZK', 'Sigma_2P') => ('-d', 'T', 'cocap.NISZK', 'Sigma_2P')
('-d', 'AA', 'cocap.NISZK', 'Sigma_2P') => ('-d', 'EA', 'cocap.NISZK', 'Sigma_2P')
('-d', 'A', 'co.NISZK', 'Sigma_2P') => ('-d', 'AA', 'co.NISZK', 'Sigma_2P')
('-d', 'A', 'NISZK', 'co.Sigma_2P') => ('-d', 'AA', 'NISZK', 'co.Sigma_2P')
('-d', 'A', 'NISZK', 'Delta_3P') => ('-d', 'AA', 'NISZK', 'Delta_3P')
('-d', 'A', 'co.NISZK', 'Delta_3P') => ('-d', 'AA', 'co.NISZK', 'Delta_3P')
('-d', 'AA', 'co.NISZK', 'Delta_3P') => ('-d', 'T', 'co.NISZK', 'Delta_3P')
('-d', 'AA', 'co.NISZK', 'Delta_3P') => ('-d', 'EA', 'co.NISZK', 'Delta_3P')
('-d', 'AA', 'NISZK', 'Delta_3P') => ('-d', 'T', 'NISZK', 'Delta_3P')
('-d', 'AA', 'NISZK', 'Delta_3P') => ('-d', 'EA', 'NISZK', 'Delta_3P')
('-d', 'AA', 'NISZK', 'co.Sigma_2P') => ('-d', 'T', 'NISZK', 'co.Sigma_2P')
('-d', 'AA', 'NISZK', 'co.Sigma_2P') => ('-d', 'EA', 'NISZK', 'co.Sigma_2P')
('-d', 'AA', 'co.NISZK', 'Sigma_2P') => ('-d', 'T', 'co.NISZK', 'Sigma_2P')
('-d', 'AA', 'co.NISZK', 'Sigma_2P') => ('-d', 'EA', 'co.NISZK', 'Sigma_2P')
('-d', 'A', 'SZK', 'Delta_3P') => ('-d', 'AA', 'SZK', 'Delta_3P')
('-d', 'AA', 'SZK', 'Delta_3P') => ('-d', 'T', 'SZK', 'Delta_3P')
('-d', 'AA', 'SZK', 'Delta_3P') => ('-d', 'EA', 'SZK', 'Delta_3P')
('-d', 'A', 'NISZK', 'Sigma_2P') => ('-d', 'AA', 'NISZK', 'Sigma_2P')
('-d', 'A', 'co.NISZK', 'co.Sigma_2P') => ('-d', 'AA', 'co.NISZK', 'co.Sigma_2P')
('-d', 'AA', 'co.NISZK', 'co.Sigma_2P') => ('-d', 'T', 'co.NISZK', 'co.Sigma_2P')
('-d', 'AA', 'co.NISZK', 'co.Sigma_2P') => ('-d', 'EA', 'co.NISZK', 'co.Sigma_2P')
('-d', 'AA', 'NISZK', 'Sigma_2P') => ('-d', 'T', 'NISZK', 'Sigma_2P')
('-d', 'AA', 'NISZK', 'Sigma_2P') => ('-d', 'EA', 'NISZK', 'Sigma_2P')
('-d', 'AA', 'SZK', 'Sigma_2P') => ('-d', 'T', 'SZK', 'Sigma_2P')
('-d', 'AA', 'SZK', 'Sigma_2P') => ('-d', 'EA', 'SZK', 'Sigma_2P')
('-d', 'AA', 'SZK', 'co.Sigma_2P') => ('-d', 'T', 'SZK', 'co.Sigma_2P')
('-d', 'AA', 'SZK', 'co.Sigma_2P') => ('-d', 'EA', 'SZK', 'co.Sigma_2P')
('-d', 'AA', 'SZK', 'cocap.Sigma_2P') => ('-d', 'T', 'SZK', 'cocap.Sigma_2P')
('-d', 'AA', 'SZK', 'cocap.Sigma_2P') => ('-d', 'EA', 'SZK', 'cocap.Sigma_2P')
('-d', 'AA', 'co.NISZK', 'cocap.Sigma_2P') => ('-d', 'T', 'co.NISZK', 'cocap.Sigma_2P')
('-d', 'AA', 'NISZK', 'cocap.Sigma_2P') => ('-d', 'T', 'NISZK', 'cocap.Sigma_2P')
('-d', 'A', 'cocap.SBP', 'cocap.Sigma_2P') => ('-d', 'AA', 'cocap.SBP', 'cocap.Sigma_2P')
('-d', 'A', 'cocap.SBP', 'co.Sigma_2P') => ('-d', 'AA', 'cocap.SBP', 'co.Sigma_2P')
('-d', 'A', 'cocap.SBP', 'Sigma_2P') => ('-d', 'AA', 'cocap.SBP', 'Sigma_2P')
('-d', 'A', 'cocap.MA', 'Sigma_2P') => ('-d', 'AA', 'cocap.MA', 'Sigma_2P')
('-d', 'A', 'cocap.MA', 'co.Sigma_2P') => ('-d', 'AA', 'cocap.MA', 'co.Sigma_2P')
('-d', 'A', 'cocap.MA', 'cocap.Sigma_2P') => ('-d', 'AA', 'cocap.MA', 'cocap.Sigma_2P')
('-d', 'A', 'cocap.MA', 'Delta_3P') => ('-d', 'AA', 'cocap.MA', 'Delta_3P')
('-d', 'AA', 'cocap.MA', 'Delta_3P') => ('-d', 'T', 'cocap.MA', 'Delta_3P')
('-d', 'AA', 'cocap.MA', 'Delta_3P') => ('-d', 'EA', 'cocap.MA', 'Delta_3P')
('-d', 'AA', 'cocap.MA', 'cocap.Sigma_2P') => ('-d', 'T', 'cocap.MA', 'cocap.Sigma_2P')
('-d', 'AA', 'cocap.MA', 'cocap.Sigma_2P') => ('-d', 'EA', 'cocap.MA', 'cocap.Sigma_2P')
('-d', 'AA', 'cocap.MA', 'co.Sigma_2P') => ('-d', 'T', 'cocap.MA', 'co.Sigma_2P')
('-d', 'AA', 'cocap.MA', 'co.Sigma_2P') => ('-d', 'EA', 'cocap.MA', 'co.Sigma_2P')
('-d', 'AA', 'cocap.MA', 'Sigma_2P') => ('-d', 'T', 'cocap.MA', 'Sigma_2P')
('-d', 'AA', 'cocap.MA', 'Sigma_2P') => ('-d', 'EA', 'cocap.MA', 'Sigma_2P')
('-d', 'A', 'cocap.SBP', 'Delta_3P') => ('-d', 'AA', 'cocap.SBP', 'Delta_3P')
('-d', 'AA', 'cocap.SBP', 'Delta_3P') => ('-d', 'T', 'cocap.SBP', 'Delta_3P')
('-d', 'AA', 'cocap.SBP', 'Delta_3P') => ('-d', 'EA', 'cocap.SBP', 'Delta_3P')
('-d', 'AA', 'cocap.SBP', 'Sigma_2P') => ('-d', 'T', 'cocap.SBP', 'Sigma_2P')
('-d', 'AA', 'cocap.SBP', 'Sigma_2P') => ('-d', 'EA', 'cocap.SBP', 'Sigma_2P')
('-d', 'AA', 'cocap.SBP', 'co.Sigma_2P') => ('-d', 'T', 'cocap.SBP', 'co.Sigma_2P')
('-d', 'AA', 'cocap.SBP', 'co.Sigma_2P') => ('-d', 'EA', 'cocap.SBP', 'co.Sigma_2P')
('-d', 'AA', 'cocap.SBP', 'cocap.Sigma_2P') => ('-d', 'T', 'cocap.SBP', 'cocap.Sigma_2P')
('-d', 'AA', 'cocap.SBP', 'cocap.Sigma_2P') => ('-d', 'EA', 'cocap.SBP', 'cocap.Sigma_2P')
('-d', 'A', 'cocap.AM', 'Delta_3P') => ('-d', 'AA', 'cocap.AM', 'Delta_3P')
('-d', 'AA', 'cocap.AM', 'Delta_3P') => ('-d', 'T', 'cocap.AM', 'Delta_3P')
('-d', 'AA', 'cocap.AM', 'Delta_3P') => ('-d', 'EA', 'cocap.AM', 'Delta_3P')
('-d', 'AA', 'cocap.AM', 'cocap.Sigma_2P') => ('-d', 'T', 'cocap.AM', 'cocap.Sigma_2P')
('-d', 'AA', 'cocap.AM', 'cocap.Sigma_2P') => ('-d', 'EA', 'cocap.AM', 'cocap.Sigma_2P')
('-d', 'AA', 'cocap.AM', 'co.Sigma_2P') => ('-d', 'T', 'cocap.AM', 'co.Sigma_2P')
('-d', 'AA', 'cocap.AM', 'co.Sigma_2P') => ('-d', 'EA', 'cocap.AM', 'co.Sigma_2P')
('-d', 'AA', 'cocap.AM', 'Sigma_2P') => ('-d', 'T', 'cocap.AM', 'Sigma_2P')
('-d', 'AA', 'cocap.AM', 'Sigma_2P') => ('-d', 'EA', 'cocap.AM', 'Sigma_2P')
('p', 'A', 'cocap.AM', 'co.Sigma_2P') => ('p', 'AA', 'cocap.AM', 'co.Sigma_2P')
('p', 'A', 'cocap.AM', 'Sigma_2P') => ('p', 'AA', 'cocap.AM', 'Sigma_2P')
('p', 'A', 'cocap.AM', 'MP') => ('p', 'AA', 'cocap.AM', 'MP')
('p', 'A', 'cocap.AM', 'co.MP') => ('p', 'AA', 'cocap.AM', 'co.MP')
('p', 'A', 'cocap.AM', 'cocap.MP') => ('p', 'AA', 'cocap.AM', 'cocap.MP')
('p', 'A', 'SZK', 'cocap.MP') => ('p', 'AA', 'SZK', 'cocap.MP')
('p', 'A', 'SZK', 'MP') => ('p', 'AA', 'SZK', 'MP')
('p', 'A', 'SZK', 'co.MP') => ('p', 'AA', 'SZK', 'co.MP')
('p', 'A', 'cocap.NISZK', 'co.MP') => ('p', 'AA', 'cocap.NISZK', 'co.MP')
('p', 'A', 'cocap.NISZK', 'MP') => ('p', 'AA', 'cocap.NISZK', 'MP')
('p', 'A', 'cocap.NISZK', 'cocap.MP') => ('p', 'AA', 'cocap.NISZK', 'cocap.MP')
('p', 'A', 'BPP', 'cocap.MP') => ('p', 'AA', 'BPP', 'cocap.MP')
('p', 'A', 'BPP', 'MP') => ('p', 'AA', 'BPP', 'MP')
('p', 'A', 'BPP', 'co.MP') => ('p', 'AA', 'BPP', 'co.MP')
('p', 'AA', 'BPP', 'co.MP') => ('p', 'T', 'BPP', 'co.MP')
('p', 'AA', 'BPP', 'co.MP') => ('p', 'EA', 'BPP', 'co.MP')
('p', 'AA', 'BPP', 'MP') => ('p', 'T', 'BPP', 'MP')
('p', 'AA', 'BPP', 'MP') => ('p', 'EA', 'BPP', 'MP')
('p', 'AA', 'BPP', 'cocap.MP') => ('p', 'T', 'BPP', 'cocap.MP')
('p', 'AA', 'BPP', 'cocap.MP') => ('p', 'EA', 'BPP', 'cocap.MP')
('p', 'AA', 'cocap.NISZK', 'cocap.MP') => ('p', 'T', 'cocap.NISZK', 'cocap.MP')
('p', 'AA', 'cocap.NISZK', 'cocap.MP') => ('p', 'EA', 'cocap.NISZK', 'cocap.MP')
('p', 'AA', 'cocap.NISZK', 'MP') => ('p', 'T', 'cocap.NISZK', 'MP')
('p', 'AA', 'cocap.NISZK', 'MP') => ('p', 'EA', 'cocap.NISZK', 'MP')
('p', 'AA', 'cocap.NISZK', 'co.MP') => ('p', 'T', 'cocap.NISZK', 'co.MP')
('p', 'AA', 'cocap.NISZK', 'co.MP') => ('p', 'EA', 'cocap.NISZK', 'co.MP')
('p', 'A', 'co.NISZK', 'co.MP') => ('p', 'AA', 'co.NISZK', 'co.MP')
('p', 'A', 'NISZK', 'MP') => ('p', 'AA', 'NISZK', 'MP')
('p', 'AA', 'NISZK', 'MP') => ('p', 'T', 'NISZK', 'MP')
('p', 'AA', 'NISZK', 'MP') => ('p', 'EA', 'NISZK', 'MP')
('p', 'AA', 'co.NISZK', 'co.MP') => ('p', 'T', 'co.NISZK', 'co.MP')
('p', 'AA', 'co.NISZK', 'co.MP') => ('p', 'EA', 'co.NISZK', 'co.MP')
('p', 'A', 'NISZK', 'co.MP') => ('p', 'AA', 'NISZK', 'co.MP')
('p', 'A', 'NISZK', 'cocap.MP') => ('p', 'AA', 'NISZK', 'cocap.MP')
('p', 'A', 'co.NISZK', 'cocap.MP') => ('p', 'AA', 'co.NISZK', 'cocap.MP')
('p', 'A', 'co.NISZK', 'MP') => ('p', 'AA', 'co.NISZK', 'MP')
('p', 'AA', 'co.NISZK', 'MP') => ('p', 'T', 'co.NISZK', 'MP')
('p', 'AA', 'co.NISZK', 'MP') => ('p', 'EA', 'co.NISZK', 'MP')
('p', 'AA', 'co.NISZK', 'cocap.MP') => ('p', 'T', 'co.NISZK', 'cocap.MP')
('p', 'AA', 'co.NISZK', 'cocap.MP') => ('p', 'EA', 'co.NISZK', 'cocap.MP')
('p', 'AA', 'NISZK', 'cocap.MP') => ('p', 'T', 'NISZK', 'cocap.MP')
('p', 'AA', 'NISZK', 'cocap.MP') => ('p', 'EA', 'NISZK', 'cocap.MP')
('p', 'AA', 'NISZK', 'co.MP') => ('p', 'T', 'NISZK', 'co.MP')
('p', 'AA', 'NISZK', 'co.MP') => ('p', 'EA', 'NISZK', 'co.MP')
('p', 'AA', 'SZK', 'co.MP') => ('p', 'T', 'SZK', 'co.MP')
('p', 'AA', 'SZK', 'co.MP') => ('p', 'EA', 'SZK', 'co.MP')
('p', 'AA', 'SZK', 'MP') => ('p', 'T', 'SZK', 'MP')
('p', 'AA', 'SZK', 'MP') => ('p', 'EA', 'SZK', 'MP')
('p', 'AA', 'SZK', 'cocap.MP') => ('p', 'T', 'SZK', 'cocap.MP')
('p', 'AA', 'SZK', 'cocap.MP') => ('p', 'EA', 'SZK', 'cocap.MP')
('p', 'A', 'cocap.SBP', 'cocap.MP') => ('p', 'AA', 'cocap.SBP', 'cocap.MP')
('p', 'A', 'cocap.SBP', 'MP') => ('p', 'AA', 'cocap.SBP', 'MP')
('p', 'A', 'cocap.SBP', 'co.MP') => ('p', 'AA', 'cocap.SBP', 'co.MP')
('p', 'A', 'cocap.MA', 'co.MP') => ('p', 'AA', 'cocap.MA', 'co.MP')
('p', 'A', 'cocap.MA', 'MP') => ('p', 'AA', 'cocap.MA', 'MP')
('p', 'A', 'cocap.MA', 'cocap.MP') => ('p', 'AA', 'cocap.MA', 'cocap.MP')
('p', 'AA', 'cocap.MA', 'cocap.MP') => ('p', 'T', 'cocap.MA', 'cocap.MP')
('p', 'AA', 'cocap.MA', 'cocap.MP') => ('p', 'EA', 'cocap.MA', 'cocap.MP')
('p', 'AA', 'cocap.MA', 'MP') => ('p', 'T', 'cocap.MA', 'MP')
('p', 'AA', 'cocap.MA', 'MP') => ('p', 'EA', 'cocap.MA', 'MP')
('p', 'AA', 'cocap.MA', 'co.MP') => ('p', 'T', 'cocap.MA', 'co.MP')
('p', 'AA', 'cocap.MA', 'co.MP') => ('p', 'EA', 'cocap.MA', 'co.MP')
('p', 'AA', 'cocap.SBP', 'co.MP') => ('p', 'T', 'cocap.SBP', 'co.MP')
('p', 'AA', 'cocap.SBP', 'co.MP') => ('p', 'EA', 'cocap.SBP', 'co.MP')
('p', 'AA', 'cocap.SBP', 'MP') => ('p', 'T', 'cocap.SBP', 'MP')
('p', 'AA', 'cocap.SBP', 'MP') => ('p', 'EA', 'cocap.SBP', 'MP')
('p', 'AA', 'cocap.SBP', 'cocap.MP') => ('p', 'T', 'cocap.SBP', 'cocap.MP')
('p', 'AA', 'cocap.SBP', 'cocap.MP') => ('p', 'EA', 'cocap.SBP', 'cocap.MP')
('p', 'AA', 'cocap.AM', 'cocap.MP') => ('p', 'T', 'cocap.AM', 'cocap.MP')
('p', 'AA', 'cocap.AM', 'cocap.MP') => ('p', 'EA', 'cocap.AM', 'cocap.MP')
('p', 'AA', 'cocap.AM', 'MP') => ('p', 'T', 'cocap.AM', 'MP')
('p', 'AA', 'cocap.AM', 'MP') => ('p', 'EA', 'cocap.AM', 'MP')
('p', 'AA', 'cocap.AM', 'co.MP') => ('p', 'T', 'cocap.AM', 'co.MP')
('p', 'AA', 'cocap.AM', 'co.MP') => ('p', 'EA', 'cocap.AM', 'co.MP')
('p', 'A', 'cocap.AM', 'PH') => ('p', 'AA', 'cocap.AM', 'PH')
('p', 'A', 'SZK', 'PH') => ('p', 'AA', 'SZK', 'PH')
('p', 'A', 'cocap.NISZK', 'PH') => ('p', 'AA', 'cocap.NISZK', 'PH')
('p', 'A', 'BPP', 'PH') => ('p', 'AA', 'BPP', 'PH')
('p', 'AA', 'BPP', 'PH') => ('p', 'T', 'BPP', 'PH')
('p', 'AA', 'BPP', 'PH') => ('p', 'EA', 'BPP', 'PH')
('p', 'AA', 'cocap.NISZK', 'PH') => ('p', 'T', 'cocap.NISZK', 'PH')
('p', 'AA', 'cocap.NISZK', 'PH') => ('p', 'EA', 'cocap.NISZK', 'PH')
('p', 'A', 'co.NISZK', 'PH') => ('p', 'AA', 'co.NISZK', 'PH')
('p', 'A', 'NISZK', 'PH') => ('p', 'AA', 'NISZK', 'PH')
('p', 'AA', 'NISZK', 'PH') => ('p', 'T', 'NISZK', 'PH')
('p', 'AA', 'NISZK', 'PH') => ('p', 'EA', 'NISZK', 'PH')
('p', 'AA', 'co.NISZK', 'PH') => ('p', 'T', 'co.NISZK', 'PH')
('p', 'AA', 'co.NISZK', 'PH') => ('p', 'EA', 'co.NISZK', 'PH')
('p', 'AA', 'SZK', 'PH') => ('p', 'T', 'SZK', 'PH')
('p', 'AA', 'SZK', 'PH') => ('p', 'EA', 'SZK', 'PH')
('p', 'A', 'cocap.SBP', 'PH') => ('p', 'AA', 'cocap.SBP', 'PH')
('p', 'A', 'cocap.MA', 'PH') => ('p', 'AA', 'cocap.MA', 'PH')
('p', 'AA', 'cocap.MA', 'PH') => ('p', 'T', 'cocap.MA', 'PH')
('p', 'AA', 'cocap.MA', 'PH') => ('p', 'EA', 'cocap.MA', 'PH')
('p', 'AA', 'cocap.SBP', 'PH') => ('p', 'T', 'cocap.SBP', 'PH')
('p', 'AA', 'cocap.SBP', 'PH') => ('p', 'EA', 'cocap.SBP', 'PH')
('p', 'AA', 'cocap.AM', 'PH') => ('p', 'T', 'cocap.AM', 'PH')
('p', 'AA', 'cocap.AM', 'PH') => ('p', 'EA', 'cocap.AM', 'PH')
('p', 'A', 'SZK', 'Sigma_2P') => ('p', 'AA', 'SZK', 'Sigma_2P')
('p', 'A', 'SZK', 'co.Sigma_2P') => ('p', 'AA', 'SZK', 'co.Sigma_2P')
('p', 'A', 'SZK', 'cocap.Sigma_2P') => ('p', 'AA', 'SZK', 'cocap.Sigma_2P')
('p', 'A', 'cocap.NISZK', 'cocap.Sigma_2P') => ('p', 'AA', 'cocap.NISZK', 'cocap.Sigma_2P')
('p', 'A', 'cocap.NISZK', 'co.Sigma_2P') => ('p', 'AA', 'cocap.NISZK', 'co.Sigma_2P')
('p', 'A', 'cocap.NISZK', 'Sigma_2P') => ('p', 'AA', 'cocap.NISZK', 'Sigma_2P')
('p', 'A', 'BPP', 'Sigma_2P') => ('p', 'AA', 'BPP', 'Sigma_2P')
('p', 'A', 'BPP', 'co.Sigma_2P') => ('p', 'AA', 'BPP', 'co.Sigma_2P')
('p', 'A', 'BPP', 'cocap.Sigma_2P') => ('p', 'AA', 'BPP', 'cocap.Sigma_2P')
('p', 'A', 'BPP', 'Delta_3P') => ('p', 'AA', 'BPP', 'Delta_3P')
('p', 'AA', 'BPP', 'Delta_3P') => ('p', 'T', 'BPP', 'Delta_3P')
('p', 'AA', 'BPP', 'Delta_3P') => ('p', 'EA', 'BPP', 'Delta_3P')
('p', 'AA', 'BPP', 'cocap.Sigma_2P') => ('p', 'T', 'BPP', 'cocap.Sigma_2P')
('p', 'AA', 'BPP', 'cocap.Sigma_2P') => ('p', 'EA', 'BPP', 'cocap.Sigma_2P')
('p', 'AA', 'BPP', 'co.Sigma_2P') => ('p', 'T', 'BPP', 'co.Sigma_2P')
('p', 'AA', 'BPP', 'co.Sigma_2P') => ('p', 'EA', 'BPP', 'co.Sigma_2P')
('p', 'AA', 'BPP', 'Sigma_2P') => ('p', 'T', 'BPP', 'Sigma_2P')
('p', 'AA', 'BPP', 'Sigma_2P') => ('p', 'EA', 'BPP', 'Sigma_2P')
('p', 'A', 'cocap.NISZK', 'Delta_3P') => ('p', 'AA', 'cocap.NISZK', 'Delta_3P')
('p', 'AA', 'cocap.NISZK', 'Delta_3P') => ('p', 'T', 'cocap.NISZK', 'Delta_3P')
('p', 'AA', 'cocap.NISZK', 'Delta_3P') => ('p', 'EA', 'cocap.NISZK', 'Delta_3P')
('p', 'AA', 'cocap.NISZK', 'Sigma_2P') => ('p', 'T', 'cocap.NISZK', 'Sigma_2P')
('p', 'AA', 'cocap.NISZK', 'Sigma_2P') => ('p', 'EA', 'cocap.NISZK', 'Sigma_2P')
('p', 'AA', 'cocap.NISZK', 'co.Sigma_2P') => ('p', 'T', 'cocap.NISZK', 'co.Sigma_2P')
('p', 'AA', 'cocap.NISZK', 'co.Sigma_2P') => ('p', 'EA', 'cocap.NISZK', 'co.Sigma_2P')
('p', 'AA', 'cocap.NISZK', 'cocap.Sigma_2P') => ('p', 'T', 'cocap.NISZK', 'cocap.Sigma_2P')
('p', 'AA', 'cocap.NISZK', 'cocap.Sigma_2P') => ('p', 'EA', 'cocap.NISZK', 'cocap.Sigma_2P')
('p', 'A', 'co.NISZK', 'cocap.Sigma_2P') => ('p', 'AA', 'co.NISZK', 'cocap.Sigma_2P')
('p', 'A', 'NISZK', 'cocap.Sigma_2P') => ('p', 'AA', 'NISZK', 'cocap.Sigma_2P')
('p', 'A', 'NISZK', 'co.Sigma_2P') => ('p', 'AA', 'NISZK', 'co.Sigma_2P')
('p', 'A', 'co.NISZK', 'Sigma_2P') => ('p', 'AA', 'co.NISZK', 'Sigma_2P')
('p', 'A', 'co.NISZK', 'Delta_3P') => ('p', 'AA', 'co.NISZK', 'Delta_3P')
('p', 'A', 'NISZK', 'Delta_3P') => ('p', 'AA', 'NISZK', 'Delta_3P')
('p', 'AA', 'NISZK', 'Delta_3P') => ('p', 'T', 'NISZK', 'Delta_3P')
('p', 'AA', 'NISZK', 'Delta_3P') => ('p', 'EA', 'NISZK', 'Delta_3P')
('p', 'AA', 'co.NISZK', 'Delta_3P') => ('p', 'T', 'co.NISZK', 'Delta_3P')
('p', 'AA', 'co.NISZK', 'Delta_3P') => ('p', 'EA', 'co.NISZK', 'Delta_3P')
('p', 'AA', 'co.NISZK', 'Sigma_2P') => ('p', 'T', 'co.NISZK', 'Sigma_2P')
('p', 'AA', 'co.NISZK', 'Sigma_2P') => ('p', 'EA', 'co.NISZK', 'Sigma_2P')
('p', 'AA', 'NISZK', 'co.Sigma_2P') => ('p', 'T', 'NISZK', 'co.Sigma_2P')
('p', 'AA', 'NISZK', 'co.Sigma_2P') => ('p', 'EA', 'NISZK', 'co.Sigma_2P')
('p', 'A', 'NISZK', 'Sigma_2P') => ('p', 'AA', 'NISZK', 'Sigma_2P')
('p', 'A', 'co.NISZK', 'co.Sigma_2P') => ('p', 'AA', 'co.NISZK', 'co.Sigma_2P')
('p', 'AA', 'co.NISZK', 'co.Sigma_2P') => ('p', 'T', 'co.NISZK', 'co.Sigma_2P')
('p', 'AA', 'co.NISZK', 'co.Sigma_2P') => ('p', 'EA', 'co.NISZK', 'co.Sigma_2P')
('p', 'AA', 'co.NISZK', 'cocap.Sigma_2P') => ('p', 'T', 'co.NISZK', 'cocap.Sigma_2P')
('p', 'AA', 'co.NISZK', 'cocap.Sigma_2P') => ('p', 'EA', 'co.NISZK', 'cocap.Sigma_2P')
('p', 'AA', 'NISZK', 'cocap.Sigma_2P') => ('p', 'T', 'NISZK', 'cocap.Sigma_2P')
('p', 'AA', 'NISZK', 'cocap.Sigma_2P') => ('p', 'EA', 'NISZK', 'cocap.Sigma_2P')
('p', 'AA', 'NISZK', 'Sigma_2P') => ('p', 'T', 'NISZK', 'Sigma_2P')
('p', 'AA', 'NISZK', 'Sigma_2P') => ('p', 'EA', 'NISZK', 'Sigma_2P')
('p', 'A', 'SZK', 'Delta_3P') => ('p', 'AA', 'SZK', 'Delta_3P')
('p', 'AA', 'SZK', 'Delta_3P') => ('p', 'T', 'SZK', 'Delta_3P')
('p', 'AA', 'SZK', 'Delta_3P') => ('p', 'EA', 'SZK', 'Delta_3P')
('p', 'AA', 'SZK', 'cocap.Sigma_2P') => ('p', 'T', 'SZK', 'cocap.Sigma_2P')
('p', 'AA', 'SZK', 'cocap.Sigma_2P') => ('p', 'EA', 'SZK', 'cocap.Sigma_2P')
('p', 'AA', 'SZK', 'co.Sigma_2P') => ('p', 'T', 'SZK', 'co.Sigma_2P')
('p', 'AA', 'SZK', 'co.Sigma_2P') => ('p', 'EA', 'SZK', 'co.Sigma_2P')
('p', 'AA', 'SZK', 'Sigma_2P') => ('p', 'T', 'SZK', 'Sigma_2P')
('p', 'AA', 'SZK', 'Sigma_2P') => ('p', 'EA', 'SZK', 'Sigma_2P')
('p', 'A', 'cocap.SBP', 'Sigma_2P') => ('p', 'AA', 'cocap.SBP', 'Sigma_2P')
('p', 'A', 'cocap.SBP', 'co.Sigma_2P') => ('p', 'AA', 'cocap.SBP', 'co.Sigma_2P')
('p', 'A', 'cocap.SBP', 'cocap.Sigma_2P') => ('p', 'AA', 'cocap.SBP', 'cocap.Sigma_2P')
('p', 'A', 'cocap.MA', 'cocap.Sigma_2P') => ('p', 'AA', 'cocap.MA', 'cocap.Sigma_2P')
('p', 'A', 'cocap.MA', 'co.Sigma_2P') => ('p', 'AA', 'cocap.MA', 'co.Sigma_2P')
('p', 'A', 'cocap.MA', 'Sigma_2P') => ('p', 'AA', 'cocap.MA', 'Sigma_2P')
('p', 'A', 'cocap.MA', 'Delta_3P') => ('p', 'AA', 'cocap.MA', 'Delta_3P')
('p', 'AA', 'cocap.MA', 'Delta_3P') => ('p', 'T', 'cocap.MA', 'Delta_3P')
('p', 'AA', 'cocap.MA', 'Delta_3P') => ('p', 'EA', 'cocap.MA', 'Delta_3P')
('p', 'AA', 'cocap.MA', 'Sigma_2P') => ('p', 'T', 'cocap.MA', 'Sigma_2P')
('p', 'AA', 'cocap.MA', 'Sigma_2P') => ('p', 'EA', 'cocap.MA', 'Sigma_2P')
('p', 'AA', 'cocap.MA', 'co.Sigma_2P') => ('p', 'T', 'cocap.MA', 'co.Sigma_2P')
('p', 'AA', 'cocap.MA', 'co.Sigma_2P') => ('p', 'EA', 'cocap.MA', 'co.Sigma_2P')
('p', 'AA', 'cocap.MA', 'cocap.Sigma_2P') => ('p', 'T', 'cocap.MA', 'cocap.Sigma_2P')
('p', 'AA', 'cocap.MA', 'cocap.Sigma_2P') => ('p', 'EA', 'cocap.MA', 'cocap.Sigma_2P')
('p', 'A', 'cocap.SBP', 'Delta_3P') => ('p', 'AA', 'cocap.SBP', 'Delta_3P')
('p', 'AA', 'cocap.SBP', 'Delta_3P') => ('p', 'T', 'cocap.SBP', 'Delta_3P')
('p', 'AA', 'cocap.SBP', 'Delta_3P') => ('p', 'EA', 'cocap.SBP', 'Delta_3P')
('p', 'AA', 'cocap.SBP', 'cocap.Sigma_2P') => ('p', 'T', 'cocap.SBP', 'cocap.Sigma_2P')
('p', 'AA', 'cocap.SBP', 'cocap.Sigma_2P') => ('p', 'EA', 'cocap.SBP', 'cocap.Sigma_2P')
('p', 'AA', 'cocap.SBP', 'co.Sigma_2P') => ('p', 'T', 'cocap.SBP', 'co.Sigma_2P')
('p', 'AA', 'cocap.SBP', 'co.Sigma_2P') => ('p', 'EA', 'cocap.SBP', 'co.Sigma_2P')
('p', 'AA', 'cocap.SBP', 'Sigma_2P') => ('p', 'T', 'cocap.SBP', 'Sigma_2P')
('p', 'AA', 'cocap.SBP', 'Sigma_2P') => ('p', 'EA', 'cocap.SBP', 'Sigma_2P')
('p', 'A', 'cocap.AM', 'Delta_3P') => ('p', 'AA', 'cocap.AM', 'Delta_3P')
('p', 'AA', 'cocap.AM', 'Delta_3P') => ('p', 'T', 'cocap.AM', 'Delta_3P')
('p', 'AA', 'cocap.AM', 'Delta_3P') => ('p', 'EA', 'cocap.AM', 'Delta_3P')
('p', 'AA', 'cocap.AM', 'Sigma_2P') => ('p', 'T', 'cocap.AM', 'Sigma_2P')
('p', 'AA', 'cocap.AM', 'Sigma_2P') => ('p', 'EA', 'cocap.AM', 'Sigma_2P')
('p', 'AA', 'cocap.AM', 'co.Sigma_2P') => ('p', 'T', 'cocap.AM', 'co.Sigma_2P')
('p', 'AA', 'cocap.AM', 'co.Sigma_2P') => ('p', 'EA', 'cocap.AM', 'co.Sigma_2P')
('p', 'AA', 'cocap.AM', 'cocap.Sigma_2P') => ('p', 'T', 'cocap.AM', 'cocap.Sigma_2P')
('p', 'AA', 'cocap.AM', 'cocap.Sigma_2P') => ('p', 'EA', 'cocap.AM', 'cocap.Sigma_2P')
('-d', 'A', 'AM', 'MP') => ('-d', 'AA', 'AM', 'MP')
('-d', 'A', 'co.AM', 'co.MP') => ('-d', 'AA', 'co.AM', 'co.MP')
('-d', 'A', 'co.MA', 'co.MP') => ('-d', 'AA', 'co.MA', 'co.MP')
('-d', 'A', 'MA', 'MP') => ('-d', 'AA', 'MA', 'MP')
('-d', 'AA', 'MA', 'MP') => ('-d', 'T', 'MA', 'MP')
('-d', 'AA', 'MA', 'MP') => ('-d', 'EA', 'MA', 'MP')
('-d', 'AA', 'co.MA', 'co.MP') => ('-d', 'T', 'co.MA', 'co.MP')
('-d', 'AA', 'co.MA', 'co.MP') => ('-d', 'EA', 'co.MA', 'co.MP')
('-d', 'A', 'co.SBP', 'co.MP') => ('-d', 'AA', 'co.SBP', 'co.MP')
('-d', 'A', 'SBP', 'MP') => ('-d', 'AA', 'SBP', 'MP')
('-d', 'AA', 'SBP', 'MP') => ('-d', 'T', 'SBP', 'MP')
('-d', 'AA', 'SBP', 'MP') => ('-d', 'EA', 'SBP', 'MP')
('-d', 'AA', 'co.SBP', 'co.MP') => ('-d', 'T', 'co.SBP', 'co.MP')
('-d', 'AA', 'co.SBP', 'co.MP') => ('-d', 'EA', 'co.SBP', 'co.MP')
('-d', 'AA', 'co.AM', 'co.MP') => ('-d', 'T', 'co.AM', 'co.MP')
('-d', 'AA', 'co.AM', 'co.MP') => ('-d', 'EA', 'co.AM', 'co.MP')
('-d', 'AA', 'AM', 'MP') => ('-d', 'T', 'AM', 'MP')
('-d', 'AA', 'AM', 'MP') => ('-d', 'EA', 'AM', 'MP')
('p', 'A', 'AM', 'MP') => ('p', 'AA', 'AM', 'MP')
('p', 'A', 'co.AM', 'co.MP') => ('p', 'AA', 'co.AM', 'co.MP')
('p', 'A', 'co.MA', 'co.MP') => ('p', 'AA', 'co.MA', 'co.MP')
('p', 'A', 'MA', 'MP') => ('p', 'AA', 'MA', 'MP')
('p', 'AA', 'MA', 'MP') => ('p', 'T', 'MA', 'MP')
('p', 'AA', 'MA', 'MP') => ('p', 'EA', 'MA', 'MP')
('p', 'AA', 'co.MA', 'co.MP') => ('p', 'T', 'co.MA', 'co.MP')
('p', 'AA', 'co.MA', 'co.MP') => ('p', 'EA', 'co.MA', 'co.MP')
('p', 'A', 'co.SBP', 'co.MP') => ('p', 'AA', 'co.SBP', 'co.MP')
('p', 'A', 'SBP', 'MP') => ('p', 'AA', 'SBP', 'MP')
('p', 'AA', 'SBP', 'MP') => ('p', 'T', 'SBP', 'MP')
('p', 'AA', 'SBP', 'MP') => ('p', 'EA', 'SBP', 'MP')
('p', 'AA', 'co.SBP', 'co.MP') => ('p', 'T', 'co.SBP', 'co.MP')
('p', 'AA', 'co.SBP', 'co.MP') => ('p', 'EA', 'co.SBP', 'co.MP')
('p', 'AA', 'co.AM', 'co.MP') => ('p', 'T', 'co.AM', 'co.MP')
('p', 'AA', 'co.AM', 'co.MP') => ('p', 'EA', 'co.AM', 'co.MP')
('p', 'AA', 'AM', 'MP') => ('p', 'T', 'AM', 'MP')
('p', 'AA', 'AM', 'MP') => ('p', 'EA', 'AM', 'MP')
('-d', 'A', 'AM', 'PH') => ('-d', 'AA', 'AM', 'PH')
('-d', 'A', 'co.AM', 'PH') => ('-d', 'AA', 'co.AM', 'PH')
('-d', 'A', 'co.AM', 'MP') => ('-d', 'AA', 'co.AM', 'MP')
('-d', 'A', 'co.AM', 'cocap.MP') => ('-d', 'AA', 'co.AM', 'cocap.MP')
('-d', 'A', 'AM', 'cocap.MP') => ('-d', 'AA', 'AM', 'cocap.MP')
('-d', 'A', 'SBP', 'cocap.MP') => ('-d', 'AA', 'SBP', 'cocap.MP')
('-d', 'A', 'co.SBP', 'cocap.MP') => ('-d', 'AA', 'co.SBP', 'cocap.MP')
('-d', 'A', 'co.SBP', 'MP') => ('-d', 'AA', 'co.SBP', 'MP')
('-d', 'A', 'SBP', 'co.MP') => ('-d', 'AA', 'SBP', 'co.MP')
('-d', 'A', 'MA', 'co.MP') => ('-d', 'AA', 'MA', 'co.MP')
('-d', 'A', 'MA', 'cocap.MP') => ('-d', 'AA', 'MA', 'cocap.MP')
('-d', 'A', 'co.MA', 'cocap.MP') => ('-d', 'AA', 'co.MA', 'cocap.MP')
('-d', 'A', 'co.MA', 'MP') => ('-d', 'AA', 'co.MA', 'MP')
('-d', 'AA', 'co.MA', 'MP') => ('-d', 'T', 'co.MA', 'MP')
('-d', 'AA', 'co.MA', 'MP') => ('-d', 'EA', 'co.MA', 'MP')
('-d', 'AA', 'co.MA', 'cocap.MP') => ('-d', 'T', 'co.MA', 'cocap.MP')
('-d', 'AA', 'co.MA', 'cocap.MP') => ('-d', 'EA', 'co.MA', 'cocap.MP')
('-d', 'AA', 'MA', 'cocap.MP') => ('-d', 'T', 'MA', 'cocap.MP')
('-d', 'AA', 'MA', 'cocap.MP') => ('-d', 'EA', 'MA', 'cocap.MP')
('-d', 'AA', 'MA', 'co.MP') => ('-d', 'T', 'MA', 'co.MP')
('-d', 'AA', 'MA', 'co.MP') => ('-d', 'EA', 'MA', 'co.MP')
('-d', 'AA', 'SBP', 'co.MP') => ('-d', 'T', 'SBP', 'co.MP')
('-d', 'AA', 'SBP', 'co.MP') => ('-d', 'EA', 'SBP', 'co.MP')
('-d', 'AA', 'SBP', 'cocap.MP') => ('-d', 'T', 'SBP', 'cocap.MP')
('-d', 'AA', 'SBP', 'cocap.MP') => ('-d', 'EA', 'SBP', 'cocap.MP')
('-d', 'AA', 'co.SBP', 'cocap.MP') => ('-d', 'T', 'co.SBP', 'cocap.MP')
('-d', 'AA', 'co.SBP', 'cocap.MP') => ('-d', 'EA', 'co.SBP', 'cocap.MP')
('-d', 'AA', 'co.SBP', 'MP') => ('-d', 'T', 'co.SBP', 'MP')
('-d', 'AA', 'co.SBP', 'MP') => ('-d', 'EA', 'co.SBP', 'MP')
('-d', 'A', 'AM', 'co.MP') => ('-d', 'AA', 'AM', 'co.MP')
('-d', 'AA', 'AM', 'co.MP') => ('-d', 'T', 'AM', 'co.MP')
('-d', 'AA', 'AM', 'co.MP') => ('-d', 'EA', 'AM', 'co.MP')
('-d', 'AA', 'AM', 'cocap.MP') => ('-d', 'T', 'AM', 'cocap.MP')
('-d', 'AA', 'AM', 'cocap.MP') => ('-d', 'EA', 'AM', 'cocap.MP')
('-d', 'AA', 'co.AM', 'cocap.MP') => ('-d', 'T', 'co.AM', 'cocap.MP')
('-d', 'AA', 'co.AM', 'cocap.MP') => ('-d', 'EA', 'co.AM', 'cocap.MP')
('-d', 'AA', 'co.AM', 'MP') => ('-d', 'T', 'co.AM', 'MP')
('-d', 'AA', 'co.AM', 'MP') => ('-d', 'EA', 'co.AM', 'MP')
('-d', 'A', 'co.MA', 'PH') => ('-d', 'AA', 'co.MA', 'PH')
('-d', 'A', 'MA', 'PH') => ('-d', 'AA', 'MA', 'PH')
('-d', 'AA', 'MA', 'PH') => ('-d', 'T', 'MA', 'PH')
('-d', 'AA', 'MA', 'PH') => ('-d', 'EA', 'MA', 'PH')
('-d', 'AA', 'co.MA', 'PH') => ('-d', 'T', 'co.MA', 'PH')
('-d', 'AA', 'co.MA', 'PH') => ('-d', 'EA', 'co.MA', 'PH')
('-d', 'A', 'co.SBP', 'PH') => ('-d', 'AA', 'co.SBP', 'PH')
('-d', 'A', 'SBP', 'PH') => ('-d', 'AA', 'SBP', 'PH')
('-d', 'AA', 'SBP', 'PH') => ('-d', 'T', 'SBP', 'PH')
('-d', 'AA', 'SBP', 'PH') => ('-d', 'EA', 'SBP', 'PH')
('-d', 'AA', 'co.SBP', 'PH') => ('-d', 'T', 'co.SBP', 'PH')
('-d', 'AA', 'co.SBP', 'PH') => ('-d', 'EA', 'co.SBP', 'PH')
('-d', 'AA', 'co.AM', 'PH') => ('-d', 'T', 'co.AM', 'PH')
('-d', 'AA', 'co.AM', 'PH') => ('-d', 'EA', 'co.AM', 'PH')
('-d', 'AA', 'AM', 'PH') => ('-d', 'T', 'AM', 'PH')
('-d', 'AA', 'AM', 'PH') => ('-d', 'EA', 'AM', 'PH')
('p', 'A', 'AM', 'PH') => ('p', 'AA', 'AM', 'PH')
('p', 'A', 'co.AM', 'PH') => ('p', 'AA', 'co.AM', 'PH')
('p', 'A', 'co.AM', 'MP') => ('p', 'AA', 'co.AM', 'MP')
('p', 'A', 'co.AM', 'cocap.MP') => ('p', 'AA', 'co.AM', 'cocap.MP')
('p', 'A', 'AM', 'cocap.MP') => ('p', 'AA', 'AM', 'cocap.MP')
('p', 'A', 'SBP', 'cocap.MP') => ('p', 'AA', 'SBP', 'cocap.MP')
('p', 'A', 'co.SBP', 'cocap.MP') => ('p', 'AA', 'co.SBP', 'cocap.MP')
('p', 'A', 'co.SBP', 'MP') => ('p', 'AA', 'co.SBP', 'MP')
('p', 'A', 'SBP', 'co.MP') => ('p', 'AA', 'SBP', 'co.MP')
('p', 'A', 'MA', 'co.MP') => ('p', 'AA', 'MA', 'co.MP')
('p', 'A', 'MA', 'cocap.MP') => ('p', 'AA', 'MA', 'cocap.MP')
('p', 'A', 'co.MA', 'cocap.MP') => ('p', 'AA', 'co.MA', 'cocap.MP')
('p', 'A', 'co.MA', 'MP') => ('p', 'AA', 'co.MA', 'MP')
('p', 'AA', 'co.MA', 'MP') => ('p', 'T', 'co.MA', 'MP')
('p', 'AA', 'co.MA', 'MP') => ('p', 'EA', 'co.MA', 'MP')
('p', 'AA', 'co.MA', 'cocap.MP') => ('p', 'T', 'co.MA', 'cocap.MP')
('p', 'AA', 'co.MA', 'cocap.MP') => ('p', 'EA', 'co.MA', 'cocap.MP')
('p', 'AA', 'MA', 'cocap.MP') => ('p', 'T', 'MA', 'cocap.MP')
('p', 'AA', 'MA', 'cocap.MP') => ('p', 'EA', 'MA', 'cocap.MP')
('p', 'AA', 'MA', 'co.MP') => ('p', 'T', 'MA', 'co.MP')
('p', 'AA', 'MA', 'co.MP') => ('p', 'EA', 'MA', 'co.MP')
('p', 'AA', 'SBP', 'co.MP') => ('p', 'T', 'SBP', 'co.MP')
('p', 'AA', 'SBP', 'co.MP') => ('p', 'EA', 'SBP', 'co.MP')
('p', 'AA', 'SBP', 'cocap.MP') => ('p', 'T', 'SBP', 'cocap.MP')
('p', 'AA', 'SBP', 'cocap.MP') => ('p', 'EA', 'SBP', 'cocap.MP')
('p', 'AA', 'co.SBP', 'cocap.MP') => ('p', 'T', 'co.SBP', 'cocap.MP')
('p', 'AA', 'co.SBP', 'cocap.MP') => ('p', 'EA', 'co.SBP', 'cocap.MP')
('p', 'AA', 'co.SBP', 'MP') => ('p', 'T', 'co.SBP', 'MP')
('p', 'AA', 'co.SBP', 'MP') => ('p', 'EA', 'co.SBP', 'MP')
('p', 'A', 'AM', 'co.MP') => ('p', 'AA', 'AM', 'co.MP')
('p', 'AA', 'AM', 'co.MP') => ('p', 'T', 'AM', 'co.MP')
('p', 'AA', 'AM', 'co.MP') => ('p', 'EA', 'AM', 'co.MP')
('p', 'AA', 'AM', 'cocap.MP') => ('p', 'T', 'AM', 'cocap.MP')
('p', 'AA', 'AM', 'cocap.MP') => ('p', 'EA', 'AM', 'cocap.MP')
('p', 'AA', 'co.AM', 'cocap.MP') => ('p', 'T', 'co.AM', 'cocap.MP')
('p', 'AA', 'co.AM', 'cocap.MP') => ('p', 'EA', 'co.AM', 'cocap.MP')
('p', 'AA', 'co.AM', 'MP') => ('p', 'T', 'co.AM', 'MP')
('p', 'AA', 'co.AM', 'MP') => ('p', 'EA', 'co.AM', 'MP')
('p', 'A', 'co.MA', 'PH') => ('p', 'AA', 'co.MA', 'PH')
('p', 'A', 'MA', 'PH') => ('p', 'AA', 'MA', 'PH')
('p', 'AA', 'MA', 'PH') => ('p', 'T', 'MA', 'PH')
('p', 'AA', 'MA', 'PH') => ('p', 'EA', 'MA', 'PH')
('p', 'AA', 'co.MA', 'PH') => ('p', 'T', 'co.MA', 'PH')
('p', 'AA', 'co.MA', 'PH') => ('p', 'EA', 'co.MA', 'PH')
('p', 'A', 'co.SBP', 'PH') => ('p', 'AA', 'co.SBP', 'PH')
('p', 'A', 'SBP', 'PH') => ('p', 'AA', 'SBP', 'PH')
('p', 'AA', 'SBP', 'PH') => ('p', 'T', 'SBP', 'PH')
('p', 'AA', 'SBP', 'PH') => ('p', 'EA', 'SBP', 'PH')
('p', 'AA', 'co.SBP', 'PH') => ('p', 'T', 'co.SBP', 'PH')
('p', 'AA', 'co.SBP', 'PH') => ('p', 'EA', 'co.SBP', 'PH')
('p', 'AA', 'co.AM', 'PH') => ('p', 'T', 'co.AM', 'PH')
('p', 'AA', 'co.AM', 'PH') => ('p', 'EA', 'co.AM', 'PH')
('p', 'AA', 'AM', 'PH') => ('p', 'T', 'AM', 'PH')
('p', 'AA', 'AM', 'PH') => ('p', 'EA', 'AM', 'PH')
('p', 'A', 'SBP', 'co.Sigma_2P') => ('-d', 'A', 'SBP', 'co.Sigma_2P')
('p', 'A', 'SBP', 'co.Sigma_2P') => ('p', 'AA', 'SBP', 'co.Sigma_2P')
('p', 'A', 'co.SBP', 'Sigma_2P') => ('-d', 'A', 'co.SBP', 'Sigma_2P')
('p', 'A', 'co.SBP', 'Sigma_2P') => ('p', 'AA', 'co.SBP', 'Sigma_2P')
('p', 'A', 'co.MA', 'Sigma_2P') => ('-d', 'A', 'co.MA', 'Sigma_2P')
('p', 'A', 'co.MA', 'Sigma_2P') => ('p', 'AA', 'co.MA', 'Sigma_2P')
('p', 'A', 'MA', 'co.Sigma_2P') => ('-d', 'A', 'MA', 'co.Sigma_2P')
('p', 'A', 'MA', 'co.Sigma_2P') => ('p', 'AA', 'MA', 'co.Sigma_2P')
('-d', 'A', 'MA', 'Delta_3P') => ('-d', 'AA', 'MA', 'Delta_3P')
('-d', 'A', 'co.MA', 'Delta_3P') => ('-d', 'AA', 'co.MA', 'Delta_3P')
('-d', 'AA', 'co.MA', 'Delta_3P') => ('-d', 'T', 'co.MA', 'Delta_3P')
('-d', 'AA', 'co.MA', 'Delta_3P') => ('-d', 'EA', 'co.MA', 'Delta_3P')
('-d', 'AA', 'MA', 'Delta_3P') => ('-d', 'T', 'MA', 'Delta_3P')
('-d', 'AA', 'MA', 'Delta_3P') => ('-d', 'EA', 'MA', 'Delta_3P')
('p', 'A', 'MA', 'Delta_3P') => ('p', 'AA', 'MA', 'Delta_3P')
('p', 'A', 'co.MA', 'Delta_3P') => ('p', 'AA', 'co.MA', 'Delta_3P')
('p', 'AA', 'co.MA', 'Delta_3P') => ('p', 'T', 'co.MA', 'Delta_3P')
('p', 'AA', 'co.MA', 'Delta_3P') => ('p', 'EA', 'co.MA', 'Delta_3P')
('p', 'AA', 'MA', 'Delta_3P') => ('p', 'T', 'MA', 'Delta_3P')
('p', 'AA', 'MA', 'Delta_3P') => ('p', 'EA', 'MA', 'Delta_3P')
('p', 'AA', 'MA', 'co.Sigma_2P') => ('-d', 'AA', 'MA', 'co.Sigma_2P')
('p', 'AA', 'MA', 'co.Sigma_2P') => ('p', 'T', 'MA', 'co.Sigma_2P')
('p', 'AA', 'MA', 'co.Sigma_2P') => ('p', 'EA', 'MA', 'co.Sigma_2P')
('p', 'AA', 'co.MA', 'Sigma_2P') => ('-d', 'AA', 'co.MA', 'Sigma_2P')
('p', 'AA', 'co.MA', 'Sigma_2P') => ('p', 'T', 'co.MA', 'Sigma_2P')
('p', 'AA', 'co.MA', 'Sigma_2P') => ('p', 'EA', 'co.MA', 'Sigma_2P')
('p', 'EA', 'co.MA', 'Sigma_2P') => ('-d', 'EA', 'co.MA', 'Sigma_2P')
('p', 'EA', 'MA', 'co.Sigma_2P') => ('-d', 'EA', 'MA', 'co.Sigma_2P')
('p', 'T', 'co.MA', 'Sigma_2P') => ('-d', 'T', 'co.MA', 'Sigma_2P')
('p', 'T', 'MA', 'co.Sigma_2P') => ('-d', 'T', 'MA', 'co.Sigma_2P')
('-d', 'A', 'co.SBP', 'Delta_3P') => ('-d', 'AA', 'co.SBP', 'Delta_3P')
('-d', 'A', 'SBP', 'Delta_3P') => ('-d', 'AA', 'SBP', 'Delta_3P')
('-d', 'AA', 'SBP', 'Delta_3P') => ('-d', 'T', 'SBP', 'Delta_3P')
('-d', 'AA', 'SBP', 'Delta_3P') => ('-d', 'EA', 'SBP', 'Delta_3P')
('-d', 'AA', 'co.SBP', 'Delta_3P') => ('-d', 'T', 'co.SBP', 'Delta_3P')
('-d', 'AA', 'co.SBP', 'Delta_3P') => ('-d', 'EA', 'co.SBP', 'Delta_3P')
('p', 'A', 'co.SBP', 'Delta_3P') => ('p', 'AA', 'co.SBP', 'Delta_3P')
('p', 'A', 'SBP', 'Delta_3P') => ('p', 'AA', 'SBP', 'Delta_3P')
('p', 'AA', 'SBP', 'Delta_3P') => ('p', 'T', 'SBP', 'Delta_3P')
('p', 'AA', 'SBP', 'Delta_3P') => ('p', 'EA', 'SBP', 'Delta_3P')
('p', 'AA', 'co.SBP', 'Delta_3P') => ('p', 'T', 'co.SBP', 'Delta_3P')
('p', 'AA', 'co.SBP', 'Delta_3P') => ('p', 'EA', 'co.SBP', 'Delta_3P')
('p', 'AA', 'co.SBP', 'Sigma_2P') => ('-d', 'AA', 'co.SBP', 'Sigma_2P')
('p', 'AA', 'co.SBP', 'Sigma_2P') => ('p', 'T', 'co.SBP', 'Sigma_2P')
('p', 'AA', 'co.SBP', 'Sigma_2P') => ('p', 'EA', 'co.SBP', 'Sigma_2P')
('p', 'AA', 'SBP', 'co.Sigma_2P') => ('-d', 'AA', 'SBP', 'co.Sigma_2P')
('p', 'AA', 'SBP', 'co.Sigma_2P') => ('p', 'T', 'SBP', 'co.Sigma_2P')
('p', 'AA', 'SBP', 'co.Sigma_2P') => ('p', 'EA', 'SBP', 'co.Sigma_2P')
('p', 'EA', 'SBP', 'co.Sigma_2P') => ('-d', 'EA', 'SBP', 'co.Sigma_2P')
('p', 'EA', 'co.SBP', 'Sigma_2P') => ('-d', 'EA', 'co.SBP', 'Sigma_2P')
('p', 'T', 'SBP', 'co.Sigma_2P') => ('-d', 'T', 'SBP', 'co.Sigma_2P')
('p', 'T', 'co.SBP', 'Sigma_2P') => ('-d', 'T', 'co.SBP', 'Sigma_2P')
('-d', 'A', 'AM', 'Delta_3P') => ('-d', 'AA', 'AM', 'Delta_3P')
('-d', 'A', 'co.AM', 'Delta_3P') => ('-d', 'AA', 'co.AM', 'Delta_3P')
('-d', 'AA', 'co.AM', 'Delta_3P') => ('-d', 'T', 'co.AM', 'Delta_3P')
('-d', 'AA', 'co.AM', 'Delta_3P') => ('-d', 'EA', 'co.AM', 'Delta_3P')
('-d', 'AA', 'AM', 'Delta_3P') => ('-d', 'T', 'AM', 'Delta_3P')
('-d', 'AA', 'AM', 'Delta_3P') => ('-d', 'EA', 'AM', 'Delta_3P')
('p', 'A', 'AM', 'Delta_3P') => ('p', 'AA', 'AM', 'Delta_3P')
('p', 'A', 'co.AM', 'Delta_3P') => ('p', 'AA', 'co.AM', 'Delta_3P')
('p', 'AA', 'co.AM', 'Delta_3P') => ('p', 'T', 'co.AM', 'Delta_3P')
('p', 'AA', 'co.AM', 'Delta_3P') => ('p', 'EA', 'co.AM', 'Delta_3P')
('p', 'AA', 'AM', 'Delta_3P') => ('p', 'T', 'AM', 'Delta_3P')
('p', 'AA', 'AM', 'Delta_3P') => ('p', 'EA', 'AM', 'Delta_3P')
('p', 'AA', 'AM', 'co.Sigma_2P') => ('-d', 'AA', 'AM', 'co.Sigma_2P')
('p', 'AA', 'AM', 'co.Sigma_2P') => ('p', 'T', 'AM', 'co.Sigma_2P')
('p', 'AA', 'AM', 'co.Sigma_2P') => ('p', 'EA', 'AM', 'co.Sigma_2P')
('p', 'AA', 'co.AM', 'Sigma_2P') => ('-d', 'AA', 'co.AM', 'Sigma_2P')
('p', 'AA', 'co.AM', 'Sigma_2P') => ('p', 'T', 'co.AM', 'Sigma_2P')
('p', 'AA', 'co.AM', 'Sigma_2P') => ('p', 'EA', 'co.AM', 'Sigma_2P')
('p', 'EA', 'co.AM', 'Sigma_2P') => ('-d', 'EA', 'co.AM', 'Sigma_2P')
('p', 'EA', 'AM', 'co.Sigma_2P') => ('-d', 'EA', 'AM', 'co.Sigma_2P')
('p', 'T', 'co.AM', 'Sigma_2P') => ('-d', 'T', 'co.AM', 'Sigma_2P')
('p', 'T', 'AM', 'co.Sigma_2P') => ('-d', 'T', 'AM', 'co.Sigma_2P')
('p', 'A', 'RG(1)', 'PSPACE') => ('-d', 'A', 'RG(1)', 'PSPACE')
('p', 'A', 'RG(1)', 'PSPACE') => ('p', 'R', 'RG(1)', 'PSPACE')
('p', 'A', 'RG(1)', 'PSPACE') => ('p', 'AA', 'RG(1)', 'PSPACE')
('d', 'A', 'PSPACE', 'co.AWPP') => ('-p', 'A', 'PSPACE', 'co.AWPP')
('d', 'A', 'PSPACE', 'AWPP') => ('-p', 'A', 'PSPACE', 'AWPP')
('p', 'E', 'P^Sharp-P', 'PSPACE') => ('-d', 'E', 'P^Sharp-P', 'PSPACE')
('p', 'A', 'Delta_2P', 'PSPACE') => ('-d', 'A', 'Delta_2P', 'PSPACE')
('p', 'A', 'Delta_2P', 'PSPACE') => ('p', 'AA', 'Delta_2P', 'PSPACE')
('-d', 'A', 'Delta_2P', 'PSPACE/poly') => ('-d', 'AA', 'Delta_2P', 'PSPACE/poly')
('-d', 'AA', 'Delta_2P', 'PSPACE/poly') => ('-d', 'T', 'Delta_2P', 'PSPACE/poly')
('-d', 'AA', 'Delta_2P', 'PSPACE/poly') => ('-d', 'EA', 'Delta_2P', 'PSPACE/poly')
('p', 'A', 'Delta_2P', 'PSPACE/poly') => ('p', 'AA', 'Delta_2P', 'PSPACE/poly')
('p', 'AA', 'Delta_2P', 'PSPACE/poly') => ('p', 'T', 'Delta_2P', 'PSPACE/poly')
('p', 'AA', 'Delta_2P', 'PSPACE/poly') => ('p', 'EA', 'Delta_2P', 'PSPACE/poly')
('d', 'A', 'PSPACE', 'PP') => ('-p', 'A', 'PSPACE', 'PP')
('p', 'AA', 'Delta_2P', 'PSPACE') => ('-d', 'AA', 'Delta_2P', 'PSPACE')
('p', 'AA', 'Delta_2P', 'PSPACE') => ('p', 'T', 'Delta_2P', 'PSPACE')
('p', 'AA', 'Delta_2P', 'PSPACE') => ('p', 'EA', 'Delta_2P', 'PSPACE')
('p', 'EA', 'Delta_2P', 'PSPACE') => ('-d', 'EA', 'Delta_2P', 'PSPACE')
('p', 'T', 'Delta_2P', 'PSPACE') => ('-d', 'T', 'Delta_2P', 'PSPACE')
('p', 'A', 'S_2P', 'PSPACE') => ('-d', 'A', 'S_2P', 'PSPACE')
('p', 'A', 'S_2P', 'PSPACE') => ('p', 'AA', 'S_2P', 'PSPACE')
('-d', 'A', 'S_2P', 'PSPACE/poly') => ('-d', 'AA', 'S_2P', 'PSPACE/poly')
('-d', 'AA', 'S_2P', 'PSPACE/poly') => ('-d', 'T', 'S_2P', 'PSPACE/poly')
('-d', 'AA', 'S_2P', 'PSPACE/poly') => ('-d', 'EA', 'S_2P', 'PSPACE/poly')
('p', 'A', 'S_2P', 'PSPACE/poly') => ('p', 'AA', 'S_2P', 'PSPACE/poly')
('p', 'AA', 'S_2P', 'PSPACE/poly') => ('p', 'T', 'S_2P', 'PSPACE/poly')
('p', 'AA', 'S_2P', 'PSPACE/poly') => ('p', 'EA', 'S_2P', 'PSPACE/poly')
('p', 'AA', 'S_2P', 'PSPACE') => ('-d', 'AA', 'S_2P', 'PSPACE')
('p', 'AA', 'S_2P', 'PSPACE') => ('p', 'T', 'S_2P', 'PSPACE')
('p', 'AA', 'S_2P', 'PSPACE') => ('p', 'EA', 'S_2P', 'PSPACE')
('p', 'EA', 'S_2P', 'PSPACE') => ('-d', 'EA', 'S_2P', 'PSPACE')
('p', 'T', 'S_2P', 'PSPACE') => ('-d', 'T', 'S_2P', 'PSPACE')
('-d', 'A', 'RG(1)', 'PSPACE/poly') => ('-d', 'R', 'RG(1)', 'PSPACE/poly')
('-d', 'A', 'RG(1)', 'PSPACE/poly') => ('-d', 'AA', 'RG(1)', 'PSPACE/poly')
('-d', 'AA', 'RG(1)', 'PSPACE/poly') => ('-d', 'T', 'RG(1)', 'PSPACE/poly')
('-d', 'AA', 'RG(1)', 'PSPACE/poly') => ('-d', 'EA', 'RG(1)', 'PSPACE/poly')
('p', 'A', 'RG(1)', 'PSPACE/poly') => ('p', 'R', 'RG(1)', 'PSPACE/poly')
('p', 'A', 'RG(1)', 'PSPACE/poly') => ('p', 'AA', 'RG(1)', 'PSPACE/poly')
('p', 'AA', 'RG(1)', 'PSPACE/poly') => ('p', 'T', 'RG(1)', 'PSPACE/poly')
('p', 'AA', 'RG(1)', 'PSPACE/poly') => ('p', 'EA', 'RG(1)', 'PSPACE/poly')
('p', 'AA', 'RG(1)', 'PSPACE') => ('-d', 'AA', 'RG(1)', 'PSPACE')
('p', 'AA', 'RG(1)', 'PSPACE') => ('p', 'T', 'RG(1)', 'PSPACE')
('p', 'AA', 'RG(1)', 'PSPACE') => ('p', 'EA', 'RG(1)', 'PSPACE')
('p', 'EA', 'RG(1)', 'PSPACE') => ('-d', 'EA', 'RG(1)', 'PSPACE')
('p', 'T', 'RG(1)', 'PSPACE') => ('-d', 'T', 'RG(1)', 'PSPACE')
('p', 'R', 'RG(1)', 'PSPACE') => ('-d', 'R', 'RG(1)', 'PSPACE')
('p', 'A', 'PH', 'PP/poly') => ('-d', 'A', 'PH', 'PP/poly')
('p', 'A', 'PH', 'PP/poly') => ('p', 'AA', 'PH', 'PP/poly')
('d', 'A', 'PP/poly', 'co.AWPP') => ('-p', 'A', 'PP/poly', 'co.AWPP')
('d', 'A', 'PP/poly', 'AWPP') => ('-p', 'A', 'PP/poly', 'AWPP')
('-d', 'A', 'PH', 'ALL') => ('-d', 'AA', 'PH', 'ALL')
('-d', 'A', 'co.Sigma_2P', 'ALL') => ('-d', 'AA', 'co.Sigma_2P', 'ALL')
('-d', 'A', 'Sigma_2P', 'ALL') => ('-d', 'AA', 'Sigma_2P', 'ALL')
('-d', 'A', 'cocap.Sigma_2P', 'ALL') => ('-d', 'AA', 'cocap.Sigma_2P', 'ALL')
('-d', 'AA', 'cocap.Sigma_2P', 'ALL') => ('-d', 'T', 'cocap.Sigma_2P', 'ALL')
('-d', 'AA', 'cocap.Sigma_2P', 'ALL') => ('-d', 'EA', 'cocap.Sigma_2P', 'ALL')
('-d', 'AA', 'Sigma_2P', 'ALL') => ('-d', 'T', 'Sigma_2P', 'ALL')
('-d', 'AA', 'Sigma_2P', 'ALL') => ('-d', 'EA', 'Sigma_2P', 'ALL')
('-d', 'AA', 'co.Sigma_2P', 'ALL') => ('-d', 'T', 'co.Sigma_2P', 'ALL')
('-d', 'AA', 'co.Sigma_2P', 'ALL') => ('-d', 'EA', 'co.Sigma_2P', 'ALL')
('-d', 'A', 'Delta_3P', 'ALL') => ('-d', 'AA', 'Delta_3P', 'ALL')
('-d', 'AA', 'Delta_3P', 'ALL') => ('-d', 'T', 'Delta_3P', 'ALL')
('-d', 'AA', 'Delta_3P', 'ALL') => ('-d', 'EA', 'Delta_3P', 'ALL')
('-d', 'AA', 'PH', 'ALL') => ('-d', 'T', 'PH', 'ALL')
('-d', 'AA', 'PH', 'ALL') => ('-d', 'EA', 'PH', 'ALL')
('p', 'A', 'PH', 'ALL') => ('p', 'AA', 'PH', 'ALL')
('p', 'A', 'co.Sigma_2P', 'ALL') => ('p', 'AA', 'co.Sigma_2P', 'ALL')
('p', 'A', 'Sigma_2P', 'ALL') => ('p', 'AA', 'Sigma_2P', 'ALL')
('p', 'A', 'cocap.Sigma_2P', 'ALL') => ('p', 'AA', 'cocap.Sigma_2P', 'ALL')
('p', 'AA', 'cocap.Sigma_2P', 'ALL') => ('p', 'T', 'cocap.Sigma_2P', 'ALL')
('p', 'AA', 'cocap.Sigma_2P', 'ALL') => ('p', 'EA', 'cocap.Sigma_2P', 'ALL')
('p', 'AA', 'Sigma_2P', 'ALL') => ('p', 'T', 'Sigma_2P', 'ALL')
('p', 'AA', 'Sigma_2P', 'ALL') => ('p', 'EA', 'Sigma_2P', 'ALL')
('p', 'AA', 'co.Sigma_2P', 'ALL') => ('p', 'T', 'co.Sigma_2P', 'ALL')
('p', 'AA', 'co.Sigma_2P', 'ALL') => ('p', 'EA', 'co.Sigma_2P', 'ALL')
('p', 'A', 'Delta_3P', 'ALL') => ('p', 'AA', 'Delta_3P', 'ALL')
('p', 'AA', 'Delta_3P', 'ALL') => ('p', 'T', 'Delta_3P', 'ALL')
('p', 'AA', 'Delta_3P', 'ALL') => ('p', 'EA', 'Delta_3P', 'ALL')
('p', 'AA', 'PH', 'ALL') => ('p', 'T', 'PH', 'ALL')
('p', 'AA', 'PH', 'ALL') => ('p', 'EA', 'PH', 'ALL')
('p', 'A', 'co.Sigma_2P', 'PP/poly') => ('-d', 'A', 'co.Sigma_2P', 'PP/poly')
('p', 'A', 'co.Sigma_2P', 'PP/poly') => ('p', 'AA', 'co.Sigma_2P', 'PP/poly')
('p', 'A', 'Sigma_2P', 'PP/poly') => ('-d', 'A', 'Sigma_2P', 'PP/poly')
('p', 'A', 'Sigma_2P', 'PP/poly') => ('p', 'AA', 'Sigma_2P', 'PP/poly')
('p', 'A', 'cocap.Sigma_2P', 'PP/poly') => ('-d', 'A', 'cocap.Sigma_2P', 'PP/poly')
('p', 'A', 'cocap.Sigma_2P', 'PP/poly') => ('p', 'AA', 'cocap.Sigma_2P', 'PP/poly')
('p', 'E', 'P^Sharp-P', 'PP/poly') => ('-d', 'E', 'P^Sharp-P', 'PP/poly')
('p', 'A', 'Delta_2P', 'PP/poly') => ('-d', 'A', 'Delta_2P', 'PP/poly')
('p', 'A', 'Delta_2P', 'PP/poly') => ('p', 'AA', 'Delta_2P', 'PP/poly')
('d', 'A', 'PP/poly', 'PP') => ('-p', 'A', 'PP/poly', 'PP')
('p', 'AA', 'Delta_2P', 'PP/poly') => ('-d', 'AA', 'Delta_2P', 'PP/poly')
('p', 'AA', 'Delta_2P', 'PP/poly') => ('p', 'T', 'Delta_2P', 'PP/poly')
('p', 'AA', 'Delta_2P', 'PP/poly') => ('p', 'EA', 'Delta_2P', 'PP/poly')
('p', 'EA', 'Delta_2P', 'PP/poly') => ('-d', 'EA', 'Delta_2P', 'PP/poly')
('p', 'T', 'Delta_2P', 'PP/poly') => ('-d', 'T', 'Delta_2P', 'PP/poly')
('p', 'A', 'S_2P', 'PP/poly') => ('-d', 'A', 'S_2P', 'PP/poly')
('p', 'A', 'S_2P', 'PP/poly') => ('p', 'AA', 'S_2P', 'PP/poly')
('p', 'AA', 'S_2P', 'PP/poly') => ('-d', 'AA', 'S_2P', 'PP/poly')
('p', 'AA', 'S_2P', 'PP/poly') => ('p', 'T', 'S_2P', 'PP/poly')
('p', 'AA', 'S_2P', 'PP/poly') => ('p', 'EA', 'S_2P', 'PP/poly')
('p', 'EA', 'S_2P', 'PP/poly') => ('-d', 'EA', 'S_2P', 'PP/poly')
('p', 'T', 'S_2P', 'PP/poly') => ('-d', 'T', 'S_2P', 'PP/poly')
('-d', 'A', 'cocap.Sigma_2P', 'PSPACE/poly') => ('-d', 'AA', 'cocap.Sigma_2P', 'PSPACE/poly')
('-d', 'A', 'cocap.Sigma_2P', 'NEXP/poly') => ('-d', 'AA', 'cocap.Sigma_2P', 'NEXP/poly')
('-d', 'AA', 'cocap.Sigma_2P', 'NEXP/poly') => ('-d', 'T', 'cocap.Sigma_2P', 'NEXP/poly')
('-d', 'AA', 'cocap.Sigma_2P', 'NEXP/poly') => ('-d', 'EA', 'cocap.Sigma_2P', 'NEXP/poly')
('-d', 'AA', 'cocap.Sigma_2P', 'PSPACE/poly') => ('-d', 'T', 'cocap.Sigma_2P', 'PSPACE/poly')
('-d', 'AA', 'cocap.Sigma_2P', 'PSPACE/poly') => ('-d', 'EA', 'cocap.Sigma_2P', 'PSPACE/poly')
('p', 'A', 'cocap.Sigma_2P', 'PSPACE/poly') => ('p', 'AA', 'cocap.Sigma_2P', 'PSPACE/poly')
('p', 'A', 'cocap.Sigma_2P', 'NEXP/poly') => ('p', 'AA', 'cocap.Sigma_2P', 'NEXP/poly')
('p', 'AA', 'cocap.Sigma_2P', 'NEXP/poly') => ('p', 'T', 'cocap.Sigma_2P', 'NEXP/poly')
('p', 'AA', 'cocap.Sigma_2P', 'NEXP/poly') => ('p', 'EA', 'cocap.Sigma_2P', 'NEXP/poly')
('p', 'AA', 'cocap.Sigma_2P', 'PSPACE/poly') => ('p', 'T', 'cocap.Sigma_2P', 'PSPACE/poly')
('p', 'AA', 'cocap.Sigma_2P', 'PSPACE/poly') => ('p', 'EA', 'cocap.Sigma_2P', 'PSPACE/poly')
('p', 'AA', 'cocap.Sigma_2P', 'PP/poly') => ('-d', 'AA', 'cocap.Sigma_2P', 'PP/poly')
('p', 'AA', 'cocap.Sigma_2P', 'PP/poly') => ('p', 'T', 'cocap.Sigma_2P', 'PP/poly')
('p', 'AA', 'cocap.Sigma_2P', 'PP/poly') => ('p', 'EA', 'cocap.Sigma_2P', 'PP/poly')
('p', 'EA', 'cocap.Sigma_2P', 'PP/poly') => ('-d', 'EA', 'cocap.Sigma_2P', 'PP/poly')
('p', 'T', 'cocap.Sigma_2P', 'PP/poly') => ('-d', 'T', 'cocap.Sigma_2P', 'PP/poly')
('-d', 'A', 'Sigma_2P', 'PSPACE/poly') => ('-d', 'AA', 'Sigma_2P', 'PSPACE/poly')
('-d', 'A', 'co.Sigma_2P', 'PSPACE/poly') => ('-d', 'AA', 'co.Sigma_2P', 'PSPACE/poly')
('-d', 'A', 'co.Sigma_2P', 'NEXP/poly') => ('-d', 'AA', 'co.Sigma_2P', 'NEXP/poly')
('-d', 'A', 'Sigma_2P', 'NEXP/poly') => ('-d', 'AA', 'Sigma_2P', 'NEXP/poly')
('-d', 'AA', 'Sigma_2P', 'NEXP/poly') => ('-d', 'T', 'Sigma_2P', 'NEXP/poly')
('-d', 'AA', 'Sigma_2P', 'NEXP/poly') => ('-d', 'EA', 'Sigma_2P', 'NEXP/poly')
('-d', 'AA', 'co.Sigma_2P', 'NEXP/poly') => ('-d', 'T', 'co.Sigma_2P', 'NEXP/poly')
('-d', 'AA', 'co.Sigma_2P', 'NEXP/poly') => ('-d', 'EA', 'co.Sigma_2P', 'NEXP/poly')
('-d', 'AA', 'co.Sigma_2P', 'PSPACE/poly') => ('-d', 'T', 'co.Sigma_2P', 'PSPACE/poly')
('-d', 'AA', 'co.Sigma_2P', 'PSPACE/poly') => ('-d', 'EA', 'co.Sigma_2P', 'PSPACE/poly')
('-d', 'AA', 'Sigma_2P', 'PSPACE/poly') => ('-d', 'T', 'Sigma_2P', 'PSPACE/poly')
('-d', 'AA', 'Sigma_2P', 'PSPACE/poly') => ('-d', 'EA', 'Sigma_2P', 'PSPACE/poly')
('p', 'A', 'Sigma_2P', 'PSPACE/poly') => ('p', 'AA', 'Sigma_2P', 'PSPACE/poly')
('p', 'A', 'co.Sigma_2P', 'PSPACE/poly') => ('p', 'AA', 'co.Sigma_2P', 'PSPACE/poly')
('p', 'A', 'co.Sigma_2P', 'NEXP/poly') => ('p', 'AA', 'co.Sigma_2P', 'NEXP/poly')
('p', 'A', 'Sigma_2P', 'NEXP/poly') => ('p', 'AA', 'Sigma_2P', 'NEXP/poly')
('p', 'AA', 'Sigma_2P', 'NEXP/poly') => ('p', 'T', 'Sigma_2P', 'NEXP/poly')
('p', 'AA', 'Sigma_2P', 'NEXP/poly') => ('p', 'EA', 'Sigma_2P', 'NEXP/poly')
('p', 'AA', 'co.Sigma_2P', 'NEXP/poly') => ('p', 'T', 'co.Sigma_2P', 'NEXP/poly')
('p', 'AA', 'co.Sigma_2P', 'NEXP/poly') => ('p', 'EA', 'co.Sigma_2P', 'NEXP/poly')
('p', 'AA', 'co.Sigma_2P', 'PSPACE/poly') => ('p', 'T', 'co.Sigma_2P', 'PSPACE/poly')
('p', 'AA', 'co.Sigma_2P', 'PSPACE/poly') => ('p', 'EA', 'co.Sigma_2P', 'PSPACE/poly')
('p', 'AA', 'Sigma_2P', 'PSPACE/poly') => ('p', 'T', 'Sigma_2P', 'PSPACE/poly')
('p', 'AA', 'Sigma_2P', 'PSPACE/poly') => ('p', 'EA', 'Sigma_2P', 'PSPACE/poly')
('p', 'AA', 'Sigma_2P', 'PP/poly') => ('-d', 'AA', 'Sigma_2P', 'PP/poly')
('p', 'AA', 'Sigma_2P', 'PP/poly') => ('p', 'T', 'Sigma_2P', 'PP/poly')
('p', 'AA', 'Sigma_2P', 'PP/poly') => ('p', 'EA', 'Sigma_2P', 'PP/poly')
('p', 'AA', 'co.Sigma_2P', 'PP/poly') => ('-d', 'AA', 'co.Sigma_2P', 'PP/poly')
('p', 'AA', 'co.Sigma_2P', 'PP/poly') => ('p', 'T', 'co.Sigma_2P', 'PP/poly')
('p', 'AA', 'co.Sigma_2P', 'PP/poly') => ('p', 'EA', 'co.Sigma_2P', 'PP/poly')
('p', 'EA', 'co.Sigma_2P', 'PP/poly') => ('-d', 'EA', 'co.Sigma_2P', 'PP/poly')
('p', 'EA', 'Sigma_2P', 'PP/poly') => ('-d', 'EA', 'Sigma_2P', 'PP/poly')
('p', 'T', 'co.Sigma_2P', 'PP/poly') => ('-d', 'T', 'co.Sigma_2P', 'PP/poly')
('p', 'T', 'Sigma_2P', 'PP/poly') => ('-d', 'T', 'Sigma_2P', 'PP/poly')
('-d', 'A', 'PH', 'PSPACE/poly') => ('-d', 'AA', 'PH', 'PSPACE/poly')
('-d', 'A', 'PH', 'NEXP/poly') => ('-d', 'AA', 'PH', 'NEXP/poly')
('-d', 'A', 'Delta_3P', 'NEXP/poly') => ('-d', 'AA', 'Delta_3P', 'NEXP/poly')
('-d', 'AA', 'Delta_3P', 'NEXP/poly') => ('-d', 'T', 'Delta_3P', 'NEXP/poly')
('-d', 'AA', 'Delta_3P', 'NEXP/poly') => ('-d', 'EA', 'Delta_3P', 'NEXP/poly')
('-d', 'AA', 'PH', 'NEXP/poly') => ('-d', 'T', 'PH', 'NEXP/poly')
('-d', 'AA', 'PH', 'NEXP/poly') => ('-d', 'EA', 'PH', 'NEXP/poly')
('-d', 'A', 'Delta_3P', 'PSPACE/poly') => ('-d', 'AA', 'Delta_3P', 'PSPACE/poly')
('-d', 'AA', 'Delta_3P', 'PSPACE/poly') => ('-d', 'T', 'Delta_3P', 'PSPACE/poly')
('-d', 'AA', 'Delta_3P', 'PSPACE/poly') => ('-d', 'EA', 'Delta_3P', 'PSPACE/poly')
('-d', 'AA', 'PH', 'PSPACE/poly') => ('-d', 'T', 'PH', 'PSPACE/poly')
('-d', 'AA', 'PH', 'PSPACE/poly') => ('-d', 'EA', 'PH', 'PSPACE/poly')
('p', 'A', 'PH', 'PSPACE/poly') => ('p', 'AA', 'PH', 'PSPACE/poly')
('p', 'A', 'PH', 'NEXP/poly') => ('p', 'AA', 'PH', 'NEXP/poly')
('p', 'A', 'Delta_3P', 'NEXP/poly') => ('p', 'AA', 'Delta_3P', 'NEXP/poly')
('p', 'AA', 'Delta_3P', 'NEXP/poly') => ('p', 'T', 'Delta_3P', 'NEXP/poly')
('p', 'AA', 'Delta_3P', 'NEXP/poly') => ('p', 'EA', 'Delta_3P', 'NEXP/poly')
('p', 'AA', 'PH', 'NEXP/poly') => ('p', 'T', 'PH', 'NEXP/poly')
('p', 'AA', 'PH', 'NEXP/poly') => ('p', 'EA', 'PH', 'NEXP/poly')
('p', 'A', 'Delta_3P', 'PSPACE/poly') => ('p', 'AA', 'Delta_3P', 'PSPACE/poly')
('p', 'AA', 'Delta_3P', 'PSPACE/poly') => ('p', 'T', 'Delta_3P', 'PSPACE/poly')
('p', 'AA', 'Delta_3P', 'PSPACE/poly') => ('p', 'EA', 'Delta_3P', 'PSPACE/poly')
('p', 'AA', 'PH', 'PSPACE/poly') => ('p', 'T', 'PH', 'PSPACE/poly')
('p', 'AA', 'PH', 'PSPACE/poly') => ('p', 'EA', 'PH', 'PSPACE/poly')
('p', 'A', 'Delta_3P', 'PP/poly') => ('-d', 'A', 'Delta_3P', 'PP/poly')
('p', 'A', 'Delta_3P', 'PP/poly') => ('p', 'AA', 'Delta_3P', 'PP/poly')
('p', 'AA', 'Delta_3P', 'PP/poly') => ('-d', 'AA', 'Delta_3P', 'PP/poly')
('p', 'AA', 'Delta_3P', 'PP/poly') => ('p', 'T', 'Delta_3P', 'PP/poly')
('p', 'AA', 'Delta_3P', 'PP/poly') => ('p', 'EA', 'Delta_3P', 'PP/poly')
('p', 'EA', 'Delta_3P', 'PP/poly') => ('-d', 'EA', 'Delta_3P', 'PP/poly')
('p', 'T', 'Delta_3P', 'PP/poly') => ('-d', 'T', 'Delta_3P', 'PP/poly')
('p', 'AA', 'PH', 'PP/poly') => ('-d', 'AA', 'PH', 'PP/poly')
('p', 'AA', 'PH', 'PP/poly') => ('p', 'T', 'PH', 'PP/poly')
('p', 'AA', 'PH', 'PP/poly') => ('p', 'EA', 'PH', 'PP/poly')
('p', 'EA', 'PH', 'PP/poly') => ('-d', 'EA', 'PH', 'PP/poly')
('p', 'T', 'PH', 'PP/poly') => ('-d', 'T', 'PH', 'PP/poly')
('p', 'A', 'QIP(3)', 'QIP') => ('-d', 'A', 'QIP(3)', 'QIP')
('p', 'A', 'QIP(3)', 'QIP') => ('p', 'R', 'QIP(3)', 'QIP')
('p', 'A', 'QIP(3)', 'QIP') => ('p', 'AA', 'QIP(3)', 'QIP')
('p', 'A', 'co.QIP(3)', 'co.QIP') => ('-d', 'A', 'co.QIP(3)', 'co.QIP')
('p', 'A', 'co.QIP(3)', 'co.QIP') => ('p', 'R', 'co.QIP(3)', 'co.QIP')
('p', 'A', 'co.QIP(3)', 'co.QIP') => ('p', 'AA', 'co.QIP(3)', 'co.QIP')
('p', 'A', 'cocap.QIP(3)', 'cocap.QIP') => ('-d', 'A', 'cocap.QIP(3)', 'cocap.QIP')
('p', 'A', 'cocap.QIP(3)', 'cocap.QIP') => ('p', 'R', 'cocap.QIP(3)', 'cocap.QIP')
('p', 'A', 'cocap.QIP(3)', 'cocap.QIP') => ('p', 'AA', 'cocap.QIP(3)', 'cocap.QIP')
('-d', 'A', 'cocap.QIP(3)', 'ALL') => ('-d', 'R', 'cocap.QIP(3)', 'ALL')
('-d', 'A', 'cocap.QIP(3)', 'ALL') => ('-d', 'AA', 'cocap.QIP(3)', 'ALL')
('-d', 'A', 'cocap.QIP(2)', 'ALL') => ('-d', 'R', 'cocap.QIP(2)', 'ALL')
('-d', 'A', 'cocap.QIP(2)', 'ALL') => ('-d', 'AA', 'cocap.QIP(2)', 'ALL')
('-d', 'AA', 'cocap.QIP(2)', 'ALL') => ('-d', 'T', 'cocap.QIP(2)', 'ALL')
('-d', 'AA', 'cocap.QIP(2)', 'ALL') => ('-d', 'EA', 'cocap.QIP(2)', 'ALL')
('-d', 'AA', 'cocap.QIP(3)', 'ALL') => ('-d', 'T', 'cocap.QIP(3)', 'ALL')
('-d', 'AA', 'cocap.QIP(3)', 'ALL') => ('-d', 'EA', 'cocap.QIP(3)', 'ALL')
('p', 'A', 'cocap.QIP(3)', 'ALL') => ('p', 'R', 'cocap.QIP(3)', 'ALL')
('p', 'A', 'cocap.QIP(3)', 'ALL') => ('p', 'AA', 'cocap.QIP(3)', 'ALL')
('p', 'A', 'cocap.QIP(2)', 'ALL') => ('p', 'R', 'cocap.QIP(2)', 'ALL')
('p', 'A', 'cocap.QIP(2)', 'ALL') => ('p', 'AA', 'cocap.QIP(2)', 'ALL')
('p', 'AA', 'cocap.QIP(2)', 'ALL') => ('p', 'T', 'cocap.QIP(2)', 'ALL')
('p', 'AA', 'cocap.QIP(2)', 'ALL') => ('p', 'EA', 'cocap.QIP(2)', 'ALL')
('p', 'AA', 'cocap.QIP(3)', 'ALL') => ('p', 'T', 'cocap.QIP(3)', 'ALL')
('p', 'AA', 'cocap.QIP(3)', 'ALL') => ('p', 'EA', 'cocap.QIP(3)', 'ALL')
('-d', 'A', 'cocap.QIP(3)', 'co.NEXP') => ('-d', 'R', 'cocap.QIP(3)', 'co.NEXP')
('-d', 'A', 'cocap.QIP(3)', 'co.NEXP') => ('-d', 'AA', 'cocap.QIP(3)', 'co.NEXP')
('-d', 'A', 'cocap.QIP(3)', 'NEXP') => ('-d', 'R', 'cocap.QIP(3)', 'NEXP')
('-d', 'A', 'cocap.QIP(3)', 'NEXP') => ('-d', 'AA', 'cocap.QIP(3)', 'NEXP')
('-d', 'A', 'cocap.QIP(3)', 'cocap.NEXP') => ('-d', 'R', 'cocap.QIP(3)', 'cocap.NEXP')
('-d', 'A', 'cocap.QIP(3)', 'cocap.NEXP') => ('-d', 'AA', 'cocap.QIP(3)', 'cocap.NEXP')
('-d', 'A', 'cocap.QIP(2)', 'cocap.NEXP') => ('-d', 'R', 'cocap.QIP(2)', 'cocap.NEXP')
('-d', 'A', 'cocap.QIP(2)', 'cocap.NEXP') => ('-d', 'AA', 'cocap.QIP(2)', 'cocap.NEXP')
('-d', 'A', 'cocap.QIP(2)', 'co.NEXP') => ('-d', 'R', 'cocap.QIP(2)', 'co.NEXP')
('-d', 'A', 'cocap.QIP(2)', 'co.NEXP') => ('-d', 'AA', 'cocap.QIP(2)', 'co.NEXP')
('-d', 'A', 'cocap.QIP(2)', 'NEXP') => ('-d', 'R', 'cocap.QIP(2)', 'NEXP')
('-d', 'A', 'cocap.QIP(2)', 'NEXP') => ('-d', 'AA', 'cocap.QIP(2)', 'NEXP')
('-d', 'A', 'cocap.QIP(2)', 'R') => ('-d', 'R', 'cocap.QIP(2)', 'R')
('-d', 'A', 'cocap.QIP(2)', 'R') => ('-d', 'AA', 'cocap.QIP(2)', 'R')
('-d', 'A', 'cocap.QIP(2)', 'RE') => ('-d', 'R', 'cocap.QIP(2)', 'RE')
('-d', 'A', 'cocap.QIP(2)', 'RE') => ('-d', 'AA', 'cocap.QIP(2)', 'RE')
('-d', 'A', 'cocap.QIP(2)', 'co.RE') => ('-d', 'R', 'cocap.QIP(2)', 'co.RE')
('-d', 'A', 'cocap.QIP(2)', 'co.RE') => ('-d', 'AA', 'cocap.QIP(2)', 'co.RE')
('-d', 'AA', 'cocap.QIP(2)', 'co.RE') => ('-d', 'T', 'cocap.QIP(2)', 'co.RE')
('-d', 'AA', 'cocap.QIP(2)', 'co.RE') => ('-d', 'EA', 'cocap.QIP(2)', 'co.RE')
('-d', 'AA', 'cocap.QIP(2)', 'RE') => ('-d', 'T', 'cocap.QIP(2)', 'RE')
('-d', 'AA', 'cocap.QIP(2)', 'RE') => ('-d', 'EA', 'cocap.QIP(2)', 'RE')
('-d', 'AA', 'cocap.QIP(2)', 'R') => ('-d', 'T', 'cocap.QIP(2)', 'R')
('-d', 'AA', 'cocap.QIP(2)', 'R') => ('-d', 'EA', 'cocap.QIP(2)', 'R')
('-d', 'A', 'cocap.QIP(2)', 'NEXP/poly') => ('-d', 'R', 'cocap.QIP(2)', 'NEXP/poly')
('-d', 'A', 'cocap.QIP(2)', 'NEXP/poly') => ('-d', 'AA', 'cocap.QIP(2)', 'NEXP/poly')
('-d', 'AA', 'cocap.QIP(2)', 'NEXP/poly') => ('-d', 'T', 'cocap.QIP(2)', 'NEXP/poly')
('-d', 'AA', 'cocap.QIP(2)', 'NEXP/poly') => ('-d', 'EA', 'cocap.QIP(2)', 'NEXP/poly')
('-d', 'AA', 'cocap.QIP(2)', 'NEXP') => ('-d', 'T', 'cocap.QIP(2)', 'NEXP')
('-d', 'AA', 'cocap.QIP(2)', 'NEXP') => ('-d', 'EA', 'cocap.QIP(2)', 'NEXP')
('-d', 'AA', 'cocap.QIP(2)', 'co.NEXP') => ('-d', 'T', 'cocap.QIP(2)', 'co.NEXP')
('-d', 'AA', 'cocap.QIP(2)', 'co.NEXP') => ('-d', 'EA', 'cocap.QIP(2)', 'co.NEXP')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.NEXP') => ('-d', 'T', 'cocap.QIP(2)', 'cocap.NEXP')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.NEXP') => ('-d', 'EA', 'cocap.QIP(2)', 'cocap.NEXP')
('-d', 'A', 'cocap.QIP(3)', 'R') => ('-d', 'R', 'cocap.QIP(3)', 'R')
('-d', 'A', 'cocap.QIP(3)', 'R') => ('-d', 'AA', 'cocap.QIP(3)', 'R')
('-d', 'A', 'cocap.QIP(3)', 'RE') => ('-d', 'R', 'cocap.QIP(3)', 'RE')
('-d', 'A', 'cocap.QIP(3)', 'RE') => ('-d', 'AA', 'cocap.QIP(3)', 'RE')
('-d', 'A', 'cocap.QIP(3)', 'co.RE') => ('-d', 'R', 'cocap.QIP(3)', 'co.RE')
('-d', 'A', 'cocap.QIP(3)', 'co.RE') => ('-d', 'AA', 'cocap.QIP(3)', 'co.RE')
('-d', 'AA', 'cocap.QIP(3)', 'co.RE') => ('-d', 'T', 'cocap.QIP(3)', 'co.RE')
('-d', 'AA', 'cocap.QIP(3)', 'co.RE') => ('-d', 'EA', 'cocap.QIP(3)', 'co.RE')
('-d', 'AA', 'cocap.QIP(3)', 'RE') => ('-d', 'T', 'cocap.QIP(3)', 'RE')
('-d', 'AA', 'cocap.QIP(3)', 'RE') => ('-d', 'EA', 'cocap.QIP(3)', 'RE')
('-d', 'AA', 'cocap.QIP(3)', 'R') => ('-d', 'T', 'cocap.QIP(3)', 'R')
('-d', 'AA', 'cocap.QIP(3)', 'R') => ('-d', 'EA', 'cocap.QIP(3)', 'R')
('-d', 'A', 'cocap.QIP(3)', 'NEXP/poly') => ('-d', 'R', 'cocap.QIP(3)', 'NEXP/poly')
('-d', 'A', 'cocap.QIP(3)', 'NEXP/poly') => ('-d', 'AA', 'cocap.QIP(3)', 'NEXP/poly')
('-d', 'AA', 'cocap.QIP(3)', 'NEXP/poly') => ('-d', 'T', 'cocap.QIP(3)', 'NEXP/poly')
('-d', 'AA', 'cocap.QIP(3)', 'NEXP/poly') => ('-d', 'EA', 'cocap.QIP(3)', 'NEXP/poly')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.NEXP') => ('-d', 'T', 'cocap.QIP(3)', 'cocap.NEXP')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.NEXP') => ('-d', 'EA', 'cocap.QIP(3)', 'cocap.NEXP')
('-d', 'AA', 'cocap.QIP(3)', 'co.NEXP') => ('-d', 'T', 'cocap.QIP(3)', 'co.NEXP')
('-d', 'AA', 'cocap.QIP(3)', 'co.NEXP') => ('-d', 'EA', 'cocap.QIP(3)', 'co.NEXP')
('-d', 'AA', 'cocap.QIP(3)', 'NEXP') => ('-d', 'T', 'cocap.QIP(3)', 'NEXP')
('-d', 'AA', 'cocap.QIP(3)', 'NEXP') => ('-d', 'EA', 'cocap.QIP(3)', 'NEXP')
('p', 'A', 'cocap.QIP(3)', 'co.NEXP') => ('p', 'R', 'cocap.QIP(3)', 'co.NEXP')
('p', 'A', 'cocap.QIP(3)', 'co.NEXP') => ('p', 'AA', 'cocap.QIP(3)', 'co.NEXP')
('p', 'A', 'cocap.QIP(3)', 'NEXP') => ('p', 'R', 'cocap.QIP(3)', 'NEXP')
('p', 'A', 'cocap.QIP(3)', 'NEXP') => ('p', 'AA', 'cocap.QIP(3)', 'NEXP')
('p', 'A', 'cocap.QIP(3)', 'cocap.NEXP') => ('p', 'R', 'cocap.QIP(3)', 'cocap.NEXP')
('p', 'A', 'cocap.QIP(3)', 'cocap.NEXP') => ('p', 'AA', 'cocap.QIP(3)', 'cocap.NEXP')
('p', 'A', 'cocap.QIP(2)', 'cocap.NEXP') => ('p', 'R', 'cocap.QIP(2)', 'cocap.NEXP')
('p', 'A', 'cocap.QIP(2)', 'cocap.NEXP') => ('p', 'AA', 'cocap.QIP(2)', 'cocap.NEXP')
('p', 'A', 'cocap.QIP(2)', 'co.NEXP') => ('p', 'R', 'cocap.QIP(2)', 'co.NEXP')
('p', 'A', 'cocap.QIP(2)', 'co.NEXP') => ('p', 'AA', 'cocap.QIP(2)', 'co.NEXP')
('p', 'A', 'cocap.QIP(2)', 'NEXP') => ('p', 'R', 'cocap.QIP(2)', 'NEXP')
('p', 'A', 'cocap.QIP(2)', 'NEXP') => ('p', 'AA', 'cocap.QIP(2)', 'NEXP')
('p', 'A', 'cocap.QIP(2)', 'R') => ('p', 'R', 'cocap.QIP(2)', 'R')
('p', 'A', 'cocap.QIP(2)', 'R') => ('p', 'AA', 'cocap.QIP(2)', 'R')
('p', 'A', 'cocap.QIP(2)', 'RE') => ('p', 'R', 'cocap.QIP(2)', 'RE')
('p', 'A', 'cocap.QIP(2)', 'RE') => ('p', 'AA', 'cocap.QIP(2)', 'RE')
('p', 'A', 'cocap.QIP(2)', 'co.RE') => ('p', 'R', 'cocap.QIP(2)', 'co.RE')
('p', 'A', 'cocap.QIP(2)', 'co.RE') => ('p', 'AA', 'cocap.QIP(2)', 'co.RE')
('p', 'AA', 'cocap.QIP(2)', 'co.RE') => ('p', 'T', 'cocap.QIP(2)', 'co.RE')
('p', 'AA', 'cocap.QIP(2)', 'co.RE') => ('p', 'EA', 'cocap.QIP(2)', 'co.RE')
('p', 'AA', 'cocap.QIP(2)', 'RE') => ('p', 'T', 'cocap.QIP(2)', 'RE')
('p', 'AA', 'cocap.QIP(2)', 'RE') => ('p', 'EA', 'cocap.QIP(2)', 'RE')
('p', 'AA', 'cocap.QIP(2)', 'R') => ('p', 'T', 'cocap.QIP(2)', 'R')
('p', 'AA', 'cocap.QIP(2)', 'R') => ('p', 'EA', 'cocap.QIP(2)', 'R')
('p', 'A', 'cocap.QIP(2)', 'NEXP/poly') => ('p', 'R', 'cocap.QIP(2)', 'NEXP/poly')
('p', 'A', 'cocap.QIP(2)', 'NEXP/poly') => ('p', 'AA', 'cocap.QIP(2)', 'NEXP/poly')
('p', 'AA', 'cocap.QIP(2)', 'NEXP/poly') => ('p', 'T', 'cocap.QIP(2)', 'NEXP/poly')
('p', 'AA', 'cocap.QIP(2)', 'NEXP/poly') => ('p', 'EA', 'cocap.QIP(2)', 'NEXP/poly')
('p', 'AA', 'cocap.QIP(2)', 'NEXP') => ('p', 'T', 'cocap.QIP(2)', 'NEXP')
('p', 'AA', 'cocap.QIP(2)', 'NEXP') => ('p', 'EA', 'cocap.QIP(2)', 'NEXP')
('p', 'AA', 'cocap.QIP(2)', 'co.NEXP') => ('p', 'T', 'cocap.QIP(2)', 'co.NEXP')
('p', 'AA', 'cocap.QIP(2)', 'co.NEXP') => ('p', 'EA', 'cocap.QIP(2)', 'co.NEXP')
('p', 'AA', 'cocap.QIP(2)', 'cocap.NEXP') => ('p', 'T', 'cocap.QIP(2)', 'cocap.NEXP')
('p', 'AA', 'cocap.QIP(2)', 'cocap.NEXP') => ('p', 'EA', 'cocap.QIP(2)', 'cocap.NEXP')
('p', 'A', 'cocap.QIP(3)', 'R') => ('p', 'R', 'cocap.QIP(3)', 'R')
('p', 'A', 'cocap.QIP(3)', 'R') => ('p', 'AA', 'cocap.QIP(3)', 'R')
('p', 'A', 'cocap.QIP(3)', 'RE') => ('p', 'R', 'cocap.QIP(3)', 'RE')
('p', 'A', 'cocap.QIP(3)', 'RE') => ('p', 'AA', 'cocap.QIP(3)', 'RE')
('p', 'A', 'cocap.QIP(3)', 'co.RE') => ('p', 'R', 'cocap.QIP(3)', 'co.RE')
('p', 'A', 'cocap.QIP(3)', 'co.RE') => ('p', 'AA', 'cocap.QIP(3)', 'co.RE')
('p', 'AA', 'cocap.QIP(3)', 'co.RE') => ('p', 'T', 'cocap.QIP(3)', 'co.RE')
('p', 'AA', 'cocap.QIP(3)', 'co.RE') => ('p', 'EA', 'cocap.QIP(3)', 'co.RE')
('p', 'AA', 'cocap.QIP(3)', 'RE') => ('p', 'T', 'cocap.QIP(3)', 'RE')
('p', 'AA', 'cocap.QIP(3)', 'RE') => ('p', 'EA', 'cocap.QIP(3)', 'RE')
('p', 'AA', 'cocap.QIP(3)', 'R') => ('p', 'T', 'cocap.QIP(3)', 'R')
('p', 'AA', 'cocap.QIP(3)', 'R') => ('p', 'EA', 'cocap.QIP(3)', 'R')
('p', 'A', 'cocap.QIP(3)', 'NEXP/poly') => ('p', 'R', 'cocap.QIP(3)', 'NEXP/poly')
('p', 'A', 'cocap.QIP(3)', 'NEXP/poly') => ('p', 'AA', 'cocap.QIP(3)', 'NEXP/poly')
('p', 'AA', 'cocap.QIP(3)', 'NEXP/poly') => ('p', 'T', 'cocap.QIP(3)', 'NEXP/poly')
('p', 'AA', 'cocap.QIP(3)', 'NEXP/poly') => ('p', 'EA', 'cocap.QIP(3)', 'NEXP/poly')
('p', 'AA', 'cocap.QIP(3)', 'cocap.NEXP') => ('p', 'T', 'cocap.QIP(3)', 'cocap.NEXP')
('p', 'AA', 'cocap.QIP(3)', 'cocap.NEXP') => ('p', 'EA', 'cocap.QIP(3)', 'cocap.NEXP')
('p', 'AA', 'cocap.QIP(3)', 'co.NEXP') => ('p', 'T', 'cocap.QIP(3)', 'co.NEXP')
('p', 'AA', 'cocap.QIP(3)', 'co.NEXP') => ('p', 'EA', 'cocap.QIP(3)', 'co.NEXP')
('p', 'AA', 'cocap.QIP(3)', 'NEXP') => ('p', 'T', 'cocap.QIP(3)', 'NEXP')
('p', 'AA', 'cocap.QIP(3)', 'NEXP') => ('p', 'EA', 'cocap.QIP(3)', 'NEXP')
('-d', 'A', 'cocap.QIP(3)', 'QIP') => ('-d', 'R', 'cocap.QIP(3)', 'QIP')
('-d', 'A', 'cocap.QIP(3)', 'QIP') => ('-d', 'AA', 'cocap.QIP(3)', 'QIP')
('-d', 'A', 'cocap.QIP(3)', 'co.QIP') => ('-d', 'R', 'cocap.QIP(3)', 'co.QIP')
('-d', 'A', 'cocap.QIP(3)', 'co.QIP') => ('-d', 'AA', 'cocap.QIP(3)', 'co.QIP')
('-d', 'A', 'cocap.QIP(3)', 'cocap.QIP') => ('-d', 'R', 'cocap.QIP(3)', 'cocap.QIP')
('-d', 'A', 'cocap.QIP(3)', 'cocap.QIP') => ('-d', 'AA', 'cocap.QIP(3)', 'cocap.QIP')
('-d', 'A', 'cocap.QIP(3)', 'co.QMIP_le') => ('-d', 'R', 'cocap.QIP(3)', 'co.QMIP_le')
('-d', 'A', 'cocap.QIP(3)', 'co.QMIP_le') => ('-d', 'AA', 'cocap.QIP(3)', 'co.QMIP_le')
('-d', 'A', 'cocap.QIP(3)', 'QMIP_le') => ('-d', 'R', 'cocap.QIP(3)', 'QMIP_le')
('-d', 'A', 'cocap.QIP(3)', 'QMIP_le') => ('-d', 'AA', 'cocap.QIP(3)', 'QMIP_le')
('-d', 'A', 'cocap.QIP(3)', 'cocap.QMIP_le') => ('-d', 'R', 'cocap.QIP(3)', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QIP(3)', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QMIP_le') => ('-d', 'R', 'cocap.QIP(2)', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_le')
('-d', 'A', 'cocap.QIP(2)', 'co.QMIP_le') => ('-d', 'R', 'cocap.QIP(2)', 'co.QMIP_le')
('-d', 'A', 'cocap.QIP(2)', 'co.QMIP_le') => ('-d', 'AA', 'cocap.QIP(2)', 'co.QMIP_le')
('-d', 'A', 'cocap.QIP(2)', 'QMIP_le') => ('-d', 'R', 'cocap.QIP(2)', 'QMIP_le')
('-d', 'A', 'cocap.QIP(2)', 'QMIP_le') => ('-d', 'AA', 'cocap.QIP(2)', 'QMIP_le')
('-d', 'AA', 'cocap.QIP(2)', 'QMIP_le') => ('-d', 'T', 'cocap.QIP(2)', 'QMIP_le')
('-d', 'AA', 'cocap.QIP(2)', 'QMIP_le') => ('-d', 'EA', 'cocap.QIP(2)', 'QMIP_le')
('-d', 'AA', 'cocap.QIP(2)', 'co.QMIP_le') => ('-d', 'T', 'cocap.QIP(2)', 'co.QMIP_le')
('-d', 'AA', 'cocap.QIP(2)', 'co.QMIP_le') => ('-d', 'EA', 'cocap.QIP(2)', 'co.QMIP_le')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.QIP(2)', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.QIP(2)', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.QIP(3)', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.QIP(3)', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.QIP(3)', 'co.QMIP_le') => ('-d', 'T', 'cocap.QIP(3)', 'co.QMIP_le')
('-d', 'AA', 'cocap.QIP(3)', 'co.QMIP_le') => ('-d', 'EA', 'cocap.QIP(3)', 'co.QMIP_le')
('-d', 'AA', 'cocap.QIP(3)', 'QMIP_le') => ('-d', 'T', 'cocap.QIP(3)', 'QMIP_le')
('-d', 'AA', 'cocap.QIP(3)', 'QMIP_le') => ('-d', 'EA', 'cocap.QIP(3)', 'QMIP_le')
('-d', 'A', 'cocap.QIP(3)', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.QIP(3)', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QIP(3)', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.QIP(2)', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QIP(2)', 'QMIP_ne') => ('-d', 'R', 'cocap.QIP(2)', 'QMIP_ne')
('-d', 'A', 'cocap.QIP(2)', 'QMIP_ne') => ('-d', 'AA', 'cocap.QIP(2)', 'QMIP_ne')
('-d', 'A', 'cocap.QIP(2)', 'co.QMIP_ne') => ('-d', 'R', 'cocap.QIP(2)', 'co.QMIP_ne')
('-d', 'A', 'cocap.QIP(2)', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.QIP(2)', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QIP(2)', 'co.QMIP_ne') => ('-d', 'T', 'cocap.QIP(2)', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QIP(2)', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.QIP(2)', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QIP(2)', 'QMIP_ne') => ('-d', 'T', 'cocap.QIP(2)', 'QMIP_ne')
('-d', 'AA', 'cocap.QIP(2)', 'QMIP_ne') => ('-d', 'EA', 'cocap.QIP(2)', 'QMIP_ne')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.QIP(2)', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.QIP(2)', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QIP(3)', 'QMIP_ne') => ('-d', 'R', 'cocap.QIP(3)', 'QMIP_ne')
('-d', 'A', 'cocap.QIP(3)', 'QMIP_ne') => ('-d', 'AA', 'cocap.QIP(3)', 'QMIP_ne')
('-d', 'A', 'cocap.QIP(3)', 'co.QMIP_ne') => ('-d', 'R', 'cocap.QIP(3)', 'co.QMIP_ne')
('-d', 'A', 'cocap.QIP(3)', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.QIP(3)', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QIP(3)', 'co.QMIP_ne') => ('-d', 'T', 'cocap.QIP(3)', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QIP(3)', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.QIP(3)', 'co.QMIP_ne')
('-d', 'AA', 'cocap.QIP(3)', 'QMIP_ne') => ('-d', 'T', 'cocap.QIP(3)', 'QMIP_ne')
('-d', 'AA', 'cocap.QIP(3)', 'QMIP_ne') => ('-d', 'EA', 'cocap.QIP(3)', 'QMIP_ne')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.QIP(3)', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.QIP(3)', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QIP') => ('-d', 'R', 'cocap.QIP(2)', 'cocap.QIP')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QIP') => ('-d', 'AA', 'cocap.QIP(2)', 'cocap.QIP')
('-d', 'A', 'cocap.QIP(2)', 'QIP') => ('-d', 'R', 'cocap.QIP(2)', 'QIP')
('-d', 'A', 'cocap.QIP(2)', 'QIP') => ('-d', 'AA', 'cocap.QIP(2)', 'QIP')
('-d', 'A', 'cocap.QIP(2)', 'co.QIP') => ('-d', 'R', 'cocap.QIP(2)', 'co.QIP')
('-d', 'A', 'cocap.QIP(2)', 'co.QIP') => ('-d', 'AA', 'cocap.QIP(2)', 'co.QIP')
('-d', 'AA', 'cocap.QIP(2)', 'co.QIP') => ('-d', 'T', 'cocap.QIP(2)', 'co.QIP')
('-d', 'AA', 'cocap.QIP(2)', 'co.QIP') => ('-d', 'EA', 'cocap.QIP(2)', 'co.QIP')
('-d', 'AA', 'cocap.QIP(2)', 'QIP') => ('-d', 'T', 'cocap.QIP(2)', 'QIP')
('-d', 'AA', 'cocap.QIP(2)', 'QIP') => ('-d', 'EA', 'cocap.QIP(2)', 'QIP')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QIP') => ('-d', 'T', 'cocap.QIP(2)', 'cocap.QIP')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QIP') => ('-d', 'EA', 'cocap.QIP(2)', 'cocap.QIP')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.QIP') => ('-d', 'T', 'cocap.QIP(3)', 'cocap.QIP')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.QIP') => ('-d', 'EA', 'cocap.QIP(3)', 'cocap.QIP')
('-d', 'AA', 'cocap.QIP(3)', 'QIP') => ('-d', 'T', 'cocap.QIP(3)', 'QIP')
('-d', 'AA', 'cocap.QIP(3)', 'QIP') => ('-d', 'EA', 'cocap.QIP(3)', 'QIP')
('-d', 'AA', 'cocap.QIP(3)', 'co.QIP') => ('-d', 'T', 'cocap.QIP(3)', 'co.QIP')
('-d', 'AA', 'cocap.QIP(3)', 'co.QIP') => ('-d', 'EA', 'cocap.QIP(3)', 'co.QIP')
('p', 'A', 'cocap.QIP(3)', 'QIP') => ('p', 'R', 'cocap.QIP(3)', 'QIP')
('p', 'A', 'cocap.QIP(3)', 'QIP') => ('p', 'AA', 'cocap.QIP(3)', 'QIP')
('p', 'A', 'cocap.QIP(3)', 'co.QIP') => ('p', 'R', 'cocap.QIP(3)', 'co.QIP')
('p', 'A', 'cocap.QIP(3)', 'co.QIP') => ('p', 'AA', 'cocap.QIP(3)', 'co.QIP')
('p', 'A', 'cocap.QIP(3)', 'co.QMIP_le') => ('p', 'R', 'cocap.QIP(3)', 'co.QMIP_le')
('p', 'A', 'cocap.QIP(3)', 'co.QMIP_le') => ('p', 'AA', 'cocap.QIP(3)', 'co.QMIP_le')
('p', 'A', 'cocap.QIP(3)', 'QMIP_le') => ('p', 'R', 'cocap.QIP(3)', 'QMIP_le')
('p', 'A', 'cocap.QIP(3)', 'QMIP_le') => ('p', 'AA', 'cocap.QIP(3)', 'QMIP_le')
('p', 'A', 'cocap.QIP(3)', 'cocap.QMIP_le') => ('p', 'R', 'cocap.QIP(3)', 'cocap.QMIP_le')
('p', 'A', 'cocap.QIP(3)', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_le')
('p', 'A', 'cocap.QIP(2)', 'cocap.QMIP_le') => ('p', 'R', 'cocap.QIP(2)', 'cocap.QMIP_le')
('p', 'A', 'cocap.QIP(2)', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_le')
('p', 'A', 'cocap.QIP(2)', 'co.QMIP_le') => ('p', 'R', 'cocap.QIP(2)', 'co.QMIP_le')
('p', 'A', 'cocap.QIP(2)', 'co.QMIP_le') => ('p', 'AA', 'cocap.QIP(2)', 'co.QMIP_le')
('p', 'A', 'cocap.QIP(2)', 'QMIP_le') => ('p', 'R', 'cocap.QIP(2)', 'QMIP_le')
('p', 'A', 'cocap.QIP(2)', 'QMIP_le') => ('p', 'AA', 'cocap.QIP(2)', 'QMIP_le')
('p', 'AA', 'cocap.QIP(2)', 'QMIP_le') => ('p', 'T', 'cocap.QIP(2)', 'QMIP_le')
('p', 'AA', 'cocap.QIP(2)', 'QMIP_le') => ('p', 'EA', 'cocap.QIP(2)', 'QMIP_le')
('p', 'AA', 'cocap.QIP(2)', 'co.QMIP_le') => ('p', 'T', 'cocap.QIP(2)', 'co.QMIP_le')
('p', 'AA', 'cocap.QIP(2)', 'co.QMIP_le') => ('p', 'EA', 'cocap.QIP(2)', 'co.QMIP_le')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_le') => ('p', 'T', 'cocap.QIP(2)', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.QIP(2)', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_le') => ('p', 'T', 'cocap.QIP(3)', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.QIP(3)', 'cocap.QMIP_le')
('p', 'AA', 'cocap.QIP(3)', 'co.QMIP_le') => ('p', 'T', 'cocap.QIP(3)', 'co.QMIP_le')
('p', 'AA', 'cocap.QIP(3)', 'co.QMIP_le') => ('p', 'EA', 'cocap.QIP(3)', 'co.QMIP_le')
('p', 'AA', 'cocap.QIP(3)', 'QMIP_le') => ('p', 'T', 'cocap.QIP(3)', 'QMIP_le')
('p', 'AA', 'cocap.QIP(3)', 'QMIP_le') => ('p', 'EA', 'cocap.QIP(3)', 'QMIP_le')
('p', 'A', 'cocap.QIP(2)', 'co.QIP') => ('p', 'R', 'cocap.QIP(2)', 'co.QIP')
('p', 'A', 'cocap.QIP(2)', 'co.QIP') => ('p', 'AA', 'cocap.QIP(2)', 'co.QIP')
('p', 'A', 'cocap.QIP(2)', 'QIP') => ('p', 'R', 'cocap.QIP(2)', 'QIP')
('p', 'A', 'cocap.QIP(2)', 'QIP') => ('p', 'AA', 'cocap.QIP(2)', 'QIP')
('p', 'A', 'cocap.QIP(2)', 'cocap.QIP') => ('p', 'R', 'cocap.QIP(2)', 'cocap.QIP')
('p', 'A', 'cocap.QIP(2)', 'cocap.QIP') => ('p', 'AA', 'cocap.QIP(2)', 'cocap.QIP')
('p', 'A', 'cocap.QIP(2)', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.QIP(2)', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QIP(2)', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QIP(2)', 'QMIP_ne') => ('p', 'R', 'cocap.QIP(2)', 'QMIP_ne')
('p', 'A', 'cocap.QIP(2)', 'QMIP_ne') => ('p', 'AA', 'cocap.QIP(2)', 'QMIP_ne')
('p', 'A', 'cocap.QIP(2)', 'co.QMIP_ne') => ('p', 'R', 'cocap.QIP(2)', 'co.QMIP_ne')
('p', 'A', 'cocap.QIP(2)', 'co.QMIP_ne') => ('p', 'AA', 'cocap.QIP(2)', 'co.QMIP_ne')
('p', 'AA', 'cocap.QIP(2)', 'co.QMIP_ne') => ('p', 'T', 'cocap.QIP(2)', 'co.QMIP_ne')
('p', 'AA', 'cocap.QIP(2)', 'co.QMIP_ne') => ('p', 'EA', 'cocap.QIP(2)', 'co.QMIP_ne')
('p', 'AA', 'cocap.QIP(2)', 'QMIP_ne') => ('p', 'T', 'cocap.QIP(2)', 'QMIP_ne')
('p', 'AA', 'cocap.QIP(2)', 'QMIP_ne') => ('p', 'EA', 'cocap.QIP(2)', 'QMIP_ne')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.QIP(2)', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.QIP(2)', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QIP') => ('p', 'T', 'cocap.QIP(2)', 'cocap.QIP')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QIP') => ('p', 'EA', 'cocap.QIP(2)', 'cocap.QIP')
('p', 'AA', 'cocap.QIP(2)', 'QIP') => ('p', 'T', 'cocap.QIP(2)', 'QIP')
('p', 'AA', 'cocap.QIP(2)', 'QIP') => ('p', 'EA', 'cocap.QIP(2)', 'QIP')
('p', 'AA', 'cocap.QIP(2)', 'co.QIP') => ('p', 'T', 'cocap.QIP(2)', 'co.QIP')
('p', 'AA', 'cocap.QIP(2)', 'co.QIP') => ('p', 'EA', 'cocap.QIP(2)', 'co.QIP')
('p', 'A', 'cocap.QIP(3)', 'co.QMIP_ne') => ('p', 'R', 'cocap.QIP(3)', 'co.QMIP_ne')
('p', 'A', 'cocap.QIP(3)', 'co.QMIP_ne') => ('p', 'AA', 'cocap.QIP(3)', 'co.QMIP_ne')
('p', 'A', 'cocap.QIP(3)', 'QMIP_ne') => ('p', 'R', 'cocap.QIP(3)', 'QMIP_ne')
('p', 'A', 'cocap.QIP(3)', 'QMIP_ne') => ('p', 'AA', 'cocap.QIP(3)', 'QMIP_ne')
('p', 'A', 'cocap.QIP(3)', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.QIP(3)', 'cocap.QMIP_ne')
('p', 'A', 'cocap.QIP(3)', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.QIP(3)', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.QIP(3)', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.QIP(3)', 'QMIP_ne') => ('p', 'T', 'cocap.QIP(3)', 'QMIP_ne')
('p', 'AA', 'cocap.QIP(3)', 'QMIP_ne') => ('p', 'EA', 'cocap.QIP(3)', 'QMIP_ne')
('p', 'AA', 'cocap.QIP(3)', 'co.QMIP_ne') => ('p', 'T', 'cocap.QIP(3)', 'co.QMIP_ne')
('p', 'AA', 'cocap.QIP(3)', 'co.QMIP_ne') => ('p', 'EA', 'cocap.QIP(3)', 'co.QMIP_ne')
('p', 'AA', 'cocap.QIP(3)', 'co.QIP') => ('p', 'T', 'cocap.QIP(3)', 'co.QIP')
('p', 'AA', 'cocap.QIP(3)', 'co.QIP') => ('p', 'EA', 'cocap.QIP(3)', 'co.QIP')
('p', 'AA', 'cocap.QIP(3)', 'QIP') => ('p', 'T', 'cocap.QIP(3)', 'QIP')
('p', 'AA', 'cocap.QIP(3)', 'QIP') => ('p', 'EA', 'cocap.QIP(3)', 'QIP')
('p', 'AA', 'cocap.QIP(3)', 'cocap.QIP') => ('p', 'T', 'cocap.QIP(3)', 'cocap.QIP')
('p', 'AA', 'cocap.QIP(3)', 'cocap.QIP') => ('p', 'EA', 'cocap.QIP(3)', 'cocap.QIP')
('-d', 'A', 'co.QIP(3)', 'ALL') => ('-d', 'R', 'co.QIP(3)', 'ALL')
('-d', 'A', 'co.QIP(3)', 'ALL') => ('-d', 'AA', 'co.QIP(3)', 'ALL')
('-d', 'A', 'QIP(3)', 'ALL') => ('-d', 'R', 'QIP(3)', 'ALL')
('-d', 'A', 'QIP(3)', 'ALL') => ('-d', 'AA', 'QIP(3)', 'ALL')
('-d', 'A', 'QIP(2)', 'ALL') => ('-d', 'R', 'QIP(2)', 'ALL')
('-d', 'A', 'QIP(2)', 'ALL') => ('-d', 'AA', 'QIP(2)', 'ALL')
('-d', 'A', 'co.QIP(2)', 'ALL') => ('-d', 'R', 'co.QIP(2)', 'ALL')
('-d', 'A', 'co.QIP(2)', 'ALL') => ('-d', 'AA', 'co.QIP(2)', 'ALL')
('-d', 'AA', 'co.QIP(2)', 'ALL') => ('-d', 'T', 'co.QIP(2)', 'ALL')
('-d', 'AA', 'co.QIP(2)', 'ALL') => ('-d', 'EA', 'co.QIP(2)', 'ALL')
('-d', 'AA', 'QIP(2)', 'ALL') => ('-d', 'T', 'QIP(2)', 'ALL')
('-d', 'AA', 'QIP(2)', 'ALL') => ('-d', 'EA', 'QIP(2)', 'ALL')
('-d', 'AA', 'QIP(3)', 'ALL') => ('-d', 'T', 'QIP(3)', 'ALL')
('-d', 'AA', 'QIP(3)', 'ALL') => ('-d', 'EA', 'QIP(3)', 'ALL')
('-d', 'AA', 'co.QIP(3)', 'ALL') => ('-d', 'T', 'co.QIP(3)', 'ALL')
('-d', 'AA', 'co.QIP(3)', 'ALL') => ('-d', 'EA', 'co.QIP(3)', 'ALL')
('p', 'A', 'co.QIP(3)', 'ALL') => ('p', 'R', 'co.QIP(3)', 'ALL')
('p', 'A', 'co.QIP(3)', 'ALL') => ('p', 'AA', 'co.QIP(3)', 'ALL')
('p', 'A', 'QIP(3)', 'ALL') => ('p', 'R', 'QIP(3)', 'ALL')
('p', 'A', 'QIP(3)', 'ALL') => ('p', 'AA', 'QIP(3)', 'ALL')
('p', 'A', 'QIP(2)', 'ALL') => ('p', 'R', 'QIP(2)', 'ALL')
('p', 'A', 'QIP(2)', 'ALL') => ('p', 'AA', 'QIP(2)', 'ALL')
('p', 'A', 'co.QIP(2)', 'ALL') => ('p', 'R', 'co.QIP(2)', 'ALL')
('p', 'A', 'co.QIP(2)', 'ALL') => ('p', 'AA', 'co.QIP(2)', 'ALL')
('p', 'AA', 'co.QIP(2)', 'ALL') => ('p', 'T', 'co.QIP(2)', 'ALL')
('p', 'AA', 'co.QIP(2)', 'ALL') => ('p', 'EA', 'co.QIP(2)', 'ALL')
('p', 'AA', 'QIP(2)', 'ALL') => ('p', 'T', 'QIP(2)', 'ALL')
('p', 'AA', 'QIP(2)', 'ALL') => ('p', 'EA', 'QIP(2)', 'ALL')
('p', 'AA', 'QIP(3)', 'ALL') => ('p', 'T', 'QIP(3)', 'ALL')
('p', 'AA', 'QIP(3)', 'ALL') => ('p', 'EA', 'QIP(3)', 'ALL')
('p', 'AA', 'co.QIP(3)', 'ALL') => ('p', 'T', 'co.QIP(3)', 'ALL')
('p', 'AA', 'co.QIP(3)', 'ALL') => ('p', 'EA', 'co.QIP(3)', 'ALL')
('-d', 'A', 'co.QIP(3)', 'co.NEXP') => ('-d', 'R', 'co.QIP(3)', 'co.NEXP')
('-d', 'A', 'co.QIP(3)', 'co.NEXP') => ('-d', 'AA', 'co.QIP(3)', 'co.NEXP')
('-d', 'A', 'QIP(3)', 'NEXP') => ('-d', 'R', 'QIP(3)', 'NEXP')
('-d', 'A', 'QIP(3)', 'NEXP') => ('-d', 'AA', 'QIP(3)', 'NEXP')
('-d', 'A', 'QIP(2)', 'NEXP') => ('-d', 'R', 'QIP(2)', 'NEXP')
('-d', 'A', 'QIP(2)', 'NEXP') => ('-d', 'AA', 'QIP(2)', 'NEXP')
('-d', 'A', 'co.QIP(2)', 'co.NEXP') => ('-d', 'R', 'co.QIP(2)', 'co.NEXP')
('-d', 'A', 'co.QIP(2)', 'co.NEXP') => ('-d', 'AA', 'co.QIP(2)', 'co.NEXP')
('-d', 'A', 'co.QIP(2)', 'R') => ('-d', 'R', 'co.QIP(2)', 'R')
('-d', 'A', 'co.QIP(2)', 'R') => ('-d', 'AA', 'co.QIP(2)', 'R')
('-d', 'A', 'QIP(2)', 'R') => ('-d', 'R', 'QIP(2)', 'R')
('-d', 'A', 'QIP(2)', 'R') => ('-d', 'AA', 'QIP(2)', 'R')
('-d', 'A', 'QIP(2)', 'RE') => ('-d', 'R', 'QIP(2)', 'RE')
('-d', 'A', 'QIP(2)', 'RE') => ('-d', 'AA', 'QIP(2)', 'RE')
('-d', 'A', 'co.QIP(2)', 'co.RE') => ('-d', 'R', 'co.QIP(2)', 'co.RE')
('-d', 'A', 'co.QIP(2)', 'co.RE') => ('-d', 'AA', 'co.QIP(2)', 'co.RE')
('-d', 'AA', 'co.QIP(2)', 'co.RE') => ('-d', 'T', 'co.QIP(2)', 'co.RE')
('-d', 'AA', 'co.QIP(2)', 'co.RE') => ('-d', 'EA', 'co.QIP(2)', 'co.RE')
('-d', 'AA', 'QIP(2)', 'RE') => ('-d', 'T', 'QIP(2)', 'RE')
('-d', 'AA', 'QIP(2)', 'RE') => ('-d', 'EA', 'QIP(2)', 'RE')
('-d', 'A', 'QIP(2)', 'co.RE') => ('-d', 'R', 'QIP(2)', 'co.RE')
('-d', 'A', 'QIP(2)', 'co.RE') => ('-d', 'AA', 'QIP(2)', 'co.RE')
('-d', 'A', 'co.QIP(2)', 'RE') => ('-d', 'R', 'co.QIP(2)', 'RE')
('-d', 'A', 'co.QIP(2)', 'RE') => ('-d', 'AA', 'co.QIP(2)', 'RE')
('-d', 'AA', 'co.QIP(2)', 'RE') => ('-d', 'T', 'co.QIP(2)', 'RE')
('-d', 'AA', 'co.QIP(2)', 'RE') => ('-d', 'EA', 'co.QIP(2)', 'RE')
('-d', 'AA', 'QIP(2)', 'co.RE') => ('-d', 'T', 'QIP(2)', 'co.RE')
('-d', 'AA', 'QIP(2)', 'co.RE') => ('-d', 'EA', 'QIP(2)', 'co.RE')
('-d', 'AA', 'QIP(2)', 'R') => ('-d', 'T', 'QIP(2)', 'R')
('-d', 'AA', 'QIP(2)', 'R') => ('-d', 'EA', 'QIP(2)', 'R')
('-d', 'AA', 'co.QIP(2)', 'R') => ('-d', 'T', 'co.QIP(2)', 'R')
('-d', 'AA', 'co.QIP(2)', 'R') => ('-d', 'EA', 'co.QIP(2)', 'R')
('-d', 'A', 'co.QIP(2)', 'NEXP/poly') => ('-d', 'R', 'co.QIP(2)', 'NEXP/poly')
('-d', 'A', 'co.QIP(2)', 'NEXP/poly') => ('-d', 'AA', 'co.QIP(2)', 'NEXP/poly')
('-d', 'A', 'QIP(2)', 'NEXP/poly') => ('-d', 'R', 'QIP(2)', 'NEXP/poly')
('-d', 'A', 'QIP(2)', 'NEXP/poly') => ('-d', 'AA', 'QIP(2)', 'NEXP/poly')
('-d', 'AA', 'QIP(2)', 'NEXP/poly') => ('-d', 'T', 'QIP(2)', 'NEXP/poly')
('-d', 'AA', 'QIP(2)', 'NEXP/poly') => ('-d', 'EA', 'QIP(2)', 'NEXP/poly')
('-d', 'AA', 'co.QIP(2)', 'NEXP/poly') => ('-d', 'T', 'co.QIP(2)', 'NEXP/poly')
('-d', 'AA', 'co.QIP(2)', 'NEXP/poly') => ('-d', 'EA', 'co.QIP(2)', 'NEXP/poly')
('-d', 'AA', 'co.QIP(2)', 'co.NEXP') => ('-d', 'T', 'co.QIP(2)', 'co.NEXP')
('-d', 'AA', 'co.QIP(2)', 'co.NEXP') => ('-d', 'EA', 'co.QIP(2)', 'co.NEXP')
('-d', 'AA', 'QIP(2)', 'NEXP') => ('-d', 'T', 'QIP(2)', 'NEXP')
('-d', 'AA', 'QIP(2)', 'NEXP') => ('-d', 'EA', 'QIP(2)', 'NEXP')
('-d', 'A', 'QIP(3)', 'R') => ('-d', 'R', 'QIP(3)', 'R')
('-d', 'A', 'QIP(3)', 'R') => ('-d', 'AA', 'QIP(3)', 'R')
('-d', 'A', 'co.QIP(3)', 'R') => ('-d', 'R', 'co.QIP(3)', 'R')
('-d', 'A', 'co.QIP(3)', 'R') => ('-d', 'AA', 'co.QIP(3)', 'R')
('-d', 'A', 'co.QIP(3)', 'RE') => ('-d', 'R', 'co.QIP(3)', 'RE')
('-d', 'A', 'co.QIP(3)', 'RE') => ('-d', 'AA', 'co.QIP(3)', 'RE')
('-d', 'A', 'QIP(3)', 'co.RE') => ('-d', 'R', 'QIP(3)', 'co.RE')
('-d', 'A', 'QIP(3)', 'co.RE') => ('-d', 'AA', 'QIP(3)', 'co.RE')
('-d', 'AA', 'QIP(3)', 'co.RE') => ('-d', 'T', 'QIP(3)', 'co.RE')
('-d', 'AA', 'QIP(3)', 'co.RE') => ('-d', 'EA', 'QIP(3)', 'co.RE')
('-d', 'AA', 'co.QIP(3)', 'RE') => ('-d', 'T', 'co.QIP(3)', 'RE')
('-d', 'AA', 'co.QIP(3)', 'RE') => ('-d', 'EA', 'co.QIP(3)', 'RE')
('-d', 'A', 'co.QIP(3)', 'co.RE') => ('-d', 'R', 'co.QIP(3)', 'co.RE')
('-d', 'A', 'co.QIP(3)', 'co.RE') => ('-d', 'AA', 'co.QIP(3)', 'co.RE')
('-d', 'A', 'QIP(3)', 'RE') => ('-d', 'R', 'QIP(3)', 'RE')
('-d', 'A', 'QIP(3)', 'RE') => ('-d', 'AA', 'QIP(3)', 'RE')
('-d', 'AA', 'QIP(3)', 'RE') => ('-d', 'T', 'QIP(3)', 'RE')
('-d', 'AA', 'QIP(3)', 'RE') => ('-d', 'EA', 'QIP(3)', 'RE')
('-d', 'AA', 'co.QIP(3)', 'co.RE') => ('-d', 'T', 'co.QIP(3)', 'co.RE')
('-d', 'AA', 'co.QIP(3)', 'co.RE') => ('-d', 'EA', 'co.QIP(3)', 'co.RE')
('-d', 'AA', 'co.QIP(3)', 'R') => ('-d', 'T', 'co.QIP(3)', 'R')
('-d', 'AA', 'co.QIP(3)', 'R') => ('-d', 'EA', 'co.QIP(3)', 'R')
('-d', 'AA', 'QIP(3)', 'R') => ('-d', 'T', 'QIP(3)', 'R')
('-d', 'AA', 'QIP(3)', 'R') => ('-d', 'EA', 'QIP(3)', 'R')
('-d', 'A', 'QIP(3)', 'NEXP/poly') => ('-d', 'R', 'QIP(3)', 'NEXP/poly')
('-d', 'A', 'QIP(3)', 'NEXP/poly') => ('-d', 'AA', 'QIP(3)', 'NEXP/poly')
('-d', 'A', 'co.QIP(3)', 'NEXP/poly') => ('-d', 'R', 'co.QIP(3)', 'NEXP/poly')
('-d', 'A', 'co.QIP(3)', 'NEXP/poly') => ('-d', 'AA', 'co.QIP(3)', 'NEXP/poly')
('-d', 'AA', 'co.QIP(3)', 'NEXP/poly') => ('-d', 'T', 'co.QIP(3)', 'NEXP/poly')
('-d', 'AA', 'co.QIP(3)', 'NEXP/poly') => ('-d', 'EA', 'co.QIP(3)', 'NEXP/poly')
('-d', 'AA', 'QIP(3)', 'NEXP/poly') => ('-d', 'T', 'QIP(3)', 'NEXP/poly')
('-d', 'AA', 'QIP(3)', 'NEXP/poly') => ('-d', 'EA', 'QIP(3)', 'NEXP/poly')
('-d', 'AA', 'QIP(3)', 'NEXP') => ('-d', 'T', 'QIP(3)', 'NEXP')
('-d', 'AA', 'QIP(3)', 'NEXP') => ('-d', 'EA', 'QIP(3)', 'NEXP')
('-d', 'AA', 'co.QIP(3)', 'co.NEXP') => ('-d', 'T', 'co.QIP(3)', 'co.NEXP')
('-d', 'AA', 'co.QIP(3)', 'co.NEXP') => ('-d', 'EA', 'co.QIP(3)', 'co.NEXP')
('p', 'A', 'co.QIP(3)', 'co.NEXP') => ('p', 'R', 'co.QIP(3)', 'co.NEXP')
('p', 'A', 'co.QIP(3)', 'co.NEXP') => ('p', 'AA', 'co.QIP(3)', 'co.NEXP')
('p', 'A', 'QIP(3)', 'NEXP') => ('p', 'R', 'QIP(3)', 'NEXP')
('p', 'A', 'QIP(3)', 'NEXP') => ('p', 'AA', 'QIP(3)', 'NEXP')
('p', 'A', 'QIP(2)', 'NEXP') => ('p', 'R', 'QIP(2)', 'NEXP')
('p', 'A', 'QIP(2)', 'NEXP') => ('p', 'AA', 'QIP(2)', 'NEXP')
('p', 'A', 'co.QIP(2)', 'co.NEXP') => ('p', 'R', 'co.QIP(2)', 'co.NEXP')
('p', 'A', 'co.QIP(2)', 'co.NEXP') => ('p', 'AA', 'co.QIP(2)', 'co.NEXP')
('p', 'A', 'co.QIP(2)', 'R') => ('p', 'R', 'co.QIP(2)', 'R')
('p', 'A', 'co.QIP(2)', 'R') => ('p', 'AA', 'co.QIP(2)', 'R')
('p', 'A', 'QIP(2)', 'R') => ('p', 'R', 'QIP(2)', 'R')
('p', 'A', 'QIP(2)', 'R') => ('p', 'AA', 'QIP(2)', 'R')
('p', 'A', 'QIP(2)', 'RE') => ('p', 'R', 'QIP(2)', 'RE')
('p', 'A', 'QIP(2)', 'RE') => ('p', 'AA', 'QIP(2)', 'RE')
('p', 'A', 'co.QIP(2)', 'co.RE') => ('p', 'R', 'co.QIP(2)', 'co.RE')
('p', 'A', 'co.QIP(2)', 'co.RE') => ('p', 'AA', 'co.QIP(2)', 'co.RE')
('p', 'AA', 'co.QIP(2)', 'co.RE') => ('p', 'T', 'co.QIP(2)', 'co.RE')
('p', 'AA', 'co.QIP(2)', 'co.RE') => ('p', 'EA', 'co.QIP(2)', 'co.RE')
('p', 'AA', 'QIP(2)', 'RE') => ('p', 'T', 'QIP(2)', 'RE')
('p', 'AA', 'QIP(2)', 'RE') => ('p', 'EA', 'QIP(2)', 'RE')
('p', 'A', 'QIP(2)', 'co.RE') => ('p', 'R', 'QIP(2)', 'co.RE')
('p', 'A', 'QIP(2)', 'co.RE') => ('p', 'AA', 'QIP(2)', 'co.RE')
('p', 'A', 'co.QIP(2)', 'RE') => ('p', 'R', 'co.QIP(2)', 'RE')
('p', 'A', 'co.QIP(2)', 'RE') => ('p', 'AA', 'co.QIP(2)', 'RE')
('p', 'AA', 'co.QIP(2)', 'RE') => ('p', 'T', 'co.QIP(2)', 'RE')
('p', 'AA', 'co.QIP(2)', 'RE') => ('p', 'EA', 'co.QIP(2)', 'RE')
('p', 'AA', 'co.QIP(2)', 'R') => ('p', 'T', 'co.QIP(2)', 'R')
('p', 'AA', 'co.QIP(2)', 'R') => ('p', 'EA', 'co.QIP(2)', 'R')
('p', 'AA', 'QIP(2)', 'R') => ('p', 'T', 'QIP(2)', 'R')
('p', 'AA', 'QIP(2)', 'R') => ('p', 'EA', 'QIP(2)', 'R')
('p', 'AA', 'QIP(2)', 'co.RE') => ('p', 'T', 'QIP(2)', 'co.RE')
('p', 'AA', 'QIP(2)', 'co.RE') => ('p', 'EA', 'QIP(2)', 'co.RE')
('p', 'A', 'co.QIP(2)', 'NEXP/poly') => ('p', 'R', 'co.QIP(2)', 'NEXP/poly')
('p', 'A', 'co.QIP(2)', 'NEXP/poly') => ('p', 'AA', 'co.QIP(2)', 'NEXP/poly')
('p', 'A', 'QIP(2)', 'NEXP/poly') => ('p', 'R', 'QIP(2)', 'NEXP/poly')
('p', 'A', 'QIP(2)', 'NEXP/poly') => ('p', 'AA', 'QIP(2)', 'NEXP/poly')
('p', 'AA', 'QIP(2)', 'NEXP/poly') => ('p', 'T', 'QIP(2)', 'NEXP/poly')
('p', 'AA', 'QIP(2)', 'NEXP/poly') => ('p', 'EA', 'QIP(2)', 'NEXP/poly')
('p', 'AA', 'co.QIP(2)', 'NEXP/poly') => ('p', 'T', 'co.QIP(2)', 'NEXP/poly')
('p', 'AA', 'co.QIP(2)', 'NEXP/poly') => ('p', 'EA', 'co.QIP(2)', 'NEXP/poly')
('p', 'AA', 'co.QIP(2)', 'co.NEXP') => ('p', 'T', 'co.QIP(2)', 'co.NEXP')
('p', 'AA', 'co.QIP(2)', 'co.NEXP') => ('p', 'EA', 'co.QIP(2)', 'co.NEXP')
('p', 'AA', 'QIP(2)', 'NEXP') => ('p', 'T', 'QIP(2)', 'NEXP')
('p', 'AA', 'QIP(2)', 'NEXP') => ('p', 'EA', 'QIP(2)', 'NEXP')
('p', 'A', 'QIP(3)', 'R') => ('p', 'R', 'QIP(3)', 'R')
('p', 'A', 'QIP(3)', 'R') => ('p', 'AA', 'QIP(3)', 'R')
('p', 'A', 'co.QIP(3)', 'R') => ('p', 'R', 'co.QIP(3)', 'R')
('p', 'A', 'co.QIP(3)', 'R') => ('p', 'AA', 'co.QIP(3)', 'R')
('p', 'A', 'co.QIP(3)', 'RE') => ('p', 'R', 'co.QIP(3)', 'RE')
('p', 'A', 'co.QIP(3)', 'RE') => ('p', 'AA', 'co.QIP(3)', 'RE')
('p', 'A', 'QIP(3)', 'co.RE') => ('p', 'R', 'QIP(3)', 'co.RE')
('p', 'A', 'QIP(3)', 'co.RE') => ('p', 'AA', 'QIP(3)', 'co.RE')
('p', 'AA', 'QIP(3)', 'co.RE') => ('p', 'T', 'QIP(3)', 'co.RE')
('p', 'AA', 'QIP(3)', 'co.RE') => ('p', 'EA', 'QIP(3)', 'co.RE')
('p', 'AA', 'co.QIP(3)', 'RE') => ('p', 'T', 'co.QIP(3)', 'RE')
('p', 'AA', 'co.QIP(3)', 'RE') => ('p', 'EA', 'co.QIP(3)', 'RE')
('p', 'A', 'co.QIP(3)', 'co.RE') => ('p', 'R', 'co.QIP(3)', 'co.RE')
('p', 'A', 'co.QIP(3)', 'co.RE') => ('p', 'AA', 'co.QIP(3)', 'co.RE')
('p', 'A', 'QIP(3)', 'RE') => ('p', 'R', 'QIP(3)', 'RE')
('p', 'A', 'QIP(3)', 'RE') => ('p', 'AA', 'QIP(3)', 'RE')
('p', 'AA', 'QIP(3)', 'RE') => ('p', 'T', 'QIP(3)', 'RE')
('p', 'AA', 'QIP(3)', 'RE') => ('p', 'EA', 'QIP(3)', 'RE')
('p', 'AA', 'QIP(3)', 'R') => ('p', 'T', 'QIP(3)', 'R')
('p', 'AA', 'QIP(3)', 'R') => ('p', 'EA', 'QIP(3)', 'R')
('p', 'AA', 'co.QIP(3)', 'R') => ('p', 'T', 'co.QIP(3)', 'R')
('p', 'AA', 'co.QIP(3)', 'R') => ('p', 'EA', 'co.QIP(3)', 'R')
('p', 'AA', 'co.QIP(3)', 'co.RE') => ('p', 'T', 'co.QIP(3)', 'co.RE')
('p', 'AA', 'co.QIP(3)', 'co.RE') => ('p', 'EA', 'co.QIP(3)', 'co.RE')
('p', 'A', 'QIP(3)', 'NEXP/poly') => ('p', 'R', 'QIP(3)', 'NEXP/poly')
('p', 'A', 'QIP(3)', 'NEXP/poly') => ('p', 'AA', 'QIP(3)', 'NEXP/poly')
('p', 'A', 'co.QIP(3)', 'NEXP/poly') => ('p', 'R', 'co.QIP(3)', 'NEXP/poly')
('p', 'A', 'co.QIP(3)', 'NEXP/poly') => ('p', 'AA', 'co.QIP(3)', 'NEXP/poly')
('p', 'AA', 'co.QIP(3)', 'NEXP/poly') => ('p', 'T', 'co.QIP(3)', 'NEXP/poly')
('p', 'AA', 'co.QIP(3)', 'NEXP/poly') => ('p', 'EA', 'co.QIP(3)', 'NEXP/poly')
('p', 'AA', 'QIP(3)', 'NEXP/poly') => ('p', 'T', 'QIP(3)', 'NEXP/poly')
('p', 'AA', 'QIP(3)', 'NEXP/poly') => ('p', 'EA', 'QIP(3)', 'NEXP/poly')
('p', 'AA', 'QIP(3)', 'NEXP') => ('p', 'T', 'QIP(3)', 'NEXP')
('p', 'AA', 'QIP(3)', 'NEXP') => ('p', 'EA', 'QIP(3)', 'NEXP')
('p', 'AA', 'co.QIP(3)', 'co.NEXP') => ('p', 'T', 'co.QIP(3)', 'co.NEXP')
('p', 'AA', 'co.QIP(3)', 'co.NEXP') => ('p', 'EA', 'co.QIP(3)', 'co.NEXP')
('-d', 'A', 'co.QIP(3)', 'co.QMIP_le') => ('-d', 'R', 'co.QIP(3)', 'co.QMIP_le')
('-d', 'A', 'co.QIP(3)', 'co.QMIP_le') => ('-d', 'AA', 'co.QIP(3)', 'co.QMIP_le')
('-d', 'A', 'QIP(3)', 'QMIP_le') => ('-d', 'R', 'QIP(3)', 'QMIP_le')
('-d', 'A', 'QIP(3)', 'QMIP_le') => ('-d', 'AA', 'QIP(3)', 'QMIP_le')
('-d', 'A', 'QIP(2)', 'QMIP_le') => ('-d', 'R', 'QIP(2)', 'QMIP_le')
('-d', 'A', 'QIP(2)', 'QMIP_le') => ('-d', 'AA', 'QIP(2)', 'QMIP_le')
('-d', 'A', 'co.QIP(2)', 'co.QMIP_le') => ('-d', 'R', 'co.QIP(2)', 'co.QMIP_le')
('-d', 'A', 'co.QIP(2)', 'co.QMIP_le') => ('-d', 'AA', 'co.QIP(2)', 'co.QMIP_le')
('-d', 'AA', 'co.QIP(2)', 'co.QMIP_le') => ('-d', 'T', 'co.QIP(2)', 'co.QMIP_le')
('-d', 'AA', 'co.QIP(2)', 'co.QMIP_le') => ('-d', 'EA', 'co.QIP(2)', 'co.QMIP_le')
('-d', 'AA', 'QIP(2)', 'QMIP_le') => ('-d', 'T', 'QIP(2)', 'QMIP_le')
('-d', 'AA', 'QIP(2)', 'QMIP_le') => ('-d', 'EA', 'QIP(2)', 'QMIP_le')
('-d', 'AA', 'QIP(3)', 'QMIP_le') => ('-d', 'T', 'QIP(3)', 'QMIP_le')
('-d', 'AA', 'QIP(3)', 'QMIP_le') => ('-d', 'EA', 'QIP(3)', 'QMIP_le')
('-d', 'AA', 'co.QIP(3)', 'co.QMIP_le') => ('-d', 'T', 'co.QIP(3)', 'co.QMIP_le')
('-d', 'AA', 'co.QIP(3)', 'co.QMIP_le') => ('-d', 'EA', 'co.QIP(3)', 'co.QMIP_le')
('p', 'A', 'co.QIP(3)', 'co.QMIP_le') => ('p', 'R', 'co.QIP(3)', 'co.QMIP_le')
('p', 'A', 'co.QIP(3)', 'co.QMIP_le') => ('p', 'AA', 'co.QIP(3)', 'co.QMIP_le')
('p', 'A', 'QIP(3)', 'QMIP_le') => ('p', 'R', 'QIP(3)', 'QMIP_le')
('p', 'A', 'QIP(3)', 'QMIP_le') => ('p', 'AA', 'QIP(3)', 'QMIP_le')
('p', 'A', 'QIP(2)', 'QMIP_le') => ('p', 'R', 'QIP(2)', 'QMIP_le')
('p', 'A', 'QIP(2)', 'QMIP_le') => ('p', 'AA', 'QIP(2)', 'QMIP_le')
('p', 'A', 'co.QIP(2)', 'co.QMIP_le') => ('p', 'R', 'co.QIP(2)', 'co.QMIP_le')
('p', 'A', 'co.QIP(2)', 'co.QMIP_le') => ('p', 'AA', 'co.QIP(2)', 'co.QMIP_le')
('p', 'AA', 'co.QIP(2)', 'co.QMIP_le') => ('p', 'T', 'co.QIP(2)', 'co.QMIP_le')
('p', 'AA', 'co.QIP(2)', 'co.QMIP_le') => ('p', 'EA', 'co.QIP(2)', 'co.QMIP_le')
('p', 'AA', 'QIP(2)', 'QMIP_le') => ('p', 'T', 'QIP(2)', 'QMIP_le')
('p', 'AA', 'QIP(2)', 'QMIP_le') => ('p', 'EA', 'QIP(2)', 'QMIP_le')
('p', 'AA', 'QIP(3)', 'QMIP_le') => ('p', 'T', 'QIP(3)', 'QMIP_le')
('p', 'AA', 'QIP(3)', 'QMIP_le') => ('p', 'EA', 'QIP(3)', 'QMIP_le')
('p', 'AA', 'co.QIP(3)', 'co.QMIP_le') => ('p', 'T', 'co.QIP(3)', 'co.QMIP_le')
('p', 'AA', 'co.QIP(3)', 'co.QMIP_le') => ('p', 'EA', 'co.QIP(3)', 'co.QMIP_le')
('p', 'E', 'co.QIP(2)', 'co.QIP') => ('-d', 'E', 'co.QIP(2)', 'co.QIP')
('p', 'E', 'QIP(2)', 'QIP') => ('-d', 'E', 'QIP(2)', 'QIP')
('p', 'A', 'co.QIP(2)', 'co.QIP') => ('-d', 'A', 'co.QIP(2)', 'co.QIP')
('p', 'A', 'co.QIP(2)', 'co.QIP') => ('p', 'R', 'co.QIP(2)', 'co.QIP')
('p', 'A', 'co.QIP(2)', 'co.QIP') => ('p', 'AA', 'co.QIP(2)', 'co.QIP')
('p', 'A', 'QIP(2)', 'QIP') => ('-d', 'A', 'QIP(2)', 'QIP')
('p', 'A', 'QIP(2)', 'QIP') => ('p', 'R', 'QIP(2)', 'QIP')
('p', 'A', 'QIP(2)', 'QIP') => ('p', 'AA', 'QIP(2)', 'QIP')
('-d', 'A', 'QIP(2)', 'QMIP_ne') => ('-d', 'R', 'QIP(2)', 'QMIP_ne')
('-d', 'A', 'QIP(2)', 'QMIP_ne') => ('-d', 'AA', 'QIP(2)', 'QMIP_ne')
('-d', 'A', 'co.QIP(2)', 'co.QMIP_ne') => ('-d', 'R', 'co.QIP(2)', 'co.QMIP_ne')
('-d', 'A', 'co.QIP(2)', 'co.QMIP_ne') => ('-d', 'AA', 'co.QIP(2)', 'co.QMIP_ne')
('-d', 'AA', 'co.QIP(2)', 'co.QMIP_ne') => ('-d', 'T', 'co.QIP(2)', 'co.QMIP_ne')
('-d', 'AA', 'co.QIP(2)', 'co.QMIP_ne') => ('-d', 'EA', 'co.QIP(2)', 'co.QMIP_ne')
('-d', 'AA', 'QIP(2)', 'QMIP_ne') => ('-d', 'T', 'QIP(2)', 'QMIP_ne')
('-d', 'AA', 'QIP(2)', 'QMIP_ne') => ('-d', 'EA', 'QIP(2)', 'QMIP_ne')
('p', 'A', 'QIP(2)', 'QMIP_ne') => ('p', 'R', 'QIP(2)', 'QMIP_ne')
('p', 'A', 'QIP(2)', 'QMIP_ne') => ('p', 'AA', 'QIP(2)', 'QMIP_ne')
('p', 'A', 'co.QIP(2)', 'co.QMIP_ne') => ('p', 'R', 'co.QIP(2)', 'co.QMIP_ne')
('p', 'A', 'co.QIP(2)', 'co.QMIP_ne') => ('p', 'AA', 'co.QIP(2)', 'co.QMIP_ne')
('p', 'AA', 'co.QIP(2)', 'co.QMIP_ne') => ('p', 'T', 'co.QIP(2)', 'co.QMIP_ne')
('p', 'AA', 'co.QIP(2)', 'co.QMIP_ne') => ('p', 'EA', 'co.QIP(2)', 'co.QMIP_ne')
('p', 'AA', 'QIP(2)', 'QMIP_ne') => ('p', 'T', 'QIP(2)', 'QMIP_ne')
('p', 'AA', 'QIP(2)', 'QMIP_ne') => ('p', 'EA', 'QIP(2)', 'QMIP_ne')
('p', 'AA', 'QIP(2)', 'QIP') => ('-d', 'AA', 'QIP(2)', 'QIP')
('p', 'AA', 'QIP(2)', 'QIP') => ('p', 'T', 'QIP(2)', 'QIP')
('p', 'AA', 'QIP(2)', 'QIP') => ('p', 'EA', 'QIP(2)', 'QIP')
('p', 'AA', 'co.QIP(2)', 'co.QIP') => ('-d', 'AA', 'co.QIP(2)', 'co.QIP')
('p', 'AA', 'co.QIP(2)', 'co.QIP') => ('p', 'T', 'co.QIP(2)', 'co.QIP')
('p', 'AA', 'co.QIP(2)', 'co.QIP') => ('p', 'EA', 'co.QIP(2)', 'co.QIP')
('p', 'EA', 'co.QIP(2)', 'co.QIP') => ('-d', 'EA', 'co.QIP(2)', 'co.QIP')
('p', 'EA', 'QIP(2)', 'QIP') => ('-d', 'EA', 'QIP(2)', 'QIP')
('p', 'T', 'co.QIP(2)', 'co.QIP') => ('-d', 'T', 'co.QIP(2)', 'co.QIP')
('p', 'T', 'QIP(2)', 'QIP') => ('-d', 'T', 'QIP(2)', 'QIP')
('p', 'R', 'QIP(2)', 'QIP') => ('-d', 'R', 'QIP(2)', 'QIP')
('p', 'R', 'co.QIP(2)', 'co.QIP') => ('-d', 'R', 'co.QIP(2)', 'co.QIP')
('-d', 'A', 'co.QIP(3)', 'co.QMIP_ne') => ('-d', 'R', 'co.QIP(3)', 'co.QMIP_ne')
('-d', 'A', 'co.QIP(3)', 'co.QMIP_ne') => ('-d', 'AA', 'co.QIP(3)', 'co.QMIP_ne')
('-d', 'A', 'QIP(3)', 'QMIP_ne') => ('-d', 'R', 'QIP(3)', 'QMIP_ne')
('-d', 'A', 'QIP(3)', 'QMIP_ne') => ('-d', 'AA', 'QIP(3)', 'QMIP_ne')
('-d', 'AA', 'QIP(3)', 'QMIP_ne') => ('-d', 'T', 'QIP(3)', 'QMIP_ne')
('-d', 'AA', 'QIP(3)', 'QMIP_ne') => ('-d', 'EA', 'QIP(3)', 'QMIP_ne')
('-d', 'AA', 'co.QIP(3)', 'co.QMIP_ne') => ('-d', 'T', 'co.QIP(3)', 'co.QMIP_ne')
('-d', 'AA', 'co.QIP(3)', 'co.QMIP_ne') => ('-d', 'EA', 'co.QIP(3)', 'co.QMIP_ne')
('p', 'A', 'co.QIP(3)', 'co.QMIP_ne') => ('p', 'R', 'co.QIP(3)', 'co.QMIP_ne')
('p', 'A', 'co.QIP(3)', 'co.QMIP_ne') => ('p', 'AA', 'co.QIP(3)', 'co.QMIP_ne')
('p', 'A', 'QIP(3)', 'QMIP_ne') => ('p', 'R', 'QIP(3)', 'QMIP_ne')
('p', 'A', 'QIP(3)', 'QMIP_ne') => ('p', 'AA', 'QIP(3)', 'QMIP_ne')
('p', 'AA', 'QIP(3)', 'QMIP_ne') => ('p', 'T', 'QIP(3)', 'QMIP_ne')
('p', 'AA', 'QIP(3)', 'QMIP_ne') => ('p', 'EA', 'QIP(3)', 'QMIP_ne')
('p', 'AA', 'co.QIP(3)', 'co.QMIP_ne') => ('p', 'T', 'co.QIP(3)', 'co.QMIP_ne')
('p', 'AA', 'co.QIP(3)', 'co.QMIP_ne') => ('p', 'EA', 'co.QIP(3)', 'co.QMIP_ne')
('p', 'AA', 'co.QIP(3)', 'co.QIP') => ('-d', 'AA', 'co.QIP(3)', 'co.QIP')
('p', 'AA', 'co.QIP(3)', 'co.QIP') => ('p', 'T', 'co.QIP(3)', 'co.QIP')
('p', 'AA', 'co.QIP(3)', 'co.QIP') => ('p', 'EA', 'co.QIP(3)', 'co.QIP')
('p', 'AA', 'QIP(3)', 'QIP') => ('-d', 'AA', 'QIP(3)', 'QIP')
('p', 'AA', 'QIP(3)', 'QIP') => ('p', 'T', 'QIP(3)', 'QIP')
('p', 'AA', 'QIP(3)', 'QIP') => ('p', 'EA', 'QIP(3)', 'QIP')
('p', 'EA', 'QIP(3)', 'QIP') => ('-d', 'EA', 'QIP(3)', 'QIP')
('p', 'EA', 'QIP(3)', 'QIP') => ('p', 'E', 'QIP(3)', 'QIP')
('p', 'EA', 'co.QIP(3)', 'co.QIP') => ('-d', 'EA', 'co.QIP(3)', 'co.QIP')
('p', 'EA', 'co.QIP(3)', 'co.QIP') => ('p', 'E', 'co.QIP(3)', 'co.QIP')
('p', 'E', 'co.QIP(3)', 'co.QIP') => ('-d', 'E', 'co.QIP(3)', 'co.QIP')
('p', 'E', 'QIP(3)', 'QIP') => ('-d', 'E', 'QIP(3)', 'QIP')
('p', 'T', 'QIP(3)', 'QIP') => ('-d', 'T', 'QIP(3)', 'QIP')
('p', 'T', 'co.QIP(3)', 'co.QIP') => ('-d', 'T', 'co.QIP(3)', 'co.QIP')
('p', 'R', 'co.QIP(3)', 'co.QIP') => ('-d', 'R', 'co.QIP(3)', 'co.QIP')
('p', 'R', 'QIP(3)', 'QIP') => ('-d', 'R', 'QIP(3)', 'QIP')
('p', 'A', 'QIP', 'QMIP_fe') => ('-d', 'A', 'QIP', 'QMIP_fe')
('p', 'A', 'QIP', 'QMIP_fe') => ('p', 'R', 'QIP', 'QMIP_fe')
('p', 'A', 'QIP', 'QMIP_fe') => ('p', 'AA', 'QIP', 'QMIP_fe')
('p', 'A', 'co.QIP', 'co.QMIP_fe') => ('-d', 'A', 'co.QIP', 'co.QMIP_fe')
('p', 'A', 'co.QIP', 'co.QMIP_fe') => ('p', 'R', 'co.QIP', 'co.QMIP_fe')
('p', 'A', 'co.QIP', 'co.QMIP_fe') => ('p', 'AA', 'co.QIP', 'co.QMIP_fe')
('p', 'A', 'cocap.QIP', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.QIP', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QIP', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.QIP', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QIP', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.QIP', 'cocap.QMIP_fe')
('d', 'A', 'cocap.QMIP_fe', 'RP') => ('-p', 'A', 'cocap.QMIP_fe', 'RP')
('d', 'A', 'cocap.QMIP_fe', 'co.RP') => ('-p', 'A', 'cocap.QMIP_fe', 'co.RP')
('p', 'A', 'P', 'cocap.QMIP_fe') => ('-d', 'A', 'P', 'cocap.QMIP_fe')
('p', 'A', 'P', 'cocap.QMIP_fe') => ('p', 'R', 'P', 'cocap.QMIP_fe')
('p', 'A', 'P', 'cocap.QMIP_fe') => ('p', 'AA', 'P', 'cocap.QMIP_fe')
('-d', 'A', 'P', 'QMIP_fe') => ('-d', 'R', 'P', 'QMIP_fe')
('-d', 'A', 'P', 'QMIP_fe') => ('-d', 'AA', 'P', 'QMIP_fe')
('-d', 'A', 'P', 'co.QMIP_fe') => ('-d', 'R', 'P', 'co.QMIP_fe')
('-d', 'A', 'P', 'co.QMIP_fe') => ('-d', 'AA', 'P', 'co.QMIP_fe')
('-d', 'A', 'P', 'cocap.QMIP_fe') => ('-d', 'R', 'P', 'cocap.QMIP_fe')
('-d', 'A', 'P', 'cocap.QMIP_fe') => ('-d', 'AA', 'P', 'cocap.QMIP_fe')
('-d', 'AA', 'P', 'cocap.QMIP_fe') => ('-d', 'T', 'P', 'cocap.QMIP_fe')
('-d', 'AA', 'P', 'cocap.QMIP_fe') => ('-d', 'EA', 'P', 'cocap.QMIP_fe')
('-d', 'AA', 'P', 'QMIP_fe') => ('-d', 'T', 'P', 'QMIP_fe')
('-d', 'AA', 'P', 'QMIP_fe') => ('-d', 'EA', 'P', 'QMIP_fe')
('-d', 'AA', 'P', 'co.QMIP_fe') => ('-d', 'T', 'P', 'co.QMIP_fe')
('-d', 'AA', 'P', 'co.QMIP_fe') => ('-d', 'EA', 'P', 'co.QMIP_fe')
('p', 'A', 'P', 'QMIP_fe') => ('p', 'R', 'P', 'QMIP_fe')
('p', 'A', 'P', 'QMIP_fe') => ('p', 'AA', 'P', 'QMIP_fe')
('p', 'A', 'P', 'co.QMIP_fe') => ('p', 'R', 'P', 'co.QMIP_fe')
('p', 'A', 'P', 'co.QMIP_fe') => ('p', 'AA', 'P', 'co.QMIP_fe')
('p', 'AA', 'P', 'co.QMIP_fe') => ('p', 'T', 'P', 'co.QMIP_fe')
('p', 'AA', 'P', 'co.QMIP_fe') => ('p', 'EA', 'P', 'co.QMIP_fe')
('p', 'AA', 'P', 'QMIP_fe') => ('p', 'T', 'P', 'QMIP_fe')
('p', 'AA', 'P', 'QMIP_fe') => ('p', 'EA', 'P', 'QMIP_fe')
('p', 'AA', 'P', 'cocap.QMIP_fe') => ('p', 'T', 'P', 'cocap.QMIP_fe')
('p', 'AA', 'P', 'cocap.QMIP_fe') => ('p', 'EA', 'P', 'cocap.QMIP_fe')
('d', 'A', 'cocap.QMIP_fe', 'co.Sigma_2P') => ('-p', 'A', 'cocap.QMIP_fe', 'co.Sigma_2P')
('d', 'A', 'cocap.QMIP_fe', 'Sigma_2P') => ('-p', 'A', 'cocap.QMIP_fe', 'Sigma_2P')
('d', 'A', 'cocap.QMIP_fe', 'PH') => ('-p', 'A', 'cocap.QMIP_fe', 'PH')
('d', 'A', 'co.QMIP_fe', 'PH') => ('-p', 'A', 'co.QMIP_fe', 'PH')
('d', 'A', 'QMIP_fe', 'PH') => ('-p', 'A', 'QMIP_fe', 'PH')
('p', 'A', 'SZK', 'cocap.QMIP_fe') => ('-d', 'A', 'SZK', 'cocap.QMIP_fe')
('p', 'A', 'SZK', 'cocap.QMIP_fe') => ('p', 'R', 'SZK', 'cocap.QMIP_fe')
('p', 'A', 'SZK', 'cocap.QMIP_fe') => ('p', 'AA', 'SZK', 'cocap.QMIP_fe')
('d', 'A', 'cocap.QMIP_fe', 'BQP') => ('-p', 'A', 'cocap.QMIP_fe', 'BQP')
('d', 'A', 'co.QMIP_fe', 'BQP') => ('-p', 'A', 'co.QMIP_fe', 'BQP')
('d', 'A', 'QMIP_fe', 'BQP') => ('-p', 'A', 'QMIP_fe', 'BQP')
('p', 'A', 'cocap.NISZK', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.NISZK', 'cocap.QMIP_fe')
('p', 'A', 'cocap.NISZK', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.NISZK', 'cocap.QMIP_fe')
('p', 'A', 'cocap.NISZK', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.NISZK', 'QMIP_fe') => ('-d', 'AA', 'cocap.NISZK', 'QMIP_fe')
('-d', 'A', 'cocap.NISZK', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.NISZK', 'co.QMIP_fe')
('-d', 'A', 'cocap.NISZK', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_fe')
('-d', 'A', 'BPP', 'cocap.QMIP_fe') => ('-d', 'AA', 'BPP', 'cocap.QMIP_fe')
('-d', 'A', 'BPP', 'QMIP_fe') => ('-d', 'AA', 'BPP', 'QMIP_fe')
('-d', 'A', 'BPP', 'co.QMIP_fe') => ('-d', 'AA', 'BPP', 'co.QMIP_fe')
('-d', 'AA', 'BPP', 'co.QMIP_fe') => ('-d', 'T', 'BPP', 'co.QMIP_fe')
('-d', 'AA', 'BPP', 'co.QMIP_fe') => ('-d', 'EA', 'BPP', 'co.QMIP_fe')
('-d', 'AA', 'BPP', 'QMIP_fe') => ('-d', 'T', 'BPP', 'QMIP_fe')
('-d', 'AA', 'BPP', 'QMIP_fe') => ('-d', 'EA', 'BPP', 'QMIP_fe')
('-d', 'AA', 'BPP', 'cocap.QMIP_fe') => ('-d', 'T', 'BPP', 'cocap.QMIP_fe')
('-d', 'AA', 'BPP', 'cocap.QMIP_fe') => ('-d', 'EA', 'BPP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.NISZK', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.NISZK', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.NISZK', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.NISZK', 'QMIP_fe') => ('-d', 'T', 'cocap.NISZK', 'QMIP_fe')
('-d', 'AA', 'cocap.NISZK', 'QMIP_fe') => ('-d', 'EA', 'cocap.NISZK', 'QMIP_fe')
('-d', 'AA', 'cocap.NISZK', 'co.QMIP_fe') => ('-d', 'T', 'cocap.NISZK', 'co.QMIP_fe')
('-d', 'AA', 'cocap.NISZK', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.NISZK', 'co.QMIP_fe')
('p', 'A', 'cocap.NISZK', 'QMIP_fe') => ('p', 'R', 'cocap.NISZK', 'QMIP_fe')
('p', 'A', 'cocap.NISZK', 'QMIP_fe') => ('p', 'AA', 'cocap.NISZK', 'QMIP_fe')
('p', 'A', 'cocap.NISZK', 'co.QMIP_fe') => ('p', 'R', 'cocap.NISZK', 'co.QMIP_fe')
('p', 'A', 'cocap.NISZK', 'co.QMIP_fe') => ('p', 'AA', 'cocap.NISZK', 'co.QMIP_fe')
('p', 'A', 'BPP', 'co.QMIP_fe') => ('p', 'R', 'BPP', 'co.QMIP_fe')
('p', 'A', 'BPP', 'co.QMIP_fe') => ('p', 'AA', 'BPP', 'co.QMIP_fe')
('p', 'A', 'BPP', 'QMIP_fe') => ('p', 'R', 'BPP', 'QMIP_fe')
('p', 'A', 'BPP', 'QMIP_fe') => ('p', 'AA', 'BPP', 'QMIP_fe')
('p', 'A', 'BPP', 'cocap.QMIP_fe') => ('p', 'R', 'BPP', 'cocap.QMIP_fe')
('p', 'A', 'BPP', 'cocap.QMIP_fe') => ('p', 'AA', 'BPP', 'cocap.QMIP_fe')
('p', 'AA', 'BPP', 'cocap.QMIP_fe') => ('p', 'T', 'BPP', 'cocap.QMIP_fe')
('p', 'AA', 'BPP', 'cocap.QMIP_fe') => ('p', 'EA', 'BPP', 'cocap.QMIP_fe')
('p', 'AA', 'BPP', 'QMIP_fe') => ('p', 'T', 'BPP', 'QMIP_fe')
('p', 'AA', 'BPP', 'QMIP_fe') => ('p', 'EA', 'BPP', 'QMIP_fe')
('p', 'AA', 'BPP', 'co.QMIP_fe') => ('p', 'T', 'BPP', 'co.QMIP_fe')
('p', 'AA', 'BPP', 'co.QMIP_fe') => ('p', 'EA', 'BPP', 'co.QMIP_fe')
('p', 'AA', 'cocap.NISZK', 'co.QMIP_fe') => ('p', 'T', 'cocap.NISZK', 'co.QMIP_fe')
('p', 'AA', 'cocap.NISZK', 'co.QMIP_fe') => ('p', 'EA', 'cocap.NISZK', 'co.QMIP_fe')
('p', 'AA', 'cocap.NISZK', 'QMIP_fe') => ('p', 'T', 'cocap.NISZK', 'QMIP_fe')
('p', 'AA', 'cocap.NISZK', 'QMIP_fe') => ('p', 'EA', 'cocap.NISZK', 'QMIP_fe')
('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.NISZK', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.NISZK', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.NISZK', 'cocap.QMIP_fe')
('p', 'A', 'co.NISZK', 'cocap.QMIP_fe') => ('-d', 'A', 'co.NISZK', 'cocap.QMIP_fe')
('p', 'A', 'co.NISZK', 'cocap.QMIP_fe') => ('p', 'R', 'co.NISZK', 'cocap.QMIP_fe')
('p', 'A', 'co.NISZK', 'cocap.QMIP_fe') => ('p', 'AA', 'co.NISZK', 'cocap.QMIP_fe')
('p', 'A', 'NISZK', 'cocap.QMIP_fe') => ('-d', 'A', 'NISZK', 'cocap.QMIP_fe')
('p', 'A', 'NISZK', 'cocap.QMIP_fe') => ('p', 'R', 'NISZK', 'cocap.QMIP_fe')
('p', 'A', 'NISZK', 'cocap.QMIP_fe') => ('p', 'AA', 'NISZK', 'cocap.QMIP_fe')
('-d', 'A', 'NISZK', 'QMIP_fe') => ('-d', 'AA', 'NISZK', 'QMIP_fe')
('-d', 'A', 'co.NISZK', 'co.QMIP_fe') => ('-d', 'AA', 'co.NISZK', 'co.QMIP_fe')
('-d', 'AA', 'co.NISZK', 'co.QMIP_fe') => ('-d', 'T', 'co.NISZK', 'co.QMIP_fe')
('-d', 'AA', 'co.NISZK', 'co.QMIP_fe') => ('-d', 'EA', 'co.NISZK', 'co.QMIP_fe')
('-d', 'AA', 'NISZK', 'QMIP_fe') => ('-d', 'T', 'NISZK', 'QMIP_fe')
('-d', 'AA', 'NISZK', 'QMIP_fe') => ('-d', 'EA', 'NISZK', 'QMIP_fe')
('p', 'A', 'NISZK', 'QMIP_fe') => ('p', 'R', 'NISZK', 'QMIP_fe')
('p', 'A', 'NISZK', 'QMIP_fe') => ('p', 'AA', 'NISZK', 'QMIP_fe')
('p', 'A', 'co.NISZK', 'co.QMIP_fe') => ('p', 'R', 'co.NISZK', 'co.QMIP_fe')
('p', 'A', 'co.NISZK', 'co.QMIP_fe') => ('p', 'AA', 'co.NISZK', 'co.QMIP_fe')
('p', 'AA', 'co.NISZK', 'co.QMIP_fe') => ('p', 'T', 'co.NISZK', 'co.QMIP_fe')
('p', 'AA', 'co.NISZK', 'co.QMIP_fe') => ('p', 'EA', 'co.NISZK', 'co.QMIP_fe')
('p', 'AA', 'NISZK', 'QMIP_fe') => ('p', 'T', 'NISZK', 'QMIP_fe')
('p', 'AA', 'NISZK', 'QMIP_fe') => ('p', 'EA', 'NISZK', 'QMIP_fe')
('-d', 'A', 'NISZK', 'co.QMIP_fe') => ('-d', 'AA', 'NISZK', 'co.QMIP_fe')
('-d', 'A', 'NISZK', 'cocap.QMIP_fe') => ('-d', 'AA', 'NISZK', 'cocap.QMIP_fe')
('-d', 'A', 'co.NISZK', 'cocap.QMIP_fe') => ('-d', 'AA', 'co.NISZK', 'cocap.QMIP_fe')
('-d', 'A', 'co.NISZK', 'QMIP_fe') => ('-d', 'AA', 'co.NISZK', 'QMIP_fe')
('-d', 'AA', 'co.NISZK', 'QMIP_fe') => ('-d', 'T', 'co.NISZK', 'QMIP_fe')
('-d', 'AA', 'co.NISZK', 'QMIP_fe') => ('-d', 'EA', 'co.NISZK', 'QMIP_fe')
('-d', 'AA', 'co.NISZK', 'cocap.QMIP_fe') => ('-d', 'T', 'co.NISZK', 'cocap.QMIP_fe')
('-d', 'AA', 'co.NISZK', 'cocap.QMIP_fe') => ('-d', 'EA', 'co.NISZK', 'cocap.QMIP_fe')
('-d', 'AA', 'NISZK', 'cocap.QMIP_fe') => ('-d', 'T', 'NISZK', 'cocap.QMIP_fe')
('-d', 'AA', 'NISZK', 'cocap.QMIP_fe') => ('-d', 'EA', 'NISZK', 'cocap.QMIP_fe')
('-d', 'AA', 'NISZK', 'co.QMIP_fe') => ('-d', 'T', 'NISZK', 'co.QMIP_fe')
('-d', 'AA', 'NISZK', 'co.QMIP_fe') => ('-d', 'EA', 'NISZK', 'co.QMIP_fe')
('p', 'A', 'NISZK', 'co.QMIP_fe') => ('p', 'R', 'NISZK', 'co.QMIP_fe')
('p', 'A', 'NISZK', 'co.QMIP_fe') => ('p', 'AA', 'NISZK', 'co.QMIP_fe')
('p', 'A', 'co.NISZK', 'QMIP_fe') => ('p', 'R', 'co.NISZK', 'QMIP_fe')
('p', 'A', 'co.NISZK', 'QMIP_fe') => ('p', 'AA', 'co.NISZK', 'QMIP_fe')
('p', 'AA', 'co.NISZK', 'QMIP_fe') => ('p', 'T', 'co.NISZK', 'QMIP_fe')
('p', 'AA', 'co.NISZK', 'QMIP_fe') => ('p', 'EA', 'co.NISZK', 'QMIP_fe')
('p', 'AA', 'co.NISZK', 'cocap.QMIP_fe') => ('p', 'T', 'co.NISZK', 'cocap.QMIP_fe')
('p', 'AA', 'co.NISZK', 'cocap.QMIP_fe') => ('p', 'EA', 'co.NISZK', 'cocap.QMIP_fe')
('p', 'AA', 'NISZK', 'cocap.QMIP_fe') => ('p', 'T', 'NISZK', 'cocap.QMIP_fe')
('p', 'AA', 'NISZK', 'cocap.QMIP_fe') => ('p', 'EA', 'NISZK', 'cocap.QMIP_fe')
('p', 'AA', 'NISZK', 'co.QMIP_fe') => ('p', 'T', 'NISZK', 'co.QMIP_fe')
('p', 'AA', 'NISZK', 'co.QMIP_fe') => ('p', 'EA', 'NISZK', 'co.QMIP_fe')
('-d', 'A', 'SZK', 'QMIP_fe') => ('-d', 'AA', 'SZK', 'QMIP_fe')
('-d', 'A', 'SZK', 'co.QMIP_fe') => ('-d', 'AA', 'SZK', 'co.QMIP_fe')
('-d', 'A', 'SZK', 'cocap.QMIP_fe') => ('-d', 'AA', 'SZK', 'cocap.QMIP_fe')
('-d', 'AA', 'SZK', 'cocap.QMIP_fe') => ('-d', 'T', 'SZK', 'cocap.QMIP_fe')
('-d', 'AA', 'SZK', 'cocap.QMIP_fe') => ('-d', 'EA', 'SZK', 'cocap.QMIP_fe')
('-d', 'AA', 'SZK', 'QMIP_fe') => ('-d', 'T', 'SZK', 'QMIP_fe')
('-d', 'AA', 'SZK', 'QMIP_fe') => ('-d', 'EA', 'SZK', 'QMIP_fe')
('-d', 'AA', 'SZK', 'co.QMIP_fe') => ('-d', 'T', 'SZK', 'co.QMIP_fe')
('-d', 'AA', 'SZK', 'co.QMIP_fe') => ('-d', 'EA', 'SZK', 'co.QMIP_fe')
('p', 'A', 'SZK', 'QMIP_fe') => ('p', 'R', 'SZK', 'QMIP_fe')
('p', 'A', 'SZK', 'QMIP_fe') => ('p', 'AA', 'SZK', 'QMIP_fe')
('p', 'A', 'SZK', 'co.QMIP_fe') => ('p', 'R', 'SZK', 'co.QMIP_fe')
('p', 'A', 'SZK', 'co.QMIP_fe') => ('p', 'AA', 'SZK', 'co.QMIP_fe')
('p', 'AA', 'SZK', 'co.QMIP_fe') => ('p', 'T', 'SZK', 'co.QMIP_fe')
('p', 'AA', 'SZK', 'co.QMIP_fe') => ('p', 'EA', 'SZK', 'co.QMIP_fe')
('p', 'AA', 'SZK', 'QMIP_fe') => ('p', 'T', 'SZK', 'QMIP_fe')
('p', 'AA', 'SZK', 'QMIP_fe') => ('p', 'EA', 'SZK', 'QMIP_fe')
('p', 'AA', 'SZK', 'cocap.QMIP_fe') => ('p', 'T', 'SZK', 'cocap.QMIP_fe')
('p', 'AA', 'SZK', 'cocap.QMIP_fe') => ('p', 'EA', 'SZK', 'cocap.QMIP_fe')
('p', 'A', 'BQP', 'cocap.QMIP_fe') => ('-d', 'A', 'BQP', 'cocap.QMIP_fe')
('p', 'A', 'BQP', 'cocap.QMIP_fe') => ('p', 'R', 'BQP', 'cocap.QMIP_fe')
('p', 'A', 'BQP', 'cocap.QMIP_fe') => ('p', 'AA', 'BQP', 'cocap.QMIP_fe')
('-d', 'A', 'BQP', 'QMIP_fe') => ('-d', 'R', 'BQP', 'QMIP_fe')
('-d', 'A', 'BQP', 'QMIP_fe') => ('-d', 'AA', 'BQP', 'QMIP_fe')
('-d', 'A', 'BQP', 'co.QMIP_fe') => ('-d', 'R', 'BQP', 'co.QMIP_fe')
('-d', 'A', 'BQP', 'co.QMIP_fe') => ('-d', 'AA', 'BQP', 'co.QMIP_fe')
('-d', 'A', 'BQP', 'cocap.QMIP_fe') => ('-d', 'R', 'BQP', 'cocap.QMIP_fe')
('-d', 'A', 'BQP', 'cocap.QMIP_fe') => ('-d', 'AA', 'BQP', 'cocap.QMIP_fe')
('-d', 'AA', 'BQP', 'cocap.QMIP_fe') => ('-d', 'T', 'BQP', 'cocap.QMIP_fe')
('-d', 'AA', 'BQP', 'cocap.QMIP_fe') => ('-d', 'EA', 'BQP', 'cocap.QMIP_fe')
('-d', 'AA', 'BQP', 'QMIP_fe') => ('-d', 'T', 'BQP', 'QMIP_fe')
('-d', 'AA', 'BQP', 'QMIP_fe') => ('-d', 'EA', 'BQP', 'QMIP_fe')
('-d', 'AA', 'BQP', 'co.QMIP_fe') => ('-d', 'T', 'BQP', 'co.QMIP_fe')
('-d', 'AA', 'BQP', 'co.QMIP_fe') => ('-d', 'EA', 'BQP', 'co.QMIP_fe')
('p', 'A', 'BQP', 'QMIP_fe') => ('p', 'R', 'BQP', 'QMIP_fe')
('p', 'A', 'BQP', 'QMIP_fe') => ('p', 'AA', 'BQP', 'QMIP_fe')
('p', 'A', 'BQP', 'co.QMIP_fe') => ('p', 'R', 'BQP', 'co.QMIP_fe')
('p', 'A', 'BQP', 'co.QMIP_fe') => ('p', 'AA', 'BQP', 'co.QMIP_fe')
('p', 'AA', 'BQP', 'co.QMIP_fe') => ('p', 'T', 'BQP', 'co.QMIP_fe')
('p', 'AA', 'BQP', 'co.QMIP_fe') => ('p', 'EA', 'BQP', 'co.QMIP_fe')
('p', 'AA', 'BQP', 'QMIP_fe') => ('p', 'T', 'BQP', 'QMIP_fe')
('p', 'AA', 'BQP', 'QMIP_fe') => ('p', 'EA', 'BQP', 'QMIP_fe')
('p', 'AA', 'BQP', 'cocap.QMIP_fe') => ('p', 'T', 'BQP', 'cocap.QMIP_fe')
('p', 'AA', 'BQP', 'cocap.QMIP_fe') => ('p', 'EA', 'BQP', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QCMA', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.QCMA', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QCMA', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.QCMA', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QCMA', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.QCMA', 'cocap.QMIP_fe')
('p', 'A', 'cocap.NP', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.NP', 'cocap.QMIP_fe')
('p', 'A', 'cocap.NP', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.NP', 'cocap.QMIP_fe')
('p', 'A', 'cocap.NP', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.NP', 'cocap.QMIP_fe')
('p', 'A', 'ZPP', 'cocap.QMIP_fe') => ('-d', 'A', 'ZPP', 'cocap.QMIP_fe')
('p', 'A', 'ZPP', 'cocap.QMIP_fe') => ('p', 'R', 'ZPP', 'cocap.QMIP_fe')
('p', 'A', 'ZPP', 'cocap.QMIP_fe') => ('p', 'AA', 'ZPP', 'cocap.QMIP_fe')
('-d', 'A', 'ZPP', 'QMIP_fe') => ('-d', 'AA', 'ZPP', 'QMIP_fe')
('-d', 'A', 'ZPP', 'co.QMIP_fe') => ('-d', 'AA', 'ZPP', 'co.QMIP_fe')
('-d', 'A', 'ZPP', 'cocap.QMIP_fe') => ('-d', 'AA', 'ZPP', 'cocap.QMIP_fe')
('-d', 'AA', 'ZPP', 'cocap.QMIP_fe') => ('-d', 'T', 'ZPP', 'cocap.QMIP_fe')
('-d', 'AA', 'ZPP', 'cocap.QMIP_fe') => ('-d', 'EA', 'ZPP', 'cocap.QMIP_fe')
('-d', 'AA', 'ZPP', 'QMIP_fe') => ('-d', 'T', 'ZPP', 'QMIP_fe')
('-d', 'AA', 'ZPP', 'QMIP_fe') => ('-d', 'EA', 'ZPP', 'QMIP_fe')
('-d', 'AA', 'ZPP', 'co.QMIP_fe') => ('-d', 'T', 'ZPP', 'co.QMIP_fe')
('-d', 'AA', 'ZPP', 'co.QMIP_fe') => ('-d', 'EA', 'ZPP', 'co.QMIP_fe')
('p', 'A', 'ZPP', 'QMIP_fe') => ('p', 'R', 'ZPP', 'QMIP_fe')
('p', 'A', 'ZPP', 'QMIP_fe') => ('p', 'AA', 'ZPP', 'QMIP_fe')
('p', 'A', 'ZPP', 'co.QMIP_fe') => ('p', 'R', 'ZPP', 'co.QMIP_fe')
('p', 'A', 'ZPP', 'co.QMIP_fe') => ('p', 'AA', 'ZPP', 'co.QMIP_fe')
('p', 'AA', 'ZPP', 'co.QMIP_fe') => ('p', 'T', 'ZPP', 'co.QMIP_fe')
('p', 'AA', 'ZPP', 'co.QMIP_fe') => ('p', 'EA', 'ZPP', 'co.QMIP_fe')
('p', 'AA', 'ZPP', 'QMIP_fe') => ('p', 'T', 'ZPP', 'QMIP_fe')
('p', 'AA', 'ZPP', 'QMIP_fe') => ('p', 'EA', 'ZPP', 'QMIP_fe')
('p', 'AA', 'ZPP', 'cocap.QMIP_fe') => ('p', 'T', 'ZPP', 'cocap.QMIP_fe')
('p', 'AA', 'ZPP', 'cocap.QMIP_fe') => ('p', 'EA', 'ZPP', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.NP', 'QMIP_fe') => ('-d', 'AA', 'cocap.NP', 'QMIP_fe')
('-d', 'A', 'cocap.NP', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.NP', 'co.QMIP_fe')
('-d', 'A', 'cocap.NP', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.NP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.NP', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.NP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.NP', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.NP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.NP', 'QMIP_fe') => ('-d', 'T', 'cocap.NP', 'QMIP_fe')
('-d', 'AA', 'cocap.NP', 'QMIP_fe') => ('-d', 'EA', 'cocap.NP', 'QMIP_fe')
('-d', 'AA', 'cocap.NP', 'co.QMIP_fe') => ('-d', 'T', 'cocap.NP', 'co.QMIP_fe')
('-d', 'AA', 'cocap.NP', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.NP', 'co.QMIP_fe')
('p', 'A', 'cocap.NP', 'QMIP_fe') => ('p', 'R', 'cocap.NP', 'QMIP_fe')
('p', 'A', 'cocap.NP', 'QMIP_fe') => ('p', 'AA', 'cocap.NP', 'QMIP_fe')
('p', 'A', 'cocap.NP', 'co.QMIP_fe') => ('p', 'R', 'cocap.NP', 'co.QMIP_fe')
('p', 'A', 'cocap.NP', 'co.QMIP_fe') => ('p', 'AA', 'cocap.NP', 'co.QMIP_fe')
('p', 'AA', 'cocap.NP', 'co.QMIP_fe') => ('p', 'T', 'cocap.NP', 'co.QMIP_fe')
('p', 'AA', 'cocap.NP', 'co.QMIP_fe') => ('p', 'EA', 'cocap.NP', 'co.QMIP_fe')
('p', 'AA', 'cocap.NP', 'QMIP_fe') => ('p', 'T', 'cocap.NP', 'QMIP_fe')
('p', 'AA', 'cocap.NP', 'QMIP_fe') => ('p', 'EA', 'cocap.NP', 'QMIP_fe')
('p', 'AA', 'cocap.NP', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.NP', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.NP', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.NP', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QCMA', 'QMIP_fe') => ('-d', 'R', 'cocap.QCMA', 'QMIP_fe')
('-d', 'A', 'cocap.QCMA', 'QMIP_fe') => ('-d', 'AA', 'cocap.QCMA', 'QMIP_fe')
('-d', 'A', 'cocap.QCMA', 'co.QMIP_fe') => ('-d', 'R', 'cocap.QCMA', 'co.QMIP_fe')
('-d', 'A', 'cocap.QCMA', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.QCMA', 'co.QMIP_fe')
('-d', 'A', 'cocap.QCMA', 'cocap.QMIP_fe') => ('-d', 'R', 'cocap.QCMA', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QCMA', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.QCMA', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.MA', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.MA', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.MA', 'QMIP_fe') => ('-d', 'AA', 'cocap.MA', 'QMIP_fe')
('-d', 'A', 'cocap.MA', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.MA', 'co.QMIP_fe')
('-d', 'AA', 'cocap.MA', 'co.QMIP_fe') => ('-d', 'T', 'cocap.MA', 'co.QMIP_fe')
('-d', 'AA', 'cocap.MA', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.MA', 'co.QMIP_fe')
('-d', 'AA', 'cocap.MA', 'QMIP_fe') => ('-d', 'T', 'cocap.MA', 'QMIP_fe')
('-d', 'AA', 'cocap.MA', 'QMIP_fe') => ('-d', 'EA', 'cocap.MA', 'QMIP_fe')
('-d', 'AA', 'cocap.MA', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.MA', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.MA', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.MA', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.QCMA', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.QCMA', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QCMA', 'QMIP_fe') => ('-d', 'T', 'cocap.QCMA', 'QMIP_fe')
('-d', 'AA', 'cocap.QCMA', 'QMIP_fe') => ('-d', 'EA', 'cocap.QCMA', 'QMIP_fe')
('-d', 'AA', 'cocap.QCMA', 'co.QMIP_fe') => ('-d', 'T', 'cocap.QCMA', 'co.QMIP_fe')
('-d', 'AA', 'cocap.QCMA', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.QCMA', 'co.QMIP_fe')
('p', 'A', 'cocap.QCMA', 'QMIP_fe') => ('p', 'R', 'cocap.QCMA', 'QMIP_fe')
('p', 'A', 'cocap.QCMA', 'QMIP_fe') => ('p', 'AA', 'cocap.QCMA', 'QMIP_fe')
('p', 'A', 'cocap.QCMA', 'co.QMIP_fe') => ('p', 'R', 'cocap.QCMA', 'co.QMIP_fe')
('p', 'A', 'cocap.QCMA', 'co.QMIP_fe') => ('p', 'AA', 'cocap.QCMA', 'co.QMIP_fe')
('p', 'A', 'cocap.MA', 'co.QMIP_fe') => ('p', 'AA', 'cocap.MA', 'co.QMIP_fe')
('p', 'A', 'cocap.MA', 'QMIP_fe') => ('p', 'AA', 'cocap.MA', 'QMIP_fe')
('p', 'A', 'cocap.MA', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.MA', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.MA', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.MA', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.MA', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.MA', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.MA', 'QMIP_fe') => ('p', 'T', 'cocap.MA', 'QMIP_fe')
('p', 'AA', 'cocap.MA', 'QMIP_fe') => ('p', 'EA', 'cocap.MA', 'QMIP_fe')
('p', 'AA', 'cocap.MA', 'co.QMIP_fe') => ('p', 'T', 'cocap.MA', 'co.QMIP_fe')
('p', 'AA', 'cocap.MA', 'co.QMIP_fe') => ('p', 'EA', 'cocap.MA', 'co.QMIP_fe')
('p', 'AA', 'cocap.QCMA', 'co.QMIP_fe') => ('p', 'T', 'cocap.QCMA', 'co.QMIP_fe')
('p', 'AA', 'cocap.QCMA', 'co.QMIP_fe') => ('p', 'EA', 'cocap.QCMA', 'co.QMIP_fe')
('p', 'AA', 'cocap.QCMA', 'QMIP_fe') => ('p', 'T', 'cocap.QCMA', 'QMIP_fe')
('p', 'AA', 'cocap.QCMA', 'QMIP_fe') => ('p', 'EA', 'cocap.QCMA', 'QMIP_fe')
('p', 'AA', 'cocap.QCMA', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.QCMA', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.QCMA', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.QCMA', 'cocap.QMIP_fe')
('p', 'E', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('-d', 'E', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QAM', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.QAM', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QAM', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.QAM', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QAM', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.QAM', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QAM', 'QMIP_fe') => ('-d', 'R', 'cocap.QAM', 'QMIP_fe')
('-d', 'A', 'cocap.QAM', 'QMIP_fe') => ('-d', 'AA', 'cocap.QAM', 'QMIP_fe')
('-d', 'A', 'cocap.QAM', 'co.QMIP_fe') => ('-d', 'R', 'cocap.QAM', 'co.QMIP_fe')
('-d', 'A', 'cocap.QAM', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.QAM', 'co.QMIP_fe')
('-d', 'A', 'cocap.QAM', 'cocap.QMIP_fe') => ('-d', 'R', 'cocap.QAM', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QAM', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.QAM', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QMA', 'cocap.QMIP_fe') => ('-d', 'R', 'cocap.QMA', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QMA', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.QMA', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QMA', 'QMIP_fe') => ('-d', 'R', 'cocap.QMA', 'QMIP_fe')
('-d', 'A', 'cocap.QMA', 'QMIP_fe') => ('-d', 'AA', 'cocap.QMA', 'QMIP_fe')
('-d', 'A', 'cocap.QMA', 'co.QMIP_fe') => ('-d', 'R', 'cocap.QMA', 'co.QMIP_fe')
('-d', 'A', 'cocap.QMA', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.QMA', 'co.QMIP_fe')
('-d', 'AA', 'cocap.QMA', 'co.QMIP_fe') => ('-d', 'T', 'cocap.QMA', 'co.QMIP_fe')
('-d', 'AA', 'cocap.QMA', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.QMA', 'co.QMIP_fe')
('-d', 'AA', 'cocap.QMA', 'QMIP_fe') => ('-d', 'T', 'cocap.QMA', 'QMIP_fe')
('-d', 'AA', 'cocap.QMA', 'QMIP_fe') => ('-d', 'EA', 'cocap.QMA', 'QMIP_fe')
('-d', 'AA', 'cocap.QMA', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.QMA', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QMA', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.QMA', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QAM', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.QAM', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QAM', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.QAM', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QAM', 'QMIP_fe') => ('-d', 'T', 'cocap.QAM', 'QMIP_fe')
('-d', 'AA', 'cocap.QAM', 'QMIP_fe') => ('-d', 'EA', 'cocap.QAM', 'QMIP_fe')
('-d', 'AA', 'cocap.QAM', 'co.QMIP_fe') => ('-d', 'T', 'cocap.QAM', 'co.QMIP_fe')
('-d', 'AA', 'cocap.QAM', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.QAM', 'co.QMIP_fe')
('p', 'A', 'cocap.QAM', 'QMIP_fe') => ('p', 'R', 'cocap.QAM', 'QMIP_fe')
('p', 'A', 'cocap.QAM', 'QMIP_fe') => ('p', 'AA', 'cocap.QAM', 'QMIP_fe')
('p', 'A', 'cocap.QAM', 'co.QMIP_fe') => ('p', 'R', 'cocap.QAM', 'co.QMIP_fe')
('p', 'A', 'cocap.QAM', 'co.QMIP_fe') => ('p', 'AA', 'cocap.QAM', 'co.QMIP_fe')
('p', 'A', 'cocap.QMA', 'co.QMIP_fe') => ('p', 'R', 'cocap.QMA', 'co.QMIP_fe')
('p', 'A', 'cocap.QMA', 'co.QMIP_fe') => ('p', 'AA', 'cocap.QMA', 'co.QMIP_fe')
('p', 'A', 'cocap.QMA', 'QMIP_fe') => ('p', 'R', 'cocap.QMA', 'QMIP_fe')
('p', 'A', 'cocap.QMA', 'QMIP_fe') => ('p', 'AA', 'cocap.QMA', 'QMIP_fe')
('p', 'A', 'cocap.QMA', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.QMA', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QMA', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.QMA', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.QMA', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.QMA', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.QMA', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.QMA', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.QMA', 'QMIP_fe') => ('p', 'T', 'cocap.QMA', 'QMIP_fe')
('p', 'AA', 'cocap.QMA', 'QMIP_fe') => ('p', 'EA', 'cocap.QMA', 'QMIP_fe')
('p', 'AA', 'cocap.QMA', 'co.QMIP_fe') => ('p', 'T', 'cocap.QMA', 'co.QMIP_fe')
('p', 'AA', 'cocap.QMA', 'co.QMIP_fe') => ('p', 'EA', 'cocap.QMA', 'co.QMIP_fe')
('p', 'AA', 'cocap.QAM', 'co.QMIP_fe') => ('p', 'T', 'cocap.QAM', 'co.QMIP_fe')
('p', 'AA', 'cocap.QAM', 'co.QMIP_fe') => ('p', 'EA', 'cocap.QAM', 'co.QMIP_fe')
('p', 'AA', 'cocap.QAM', 'QMIP_fe') => ('p', 'T', 'cocap.QAM', 'QMIP_fe')
('p', 'AA', 'cocap.QAM', 'QMIP_fe') => ('p', 'EA', 'cocap.QAM', 'QMIP_fe')
('p', 'AA', 'cocap.QAM', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.QAM', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.QAM', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.QAM', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QIP(2)', 'QMIP_fe') => ('-d', 'R', 'cocap.QIP(2)', 'QMIP_fe')
('-d', 'A', 'cocap.QIP(2)', 'QMIP_fe') => ('-d', 'AA', 'cocap.QIP(2)', 'QMIP_fe')
('-d', 'A', 'cocap.QIP(2)', 'co.QMIP_fe') => ('-d', 'R', 'cocap.QIP(2)', 'co.QMIP_fe')
('-d', 'A', 'cocap.QIP(2)', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.QIP(2)', 'co.QMIP_fe')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('-d', 'R', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QIP(2)', 'QMIP_fe') => ('-d', 'T', 'cocap.QIP(2)', 'QMIP_fe')
('-d', 'AA', 'cocap.QIP(2)', 'QMIP_fe') => ('-d', 'EA', 'cocap.QIP(2)', 'QMIP_fe')
('-d', 'AA', 'cocap.QIP(2)', 'co.QMIP_fe') => ('-d', 'T', 'cocap.QIP(2)', 'co.QMIP_fe')
('-d', 'AA', 'cocap.QIP(2)', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.QIP(2)', 'co.QMIP_fe')
('p', 'A', 'cocap.QIP(2)', 'QMIP_fe') => ('p', 'R', 'cocap.QIP(2)', 'QMIP_fe')
('p', 'A', 'cocap.QIP(2)', 'QMIP_fe') => ('p', 'AA', 'cocap.QIP(2)', 'QMIP_fe')
('p', 'A', 'cocap.QIP(2)', 'co.QMIP_fe') => ('p', 'R', 'cocap.QIP(2)', 'co.QMIP_fe')
('p', 'A', 'cocap.QIP(2)', 'co.QMIP_fe') => ('p', 'AA', 'cocap.QIP(2)', 'co.QMIP_fe')
('p', 'AA', 'cocap.QIP(2)', 'co.QMIP_fe') => ('p', 'T', 'cocap.QIP(2)', 'co.QMIP_fe')
('p', 'AA', 'cocap.QIP(2)', 'co.QMIP_fe') => ('p', 'EA', 'cocap.QIP(2)', 'co.QMIP_fe')
('p', 'AA', 'cocap.QIP(2)', 'QMIP_fe') => ('p', 'T', 'cocap.QIP(2)', 'QMIP_fe')
('p', 'AA', 'cocap.QIP(2)', 'QMIP_fe') => ('p', 'EA', 'cocap.QIP(2)', 'QMIP_fe')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.QIP(2)', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.QIP(2)', 'cocap.QMIP_fe')
('p', 'E', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('-d', 'E', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('p', 'A', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QIP(3)', 'QMIP_fe') => ('-d', 'R', 'cocap.QIP(3)', 'QMIP_fe')
('-d', 'A', 'cocap.QIP(3)', 'QMIP_fe') => ('-d', 'AA', 'cocap.QIP(3)', 'QMIP_fe')
('-d', 'A', 'cocap.QIP(3)', 'co.QMIP_fe') => ('-d', 'R', 'cocap.QIP(3)', 'co.QMIP_fe')
('-d', 'A', 'cocap.QIP(3)', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.QIP(3)', 'co.QMIP_fe')
('-d', 'A', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('-d', 'R', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QIP(3)', 'QMIP_fe') => ('-d', 'T', 'cocap.QIP(3)', 'QMIP_fe')
('-d', 'AA', 'cocap.QIP(3)', 'QMIP_fe') => ('-d', 'EA', 'cocap.QIP(3)', 'QMIP_fe')
('-d', 'AA', 'cocap.QIP(3)', 'co.QMIP_fe') => ('-d', 'T', 'cocap.QIP(3)', 'co.QMIP_fe')
('-d', 'AA', 'cocap.QIP(3)', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.QIP(3)', 'co.QMIP_fe')
('p', 'A', 'cocap.QIP(3)', 'QMIP_fe') => ('p', 'R', 'cocap.QIP(3)', 'QMIP_fe')
('p', 'A', 'cocap.QIP(3)', 'QMIP_fe') => ('p', 'AA', 'cocap.QIP(3)', 'QMIP_fe')
('p', 'A', 'cocap.QIP(3)', 'co.QMIP_fe') => ('p', 'R', 'cocap.QIP(3)', 'co.QMIP_fe')
('p', 'A', 'cocap.QIP(3)', 'co.QMIP_fe') => ('p', 'AA', 'cocap.QIP(3)', 'co.QMIP_fe')
('p', 'AA', 'cocap.QIP(3)', 'co.QMIP_fe') => ('p', 'T', 'cocap.QIP(3)', 'co.QMIP_fe')
('p', 'AA', 'cocap.QIP(3)', 'co.QMIP_fe') => ('p', 'EA', 'cocap.QIP(3)', 'co.QMIP_fe')
('p', 'AA', 'cocap.QIP(3)', 'QMIP_fe') => ('p', 'T', 'cocap.QIP(3)', 'QMIP_fe')
('p', 'AA', 'cocap.QIP(3)', 'QMIP_fe') => ('p', 'EA', 'cocap.QIP(3)', 'QMIP_fe')
('p', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.QIP(3)', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.QIP(3)', 'cocap.QMIP_fe')
('p', 'A', 'cocap.SBP', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.SBP', 'cocap.QMIP_fe')
('p', 'A', 'cocap.SBP', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.SBP', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.SBP', 'QMIP_fe') => ('-d', 'AA', 'cocap.SBP', 'QMIP_fe')
('-d', 'A', 'cocap.SBP', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.SBP', 'co.QMIP_fe')
('-d', 'A', 'cocap.SBP', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.SBP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.SBP', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.SBP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.SBP', 'QMIP_fe') => ('-d', 'T', 'cocap.SBP', 'QMIP_fe')
('-d', 'AA', 'cocap.SBP', 'QMIP_fe') => ('-d', 'EA', 'cocap.SBP', 'QMIP_fe')
('-d', 'AA', 'cocap.SBP', 'co.QMIP_fe') => ('-d', 'T', 'cocap.SBP', 'co.QMIP_fe')
('-d', 'AA', 'cocap.SBP', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.SBP', 'co.QMIP_fe')
('p', 'A', 'cocap.SBP', 'QMIP_fe') => ('p', 'AA', 'cocap.SBP', 'QMIP_fe')
('p', 'A', 'cocap.SBP', 'co.QMIP_fe') => ('p', 'AA', 'cocap.SBP', 'co.QMIP_fe')
('p', 'AA', 'cocap.SBP', 'co.QMIP_fe') => ('p', 'T', 'cocap.SBP', 'co.QMIP_fe')
('p', 'AA', 'cocap.SBP', 'co.QMIP_fe') => ('p', 'EA', 'cocap.SBP', 'co.QMIP_fe')
('p', 'AA', 'cocap.SBP', 'QMIP_fe') => ('p', 'T', 'cocap.SBP', 'QMIP_fe')
('p', 'AA', 'cocap.SBP', 'QMIP_fe') => ('p', 'EA', 'cocap.SBP', 'QMIP_fe')
('p', 'AA', 'cocap.SBP', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.SBP', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.SBP', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.SBP', 'cocap.QMIP_fe')
('p', 'A', 'cocap.AM', 'cocap.QMIP_fe') => ('-d', 'A', 'cocap.AM', 'cocap.QMIP_fe')
('p', 'A', 'cocap.AM', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.AM', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.AM', 'QMIP_fe') => ('-d', 'AA', 'cocap.AM', 'QMIP_fe')
('-d', 'A', 'cocap.AM', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.AM', 'co.QMIP_fe')
('-d', 'A', 'cocap.AM', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.AM', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.AM', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.AM', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.AM', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.AM', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.AM', 'QMIP_fe') => ('-d', 'T', 'cocap.AM', 'QMIP_fe')
('-d', 'AA', 'cocap.AM', 'QMIP_fe') => ('-d', 'EA', 'cocap.AM', 'QMIP_fe')
('-d', 'AA', 'cocap.AM', 'co.QMIP_fe') => ('-d', 'T', 'cocap.AM', 'co.QMIP_fe')
('-d', 'AA', 'cocap.AM', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.AM', 'co.QMIP_fe')
('p', 'A', 'cocap.AM', 'QMIP_fe') => ('p', 'AA', 'cocap.AM', 'QMIP_fe')
('p', 'A', 'cocap.AM', 'co.QMIP_fe') => ('p', 'AA', 'cocap.AM', 'co.QMIP_fe')
('p', 'AA', 'cocap.AM', 'co.QMIP_fe') => ('p', 'T', 'cocap.AM', 'co.QMIP_fe')
('p', 'AA', 'cocap.AM', 'co.QMIP_fe') => ('p', 'EA', 'cocap.AM', 'co.QMIP_fe')
('p', 'AA', 'cocap.AM', 'QMIP_fe') => ('p', 'T', 'cocap.AM', 'QMIP_fe')
('p', 'AA', 'cocap.AM', 'QMIP_fe') => ('p', 'EA', 'cocap.AM', 'QMIP_fe')
('p', 'AA', 'cocap.AM', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.AM', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.AM', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.AM', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QIP', 'QMIP_fe') => ('-d', 'R', 'cocap.QIP', 'QMIP_fe')
('-d', 'A', 'cocap.QIP', 'QMIP_fe') => ('-d', 'AA', 'cocap.QIP', 'QMIP_fe')
('-d', 'A', 'cocap.QIP', 'co.QMIP_fe') => ('-d', 'R', 'cocap.QIP', 'co.QMIP_fe')
('-d', 'A', 'cocap.QIP', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.QIP', 'co.QMIP_fe')
('-d', 'A', 'cocap.QIP', 'cocap.QMIP_fe') => ('-d', 'R', 'cocap.QIP', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.QIP', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.QIP', 'cocap.QMIP_fe')
('-d', 'A', 'QSZK', 'cocap.QMIP_fe') => ('-d', 'R', 'QSZK', 'cocap.QMIP_fe')
('-d', 'A', 'QSZK', 'cocap.QMIP_fe') => ('-d', 'AA', 'QSZK', 'cocap.QMIP_fe')
('-d', 'A', 'QSZK', 'QMIP_fe') => ('-d', 'R', 'QSZK', 'QMIP_fe')
('-d', 'A', 'QSZK', 'QMIP_fe') => ('-d', 'AA', 'QSZK', 'QMIP_fe')
('-d', 'A', 'QSZK', 'co.QMIP_fe') => ('-d', 'R', 'QSZK', 'co.QMIP_fe')
('-d', 'A', 'QSZK', 'co.QMIP_fe') => ('-d', 'AA', 'QSZK', 'co.QMIP_fe')
('-d', 'AA', 'QSZK', 'co.QMIP_fe') => ('-d', 'T', 'QSZK', 'co.QMIP_fe')
('-d', 'AA', 'QSZK', 'co.QMIP_fe') => ('-d', 'EA', 'QSZK', 'co.QMIP_fe')
('-d', 'AA', 'QSZK', 'QMIP_fe') => ('-d', 'T', 'QSZK', 'QMIP_fe')
('-d', 'AA', 'QSZK', 'QMIP_fe') => ('-d', 'EA', 'QSZK', 'QMIP_fe')
('-d', 'AA', 'QSZK', 'cocap.QMIP_fe') => ('-d', 'T', 'QSZK', 'cocap.QMIP_fe')
('-d', 'AA', 'QSZK', 'cocap.QMIP_fe') => ('-d', 'EA', 'QSZK', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.IP', 'cocap.QMIP_fe') => ('-d', 'R', 'cocap.IP', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.IP', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.IP', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.IP', 'QMIP_fe') => ('-d', 'R', 'cocap.IP', 'QMIP_fe')
('-d', 'A', 'cocap.IP', 'QMIP_fe') => ('-d', 'AA', 'cocap.IP', 'QMIP_fe')
('-d', 'A', 'cocap.IP', 'co.QMIP_fe') => ('-d', 'R', 'cocap.IP', 'co.QMIP_fe')
('-d', 'A', 'cocap.IP', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.IP', 'co.QMIP_fe')
('-d', 'AA', 'cocap.IP', 'co.QMIP_fe') => ('-d', 'T', 'cocap.IP', 'co.QMIP_fe')
('-d', 'AA', 'cocap.IP', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.IP', 'co.QMIP_fe')
('-d', 'AA', 'cocap.IP', 'QMIP_fe') => ('-d', 'T', 'cocap.IP', 'QMIP_fe')
('-d', 'AA', 'cocap.IP', 'QMIP_fe') => ('-d', 'EA', 'cocap.IP', 'QMIP_fe')
('-d', 'AA', 'cocap.IP', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.IP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.IP', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.IP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QIP', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.QIP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QIP', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.QIP', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.QIP', 'QMIP_fe') => ('-d', 'T', 'cocap.QIP', 'QMIP_fe')
('-d', 'AA', 'cocap.QIP', 'QMIP_fe') => ('-d', 'EA', 'cocap.QIP', 'QMIP_fe')
('-d', 'AA', 'cocap.QIP', 'co.QMIP_fe') => ('-d', 'T', 'cocap.QIP', 'co.QMIP_fe')
('-d', 'AA', 'cocap.QIP', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.QIP', 'co.QMIP_fe')
('p', 'A', 'cocap.QIP', 'QMIP_fe') => ('p', 'R', 'cocap.QIP', 'QMIP_fe')
('p', 'A', 'cocap.QIP', 'QMIP_fe') => ('p', 'AA', 'cocap.QIP', 'QMIP_fe')
('p', 'A', 'cocap.QIP', 'co.QMIP_fe') => ('p', 'R', 'cocap.QIP', 'co.QMIP_fe')
('p', 'A', 'cocap.QIP', 'co.QMIP_fe') => ('p', 'AA', 'cocap.QIP', 'co.QMIP_fe')
('p', 'A', 'QSZK', 'co.QMIP_fe') => ('p', 'R', 'QSZK', 'co.QMIP_fe')
('p', 'A', 'QSZK', 'co.QMIP_fe') => ('p', 'AA', 'QSZK', 'co.QMIP_fe')
('p', 'A', 'QSZK', 'QMIP_fe') => ('p', 'R', 'QSZK', 'QMIP_fe')
('p', 'A', 'QSZK', 'QMIP_fe') => ('p', 'AA', 'QSZK', 'QMIP_fe')
('p', 'A', 'QSZK', 'cocap.QMIP_fe') => ('p', 'R', 'QSZK', 'cocap.QMIP_fe')
('p', 'A', 'QSZK', 'cocap.QMIP_fe') => ('p', 'AA', 'QSZK', 'cocap.QMIP_fe')
('p', 'AA', 'QSZK', 'cocap.QMIP_fe') => ('p', 'T', 'QSZK', 'cocap.QMIP_fe')
('p', 'AA', 'QSZK', 'cocap.QMIP_fe') => ('p', 'EA', 'QSZK', 'cocap.QMIP_fe')
('p', 'AA', 'QSZK', 'QMIP_fe') => ('p', 'T', 'QSZK', 'QMIP_fe')
('p', 'AA', 'QSZK', 'QMIP_fe') => ('p', 'EA', 'QSZK', 'QMIP_fe')
('p', 'AA', 'QSZK', 'co.QMIP_fe') => ('p', 'T', 'QSZK', 'co.QMIP_fe')
('p', 'AA', 'QSZK', 'co.QMIP_fe') => ('p', 'EA', 'QSZK', 'co.QMIP_fe')
('p', 'A', 'cocap.IP', 'co.QMIP_fe') => ('p', 'R', 'cocap.IP', 'co.QMIP_fe')
('p', 'A', 'cocap.IP', 'co.QMIP_fe') => ('p', 'AA', 'cocap.IP', 'co.QMIP_fe')
('p', 'A', 'cocap.IP', 'QMIP_fe') => ('p', 'R', 'cocap.IP', 'QMIP_fe')
('p', 'A', 'cocap.IP', 'QMIP_fe') => ('p', 'AA', 'cocap.IP', 'QMIP_fe')
('p', 'A', 'cocap.IP', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.IP', 'cocap.QMIP_fe')
('p', 'A', 'cocap.IP', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.IP', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.IP', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.IP', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.IP', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.IP', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.IP', 'QMIP_fe') => ('p', 'T', 'cocap.IP', 'QMIP_fe')
('p', 'AA', 'cocap.IP', 'QMIP_fe') => ('p', 'EA', 'cocap.IP', 'QMIP_fe')
('p', 'AA', 'cocap.IP', 'co.QMIP_fe') => ('p', 'T', 'cocap.IP', 'co.QMIP_fe')
('p', 'AA', 'cocap.IP', 'co.QMIP_fe') => ('p', 'EA', 'cocap.IP', 'co.QMIP_fe')
('p', 'AA', 'cocap.QIP', 'co.QMIP_fe') => ('p', 'T', 'cocap.QIP', 'co.QMIP_fe')
('p', 'AA', 'cocap.QIP', 'co.QMIP_fe') => ('p', 'EA', 'cocap.QIP', 'co.QMIP_fe')
('p', 'AA', 'cocap.QIP', 'QMIP_fe') => ('p', 'T', 'cocap.QIP', 'QMIP_fe')
('p', 'AA', 'cocap.QIP', 'QMIP_fe') => ('p', 'EA', 'cocap.QIP', 'QMIP_fe')
('p', 'AA', 'cocap.QIP', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.QIP', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.QIP', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.QIP', 'cocap.QMIP_fe')
('d', 'A', 'co.QMIP_fe', 'P/poly') => ('-p', 'A', 'co.QMIP_fe', 'P/poly')
('d', 'A', 'QMIP_fe', 'P/poly') => ('-p', 'A', 'QMIP_fe', 'P/poly')
('p', 'A', 'co.MA', 'co.QMIP_fe') => ('-d', 'A', 'co.MA', 'co.QMIP_fe')
('p', 'A', 'co.MA', 'co.QMIP_fe') => ('p', 'R', 'co.MA', 'co.QMIP_fe')
('p', 'A', 'co.MA', 'co.QMIP_fe') => ('p', 'AA', 'co.MA', 'co.QMIP_fe')
('p', 'A', 'MA', 'QMIP_fe') => ('-d', 'A', 'MA', 'QMIP_fe')
('p', 'A', 'MA', 'QMIP_fe') => ('p', 'R', 'MA', 'QMIP_fe')
('p', 'A', 'MA', 'QMIP_fe') => ('p', 'AA', 'MA', 'QMIP_fe')
('p', 'A', 'RP', 'QMIP_fe') => ('-d', 'A', 'RP', 'QMIP_fe')
('p', 'A', 'RP', 'QMIP_fe') => ('p', 'R', 'RP', 'QMIP_fe')
('p', 'A', 'RP', 'QMIP_fe') => ('p', 'AA', 'RP', 'QMIP_fe')
('p', 'A', 'co.RP', 'co.QMIP_fe') => ('-d', 'A', 'co.RP', 'co.QMIP_fe')
('p', 'A', 'co.RP', 'co.QMIP_fe') => ('p', 'R', 'co.RP', 'co.QMIP_fe')
('p', 'A', 'co.RP', 'co.QMIP_fe') => ('p', 'AA', 'co.RP', 'co.QMIP_fe')
('p', 'AA', 'co.RP', 'co.QMIP_fe') => ('-d', 'AA', 'co.RP', 'co.QMIP_fe')
('p', 'AA', 'co.RP', 'co.QMIP_fe') => ('p', 'T', 'co.RP', 'co.QMIP_fe')
('p', 'AA', 'co.RP', 'co.QMIP_fe') => ('p', 'EA', 'co.RP', 'co.QMIP_fe')
('p', 'AA', 'RP', 'QMIP_fe') => ('-d', 'AA', 'RP', 'QMIP_fe')
('p', 'AA', 'RP', 'QMIP_fe') => ('p', 'T', 'RP', 'QMIP_fe')
('p', 'AA', 'RP', 'QMIP_fe') => ('p', 'EA', 'RP', 'QMIP_fe')
('p', 'EA', 'RP', 'QMIP_fe') => ('-d', 'EA', 'RP', 'QMIP_fe')
('p', 'EA', 'co.RP', 'co.QMIP_fe') => ('-d', 'EA', 'co.RP', 'co.QMIP_fe')
('p', 'T', 'RP', 'QMIP_fe') => ('-d', 'T', 'RP', 'QMIP_fe')
('p', 'T', 'co.RP', 'co.QMIP_fe') => ('-d', 'T', 'co.RP', 'co.QMIP_fe')
('p', 'A', 'NP', 'QMIP_fe') => ('-d', 'A', 'NP', 'QMIP_fe')
('p', 'A', 'NP', 'QMIP_fe') => ('p', 'R', 'NP', 'QMIP_fe')
('p', 'A', 'NP', 'QMIP_fe') => ('p', 'AA', 'NP', 'QMIP_fe')
('p', 'A', 'co.NP', 'co.QMIP_fe') => ('-d', 'A', 'co.NP', 'co.QMIP_fe')
('p', 'A', 'co.NP', 'co.QMIP_fe') => ('p', 'R', 'co.NP', 'co.QMIP_fe')
('p', 'A', 'co.NP', 'co.QMIP_fe') => ('p', 'AA', 'co.NP', 'co.QMIP_fe')
('d', 'A', 'co.QMIP_fe', '(NP-cap-coNP)/poly') => ('-p', 'A', 'co.QMIP_fe', '(NP-cap-coNP)/poly')
('d', 'A', 'QMIP_fe', '(NP-cap-coNP)/poly') => ('-p', 'A', 'QMIP_fe', '(NP-cap-coNP)/poly')
('d', 'A', 'co.QMIP_fe', 'BQP/mpoly') => ('-p', 'A', 'co.QMIP_fe', 'BQP/mpoly')
('d', 'A', 'QMIP_fe', 'BQP/mpoly') => ('-p', 'A', 'QMIP_fe', 'BQP/mpoly')
('d', 'A', 'co.QMIP_fe', 'IP') => ('-p', 'A', 'co.QMIP_fe', 'IP')
('d', 'A', 'QMIP_fe', 'co.IP') => ('-p', 'A', 'QMIP_fe', 'co.IP')
('d', 'A', 'co.QMIP_fe', 'BQP/qpoly') => ('-p', 'A', 'co.QMIP_fe', 'BQP/qpoly')
('d', 'A', 'QMIP_fe', 'BQP/qpoly') => ('-p', 'A', 'QMIP_fe', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'co.QMIP_fe') => ('-d', 'AA', 'co.NP', 'co.QMIP_fe')
('p', 'AA', 'co.NP', 'co.QMIP_fe') => ('p', 'T', 'co.NP', 'co.QMIP_fe')
('p', 'AA', 'co.NP', 'co.QMIP_fe') => ('p', 'EA', 'co.NP', 'co.QMIP_fe')
('p', 'AA', 'NP', 'QMIP_fe') => ('-d', 'AA', 'NP', 'QMIP_fe')
('p', 'AA', 'NP', 'QMIP_fe') => ('p', 'T', 'NP', 'QMIP_fe')
('p', 'AA', 'NP', 'QMIP_fe') => ('p', 'EA', 'NP', 'QMIP_fe')
('p', 'EA', 'NP', 'QMIP_fe') => ('-d', 'EA', 'NP', 'QMIP_fe')
('p', 'EA', 'co.NP', 'co.QMIP_fe') => ('-d', 'EA', 'co.NP', 'co.QMIP_fe')
('p', 'T', 'NP', 'QMIP_fe') => ('-d', 'T', 'NP', 'QMIP_fe')
('p', 'T', 'co.NP', 'co.QMIP_fe') => ('-d', 'T', 'co.NP', 'co.QMIP_fe')
('p', 'AA', 'MA', 'QMIP_fe') => ('-d', 'AA', 'MA', 'QMIP_fe')
('p', 'AA', 'MA', 'QMIP_fe') => ('p', 'T', 'MA', 'QMIP_fe')
('p', 'AA', 'MA', 'QMIP_fe') => ('p', 'EA', 'MA', 'QMIP_fe')
('p', 'AA', 'co.MA', 'co.QMIP_fe') => ('-d', 'AA', 'co.MA', 'co.QMIP_fe')
('p', 'AA', 'co.MA', 'co.QMIP_fe') => ('p', 'T', 'co.MA', 'co.QMIP_fe')
('p', 'AA', 'co.MA', 'co.QMIP_fe') => ('p', 'EA', 'co.MA', 'co.QMIP_fe')
('p', 'EA', 'co.MA', 'co.QMIP_fe') => ('-d', 'EA', 'co.MA', 'co.QMIP_fe')
('p', 'EA', 'MA', 'QMIP_fe') => ('-d', 'EA', 'MA', 'QMIP_fe')
('p', 'T', 'co.MA', 'co.QMIP_fe') => ('-d', 'T', 'co.MA', 'co.QMIP_fe')
('p', 'T', 'MA', 'QMIP_fe') => ('-d', 'T', 'MA', 'QMIP_fe')
('p', 'A', 'co.QMA', 'co.QMIP_fe') => ('-d', 'A', 'co.QMA', 'co.QMIP_fe')
('p', 'A', 'co.QMA', 'co.QMIP_fe') => ('p', 'R', 'co.QMA', 'co.QMIP_fe')
('p', 'A', 'co.QMA', 'co.QMIP_fe') => ('p', 'AA', 'co.QMA', 'co.QMIP_fe')
('p', 'A', 'QMA', 'QMIP_fe') => ('-d', 'A', 'QMA', 'QMIP_fe')
('p', 'A', 'QMA', 'QMIP_fe') => ('p', 'R', 'QMA', 'QMIP_fe')
('p', 'A', 'QMA', 'QMIP_fe') => ('p', 'AA', 'QMA', 'QMIP_fe')
('p', 'A', 'QCMA', 'QMIP_fe') => ('-d', 'A', 'QCMA', 'QMIP_fe')
('p', 'A', 'QCMA', 'QMIP_fe') => ('p', 'R', 'QCMA', 'QMIP_fe')
('p', 'A', 'QCMA', 'QMIP_fe') => ('p', 'AA', 'QCMA', 'QMIP_fe')
('p', 'A', 'co.QCMA', 'co.QMIP_fe') => ('-d', 'A', 'co.QCMA', 'co.QMIP_fe')
('p', 'A', 'co.QCMA', 'co.QMIP_fe') => ('p', 'R', 'co.QCMA', 'co.QMIP_fe')
('p', 'A', 'co.QCMA', 'co.QMIP_fe') => ('p', 'AA', 'co.QCMA', 'co.QMIP_fe')
('p', 'AA', 'co.QCMA', 'co.QMIP_fe') => ('-d', 'AA', 'co.QCMA', 'co.QMIP_fe')
('p', 'AA', 'co.QCMA', 'co.QMIP_fe') => ('p', 'T', 'co.QCMA', 'co.QMIP_fe')
('p', 'AA', 'co.QCMA', 'co.QMIP_fe') => ('p', 'EA', 'co.QCMA', 'co.QMIP_fe')
('p', 'AA', 'QCMA', 'QMIP_fe') => ('-d', 'AA', 'QCMA', 'QMIP_fe')
('p', 'AA', 'QCMA', 'QMIP_fe') => ('p', 'T', 'QCMA', 'QMIP_fe')
('p', 'AA', 'QCMA', 'QMIP_fe') => ('p', 'EA', 'QCMA', 'QMIP_fe')
('p', 'EA', 'QCMA', 'QMIP_fe') => ('-d', 'EA', 'QCMA', 'QMIP_fe')
('p', 'EA', 'co.QCMA', 'co.QMIP_fe') => ('-d', 'EA', 'co.QCMA', 'co.QMIP_fe')
('p', 'T', 'QCMA', 'QMIP_fe') => ('-d', 'T', 'QCMA', 'QMIP_fe')
('p', 'T', 'co.QCMA', 'co.QMIP_fe') => ('-d', 'T', 'co.QCMA', 'co.QMIP_fe')
('p', 'R', 'co.QCMA', 'co.QMIP_fe') => ('-d', 'R', 'co.QCMA', 'co.QMIP_fe')
('p', 'R', 'QCMA', 'QMIP_fe') => ('-d', 'R', 'QCMA', 'QMIP_fe')
('p', 'AA', 'QMA', 'QMIP_fe') => ('-d', 'AA', 'QMA', 'QMIP_fe')
('p', 'AA', 'QMA', 'QMIP_fe') => ('p', 'T', 'QMA', 'QMIP_fe')
('p', 'AA', 'QMA', 'QMIP_fe') => ('p', 'EA', 'QMA', 'QMIP_fe')
('p', 'AA', 'co.QMA', 'co.QMIP_fe') => ('-d', 'AA', 'co.QMA', 'co.QMIP_fe')
('p', 'AA', 'co.QMA', 'co.QMIP_fe') => ('p', 'T', 'co.QMA', 'co.QMIP_fe')
('p', 'AA', 'co.QMA', 'co.QMIP_fe') => ('p', 'EA', 'co.QMA', 'co.QMIP_fe')
('p', 'EA', 'co.QMA', 'co.QMIP_fe') => ('-d', 'EA', 'co.QMA', 'co.QMIP_fe')
('p', 'EA', 'QMA', 'QMIP_fe') => ('-d', 'EA', 'QMA', 'QMIP_fe')
('p', 'T', 'co.QMA', 'co.QMIP_fe') => ('-d', 'T', 'co.QMA', 'co.QMIP_fe')
('p', 'T', 'QMA', 'QMIP_fe') => ('-d', 'T', 'QMA', 'QMIP_fe')
('p', 'R', 'QMA', 'QMIP_fe') => ('-d', 'R', 'QMA', 'QMIP_fe')
('p', 'R', 'co.QMA', 'co.QMIP_fe') => ('-d', 'R', 'co.QMA', 'co.QMIP_fe')
('p', 'E', 'co.QIP(3)', 'co.QMIP_fe') => ('-d', 'E', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'E', 'QIP(3)', 'QMIP_fe') => ('-d', 'E', 'QIP(3)', 'QMIP_fe')
('p', 'E', 'QIP(2)', 'QMIP_fe') => ('-d', 'E', 'QIP(2)', 'QMIP_fe')
('p', 'E', 'co.QIP(2)', 'co.QMIP_fe') => ('-d', 'E', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'A', 'co.QIP(3)', 'co.QMIP_fe') => ('-d', 'A', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'A', 'co.QIP(3)', 'co.QMIP_fe') => ('p', 'R', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'A', 'co.QIP(3)', 'co.QMIP_fe') => ('p', 'AA', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'A', 'QIP(3)', 'QMIP_fe') => ('-d', 'A', 'QIP(3)', 'QMIP_fe')
('p', 'A', 'QIP(3)', 'QMIP_fe') => ('p', 'R', 'QIP(3)', 'QMIP_fe')
('p', 'A', 'QIP(3)', 'QMIP_fe') => ('p', 'AA', 'QIP(3)', 'QMIP_fe')
('p', 'A', 'QIP(2)', 'QMIP_fe') => ('-d', 'A', 'QIP(2)', 'QMIP_fe')
('p', 'A', 'QIP(2)', 'QMIP_fe') => ('p', 'R', 'QIP(2)', 'QMIP_fe')
('p', 'A', 'QIP(2)', 'QMIP_fe') => ('p', 'AA', 'QIP(2)', 'QMIP_fe')
('p', 'A', 'co.QIP(2)', 'co.QMIP_fe') => ('-d', 'A', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'A', 'co.QIP(2)', 'co.QMIP_fe') => ('p', 'R', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'A', 'co.QIP(2)', 'co.QMIP_fe') => ('p', 'AA', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'A', 'co.QAM', 'co.QMIP_fe') => ('-d', 'A', 'co.QAM', 'co.QMIP_fe')
('p', 'A', 'co.QAM', 'co.QMIP_fe') => ('p', 'R', 'co.QAM', 'co.QMIP_fe')
('p', 'A', 'co.QAM', 'co.QMIP_fe') => ('p', 'AA', 'co.QAM', 'co.QMIP_fe')
('p', 'A', 'QAM', 'QMIP_fe') => ('-d', 'A', 'QAM', 'QMIP_fe')
('p', 'A', 'QAM', 'QMIP_fe') => ('p', 'R', 'QAM', 'QMIP_fe')
('p', 'A', 'QAM', 'QMIP_fe') => ('p', 'AA', 'QAM', 'QMIP_fe')
('p', 'AA', 'QAM', 'QMIP_fe') => ('-d', 'AA', 'QAM', 'QMIP_fe')
('p', 'AA', 'QAM', 'QMIP_fe') => ('p', 'T', 'QAM', 'QMIP_fe')
('p', 'AA', 'QAM', 'QMIP_fe') => ('p', 'EA', 'QAM', 'QMIP_fe')
('p', 'AA', 'co.QAM', 'co.QMIP_fe') => ('-d', 'AA', 'co.QAM', 'co.QMIP_fe')
('p', 'AA', 'co.QAM', 'co.QMIP_fe') => ('p', 'T', 'co.QAM', 'co.QMIP_fe')
('p', 'AA', 'co.QAM', 'co.QMIP_fe') => ('p', 'EA', 'co.QAM', 'co.QMIP_fe')
('p', 'EA', 'co.QAM', 'co.QMIP_fe') => ('-d', 'EA', 'co.QAM', 'co.QMIP_fe')
('p', 'EA', 'QAM', 'QMIP_fe') => ('-d', 'EA', 'QAM', 'QMIP_fe')
('p', 'T', 'co.QAM', 'co.QMIP_fe') => ('-d', 'T', 'co.QAM', 'co.QMIP_fe')
('p', 'T', 'QAM', 'QMIP_fe') => ('-d', 'T', 'QAM', 'QMIP_fe')
('p', 'R', 'QAM', 'QMIP_fe') => ('-d', 'R', 'QAM', 'QMIP_fe')
('p', 'R', 'co.QAM', 'co.QMIP_fe') => ('-d', 'R', 'co.QAM', 'co.QMIP_fe')
('p', 'AA', 'co.QIP(2)', 'co.QMIP_fe') => ('-d', 'AA', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'AA', 'co.QIP(2)', 'co.QMIP_fe') => ('p', 'T', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'AA', 'co.QIP(2)', 'co.QMIP_fe') => ('p', 'EA', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'AA', 'QIP(2)', 'QMIP_fe') => ('-d', 'AA', 'QIP(2)', 'QMIP_fe')
('p', 'AA', 'QIP(2)', 'QMIP_fe') => ('p', 'T', 'QIP(2)', 'QMIP_fe')
('p', 'AA', 'QIP(2)', 'QMIP_fe') => ('p', 'EA', 'QIP(2)', 'QMIP_fe')
('p', 'EA', 'QIP(2)', 'QMIP_fe') => ('-d', 'EA', 'QIP(2)', 'QMIP_fe')
('p', 'EA', 'co.QIP(2)', 'co.QMIP_fe') => ('-d', 'EA', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'T', 'QIP(2)', 'QMIP_fe') => ('-d', 'T', 'QIP(2)', 'QMIP_fe')
('p', 'T', 'co.QIP(2)', 'co.QMIP_fe') => ('-d', 'T', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'R', 'co.QIP(2)', 'co.QMIP_fe') => ('-d', 'R', 'co.QIP(2)', 'co.QMIP_fe')
('p', 'R', 'QIP(2)', 'QMIP_fe') => ('-d', 'R', 'QIP(2)', 'QMIP_fe')
('p', 'AA', 'QIP(3)', 'QMIP_fe') => ('-d', 'AA', 'QIP(3)', 'QMIP_fe')
('p', 'AA', 'QIP(3)', 'QMIP_fe') => ('p', 'T', 'QIP(3)', 'QMIP_fe')
('p', 'AA', 'QIP(3)', 'QMIP_fe') => ('p', 'EA', 'QIP(3)', 'QMIP_fe')
('p', 'AA', 'co.QIP(3)', 'co.QMIP_fe') => ('-d', 'AA', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'AA', 'co.QIP(3)', 'co.QMIP_fe') => ('p', 'T', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'AA', 'co.QIP(3)', 'co.QMIP_fe') => ('p', 'EA', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'EA', 'co.QIP(3)', 'co.QMIP_fe') => ('-d', 'EA', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'EA', 'QIP(3)', 'QMIP_fe') => ('-d', 'EA', 'QIP(3)', 'QMIP_fe')
('p', 'T', 'co.QIP(3)', 'co.QMIP_fe') => ('-d', 'T', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'T', 'QIP(3)', 'QMIP_fe') => ('-d', 'T', 'QIP(3)', 'QMIP_fe')
('p', 'R', 'QIP(3)', 'QMIP_fe') => ('-d', 'R', 'QIP(3)', 'QMIP_fe')
('p', 'R', 'co.QIP(3)', 'co.QMIP_fe') => ('-d', 'R', 'co.QIP(3)', 'co.QMIP_fe')
('p', 'A', 'co.SBP', 'co.QMIP_fe') => ('-d', 'A', 'co.SBP', 'co.QMIP_fe')
('p', 'A', 'co.SBP', 'co.QMIP_fe') => ('p', 'AA', 'co.SBP', 'co.QMIP_fe')
('p', 'A', 'SBP', 'QMIP_fe') => ('-d', 'A', 'SBP', 'QMIP_fe')
('p', 'A', 'SBP', 'QMIP_fe') => ('p', 'AA', 'SBP', 'QMIP_fe')
('p', 'AA', 'SBP', 'QMIP_fe') => ('-d', 'AA', 'SBP', 'QMIP_fe')
('p', 'AA', 'SBP', 'QMIP_fe') => ('p', 'T', 'SBP', 'QMIP_fe')
('p', 'AA', 'SBP', 'QMIP_fe') => ('p', 'EA', 'SBP', 'QMIP_fe')
('p', 'AA', 'co.SBP', 'co.QMIP_fe') => ('-d', 'AA', 'co.SBP', 'co.QMIP_fe')
('p', 'AA', 'co.SBP', 'co.QMIP_fe') => ('p', 'T', 'co.SBP', 'co.QMIP_fe')
('p', 'AA', 'co.SBP', 'co.QMIP_fe') => ('p', 'EA', 'co.SBP', 'co.QMIP_fe')
('p', 'EA', 'co.SBP', 'co.QMIP_fe') => ('-d', 'EA', 'co.SBP', 'co.QMIP_fe')
('p', 'EA', 'SBP', 'QMIP_fe') => ('-d', 'EA', 'SBP', 'QMIP_fe')
('p', 'T', 'co.SBP', 'co.QMIP_fe') => ('-d', 'T', 'co.SBP', 'co.QMIP_fe')
('p', 'T', 'SBP', 'QMIP_fe') => ('-d', 'T', 'SBP', 'QMIP_fe')
('p', 'A', 'co.AM', 'co.QMIP_fe') => ('-d', 'A', 'co.AM', 'co.QMIP_fe')
('p', 'A', 'co.AM', 'co.QMIP_fe') => ('p', 'AA', 'co.AM', 'co.QMIP_fe')
('p', 'A', 'AM', 'QMIP_fe') => ('-d', 'A', 'AM', 'QMIP_fe')
('p', 'A', 'AM', 'QMIP_fe') => ('p', 'AA', 'AM', 'QMIP_fe')
('p', 'AA', 'AM', 'QMIP_fe') => ('-d', 'AA', 'AM', 'QMIP_fe')
('p', 'AA', 'AM', 'QMIP_fe') => ('p', 'T', 'AM', 'QMIP_fe')
('p', 'AA', 'AM', 'QMIP_fe') => ('p', 'EA', 'AM', 'QMIP_fe')
('p', 'AA', 'co.AM', 'co.QMIP_fe') => ('-d', 'AA', 'co.AM', 'co.QMIP_fe')
('p', 'AA', 'co.AM', 'co.QMIP_fe') => ('p', 'T', 'co.AM', 'co.QMIP_fe')
('p', 'AA', 'co.AM', 'co.QMIP_fe') => ('p', 'EA', 'co.AM', 'co.QMIP_fe')
('p', 'EA', 'co.AM', 'co.QMIP_fe') => ('-d', 'EA', 'co.AM', 'co.QMIP_fe')
('p', 'EA', 'AM', 'QMIP_fe') => ('-d', 'EA', 'AM', 'QMIP_fe')
('p', 'T', 'co.AM', 'co.QMIP_fe') => ('-d', 'T', 'co.AM', 'co.QMIP_fe')
('p', 'T', 'AM', 'QMIP_fe') => ('-d', 'T', 'AM', 'QMIP_fe')
('p', 'A', 'co.IP', 'co.QMIP_fe') => ('-d', 'A', 'co.IP', 'co.QMIP_fe')
('p', 'A', 'co.IP', 'co.QMIP_fe') => ('p', 'R', 'co.IP', 'co.QMIP_fe')
('p', 'A', 'co.IP', 'co.QMIP_fe') => ('p', 'AA', 'co.IP', 'co.QMIP_fe')
('p', 'A', 'IP', 'QMIP_fe') => ('-d', 'A', 'IP', 'QMIP_fe')
('p', 'A', 'IP', 'QMIP_fe') => ('p', 'R', 'IP', 'QMIP_fe')
('p', 'A', 'IP', 'QMIP_fe') => ('p', 'AA', 'IP', 'QMIP_fe')
('p', 'AA', 'IP', 'QMIP_fe') => ('-d', 'AA', 'IP', 'QMIP_fe')
('p', 'AA', 'IP', 'QMIP_fe') => ('p', 'T', 'IP', 'QMIP_fe')
('p', 'AA', 'IP', 'QMIP_fe') => ('p', 'EA', 'IP', 'QMIP_fe')
('p', 'AA', 'co.IP', 'co.QMIP_fe') => ('-d', 'AA', 'co.IP', 'co.QMIP_fe')
('p', 'AA', 'co.IP', 'co.QMIP_fe') => ('p', 'T', 'co.IP', 'co.QMIP_fe')
('p', 'AA', 'co.IP', 'co.QMIP_fe') => ('p', 'EA', 'co.IP', 'co.QMIP_fe')
('p', 'EA', 'co.IP', 'co.QMIP_fe') => ('-d', 'EA', 'co.IP', 'co.QMIP_fe')
('p', 'EA', 'IP', 'QMIP_fe') => ('-d', 'EA', 'IP', 'QMIP_fe')
('p', 'T', 'co.IP', 'co.QMIP_fe') => ('-d', 'T', 'co.IP', 'co.QMIP_fe')
('p', 'T', 'IP', 'QMIP_fe') => ('-d', 'T', 'IP', 'QMIP_fe')
('p', 'R', 'IP', 'QMIP_fe') => ('-d', 'R', 'IP', 'QMIP_fe')
('p', 'R', 'co.IP', 'co.QMIP_fe') => ('-d', 'R', 'co.IP', 'co.QMIP_fe')
('p', 'AA', 'co.QIP', 'co.QMIP_fe') => ('-d', 'AA', 'co.QIP', 'co.QMIP_fe')
('p', 'AA', 'co.QIP', 'co.QMIP_fe') => ('p', 'T', 'co.QIP', 'co.QMIP_fe')
('p', 'AA', 'co.QIP', 'co.QMIP_fe') => ('p', 'EA', 'co.QIP', 'co.QMIP_fe')
('p', 'AA', 'QIP', 'QMIP_fe') => ('-d', 'AA', 'QIP', 'QMIP_fe')
('p', 'AA', 'QIP', 'QMIP_fe') => ('p', 'T', 'QIP', 'QMIP_fe')
('p', 'AA', 'QIP', 'QMIP_fe') => ('p', 'EA', 'QIP', 'QMIP_fe')
('p', 'EA', 'QIP', 'QMIP_fe') => ('-d', 'EA', 'QIP', 'QMIP_fe')
('p', 'EA', 'QIP', 'QMIP_fe') => ('p', 'E', 'QIP', 'QMIP_fe')
('p', 'EA', 'co.QIP', 'co.QMIP_fe') => ('-d', 'EA', 'co.QIP', 'co.QMIP_fe')
('p', 'EA', 'co.QIP', 'co.QMIP_fe') => ('p', 'E', 'co.QIP', 'co.QMIP_fe')
('p', 'E', 'co.QIP', 'co.QMIP_fe') => ('-d', 'E', 'co.QIP', 'co.QMIP_fe')
('p', 'E', 'QIP', 'QMIP_fe') => ('-d', 'E', 'QIP', 'QMIP_fe')
('p', 'T', 'QIP', 'QMIP_fe') => ('-d', 'T', 'QIP', 'QMIP_fe')
('p', 'T', 'co.QIP', 'co.QMIP_fe') => ('-d', 'T', 'co.QIP', 'co.QMIP_fe')
('p', 'R', 'co.QIP', 'co.QMIP_fe') => ('-d', 'R', 'co.QIP', 'co.QMIP_fe')
('p', 'R', 'QIP', 'QMIP_fe') => ('-d', 'R', 'QIP', 'QMIP_fe')
('p', 'A', 'NIQSZK', 'QSZK') => ('-d', 'A', 'NIQSZK', 'QSZK')
('p', 'A', 'NIQSZK', 'QSZK') => ('p', 'R', 'NIQSZK', 'QSZK')
('p', 'A', 'NIQSZK', 'QSZK') => ('p', 'AA', 'NIQSZK', 'QSZK')
('p', 'A', 'co.NIQSZK', 'QSZK') => ('-d', 'A', 'co.NIQSZK', 'QSZK')
('p', 'A', 'co.NIQSZK', 'QSZK') => ('p', 'R', 'co.NIQSZK', 'QSZK')
('p', 'A', 'co.NIQSZK', 'QSZK') => ('p', 'AA', 'co.NIQSZK', 'QSZK')
('p', 'A', 'cocap.NIQSZK', 'QSZK') => ('-d', 'A', 'cocap.NIQSZK', 'QSZK')
('p', 'A', 'cocap.NIQSZK', 'QSZK') => ('p', 'R', 'cocap.NIQSZK', 'QSZK')
('p', 'A', 'cocap.NIQSZK', 'QSZK') => ('p', 'AA', 'cocap.NIQSZK', 'QSZK')
('-d', 'A', 'cocap.NIQSZK', 'ALL') => ('-d', 'R', 'cocap.NIQSZK', 'ALL')
('-d', 'A', 'cocap.NIQSZK', 'ALL') => ('-d', 'AA', 'cocap.NIQSZK', 'ALL')
('-d', 'AA', 'cocap.NIQSZK', 'ALL') => ('-d', 'T', 'cocap.NIQSZK', 'ALL')
('-d', 'AA', 'cocap.NIQSZK', 'ALL') => ('-d', 'EA', 'cocap.NIQSZK', 'ALL')
('p', 'A', 'cocap.NIQSZK', 'ALL') => ('p', 'R', 'cocap.NIQSZK', 'ALL')
('p', 'A', 'cocap.NIQSZK', 'ALL') => ('p', 'AA', 'cocap.NIQSZK', 'ALL')
('p', 'AA', 'cocap.NIQSZK', 'ALL') => ('p', 'T', 'cocap.NIQSZK', 'ALL')
('p', 'AA', 'cocap.NIQSZK', 'ALL') => ('p', 'EA', 'cocap.NIQSZK', 'ALL')
('-d', 'A', 'cocap.NIQSZK', 'EXP_plo') => ('-d', 'R', 'cocap.NIQSZK', 'EXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'EXP_plo') => ('-d', 'AA', 'cocap.NIQSZK', 'EXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'cocap.NEXP_plo') => ('-d', 'R', 'cocap.NIQSZK', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'cocap.NEXP_plo') => ('-d', 'AA', 'cocap.NIQSZK', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'co.NEXP') => ('-d', 'R', 'cocap.NIQSZK', 'co.NEXP')
('-d', 'A', 'cocap.NIQSZK', 'co.NEXP') => ('-d', 'AA', 'cocap.NIQSZK', 'co.NEXP')
('-d', 'A', 'cocap.NIQSZK', 'NEXP') => ('-d', 'R', 'cocap.NIQSZK', 'NEXP')
('-d', 'A', 'cocap.NIQSZK', 'NEXP') => ('-d', 'AA', 'cocap.NIQSZK', 'NEXP')
('-d', 'A', 'cocap.NIQSZK', 'cocap.NEXP') => ('-d', 'R', 'cocap.NIQSZK', 'cocap.NEXP')
('-d', 'A', 'cocap.NIQSZK', 'cocap.NEXP') => ('-d', 'AA', 'cocap.NIQSZK', 'cocap.NEXP')
('-d', 'A', 'cocap.NIQSZK', 'R') => ('-d', 'R', 'cocap.NIQSZK', 'R')
('-d', 'A', 'cocap.NIQSZK', 'R') => ('-d', 'AA', 'cocap.NIQSZK', 'R')
('-d', 'A', 'cocap.NIQSZK', 'RE') => ('-d', 'R', 'cocap.NIQSZK', 'RE')
('-d', 'A', 'cocap.NIQSZK', 'RE') => ('-d', 'AA', 'cocap.NIQSZK', 'RE')
('-d', 'A', 'cocap.NIQSZK', 'co.RE') => ('-d', 'R', 'cocap.NIQSZK', 'co.RE')
('-d', 'A', 'cocap.NIQSZK', 'co.RE') => ('-d', 'AA', 'cocap.NIQSZK', 'co.RE')
('-d', 'AA', 'cocap.NIQSZK', 'co.RE') => ('-d', 'T', 'cocap.NIQSZK', 'co.RE')
('-d', 'AA', 'cocap.NIQSZK', 'co.RE') => ('-d', 'EA', 'cocap.NIQSZK', 'co.RE')
('-d', 'AA', 'cocap.NIQSZK', 'RE') => ('-d', 'T', 'cocap.NIQSZK', 'RE')
('-d', 'AA', 'cocap.NIQSZK', 'RE') => ('-d', 'EA', 'cocap.NIQSZK', 'RE')
('-d', 'AA', 'cocap.NIQSZK', 'R') => ('-d', 'T', 'cocap.NIQSZK', 'R')
('-d', 'AA', 'cocap.NIQSZK', 'R') => ('-d', 'EA', 'cocap.NIQSZK', 'R')
('-d', 'A', 'cocap.NIQSZK', 'NEXP/poly') => ('-d', 'R', 'cocap.NIQSZK', 'NEXP/poly')
('-d', 'A', 'cocap.NIQSZK', 'NEXP/poly') => ('-d', 'AA', 'cocap.NIQSZK', 'NEXP/poly')
('-d', 'AA', 'cocap.NIQSZK', 'NEXP/poly') => ('-d', 'T', 'cocap.NIQSZK', 'NEXP/poly')
('-d', 'AA', 'cocap.NIQSZK', 'NEXP/poly') => ('-d', 'EA', 'cocap.NIQSZK', 'NEXP/poly')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.NEXP') => ('-d', 'T', 'cocap.NIQSZK', 'cocap.NEXP')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.NEXP') => ('-d', 'EA', 'cocap.NIQSZK', 'cocap.NEXP')
('-d', 'AA', 'cocap.NIQSZK', 'co.NEXP') => ('-d', 'T', 'cocap.NIQSZK', 'co.NEXP')
('-d', 'AA', 'cocap.NIQSZK', 'co.NEXP') => ('-d', 'EA', 'cocap.NIQSZK', 'co.NEXP')
('-d', 'AA', 'cocap.NIQSZK', 'NEXP') => ('-d', 'T', 'cocap.NIQSZK', 'NEXP')
('-d', 'AA', 'cocap.NIQSZK', 'NEXP') => ('-d', 'EA', 'cocap.NIQSZK', 'NEXP')
('-d', 'A', 'cocap.NIQSZK', 'co.NEXP_plo') => ('-d', 'R', 'cocap.NIQSZK', 'co.NEXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'co.NEXP_plo') => ('-d', 'AA', 'cocap.NIQSZK', 'co.NEXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'NEXP_plo') => ('-d', 'R', 'cocap.NIQSZK', 'NEXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'NEXP_plo') => ('-d', 'AA', 'cocap.NIQSZK', 'NEXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'AH') => ('-d', 'R', 'cocap.NIQSZK', 'AH')
('-d', 'A', 'cocap.NIQSZK', 'AH') => ('-d', 'AA', 'cocap.NIQSZK', 'AH')
('-d', 'AA', 'cocap.NIQSZK', 'AH') => ('-d', 'T', 'cocap.NIQSZK', 'AH')
('-d', 'AA', 'cocap.NIQSZK', 'AH') => ('-d', 'EA', 'cocap.NIQSZK', 'AH')
('-d', 'A', 'cocap.NIQSZK', 'AH_plo') => ('-d', 'R', 'cocap.NIQSZK', 'AH_plo')
('-d', 'A', 'cocap.NIQSZK', 'AH_plo') => ('-d', 'AA', 'cocap.NIQSZK', 'AH_plo')
('-d', 'A', 'cocap.NIQSZK', 'co.AH_plo') => ('-d', 'R', 'cocap.NIQSZK', 'co.AH_plo')
('-d', 'A', 'cocap.NIQSZK', 'co.AH_plo') => ('-d', 'AA', 'cocap.NIQSZK', 'co.AH_plo')
('-d', 'A', 'cocap.NIQSZK', 'cocap.AH_plo') => ('-d', 'R', 'cocap.NIQSZK', 'cocap.AH_plo')
('-d', 'A', 'cocap.NIQSZK', 'cocap.AH_plo') => ('-d', 'AA', 'cocap.NIQSZK', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.AH_plo') => ('-d', 'T', 'cocap.NIQSZK', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.AH_plo') => ('-d', 'EA', 'cocap.NIQSZK', 'cocap.AH_plo')
('-d', 'AA', 'cocap.NIQSZK', 'co.AH_plo') => ('-d', 'T', 'cocap.NIQSZK', 'co.AH_plo')
('-d', 'AA', 'cocap.NIQSZK', 'co.AH_plo') => ('-d', 'EA', 'cocap.NIQSZK', 'co.AH_plo')
('-d', 'AA', 'cocap.NIQSZK', 'AH_plo') => ('-d', 'T', 'cocap.NIQSZK', 'AH_plo')
('-d', 'AA', 'cocap.NIQSZK', 'AH_plo') => ('-d', 'EA', 'cocap.NIQSZK', 'AH_plo')
('-d', 'AA', 'cocap.NIQSZK', 'NEXP_plo') => ('-d', 'T', 'cocap.NIQSZK', 'NEXP_plo')
('-d', 'AA', 'cocap.NIQSZK', 'NEXP_plo') => ('-d', 'EA', 'cocap.NIQSZK', 'NEXP_plo')
('-d', 'AA', 'cocap.NIQSZK', 'co.NEXP_plo') => ('-d', 'T', 'cocap.NIQSZK', 'co.NEXP_plo')
('-d', 'AA', 'cocap.NIQSZK', 'co.NEXP_plo') => ('-d', 'EA', 'cocap.NIQSZK', 'co.NEXP_plo')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.NEXP_plo') => ('-d', 'T', 'cocap.NIQSZK', 'cocap.NEXP_plo')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.NEXP_plo') => ('-d', 'EA', 'cocap.NIQSZK', 'cocap.NEXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'EXP') => ('-d', 'R', 'cocap.NIQSZK', 'EXP')
('-d', 'A', 'cocap.NIQSZK', 'EXP') => ('-d', 'AA', 'cocap.NIQSZK', 'EXP')
('-d', 'AA', 'cocap.NIQSZK', 'EXP') => ('-d', 'T', 'cocap.NIQSZK', 'EXP')
('-d', 'AA', 'cocap.NIQSZK', 'EXP') => ('-d', 'EA', 'cocap.NIQSZK', 'EXP')
('-d', 'AA', 'cocap.NIQSZK', 'EXP_plo') => ('-d', 'T', 'cocap.NIQSZK', 'EXP_plo')
('-d', 'AA', 'cocap.NIQSZK', 'EXP_plo') => ('-d', 'EA', 'cocap.NIQSZK', 'EXP_plo')
('p', 'A', 'cocap.NIQSZK', 'EXP_plo') => ('p', 'R', 'cocap.NIQSZK', 'EXP_plo')
('p', 'A', 'cocap.NIQSZK', 'EXP_plo') => ('p', 'AA', 'cocap.NIQSZK', 'EXP_plo')
('p', 'A', 'cocap.NIQSZK', 'cocap.NEXP_plo') => ('p', 'R', 'cocap.NIQSZK', 'cocap.NEXP_plo')
('p', 'A', 'cocap.NIQSZK', 'cocap.NEXP_plo') => ('p', 'AA', 'cocap.NIQSZK', 'cocap.NEXP_plo')
('p', 'A', 'cocap.NIQSZK', 'co.NEXP') => ('p', 'R', 'cocap.NIQSZK', 'co.NEXP')
('p', 'A', 'cocap.NIQSZK', 'co.NEXP') => ('p', 'AA', 'cocap.NIQSZK', 'co.NEXP')
('p', 'A', 'cocap.NIQSZK', 'NEXP') => ('p', 'R', 'cocap.NIQSZK', 'NEXP')
('p', 'A', 'cocap.NIQSZK', 'NEXP') => ('p', 'AA', 'cocap.NIQSZK', 'NEXP')
('p', 'A', 'cocap.NIQSZK', 'cocap.NEXP') => ('p', 'R', 'cocap.NIQSZK', 'cocap.NEXP')
('p', 'A', 'cocap.NIQSZK', 'cocap.NEXP') => ('p', 'AA', 'cocap.NIQSZK', 'cocap.NEXP')
('p', 'A', 'cocap.NIQSZK', 'R') => ('p', 'R', 'cocap.NIQSZK', 'R')
('p', 'A', 'cocap.NIQSZK', 'R') => ('p', 'AA', 'cocap.NIQSZK', 'R')
('p', 'A', 'cocap.NIQSZK', 'RE') => ('p', 'R', 'cocap.NIQSZK', 'RE')
('p', 'A', 'cocap.NIQSZK', 'RE') => ('p', 'AA', 'cocap.NIQSZK', 'RE')
('p', 'A', 'cocap.NIQSZK', 'co.RE') => ('p', 'R', 'cocap.NIQSZK', 'co.RE')
('p', 'A', 'cocap.NIQSZK', 'co.RE') => ('p', 'AA', 'cocap.NIQSZK', 'co.RE')
('p', 'AA', 'cocap.NIQSZK', 'co.RE') => ('p', 'T', 'cocap.NIQSZK', 'co.RE')
('p', 'AA', 'cocap.NIQSZK', 'co.RE') => ('p', 'EA', 'cocap.NIQSZK', 'co.RE')
('p', 'AA', 'cocap.NIQSZK', 'RE') => ('p', 'T', 'cocap.NIQSZK', 'RE')
('p', 'AA', 'cocap.NIQSZK', 'RE') => ('p', 'EA', 'cocap.NIQSZK', 'RE')
('p', 'AA', 'cocap.NIQSZK', 'R') => ('p', 'T', 'cocap.NIQSZK', 'R')
('p', 'AA', 'cocap.NIQSZK', 'R') => ('p', 'EA', 'cocap.NIQSZK', 'R')
('p', 'A', 'cocap.NIQSZK', 'NEXP/poly') => ('p', 'R', 'cocap.NIQSZK', 'NEXP/poly')
('p', 'A', 'cocap.NIQSZK', 'NEXP/poly') => ('p', 'AA', 'cocap.NIQSZK', 'NEXP/poly')
('p', 'AA', 'cocap.NIQSZK', 'NEXP/poly') => ('p', 'T', 'cocap.NIQSZK', 'NEXP/poly')
('p', 'AA', 'cocap.NIQSZK', 'NEXP/poly') => ('p', 'EA', 'cocap.NIQSZK', 'NEXP/poly')
('p', 'AA', 'cocap.NIQSZK', 'cocap.NEXP') => ('p', 'T', 'cocap.NIQSZK', 'cocap.NEXP')
('p', 'AA', 'cocap.NIQSZK', 'cocap.NEXP') => ('p', 'EA', 'cocap.NIQSZK', 'cocap.NEXP')
('p', 'AA', 'cocap.NIQSZK', 'co.NEXP') => ('p', 'T', 'cocap.NIQSZK', 'co.NEXP')
('p', 'AA', 'cocap.NIQSZK', 'co.NEXP') => ('p', 'EA', 'cocap.NIQSZK', 'co.NEXP')
('p', 'AA', 'cocap.NIQSZK', 'NEXP') => ('p', 'T', 'cocap.NIQSZK', 'NEXP')
('p', 'AA', 'cocap.NIQSZK', 'NEXP') => ('p', 'EA', 'cocap.NIQSZK', 'NEXP')
('p', 'A', 'cocap.NIQSZK', 'co.NEXP_plo') => ('p', 'R', 'cocap.NIQSZK', 'co.NEXP_plo')
('p', 'A', 'cocap.NIQSZK', 'co.NEXP_plo') => ('p', 'AA', 'cocap.NIQSZK', 'co.NEXP_plo')
('p', 'A', 'cocap.NIQSZK', 'NEXP_plo') => ('p', 'R', 'cocap.NIQSZK', 'NEXP_plo')
('p', 'A', 'cocap.NIQSZK', 'NEXP_plo') => ('p', 'AA', 'cocap.NIQSZK', 'NEXP_plo')
('p', 'A', 'cocap.NIQSZK', 'AH') => ('p', 'R', 'cocap.NIQSZK', 'AH')
('p', 'A', 'cocap.NIQSZK', 'AH') => ('p', 'AA', 'cocap.NIQSZK', 'AH')
('p', 'AA', 'cocap.NIQSZK', 'AH') => ('p', 'T', 'cocap.NIQSZK', 'AH')
('p', 'AA', 'cocap.NIQSZK', 'AH') => ('p', 'EA', 'cocap.NIQSZK', 'AH')
('p', 'A', 'cocap.NIQSZK', 'AH_plo') => ('p', 'R', 'cocap.NIQSZK', 'AH_plo')
('p', 'A', 'cocap.NIQSZK', 'AH_plo') => ('p', 'AA', 'cocap.NIQSZK', 'AH_plo')
('p', 'A', 'cocap.NIQSZK', 'co.AH_plo') => ('p', 'R', 'cocap.NIQSZK', 'co.AH_plo')
('p', 'A', 'cocap.NIQSZK', 'co.AH_plo') => ('p', 'AA', 'cocap.NIQSZK', 'co.AH_plo')
('p', 'A', 'cocap.NIQSZK', 'cocap.AH_plo') => ('p', 'R', 'cocap.NIQSZK', 'cocap.AH_plo')
('p', 'A', 'cocap.NIQSZK', 'cocap.AH_plo') => ('p', 'AA', 'cocap.NIQSZK', 'cocap.AH_plo')
('p', 'AA', 'cocap.NIQSZK', 'cocap.AH_plo') => ('p', 'T', 'cocap.NIQSZK', 'cocap.AH_plo')
('p', 'AA', 'cocap.NIQSZK', 'cocap.AH_plo') => ('p', 'EA', 'cocap.NIQSZK', 'cocap.AH_plo')
('p', 'AA', 'cocap.NIQSZK', 'co.AH_plo') => ('p', 'T', 'cocap.NIQSZK', 'co.AH_plo')
('p', 'AA', 'cocap.NIQSZK', 'co.AH_plo') => ('p', 'EA', 'cocap.NIQSZK', 'co.AH_plo')
('p', 'AA', 'cocap.NIQSZK', 'AH_plo') => ('p', 'T', 'cocap.NIQSZK', 'AH_plo')
('p', 'AA', 'cocap.NIQSZK', 'AH_plo') => ('p', 'EA', 'cocap.NIQSZK', 'AH_plo')
('p', 'AA', 'cocap.NIQSZK', 'NEXP_plo') => ('p', 'T', 'cocap.NIQSZK', 'NEXP_plo')
('p', 'AA', 'cocap.NIQSZK', 'NEXP_plo') => ('p', 'EA', 'cocap.NIQSZK', 'NEXP_plo')
('p', 'AA', 'cocap.NIQSZK', 'co.NEXP_plo') => ('p', 'T', 'cocap.NIQSZK', 'co.NEXP_plo')
('p', 'AA', 'cocap.NIQSZK', 'co.NEXP_plo') => ('p', 'EA', 'cocap.NIQSZK', 'co.NEXP_plo')
('p', 'AA', 'cocap.NIQSZK', 'cocap.NEXP_plo') => ('p', 'T', 'cocap.NIQSZK', 'cocap.NEXP_plo')
('p', 'AA', 'cocap.NIQSZK', 'cocap.NEXP_plo') => ('p', 'EA', 'cocap.NIQSZK', 'cocap.NEXP_plo')
('p', 'A', 'cocap.NIQSZK', 'EXP') => ('p', 'R', 'cocap.NIQSZK', 'EXP')
('p', 'A', 'cocap.NIQSZK', 'EXP') => ('p', 'AA', 'cocap.NIQSZK', 'EXP')
('p', 'AA', 'cocap.NIQSZK', 'EXP') => ('p', 'T', 'cocap.NIQSZK', 'EXP')
('p', 'AA', 'cocap.NIQSZK', 'EXP') => ('p', 'EA', 'cocap.NIQSZK', 'EXP')
('p', 'AA', 'cocap.NIQSZK', 'EXP_plo') => ('p', 'T', 'cocap.NIQSZK', 'EXP_plo')
('p', 'AA', 'cocap.NIQSZK', 'EXP_plo') => ('p', 'EA', 'cocap.NIQSZK', 'EXP_plo')
('-d', 'A', 'cocap.NIQSZK', 'cocap.QMIP_fe') => ('-d', 'R', 'cocap.NIQSZK', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.NIQSZK', 'cocap.QMIP_fe') => ('-d', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.NIQSZK', 'QMIP_fe') => ('-d', 'R', 'cocap.NIQSZK', 'QMIP_fe')
('-d', 'A', 'cocap.NIQSZK', 'QMIP_fe') => ('-d', 'AA', 'cocap.NIQSZK', 'QMIP_fe')
('-d', 'A', 'cocap.NIQSZK', 'co.QMIP_fe') => ('-d', 'R', 'cocap.NIQSZK', 'co.QMIP_fe')
('-d', 'A', 'cocap.NIQSZK', 'co.QMIP_fe') => ('-d', 'AA', 'cocap.NIQSZK', 'co.QMIP_fe')
('-d', 'AA', 'cocap.NIQSZK', 'co.QMIP_fe') => ('-d', 'T', 'cocap.NIQSZK', 'co.QMIP_fe')
('-d', 'AA', 'cocap.NIQSZK', 'co.QMIP_fe') => ('-d', 'EA', 'cocap.NIQSZK', 'co.QMIP_fe')
('-d', 'AA', 'cocap.NIQSZK', 'QMIP_fe') => ('-d', 'T', 'cocap.NIQSZK', 'QMIP_fe')
('-d', 'AA', 'cocap.NIQSZK', 'QMIP_fe') => ('-d', 'EA', 'cocap.NIQSZK', 'QMIP_fe')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_fe') => ('-d', 'T', 'cocap.NIQSZK', 'cocap.QMIP_fe')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_fe') => ('-d', 'EA', 'cocap.NIQSZK', 'cocap.QMIP_fe')
('p', 'A', 'cocap.NIQSZK', 'cocap.QMIP_fe') => ('p', 'R', 'cocap.NIQSZK', 'cocap.QMIP_fe')
('p', 'A', 'cocap.NIQSZK', 'cocap.QMIP_fe') => ('p', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_fe')
('p', 'A', 'cocap.NIQSZK', 'QMIP_fe') => ('p', 'R', 'cocap.NIQSZK', 'QMIP_fe')
('p', 'A', 'cocap.NIQSZK', 'QMIP_fe') => ('p', 'AA', 'cocap.NIQSZK', 'QMIP_fe')
('p', 'A', 'cocap.NIQSZK', 'co.QMIP_fe') => ('p', 'R', 'cocap.NIQSZK', 'co.QMIP_fe')
('p', 'A', 'cocap.NIQSZK', 'co.QMIP_fe') => ('p', 'AA', 'cocap.NIQSZK', 'co.QMIP_fe')
('p', 'AA', 'cocap.NIQSZK', 'co.QMIP_fe') => ('p', 'T', 'cocap.NIQSZK', 'co.QMIP_fe')
('p', 'AA', 'cocap.NIQSZK', 'co.QMIP_fe') => ('p', 'EA', 'cocap.NIQSZK', 'co.QMIP_fe')
('p', 'AA', 'cocap.NIQSZK', 'QMIP_fe') => ('p', 'T', 'cocap.NIQSZK', 'QMIP_fe')
('p', 'AA', 'cocap.NIQSZK', 'QMIP_fe') => ('p', 'EA', 'cocap.NIQSZK', 'QMIP_fe')
('p', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_fe') => ('p', 'T', 'cocap.NIQSZK', 'cocap.QMIP_fe')
('p', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_fe') => ('p', 'EA', 'cocap.NIQSZK', 'cocap.QMIP_fe')
('-d', 'A', 'cocap.NIQSZK', 'QIP') => ('-d', 'R', 'cocap.NIQSZK', 'QIP')
('-d', 'A', 'cocap.NIQSZK', 'QIP') => ('-d', 'AA', 'cocap.NIQSZK', 'QIP')
('-d', 'A', 'cocap.NIQSZK', 'co.QIP') => ('-d', 'R', 'cocap.NIQSZK', 'co.QIP')
('-d', 'A', 'cocap.NIQSZK', 'co.QIP') => ('-d', 'AA', 'cocap.NIQSZK', 'co.QIP')
('-d', 'A', 'cocap.NIQSZK', 'cocap.QIP') => ('-d', 'R', 'cocap.NIQSZK', 'cocap.QIP')
('-d', 'A', 'cocap.NIQSZK', 'cocap.QIP') => ('-d', 'AA', 'cocap.NIQSZK', 'cocap.QIP')
('-d', 'A', 'cocap.NIQSZK', 'co.QMIP_le') => ('-d', 'R', 'cocap.NIQSZK', 'co.QMIP_le')
('-d', 'A', 'cocap.NIQSZK', 'co.QMIP_le') => ('-d', 'AA', 'cocap.NIQSZK', 'co.QMIP_le')
('-d', 'A', 'cocap.NIQSZK', 'QMIP_le') => ('-d', 'R', 'cocap.NIQSZK', 'QMIP_le')
('-d', 'A', 'cocap.NIQSZK', 'QMIP_le') => ('-d', 'AA', 'cocap.NIQSZK', 'QMIP_le')
('-d', 'A', 'cocap.NIQSZK', 'cocap.QMIP_le') => ('-d', 'R', 'cocap.NIQSZK', 'cocap.QMIP_le')
('-d', 'A', 'cocap.NIQSZK', 'cocap.QMIP_le') => ('-d', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_le') => ('-d', 'T', 'cocap.NIQSZK', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_le') => ('-d', 'EA', 'cocap.NIQSZK', 'cocap.QMIP_le')
('-d', 'AA', 'cocap.NIQSZK', 'co.QMIP_le') => ('-d', 'T', 'cocap.NIQSZK', 'co.QMIP_le')
('-d', 'AA', 'cocap.NIQSZK', 'co.QMIP_le') => ('-d', 'EA', 'cocap.NIQSZK', 'co.QMIP_le')
('-d', 'AA', 'cocap.NIQSZK', 'QMIP_le') => ('-d', 'T', 'cocap.NIQSZK', 'QMIP_le')
('-d', 'AA', 'cocap.NIQSZK', 'QMIP_le') => ('-d', 'EA', 'cocap.NIQSZK', 'QMIP_le')
('-d', 'A', 'cocap.NIQSZK', 'cocap.QMIP_ne') => ('-d', 'R', 'cocap.NIQSZK', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NIQSZK', 'cocap.QMIP_ne') => ('-d', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_ne')
('-d', 'A', 'cocap.NIQSZK', 'QMIP_ne') => ('-d', 'R', 'cocap.NIQSZK', 'QMIP_ne')
('-d', 'A', 'cocap.NIQSZK', 'QMIP_ne') => ('-d', 'AA', 'cocap.NIQSZK', 'QMIP_ne')
('-d', 'A', 'cocap.NIQSZK', 'co.QMIP_ne') => ('-d', 'R', 'cocap.NIQSZK', 'co.QMIP_ne')
('-d', 'A', 'cocap.NIQSZK', 'co.QMIP_ne') => ('-d', 'AA', 'cocap.NIQSZK', 'co.QMIP_ne')
('-d', 'AA', 'cocap.NIQSZK', 'co.QMIP_ne') => ('-d', 'T', 'cocap.NIQSZK', 'co.QMIP_ne')
('-d', 'AA', 'cocap.NIQSZK', 'co.QMIP_ne') => ('-d', 'EA', 'cocap.NIQSZK', 'co.QMIP_ne')
('-d', 'AA', 'cocap.NIQSZK', 'QMIP_ne') => ('-d', 'T', 'cocap.NIQSZK', 'QMIP_ne')
('-d', 'AA', 'cocap.NIQSZK', 'QMIP_ne') => ('-d', 'EA', 'cocap.NIQSZK', 'QMIP_ne')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_ne') => ('-d', 'T', 'cocap.NIQSZK', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_ne') => ('-d', 'EA', 'cocap.NIQSZK', 'cocap.QMIP_ne')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.QIP') => ('-d', 'T', 'cocap.NIQSZK', 'cocap.QIP')
('-d', 'AA', 'cocap.NIQSZK', 'cocap.QIP') => ('-d', 'EA', 'cocap.NIQSZK', 'cocap.QIP')
('-d', 'AA', 'cocap.NIQSZK', 'QIP') => ('-d', 'T', 'cocap.NIQSZK', 'QIP')
('-d', 'AA', 'cocap.NIQSZK', 'QIP') => ('-d', 'EA', 'cocap.NIQSZK', 'QIP')
('-d', 'AA', 'cocap.NIQSZK', 'co.QIP') => ('-d', 'T', 'cocap.NIQSZK', 'co.QIP')
('-d', 'AA', 'cocap.NIQSZK', 'co.QIP') => ('-d', 'EA', 'cocap.NIQSZK', 'co.QIP')
('p', 'A', 'cocap.NIQSZK', 'QIP') => ('p', 'R', 'cocap.NIQSZK', 'QIP')
('p', 'A', 'cocap.NIQSZK', 'QIP') => ('p', 'AA', 'cocap.NIQSZK', 'QIP')
('p', 'A', 'cocap.NIQSZK', 'co.QIP') => ('p', 'R', 'cocap.NIQSZK', 'co.QIP')
('p', 'A', 'cocap.NIQSZK', 'co.QIP') => ('p', 'AA', 'cocap.NIQSZK', 'co.QIP')
('p', 'A', 'cocap.NIQSZK', 'cocap.QIP') => ('p', 'R', 'cocap.NIQSZK', 'cocap.QIP')
('p', 'A', 'cocap.NIQSZK', 'cocap.QIP') => ('p', 'AA', 'cocap.NIQSZK', 'cocap.QIP')
('p', 'A', 'cocap.NIQSZK', 'co.QMIP_le') => ('p', 'R', 'cocap.NIQSZK', 'co.QMIP_le')
('p', 'A', 'cocap.NIQSZK', 'co.QMIP_le') => ('p', 'AA', 'cocap.NIQSZK', 'co.QMIP_le')
('p', 'A', 'cocap.NIQSZK', 'QMIP_le') => ('p', 'R', 'cocap.NIQSZK', 'QMIP_le')
('p', 'A', 'cocap.NIQSZK', 'QMIP_le') => ('p', 'AA', 'cocap.NIQSZK', 'QMIP_le')
('p', 'A', 'cocap.NIQSZK', 'cocap.QMIP_le') => ('p', 'R', 'cocap.NIQSZK', 'cocap.QMIP_le')
('p', 'A', 'cocap.NIQSZK', 'cocap.QMIP_le') => ('p', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_le')
('p', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_le') => ('p', 'T', 'cocap.NIQSZK', 'cocap.QMIP_le')
('p', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_le') => ('p', 'EA', 'cocap.NIQSZK', 'cocap.QMIP_le')
('p', 'AA', 'cocap.NIQSZK', 'co.QMIP_le') => ('p', 'T', 'cocap.NIQSZK', 'co.QMIP_le')
('p', 'AA', 'cocap.NIQSZK', 'co.QMIP_le') => ('p', 'EA', 'cocap.NIQSZK', 'co.QMIP_le')
('p', 'AA', 'cocap.NIQSZK', 'QMIP_le') => ('p', 'T', 'cocap.NIQSZK', 'QMIP_le')
('p', 'AA', 'cocap.NIQSZK', 'QMIP_le') => ('p', 'EA', 'cocap.NIQSZK', 'QMIP_le')
('p', 'A', 'cocap.NIQSZK', 'cocap.QMIP_ne') => ('p', 'R', 'cocap.NIQSZK', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NIQSZK', 'cocap.QMIP_ne') => ('p', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_ne')
('p', 'A', 'cocap.NIQSZK', 'QMIP_ne') => ('p', 'R', 'cocap.NIQSZK', 'QMIP_ne')
('p', 'A', 'cocap.NIQSZK', 'QMIP_ne') => ('p', 'AA', 'cocap.NIQSZK', 'QMIP_ne')
('p', 'A', 'cocap.NIQSZK', 'co.QMIP_ne') => ('p', 'R', 'cocap.NIQSZK', 'co.QMIP_ne')
('p', 'A', 'cocap.NIQSZK', 'co.QMIP_ne') => ('p', 'AA', 'cocap.NIQSZK', 'co.QMIP_ne')
('p', 'AA', 'cocap.NIQSZK', 'co.QMIP_ne') => ('p', 'T', 'cocap.NIQSZK', 'co.QMIP_ne')
('p', 'AA', 'cocap.NIQSZK', 'co.QMIP_ne') => ('p', 'EA', 'cocap.NIQSZK', 'co.QMIP_ne')
('p', 'AA', 'cocap.NIQSZK', 'QMIP_ne') => ('p', 'T', 'cocap.NIQSZK', 'QMIP_ne')
('p', 'AA', 'cocap.NIQSZK', 'QMIP_ne') => ('p', 'EA', 'cocap.NIQSZK', 'QMIP_ne')
('p', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_ne') => ('p', 'T', 'cocap.NIQSZK', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.NIQSZK', 'cocap.QMIP_ne') => ('p', 'EA', 'cocap.NIQSZK', 'cocap.QMIP_ne')
('p', 'AA', 'cocap.NIQSZK', 'cocap.QIP') => ('p', 'T', 'cocap.NIQSZK', 'cocap.QIP')
('p', 'AA', 'cocap.NIQSZK', 'cocap.QIP') => ('p', 'EA', 'cocap.NIQSZK', 'cocap.QIP')
('p', 'AA', 'cocap.NIQSZK', 'QIP') => ('p', 'T', 'cocap.NIQSZK', 'QIP')
('p', 'AA', 'cocap.NIQSZK', 'QIP') => ('p', 'EA', 'cocap.NIQSZK', 'QIP')
('p', 'AA', 'cocap.NIQSZK', 'co.QIP') => ('p', 'T', 'cocap.NIQSZK', 'co.QIP')
('p', 'AA', 'cocap.NIQSZK', 'co.QIP') => ('p', 'EA', 'cocap.NIQSZK', 'co.QIP')
('-d', 'A', 'cocap.NIQSZK', 'PSPACE/poly') => ('-d', 'R', 'cocap.NIQSZK', 'PSPACE/poly')
('-d', 'A', 'cocap.NIQSZK', 'PSPACE/poly') => ('-d', 'AA', 'cocap.NIQSZK', 'PSPACE/poly')
('-d', 'AA', 'cocap.NIQSZK', 'PSPACE/poly') => ('-d', 'T', 'cocap.NIQSZK', 'PSPACE/poly')
('-d', 'AA', 'cocap.NIQSZK', 'PSPACE/poly') => ('-d', 'EA', 'cocap.NIQSZK', 'PSPACE/poly')
('p', 'A', 'cocap.NIQSZK', 'PSPACE/poly') => ('p', 'R', 'cocap.NIQSZK', 'PSPACE/poly')
('p', 'A', 'cocap.NIQSZK', 'PSPACE/poly') => ('p', 'AA', 'cocap.NIQSZK', 'PSPACE/poly')
('p', 'AA', 'cocap.NIQSZK', 'PSPACE/poly') => ('p', 'T', 'cocap.NIQSZK', 'PSPACE/poly')
('p', 'AA', 'cocap.NIQSZK', 'PSPACE/poly') => ('p', 'EA', 'cocap.NIQSZK', 'PSPACE/poly')
('-d', 'A', 'cocap.NIQSZK', 'PSPACE') => ('-d', 'R', 'cocap.NIQSZK', 'PSPACE')
('-d', 'A', 'cocap.NIQSZK', 'PSPACE') => ('-d', 'AA', 'cocap.NIQSZK', 'PSPACE')
('-d', 'AA', 'cocap.NIQSZK', 'PSPACE') => ('-d', 'T', 'cocap.NIQSZK', 'PSPACE')
('-d', 'AA', 'cocap.NIQSZK', 'PSPACE') => ('-d', 'EA', 'cocap.NIQSZK', 'PSPACE')
('p', 'A', 'cocap.NIQSZK', 'PSPACE') => ('p', 'R', 'cocap.NIQSZK', 'PSPACE')
('p', 'A', 'cocap.NIQSZK', 'PSPACE') => ('p', 'AA', 'cocap.NIQSZK', 'PSPACE')
('p', 'AA', 'cocap.NIQSZK', 'PSPACE') => ('p', 'T', 'cocap.NIQSZK', 'PSPACE')
('p', 'AA', 'cocap.NIQSZK', 'PSPACE') => ('p', 'EA', 'cocap.NIQSZK', 'PSPACE')
('p', 'AA', 'cocap.NIQSZK', 'QSZK') => ('-d', 'AA', 'cocap.NIQSZK', 'QSZK')
('p', 'AA', 'cocap.NIQSZK', 'QSZK') => ('p', 'T', 'cocap.NIQSZK', 'QSZK')
('p', 'AA', 'cocap.NIQSZK', 'QSZK') => ('p', 'EA', 'cocap.NIQSZK', 'QSZK')
('p', 'EA', 'cocap.NIQSZK', 'QSZK') => ('-d', 'EA', 'cocap.NIQSZK', 'QSZK')
('p', 'T', 'cocap.NIQSZK', 'QSZK') => ('-d', 'T', 'cocap.NIQSZK', 'QSZK')
('p', 'R', 'cocap.NIQSZK', 'QSZK') => ('-d', 'R', 'cocap.NIQSZK', 'QSZK')
('-d', 'A', 'co.NIQSZK', 'ALL') => ('-d', 'R', 'co.NIQSZK', 'ALL')
('-d', 'A', 'co.NIQSZK', 'ALL') => ('-d', 'AA', 'co.NIQSZK', 'ALL')
('-d', 'A', 'NIQSZK', 'ALL') => ('-d', 'R', 'NIQSZK', 'ALL')
('-d', 'A', 'NIQSZK', 'ALL') => ('-d', 'AA', 'NIQSZK', 'ALL')
('-d', 'AA', 'NIQSZK', 'ALL') => ('-d', 'T', 'NIQSZK', 'ALL')
('-d', 'AA', 'NIQSZK', 'ALL') => ('-d', 'EA', 'NIQSZK', 'ALL')
('-d', 'AA', 'co.NIQSZK', 'ALL') => ('-d', 'T', 'co.NIQSZK', 'ALL')
('-d', 'AA', 'co.NIQSZK', 'ALL') => ('-d', 'EA', 'co.NIQSZK', 'ALL')
('p', 'A', 'co.NIQSZK', 'ALL') => ('p', 'R', 'co.NIQSZK', 'ALL')
('p', 'A', 'co.NIQSZK', 'ALL') => ('p', 'AA', 'co.NIQSZK', 'ALL')
('p', 'A', 'NIQSZK', 'ALL') => ('p', 'R', 'NIQSZK', 'ALL')
('p', 'A', 'NIQSZK', 'ALL') => ('p', 'AA', 'NIQSZK', 'ALL')
('p', 'AA', 'NIQSZK', 'ALL') => ('p', 'T', 'NIQSZK', 'ALL')
('p', 'AA', 'NIQSZK', 'ALL') => ('p', 'EA', 'NIQSZK', 'ALL')
('p', 'AA', 'co.NIQSZK', 'ALL') => ('p', 'T', 'co.NIQSZK', 'ALL')
('p', 'AA', 'co.NIQSZK', 'ALL') => ('p', 'EA', 'co.NIQSZK', 'ALL')
('-d', 'A', 'co.NIQSZK', 'EXP_plo') => ('-d', 'R', 'co.NIQSZK', 'EXP_plo')
('-d', 'A', 'co.NIQSZK', 'EXP_plo') => ('-d', 'AA', 'co.NIQSZK', 'EXP_plo')
('-d', 'A', 'NIQSZK', 'EXP_plo') => ('-d', 'R', 'NIQSZK', 'EXP_plo')
('-d', 'A', 'NIQSZK', 'EXP_plo') => ('-d', 'AA', 'NIQSZK', 'EXP_plo')
('-d', 'A', 'NIQSZK', 'cocap.NEXP_plo') => ('-d', 'R', 'NIQSZK', 'cocap.NEXP_plo')
('-d', 'A', 'NIQSZK', 'cocap.NEXP_plo') => ('-d', 'AA', 'NIQSZK', 'cocap.NEXP_plo')
('-d', 'A', 'co.NIQSZK', 'cocap.NEXP_plo') => ('-d', 'R', 'co.NIQSZK', 'cocap.NEXP_plo')
('-d', 'A', 'co.NIQSZK', 'cocap.NEXP_plo') => ('-d', 'AA', 'co.NIQSZK', 'cocap.NEXP_plo')
('-d', 'A', 'co.NIQSZK', 'co.NEXP') => ('-d', 'R', 'co.NIQSZK', 'co.NEXP')
('-d', 'A', 'co.NIQSZK', 'co.NEXP') => ('-d', 'AA', 'co.NIQSZK', 'co.NEXP')
('-d', 'A', 'NIQSZK', 'NEXP') => ('-d', 'R', 'NIQSZK', 'NEXP')
('-d', 'A', 'NIQSZK', 'NEXP') => ('-d', 'AA', 'NIQSZK', 'NEXP')
('-d', 'A', 'NIQSZK', 'R') => ('-d', 'R', 'NIQSZK', 'R')
('-d', 'A', 'NIQSZK', 'R') => ('-d', 'AA', 'NIQSZK', 'R')
('-d', 'A', 'co.NIQSZK', 'R') => ('-d', 'R', 'co.NIQSZK', 'R')
('-d', 'A', 'co.NIQSZK', 'R') => ('-d', 'AA', 'co.NIQSZK', 'R')
('-d', 'A', 'co.NIQSZK', 'RE') => ('-d', 'R', 'co.NIQSZK', 'RE')
('-d', 'A', 'co.NIQSZK', 'RE') => ('-d', 'AA', 'co.NIQSZK', 'RE')
('-d', 'A', 'NIQSZK', 'co.RE') => ('-d', 'R', 'NIQSZK', 'co.RE')
('-d', 'A', 'NIQSZK', 'co.RE') => ('-d', 'AA', 'NIQSZK', 'co.RE')
('-d', 'AA', 'NIQSZK', 'co.RE') => ('-d', 'T', 'NIQSZK', 'co.RE')
('-d', 'AA', 'NIQSZK', 'co.RE') => ('-d', 'EA', 'NIQSZK', 'co.RE')
('-d', 'AA', 'co.NIQSZK', 'RE') => ('-d', 'T', 'co.NIQSZK', 'RE')
('-d', 'AA', 'co.NIQSZK', 'RE') => ('-d', 'EA', 'co.NIQSZK', 'RE')
('-d', 'A', 'co.NIQSZK', 'co.RE') => ('-d', 'R', 'co.NIQSZK', 'co.RE')
('-d', 'A', 'co.NIQSZK', 'co.RE') => ('-d', 'AA', 'co.NIQSZK', 'co.RE')
('-d', 'A', 'NIQSZK', 'RE') => ('-d', 'R', 'NIQSZK', 'RE')
('-d', 'A', 'NIQSZK', 'RE') => ('-d', 'AA', 'NIQSZK', 'RE')
('-d', 'AA', 'NIQSZK', 'RE') => ('-d', 'T', 'NIQSZK', 'RE')
('-d', 'AA', 'NIQSZK', 'RE') => ('-d', 'EA', 'NIQSZK', 'RE')
('-d', 'AA', 'co.NIQSZK', 'co.RE') => ('-d', 'T', 'co.NIQSZK', 'co.RE')
('-d', 'AA', 'co.NIQSZK', 'co.RE') => ('-d', 'EA', 'co.NIQSZK', 'co.RE')
('-d', 'AA', 'co.NIQSZK', 'R') => ('-d', 'T', 'co.NIQSZK', 'R')
('-d', 'AA', 'co.NIQSZK', 'R') => ('-d', 'EA', 'co.NIQSZK', 'R')
('-d', 'AA', 'NIQSZK', 'R') => ('-d', 'T', 'NIQSZK', 'R')
('-d', 'AA', 'NIQSZK', 'R') => ('-d', 'EA', 'NIQSZK', 'R')
('-d', 'A', 'NIQSZK', 'NEXP/poly') => ('-d', 'R', 'NIQSZK', 'NEXP/poly')
('-d', 'A', 'NIQSZK', 'NEXP/poly') => ('-d', 'AA', 'NIQSZK', 'NEXP/poly')
('-d', 'A', 'co.NIQSZK', 'NEXP/poly') => ('-d', 'R', 'co.NIQSZK', 'NEXP/poly')
('-d', 'A', 'co.NIQSZK', 'NEXP/poly') => ('-d', 'AA', 'co.NIQSZK', 'NEXP/poly')
('-d', 'AA', 'co.NIQSZK', 'NEXP/poly') => ('-d', 'T', 'co.NIQSZK', 'NEXP/poly')
('-d', 'AA', 'co.NIQSZK', 'NEXP/poly') => ('-d', 'EA', 'co.NIQSZK', 'NEXP/poly')
('-d', 'AA', 'NIQSZK', 'NEXP/poly') => ('-d', 'T', 'NIQSZK', 'NEXP/poly')
('-d', 'AA', 'NIQSZK', 'NEXP/poly') => ('-d', 'EA', 'NIQSZK', 'NEXP/poly')
('-d', 'AA', 'NIQSZK', 'NEXP') => ('-d', 'T', 'NIQSZK', 'NEXP')
('-d', 'AA', 'NIQSZK', 'NEXP') => ('-d', 'EA', 'NIQSZK', 'NEXP')
('-d', 'AA', 'co.NIQSZK', 'co.NEXP') => ('-d', 'T', 'co.NIQSZK', 'co.NEXP')
('-d', 'AA', 'co.NIQSZK', 'co.NEXP') => ('-d', 'EA', 'co.NIQSZK', 'co.NEXP')
('-d', 'A', 'co.NIQSZK', 'NEXP') => ('-d', 'R', 'co.NIQSZK', 'NEXP')
('-d', 'A', 'co.NIQSZK', 'NEXP') => ('-d', 'AA', 'co.NIQSZK', 'NEXP')
('-d', 'A', 'NIQSZK', 'co.NEXP') => ('-d', 'R', 'NIQSZK', 'co.NEXP')
('-d', 'A', 'NIQSZK', 'co.NEXP') => ('-d', 'AA', 'NIQSZK', 'co.NEXP')
('-d', 'AA', 'NIQSZK', 'co.NEXP') => ('-d', 'T', 'NIQSZK', 'co.NEXP')
('-d', 'AA', 'NIQSZK', 'co.NEXP') => ('-d', 'EA', 'NIQSZK', 'co.NEXP')
('-d', 'AA', 'co.NIQSZK', 'NEXP') => ('-d', 'T', 'co.NIQSZK', 'NEXP')
('-d', 'AA', 'co.NIQSZK', 'NEXP') => ('-d', 'EA', 'co.NIQSZK', 'NEXP')
('-d', 'A', 'co.NIQSZK', 'cocap.NEXP') => ('-d', 'R', 'co.NIQSZK', 'cocap.NEXP')
('-d', 'A', 'co.NIQSZK', 'cocap.NEXP') => ('-d', 'AA', 'co.NIQSZK', 'cocap.NEXP')
('-d', 'A', 'NIQSZK', 'cocap.NEXP') => ('-d', 'R', 'NIQSZK', 'cocap.NEXP')
('-d', 'A', 'NIQSZK', 'cocap.NEXP') => ('-d', 'AA', 'NIQSZK', 'cocap.NEXP')
('-d', 'AA', 'NIQSZK', 'cocap.NEXP') => ('-d', 'T', 'NIQSZK', 'cocap.NEXP')
('-d', 'AA', 'NIQSZK', 'cocap.NEXP') => ('-d', 'EA', 'NIQSZK', 'cocap.NEXP')
('-d', 'AA', 'co.NIQSZK', 'cocap.NEXP') => ('-d', 'T', 'co.NIQSZK', 'cocap.NEXP')
('-d', 'AA', 'co.NIQSZK', 'cocap.NEXP') => ('-d', 'EA', 'co.NIQSZK', 'cocap.NEXP')
('-d', 'A', 'co.NIQSZK', 'co.NEXP_plo') => ('-d', 'R', 'co.NIQSZK', 'co.NEXP_plo')
('-d', 'A', 'co.NIQSZK', 'co.NEXP_plo') => ('-d', 'AA', 'co.NIQSZK', 'co.NEXP_plo')
('-d', 'A', 'NIQSZK', 'NEXP_plo') => ('-d', 'R', 'NIQSZK', 'NEXP_plo')
('-d', 'A', 'NIQSZK', 'NEXP_plo') => ('-d', 'AA', 'NIQSZK', 'NEXP_plo')
('-d', 'A', 'NIQSZK', 'AH') => ('-d', 'R', 'NIQSZK', 'AH')
('-d', 'A', 'NIQSZK', 'AH') => ('-d', 'AA', 'NIQSZK', 'AH')
('-d', 'A', 'co.NIQSZK', 'AH') => ('-d', 'R', 'co.NIQSZK', 'AH')
('-d', 'A', 'co.NIQSZK', 'AH') => ('-d', 'AA', 'co.NIQSZK', 'AH')
('-d', 'AA', 'co.NIQSZK', 'AH') => ('-d', 'T', 'co.NIQSZK', 'AH')
('-d', 'AA', 'co.NIQSZK', 'AH') => ('-d', 'EA', 'co.NIQSZK', 'AH')
('-d', 'AA', 'NIQSZK', 'AH') => ('-d', 'T', 'NIQSZK', 'AH')
('-d', 'AA', 'NIQSZK', 'AH') => ('-d', 'EA', 'NIQSZK', 'AH')
('-d', 'A', 'NIQSZK', 'AH_plo') => ('-d', 'R', 'NIQSZK', 'AH_plo')
('-d', 'A', 'NIQSZK', 'AH_plo') => ('-d', 'AA', 'NIQSZK', 'AH_plo')
('-d', 'A', 'co.NIQSZK', 'co.AH_plo') => ('-d', 'R', 'co.NIQSZK', 'co.AH_plo')
('-d', 'A', 'co.NIQSZK', 'co.AH_plo') => ('-d', 'AA', 'co.NIQSZK', 'co.AH_plo')
('-d', 'AA', 'co.NIQSZK', 'co.AH_plo') => ('-d', 'T', 'co.NIQSZK', 'co.AH_plo')
('-d', 'AA', 'co.NIQSZK', 'co.AH_plo') => ('-d', 'EA', 'co.NIQSZK', 'co.AH_plo')
('-d', 'AA', 'NIQSZK', 'AH_plo') => ('-d', 'T', 'NIQSZK', 'AH_plo')
('-d', 'AA', 'NIQSZK', 'AH_plo') => ('-d', 'EA', 'NIQSZK', 'AH_plo')
('-d', 'AA', 'NIQSZK', 'NEXP_plo') => ('-d', 'T', 'NIQSZK', 'NEXP_plo')
('-d', 'AA', 'NIQSZK', 'NEXP_plo') => ('-d', 'EA', 'NIQSZK', 'NEXP_plo')
('-d', 'AA', 'co.NIQSZK', 'co.NEXP_plo') => ('-d', 'T', 'co.NIQSZK', 'co.NEXP_plo')
('-d', 'AA', 'co.NIQSZK', 'co.NEXP_plo') => ('-d', 'EA', 'co.NIQSZK', 'co.NEXP_plo')
('-d', 'A', 'co.NIQSZK', 'cocap.AH_plo') => ('-d', 'R', 'co.NIQSZK', 'cocap.AH_plo')
('-d', 'A', 'co.NIQSZK', 'cocap.AH_plo') => ('-d', 'AA', 'co.NIQSZK', 'cocap.AH_plo')
('-d', 'A', 'NIQSZK', 'cocap.AH_plo') => ('-d', 'R', 'NIQSZK', 'cocap.AH_plo')
('-d', 'A', 'NIQSZK', 'cocap.AH_plo') => ('-d', 'AA', 'NIQSZK', 'cocap.AH_plo')
('-d', 'A', 'NIQSZK', 'co.AH_plo') => ('-d', 'R', 'NIQSZK', 'co.AH_plo')
('-d', 'A', 'NIQSZK', 'co.AH_plo') => ('-d', 'AA', 'NIQSZK', 'co.AH_plo')
('-d', 'A', 'co.NIQSZK', 'AH_plo') => ('-d', 'R', 'co.NIQSZK', 'AH_plo')
('-d', 'A', 'co.NIQSZK', 'AH_plo') => ('-d', 'AA', 'co.NIQSZK', 'AH_plo')
('-d', 'AA', 'co.NIQSZK', 'AH_plo') => ('-d', 'T', 'co.NIQSZK', 'AH_plo')
('-d', 'AA', 'co.NIQSZK', 'AH_plo') => ('-d', 'EA', 'co.NIQSZK', 'AH_plo')
('-d', 'AA', 'NIQSZK', 'co.AH_plo') => ('-d', 'T', 'NIQSZK', 'co.AH_plo')
('-d', 'AA', 'NIQSZK', 'co.AH_plo') => ('-d', 'EA', 'NIQSZK', 'co.AH_plo')
('-d', 'AA', 'NIQSZK', 'cocap.AH_plo') => ('-d', 'T', 'NIQSZK', 'cocap.AH_plo')
('-d', 'AA', 'NIQSZK', 'cocap.AH_plo') => ('-d', 'EA', 'NIQSZK', 'cocap.AH_plo')
('-d', 'AA', 'co.NIQSZK', 'cocap.AH_plo') => ('-d', 'T', 'co.NIQSZK', 'cocap.AH_plo')
('-d', 'AA', 'co.NIQSZK', 'cocap.AH_plo') => ('-d', 'EA', 'co.NIQSZK', 'cocap.AH_plo')
('-d', 'A', 'co.NIQSZK', 'NEXP_plo') => ('-d', 'R', 'co.NIQSZK', 'NEXP_plo')
('-d', 'A', 'co.NIQSZK', 'NEXP_plo') => ('-d', 'AA', 'co.NIQSZK', 'NEXP_plo')
('-d', 'A', 'NIQSZK', 'co.NEXP_plo') => ('-d', 'R', 'NIQSZK', 'co.NEXP_plo')
('-d', 'A', 'NIQSZK', 'co.NEXP_plo') => ('-d', 'AA', 'NIQSZK', 'co.NEXP_plo')
('-d', 'AA', 'NIQSZK', 'co.NEXP_plo') => ('-d', 'T', 'NIQSZK', 'co.NEXP_plo')
('-d', 'AA', 'NIQSZK', 'co.NEXP_plo') => ('-d', 'EA', 'NIQSZK', 'co.NEXP_plo')
('-d', 'AA', 'co.NIQSZK', 'NEXP_plo') => ('-d', 'T', 'co.NIQSZK', 'NEXP_plo')
('-d', 'AA', 'co.NIQSZK', 'NEXP_plo') => ('-d', 'EA', 'co.NIQSZK', 'NEXP_plo')
('-d', 'AA', 'co.NIQSZK', 'cocap.NEXP_plo') => ('-d', 'T', 'co.NIQSZK', 'cocap.NEXP_plo')
('-d', 'AA', 'co.NIQSZK', 'cocap.NEXP_plo') => ('-d', 'EA', 'co.NIQSZK', 'cocap.NEXP_plo')
('-d', 'AA', 'NIQSZK', 'cocap.NEXP_plo') => ('-d', 'T', 'NIQSZK', 'cocap.NEXP_plo')
('-d', 'AA', 'NIQSZK', 'cocap.NEXP_plo') => ('-d', 'EA', 'NIQSZK', 'cocap.NEXP_plo')
('-d', 'A', 'NIQSZK', 'EXP') => ('-d', 'R', 'NIQSZK', 'EXP')
('-d', 'A', 'NIQSZK', 'EXP') => ('-d', 'AA', 'NIQSZK', 'EXP')
('-d', 'A', 'co.NIQSZK', 'EXP') => ('-d', 'R', 'co.NIQSZK', 'EXP')
('-d', 'A', 'co.NIQSZK', 'EXP') => ('-d', 'AA', 'co.NIQSZK', 'EXP')
('-d', 'AA', 'co.NIQSZK', 'EXP') => ('-d', 'T', 'co.NIQSZK', 'EXP')
('-d', 'AA', 'co.NIQSZK', 'EXP') => ('-d', 'EA', 'co.NIQSZK', 'EXP')
('-d', 'AA', 'NIQSZK', 'EXP') => ('-d', 'T', 'NIQSZK', 'EXP')
('-d', 'AA', 'NIQSZK', 'EXP') => ('-d', 'EA', 'NIQSZK', 'EXP')
('-d', 'AA', 'NIQSZK', 'EXP_plo') => ('-d', 'T', 'NIQSZK', 'EXP_plo')
('-d', 'AA', 'NIQSZK', 'EXP_plo') => ('-d', 'EA', 'NIQSZK', 'EXP_plo')
('-d', 'AA', 'co.NIQSZK', 'EXP_plo') => ('-d', 'T', 'co.NIQSZK', 'EXP_plo')
('-d', 'AA', 'co.NIQSZK', 'EXP_plo') => ('-d', 'EA', 'co.NIQSZK', 'EXP_plo')
('p', 'A', 'co.NIQSZK', 'EXP_plo') => ('p', 'R', 'co.NIQSZK', 'EXP_plo')
('p', 'A', 'co.NIQSZK', 'EXP_plo') => ('p', 'AA', 'co.NIQSZK', 'EXP_plo')
('p', 'A', 'NIQSZK', 'EXP_plo') => ('p', 'R', 'NIQSZK', 'EXP_plo')
('p', 'A', 'NIQSZK', 'EXP_plo') => ('p', 'AA', 'NIQSZK', 'EXP_plo')
('p', 'A', 'NIQSZK', 'cocap.NEXP_plo') => ('p', 'R', 'NIQSZK', 'cocap.NEXP_plo')
('p', 'A', 'NIQSZK', 'cocap.NEXP_plo') => ('p', 'AA', 'NIQSZK', 'cocap.NEXP_plo')
('p', 'A', 'co.NIQSZK', 'cocap.NEXP_plo') => ('p', 'R', 'co.NIQSZK', 'cocap.NEXP_plo')
('p', 'A', 'co.NIQSZK', 'cocap.NEXP_plo') => ('p', 'AA', 'co.NIQSZK', 'cocap.NEXP_plo')
('p', 'A', 'co.NIQSZK', 'co.NEXP') => ('p', 'R', 'co.NIQSZK', 'co.NEXP')
('p', 'A', 'co.NIQSZK', 'co.NEXP') => ('p', 'AA', 'co.NIQSZK', 'co.NEXP')
('p', 'A', 'NIQSZK', 'NEXP') => ('p', 'R', 'NIQSZK', 'NEXP')
('p', 'A', 'NIQSZK', 'NEXP') => ('p', 'AA', 'NIQSZK', 'NEXP')
('p', 'A', 'NIQSZK', 'R') => ('p', 'R', 'NIQSZK', 'R')
('p', 'A', 'NIQSZK', 'R') => ('p', 'AA', 'NIQSZK', 'R')
('p', 'A', 'co.NIQSZK', 'R') => ('p', 'R', 'co.NIQSZK', 'R')
('p', 'A', 'co.NIQSZK', 'R') => ('p', 'AA', 'co.NIQSZK', 'R')
('p', 'A', 'co.NIQSZK', 'RE') => ('p', 'R', 'co.NIQSZK', 'RE')
('p', 'A', 'co.NIQSZK', 'RE') => ('p', 'AA', 'co.NIQSZK', 'RE')
('p', 'A', 'NIQSZK', 'co.RE') => ('p', 'R', 'NIQSZK', 'co.RE')
('p', 'A', 'NIQSZK', 'co.RE') => ('p', 'AA', 'NIQSZK', 'co.RE')
('p', 'AA', 'NIQSZK', 'co.RE') => ('p', 'T', 'NIQSZK', 'co.RE')
('p', 'AA', 'NIQSZK', 'co.RE') => ('p', 'EA', 'NIQSZK', 'co.RE')
('p', 'AA', 'co.NIQSZK', 'RE') => ('p', 'T', 'co.NIQSZK', 'RE')
('p', 'AA', 'co.NIQSZK', 'RE') => ('p', 'EA', 'co.NIQSZK', 'RE')
('p', 'A', 'co.NIQSZK', 'co.RE') => ('p', 'R', 'co.NIQSZK', 'co.RE')
('p', 'A', 'co.NIQSZK', 'co.RE') => ('p', 'AA', 'co.NIQSZK', 'co.RE')
('p', 'A', 'NIQSZK', 'RE') => ('p', 'R', 'NIQSZK', 'RE')
('p', 'A', 'NIQSZK', 'RE') => ('p', 'AA', 'NIQSZK', 'RE')
('p', 'AA', 'NIQSZK', 'RE') => ('p', 'T', 'NIQSZK', 'RE')
('p', 'AA', 'NIQSZK', 'RE') => ('p', 'EA', 'NIQSZK', 'RE')
('p', 'AA', 'NIQSZK', 'R') => ('p', 'T', 'NIQSZK', 'R')
('p', 'AA', 'NIQSZK', 'R') => ('p', 'EA', 'NIQSZK', 'R')
('p', 'AA', 'co.NIQSZK', 'R') => ('p', 'T', 'co.NIQSZK', 'R')
('p', 'AA', 'co.NIQSZK', 'R') => ('p', 'EA', 'co.NIQSZK', 'R')
('p', 'AA', 'co.NIQSZK', 'co.RE') => ('p', 'T', 'co.NIQSZK', 'co.RE')
('p', 'AA', 'co.NIQSZK', 'co.RE') => ('p', 'EA', 'co.NIQSZK', 'co.RE')
('p', 'A', 'NIQSZK', 'NEXP/poly') => ('p', 'R', 'NIQSZK', 'NEXP/poly')
('p', 'A', 'NIQSZK', 'NEXP/poly') => ('p', 'AA', 'NIQSZK', 'NEXP/poly')
('p', 'A', 'co.NIQSZK', 'NEXP/poly') => ('p', 'R', 'co.NIQSZK', 'NEXP/poly')
('p', 'A', 'co.NIQSZK', 'NEXP/poly') => ('p', 'AA', 'co.NIQSZK', 'NEXP/poly')
('p', 'AA', 'co.NIQSZK', 'NEXP/poly') => ('p', 'T', 'co.NIQSZK', 'NEXP/poly')
('p', 'AA', 'co.NIQSZK', 'NEXP/poly') => ('p', 'EA', 'co.NIQSZK', 'NEXP/poly')
('p', 'AA', 'NIQSZK', 'NEXP/poly') => ('p', 'T', 'NIQSZK', 'NEXP/poly')
('p', 'AA', 'NIQSZK', 'NEXP/poly') => ('p', 'EA', 'NIQSZK', 'NEXP/poly')
('p', 'AA', 'NIQSZK', 'NEXP') => ('p', 'T', 'NIQSZK', 'NEXP')
('p', 'AA', 'NIQSZK', 'NEXP') => ('p', 'EA', 'NIQSZK', 'NEXP')
('p', 'AA', 'co.NIQSZK', 'co.NEXP') => ('p', 'T', 'co.NIQSZK', 'co.NEXP')
('p', 'AA', 'co.NIQSZK', 'co.NEXP') => ('p', 'EA', 'co.NIQSZK', 'co.NEXP')
('p', 'A', 'co.NIQSZK', 'NEXP') => ('p', 'R', 'co.NIQSZK', 'NEXP')
('p', 'A', 'co.NIQSZK', 'NEXP') => ('p', 'AA', 'co.NIQSZK', 'NEXP')
('p', 'A', 'co.NIQSZK', 'cocap.NEXP') => ('p', 'R', 'co.NIQSZK', 'cocap.NEXP')
('p', 'A', 'co.NIQSZK', 'cocap.NEXP') => ('p', 'AA', 'co.NIQSZK', 'cocap.NEXP')
('p', 'A', 'NIQSZK', 'cocap.NEXP') => ('p', 'R', 'NIQSZK', 'cocap.NEXP')
('p', 'A', 'NIQSZK', 'cocap.NEXP') => ('p', 'AA', 'NIQSZK', 'cocap.NEXP')
('p', 'A', 'NIQSZK', 'co.NEXP') => ('p', 'R', 'NIQSZK', 'co.NEXP')
('p', 'A', 'NIQSZK', 'co.NEXP') => ('p', 'AA', 'NIQSZK', 'co.NEXP')
('p', 'AA', 'NIQSZK', 'co.NEXP') => ('p', 'T', 'NIQSZK', 'co.NEXP')
('p', 'AA', 'NIQSZK', 'co.NEXP') => ('p', 'EA', 'NIQSZK', 'co.NEXP')
('p', 'AA', 'NIQSZK', 'cocap.NEXP') => ('p', 'T', 'NIQSZK', 'cocap.NEXP')
('p', 'AA', 'NIQSZK', 'cocap.NEXP') => ('p', 'EA', 'NIQSZK', 'cocap.NEXP')
('p', 'AA', 'co.NIQSZK', 'cocap.NEXP') => ('p', 'T', 'co.NIQSZK', 'cocap.NEXP')
('p', 'AA', 'co.NIQSZK', 'cocap.NEXP') => ('p', 'EA', 'co.NIQSZK', 'cocap.NEXP')
('p', 'AA', 'co.NIQSZK', 'NEXP') => ('p', 'T', 'co.NIQSZK', 'NEXP')
('p', 'AA', 'co.NIQSZK', 'NEXP') => ('p', 'EA', 'co.NIQSZK', 'NEXP')
('p', 'A', 'co.NIQSZK', 'co.NEXP_plo') => ('p', 'R', 'co.NIQSZK', 'co.NEXP_plo')
('p', 'A', 'co.NIQSZK', 'co.NEXP_plo') => ('p', 'AA', 'co.NIQSZK', 'co.NEXP_plo')
('p', 'A', 'NIQSZK', 'NEXP_plo') => ('p', 'R', 'NIQSZK', 'NEXP_plo')
('p', 'A', 'NIQSZK', 'NEXP_plo') => ('p', 'AA', 'NIQSZK', 'NEXP_plo')
('p', 'A', 'NIQSZK', 'AH') => ('p', 'R', 'NIQSZK', 'AH')
('p', 'A', 'NIQSZK', 'AH') => ('p', 'AA', 'NIQSZK', 'AH')
('p', 'A', 'co.NIQSZK', 'AH') => ('p', 'R', 'co.NIQSZK', 'AH')
('p', 'A', 'co.NIQSZK', 'AH') => ('p', 'AA', 'co.NIQSZK', 'AH')
('p', 'AA', 'co.NIQSZK', 'AH') => ('p', 'T', 'co.NIQSZK', 'AH')
('p', 'AA', 'co.NIQSZK', 'AH') => ('p', 'EA', 'co.NIQSZK', 'AH')
('p', 'AA', 'NIQSZK', 'AH') => ('p', 'T', 'NIQSZK', 'AH')
('p', 'AA', 'NIQSZK', 'AH') => ('p', 'EA', 'NIQSZK', 'AH')
('p', 'A', 'NIQSZK', 'AH_plo') => ('p', 'R', 'NIQSZK', 'AH_plo')
('p', 'A', 'NIQSZK', 'AH_plo') => ('p', 'AA', 'NIQSZK', 'AH_plo')
('p', 'A', 'co.NIQSZK', 'co.AH_plo') => ('p', 'R', 'co.NIQSZK', 'co.AH_plo')
('p', 'A', 'co.NIQSZK', 'co.AH_plo') => ('p', 'AA', 'co.NIQSZK', 'co.AH_plo')
('p', 'AA', 'co.NIQSZK', 'co.AH_plo') => ('p', 'T', 'co.NIQSZK', 'co.AH_plo')
('p', 'AA', 'co.NIQSZK', 'co.AH_plo') => ('p', 'EA', 'co.NIQSZK', 'co.AH_plo')
('p', 'AA', 'NIQSZK', 'AH_plo') => ('p', 'T', 'NIQSZK', 'AH_plo')
('p', 'AA', 'NIQSZK', 'AH_plo') => ('p', 'EA', 'NIQSZK', 'AH_plo')
('p', 'AA', 'NIQSZK', 'NEXP_plo') => ('p', 'T', 'NIQSZK', 'NEXP_plo')
('p', 'AA', 'NIQSZK', 'NEXP_plo') => ('p', 'EA', 'NIQSZK', 'NEXP_plo')
('p', 'AA', 'co.NIQSZK', 'co.NEXP_plo') => ('p', 'T', 'co.NIQSZK', 'co.NEXP_plo')
('p', 'AA', 'co.NIQSZK', 'co.NEXP_plo') => ('p', 'EA', 'co.NIQSZK', 'co.NEXP_plo')
('p', 'A', 'co.NIQSZK', 'cocap.AH_plo') => ('p', 'R', 'co.NIQSZK', 'cocap.AH_plo')
('p', 'A', 'co.NIQSZK', 'cocap.AH_plo') => ('p', 'AA', 'co.NIQSZK', 'cocap.AH_plo')
('p', 'A', 'NIQSZK', 'cocap.AH_plo') => ('p', 'R', 'NIQSZK', 'cocap.AH_plo')
('p', 'A', 'NIQSZK', 'cocap.AH_plo') => ('p', 'AA', 'NIQSZK', 'cocap.AH_plo')
('p', 'A', 'NIQSZK', 'co.AH_plo') => ('p', 'R', 'NIQSZK', 'co.AH_plo')
('p', 'A', 'NIQSZK', 'co.AH_plo') => ('p', 'AA', 'NIQSZK', 'co.AH_plo')
('p', 'A', 'co.NIQSZK', 'AH_plo') => ('p', 'R', 'co.NIQSZK', 'AH_plo')
('p', 'A', 'co.NIQSZK', 'AH_plo') => ('p', 'AA', 'co.NIQSZK', 'AH_plo')
('p', 'AA', 'co.NIQSZK', 'AH_plo') => ('p', 'T', 'co.NIQSZK', 'AH_plo')
('p', 'AA', 'co.NIQSZK', 'AH_plo') => ('p', 'EA', 'co.NIQSZK', 'AH_plo')
('p', 'AA', 'co.NIQSZK', 'cocap.AH_plo') => ('p', 'T', 'co.NIQSZK', 'cocap.AH_plo')
('p', 'AA', 'co.NIQSZK', 'cocap.AH_plo') => ('p', 'EA', 'co.NIQSZK', 'cocap.AH_plo')
('p', 'AA', 'NIQSZK', 'cocap.AH_plo') => ('p', 'T', 'NIQSZK', 'cocap.AH_plo')
('p', 'AA', 'NIQSZK', 'cocap.AH_plo') => ('p', 'EA', 'NIQSZK', 'cocap.AH_plo')
('p', 'AA', 'NIQSZK', 'co.AH_plo') => ('p', 'T', 'NIQSZK', 'co.AH_plo')
('p', 'AA', 'NIQSZK', 'co.AH_plo') => ('p', 'EA', 'NIQSZK', 'co.AH_plo')
('p', 'A', 'co.NIQSZK', 'NEXP_plo') => ('p', 'R', 'co.NIQSZK', 'NEXP_plo')
('p', 'A', 'co.NIQSZK', 'NEXP_plo') => ('p', 'AA', 'co.NIQSZK', 'NEXP_plo')
('p', 'A', 'NIQSZK', 'co.NEXP_plo') => ('p', 'R', 'NIQSZK', 'co.NEXP_plo')
('p', 'A', 'NIQSZK', 'co.NEXP_plo') => ('p', 'AA', 'NIQSZK', 'co.NEXP_plo')
('p', 'AA', 'NIQSZK', 'co.NEXP_plo') => ('p', 'T', 'NIQSZK', 'co.NEXP_plo')
('p', 'AA', 'NIQSZK', 'co.NEXP_plo') => ('p', 'EA', 'NIQSZK', 'co.NEXP_plo')
('p', 'AA', 'NIQSZK', 'cocap.NEXP_plo') => ('p', 'T', 'NIQSZK', 'cocap.NEXP_plo')
('p', 'AA', 'NIQSZK', 'cocap.NEXP_plo') => ('p', 'EA', 'NIQSZK', 'cocap.NEXP_plo')
('p', 'AA', 'co.NIQSZK', 'cocap.NEXP_plo') => ('p', 'T', 'co.NIQSZK', 'cocap.NEXP_plo')
('p', 'AA', 'co.NIQSZK', 'cocap.NEXP_plo') => ('p', 'EA', 'co.NIQSZK', 'cocap.NEXP_plo')
('p', 'AA', 'co.NIQSZK', 'NEXP_plo') => ('p', 'T', 'co.NIQSZK', 'NEXP_plo')
('p', 'AA', 'co.NIQSZK', 'NEXP_plo') => ('p', 'EA', 'co.NIQSZK', 'NEXP_plo')
('p', 'A', 'NIQSZK', 'EXP') => ('p', 'R', 'NIQSZK', 'EXP')
('p', 'A', 'NIQSZK', 'EXP') => ('p', 'AA', 'NIQSZK', 'EXP')
('p', 'A', 'co.NIQSZK', 'EXP') => ('p', 'R', 'co.NIQSZK', 'EXP')
('p', 'A', 'co.NIQSZK', 'EXP') => ('p', 'AA', 'co.NIQSZK', 'EXP')
('p', 'AA', 'co.NIQSZK', 'EXP') => ('p', 'T', 'co.NIQSZK', 'EXP')
('p', 'AA', 'co.NIQSZK', 'EXP') => ('p', 'EA', 'co.NIQSZK', 'EXP')
('p', 'AA', 'NIQSZK', 'EXP') => ('p', 'T', 'NIQSZK', 'EXP')
('p', 'AA', 'NIQSZK', 'EXP') => ('p', 'EA', 'NIQSZK', 'EXP')
('p', 'AA', 'NIQSZK', 'EXP_plo') => ('p', 'T', 'NIQSZK', 'EXP_plo')
('p', 'AA', 'NIQSZK', 'EXP_plo') => ('p', 'EA', 'NIQSZK', 'EXP_plo')
('p', 'AA', 'co.NIQSZK', 'EXP_plo') => ('p', 'T', 'co.NIQSZK', 'EXP_plo')
('p', 'AA', 'co.NIQSZK', 'EXP_plo') => ('p', 'EA', 'co.NIQSZK', 'EXP_plo')
('-d', 'A', 'co.NIQSZK', 'cocap.QMIP_fe') => ('-d', 'R', 'co.NIQSZK', 'cocap.QMIP_fe')
('-d', 'A', 'co.NIQSZK', 'cocap.QMIP_fe') => ('-d', 'AA', 'co.NIQSZK', 'cocap.QMIP_fe')
('-d', 'A', 'NIQSZK', 'cocap.QMIP_fe') => ('-d', 'R', 'NIQSZK', 'cocap.QMIP_fe')
('-d', 'A', 'NIQSZK', 'cocap.QMIP_fe') => ('-d', 'AA', 'NIQSZK', 'cocap.QMIP_fe')
('-d', 'A', 'NIQSZK', 'QMIP_fe') => ('-d', 'R', 'NIQSZK', 'QMIP_fe')
('-d', 'A', 'NIQSZK', 'QMIP_fe') => ('-d', 'AA', 'NIQSZK', 'QMIP_fe')
('-d', 'A', 'co.NIQSZK', 'co.QMIP_fe') => ('-d', 'R', 'co.NIQSZK', 'co.QMIP_fe')
('-d', 'A', 'co.NIQSZK', 'co.QMIP_fe') => ('-d', 'AA', 'co.NIQSZK', 'co.QMIP_fe')
('-d', 'AA', 'co.NIQSZK', 'co.QMIP_fe') => ('-d', 'T', 'co.NIQSZK', 'co.QMIP_fe')
('-d', 'AA', 'co.NIQSZK', 'co.QMIP_fe') => ('-d', 'EA', 'co.NIQSZK', 'co.QMIP_fe')
('-d', 'AA', 'NIQSZK', 'QMIP_fe') => ('-d', 'T', 'NIQSZK', 'QMIP_fe')
('-d', 'AA', 'NIQSZK', 'QMIP_fe') => ('-d', 'EA', 'NIQSZK', 'QMIP_fe')
('-d', 'A', 'NIQSZK', 'co.QMIP_fe') => ('-d', 'R', 'NIQSZK', 'co.QMIP_fe')
('-d', 'A', 'NIQSZK', 'co.QMIP_fe') => ('-d', 'AA', 'NIQSZK', 'co.QMIP_fe')
('-d', 'A', 'co.NIQSZK', 'QMIP_fe') => ('-d', 'R', 'co.NIQSZK', 'QMIP_fe')
('-d', 'A', 'co.NIQSZK', 'QMIP_fe') => ('-d', 'AA', 'co.NIQSZK', 'QMIP_fe')
('-d', 'AA', 'co.NIQSZK', 'QMIP_fe') => ('-d', 'T', 'co.NIQSZK', 'QMIP_fe')
('-d', 'AA', 'co.NIQSZK', 'QMIP_fe') => ('-d', 'EA', 'co.NIQSZK', 'QMIP_fe')
('-d', 'AA', 'NIQSZK', 'co.QMIP_fe') => ('-d', 'T', 'NIQSZK', 'co.QMIP_fe')
('-d', 'AA', 'NIQSZK', 'co.QMIP_fe') => ('-d', 'EA', 'NIQSZK', 'co.QMIP_fe')
('-d', 'AA', 'NIQSZK', 'cocap.QMIP_fe') => ('-d', 'T', 'NIQSZK', 'cocap.QMIP_fe')
('-d', 'AA', 'NIQSZK', 'cocap.QMIP_fe') => ('-d', 'EA', 'NIQSZK', 'cocap.QMIP_fe')
('-d', 'AA', 'co.NIQSZK', 'cocap.QMIP_fe') => ('-d', 'T', 'co.NIQSZK', 'cocap.QMIP_fe')
('-d', 'AA', 'co.NIQSZK', 'cocap.QMIP_fe') => ('-d', 'EA', 'co.NIQSZK', 'cocap.QMIP_fe')
('p', 'A', 'co.NIQSZK', 'cocap.QMIP_fe') => ('p', 'R', 'co.NIQSZK', 'cocap.QMIP_fe')
('p', 'A', 'co.NIQSZK', 'cocap.QMIP_fe') => ('p', 'AA', 'co.NIQSZK', 'cocap.QMIP_fe')
('p', 'A', 'NIQSZK', 'cocap.QMIP_fe') => ('p', 'R', 'NIQSZK', 'cocap.QMIP_fe')
('p', 'A', 'NIQSZK', 'cocap.QMIP_fe') => ('p', 'AA', 'NIQSZK', 'cocap.QMIP_fe')
('p', 'A', 'NIQSZK', 'QMIP_fe') => ('p', 'R', 'NIQSZK', 'QMIP_fe')
('p', 'A', 'NIQSZK', 'QMIP_fe') => ('p', 'AA', 'NIQSZK', 'QMIP_fe')
('p', 'A', 'co.NIQSZK', 'co.QMIP_fe') => ('p', 'R', 'co.NIQSZK', 'co.QMIP_fe')
('p', 'A', 'co.NIQSZK', 'co.QMIP_fe') => ('p', 'AA', 'co.NIQSZK', 'co.QMIP_fe')
('p', 'AA', 'co.NIQSZK', 'co.QMIP_fe') => ('p', 'T', 'co.NIQSZK', 'co.QMIP_fe')
('p', 'AA', 'co.NIQSZK', 'co.QMIP_fe') => ('p', 'EA', 'co.NIQSZK', 'co.QMIP_fe')
('p', 'AA', 'NIQSZK', 'QMIP_fe') => ('p', 'T', 'NIQSZK', 'QMIP_fe')
('p', 'AA', 'NIQSZK', 'QMIP_fe') => ('p', 'EA', 'NIQSZK', 'QMIP_fe')
('p', 'A', 'NIQSZK', 'co.QMIP_fe') => ('p', 'R', 'NIQSZK', 'co.QMIP_fe')
('p', 'A', 'NIQSZK', 'co.QMIP_fe') => ('p', 'AA', 'NIQSZK', 'co.QMIP_fe')
('p', 'A', 'co.NIQSZK', 'QMIP_fe') => ('p', 'R', 'co.NIQSZK', 'QMIP_fe')
('p', 'A', 'co.NIQSZK', 'QMIP_fe') => ('p', 'AA', 'co.NIQSZK', 'QMIP_fe')
('p', 'AA', 'co.NIQSZK', 'QMIP_fe') => ('p', 'T', 'co.NIQSZK', 'QMIP_fe')
('p', 'AA', 'co.NIQSZK', 'QMIP_fe') => ('p', 'EA', 'co.NIQSZK', 'QMIP_fe')
('p', 'AA', 'co.NIQSZK', 'cocap.QMIP_fe') => ('p', 'T', 'co.NIQSZK', 'cocap.QMIP_fe')
('p', 'AA', 'co.NIQSZK', 'cocap.QMIP_fe') => ('p', 'EA', 'co.NIQSZK', 'cocap.QMIP_fe')
('p', 'AA', 'NIQSZK', 'cocap.QMIP_fe') => ('p', 'T', 'NIQSZK', 'cocap.QMIP_fe')
('p', 'AA', 'NIQSZK', 'cocap.QMIP_fe') => ('p', 'EA', 'NIQSZK', 'cocap.QMIP_fe')
('p', 'AA', 'NIQSZK', 'co.QMIP_fe') => ('p', 'T', 'NIQSZK', 'co.QMIP_fe')
('p', 'AA', 'NIQSZK', 'co.QMIP_fe') => ('p', 'EA', 'NIQSZK', 'co.QMIP_fe')
('-d', 'A', 'co.NIQSZK', 'QIP') => ('-d', 'R', 'co.NIQSZK', 'QIP')
('-d', 'A', 'co.NIQSZK', 'QIP') => ('-d', 'AA', 'co.NIQSZK', 'QIP')
('-d', 'A', 'NIQSZK', 'co.QIP') => ('-d', 'R', 'NIQSZK', 'co.QIP')
('-d', 'A', 'NIQSZK', 'co.QIP') => ('-d', 'AA', 'NIQSZK', 'co.QIP')
('-d', 'A', 'NIQSZK', 'co.QMIP_le') => ('-d', 'R', 'NIQSZK', 'co.QMIP_le')
('-d', 'A', 'NIQSZK', 'co.QMIP_le') => ('-d', 'AA', 'NIQSZK', 'co.QMIP_le')
('-d', 'A', 'co.NIQSZK', 'QMIP_le') => ('-d', 'R', 'co.NIQSZK', 'QMIP_le')
('-d', 'A', 'co.NIQSZK', 'QMIP_le') => ('-d', 'AA', 'co.NIQSZK', 'QMIP_le')
('-d', 'AA', 'co.NIQSZK', 'QMIP_le') => ('-d', 'T', 'co.NIQSZK', 'QMIP_le')
('-d', 'AA', 'co.NIQSZK', 'QMIP_le') => ('-d', 'EA', 'co.NIQSZK', 'QMIP_le')
('-d', 'AA', 'NIQSZK', 'co.QMIP_le') => ('-d', 'T', 'NIQSZK', 'co.QMIP_le')
('-d', 'AA', 'NIQSZK', 'co.QMIP_le') => ('-d', 'EA', 'NIQSZK', 'co.QMIP_le')
('-d', 'A', 'NIQSZK', 'co.QMIP_ne') => ('-d', 'R', 'NIQSZK', 'co.QMIP_ne')
('-d', 'A', 'NIQSZK', 'co.QMIP_ne') => ('-d', 'AA', 'NIQSZK', 'co.QMIP_ne')
('-d', 'A', 'co.NIQSZK', 'QMIP_ne') => ('-d', 'R', 'co.NIQSZK', 'QMIP_ne')
('-d', 'A', 'co.NIQSZK', 'QMIP_ne') => ('-d', 'AA', 'co.NIQSZK', 'QMIP_ne')
('-d', 'AA', 'co.NIQSZK', 'QMIP_ne') => ('-d', 'T', 'co.NIQSZK', 'QMIP_ne')
('-d', 'AA', 'co.NIQSZK', 'QMIP_ne') => ('-d', 'EA', 'co.NIQSZK', 'QMIP_ne')
('-d', 'AA', 'NIQSZK', 'co.QMIP_ne') => ('-d', 'T', 'NIQSZK', 'co.QMIP_ne')
('-d', 'AA', 'NIQSZK', 'co.QMIP_ne') => ('-d', 'EA', 'NIQSZK', 'co.QMIP_ne')
('-d', 'AA', 'NIQSZK', 'co.QIP') => ('-d', 'T', 'NIQSZK', 'co.QIP')
('-d', 'AA', 'NIQSZK', 'co.QIP') => ('-d', 'EA', 'NIQSZK', 'co.QIP')
('-d', 'AA', 'co.NIQSZK', 'QIP') => ('-d', 'T', 'co.NIQSZK', 'QIP')
('-d', 'AA', 'co.NIQSZK', 'QIP') => ('-d', 'EA', 'co.NIQSZK', 'QIP')
('p', 'A', 'co.NIQSZK', 'QIP') => ('p', 'R', 'co.NIQSZK', 'QIP')
('p', 'A', 'co.NIQSZK', 'QIP') => ('p', 'AA', 'co.NIQSZK', 'QIP')
('p', 'A', 'NIQSZK', 'co.QIP') => ('p', 'R', 'NIQSZK', 'co.QIP')
('p', 'A', 'NIQSZK', 'co.QIP') => ('p', 'AA', 'NIQSZK', 'co.QIP')
('p', 'A', 'NIQSZK', 'co.QMIP_le') => ('p', 'R', 'NIQSZK', 'co.QMIP_le')
('p', 'A', 'NIQSZK', 'co.QMIP_le') => ('p', 'AA', 'NIQSZK', 'co.QMIP_le')
('p', 'A', 'co.NIQSZK', 'QMIP_le') => ('p', 'R', 'co.NIQSZK', 'QMIP_le')
('p', 'A', 'co.NIQSZK', 'QMIP_le') => ('p', 'AA', 'co.NIQSZK', 'QMIP_le')
('p', 'AA', 'co.NIQSZK', 'QMIP_le') => ('p', 'T', 'co.NIQSZK', 'QMIP_le')
('p', 'AA', 'co.NIQSZK', 'QMIP_le') => ('p', 'EA', 'co.NIQSZK', 'QMIP_le')
('p', 'AA', 'NIQSZK', 'co.QMIP_le') => ('p', 'T', 'NIQSZK', 'co.QMIP_le')
('p', 'AA', 'NIQSZK', 'co.QMIP_le') => ('p', 'EA', 'NIQSZK', 'co.QMIP_le')
('p', 'A', 'NIQSZK', 'co.QMIP_ne') => ('p', 'R', 'NIQSZK', 'co.QMIP_ne')
('p', 'A', 'NIQSZK', 'co.QMIP_ne') => ('p', 'AA', 'NIQSZK', 'co.QMIP_ne')
('p', 'A', 'co.NIQSZK', 'QMIP_ne') => ('p', 'R', 'co.NIQSZK', 'QMIP_ne')
('p', 'A', 'co.NIQSZK', 'QMIP_ne') => ('p', 'AA', 'co.NIQSZK', 'QMIP_ne')
('p', 'AA', 'co.NIQSZK', 'QMIP_ne') => ('p', 'T', 'co.NIQSZK', 'QMIP_ne')
('p', 'AA', 'co.NIQSZK', 'QMIP_ne') => ('p', 'EA', 'co.NIQSZK', 'QMIP_ne')
('p', 'AA', 'NIQSZK', 'co.QMIP_ne') => ('p', 'T', 'NIQSZK', 'co.QMIP_ne')
('p', 'AA', 'NIQSZK', 'co.QMIP_ne') => ('p', 'EA', 'NIQSZK', 'co.QMIP_ne')
('p', 'AA', 'NIQSZK', 'co.QIP') => ('p', 'T', 'NIQSZK', 'co.QIP')
('p', 'AA', 'NIQSZK', 'co.QIP') => ('p', 'EA', 'NIQSZK', 'co.QIP')
('p', 'AA', 'co.NIQSZK', 'QIP') => ('p', 'T', 'co.NIQSZK', 'QIP')
('p', 'AA', 'co.NIQSZK', 'QIP') => ('p', 'EA', 'co.NIQSZK', 'QIP')
('-d', 'A', 'co.NIQSZK', 'co.QMIP_le') => ('-d', 'R', 'co.NIQSZK', 'co.QMIP_le')
('-d', 'A', 'co.NIQSZK', 'co.QMIP_le') => ('-d', 'AA', 'co.NIQSZK', 'co.QMIP_le')
('-d', 'A', 'co.NIQSZK', 'cocap.QMIP_le') => ('-d', 'R', 'co.NIQSZK', 'cocap.QMIP_le')
('-d', 'A', 'co.NIQSZK', 'cocap.QMIP_le') => ('-d', 'AA', 'co.NIQSZK', 'cocap.QMIP_le')
('-d', 'A', 'NIQSZK', 'cocap.QMIP_le') => ('-d', 'R', 'NIQSZK', 'cocap.QMIP_le')
('-d', 'A', 'NIQSZK', 'cocap.QMIP_le') => ('-d', 'AA', 'NIQSZK', 'cocap.QMIP_le')
('-d', 'A', 'NIQSZK', 'QMIP_le') => ('-d', 'R', 'NIQSZK', 'QMIP_le')
('-d', 'A', 'NIQSZK', 'QMIP_le') => ('-d', 'AA', 'NIQSZK', 'QMIP_le')
('-d', 'AA', 'NIQSZK', 'QMIP_le') => ('-d', 'T', 'NIQSZK', 'QMIP_le')
('-d', 'AA', 'NIQSZK', 'QMIP_le') => ('-d', 'EA', 'NIQSZK', 'QMIP_le')
('-d', 'AA', 'NIQSZK', 'cocap.QMIP_le') => ('-d', 'T', 'NIQSZK', 'cocap.QMIP_le')
('-d', 'AA', 'NIQSZK', 'cocap.QMIP_le') => ('-d', 'EA', 'NIQSZK', 'cocap.QMIP_le')
('-d', 'AA', 'co.NIQSZK', 'cocap.QMIP_le') => ('-d', 'T', 'co.NIQSZK', 'cocap.QMIP_le')
('-d', 'AA', 'co.NIQSZK', 'cocap.QMIP_le') => ('-d', 'EA', 'co.NIQSZK', 'cocap.QMIP_le')
('-d', 'AA', 'co.NIQSZK', 'co.QMIP_le') => ('-d', 'T', 'co.NIQSZK', 'co.QMIP_le')
('-d', 'AA', 'co.NIQSZK', 'co.QMIP_le') => ('-d', 'EA', 'co.NIQSZK', 'co.QMIP_le')
('p', 'A', 'co.NIQSZK', 'co.QMIP_le') => ('p', 'R', 'co.NIQSZK', 'co.QMIP_le')
('p', 'A', 'co.NIQSZK', 'co.QMIP_le') => ('p', 'AA', 'co.NIQSZK', 'co.QMIP_le')
('p', 'A', 'co.NIQSZK', 'cocap.QMIP_le') => ('p', 'R', 'co.NIQSZK', 'cocap.QMIP_le')
('p', 'A', 'co.NIQSZK', 'cocap.QMIP_le') => ('p', 'AA', 'co.NIQSZK', 'cocap.QMIP_le')
('p', 'A', 'NIQSZK', 'cocap.QMIP_le') => ('p', 'R', 'NIQSZK', 'cocap.QMIP_le')
('p', 'A', 'NIQSZK', 'cocap.QMIP_le') => ('p', 'AA', 'NIQSZK', 'cocap.QMIP_le')
('p', 'A', 'NIQSZK', 'QMIP_le') => ('p', 'R', 'NIQSZK', 'QMIP_le')
('p', 'A', 'NIQSZK', 'QMIP_le') => ('p', 'AA', 'NIQSZK', 'QMIP_le')
('p', 'AA', 'NIQSZK', 'QMIP_le') => ('p', 'T', 'NIQSZK', 'QMIP_le')
('p', 'AA', 'NIQSZK', 'QMIP_le') => ('p', 'EA', 'NIQSZK', 'QMIP_le')
('p', 'AA', 'NIQSZK', 'cocap.QMIP_le') => ('p', 'T', 'NIQSZK', 'cocap.QMIP_le')
('p', 'AA', 'NIQSZK', 'cocap.QMIP_le') => ('p', 'EA', 'NIQSZK', 'cocap.QMIP_le')
('p', 'AA', 'co.NIQSZK', 'cocap.QMIP_le') => ('p', 'T', 'co.NIQSZK', 'cocap.QMIP_le')
('p', 'AA', 'co.NIQSZK', 'cocap.QMIP_le') => ('p', 'EA', 'co.NIQSZK', 'cocap.QMIP_le')
('p', 'AA', 'co.NIQSZK', 'co.QMIP_le') => ('p', 'T', 'co.NIQSZK', 'co.QMIP_le')
('p', 'AA', 'co.NIQSZK', 'co.QMIP_le') => ('p', 'EA', 'co.NIQSZK', 'co.QMIP_le')
('-d', 'A', 'co.NIQSZK', 'cocap.QMIP_ne') => ('-d', 'R', 'co.NIQSZK', 'cocap.QMIP_ne')
('-d', 'A', 'co.NIQSZK', 'cocap.QMIP_ne') => ('-d', 'AA', 'co.NIQSZK', 'cocap.QMIP_ne')
('-d', 'A', 'NIQSZK', 'cocap.QMIP_ne') => ('-d', 'R', 'NIQSZK', 'cocap.QMIP_ne')
('-d', 'A', 'NIQSZK', 'cocap.QMIP_ne') => ('-d', 'AA', 'NIQSZK', 'cocap.QMIP_ne')
('-d', 'A', 'NIQSZK', 'QMIP_ne') => ('-d', 'R', 'NIQSZK', 'QMIP_ne')
('-d', 'A', 'NIQSZK', 'QMIP_ne') => ('-d', 'AA', 'NIQSZK', 'QMIP_ne')
('-d', 'A', 'co.NIQSZK', 'co.QMIP_ne') => ('-d', 'R', 'co.NIQSZK', 'co.QMIP_ne')
('-d', 'A', 'co.NIQSZK', 'co.QMIP_ne') => ('-d', 'AA', 'co.NIQSZK', 'co.QMIP_ne')
('-d', 'AA', 'co.NIQSZK', 'co.QMIP_ne') => ('-d', 'T', 'co.NIQSZK', 'co.QMIP_ne')
('-d', 'AA', 'co.NIQSZK', 'co.QMIP_ne') => ('-d', 'EA', 'co.NIQSZK', 'co.QMIP_ne')
('-d', 'AA', 'co.NIQSZK', 'cocap.QMIP_ne') => ('-d', 'T', 'co.NIQSZK', 'cocap.QMIP_ne')
('-d', 'AA', 'co.NIQSZK', 'cocap.QMIP_ne') => ('-d', 'EA', 'co.NIQSZK', 'cocap.QMIP_ne')
('-d', 'AA', 'NIQSZK', 'cocap.QMIP_ne') => ('-d', 'T', 'NIQSZK', 'cocap.QMIP_ne')
('-d', 'AA', 'NIQSZK', 'cocap.QMIP_ne') => ('-d', 'EA', 'NIQSZK', 'cocap.QMIP_ne')
('-d', 'AA', 'NIQSZK', 'QMIP_ne') => ('-d', 'T', 'NIQSZK', 'QMIP_ne')
('-d', 'AA', 'NIQSZK', 'QMIP_ne') => ('-d', 'EA', 'NIQSZK', 'QMIP_ne')
('p', 'A', 'co.NIQSZK', 'cocap.QMIP_ne') => ('p', 'R', 'co.NIQSZK', 'cocap.QMIP_ne')
('p', 'A', 'co.NIQSZK', 'cocap.QMIP_ne') => ('p', 'AA', 'co.NIQSZK', 'cocap.QMIP_ne')
('p', 'A', 'NIQSZK', 'cocap.QMIP_ne') => ('p', 'R', 'NIQSZK', 'cocap.QMIP_ne')
('p', 'A', 'NIQSZK', 'cocap.QMIP_ne') => ('p', 'AA', 'NIQSZK', 'cocap.QMIP_ne')
('p', 'A', 'NIQSZK', 'QMIP_ne') => ('p', 'R', 'NIQSZK', 'QMIP_ne')
('p', 'A', 'NIQSZK', 'QMIP_ne') => ('p', 'AA', 'NIQSZK', 'QMIP_ne')
('p', 'A', 'co.NIQSZK', 'co.QMIP_ne') => ('p', 'R', 'co.NIQSZK', 'co.QMIP_ne')
('p', 'A', 'co.NIQSZK', 'co.QMIP_ne') => ('p', 'AA', 'co.NIQSZK', 'co.QMIP_ne')
('p', 'AA', 'co.NIQSZK', 'co.QMIP_ne') => ('p', 'T', 'co.NIQSZK', 'co.QMIP_ne')
('p', 'AA', 'co.NIQSZK', 'co.QMIP_ne') => ('p', 'EA', 'co.NIQSZK', 'co.QMIP_ne')
('p', 'AA', 'co.NIQSZK', 'cocap.QMIP_ne') => ('p', 'T', 'co.NIQSZK', 'cocap.QMIP_ne')
('p', 'AA', 'co.NIQSZK', 'cocap.QMIP_ne') => ('p', 'EA', 'co.NIQSZK', 'cocap.QMIP_ne')
('p', 'AA', 'NIQSZK', 'cocap.QMIP_ne') => ('p', 'T', 'NIQSZK', 'cocap.QMIP_ne')
('p', 'AA', 'NIQSZK', 'cocap.QMIP_ne') => ('p', 'EA', 'NIQSZK', 'cocap.QMIP_ne')
('p', 'AA', 'NIQSZK', 'QMIP_ne') => ('p', 'T', 'NIQSZK', 'QMIP_ne')
('p', 'AA', 'NIQSZK', 'QMIP_ne') => ('p', 'EA', 'NIQSZK', 'QMIP_ne')
('-d', 'A', 'co.NIQSZK', 'PSPACE/poly') => ('-d', 'R', 'co.NIQSZK', 'PSPACE/poly')
('-d', 'A', 'co.NIQSZK', 'PSPACE/poly') => ('-d', 'AA', 'co.NIQSZK', 'PSPACE/poly')
('-d', 'A', 'NIQSZK', 'PSPACE/poly') => ('-d', 'R', 'NIQSZK', 'PSPACE/poly')
('-d', 'A', 'NIQSZK', 'PSPACE/poly') => ('-d', 'AA', 'NIQSZK', 'PSPACE/poly')
('-d', 'AA', 'NIQSZK', 'PSPACE/poly') => ('-d', 'T', 'NIQSZK', 'PSPACE/poly')
('-d', 'AA', 'NIQSZK', 'PSPACE/poly') => ('-d', 'EA', 'NIQSZK', 'PSPACE/poly')
('-d', 'AA', 'co.NIQSZK', 'PSPACE/poly') => ('-d', 'T', 'co.NIQSZK', 'PSPACE/poly')
('-d', 'AA', 'co.NIQSZK', 'PSPACE/poly') => ('-d', 'EA', 'co.NIQSZK', 'PSPACE/poly')
('p', 'A', 'co.NIQSZK', 'PSPACE/poly') => ('p', 'R', 'co.NIQSZK', 'PSPACE/poly')
('p', 'A', 'co.NIQSZK', 'PSPACE/poly') => ('p', 'AA', 'co.NIQSZK', 'PSPACE/poly')
('p', 'A', 'NIQSZK', 'PSPACE/poly') => ('p', 'R', 'NIQSZK', 'PSPACE/poly')
('p', 'A', 'NIQSZK', 'PSPACE/poly') => ('p', 'AA', 'NIQSZK', 'PSPACE/poly')
('p', 'AA', 'NIQSZK', 'PSPACE/poly') => ('p', 'T', 'NIQSZK', 'PSPACE/poly')
('p', 'AA', 'NIQSZK', 'PSPACE/poly') => ('p', 'EA', 'NIQSZK', 'PSPACE/poly')
('p', 'AA', 'co.NIQSZK', 'PSPACE/poly') => ('p', 'T', 'co.NIQSZK', 'PSPACE/poly')
('p', 'AA', 'co.NIQSZK', 'PSPACE/poly') => ('p', 'EA', 'co.NIQSZK', 'PSPACE/poly')
('-d', 'A', 'co.NIQSZK', 'cocap.QIP') => ('-d', 'R', 'co.NIQSZK', 'cocap.QIP')
('-d', 'A', 'co.NIQSZK', 'cocap.QIP') => ('-d', 'AA', 'co.NIQSZK', 'cocap.QIP')
('-d', 'A', 'NIQSZK', 'cocap.QIP') => ('-d', 'R', 'NIQSZK', 'cocap.QIP')
('-d', 'A', 'NIQSZK', 'cocap.QIP') => ('-d', 'AA', 'NIQSZK', 'cocap.QIP')
('-d', 'A', 'NIQSZK', 'QIP') => ('-d', 'R', 'NIQSZK', 'QIP')
('-d', 'A', 'NIQSZK', 'QIP') => ('-d', 'AA', 'NIQSZK', 'QIP')
('-d', 'A', 'co.NIQSZK', 'co.QIP') => ('-d', 'R', 'co.NIQSZK', 'co.QIP')
('-d', 'A', 'co.NIQSZK', 'co.QIP') => ('-d', 'AA', 'co.NIQSZK', 'co.QIP')
('-d', 'AA', 'co.NIQSZK', 'co.QIP') => ('-d', 'T', 'co.NIQSZK', 'co.QIP')
('-d', 'AA', 'co.NIQSZK', 'co.QIP') => ('-d', 'EA', 'co.NIQSZK', 'co.QIP')
('-d', 'AA', 'co.NIQSZK', 'cocap.QIP') => ('-d', 'T', 'co.NIQSZK', 'cocap.QIP')
('-d', 'AA', 'co.NIQSZK', 'cocap.QIP') => ('-d', 'EA', 'co.NIQSZK', 'cocap.QIP')
('-d', 'AA', 'NIQSZK', 'cocap.QIP') => ('-d', 'T', 'NIQSZK', 'cocap.QIP')
('-d', 'AA', 'NIQSZK', 'cocap.QIP') => ('-d', 'EA', 'NIQSZK', 'cocap.QIP')
('-d', 'AA', 'NIQSZK', 'QIP') => ('-d', 'T', 'NIQSZK', 'QIP')
('-d', 'AA', 'NIQSZK', 'QIP') => ('-d', 'EA', 'NIQSZK', 'QIP')
('p', 'A', 'co.NIQSZK', 'cocap.QIP') => ('p', 'R', 'co.NIQSZK', 'cocap.QIP')
('p', 'A', 'co.NIQSZK', 'cocap.QIP') => ('p', 'AA', 'co.NIQSZK', 'cocap.QIP')
('p', 'A', 'NIQSZK', 'cocap.QIP') => ('p', 'R', 'NIQSZK', 'cocap.QIP')
('p', 'A', 'NIQSZK', 'cocap.QIP') => ('p', 'AA', 'NIQSZK', 'cocap.QIP')
('p', 'A', 'NIQSZK', 'QIP') => ('p', 'R', 'NIQSZK', 'QIP')
('p', 'A', 'NIQSZK', 'QIP') => ('p', 'AA', 'NIQSZK', 'QIP')
('p', 'A', 'co.NIQSZK', 'co.QIP') => ('p', 'R', 'co.NIQSZK', 'co.QIP')
('p', 'A', 'co.NIQSZK', 'co.QIP') => ('p', 'AA', 'co.NIQSZK', 'co.QIP')
('p', 'AA', 'co.NIQSZK', 'co.QIP') => ('p', 'T', 'co.NIQSZK', 'co.QIP')
('p', 'AA', 'co.NIQSZK', 'co.QIP') => ('p', 'EA', 'co.NIQSZK', 'co.QIP')
('p', 'AA', 'co.NIQSZK', 'cocap.QIP') => ('p', 'T', 'co.NIQSZK', 'cocap.QIP')
('p', 'AA', 'co.NIQSZK', 'cocap.QIP') => ('p', 'EA', 'co.NIQSZK', 'cocap.QIP')
('p', 'AA', 'NIQSZK', 'cocap.QIP') => ('p', 'T', 'NIQSZK', 'cocap.QIP')
('p', 'AA', 'NIQSZK', 'cocap.QIP') => ('p', 'EA', 'NIQSZK', 'cocap.QIP')
('p', 'AA', 'NIQSZK', 'QIP') => ('p', 'T', 'NIQSZK', 'QIP')
('p', 'AA', 'NIQSZK', 'QIP') => ('p', 'EA', 'NIQSZK', 'QIP')
('-d', 'A', 'co.NIQSZK', 'PSPACE') => ('-d', 'R', 'co.NIQSZK', 'PSPACE')
('-d', 'A', 'co.NIQSZK', 'PSPACE') => ('-d', 'AA', 'co.NIQSZK', 'PSPACE')
('-d', 'A', 'NIQSZK', 'PSPACE') => ('-d', 'R', 'NIQSZK', 'PSPACE')
('-d', 'A', 'NIQSZK', 'PSPACE') => ('-d', 'AA', 'NIQSZK', 'PSPACE')
('-d', 'AA', 'NIQSZK', 'PSPACE') => ('-d', 'T', 'NIQSZK', 'PSPACE')
('-d', 'AA', 'NIQSZK', 'PSPACE') => ('-d', 'EA', 'NIQSZK', 'PSPACE')
('-d', 'AA', 'co.NIQSZK', 'PSPACE') => ('-d', 'T', 'co.NIQSZK', 'PSPACE')
('-d', 'AA', 'co.NIQSZK', 'PSPACE') => ('-d', 'EA', 'co.NIQSZK', 'PSPACE')
('p', 'A', 'co.NIQSZK', 'PSPACE') => ('p', 'R', 'co.NIQSZK', 'PSPACE')
('p', 'A', 'co.NIQSZK', 'PSPACE') => ('p', 'AA', 'co.NIQSZK', 'PSPACE')
('p', 'A', 'NIQSZK', 'PSPACE') => ('p', 'R', 'NIQSZK', 'PSPACE')
('p', 'A', 'NIQSZK', 'PSPACE') => ('p', 'AA', 'NIQSZK', 'PSPACE')
('p', 'AA', 'NIQSZK', 'PSPACE') => ('p', 'T', 'NIQSZK', 'PSPACE')
('p', 'AA', 'NIQSZK', 'PSPACE') => ('p', 'EA', 'NIQSZK', 'PSPACE')
('p', 'AA', 'co.NIQSZK', 'PSPACE') => ('p', 'T', 'co.NIQSZK', 'PSPACE')
('p', 'AA', 'co.NIQSZK', 'PSPACE') => ('p', 'EA', 'co.NIQSZK', 'PSPACE')
('p', 'AA', 'co.NIQSZK', 'QSZK') => ('-d', 'AA', 'co.NIQSZK', 'QSZK')
('p', 'AA', 'co.NIQSZK', 'QSZK') => ('p', 'T', 'co.NIQSZK', 'QSZK')
('p', 'AA', 'co.NIQSZK', 'QSZK') => ('p', 'EA', 'co.NIQSZK', 'QSZK')
('p', 'AA', 'NIQSZK', 'QSZK') => ('-d', 'AA', 'NIQSZK', 'QSZK')
('p', 'AA', 'NIQSZK', 'QSZK') => ('p', 'T', 'NIQSZK', 'QSZK')
('p', 'AA', 'NIQSZK', 'QSZK') => ('p', 'EA', 'NIQSZK', 'QSZK')
('p', 'EA', 'NIQSZK', 'QSZK') => ('-d', 'EA', 'NIQSZK', 'QSZK')
('p', 'EA', 'co.NIQSZK', 'QSZK') => ('-d', 'EA', 'co.NIQSZK', 'QSZK')
('p', 'T', 'NIQSZK', 'QSZK') => ('-d', 'T', 'NIQSZK', 'QSZK')
('p', 'T', 'co.NIQSZK', 'QSZK') => ('-d', 'T', 'co.NIQSZK', 'QSZK')
('p', 'R', 'co.NIQSZK', 'QSZK') => ('-d', 'R', 'co.NIQSZK', 'QSZK')
('p', 'R', 'NIQSZK', 'QSZK') => ('-d', 'R', 'NIQSZK', 'QSZK')
('p', 'A', 'IP', 'MIP*_fe') => ('-d', 'A', 'IP', 'MIP*_fe')
('p', 'A', 'IP', 'MIP*_fe') => ('p', 'R', 'IP', 'MIP*_fe')
('p', 'A', 'IP', 'MIP*_fe') => ('p', 'AA', 'IP', 'MIP*_fe')
('p', 'A', 'co.IP', 'co.MIP*_fe') => ('-d', 'A', 'co.IP', 'co.MIP*_fe')
('p', 'A', 'co.IP', 'co.MIP*_fe') => ('p', 'R', 'co.IP', 'co.MIP*_fe')
('p', 'A', 'co.IP', 'co.MIP*_fe') => ('p', 'AA', 'co.IP', 'co.MIP*_fe')
('p', 'A', 'cocap.IP', 'cocap.MIP*_fe') => ('-d', 'A', 'cocap.IP', 'cocap.MIP*_fe')
('p', 'A', 'cocap.IP', 'cocap.MIP*_fe') => ('p', 'R', 'cocap.IP', 'cocap.MIP*_fe')
('p', 'A', 'cocap.IP', 'cocap.MIP*_fe') => ('p', 'AA', 'cocap.IP', 'cocap.MIP*_fe')
('d', 'A', 'cocap.MIP*_fe', 'RP') => ('-p', 'A', 'cocap.MIP*_fe', 'RP')
('d', 'A', 'cocap.MIP*_fe', 'co.RP') => ('-p', 'A', 'cocap.MIP*_fe', 'co.RP')
('p', 'A', 'P', 'cocap.MIP*_fe') => ('-d', 'A', 'P', 'cocap.MIP*_fe')
('p', 'A', 'P', 'cocap.MIP*_fe') => ('p', 'R', 'P', 'cocap.MIP*_fe')
('p', 'A', 'P', 'cocap.MIP*_fe') => ('p', 'AA', 'P', 'cocap.MIP*_fe')
('-d', 'A', 'P', 'co.MIP*_fe') => ('-d', 'R', 'P', 'co.MIP*_fe')
('-d', 'A', 'P', 'co.MIP*_fe') => ('-d', 'AA', 'P', 'co.MIP*_fe')
('-d', 'A', 'P', 'MIP*_fe') => ('-d', 'R', 'P', 'MIP*_fe')
('-d', 'A', 'P', 'MIP*_fe') => ('-d', 'AA', 'P', 'MIP*_fe')
('-d', 'A', 'P', 'cocap.MIP*_fe') => ('-d', 'R', 'P', 'cocap.MIP*_fe')
('-d', 'A', 'P', 'cocap.MIP*_fe') => ('-d', 'AA', 'P', 'cocap.MIP*_fe')
('-d', 'AA', 'P', 'cocap.MIP*_fe') => ('-d', 'T', 'P', 'cocap.MIP*_fe')
('-d', 'AA', 'P', 'cocap.MIP*_fe') => ('-d', 'EA', 'P', 'cocap.MIP*_fe')
('-d', 'AA', 'P', 'co.MIP*_fe') => ('-d', 'T', 'P', 'co.MIP*_fe')
('-d', 'AA', 'P', 'co.MIP*_fe') => ('-d', 'EA', 'P', 'co.MIP*_fe')
('-d', 'AA', 'P', 'MIP*_fe') => ('-d', 'T', 'P', 'MIP*_fe')
('-d', 'AA', 'P', 'MIP*_fe') => ('-d', 'EA', 'P', 'MIP*_fe')
('p', 'A', 'P', 'co.MIP*_fe') => ('p', 'R', 'P', 'co.MIP*_fe')
('p', 'A', 'P', 'co.MIP*_fe') => ('p', 'AA', 'P', 'co.MIP*_fe')
('p', 'A', 'P', 'MIP*_fe') => ('p', 'R', 'P', 'MIP*_fe')
('p', 'A', 'P', 'MIP*_fe') => ('p', 'AA', 'P', 'MIP*_fe')
('p', 'AA', 'P', 'MIP*_fe') => ('p', 'T', 'P', 'MIP*_fe')
('p', 'AA', 'P', 'MIP*_fe') => ('p', 'EA', 'P', 'MIP*_fe')
('p', 'AA', 'P', 'co.MIP*_fe') => ('p', 'T', 'P', 'co.MIP*_fe')
('p', 'AA', 'P', 'co.MIP*_fe') => ('p', 'EA', 'P', 'co.MIP*_fe')
('p', 'AA', 'P', 'cocap.MIP*_fe') => ('p', 'T', 'P', 'cocap.MIP*_fe')
('p', 'AA', 'P', 'cocap.MIP*_fe') => ('p', 'EA', 'P', 'cocap.MIP*_fe')
('p', 'A', 'SZK', 'cocap.MIP*_fe') => ('-d', 'A', 'SZK', 'cocap.MIP*_fe')
('p', 'A', 'SZK', 'cocap.MIP*_fe') => ('p', 'R', 'SZK', 'cocap.MIP*_fe')
('p', 'A', 'SZK', 'cocap.MIP*_fe') => ('p', 'AA', 'SZK', 'cocap.MIP*_fe')
('d', 'A', 'cocap.MIP*_fe', 'NP') => ('-p', 'A', 'cocap.MIP*_fe', 'NP')
('d', 'A', 'cocap.MIP*_fe', 'co.NP') => ('-p', 'A', 'cocap.MIP*_fe', 'co.NP')
('-d', 'A', 'SZK', 'co.MIP*_fe') => ('-d', 'AA', 'SZK', 'co.MIP*_fe')
('-d', 'A', 'SZK', 'MIP*_fe') => ('-d', 'AA', 'SZK', 'MIP*_fe')
('-d', 'A', 'SZK', 'cocap.MIP*_fe') => ('-d', 'AA', 'SZK', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.NISZK', 'cocap.MIP*_fe') => ('-d', 'AA', 'cocap.NISZK', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.NISZK', 'co.MIP*_fe') => ('-d', 'AA', 'cocap.NISZK', 'co.MIP*_fe')
('-d', 'A', 'cocap.NISZK', 'MIP*_fe') => ('-d', 'AA', 'cocap.NISZK', 'MIP*_fe')
('-d', 'A', 'BPP', 'MIP*_fe') => ('-d', 'AA', 'BPP', 'MIP*_fe')
('-d', 'A', 'BPP', 'co.MIP*_fe') => ('-d', 'AA', 'BPP', 'co.MIP*_fe')
('-d', 'A', 'BPP', 'cocap.MIP*_fe') => ('-d', 'AA', 'BPP', 'cocap.MIP*_fe')
('-d', 'AA', 'BPP', 'cocap.MIP*_fe') => ('-d', 'T', 'BPP', 'cocap.MIP*_fe')
('-d', 'AA', 'BPP', 'cocap.MIP*_fe') => ('-d', 'EA', 'BPP', 'cocap.MIP*_fe')
('-d', 'AA', 'BPP', 'co.MIP*_fe') => ('-d', 'T', 'BPP', 'co.MIP*_fe')
('-d', 'AA', 'BPP', 'co.MIP*_fe') => ('-d', 'EA', 'BPP', 'co.MIP*_fe')
('-d', 'AA', 'BPP', 'MIP*_fe') => ('-d', 'T', 'BPP', 'MIP*_fe')
('-d', 'AA', 'BPP', 'MIP*_fe') => ('-d', 'EA', 'BPP', 'MIP*_fe')
('-d', 'AA', 'cocap.NISZK', 'MIP*_fe') => ('-d', 'T', 'cocap.NISZK', 'MIP*_fe')
('-d', 'AA', 'cocap.NISZK', 'MIP*_fe') => ('-d', 'EA', 'cocap.NISZK', 'MIP*_fe')
('-d', 'AA', 'cocap.NISZK', 'co.MIP*_fe') => ('-d', 'T', 'cocap.NISZK', 'co.MIP*_fe')
('-d', 'AA', 'cocap.NISZK', 'co.MIP*_fe') => ('-d', 'EA', 'cocap.NISZK', 'co.MIP*_fe')
('-d', 'AA', 'cocap.NISZK', 'cocap.MIP*_fe') => ('-d', 'T', 'cocap.NISZK', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.NISZK', 'cocap.MIP*_fe') => ('-d', 'EA', 'cocap.NISZK', 'cocap.MIP*_fe')
('-d', 'A', 'co.NISZK', 'cocap.MIP*_fe') => ('-d', 'AA', 'co.NISZK', 'cocap.MIP*_fe')
('-d', 'A', 'NISZK', 'cocap.MIP*_fe') => ('-d', 'AA', 'NISZK', 'cocap.MIP*_fe')
('-d', 'A', 'NISZK', 'co.MIP*_fe') => ('-d', 'AA', 'NISZK', 'co.MIP*_fe')
('-d', 'A', 'co.NISZK', 'MIP*_fe') => ('-d', 'AA', 'co.NISZK', 'MIP*_fe')
('-d', 'AA', 'co.NISZK', 'MIP*_fe') => ('-d', 'T', 'co.NISZK', 'MIP*_fe')
('-d', 'AA', 'co.NISZK', 'MIP*_fe') => ('-d', 'EA', 'co.NISZK', 'MIP*_fe')
('-d', 'AA', 'NISZK', 'co.MIP*_fe') => ('-d', 'T', 'NISZK', 'co.MIP*_fe')
('-d', 'AA', 'NISZK', 'co.MIP*_fe') => ('-d', 'EA', 'NISZK', 'co.MIP*_fe')
('-d', 'A', 'NISZK', 'MIP*_fe') => ('-d', 'AA', 'NISZK', 'MIP*_fe')
('-d', 'A', 'co.NISZK', 'co.MIP*_fe') => ('-d', 'AA', 'co.NISZK', 'co.MIP*_fe')
('-d', 'AA', 'co.NISZK', 'co.MIP*_fe') => ('-d', 'T', 'co.NISZK', 'co.MIP*_fe')
('-d', 'AA', 'co.NISZK', 'co.MIP*_fe') => ('-d', 'EA', 'co.NISZK', 'co.MIP*_fe')
('-d', 'AA', 'NISZK', 'MIP*_fe') => ('-d', 'T', 'NISZK', 'MIP*_fe')
('-d', 'AA', 'NISZK', 'MIP*_fe') => ('-d', 'EA', 'NISZK', 'MIP*_fe')
('-d', 'AA', 'NISZK', 'cocap.MIP*_fe') => ('-d', 'T', 'NISZK', 'cocap.MIP*_fe')
('-d', 'AA', 'NISZK', 'cocap.MIP*_fe') => ('-d', 'EA', 'NISZK', 'cocap.MIP*_fe')
('-d', 'AA', 'co.NISZK', 'cocap.MIP*_fe') => ('-d', 'T', 'co.NISZK', 'cocap.MIP*_fe')
('-d', 'AA', 'co.NISZK', 'cocap.MIP*_fe') => ('-d', 'EA', 'co.NISZK', 'cocap.MIP*_fe')
('-d', 'AA', 'SZK', 'cocap.MIP*_fe') => ('-d', 'T', 'SZK', 'cocap.MIP*_fe')
('-d', 'AA', 'SZK', 'cocap.MIP*_fe') => ('-d', 'EA', 'SZK', 'cocap.MIP*_fe')
('-d', 'AA', 'SZK', 'co.MIP*_fe') => ('-d', 'T', 'SZK', 'co.MIP*_fe')
('-d', 'AA', 'SZK', 'co.MIP*_fe') => ('-d', 'EA', 'SZK', 'co.MIP*_fe')
('-d', 'AA', 'SZK', 'MIP*_fe') => ('-d', 'T', 'SZK', 'MIP*_fe')
('-d', 'AA', 'SZK', 'MIP*_fe') => ('-d', 'EA', 'SZK', 'MIP*_fe')
('p', 'A', 'SZK', 'co.MIP*_fe') => ('p', 'R', 'SZK', 'co.MIP*_fe')
('p', 'A', 'SZK', 'co.MIP*_fe') => ('p', 'AA', 'SZK', 'co.MIP*_fe')
('p', 'A', 'SZK', 'MIP*_fe') => ('p', 'R', 'SZK', 'MIP*_fe')
('p', 'A', 'SZK', 'MIP*_fe') => ('p', 'AA', 'SZK', 'MIP*_fe')
('p', 'A', 'cocap.NISZK', 'MIP*_fe') => ('p', 'R', 'cocap.NISZK', 'MIP*_fe')
('p', 'A', 'cocap.NISZK', 'MIP*_fe') => ('p', 'AA', 'cocap.NISZK', 'MIP*_fe')
('p', 'A', 'cocap.NISZK', 'co.MIP*_fe') => ('p', 'R', 'cocap.NISZK', 'co.MIP*_fe')
('p', 'A', 'cocap.NISZK', 'co.MIP*_fe') => ('p', 'AA', 'cocap.NISZK', 'co.MIP*_fe')
('p', 'A', 'cocap.NISZK', 'cocap.MIP*_fe') => ('p', 'R', 'cocap.NISZK', 'cocap.MIP*_fe')
('p', 'A', 'cocap.NISZK', 'cocap.MIP*_fe') => ('p', 'AA', 'cocap.NISZK', 'cocap.MIP*_fe')
('p', 'A', 'BPP', 'cocap.MIP*_fe') => ('p', 'R', 'BPP', 'cocap.MIP*_fe')
('p', 'A', 'BPP', 'cocap.MIP*_fe') => ('p', 'AA', 'BPP', 'cocap.MIP*_fe')
('p', 'A', 'BPP', 'co.MIP*_fe') => ('p', 'R', 'BPP', 'co.MIP*_fe')
('p', 'A', 'BPP', 'co.MIP*_fe') => ('p', 'AA', 'BPP', 'co.MIP*_fe')
('p', 'A', 'BPP', 'MIP*_fe') => ('p', 'R', 'BPP', 'MIP*_fe')
('p', 'A', 'BPP', 'MIP*_fe') => ('p', 'AA', 'BPP', 'MIP*_fe')
('p', 'AA', 'BPP', 'MIP*_fe') => ('p', 'T', 'BPP', 'MIP*_fe')
('p', 'AA', 'BPP', 'MIP*_fe') => ('p', 'EA', 'BPP', 'MIP*_fe')
('p', 'AA', 'BPP', 'co.MIP*_fe') => ('p', 'T', 'BPP', 'co.MIP*_fe')
('p', 'AA', 'BPP', 'co.MIP*_fe') => ('p', 'EA', 'BPP', 'co.MIP*_fe')
('p', 'AA', 'BPP', 'cocap.MIP*_fe') => ('p', 'T', 'BPP', 'cocap.MIP*_fe')
('p', 'AA', 'BPP', 'cocap.MIP*_fe') => ('p', 'EA', 'BPP', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.NISZK', 'cocap.MIP*_fe') => ('p', 'T', 'cocap.NISZK', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.NISZK', 'cocap.MIP*_fe') => ('p', 'EA', 'cocap.NISZK', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.NISZK', 'co.MIP*_fe') => ('p', 'T', 'cocap.NISZK', 'co.MIP*_fe')
('p', 'AA', 'cocap.NISZK', 'co.MIP*_fe') => ('p', 'EA', 'cocap.NISZK', 'co.MIP*_fe')
('p', 'AA', 'cocap.NISZK', 'MIP*_fe') => ('p', 'T', 'cocap.NISZK', 'MIP*_fe')
('p', 'AA', 'cocap.NISZK', 'MIP*_fe') => ('p', 'EA', 'cocap.NISZK', 'MIP*_fe')
('p', 'A', 'co.NISZK', 'MIP*_fe') => ('p', 'R', 'co.NISZK', 'MIP*_fe')
('p', 'A', 'co.NISZK', 'MIP*_fe') => ('p', 'AA', 'co.NISZK', 'MIP*_fe')
('p', 'A', 'NISZK', 'co.MIP*_fe') => ('p', 'R', 'NISZK', 'co.MIP*_fe')
('p', 'A', 'NISZK', 'co.MIP*_fe') => ('p', 'AA', 'NISZK', 'co.MIP*_fe')
('p', 'AA', 'NISZK', 'co.MIP*_fe') => ('p', 'T', 'NISZK', 'co.MIP*_fe')
('p', 'AA', 'NISZK', 'co.MIP*_fe') => ('p', 'EA', 'NISZK', 'co.MIP*_fe')
('p', 'AA', 'co.NISZK', 'MIP*_fe') => ('p', 'T', 'co.NISZK', 'MIP*_fe')
('p', 'AA', 'co.NISZK', 'MIP*_fe') => ('p', 'EA', 'co.NISZK', 'MIP*_fe')
('p', 'A', 'NISZK', 'MIP*_fe') => ('p', 'R', 'NISZK', 'MIP*_fe')
('p', 'A', 'NISZK', 'MIP*_fe') => ('p', 'AA', 'NISZK', 'MIP*_fe')
('p', 'A', 'NISZK', 'cocap.MIP*_fe') => ('p', 'R', 'NISZK', 'cocap.MIP*_fe')
('p', 'A', 'NISZK', 'cocap.MIP*_fe') => ('p', 'AA', 'NISZK', 'cocap.MIP*_fe')
('p', 'A', 'co.NISZK', 'cocap.MIP*_fe') => ('p', 'R', 'co.NISZK', 'cocap.MIP*_fe')
('p', 'A', 'co.NISZK', 'cocap.MIP*_fe') => ('p', 'AA', 'co.NISZK', 'cocap.MIP*_fe')
('p', 'A', 'co.NISZK', 'co.MIP*_fe') => ('p', 'R', 'co.NISZK', 'co.MIP*_fe')
('p', 'A', 'co.NISZK', 'co.MIP*_fe') => ('p', 'AA', 'co.NISZK', 'co.MIP*_fe')
('p', 'AA', 'co.NISZK', 'co.MIP*_fe') => ('p', 'T', 'co.NISZK', 'co.MIP*_fe')
('p', 'AA', 'co.NISZK', 'co.MIP*_fe') => ('p', 'EA', 'co.NISZK', 'co.MIP*_fe')
('p', 'AA', 'co.NISZK', 'cocap.MIP*_fe') => ('p', 'T', 'co.NISZK', 'cocap.MIP*_fe')
('p', 'AA', 'co.NISZK', 'cocap.MIP*_fe') => ('p', 'EA', 'co.NISZK', 'cocap.MIP*_fe')
('p', 'AA', 'NISZK', 'cocap.MIP*_fe') => ('p', 'T', 'NISZK', 'cocap.MIP*_fe')
('p', 'AA', 'NISZK', 'cocap.MIP*_fe') => ('p', 'EA', 'NISZK', 'cocap.MIP*_fe')
('p', 'AA', 'NISZK', 'MIP*_fe') => ('p', 'T', 'NISZK', 'MIP*_fe')
('p', 'AA', 'NISZK', 'MIP*_fe') => ('p', 'EA', 'NISZK', 'MIP*_fe')
('p', 'AA', 'SZK', 'MIP*_fe') => ('p', 'T', 'SZK', 'MIP*_fe')
('p', 'AA', 'SZK', 'MIP*_fe') => ('p', 'EA', 'SZK', 'MIP*_fe')
('p', 'AA', 'SZK', 'co.MIP*_fe') => ('p', 'T', 'SZK', 'co.MIP*_fe')
('p', 'AA', 'SZK', 'co.MIP*_fe') => ('p', 'EA', 'SZK', 'co.MIP*_fe')
('p', 'AA', 'SZK', 'cocap.MIP*_fe') => ('p', 'T', 'SZK', 'cocap.MIP*_fe')
('p', 'AA', 'SZK', 'cocap.MIP*_fe') => ('p', 'EA', 'SZK', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.IP', 'co.MIP*_fe') => ('-d', 'R', 'cocap.IP', 'co.MIP*_fe')
('-d', 'A', 'cocap.IP', 'co.MIP*_fe') => ('-d', 'AA', 'cocap.IP', 'co.MIP*_fe')
('-d', 'A', 'cocap.IP', 'MIP*_fe') => ('-d', 'R', 'cocap.IP', 'MIP*_fe')
('-d', 'A', 'cocap.IP', 'MIP*_fe') => ('-d', 'AA', 'cocap.IP', 'MIP*_fe')
('-d', 'A', 'cocap.IP', 'cocap.MIP*_fe') => ('-d', 'R', 'cocap.IP', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.IP', 'cocap.MIP*_fe') => ('-d', 'AA', 'cocap.IP', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.NP', 'cocap.MIP*_fe') => ('-d', 'AA', 'cocap.NP', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.NP', 'co.MIP*_fe') => ('-d', 'AA', 'cocap.NP', 'co.MIP*_fe')
('-d', 'A', 'cocap.NP', 'MIP*_fe') => ('-d', 'AA', 'cocap.NP', 'MIP*_fe')
('-d', 'A', 'ZPP', 'MIP*_fe') => ('-d', 'AA', 'ZPP', 'MIP*_fe')
('-d', 'A', 'ZPP', 'co.MIP*_fe') => ('-d', 'AA', 'ZPP', 'co.MIP*_fe')
('-d', 'A', 'ZPP', 'cocap.MIP*_fe') => ('-d', 'AA', 'ZPP', 'cocap.MIP*_fe')
('-d', 'AA', 'ZPP', 'cocap.MIP*_fe') => ('-d', 'T', 'ZPP', 'cocap.MIP*_fe')
('-d', 'AA', 'ZPP', 'cocap.MIP*_fe') => ('-d', 'EA', 'ZPP', 'cocap.MIP*_fe')
('-d', 'AA', 'ZPP', 'co.MIP*_fe') => ('-d', 'T', 'ZPP', 'co.MIP*_fe')
('-d', 'AA', 'ZPP', 'co.MIP*_fe') => ('-d', 'EA', 'ZPP', 'co.MIP*_fe')
('-d', 'AA', 'ZPP', 'MIP*_fe') => ('-d', 'T', 'ZPP', 'MIP*_fe')
('-d', 'AA', 'ZPP', 'MIP*_fe') => ('-d', 'EA', 'ZPP', 'MIP*_fe')
('-d', 'AA', 'cocap.NP', 'MIP*_fe') => ('-d', 'T', 'cocap.NP', 'MIP*_fe')
('-d', 'AA', 'cocap.NP', 'MIP*_fe') => ('-d', 'EA', 'cocap.NP', 'MIP*_fe')
('-d', 'AA', 'cocap.NP', 'co.MIP*_fe') => ('-d', 'T', 'cocap.NP', 'co.MIP*_fe')
('-d', 'AA', 'cocap.NP', 'co.MIP*_fe') => ('-d', 'EA', 'cocap.NP', 'co.MIP*_fe')
('-d', 'AA', 'cocap.NP', 'cocap.MIP*_fe') => ('-d', 'T', 'cocap.NP', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.NP', 'cocap.MIP*_fe') => ('-d', 'EA', 'cocap.NP', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.SBP', 'cocap.MIP*_fe') => ('-d', 'AA', 'cocap.SBP', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.SBP', 'co.MIP*_fe') => ('-d', 'AA', 'cocap.SBP', 'co.MIP*_fe')
('-d', 'A', 'cocap.SBP', 'MIP*_fe') => ('-d', 'AA', 'cocap.SBP', 'MIP*_fe')
('-d', 'A', 'cocap.MA', 'MIP*_fe') => ('-d', 'AA', 'cocap.MA', 'MIP*_fe')
('-d', 'A', 'cocap.MA', 'co.MIP*_fe') => ('-d', 'AA', 'cocap.MA', 'co.MIP*_fe')
('-d', 'A', 'cocap.MA', 'cocap.MIP*_fe') => ('-d', 'AA', 'cocap.MA', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.MA', 'cocap.MIP*_fe') => ('-d', 'T', 'cocap.MA', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.MA', 'cocap.MIP*_fe') => ('-d', 'EA', 'cocap.MA', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.MA', 'co.MIP*_fe') => ('-d', 'T', 'cocap.MA', 'co.MIP*_fe')
('-d', 'AA', 'cocap.MA', 'co.MIP*_fe') => ('-d', 'EA', 'cocap.MA', 'co.MIP*_fe')
('-d', 'AA', 'cocap.MA', 'MIP*_fe') => ('-d', 'T', 'cocap.MA', 'MIP*_fe')
('-d', 'AA', 'cocap.MA', 'MIP*_fe') => ('-d', 'EA', 'cocap.MA', 'MIP*_fe')
('-d', 'AA', 'cocap.SBP', 'MIP*_fe') => ('-d', 'T', 'cocap.SBP', 'MIP*_fe')
('-d', 'AA', 'cocap.SBP', 'MIP*_fe') => ('-d', 'EA', 'cocap.SBP', 'MIP*_fe')
('-d', 'AA', 'cocap.SBP', 'co.MIP*_fe') => ('-d', 'T', 'cocap.SBP', 'co.MIP*_fe')
('-d', 'AA', 'cocap.SBP', 'co.MIP*_fe') => ('-d', 'EA', 'cocap.SBP', 'co.MIP*_fe')
('-d', 'AA', 'cocap.SBP', 'cocap.MIP*_fe') => ('-d', 'T', 'cocap.SBP', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.SBP', 'cocap.MIP*_fe') => ('-d', 'EA', 'cocap.SBP', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.AM', 'cocap.MIP*_fe') => ('-d', 'AA', 'cocap.AM', 'cocap.MIP*_fe')
('-d', 'A', 'cocap.AM', 'co.MIP*_fe') => ('-d', 'AA', 'cocap.AM', 'co.MIP*_fe')
('-d', 'A', 'cocap.AM', 'MIP*_fe') => ('-d', 'AA', 'cocap.AM', 'MIP*_fe')
('-d', 'AA', 'cocap.AM', 'MIP*_fe') => ('-d', 'T', 'cocap.AM', 'MIP*_fe')
('-d', 'AA', 'cocap.AM', 'MIP*_fe') => ('-d', 'EA', 'cocap.AM', 'MIP*_fe')
('-d', 'AA', 'cocap.AM', 'co.MIP*_fe') => ('-d', 'T', 'cocap.AM', 'co.MIP*_fe')
('-d', 'AA', 'cocap.AM', 'co.MIP*_fe') => ('-d', 'EA', 'cocap.AM', 'co.MIP*_fe')
('-d', 'AA', 'cocap.AM', 'cocap.MIP*_fe') => ('-d', 'T', 'cocap.AM', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.AM', 'cocap.MIP*_fe') => ('-d', 'EA', 'cocap.AM', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.IP', 'cocap.MIP*_fe') => ('-d', 'T', 'cocap.IP', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.IP', 'cocap.MIP*_fe') => ('-d', 'EA', 'cocap.IP', 'cocap.MIP*_fe')
('-d', 'AA', 'cocap.IP', 'co.MIP*_fe') => ('-d', 'T', 'cocap.IP', 'co.MIP*_fe')
('-d', 'AA', 'cocap.IP', 'co.MIP*_fe') => ('-d', 'EA', 'cocap.IP', 'co.MIP*_fe')
('-d', 'AA', 'cocap.IP', 'MIP*_fe') => ('-d', 'T', 'cocap.IP', 'MIP*_fe')
('-d', 'AA', 'cocap.IP', 'MIP*_fe') => ('-d', 'EA', 'cocap.IP', 'MIP*_fe')
('p', 'A', 'cocap.IP', 'co.MIP*_fe') => ('p', 'R', 'cocap.IP', 'co.MIP*_fe')
('p', 'A', 'cocap.IP', 'co.MIP*_fe') => ('p', 'AA', 'cocap.IP', 'co.MIP*_fe')
('p', 'A', 'cocap.IP', 'MIP*_fe') => ('p', 'R', 'cocap.IP', 'MIP*_fe')
('p', 'A', 'cocap.IP', 'MIP*_fe') => ('p', 'AA', 'cocap.IP', 'MIP*_fe')
('p', 'A', 'cocap.NP', 'MIP*_fe') => ('p', 'R', 'cocap.NP', 'MIP*_fe')
('p', 'A', 'cocap.NP', 'MIP*_fe') => ('p', 'AA', 'cocap.NP', 'MIP*_fe')
('p', 'A', 'cocap.NP', 'co.MIP*_fe') => ('p', 'R', 'cocap.NP', 'co.MIP*_fe')
('p', 'A', 'cocap.NP', 'co.MIP*_fe') => ('p', 'AA', 'cocap.NP', 'co.MIP*_fe')
('p', 'A', 'cocap.NP', 'cocap.MIP*_fe') => ('p', 'R', 'cocap.NP', 'cocap.MIP*_fe')
('p', 'A', 'cocap.NP', 'cocap.MIP*_fe') => ('p', 'AA', 'cocap.NP', 'cocap.MIP*_fe')
('p', 'A', 'ZPP', 'cocap.MIP*_fe') => ('p', 'R', 'ZPP', 'cocap.MIP*_fe')
('p', 'A', 'ZPP', 'cocap.MIP*_fe') => ('p', 'AA', 'ZPP', 'cocap.MIP*_fe')
('p', 'A', 'ZPP', 'co.MIP*_fe') => ('p', 'R', 'ZPP', 'co.MIP*_fe')
('p', 'A', 'ZPP', 'co.MIP*_fe') => ('p', 'AA', 'ZPP', 'co.MIP*_fe')
('p', 'A', 'ZPP', 'MIP*_fe') => ('p', 'R', 'ZPP', 'MIP*_fe')
('p', 'A', 'ZPP', 'MIP*_fe') => ('p', 'AA', 'ZPP', 'MIP*_fe')
('p', 'AA', 'ZPP', 'MIP*_fe') => ('p', 'T', 'ZPP', 'MIP*_fe')
('p', 'AA', 'ZPP', 'MIP*_fe') => ('p', 'EA', 'ZPP', 'MIP*_fe')
('p', 'AA', 'ZPP', 'co.MIP*_fe') => ('p', 'T', 'ZPP', 'co.MIP*_fe')
('p', 'AA', 'ZPP', 'co.MIP*_fe') => ('p', 'EA', 'ZPP', 'co.MIP*_fe')
('p', 'AA', 'ZPP', 'cocap.MIP*_fe') => ('p', 'T', 'ZPP', 'cocap.MIP*_fe')
('p', 'AA', 'ZPP', 'cocap.MIP*_fe') => ('p', 'EA', 'ZPP', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.NP', 'cocap.MIP*_fe') => ('p', 'T', 'cocap.NP', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.NP', 'cocap.MIP*_fe') => ('p', 'EA', 'cocap.NP', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.NP', 'co.MIP*_fe') => ('p', 'T', 'cocap.NP', 'co.MIP*_fe')
('p', 'AA', 'cocap.NP', 'co.MIP*_fe') => ('p', 'EA', 'cocap.NP', 'co.MIP*_fe')
('p', 'AA', 'cocap.NP', 'MIP*_fe') => ('p', 'T', 'cocap.NP', 'MIP*_fe')
('p', 'AA', 'cocap.NP', 'MIP*_fe') => ('p', 'EA', 'cocap.NP', 'MIP*_fe')
('p', 'A', 'cocap.SBP', 'MIP*_fe') => ('p', 'AA', 'cocap.SBP', 'MIP*_fe')
('p', 'A', 'cocap.SBP', 'co.MIP*_fe') => ('p', 'AA', 'cocap.SBP', 'co.MIP*_fe')
('p', 'A', 'cocap.SBP', 'cocap.MIP*_fe') => ('p', 'AA', 'cocap.SBP', 'cocap.MIP*_fe')
('p', 'A', 'cocap.MA', 'cocap.MIP*_fe') => ('p', 'AA', 'cocap.MA', 'cocap.MIP*_fe')
('p', 'A', 'cocap.MA', 'co.MIP*_fe') => ('p', 'AA', 'cocap.MA', 'co.MIP*_fe')
('p', 'A', 'cocap.MA', 'MIP*_fe') => ('p', 'AA', 'cocap.MA', 'MIP*_fe')
('p', 'AA', 'cocap.MA', 'MIP*_fe') => ('p', 'T', 'cocap.MA', 'MIP*_fe')
('p', 'AA', 'cocap.MA', 'MIP*_fe') => ('p', 'EA', 'cocap.MA', 'MIP*_fe')
('p', 'AA', 'cocap.MA', 'co.MIP*_fe') => ('p', 'T', 'cocap.MA', 'co.MIP*_fe')
('p', 'AA', 'cocap.MA', 'co.MIP*_fe') => ('p', 'EA', 'cocap.MA', 'co.MIP*_fe')
('p', 'AA', 'cocap.MA', 'cocap.MIP*_fe') => ('p', 'T', 'cocap.MA', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.MA', 'cocap.MIP*_fe') => ('p', 'EA', 'cocap.MA', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.SBP', 'cocap.MIP*_fe') => ('p', 'T', 'cocap.SBP', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.SBP', 'cocap.MIP*_fe') => ('p', 'EA', 'cocap.SBP', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.SBP', 'co.MIP*_fe') => ('p', 'T', 'cocap.SBP', 'co.MIP*_fe')
('p', 'AA', 'cocap.SBP', 'co.MIP*_fe') => ('p', 'EA', 'cocap.SBP', 'co.MIP*_fe')
('p', 'AA', 'cocap.SBP', 'MIP*_fe') => ('p', 'T', 'cocap.SBP', 'MIP*_fe')
('p', 'AA', 'cocap.SBP', 'MIP*_fe') => ('p', 'EA', 'cocap.SBP', 'MIP*_fe')
('p', 'A', 'cocap.AM', 'MIP*_fe') => ('p', 'AA', 'cocap.AM', 'MIP*_fe')
('p', 'A', 'cocap.AM', 'co.MIP*_fe') => ('p', 'AA', 'cocap.AM', 'co.MIP*_fe')
('p', 'A', 'cocap.AM', 'cocap.MIP*_fe') => ('p', 'AA', 'cocap.AM', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.AM', 'cocap.MIP*_fe') => ('p', 'T', 'cocap.AM', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.AM', 'cocap.MIP*_fe') => ('p', 'EA', 'cocap.AM', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.AM', 'co.MIP*_fe') => ('p', 'T', 'cocap.AM', 'co.MIP*_fe')
('p', 'AA', 'cocap.AM', 'co.MIP*_fe') => ('p', 'EA', 'cocap.AM', 'co.MIP*_fe')
('p', 'AA', 'cocap.AM', 'MIP*_fe') => ('p', 'T', 'cocap.AM', 'MIP*_fe')
('p', 'AA', 'cocap.AM', 'MIP*_fe') => ('p', 'EA', 'cocap.AM', 'MIP*_fe')
('p', 'AA', 'cocap.IP', 'MIP*_fe') => ('p', 'T', 'cocap.IP', 'MIP*_fe')
('p', 'AA', 'cocap.IP', 'MIP*_fe') => ('p', 'EA', 'cocap.IP', 'MIP*_fe')
('p', 'AA', 'cocap.IP', 'co.MIP*_fe') => ('p', 'T', 'cocap.IP', 'co.MIP*_fe')
('p', 'AA', 'cocap.IP', 'co.MIP*_fe') => ('p', 'EA', 'cocap.IP', 'co.MIP*_fe')
('p', 'AA', 'cocap.IP', 'cocap.MIP*_fe') => ('p', 'T', 'cocap.IP', 'cocap.MIP*_fe')
('p', 'AA', 'cocap.IP', 'cocap.MIP*_fe') => ('p', 'EA', 'cocap.IP', 'cocap.MIP*_fe')
('d', 'A', 'co.MIP*_fe', 'SZK') => ('-p', 'A', 'co.MIP*_fe', 'SZK')
('d', 'A', 'MIP*_fe', 'SZK') => ('-p', 'A', 'MIP*_fe', 'SZK')
('d', 'A', 'co.MIP*_fe', 'P/poly') => ('-p', 'A', 'co.MIP*_fe', 'P/poly')
('d', 'A', 'MIP*_fe', 'P/poly') => ('-p', 'A', 'MIP*_fe', 'P/poly')
('p', 'A', 'co.MA', 'co.MIP*_fe') => ('-d', 'A', 'co.MA', 'co.MIP*_fe')
('p', 'A', 'co.MA', 'co.MIP*_fe') => ('p', 'R', 'co.MA', 'co.MIP*_fe')
('p', 'A', 'co.MA', 'co.MIP*_fe') => ('p', 'AA', 'co.MA', 'co.MIP*_fe')
('p', 'A', 'MA', 'MIP*_fe') => ('-d', 'A', 'MA', 'MIP*_fe')
('p', 'A', 'MA', 'MIP*_fe') => ('p', 'R', 'MA', 'MIP*_fe')
('p', 'A', 'MA', 'MIP*_fe') => ('p', 'AA', 'MA', 'MIP*_fe')
('p', 'A', 'RP', 'MIP*_fe') => ('-d', 'A', 'RP', 'MIP*_fe')
('p', 'A', 'RP', 'MIP*_fe') => ('p', 'R', 'RP', 'MIP*_fe')
('p', 'A', 'RP', 'MIP*_fe') => ('p', 'AA', 'RP', 'MIP*_fe')
('p', 'A', 'co.RP', 'co.MIP*_fe') => ('-d', 'A', 'co.RP', 'co.MIP*_fe')
('p', 'A', 'co.RP', 'co.MIP*_fe') => ('p', 'R', 'co.RP', 'co.MIP*_fe')
('p', 'A', 'co.RP', 'co.MIP*_fe') => ('p', 'AA', 'co.RP', 'co.MIP*_fe')
('p', 'AA', 'co.RP', 'co.MIP*_fe') => ('-d', 'AA', 'co.RP', 'co.MIP*_fe')
('p', 'AA', 'co.RP', 'co.MIP*_fe') => ('p', 'T', 'co.RP', 'co.MIP*_fe')
('p', 'AA', 'co.RP', 'co.MIP*_fe') => ('p', 'EA', 'co.RP', 'co.MIP*_fe')
('p', 'AA', 'RP', 'MIP*_fe') => ('-d', 'AA', 'RP', 'MIP*_fe')
('p', 'AA', 'RP', 'MIP*_fe') => ('p', 'T', 'RP', 'MIP*_fe')
('p', 'AA', 'RP', 'MIP*_fe') => ('p', 'EA', 'RP', 'MIP*_fe')
('p', 'EA', 'RP', 'MIP*_fe') => ('-d', 'EA', 'RP', 'MIP*_fe')
('p', 'EA', 'co.RP', 'co.MIP*_fe') => ('-d', 'EA', 'co.RP', 'co.MIP*_fe')
('p', 'T', 'RP', 'MIP*_fe') => ('-d', 'T', 'RP', 'MIP*_fe')
('p', 'T', 'co.RP', 'co.MIP*_fe') => ('-d', 'T', 'co.RP', 'co.MIP*_fe')
('p', 'A', 'NP', 'MIP*_fe') => ('-d', 'A', 'NP', 'MIP*_fe')
('p', 'A', 'NP', 'MIP*_fe') => ('p', 'R', 'NP', 'MIP*_fe')
('p', 'A', 'NP', 'MIP*_fe') => ('p', 'AA', 'NP', 'MIP*_fe')
('p', 'A', 'co.NP', 'co.MIP*_fe') => ('-d', 'A', 'co.NP', 'co.MIP*_fe')
('p', 'A', 'co.NP', 'co.MIP*_fe') => ('p', 'R', 'co.NP', 'co.MIP*_fe')
('p', 'A', 'co.NP', 'co.MIP*_fe') => ('p', 'AA', 'co.NP', 'co.MIP*_fe')
('d', 'A', 'co.MIP*_fe', 'SBP') => ('-p', 'A', 'co.MIP*_fe', 'SBP')
('d', 'A', 'MIP*_fe', 'co.SBP') => ('-p', 'A', 'MIP*_fe', 'co.SBP')
('d', 'A', 'co.MIP*_fe', '(NP-cap-coNP)/poly') => ('-p', 'A', 'co.MIP*_fe', '(NP-cap-coNP)/poly')
('d', 'A', 'MIP*_fe', '(NP-cap-coNP)/poly') => ('-p', 'A', 'MIP*_fe', '(NP-cap-coNP)/poly')
('d', 'A', 'co.MIP*_fe', 'BQP/mpoly') => ('-p', 'A', 'co.MIP*_fe', 'BQP/mpoly')
('d', 'A', 'MIP*_fe', 'BQP/mpoly') => ('-p', 'A', 'MIP*_fe', 'BQP/mpoly')
('d', 'A', 'co.MIP*_fe', 'AM') => ('-p', 'A', 'co.MIP*_fe', 'AM')
('d', 'A', 'MIP*_fe', 'co.AM') => ('-p', 'A', 'MIP*_fe', 'co.AM')
('d', 'A', 'co.MIP*_fe', 'IP') => ('-p', 'A', 'co.MIP*_fe', 'IP')
('d', 'A', 'MIP*_fe', 'co.IP') => ('-p', 'A', 'MIP*_fe', 'co.IP')
('d', 'A', 'co.MIP*_fe', 'BQP/qpoly') => ('-p', 'A', 'co.MIP*_fe', 'BQP/qpoly')
('d', 'A', 'MIP*_fe', 'BQP/qpoly') => ('-p', 'A', 'MIP*_fe', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'co.MIP*_fe') => ('-d', 'AA', 'co.NP', 'co.MIP*_fe')
('p', 'AA', 'co.NP', 'co.MIP*_fe') => ('p', 'T', 'co.NP', 'co.MIP*_fe')
('p', 'AA', 'co.NP', 'co.MIP*_fe') => ('p', 'EA', 'co.NP', 'co.MIP*_fe')
('p', 'AA', 'NP', 'MIP*_fe') => ('-d', 'AA', 'NP', 'MIP*_fe')
('p', 'AA', 'NP', 'MIP*_fe') => ('p', 'T', 'NP', 'MIP*_fe')
('p', 'AA', 'NP', 'MIP*_fe') => ('p', 'EA', 'NP', 'MIP*_fe')
('p', 'EA', 'NP', 'MIP*_fe') => ('-d', 'EA', 'NP', 'MIP*_fe')
('p', 'EA', 'co.NP', 'co.MIP*_fe') => ('-d', 'EA', 'co.NP', 'co.MIP*_fe')
('p', 'T', 'NP', 'MIP*_fe') => ('-d', 'T', 'NP', 'MIP*_fe')
('p', 'T', 'co.NP', 'co.MIP*_fe') => ('-d', 'T', 'co.NP', 'co.MIP*_fe')
('p', 'AA', 'MA', 'MIP*_fe') => ('-d', 'AA', 'MA', 'MIP*_fe')
('p', 'AA', 'MA', 'MIP*_fe') => ('p', 'T', 'MA', 'MIP*_fe')
('p', 'AA', 'MA', 'MIP*_fe') => ('p', 'EA', 'MA', 'MIP*_fe')
('p', 'AA', 'co.MA', 'co.MIP*_fe') => ('-d', 'AA', 'co.MA', 'co.MIP*_fe')
('p', 'AA', 'co.MA', 'co.MIP*_fe') => ('p', 'T', 'co.MA', 'co.MIP*_fe')
('p', 'AA', 'co.MA', 'co.MIP*_fe') => ('p', 'EA', 'co.MA', 'co.MIP*_fe')
('p', 'EA', 'co.MA', 'co.MIP*_fe') => ('-d', 'EA', 'co.MA', 'co.MIP*_fe')
('p', 'EA', 'MA', 'MIP*_fe') => ('-d', 'EA', 'MA', 'MIP*_fe')
('p', 'T', 'co.MA', 'co.MIP*_fe') => ('-d', 'T', 'co.MA', 'co.MIP*_fe')
('p', 'T', 'MA', 'MIP*_fe') => ('-d', 'T', 'MA', 'MIP*_fe')
('p', 'A', 'co.SBP', 'co.MIP*_fe') => ('-d', 'A', 'co.SBP', 'co.MIP*_fe')
('p', 'A', 'co.SBP', 'co.MIP*_fe') => ('p', 'AA', 'co.SBP', 'co.MIP*_fe')
('p', 'A', 'SBP', 'MIP*_fe') => ('-d', 'A', 'SBP', 'MIP*_fe')
('p', 'A', 'SBP', 'MIP*_fe') => ('p', 'AA', 'SBP', 'MIP*_fe')
('p', 'AA', 'SBP', 'MIP*_fe') => ('-d', 'AA', 'SBP', 'MIP*_fe')
('p', 'AA', 'SBP', 'MIP*_fe') => ('p', 'T', 'SBP', 'MIP*_fe')
('p', 'AA', 'SBP', 'MIP*_fe') => ('p', 'EA', 'SBP', 'MIP*_fe')
('p', 'AA', 'co.SBP', 'co.MIP*_fe') => ('-d', 'AA', 'co.SBP', 'co.MIP*_fe')
('p', 'AA', 'co.SBP', 'co.MIP*_fe') => ('p', 'T', 'co.SBP', 'co.MIP*_fe')
('p', 'AA', 'co.SBP', 'co.MIP*_fe') => ('p', 'EA', 'co.SBP', 'co.MIP*_fe')
('p', 'EA', 'co.SBP', 'co.MIP*_fe') => ('-d', 'EA', 'co.SBP', 'co.MIP*_fe')
('p', 'EA', 'SBP', 'MIP*_fe') => ('-d', 'EA', 'SBP', 'MIP*_fe')
('p', 'T', 'co.SBP', 'co.MIP*_fe') => ('-d', 'T', 'co.SBP', 'co.MIP*_fe')
('p', 'T', 'SBP', 'MIP*_fe') => ('-d', 'T', 'SBP', 'MIP*_fe')
('p', 'A', 'co.AM', 'co.MIP*_fe') => ('-d', 'A', 'co.AM', 'co.MIP*_fe')
('p', 'A', 'co.AM', 'co.MIP*_fe') => ('p', 'AA', 'co.AM', 'co.MIP*_fe')
('p', 'A', 'AM', 'MIP*_fe') => ('-d', 'A', 'AM', 'MIP*_fe')
('p', 'A', 'AM', 'MIP*_fe') => ('p', 'AA', 'AM', 'MIP*_fe')
('p', 'AA', 'AM', 'MIP*_fe') => ('-d', 'AA', 'AM', 'MIP*_fe')
('p', 'AA', 'AM', 'MIP*_fe') => ('p', 'T', 'AM', 'MIP*_fe')
('p', 'AA', 'AM', 'MIP*_fe') => ('p', 'EA', 'AM', 'MIP*_fe')
('p', 'AA', 'co.AM', 'co.MIP*_fe') => ('-d', 'AA', 'co.AM', 'co.MIP*_fe')
('p', 'AA', 'co.AM', 'co.MIP*_fe') => ('p', 'T', 'co.AM', 'co.MIP*_fe')
('p', 'AA', 'co.AM', 'co.MIP*_fe') => ('p', 'EA', 'co.AM', 'co.MIP*_fe')
('p', 'EA', 'co.AM', 'co.MIP*_fe') => ('-d', 'EA', 'co.AM', 'co.MIP*_fe')
('p', 'EA', 'AM', 'MIP*_fe') => ('-d', 'EA', 'AM', 'MIP*_fe')
('p', 'T', 'co.AM', 'co.MIP*_fe') => ('-d', 'T', 'co.AM', 'co.MIP*_fe')
('p', 'T', 'AM', 'MIP*_fe') => ('-d', 'T', 'AM', 'MIP*_fe')
('p', 'AA', 'co.IP', 'co.MIP*_fe') => ('-d', 'AA', 'co.IP', 'co.MIP*_fe')
('p', 'AA', 'co.IP', 'co.MIP*_fe') => ('p', 'T', 'co.IP', 'co.MIP*_fe')
('p', 'AA', 'co.IP', 'co.MIP*_fe') => ('p', 'EA', 'co.IP', 'co.MIP*_fe')
('p', 'AA', 'IP', 'MIP*_fe') => ('-d', 'AA', 'IP', 'MIP*_fe')
('p', 'AA', 'IP', 'MIP*_fe') => ('p', 'T', 'IP', 'MIP*_fe')
('p', 'AA', 'IP', 'MIP*_fe') => ('p', 'EA', 'IP', 'MIP*_fe')
('p', 'EA', 'IP', 'MIP*_fe') => ('-d', 'EA', 'IP', 'MIP*_fe')
('p', 'EA', 'co.IP', 'co.MIP*_fe') => ('-d', 'EA', 'co.IP', 'co.MIP*_fe')
('p', 'T', 'IP', 'MIP*_fe') => ('-d', 'T', 'IP', 'MIP*_fe')
('p', 'T', 'co.IP', 'co.MIP*_fe') => ('-d', 'T', 'co.IP', 'co.MIP*_fe')
('p', 'R', 'co.IP', 'co.MIP*_fe') => ('-d', 'R', 'co.IP', 'co.MIP*_fe')
('p', 'R', 'IP', 'MIP*_fe') => ('-d', 'R', 'IP', 'MIP*_fe')
('p', 'A', 'SBP', 'SBQP') => ('-d', 'A', 'SBP', 'SBQP')
('p', 'A', 'SBP', 'SBQP') => ('p', 'AA', 'SBP', 'SBQP')
('p', 'A', 'co.SBP', 'co.SBQP') => ('-d', 'A', 'co.SBP', 'co.SBQP')
('p', 'A', 'co.SBP', 'co.SBQP') => ('p', 'AA', 'co.SBP', 'co.SBQP')
('p', 'A', 'cocap.SBP', 'cocap.SBQP') => ('-d', 'A', 'cocap.SBP', 'cocap.SBQP')
('p', 'A', 'cocap.SBP', 'cocap.SBQP') => ('p', 'AA', 'cocap.SBP', 'cocap.SBQP')
('-d', 'A', 'cocap.SBP', 'co.SBQP') => ('-d', 'AA', 'cocap.SBP', 'co.SBQP')
('-d', 'A', 'cocap.SBP', 'SBQP') => ('-d', 'AA', 'cocap.SBP', 'SBQP')
('-d', 'A', 'cocap.SBP', 'cocap.SBQP') => ('-d', 'AA', 'cocap.SBP', 'cocap.SBQP')
('-d', 'AA', 'cocap.SBP', 'cocap.SBQP') => ('-d', 'T', 'cocap.SBP', 'cocap.SBQP')
('-d', 'AA', 'cocap.SBP', 'cocap.SBQP') => ('-d', 'EA', 'cocap.SBP', 'cocap.SBQP')
('-d', 'AA', 'cocap.SBP', 'co.SBQP') => ('-d', 'T', 'cocap.SBP', 'co.SBQP')
('-d', 'AA', 'cocap.SBP', 'co.SBQP') => ('-d', 'EA', 'cocap.SBP', 'co.SBQP')
('-d', 'AA', 'cocap.SBP', 'SBQP') => ('-d', 'T', 'cocap.SBP', 'SBQP')
('-d', 'AA', 'cocap.SBP', 'SBQP') => ('-d', 'EA', 'cocap.SBP', 'SBQP')
('p', 'A', 'cocap.SBP', 'co.SBQP') => ('p', 'AA', 'cocap.SBP', 'co.SBQP')
('p', 'A', 'cocap.SBP', 'SBQP') => ('p', 'AA', 'cocap.SBP', 'SBQP')
('p', 'AA', 'cocap.SBP', 'SBQP') => ('p', 'T', 'cocap.SBP', 'SBQP')
('p', 'AA', 'cocap.SBP', 'SBQP') => ('p', 'EA', 'cocap.SBP', 'SBQP')
('p', 'AA', 'cocap.SBP', 'co.SBQP') => ('p', 'T', 'cocap.SBP', 'co.SBQP')
('p', 'AA', 'cocap.SBP', 'co.SBQP') => ('p', 'EA', 'cocap.SBP', 'co.SBQP')
('p', 'AA', 'cocap.SBP', 'cocap.SBQP') => ('p', 'T', 'cocap.SBP', 'cocap.SBQP')
('p', 'AA', 'cocap.SBP', 'cocap.SBQP') => ('p', 'EA', 'cocap.SBP', 'cocap.SBQP')
('p', 'AA', 'co.SBP', 'co.SBQP') => ('-d', 'AA', 'co.SBP', 'co.SBQP')
('p', 'AA', 'co.SBP', 'co.SBQP') => ('p', 'T', 'co.SBP', 'co.SBQP')
('p', 'AA', 'co.SBP', 'co.SBQP') => ('p', 'EA', 'co.SBP', 'co.SBQP')
('p', 'AA', 'SBP', 'SBQP') => ('-d', 'AA', 'SBP', 'SBQP')
('p', 'AA', 'SBP', 'SBQP') => ('p', 'T', 'SBP', 'SBQP')
('p', 'AA', 'SBP', 'SBQP') => ('p', 'EA', 'SBP', 'SBQP')
('p', 'EA', 'SBP', 'SBQP') => ('-d', 'EA', 'SBP', 'SBQP')
('p', 'EA', 'co.SBP', 'co.SBQP') => ('-d', 'EA', 'co.SBP', 'co.SBQP')
('p', 'T', 'SBP', 'SBQP') => ('-d', 'T', 'SBP', 'SBQP')
('p', 'T', 'co.SBP', 'co.SBQP') => ('-d', 'T', 'co.SBP', 'co.SBQP')
('p', 'A', 'RG(2)', 'QRG(2)') => ('-d', 'A', 'RG(2)', 'QRG(2)')
('p', 'A', 'RG(2)', 'QRG(2)') => ('p', 'R', 'RG(2)', 'QRG(2)')
('p', 'A', 'RG(2)', 'QRG(2)') => ('p', 'AA', 'RG(2)', 'QRG(2)')
('p', 'A', 'RP', 'QRG(2)') => ('-d', 'A', 'RP', 'QRG(2)')
('p', 'A', 'RP', 'QRG(2)') => ('p', 'R', 'RP', 'QRG(2)')
('p', 'A', 'RP', 'QRG(2)') => ('p', 'AA', 'RP', 'QRG(2)')
('p', 'A', 'co.RP', 'QRG(2)') => ('-d', 'A', 'co.RP', 'QRG(2)')
('p', 'A', 'co.RP', 'QRG(2)') => ('p', 'R', 'co.RP', 'QRG(2)')
('p', 'A', 'co.RP', 'QRG(2)') => ('p', 'AA', 'co.RP', 'QRG(2)')
('p', 'A', 'ZPP', 'QRG(2)') => ('-d', 'A', 'ZPP', 'QRG(2)')
('p', 'A', 'ZPP', 'QRG(2)') => ('p', 'R', 'ZPP', 'QRG(2)')
('p', 'A', 'ZPP', 'QRG(2)') => ('p', 'AA', 'ZPP', 'QRG(2)')
('p', 'A', 'P', 'QRG(2)') => ('-d', 'A', 'P', 'QRG(2)')
('p', 'A', 'P', 'QRG(2)') => ('p', 'R', 'P', 'QRG(2)')
('p', 'A', 'P', 'QRG(2)') => ('p', 'AA', 'P', 'QRG(2)')
('p', 'AA', 'P', 'QRG(2)') => ('-d', 'AA', 'P', 'QRG(2)')
('p', 'AA', 'P', 'QRG(2)') => ('p', 'T', 'P', 'QRG(2)')
('p', 'AA', 'P', 'QRG(2)') => ('p', 'EA', 'P', 'QRG(2)')
('p', 'EA', 'P', 'QRG(2)') => ('-d', 'EA', 'P', 'QRG(2)')
('p', 'T', 'P', 'QRG(2)') => ('-d', 'T', 'P', 'QRG(2)')
('p', 'R', 'P', 'QRG(2)') => ('-d', 'R', 'P', 'QRG(2)')
('-p', 'R', 'QRG(2)', 'P') => ('-p', 'A', 'QRG(2)', 'P')
('p', 'AA', 'ZPP', 'QRG(2)') => ('-d', 'AA', 'ZPP', 'QRG(2)')
('p', 'AA', 'ZPP', 'QRG(2)') => ('p', 'T', 'ZPP', 'QRG(2)')
('p', 'AA', 'ZPP', 'QRG(2)') => ('p', 'EA', 'ZPP', 'QRG(2)')
('p', 'EA', 'ZPP', 'QRG(2)') => ('-d', 'EA', 'ZPP', 'QRG(2)')
('p', 'T', 'ZPP', 'QRG(2)') => ('-d', 'T', 'ZPP', 'QRG(2)')
('p', 'AA', 'co.RP', 'QRG(2)') => ('-d', 'AA', 'co.RP', 'QRG(2)')
('p', 'AA', 'co.RP', 'QRG(2)') => ('p', 'T', 'co.RP', 'QRG(2)')
('p', 'AA', 'co.RP', 'QRG(2)') => ('p', 'EA', 'co.RP', 'QRG(2)')
('p', 'AA', 'RP', 'QRG(2)') => ('-d', 'AA', 'RP', 'QRG(2)')
('p', 'AA', 'RP', 'QRG(2)') => ('p', 'T', 'RP', 'QRG(2)')
('p', 'AA', 'RP', 'QRG(2)') => ('p', 'EA', 'RP', 'QRG(2)')
('p', 'EA', 'RP', 'QRG(2)') => ('-d', 'EA', 'RP', 'QRG(2)')
('p', 'EA', 'co.RP', 'QRG(2)') => ('-d', 'EA', 'co.RP', 'QRG(2)')
('p', 'T', 'RP', 'QRG(2)') => ('-d', 'T', 'RP', 'QRG(2)')
('p', 'T', 'co.RP', 'QRG(2)') => ('-d', 'T', 'co.RP', 'QRG(2)')
('d', 'A', 'QRG(2)', 'RP') => ('-p', 'A', 'QRG(2)', 'RP')
('d', 'A', 'QRG(2)', 'co.RP') => ('-p', 'A', 'QRG(2)', 'co.RP')
('d', 'A', 'QRG(2)', 'co.AWPP') => ('-p', 'A', 'QRG(2)', 'co.AWPP')
('d', 'A', 'QRG(2)', 'AWPP') => ('-p', 'A', 'QRG(2)', 'AWPP')
('p', 'E', 'P^Sharp-P', 'QRG(2)') => ('-d', 'E', 'P^Sharp-P', 'QRG(2)')
('d', 'A', 'QRG(2)', 'SZK') => ('-p', 'A', 'QRG(2)', 'SZK')
('p', 'A', 'NP', 'QRG(2)') => ('-d', 'A', 'NP', 'QRG(2)')
('p', 'A', 'NP', 'QRG(2)') => ('p', 'R', 'NP', 'QRG(2)')
('p', 'A', 'NP', 'QRG(2)') => ('p', 'AA', 'NP', 'QRG(2)')
('p', 'A', 'co.NP', 'QRG(2)') => ('-d', 'A', 'co.NP', 'QRG(2)')
('p', 'A', 'co.NP', 'QRG(2)') => ('p', 'R', 'co.NP', 'QRG(2)')
('p', 'A', 'co.NP', 'QRG(2)') => ('p', 'AA', 'co.NP', 'QRG(2)')
('p', 'A', 'cocap.NP', 'QRG(2)') => ('-d', 'A', 'cocap.NP', 'QRG(2)')
('p', 'A', 'cocap.NP', 'QRG(2)') => ('p', 'R', 'cocap.NP', 'QRG(2)')
('p', 'A', 'cocap.NP', 'QRG(2)') => ('p', 'AA', 'cocap.NP', 'QRG(2)')
('p', 'AA', 'cocap.NP', 'QRG(2)') => ('-d', 'AA', 'cocap.NP', 'QRG(2)')
('p', 'AA', 'cocap.NP', 'QRG(2)') => ('p', 'T', 'cocap.NP', 'QRG(2)')
('p', 'AA', 'cocap.NP', 'QRG(2)') => ('p', 'EA', 'cocap.NP', 'QRG(2)')
('p', 'EA', 'cocap.NP', 'QRG(2)') => ('-d', 'EA', 'cocap.NP', 'QRG(2)')
('p', 'T', 'cocap.NP', 'QRG(2)') => ('-d', 'T', 'cocap.NP', 'QRG(2)')
('d', 'A', 'QRG(2)', 'NP') => ('-p', 'A', 'QRG(2)', 'NP')
('d', 'A', 'QRG(2)', 'co.NP') => ('-p', 'A', 'QRG(2)', 'co.NP')
('d', 'A', 'QRG(2)', 'P/poly') => ('-p', 'A', 'QRG(2)', 'P/poly')
('d', 'A', 'QRG(2)', 'SBP') => ('-p', 'A', 'QRG(2)', 'SBP')
('d', 'A', 'QRG(2)', 'co.SBP') => ('-p', 'A', 'QRG(2)', 'co.SBP')
('d', 'A', 'QRG(2)', '(NP-cap-coNP)/poly') => ('-p', 'A', 'QRG(2)', '(NP-cap-coNP)/poly')
('d', 'A', 'QRG(2)', 'BQP/mpoly') => ('-p', 'A', 'QRG(2)', 'BQP/mpoly')
('d', 'A', 'QRG(2)', 'AM') => ('-p', 'A', 'QRG(2)', 'AM')
('d', 'A', 'QRG(2)', 'co.AM') => ('-p', 'A', 'QRG(2)', 'co.AM')
('d', 'A', 'QRG(2)', 'IP') => ('-p', 'A', 'QRG(2)', 'IP')
('d', 'A', 'QRG(2)', 'co.IP') => ('-p', 'A', 'QRG(2)', 'co.IP')
('d', 'A', 'QRG(2)', 'BQP/qpoly') => ('-p', 'A', 'QRG(2)', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'QRG(2)') => ('-d', 'AA', 'co.NP', 'QRG(2)')
('p', 'AA', 'co.NP', 'QRG(2)') => ('p', 'T', 'co.NP', 'QRG(2)')
('p', 'AA', 'co.NP', 'QRG(2)') => ('p', 'EA', 'co.NP', 'QRG(2)')
('p', 'AA', 'NP', 'QRG(2)') => ('-d', 'AA', 'NP', 'QRG(2)')
('p', 'AA', 'NP', 'QRG(2)') => ('p', 'T', 'NP', 'QRG(2)')
('p', 'AA', 'NP', 'QRG(2)') => ('p', 'EA', 'NP', 'QRG(2)')
('p', 'EA', 'NP', 'QRG(2)') => ('-d', 'EA', 'NP', 'QRG(2)')
('p', 'EA', 'co.NP', 'QRG(2)') => ('-d', 'EA', 'co.NP', 'QRG(2)')
('p', 'T', 'NP', 'QRG(2)') => ('-d', 'T', 'NP', 'QRG(2)')
('p', 'T', 'co.NP', 'QRG(2)') => ('-d', 'T', 'co.NP', 'QRG(2)')
('p', 'A', 'Delta_2P', 'QRG(2)') => ('-d', 'A', 'Delta_2P', 'QRG(2)')
('p', 'A', 'Delta_2P', 'QRG(2)') => ('p', 'R', 'Delta_2P', 'QRG(2)')
('p', 'A', 'Delta_2P', 'QRG(2)') => ('p', 'AA', 'Delta_2P', 'QRG(2)')
('d', 'A', 'QRG(2)', 'PP') => ('-p', 'A', 'QRG(2)', 'PP')
('p', 'AA', 'Delta_2P', 'QRG(2)') => ('-d', 'AA', 'Delta_2P', 'QRG(2)')
('p', 'AA', 'Delta_2P', 'QRG(2)') => ('p', 'T', 'Delta_2P', 'QRG(2)')
('p', 'AA', 'Delta_2P', 'QRG(2)') => ('p', 'EA', 'Delta_2P', 'QRG(2)')
('p', 'EA', 'Delta_2P', 'QRG(2)') => ('-d', 'EA', 'Delta_2P', 'QRG(2)')
('p', 'T', 'Delta_2P', 'QRG(2)') => ('-d', 'T', 'Delta_2P', 'QRG(2)')
('p', 'R', 'Delta_2P', 'QRG(2)') => ('-d', 'R', 'Delta_2P', 'QRG(2)')
('p', 'A', 'S_2P', 'QRG(2)') => ('-d', 'A', 'S_2P', 'QRG(2)')
('p', 'A', 'S_2P', 'QRG(2)') => ('p', 'R', 'S_2P', 'QRG(2)')
('p', 'A', 'S_2P', 'QRG(2)') => ('p', 'AA', 'S_2P', 'QRG(2)')
('p', 'AA', 'S_2P', 'QRG(2)') => ('-d', 'AA', 'S_2P', 'QRG(2)')
('p', 'AA', 'S_2P', 'QRG(2)') => ('p', 'T', 'S_2P', 'QRG(2)')
('p', 'AA', 'S_2P', 'QRG(2)') => ('p', 'EA', 'S_2P', 'QRG(2)')
('p', 'EA', 'S_2P', 'QRG(2)') => ('-d', 'EA', 'S_2P', 'QRG(2)')
('p', 'T', 'S_2P', 'QRG(2)') => ('-d', 'T', 'S_2P', 'QRG(2)')
('p', 'R', 'S_2P', 'QRG(2)') => ('-d', 'R', 'S_2P', 'QRG(2)')
('p', 'A', 'RG(1)', 'QRG(2)') => ('-d', 'A', 'RG(1)', 'QRG(2)')
('p', 'A', 'RG(1)', 'QRG(2)') => ('p', 'R', 'RG(1)', 'QRG(2)')
('p', 'A', 'RG(1)', 'QRG(2)') => ('p', 'AA', 'RG(1)', 'QRG(2)')
('p', 'AA', 'RG(1)', 'QRG(2)') => ('-d', 'AA', 'RG(1)', 'QRG(2)')
('p', 'AA', 'RG(1)', 'QRG(2)') => ('p', 'T', 'RG(1)', 'QRG(2)')
('p', 'AA', 'RG(1)', 'QRG(2)') => ('p', 'EA', 'RG(1)', 'QRG(2)')
('p', 'EA', 'RG(1)', 'QRG(2)') => ('-d', 'EA', 'RG(1)', 'QRG(2)')
('p', 'T', 'RG(1)', 'QRG(2)') => ('-d', 'T', 'RG(1)', 'QRG(2)')
('p', 'R', 'RG(1)', 'QRG(2)') => ('-d', 'R', 'RG(1)', 'QRG(2)')
('-d', 'A', 'RG(2)', 'PSPACE/poly') => ('-d', 'R', 'RG(2)', 'PSPACE/poly')
('-d', 'A', 'RG(2)', 'PSPACE/poly') => ('-d', 'AA', 'RG(2)', 'PSPACE/poly')
('-d', 'AA', 'RG(2)', 'PSPACE/poly') => ('-d', 'T', 'RG(2)', 'PSPACE/poly')
('-d', 'AA', 'RG(2)', 'PSPACE/poly') => ('-d', 'EA', 'RG(2)', 'PSPACE/poly')
('p', 'A', 'RG(2)', 'PSPACE/poly') => ('p', 'R', 'RG(2)', 'PSPACE/poly')
('p', 'A', 'RG(2)', 'PSPACE/poly') => ('p', 'AA', 'RG(2)', 'PSPACE/poly')
('p', 'AA', 'RG(2)', 'PSPACE/poly') => ('p', 'T', 'RG(2)', 'PSPACE/poly')
('p', 'AA', 'RG(2)', 'PSPACE/poly') => ('p', 'EA', 'RG(2)', 'PSPACE/poly')
('-d', 'A', 'RG(2)', 'PSPACE') => ('-d', 'R', 'RG(2)', 'PSPACE')
('-d', 'A', 'RG(2)', 'PSPACE') => ('-d', 'AA', 'RG(2)', 'PSPACE')
('-d', 'AA', 'RG(2)', 'PSPACE') => ('-d', 'T', 'RG(2)', 'PSPACE')
('-d', 'AA', 'RG(2)', 'PSPACE') => ('-d', 'EA', 'RG(2)', 'PSPACE')
('p', 'A', 'RG(2)', 'PSPACE') => ('p', 'R', 'RG(2)', 'PSPACE')
('p', 'A', 'RG(2)', 'PSPACE') => ('p', 'AA', 'RG(2)', 'PSPACE')
('p', 'AA', 'RG(2)', 'PSPACE') => ('p', 'T', 'RG(2)', 'PSPACE')
('p', 'AA', 'RG(2)', 'PSPACE') => ('p', 'EA', 'RG(2)', 'PSPACE')
('p', 'AA', 'RG(2)', 'QRG(2)') => ('-d', 'AA', 'RG(2)', 'QRG(2)')
('p', 'AA', 'RG(2)', 'QRG(2)') => ('p', 'T', 'RG(2)', 'QRG(2)')
('p', 'AA', 'RG(2)', 'QRG(2)') => ('p', 'EA', 'RG(2)', 'QRG(2)')
('p', 'EA', 'RG(2)', 'QRG(2)') => ('-d', 'EA', 'RG(2)', 'QRG(2)')
('p', 'T', 'RG(2)', 'QRG(2)') => ('-d', 'T', 'RG(2)', 'QRG(2)')
('p', 'R', 'RG(2)', 'QRG(2)') => ('-d', 'R', 'RG(2)', 'QRG(2)')
('p', 'A', '+P', 'MP') => ('-d', 'A', '+P', 'MP')
('p', 'A', '+P', 'MP') => ('p', 'R', '+P', 'MP')
('p', 'A', '+P', 'MP') => ('p', 'AA', '+P', 'MP')
('p', 'A', '+P', 'co.MP') => ('-d', 'A', '+P', 'co.MP')
('p', 'A', '+P', 'co.MP') => ('p', 'R', '+P', 'co.MP')
('p', 'A', '+P', 'co.MP') => ('p', 'AA', '+P', 'co.MP')
('p', 'A', '+P', 'cocap.MP') => ('-d', 'A', '+P', 'cocap.MP')
('p', 'A', '+P', 'cocap.MP') => ('p', 'R', '+P', 'cocap.MP')
('p', 'A', '+P', 'cocap.MP') => ('p', 'AA', '+P', 'cocap.MP')
('-d', 'A', '+P', 'MP') => ('-d', 'R', '+P', 'MP')
('-d', 'A', '+P', 'MP') => ('-d', 'AA', '+P', 'MP')
('-d', 'A', '+P', 'cocap.MP') => ('-d', 'R', '+P', 'cocap.MP')
('-d', 'A', '+P', 'cocap.MP') => ('-d', 'AA', '+P', 'cocap.MP')
('-d', 'A', '+P', 'co.MP') => ('-d', 'R', '+P', 'co.MP')
('-d', 'A', '+P', 'co.MP') => ('-d', 'AA', '+P', 'co.MP')
('-d', 'AA', '+P', 'co.MP') => ('-d', 'T', '+P', 'co.MP')
('-d', 'AA', '+P', 'co.MP') => ('-d', 'EA', '+P', 'co.MP')
('-d', 'AA', '+P', 'MP') => ('-d', 'T', '+P', 'MP')
('-d', 'AA', '+P', 'MP') => ('-d', 'EA', '+P', 'MP')
('-d', 'AA', '+P', 'cocap.MP') => ('-d', 'T', '+P', 'cocap.MP')
('-d', 'AA', '+P', 'cocap.MP') => ('-d', 'EA', '+P', 'cocap.MP')
('p', 'AA', '+P', 'cocap.MP') => ('p', 'T', '+P', 'cocap.MP')
('p', 'AA', '+P', 'cocap.MP') => ('p', 'EA', '+P', 'cocap.MP')
('p', 'AA', '+P', 'MP') => ('p', 'T', '+P', 'MP')
('p', 'AA', '+P', 'MP') => ('p', 'EA', '+P', 'MP')
('p', 'AA', '+P', 'co.MP') => ('p', 'T', '+P', 'co.MP')
('p', 'AA', '+P', 'co.MP') => ('p', 'EA', '+P', 'co.MP')
('p', 'A', 'QMA', 'QMA(2)') => ('-d', 'A', 'QMA', 'QMA(2)')
('p', 'A', 'QMA', 'QMA(2)') => ('p', 'R', 'QMA', 'QMA(2)')
('p', 'A', 'QMA', 'QMA(2)') => ('p', 'AA', 'QMA', 'QMA(2)')
('p', 'A', 'co.QMA', 'co.QMA(2)') => ('-d', 'A', 'co.QMA', 'co.QMA(2)')
('p', 'A', 'co.QMA', 'co.QMA(2)') => ('p', 'R', 'co.QMA', 'co.QMA(2)')
('p', 'A', 'co.QMA', 'co.QMA(2)') => ('p', 'AA', 'co.QMA', 'co.QMA(2)')
('p', 'A', 'cocap.QMA', 'cocap.QMA(2)') => ('-d', 'A', 'cocap.QMA', 'cocap.QMA(2)')
('p', 'A', 'cocap.QMA', 'cocap.QMA(2)') => ('p', 'R', 'cocap.QMA', 'cocap.QMA(2)')
('p', 'A', 'cocap.QMA', 'cocap.QMA(2)') => ('p', 'AA', 'cocap.QMA', 'cocap.QMA(2)')
('d', 'A', 'cocap.QMA(2)', 'RP') => ('-p', 'A', 'cocap.QMA(2)', 'RP')
('d', 'A', 'cocap.QMA(2)', 'co.RP') => ('-p', 'A', 'cocap.QMA(2)', 'co.RP')
('p', 'A', 'P', 'cocap.QMA(2)') => ('-d', 'A', 'P', 'cocap.QMA(2)')
('p', 'A', 'P', 'cocap.QMA(2)') => ('p', 'R', 'P', 'cocap.QMA(2)')
('p', 'A', 'P', 'cocap.QMA(2)') => ('p', 'AA', 'P', 'cocap.QMA(2)')
('-d', 'A', 'P', 'QMA(2)') => ('-d', 'R', 'P', 'QMA(2)')
('-d', 'A', 'P', 'QMA(2)') => ('-d', 'AA', 'P', 'QMA(2)')
('-d', 'A', 'P', 'co.QMA(2)') => ('-d', 'R', 'P', 'co.QMA(2)')
('-d', 'A', 'P', 'co.QMA(2)') => ('-d', 'AA', 'P', 'co.QMA(2)')
('-d', 'A', 'P', 'cocap.QMA(2)') => ('-d', 'R', 'P', 'cocap.QMA(2)')
('-d', 'A', 'P', 'cocap.QMA(2)') => ('-d', 'AA', 'P', 'cocap.QMA(2)')
('-d', 'AA', 'P', 'cocap.QMA(2)') => ('-d', 'T', 'P', 'cocap.QMA(2)')
('-d', 'AA', 'P', 'cocap.QMA(2)') => ('-d', 'EA', 'P', 'cocap.QMA(2)')
('-d', 'AA', 'P', 'QMA(2)') => ('-d', 'T', 'P', 'QMA(2)')
('-d', 'AA', 'P', 'QMA(2)') => ('-d', 'EA', 'P', 'QMA(2)')
('-d', 'AA', 'P', 'co.QMA(2)') => ('-d', 'T', 'P', 'co.QMA(2)')
('-d', 'AA', 'P', 'co.QMA(2)') => ('-d', 'EA', 'P', 'co.QMA(2)')
('p', 'A', 'P', 'QMA(2)') => ('p', 'R', 'P', 'QMA(2)')
('p', 'A', 'P', 'QMA(2)') => ('p', 'AA', 'P', 'QMA(2)')
('p', 'A', 'P', 'co.QMA(2)') => ('p', 'R', 'P', 'co.QMA(2)')
('p', 'A', 'P', 'co.QMA(2)') => ('p', 'AA', 'P', 'co.QMA(2)')
('p', 'AA', 'P', 'co.QMA(2)') => ('p', 'T', 'P', 'co.QMA(2)')
('p', 'AA', 'P', 'co.QMA(2)') => ('p', 'EA', 'P', 'co.QMA(2)')
('p', 'AA', 'P', 'QMA(2)') => ('p', 'T', 'P', 'QMA(2)')
('p', 'AA', 'P', 'QMA(2)') => ('p', 'EA', 'P', 'QMA(2)')
('p', 'AA', 'P', 'cocap.QMA(2)') => ('p', 'T', 'P', 'cocap.QMA(2)')
('p', 'AA', 'P', 'cocap.QMA(2)') => ('p', 'EA', 'P', 'cocap.QMA(2)')
('d', 'A', 'cocap.QMA(2)', 'co.Sigma_2P') => ('-p', 'A', 'cocap.QMA(2)', 'co.Sigma_2P')
('d', 'A', 'cocap.QMA(2)', 'Sigma_2P') => ('-p', 'A', 'cocap.QMA(2)', 'Sigma_2P')
('-d', 'A', 'cocap.QMA', 'QMA(2)') => ('-d', 'R', 'cocap.QMA', 'QMA(2)')
('-d', 'A', 'cocap.QMA', 'QMA(2)') => ('-d', 'AA', 'cocap.QMA', 'QMA(2)')
('-d', 'A', 'cocap.QMA', 'co.QMA(2)') => ('-d', 'R', 'cocap.QMA', 'co.QMA(2)')
('-d', 'A', 'cocap.QMA', 'co.QMA(2)') => ('-d', 'AA', 'cocap.QMA', 'co.QMA(2)')
('-d', 'A', 'cocap.QMA', 'cocap.QMA(2)') => ('-d', 'R', 'cocap.QMA', 'cocap.QMA(2)')
('-d', 'A', 'cocap.QMA', 'cocap.QMA(2)') => ('-d', 'AA', 'cocap.QMA', 'cocap.QMA(2)')
('-d', 'A', 'BQP', 'cocap.QMA(2)') => ('-d', 'R', 'BQP', 'cocap.QMA(2)')
('-d', 'A', 'BQP', 'cocap.QMA(2)') => ('-d', 'AA', 'BQP', 'cocap.QMA(2)')
('-d', 'A', 'BQP', 'QMA(2)') => ('-d', 'R', 'BQP', 'QMA(2)')
('-d', 'A', 'BQP', 'QMA(2)') => ('-d', 'AA', 'BQP', 'QMA(2)')
('-d', 'A', 'BQP', 'co.QMA(2)') => ('-d', 'R', 'BQP', 'co.QMA(2)')
('-d', 'A', 'BQP', 'co.QMA(2)') => ('-d', 'AA', 'BQP', 'co.QMA(2)')
('-d', 'A', 'BPP', 'co.QMA(2)') => ('-d', 'AA', 'BPP', 'co.QMA(2)')
('-d', 'A', 'BPP', 'QMA(2)') => ('-d', 'AA', 'BPP', 'QMA(2)')
('-d', 'A', 'BPP', 'cocap.QMA(2)') => ('-d', 'AA', 'BPP', 'cocap.QMA(2)')
('-d', 'AA', 'BPP', 'cocap.QMA(2)') => ('-d', 'T', 'BPP', 'cocap.QMA(2)')
('-d', 'AA', 'BPP', 'cocap.QMA(2)') => ('-d', 'EA', 'BPP', 'cocap.QMA(2)')
('-d', 'AA', 'BPP', 'QMA(2)') => ('-d', 'T', 'BPP', 'QMA(2)')
('-d', 'AA', 'BPP', 'QMA(2)') => ('-d', 'EA', 'BPP', 'QMA(2)')
('-d', 'AA', 'BPP', 'co.QMA(2)') => ('-d', 'T', 'BPP', 'co.QMA(2)')
('-d', 'AA', 'BPP', 'co.QMA(2)') => ('-d', 'EA', 'BPP', 'co.QMA(2)')
('-d', 'AA', 'BQP', 'co.QMA(2)') => ('-d', 'T', 'BQP', 'co.QMA(2)')
('-d', 'AA', 'BQP', 'co.QMA(2)') => ('-d', 'EA', 'BQP', 'co.QMA(2)')
('-d', 'AA', 'BQP', 'QMA(2)') => ('-d', 'T', 'BQP', 'QMA(2)')
('-d', 'AA', 'BQP', 'QMA(2)') => ('-d', 'EA', 'BQP', 'QMA(2)')
('-d', 'AA', 'BQP', 'cocap.QMA(2)') => ('-d', 'T', 'BQP', 'cocap.QMA(2)')
('-d', 'AA', 'BQP', 'cocap.QMA(2)') => ('-d', 'EA', 'BQP', 'cocap.QMA(2)')
('-d', 'A', 'cocap.QMA', 'EXP') => ('-d', 'R', 'cocap.QMA', 'EXP')
('-d', 'A', 'cocap.QMA', 'EXP') => ('-d', 'AA', 'cocap.QMA', 'EXP')
('-d', 'A', 'cocap.QCMA', 'EXP') => ('-d', 'R', 'cocap.QCMA', 'EXP')
('-d', 'A', 'cocap.QCMA', 'EXP') => ('-d', 'AA', 'cocap.QCMA', 'EXP')
('-d', 'AA', 'cocap.QCMA', 'EXP') => ('-d', 'T', 'cocap.QCMA', 'EXP')
('-d', 'AA', 'cocap.QCMA', 'EXP') => ('-d', 'EA', 'cocap.QCMA', 'EXP')
('-d', 'AA', 'cocap.QMA', 'EXP') => ('-d', 'T', 'cocap.QMA', 'EXP')
('-d', 'AA', 'cocap.QMA', 'EXP') => ('-d', 'EA', 'cocap.QMA', 'EXP')
('-d', 'A', 'cocap.QCMA', 'cocap.QMA(2)') => ('-d', 'R', 'cocap.QCMA', 'cocap.QMA(2)')
('-d', 'A', 'cocap.QCMA', 'cocap.QMA(2)') => ('-d', 'AA', 'cocap.QCMA', 'cocap.QMA(2)')
('-d', 'A', 'cocap.QCMA', 'QMA(2)') => ('-d', 'R', 'cocap.QCMA', 'QMA(2)')
('-d', 'A', 'cocap.QCMA', 'QMA(2)') => ('-d', 'AA', 'cocap.QCMA', 'QMA(2)')
('-d', 'A', 'cocap.QCMA', 'co.QMA(2)') => ('-d', 'R', 'cocap.QCMA', 'co.QMA(2)')
('-d', 'A', 'cocap.QCMA', 'co.QMA(2)') => ('-d', 'AA', 'cocap.QCMA', 'co.QMA(2)')
('-d', 'A', 'cocap.NP', 'co.QMA(2)') => ('-d', 'AA', 'cocap.NP', 'co.QMA(2)')
('-d', 'A', 'cocap.NP', 'QMA(2)') => ('-d', 'AA', 'cocap.NP', 'QMA(2)')
('-d', 'A', 'cocap.NP', 'cocap.QMA(2)') => ('-d', 'AA', 'cocap.NP', 'cocap.QMA(2)')
('-d', 'A', 'ZPP', 'cocap.QMA(2)') => ('-d', 'AA', 'ZPP', 'cocap.QMA(2)')
('-d', 'A', 'ZPP', 'QMA(2)') => ('-d', 'AA', 'ZPP', 'QMA(2)')
('-d', 'A', 'ZPP', 'co.QMA(2)') => ('-d', 'AA', 'ZPP', 'co.QMA(2)')
('-d', 'AA', 'ZPP', 'co.QMA(2)') => ('-d', 'T', 'ZPP', 'co.QMA(2)')
('-d', 'AA', 'ZPP', 'co.QMA(2)') => ('-d', 'EA', 'ZPP', 'co.QMA(2)')
('-d', 'AA', 'ZPP', 'QMA(2)') => ('-d', 'T', 'ZPP', 'QMA(2)')
('-d', 'AA', 'ZPP', 'QMA(2)') => ('-d', 'EA', 'ZPP', 'QMA(2)')
('-d', 'AA', 'ZPP', 'cocap.QMA(2)') => ('-d', 'T', 'ZPP', 'cocap.QMA(2)')
('-d', 'AA', 'ZPP', 'cocap.QMA(2)') => ('-d', 'EA', 'ZPP', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.NP', 'cocap.QMA(2)') => ('-d', 'T', 'cocap.NP', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.NP', 'cocap.QMA(2)') => ('-d', 'EA', 'cocap.NP', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.NP', 'QMA(2)') => ('-d', 'T', 'cocap.NP', 'QMA(2)')
('-d', 'AA', 'cocap.NP', 'QMA(2)') => ('-d', 'EA', 'cocap.NP', 'QMA(2)')
('-d', 'AA', 'cocap.NP', 'co.QMA(2)') => ('-d', 'T', 'cocap.NP', 'co.QMA(2)')
('-d', 'AA', 'cocap.NP', 'co.QMA(2)') => ('-d', 'EA', 'cocap.NP', 'co.QMA(2)')
('-d', 'A', 'cocap.MA', 'co.QMA(2)') => ('-d', 'AA', 'cocap.MA', 'co.QMA(2)')
('-d', 'A', 'cocap.MA', 'QMA(2)') => ('-d', 'AA', 'cocap.MA', 'QMA(2)')
('-d', 'A', 'cocap.MA', 'cocap.QMA(2)') => ('-d', 'AA', 'cocap.MA', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.MA', 'cocap.QMA(2)') => ('-d', 'T', 'cocap.MA', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.MA', 'cocap.QMA(2)') => ('-d', 'EA', 'cocap.MA', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.MA', 'QMA(2)') => ('-d', 'T', 'cocap.MA', 'QMA(2)')
('-d', 'AA', 'cocap.MA', 'QMA(2)') => ('-d', 'EA', 'cocap.MA', 'QMA(2)')
('-d', 'AA', 'cocap.MA', 'co.QMA(2)') => ('-d', 'T', 'cocap.MA', 'co.QMA(2)')
('-d', 'AA', 'cocap.MA', 'co.QMA(2)') => ('-d', 'EA', 'cocap.MA', 'co.QMA(2)')
('-d', 'AA', 'cocap.QCMA', 'co.QMA(2)') => ('-d', 'T', 'cocap.QCMA', 'co.QMA(2)')
('-d', 'AA', 'cocap.QCMA', 'co.QMA(2)') => ('-d', 'EA', 'cocap.QCMA', 'co.QMA(2)')
('-d', 'AA', 'cocap.QCMA', 'QMA(2)') => ('-d', 'T', 'cocap.QCMA', 'QMA(2)')
('-d', 'AA', 'cocap.QCMA', 'QMA(2)') => ('-d', 'EA', 'cocap.QCMA', 'QMA(2)')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMA(2)') => ('-d', 'T', 'cocap.QCMA', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.QCMA', 'cocap.QMA(2)') => ('-d', 'EA', 'cocap.QCMA', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.QMA', 'cocap.QMA(2)') => ('-d', 'T', 'cocap.QMA', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.QMA', 'cocap.QMA(2)') => ('-d', 'EA', 'cocap.QMA', 'cocap.QMA(2)')
('-d', 'AA', 'cocap.QMA', 'QMA(2)') => ('-d', 'T', 'cocap.QMA', 'QMA(2)')
('-d', 'AA', 'cocap.QMA', 'QMA(2)') => ('-d', 'EA', 'cocap.QMA', 'QMA(2)')
('-d', 'AA', 'cocap.QMA', 'co.QMA(2)') => ('-d', 'T', 'cocap.QMA', 'co.QMA(2)')
('-d', 'AA', 'cocap.QMA', 'co.QMA(2)') => ('-d', 'EA', 'cocap.QMA', 'co.QMA(2)')
('p', 'A', 'cocap.QMA', 'QMA(2)') => ('p', 'R', 'cocap.QMA', 'QMA(2)')
('p', 'A', 'cocap.QMA', 'QMA(2)') => ('p', 'AA', 'cocap.QMA', 'QMA(2)')
('p', 'A', 'cocap.QMA', 'co.QMA(2)') => ('p', 'R', 'cocap.QMA', 'co.QMA(2)')
('p', 'A', 'cocap.QMA', 'co.QMA(2)') => ('p', 'AA', 'cocap.QMA', 'co.QMA(2)')
('p', 'A', 'BQP', 'co.QMA(2)') => ('p', 'R', 'BQP', 'co.QMA(2)')
('p', 'A', 'BQP', 'co.QMA(2)') => ('p', 'AA', 'BQP', 'co.QMA(2)')
('p', 'A', 'BQP', 'QMA(2)') => ('p', 'R', 'BQP', 'QMA(2)')
('p', 'A', 'BQP', 'QMA(2)') => ('p', 'AA', 'BQP', 'QMA(2)')
('p', 'A', 'BQP', 'cocap.QMA(2)') => ('p', 'R', 'BQP', 'cocap.QMA(2)')
('p', 'A', 'BQP', 'cocap.QMA(2)') => ('p', 'AA', 'BQP', 'cocap.QMA(2)')
('p', 'A', 'BPP', 'cocap.QMA(2)') => ('p', 'R', 'BPP', 'cocap.QMA(2)')
('p', 'A', 'BPP', 'cocap.QMA(2)') => ('p', 'AA', 'BPP', 'cocap.QMA(2)')
('p', 'A', 'BPP', 'QMA(2)') => ('p', 'R', 'BPP', 'QMA(2)')
('p', 'A', 'BPP', 'QMA(2)') => ('p', 'AA', 'BPP', 'QMA(2)')
('p', 'A', 'BPP', 'co.QMA(2)') => ('p', 'R', 'BPP', 'co.QMA(2)')
('p', 'A', 'BPP', 'co.QMA(2)') => ('p', 'AA', 'BPP', 'co.QMA(2)')
('p', 'AA', 'BPP', 'co.QMA(2)') => ('p', 'T', 'BPP', 'co.QMA(2)')
('p', 'AA', 'BPP', 'co.QMA(2)') => ('p', 'EA', 'BPP', 'co.QMA(2)')
('p', 'AA', 'BPP', 'QMA(2)') => ('p', 'T', 'BPP', 'QMA(2)')
('p', 'AA', 'BPP', 'QMA(2)') => ('p', 'EA', 'BPP', 'QMA(2)')
('p', 'AA', 'BPP', 'cocap.QMA(2)') => ('p', 'T', 'BPP', 'cocap.QMA(2)')
('p', 'AA', 'BPP', 'cocap.QMA(2)') => ('p', 'EA', 'BPP', 'cocap.QMA(2)')
('p', 'AA', 'BQP', 'cocap.QMA(2)') => ('p', 'T', 'BQP', 'cocap.QMA(2)')
('p', 'AA', 'BQP', 'cocap.QMA(2)') => ('p', 'EA', 'BQP', 'cocap.QMA(2)')
('p', 'AA', 'BQP', 'QMA(2)') => ('p', 'T', 'BQP', 'QMA(2)')
('p', 'AA', 'BQP', 'QMA(2)') => ('p', 'EA', 'BQP', 'QMA(2)')
('p', 'AA', 'BQP', 'co.QMA(2)') => ('p', 'T', 'BQP', 'co.QMA(2)')
('p', 'AA', 'BQP', 'co.QMA(2)') => ('p', 'EA', 'BQP', 'co.QMA(2)')
('p', 'A', 'cocap.QMA', 'EXP') => ('p', 'R', 'cocap.QMA', 'EXP')
('p', 'A', 'cocap.QMA', 'EXP') => ('p', 'AA', 'cocap.QMA', 'EXP')
('p', 'A', 'cocap.QCMA', 'EXP') => ('p', 'R', 'cocap.QCMA', 'EXP')
('p', 'A', 'cocap.QCMA', 'EXP') => ('p', 'AA', 'cocap.QCMA', 'EXP')
('p', 'AA', 'cocap.QCMA', 'EXP') => ('p', 'T', 'cocap.QCMA', 'EXP')
('p', 'AA', 'cocap.QCMA', 'EXP') => ('p', 'EA', 'cocap.QCMA', 'EXP')
('p', 'AA', 'cocap.QMA', 'EXP') => ('p', 'T', 'cocap.QMA', 'EXP')
('p', 'AA', 'cocap.QMA', 'EXP') => ('p', 'EA', 'cocap.QMA', 'EXP')
('p', 'A', 'cocap.QCMA', 'co.QMA(2)') => ('p', 'R', 'cocap.QCMA', 'co.QMA(2)')
('p', 'A', 'cocap.QCMA', 'co.QMA(2)') => ('p', 'AA', 'cocap.QCMA', 'co.QMA(2)')
('p', 'A', 'cocap.QCMA', 'QMA(2)') => ('p', 'R', 'cocap.QCMA', 'QMA(2)')
('p', 'A', 'cocap.QCMA', 'QMA(2)') => ('p', 'AA', 'cocap.QCMA', 'QMA(2)')
('p', 'A', 'cocap.QCMA', 'cocap.QMA(2)') => ('p', 'R', 'cocap.QCMA', 'cocap.QMA(2)')
('p', 'A', 'cocap.QCMA', 'cocap.QMA(2)') => ('p', 'AA', 'cocap.QCMA', 'cocap.QMA(2)')
('p', 'A', 'cocap.NP', 'cocap.QMA(2)') => ('p', 'R', 'cocap.NP', 'cocap.QMA(2)')
('p', 'A', 'cocap.NP', 'cocap.QMA(2)') => ('p', 'AA', 'cocap.NP', 'cocap.QMA(2)')
('p', 'A', 'cocap.NP', 'QMA(2)') => ('p', 'R', 'cocap.NP', 'QMA(2)')
('p', 'A', 'cocap.NP', 'QMA(2)') => ('p', 'AA', 'cocap.NP', 'QMA(2)')
('p', 'A', 'cocap.NP', 'co.QMA(2)') => ('p', 'R', 'cocap.NP', 'co.QMA(2)')
('p', 'A', 'cocap.NP', 'co.QMA(2)') => ('p', 'AA', 'cocap.NP', 'co.QMA(2)')
('p', 'A', 'ZPP', 'co.QMA(2)') => ('p', 'R', 'ZPP', 'co.QMA(2)')
('p', 'A', 'ZPP', 'co.QMA(2)') => ('p', 'AA', 'ZPP', 'co.QMA(2)')
('p', 'A', 'ZPP', 'QMA(2)') => ('p', 'R', 'ZPP', 'QMA(2)')
('p', 'A', 'ZPP', 'QMA(2)') => ('p', 'AA', 'ZPP', 'QMA(2)')
('p', 'A', 'ZPP', 'cocap.QMA(2)') => ('p', 'R', 'ZPP', 'cocap.QMA(2)')
('p', 'A', 'ZPP', 'cocap.QMA(2)') => ('p', 'AA', 'ZPP', 'cocap.QMA(2)')
('p', 'AA', 'ZPP', 'cocap.QMA(2)') => ('p', 'T', 'ZPP', 'cocap.QMA(2)')
('p', 'AA', 'ZPP', 'cocap.QMA(2)') => ('p', 'EA', 'ZPP', 'cocap.QMA(2)')
('p', 'AA', 'ZPP', 'QMA(2)') => ('p', 'T', 'ZPP', 'QMA(2)')
('p', 'AA', 'ZPP', 'QMA(2)') => ('p', 'EA', 'ZPP', 'QMA(2)')
('p', 'AA', 'ZPP', 'co.QMA(2)') => ('p', 'T', 'ZPP', 'co.QMA(2)')
('p', 'AA', 'ZPP', 'co.QMA(2)') => ('p', 'EA', 'ZPP', 'co.QMA(2)')
('p', 'AA', 'cocap.NP', 'co.QMA(2)') => ('p', 'T', 'cocap.NP', 'co.QMA(2)')
('p', 'AA', 'cocap.NP', 'co.QMA(2)') => ('p', 'EA', 'cocap.NP', 'co.QMA(2)')
('p', 'AA', 'cocap.NP', 'QMA(2)') => ('p', 'T', 'cocap.NP', 'QMA(2)')
('p', 'AA', 'cocap.NP', 'QMA(2)') => ('p', 'EA', 'cocap.NP', 'QMA(2)')
('p', 'AA', 'cocap.NP', 'cocap.QMA(2)') => ('p', 'T', 'cocap.NP', 'cocap.QMA(2)')
('p', 'AA', 'cocap.NP', 'cocap.QMA(2)') => ('p', 'EA', 'cocap.NP', 'cocap.QMA(2)')
('p', 'A', 'cocap.MA', 'cocap.QMA(2)') => ('p', 'AA', 'cocap.MA', 'cocap.QMA(2)')
('p', 'A', 'cocap.MA', 'QMA(2)') => ('p', 'AA', 'cocap.MA', 'QMA(2)')
('p', 'A', 'cocap.MA', 'co.QMA(2)') => ('p', 'AA', 'cocap.MA', 'co.QMA(2)')
('p', 'AA', 'cocap.MA', 'co.QMA(2)') => ('p', 'T', 'cocap.MA', 'co.QMA(2)')
('p', 'AA', 'cocap.MA', 'co.QMA(2)') => ('p', 'EA', 'cocap.MA', 'co.QMA(2)')
('p', 'AA', 'cocap.MA', 'QMA(2)') => ('p', 'T', 'cocap.MA', 'QMA(2)')
('p', 'AA', 'cocap.MA', 'QMA(2)') => ('p', 'EA', 'cocap.MA', 'QMA(2)')
('p', 'AA', 'cocap.MA', 'cocap.QMA(2)') => ('p', 'T', 'cocap.MA', 'cocap.QMA(2)')
('p', 'AA', 'cocap.MA', 'cocap.QMA(2)') => ('p', 'EA', 'cocap.MA', 'cocap.QMA(2)')
('p', 'AA', 'cocap.QCMA', 'cocap.QMA(2)') => ('p', 'T', 'cocap.QCMA', 'cocap.QMA(2)')
('p', 'AA', 'cocap.QCMA', 'cocap.QMA(2)') => ('p', 'EA', 'cocap.QCMA', 'cocap.QMA(2)')
('p', 'AA', 'cocap.QCMA', 'QMA(2)') => ('p', 'T', 'cocap.QCMA', 'QMA(2)')
('p', 'AA', 'cocap.QCMA', 'QMA(2)') => ('p', 'EA', 'cocap.QCMA', 'QMA(2)')
('p', 'AA', 'cocap.QCMA', 'co.QMA(2)') => ('p', 'T', 'cocap.QCMA', 'co.QMA(2)')
('p', 'AA', 'cocap.QCMA', 'co.QMA(2)') => ('p', 'EA', 'cocap.QCMA', 'co.QMA(2)')
('p', 'AA', 'cocap.QMA', 'co.QMA(2)') => ('p', 'T', 'cocap.QMA', 'co.QMA(2)')
('p', 'AA', 'cocap.QMA', 'co.QMA(2)') => ('p', 'EA', 'cocap.QMA', 'co.QMA(2)')
('p', 'AA', 'cocap.QMA', 'QMA(2)') => ('p', 'T', 'cocap.QMA', 'QMA(2)')
('p', 'AA', 'cocap.QMA', 'QMA(2)') => ('p', 'EA', 'cocap.QMA', 'QMA(2)')
('p', 'AA', 'cocap.QMA', 'cocap.QMA(2)') => ('p', 'T', 'cocap.QMA', 'cocap.QMA(2)')
('p', 'AA', 'cocap.QMA', 'cocap.QMA(2)') => ('p', 'EA', 'cocap.QMA', 'cocap.QMA(2)')
('d', 'A', 'co.QMA(2)', 'P/poly') => ('-p', 'A', 'co.QMA(2)', 'P/poly')
('d', 'A', 'QMA(2)', 'P/poly') => ('-p', 'A', 'QMA(2)', 'P/poly')
('-d', 'A', 'co.QMA', 'NEXP') => ('-d', 'AA', 'co.QMA', 'NEXP')
('-d', 'A', 'co.QMA', 'cocap.NEXP') => ('-d', 'AA', 'co.QMA', 'cocap.NEXP')
('-d', 'A', 'QMA', 'cocap.NEXP') => ('-d', 'AA', 'QMA', 'cocap.NEXP')
('-d', 'A', 'QMA', 'co.NEXP') => ('-d', 'AA', 'QMA', 'co.NEXP')
('-d', 'A', 'QCMA', 'co.NEXP') => ('-d', 'AA', 'QCMA', 'co.NEXP')
('-d', 'A', 'QCMA', 'cocap.NEXP') => ('-d', 'AA', 'QCMA', 'cocap.NEXP')
('-d', 'A', 'co.QCMA', 'cocap.NEXP') => ('-d', 'AA', 'co.QCMA', 'cocap.NEXP')
('-d', 'A', 'co.QCMA', 'NEXP') => ('-d', 'AA', 'co.QCMA', 'NEXP')
('-d', 'AA', 'co.QCMA', 'NEXP') => ('-d', 'T', 'co.QCMA', 'NEXP')
('-d', 'AA', 'co.QCMA', 'NEXP') => ('-d', 'EA', 'co.QCMA', 'NEXP')
('-d', 'AA', 'co.QCMA', 'cocap.NEXP') => ('-d', 'T', 'co.QCMA', 'cocap.NEXP')
('-d', 'AA', 'co.QCMA', 'cocap.NEXP') => ('-d', 'EA', 'co.QCMA', 'cocap.NEXP')
('-d', 'AA', 'QCMA', 'cocap.NEXP') => ('-d', 'T', 'QCMA', 'cocap.NEXP')
('-d', 'AA', 'QCMA', 'cocap.NEXP') => ('-d', 'EA', 'QCMA', 'cocap.NEXP')
('-d', 'AA', 'QCMA', 'co.NEXP') => ('-d', 'T', 'QCMA', 'co.NEXP')
('-d', 'AA', 'QCMA', 'co.NEXP') => ('-d', 'EA', 'QCMA', 'co.NEXP')
('-d', 'AA', 'QMA', 'co.NEXP') => ('-d', 'T', 'QMA', 'co.NEXP')
('-d', 'AA', 'QMA', 'co.NEXP') => ('-d', 'EA', 'QMA', 'co.NEXP')
('-d', 'AA', 'QMA', 'cocap.NEXP') => ('-d', 'T', 'QMA', 'cocap.NEXP')
('-d', 'AA', 'QMA', 'cocap.NEXP') => ('-d', 'EA', 'QMA', 'cocap.NEXP')
('-d', 'AA', 'co.QMA', 'cocap.NEXP') => ('-d', 'T', 'co.QMA', 'cocap.NEXP')
('-d', 'AA', 'co.QMA', 'cocap.NEXP') => ('-d', 'EA', 'co.QMA', 'cocap.NEXP')
('-d', 'AA', 'co.QMA', 'NEXP') => ('-d', 'T', 'co.QMA', 'NEXP')
('-d', 'AA', 'co.QMA', 'NEXP') => ('-d', 'EA', 'co.QMA', 'NEXP')
('p', 'A', 'co.QMA', 'NEXP') => ('p', 'R', 'co.QMA', 'NEXP')
('p', 'A', 'co.QMA', 'NEXP') => ('p', 'AA', 'co.QMA', 'NEXP')
('p', 'A', 'co.QMA', 'cocap.NEXP') => ('p', 'R', 'co.QMA', 'cocap.NEXP')
('p', 'A', 'co.QMA', 'cocap.NEXP') => ('p', 'AA', 'co.QMA', 'cocap.NEXP')
('p', 'A', 'QMA', 'cocap.NEXP') => ('p', 'R', 'QMA', 'cocap.NEXP')
('p', 'A', 'QMA', 'cocap.NEXP') => ('p', 'AA', 'QMA', 'cocap.NEXP')
('p', 'A', 'QMA', 'co.NEXP') => ('p', 'R', 'QMA', 'co.NEXP')
('p', 'A', 'QMA', 'co.NEXP') => ('p', 'AA', 'QMA', 'co.NEXP')
('p', 'A', 'QCMA', 'co.NEXP') => ('p', 'R', 'QCMA', 'co.NEXP')
('p', 'A', 'QCMA', 'co.NEXP') => ('p', 'AA', 'QCMA', 'co.NEXP')
('p', 'A', 'QCMA', 'cocap.NEXP') => ('p', 'R', 'QCMA', 'cocap.NEXP')
('p', 'A', 'QCMA', 'cocap.NEXP') => ('p', 'AA', 'QCMA', 'cocap.NEXP')
('p', 'A', 'co.QCMA', 'cocap.NEXP') => ('p', 'R', 'co.QCMA', 'cocap.NEXP')
('p', 'A', 'co.QCMA', 'cocap.NEXP') => ('p', 'AA', 'co.QCMA', 'cocap.NEXP')
('p', 'A', 'co.QCMA', 'NEXP') => ('p', 'R', 'co.QCMA', 'NEXP')
('p', 'A', 'co.QCMA', 'NEXP') => ('p', 'AA', 'co.QCMA', 'NEXP')
('p', 'AA', 'co.QCMA', 'NEXP') => ('p', 'T', 'co.QCMA', 'NEXP')
('p', 'AA', 'co.QCMA', 'NEXP') => ('p', 'EA', 'co.QCMA', 'NEXP')
('p', 'AA', 'co.QCMA', 'cocap.NEXP') => ('p', 'T', 'co.QCMA', 'cocap.NEXP')
('p', 'AA', 'co.QCMA', 'cocap.NEXP') => ('p', 'EA', 'co.QCMA', 'cocap.NEXP')
('p', 'AA', 'QCMA', 'cocap.NEXP') => ('p', 'T', 'QCMA', 'cocap.NEXP')
('p', 'AA', 'QCMA', 'cocap.NEXP') => ('p', 'EA', 'QCMA', 'cocap.NEXP')
('p', 'AA', 'QCMA', 'co.NEXP') => ('p', 'T', 'QCMA', 'co.NEXP')
('p', 'AA', 'QCMA', 'co.NEXP') => ('p', 'EA', 'QCMA', 'co.NEXP')
('p', 'T', 'QCMA', 'cocap.NEXP') => ('p', 'E', 'QCMA', 'cocap.NEXP')
('p', 'T', 'co.QCMA', 'cocap.NEXP') => ('p', 'E', 'co.QCMA', 'cocap.NEXP')
('p', 'AA', 'QMA', 'co.NEXP') => ('p', 'T', 'QMA', 'co.NEXP')
('p', 'AA', 'QMA', 'co.NEXP') => ('p', 'EA', 'QMA', 'co.NEXP')
('p', 'AA', 'QMA', 'cocap.NEXP') => ('p', 'T', 'QMA', 'cocap.NEXP')
('p', 'AA', 'QMA', 'cocap.NEXP') => ('p', 'EA', 'QMA', 'cocap.NEXP')
('p', 'AA', 'co.QMA', 'cocap.NEXP') => ('p', 'T', 'co.QMA', 'cocap.NEXP')
('p', 'AA', 'co.QMA', 'cocap.NEXP') => ('p', 'EA', 'co.QMA', 'cocap.NEXP')
('p', 'AA', 'co.QMA', 'NEXP') => ('p', 'T', 'co.QMA', 'NEXP')
('p', 'AA', 'co.QMA', 'NEXP') => ('p', 'EA', 'co.QMA', 'NEXP')
('p', 'T', 'co.QMA', 'cocap.NEXP') => ('p', 'E', 'co.QMA', 'cocap.NEXP')
('p', 'T', 'QMA', 'cocap.NEXP') => ('p', 'E', 'QMA', 'cocap.NEXP')
('-d', 'A', 'co.QMA', 'EXP') => ('-d', 'R', 'co.QMA', 'EXP')
('-d', 'A', 'co.QMA', 'EXP') => ('-d', 'AA', 'co.QMA', 'EXP')
('-d', 'A', 'QMA', 'EXP') => ('-d', 'R', 'QMA', 'EXP')
('-d', 'A', 'QMA', 'EXP') => ('-d', 'AA', 'QMA', 'EXP')
('-d', 'A', 'QCMA', 'EXP') => ('-d', 'R', 'QCMA', 'EXP')
('-d', 'A', 'QCMA', 'EXP') => ('-d', 'AA', 'QCMA', 'EXP')
('-d', 'A', 'co.QCMA', 'EXP') => ('-d', 'R', 'co.QCMA', 'EXP')
('-d', 'A', 'co.QCMA', 'EXP') => ('-d', 'AA', 'co.QCMA', 'EXP')
('-d', 'AA', 'co.QCMA', 'EXP') => ('-d', 'T', 'co.QCMA', 'EXP')
('-d', 'AA', 'co.QCMA', 'EXP') => ('-d', 'EA', 'co.QCMA', 'EXP')
('-d', 'AA', 'QCMA', 'EXP') => ('-d', 'T', 'QCMA', 'EXP')
('-d', 'AA', 'QCMA', 'EXP') => ('-d', 'EA', 'QCMA', 'EXP')
('-d', 'AA', 'QMA', 'EXP') => ('-d', 'T', 'QMA', 'EXP')
('-d', 'AA', 'QMA', 'EXP') => ('-d', 'EA', 'QMA', 'EXP')
('-d', 'AA', 'co.QMA', 'EXP') => ('-d', 'T', 'co.QMA', 'EXP')
('-d', 'AA', 'co.QMA', 'EXP') => ('-d', 'EA', 'co.QMA', 'EXP')
('p', 'A', 'co.QMA', 'EXP') => ('p', 'R', 'co.QMA', 'EXP')
('p', 'A', 'co.QMA', 'EXP') => ('p', 'AA', 'co.QMA', 'EXP')
('p', 'A', 'QMA', 'EXP') => ('p', 'R', 'QMA', 'EXP')
('p', 'A', 'QMA', 'EXP') => ('p', 'AA', 'QMA', 'EXP')
('p', 'A', 'QCMA', 'EXP') => ('p', 'R', 'QCMA', 'EXP')
('p', 'A', 'QCMA', 'EXP') => ('p', 'AA', 'QCMA', 'EXP')
('p', 'A', 'co.QCMA', 'EXP') => ('p', 'R', 'co.QCMA', 'EXP')
('p', 'A', 'co.QCMA', 'EXP') => ('p', 'AA', 'co.QCMA', 'EXP')
('p', 'AA', 'co.QCMA', 'EXP') => ('p', 'T', 'co.QCMA', 'EXP')
('p', 'AA', 'co.QCMA', 'EXP') => ('p', 'EA', 'co.QCMA', 'EXP')
('p', 'AA', 'QCMA', 'EXP') => ('p', 'T', 'QCMA', 'EXP')
('p', 'AA', 'QCMA', 'EXP') => ('p', 'EA', 'QCMA', 'EXP')
('p', 'AA', 'QMA', 'EXP') => ('p', 'T', 'QMA', 'EXP')
('p', 'AA', 'QMA', 'EXP') => ('p', 'EA', 'QMA', 'EXP')
('p', 'AA', 'co.QMA', 'EXP') => ('p', 'T', 'co.QMA', 'EXP')
('p', 'AA', 'co.QMA', 'EXP') => ('p', 'EA', 'co.QMA', 'EXP')
('p', 'A', 'co.MA', 'co.QMA(2)') => ('-d', 'A', 'co.MA', 'co.QMA(2)')
('p', 'A', 'co.MA', 'co.QMA(2)') => ('p', 'R', 'co.MA', 'co.QMA(2)')
('p', 'A', 'co.MA', 'co.QMA(2)') => ('p', 'AA', 'co.MA', 'co.QMA(2)')
('p', 'A', 'MA', 'QMA(2)') => ('-d', 'A', 'MA', 'QMA(2)')
('p', 'A', 'MA', 'QMA(2)') => ('p', 'R', 'MA', 'QMA(2)')
('p', 'A', 'MA', 'QMA(2)') => ('p', 'AA', 'MA', 'QMA(2)')
('p', 'A', 'RP', 'QMA(2)') => ('-d', 'A', 'RP', 'QMA(2)')
('p', 'A', 'RP', 'QMA(2)') => ('p', 'R', 'RP', 'QMA(2)')
('p', 'A', 'RP', 'QMA(2)') => ('p', 'AA', 'RP', 'QMA(2)')
('p', 'A', 'co.RP', 'co.QMA(2)') => ('-d', 'A', 'co.RP', 'co.QMA(2)')
('p', 'A', 'co.RP', 'co.QMA(2)') => ('p', 'R', 'co.RP', 'co.QMA(2)')
('p', 'A', 'co.RP', 'co.QMA(2)') => ('p', 'AA', 'co.RP', 'co.QMA(2)')
('p', 'AA', 'co.RP', 'co.QMA(2)') => ('-d', 'AA', 'co.RP', 'co.QMA(2)')
('p', 'AA', 'co.RP', 'co.QMA(2)') => ('p', 'T', 'co.RP', 'co.QMA(2)')
('p', 'AA', 'co.RP', 'co.QMA(2)') => ('p', 'EA', 'co.RP', 'co.QMA(2)')
('p', 'AA', 'RP', 'QMA(2)') => ('-d', 'AA', 'RP', 'QMA(2)')
('p', 'AA', 'RP', 'QMA(2)') => ('p', 'T', 'RP', 'QMA(2)')
('p', 'AA', 'RP', 'QMA(2)') => ('p', 'EA', 'RP', 'QMA(2)')
('p', 'EA', 'RP', 'QMA(2)') => ('-d', 'EA', 'RP', 'QMA(2)')
('p', 'EA', 'co.RP', 'co.QMA(2)') => ('-d', 'EA', 'co.RP', 'co.QMA(2)')
('p', 'T', 'RP', 'QMA(2)') => ('-d', 'T', 'RP', 'QMA(2)')
('p', 'T', 'co.RP', 'co.QMA(2)') => ('-d', 'T', 'co.RP', 'co.QMA(2)')
('p', 'A', 'NP', 'QMA(2)') => ('-d', 'A', 'NP', 'QMA(2)')
('p', 'A', 'NP', 'QMA(2)') => ('p', 'R', 'NP', 'QMA(2)')
('p', 'A', 'NP', 'QMA(2)') => ('p', 'AA', 'NP', 'QMA(2)')
('p', 'A', 'co.NP', 'co.QMA(2)') => ('-d', 'A', 'co.NP', 'co.QMA(2)')
('p', 'A', 'co.NP', 'co.QMA(2)') => ('p', 'R', 'co.NP', 'co.QMA(2)')
('p', 'A', 'co.NP', 'co.QMA(2)') => ('p', 'AA', 'co.NP', 'co.QMA(2)')
('d', 'A', 'co.QMA(2)', '(NP-cap-coNP)/poly') => ('-p', 'A', 'co.QMA(2)', '(NP-cap-coNP)/poly')
('d', 'A', 'QMA(2)', '(NP-cap-coNP)/poly') => ('-p', 'A', 'QMA(2)', '(NP-cap-coNP)/poly')
('d', 'A', 'co.QMA(2)', 'BQP/mpoly') => ('-p', 'A', 'co.QMA(2)', 'BQP/mpoly')
('d', 'A', 'QMA(2)', 'BQP/mpoly') => ('-p', 'A', 'QMA(2)', 'BQP/mpoly')
('d', 'A', 'co.QMA(2)', 'IP') => ('-p', 'A', 'co.QMA(2)', 'IP')
('d', 'A', 'QMA(2)', 'co.IP') => ('-p', 'A', 'QMA(2)', 'co.IP')
('d', 'A', 'co.QMA(2)', 'BQP/qpoly') => ('-p', 'A', 'co.QMA(2)', 'BQP/qpoly')
('d', 'A', 'QMA(2)', 'BQP/qpoly') => ('-p', 'A', 'QMA(2)', 'BQP/qpoly')
('p', 'AA', 'co.NP', 'co.QMA(2)') => ('-d', 'AA', 'co.NP', 'co.QMA(2)')
('p', 'AA', 'co.NP', 'co.QMA(2)') => ('p', 'T', 'co.NP', 'co.QMA(2)')
('p', 'AA', 'co.NP', 'co.QMA(2)') => ('p', 'EA', 'co.NP', 'co.QMA(2)')
('p', 'AA', 'NP', 'QMA(2)') => ('-d', 'AA', 'NP', 'QMA(2)')
('p', 'AA', 'NP', 'QMA(2)') => ('p', 'T', 'NP', 'QMA(2)')
('p', 'AA', 'NP', 'QMA(2)') => ('p', 'EA', 'NP', 'QMA(2)')
('p', 'EA', 'NP', 'QMA(2)') => ('-d', 'EA', 'NP', 'QMA(2)')
('p', 'EA', 'co.NP', 'co.QMA(2)') => ('-d', 'EA', 'co.NP', 'co.QMA(2)')
('p', 'T', 'NP', 'QMA(2)') => ('-d', 'T', 'NP', 'QMA(2)')
('p', 'T', 'co.NP', 'co.QMA(2)') => ('-d', 'T', 'co.NP', 'co.QMA(2)')
('p', 'AA', 'MA', 'QMA(2)') => ('-d', 'AA', 'MA', 'QMA(2)')
('p', 'AA', 'MA', 'QMA(2)') => ('p', 'T', 'MA', 'QMA(2)')
('p', 'AA', 'MA', 'QMA(2)') => ('p', 'EA', 'MA', 'QMA(2)')
('p', 'AA', 'co.MA', 'co.QMA(2)') => ('-d', 'AA', 'co.MA', 'co.QMA(2)')
('p', 'AA', 'co.MA', 'co.QMA(2)') => ('p', 'T', 'co.MA', 'co.QMA(2)')
('p', 'AA', 'co.MA', 'co.QMA(2)') => ('p', 'EA', 'co.MA', 'co.QMA(2)')
('p', 'EA', 'co.MA', 'co.QMA(2)') => ('-d', 'EA', 'co.MA', 'co.QMA(2)')
('p', 'EA', 'MA', 'QMA(2)') => ('-d', 'EA', 'MA', 'QMA(2)')
('p', 'T', 'co.MA', 'co.QMA(2)') => ('-d', 'T', 'co.MA', 'co.QMA(2)')
('p', 'T', 'MA', 'QMA(2)') => ('-d', 'T', 'MA', 'QMA(2)')
('p', 'A', 'co.QCMA', 'co.QMA(2)') => ('-d', 'A', 'co.QCMA', 'co.QMA(2)')
('p', 'A', 'co.QCMA', 'co.QMA(2)') => ('p', 'R', 'co.QCMA', 'co.QMA(2)')
('p', 'A', 'co.QCMA', 'co.QMA(2)') => ('p', 'AA', 'co.QCMA', 'co.QMA(2)')
('p', 'A', 'QCMA', 'QMA(2)') => ('-d', 'A', 'QCMA', 'QMA(2)')
('p', 'A', 'QCMA', 'QMA(2)') => ('p', 'R', 'QCMA', 'QMA(2)')
('p', 'A', 'QCMA', 'QMA(2)') => ('p', 'AA', 'QCMA', 'QMA(2)')
('p', 'AA', 'QCMA', 'QMA(2)') => ('-d', 'AA', 'QCMA', 'QMA(2)')
('p', 'AA', 'QCMA', 'QMA(2)') => ('p', 'T', 'QCMA', 'QMA(2)')
('p', 'AA', 'QCMA', 'QMA(2)') => ('p', 'EA', 'QCMA', 'QMA(2)')
('p', 'AA', 'co.QCMA', 'co.QMA(2)') => ('-d', 'AA', 'co.QCMA', 'co.QMA(2)')
('p', 'AA', 'co.QCMA', 'co.QMA(2)') => ('p', 'T', 'co.QCMA', 'co.QMA(2)')
('p', 'AA', 'co.QCMA', 'co.QMA(2)') => ('p', 'EA', 'co.QCMA', 'co.QMA(2)')
('p', 'EA', 'co.QCMA', 'co.QMA(2)') => ('-d', 'EA', 'co.QCMA', 'co.QMA(2)')
('p', 'EA', 'QCMA', 'QMA(2)') => ('-d', 'EA', 'QCMA', 'QMA(2)')
('p', 'T', 'co.QCMA', 'co.QMA(2)') => ('-d', 'T', 'co.QCMA', 'co.QMA(2)')
('p', 'T', 'QCMA', 'QMA(2)') => ('-d', 'T', 'QCMA', 'QMA(2)')
('p', 'R', 'QCMA', 'QMA(2)') => ('-d', 'R', 'QCMA', 'QMA(2)')
('p', 'R', 'co.QCMA', 'co.QMA(2)') => ('-d', 'R', 'co.QCMA', 'co.QMA(2)')
('p', 'AA', 'co.QMA', 'co.QMA(2)') => ('-d', 'AA', 'co.QMA', 'co.QMA(2)')
('p', 'AA', 'co.QMA', 'co.QMA(2)') => ('p', 'T', 'co.QMA', 'co.QMA(2)')
('p', 'AA', 'co.QMA', 'co.QMA(2)') => ('p', 'EA', 'co.QMA', 'co.QMA(2)')
('p', 'AA', 'QMA', 'QMA(2)') => ('-d', 'AA', 'QMA', 'QMA(2)')
('p', 'AA', 'QMA', 'QMA(2)') => ('p', 'T', 'QMA', 'QMA(2)')
('p', 'AA', 'QMA', 'QMA(2)') => ('p', 'EA', 'QMA', 'QMA(2)')
('p', 'EA', 'QMA', 'QMA(2)') => ('-d', 'EA', 'QMA', 'QMA(2)')
('p', 'EA', 'QMA', 'QMA(2)') => ('p', 'E', 'QMA', 'QMA(2)')
('p', 'EA', 'co.QMA', 'co.QMA(2)') => ('-d', 'EA', 'co.QMA', 'co.QMA(2)')
('p', 'EA', 'co.QMA', 'co.QMA(2)') => ('p', 'E', 'co.QMA', 'co.QMA(2)')
('p', 'T', 'QMA', 'QMA(2)') => ('-d', 'T', 'QMA', 'QMA(2)')
('p', 'T', 'co.QMA', 'co.QMA(2)') => ('-d', 'T', 'co.QMA', 'co.QMA(2)')
('p', 'R', 'co.QMA', 'co.QMA(2)') => ('-d', 'R', 'co.QMA', 'co.QMA(2)')
('p', 'R', 'QMA', 'QMA(2)') => ('-d', 'R', 'QMA', 'QMA(2)')
('p', 'R', 'BPP', 'P') => ('-d', 'R', 'BPP', 'P')
('-p', 'R', 'co.RP', 'P') => ('-p', 'A', 'co.RP', 'P')
('-p', 'R', 'RP', 'P') => ('-p', 'A', 'RP', 'P')
('-p', 'R', 'RP', 'BPP') => ('-p', 'A', 'RP', 'BPP')
('-p', 'R', 'co.RP', 'BPP') => ('-p', 'A', 'co.RP', 'BPP')
('-p', 'R', 'ZPP', 'P') => ('-p', 'A', 'ZPP', 'P')
('-p', 'R', 'ZPP', 'BPP') => ('-p', 'A', 'ZPP', 'BPP')
('-d', 'R', 'co.NP/poly', 'ZPP') => ('-d', 'E', 'co.NP/poly', 'ZPP')
('-d', 'R', 'NP/poly', 'ZPP') => ('-d', 'E', 'NP/poly', 'ZPP')
('p', 'R', 'P', 'P') => ('-d', 'R', 'P', 'P')
('-p', 'R', 'NP', 'RP') => ('-p', 'A', 'NP', 'RP')
('-p', 'R', 'co.NP', 'co.RP') => ('-p', 'A', 'co.NP', 'co.RP')
