#!/usr/bin/python

from zoomodules import *
import subprocess, shutil, pickle

def main():
    info_file =  open('info.pickle', 'rb')
    info = pickle.load(info_file)
    info_file.close()
    knowledge = info[0]
    classes_keywords = info[1]
    prefs = info[2]
    op = info[3]
    q = info[4]
    redundancies = info[5]
    names = info[6]
    classes = info[7]
    tclosure = info[8]
    props = info[9]
    Hasse = info[10]

    knowledge_graph = make_knowledge_graph(knowledge)
    transitive_worlds = ['A', 'AA', 'R', 'T']
    colored_graph = {}
    gradient_list = {}
    table_names = {}
    hidden_names = set()
    for x in classes_keywords:
        if 'hidden' in classes_keywords[x]: hidden_names.add(x)
    for Rel in transitive_worlds:
        (colored_graph[Rel], table_names[Rel]) = make_colored_graph(knowledge_graph, Rel, prefs, hidden_names, op)
        gradient_list[Rel] = make_gradient_list(knowledge_graph, Rel, prefs,
                                                hidden_names, op, knowledge,
                                                colored_graph)

    output.main(classes_keywords, knowledge, q, redundancies, names, op,
                classes, tclosure, props, Hasse, colored_graph, gradient_list,
                table_names)

def generate_preference_hierarchy(classes_keywords):
    def is_prefnum_keyword(s):
        if s[0:10] != 'preferred(': return False
        if not str.isdigit(s[10:len(keyword)-1]): return False
        if s[len(keyword)-1] != ')': return False
        return True

    prefs = {}
    for x in classes_keywords:
        keyword_count = 0
        for keyword in classes_keywords[x]:
            if keyword == 'preferred':
                prefs[x] = 1
                keyword_count += 1
            if is_prefnum_keyword(keyword):
                prefs[x] = int(keyword[10:len(keyword)-1])
                keyword_count += 1
    pref_max = 0
    for x in prefs:
        if prefs[x] > pref_max: pref_max = prefs[x]
    for x in classes_keywords:
        if x not in prefs:
            if len(x.split('.')) > 1:
                prefs[x] = pref_max+2
            else: prefs[x] = pref_max+1

    return prefs

def make_knowledge_graph(knowledge):
    knowledge_graph = {}
    for (c, Rel, x, y) in knowledge:
        if c != 'p': continue
        if Rel not in knowledge_graph: knowledge_graph[Rel] = {}
        if x not in knowledge_graph[Rel]: knowledge_graph[Rel][x] = set()
        if knowledge[(c, Rel, x, y)]: knowledge_graph[Rel][x].add(y)
    return knowledge_graph

def make_colored_graph(knowledge_graph, Rel, prefs, hidden_names, op):
    eq_graph = {}
    for x in knowledge_graph[Rel]:
        eq_graph[x] = set()
        for y in knowledge_graph[Rel]:
            if x == y: continue
            if x in knowledge_graph[Rel][y]:
                if y in knowledge_graph[Rel][x]:
                    eq_graph[x].add(y)
    (q, names) = equalities.union_find(eq_graph, prefs)
    pure_names = get_pure_names(names, hidden_names)
    table_names = get_pure_names(names, hidden_names)
    cocap_names = set()
    for x in pure_names:
        for y in pure_names:
            if x == y: continue
            if x == q[op['cocap'][y]]: cocap_names.add(x)
    for x in cocap_names: pure_names.remove(x)
    colored_graph = {}
    for x in pure_names:
        colored_graph[x] = {}
        for color in ['black', 'blue', 'green', 'red']:
            colored_graph[x][color] = set()
    for x in pure_names:
        for y in pure_names:
            if x == y: continue
            draw_edge = True
            if y not in knowledge_graph[Rel][op['cocap'][x]]: draw_edge = False
            for z in pure_names:
                if z == x or z == y: continue
                if z in knowledge_graph[Rel][op['cocap'][x]]:
                    if y in knowledge_graph[Rel][op['cocap'][z]]:
                        draw_edge = False
                if y in knowledge_graph[Rel][x]:
                    if z in knowledge_graph[Rel][x]:
                        if y in knowledge_graph[Rel][z]:
                            draw_edge = False
                    if z in knowledge_graph[Rel][op['co'][x]]:
                        if op['co'][y] in knowledge_graph[Rel][z]:
                            draw_edge = False
                elif op['co'][y] in knowledge_graph[Rel][x]:
                    if z in knowledge_graph[Rel][op['co'][x]]:
                        if y in knowledge_graph[Rel][z]:
                            draw_edge = False
                    if z in knowledge_graph[Rel][x]:
                        if op['co'][y] in knowledge_graph[Rel][z]:
                            draw_edge = False
            if draw_edge:
                if y in knowledge_graph[Rel][x]:
                    if y in knowledge_graph[Rel][op['co'][x]]:
                        edge_color = 'black'
                    else:
                        edge_color = 'blue'
                elif y in knowledge_graph[Rel][op['co'][x]]:
                    edge_color = 'red'
                else:
                    edge_color = 'green'
                colored_graph[x][edge_color].add(y)
    return (colored_graph, table_names)

def make_gradient_list(knowledge_graph, Rel, prefs, hidden_names, op,
                       knowledge, colored_graph):
    names_list = sorted(colored_graph[Rel].keys())
    gradient_list = []
    for i in range(len(names_list)):
        gradient_list.append([])
        for j in range(len(names_list)):
            clicked_name = names_list[i]
            colored_name = names_list[j]
            gradient = output.get_gradient(clicked_name, colored_name, Rel,
                                           knowledge, op)
            gradient_list[i].append(gradient)
    return gradient_list
            

def get_pure_names(names, hidden_names):
    '''Get the pure names from a set of names; that is, names which are not in
    the set of hidden names and that do not involve the use of operators.
    '''
    pure_names = set()
    for x in names:
        if x in hidden_names: continue
        if len(x.split('.')) > 1: continue
        pure_names.add(x)
    return pure_names

main()
